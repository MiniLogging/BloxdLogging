"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[79],{14270:(g,w,q)=>{q.r(w),q.d(w,{FlowGraphPlayAnimationBlock:()=>i});var R=q(12877),o=q(12836),r=q(11128),S=q(14265);class i extends R.b{constructor(g){super(g,["animationLoop","animationEnd","animationGroupLoop"]),this.config=g,this.speed=this.registerDataInput("speed",o.w),this.loop=this.registerDataInput("loop",o.h),this.from=this.registerDataInput("from",o.w,0),this.to=this.registerDataInput("to",o.w),this.currentFrame=this.registerDataOutput("currentFrame",o.w),this.currentTime=this.registerDataOutput("currentTime",o.w),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",o.d),this.animationGroup=this.registerDataInput("animationGroup",o.d,null===g||void 0===g?void 0:g.animationGroup),this.animation=this.registerDataInput("animation",o.d),this.object=this.registerDataInput("object",o.d)}_preparePendingTasks(g){const w=this.animationGroup.getValue(g),q=this.animation.getValue(g);if(!w&&!q)return this._reportError(g,"No animation or animation group provided");{const o=this.currentAnimationGroup.getValue(g);o&&o!==w&&o.dispose();let r=w;if(q&&!r){const w=this.object.getValue(g);if(!w)return this._reportError(g,"No target object provided");const R=Array.isArray(q)?q:[q],o=R[0].name;r=new S.AnimationGroup("flowGraphAnimationGroup-"+o+"-"+w.name,g.configuration.Aw);let i=!1;const T=g._getGlobalContextVariable("interpolationAnimations",[]);for(const g of R)r.addTargetedAnimation(g,w),-1!==T.indexOf(g.uniqueId)&&(i=!0);i&&this._checkInterpolationDuplications(g,R,w)}const i=this.speed.getValue(g)||1,T=this.from.getValue(g)??0,z=this.to.getValue(g)||r.to,t=!isFinite(z)||this.loop.getValue(g);this.currentAnimationGroup.setValue(r,g);const m=g._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==m.indexOf(r.uniqueId)&&r.stop();try{r.start(t,i,T,z),r.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(g))),r.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(g))),r.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(g))),r.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(g))),m.push(r.uniqueId),g._setGlobalContextVariable("currentlyRunningAnimationGroups",m)}catch(R){this._reportError(g,R)}}}_reportError(g,w){super._reportError(g,w),this.currentFrame.setValue(-1,g),this.currentTime.setValue(-1,g)}_executeOnTick(g){const w=this.currentAnimationGroup.getValue(g);var q;w&&(this.currentFrame.setValue(w.getCurrentFrame(),g),this.currentTime.setValue((null===(q=w.animatables[0])||void 0===q?void 0:q.elapsedTime)??0,g))}_execute(g){this._startPendingTasks(g)}_onAnimationGroupEnd(g){this._removeFromCurrentlyRunning(g,this.currentAnimationGroup.getValue(g)),this._resetAfterCanceled(g),this.done._activateSignal(g)}_checkInterpolationDuplications(g,w,q){const R=g._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const o of R){const R=g.assetsContext.animationGroups.find((g=>g.uniqueId===o));if(R)for(const o of R.targetedAnimations)for(const r of w)o.animation.targetProperty===r.targetProperty&&o.target===q&&this._stopAnimationGroup(g,R)}}_stopAnimationGroup(g,w){w.stop(!0),w.dispose(),this._removeFromCurrentlyRunning(g,w)}_removeFromCurrentlyRunning(g,w){const q=g._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),R=q.indexOf(w.uniqueId);-1!==R&&(q.splice(R,1),g._setGlobalContextVariable("currentlyRunningAnimationGroups",q))}_cancelPendingTasks(g){const w=this.currentAnimationGroup.getValue(g);w&&this._stopAnimationGroup(g,w)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,r.g)("FlowGraphPlayAnimationBlock",i)}}]);