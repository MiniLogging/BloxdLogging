"use strict";(self.isj1uwvwrek=self.isj1uwvwrek||[]).push([[79],{16032:(I,x,L)=>{L.r(x),L.d(x,{FlowGraphPlayAnimationBlock:()=>p});var F=L(14537),X=L(14498),G=L(12938),Y=L(16029);class p extends F.d{constructor(I){super(I,["animationLoop","animationEnd","animationGroupLoop"]),this.config=I,this.speed=this.registerDataInput("speed",X.x),this.loop=this.registerDataInput("loop",X.i),this.from=this.registerDataInput("from",X.x,0),this.to=this.registerDataInput("to",X.x),this.currentFrame=this.registerDataOutput("currentFrame",X.x),this.currentTime=this.registerDataOutput("currentTime",X.x),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",X.e),this.animationGroup=this.registerDataInput("animationGroup",X.e,null===I||void 0===I?void 0:I.animationGroup),this.animation=this.registerDataInput("animation",X.e),this.object=this.registerDataInput("object",X.e)}_preparePendingTasks(I){const x=this.animationGroup.getValue(I),L=this.animation.getValue(I);if(!x&&!L)return this._reportError(I,"No animation or animation group provided");{const X=this.currentAnimationGroup.getValue(I);X&&X!==x&&X.dispose();let G=x;if(L&&!G){const x=this.object.getValue(I);if(!x)return this._reportError(I,"No target object provided");const F=Array.isArray(L)?L:[L],X=F[0].name;G=new Y.AnimationGroup("flowGraphAnimationGroup-"+X+"-"+x.name,I.configuration.qx);let p=!1;const B=I._getGlobalContextVariable("interpolationAnimations",[]);for(const I of F)G.addTargetedAnimation(I,x),-1!==B.indexOf(I.uniqueId)&&(p=!0);p&&this._checkInterpolationDuplications(I,F,x)}const p=this.speed.getValue(I)||1,B=this.from.getValue(I)??0,l=this.to.getValue(I)||G.to,W=!isFinite(l)||this.loop.getValue(I);this.currentAnimationGroup.setValue(G,I);const Q=I._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==Q.indexOf(G.uniqueId)&&G.stop();try{G.start(W,p,B,l),G.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(I))),G.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(I))),G.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(I))),G.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(I))),Q.push(G.uniqueId),I._setGlobalContextVariable("currentlyRunningAnimationGroups",Q)}catch(F){this._reportError(I,F)}}}_reportError(I,x){super._reportError(I,x),this.currentFrame.setValue(-1,I),this.currentTime.setValue(-1,I)}_executeOnTick(I){const x=this.currentAnimationGroup.getValue(I);var L;x&&(this.currentFrame.setValue(x.getCurrentFrame(),I),this.currentTime.setValue((null===(L=x.animatables[0])||void 0===L?void 0:L.elapsedTime)??0,I))}_execute(I){this._startPendingTasks(I)}_onAnimationGroupEnd(I){this._removeFromCurrentlyRunning(I,this.currentAnimationGroup.getValue(I)),this._resetAfterCanceled(I),this.done._activateSignal(I)}_checkInterpolationDuplications(I,x,L){const F=I._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const X of F){const F=I.assetsContext.animationGroups.find((I=>I.uniqueId===X));if(F)for(const X of F.targetedAnimations)for(const G of x)X.animation.targetProperty===G.targetProperty&&X.target===L&&this._stopAnimationGroup(I,F)}}_stopAnimationGroup(I,x){x.stop(!0),x.dispose(),this._removeFromCurrentlyRunning(I,x)}_removeFromCurrentlyRunning(I,x){const L=I._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),F=L.indexOf(x.uniqueId);-1!==F&&(L.splice(F,1),I._setGlobalContextVariable("currentlyRunningAnimationGroups",L))}_cancelPendingTasks(I){const x=this.currentAnimationGroup.getValue(I);x&&this._stopAnimationGroup(I,x)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,G.d)("FlowGraphPlayAnimationBlock",p)}}]);