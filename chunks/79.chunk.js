"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[79],{14228:(u,F,z)=>{z.r(F),z.d(F,{FlowGraphMultiGateBlock:()=>I});var p=z(668),b=z(12977),R=z(12952),c=z(12944);class I extends b.d{constructor(u){super(u),this.config=u,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",R.l,new c.d(-1)),this.setNumberOfOutputSignals(null===u||void 0===u?void 0:u.outputSignalCount)}_getNextIndex(u){if(u.includes(!1)||this.config.isLoop&&u.fill(!1),this.config.isRandom){const F=u.map(((u,F)=>u?-1:F)).filter((u=>-1!==u));return F.length?F[Math.floor(Math.random()*F.length)]:-1}return u.indexOf(!1)}setNumberOfOutputSignals(){let u=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>u;){const u=this.outputSignals.pop();u&&(u.disconnectFromAll(),this._unregisterSignalOutput(u.name))}for(;this.outputSignals.length<u;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(u,F){if(u._hasExecutionVariable(this,"indexesUsed")||u._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),F===this.reset)return u._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new c.d(-1),u);const z=u._getExecutionVariable(this,"indexesUsed",[]),p=this._getNextIndex(z);p>-1&&(this.lastIndex.setValue(new c.d(p),u),z[p]=!0,u._setExecutionVariable(this,"indexesUsed",z),this.outputSignals[p]._activateSignal(u))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(u){super.serialize(u),u.config.outputSignalCount=this.config.outputSignalCount,u.config.isRandom=this.config.isRandom,u.config.loop=this.config.isLoop,u.config.startIndex=this.config.startIndex}}(0,p.h)("FlowGraphMultiGateBlock",I)}}]);