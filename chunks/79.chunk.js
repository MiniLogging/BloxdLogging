"use strict";(self["9jl1vn4ei5r"]=self["9jl1vn4ei5r"]||[]).push([[79],{14925:(M,p,b)=>{b.r(p),b.d(p,{FlowGraphPlayAnimationBlock:()=>u});var Q=b(13516),q=b(13477),B=b(11757),k=b(14916);class u extends Q.b{constructor(M){super(M,["animationLoop","animationEnd","animationGroupLoop"]),this.config=M,this.speed=this.registerDataInput("speed",q.q),this.loop=this.registerDataInput("loop",q.d),this.from=this.registerDataInput("from",q.q,0),this.to=this.registerDataInput("to",q.q),this.currentFrame=this.registerDataOutput("currentFrame",q.q),this.currentTime=this.registerDataOutput("currentTime",q.q),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",q.c),this.animationGroup=this.registerDataInput("animationGroup",q.c,null===M||void 0===M?void 0:M.animationGroup),this.animation=this.registerDataInput("animation",q.c),this.object=this.registerDataInput("object",q.c)}_preparePendingTasks(M){const p=this.animationGroup.getValue(M),b=this.animation.getValue(M);if(!p&&!b)return this._reportError(M,"No animation or animation group provided");{const q=this.currentAnimationGroup.getValue(M);q&&q!==p&&q.dispose();let B=p;if(b&&!B){const p=this.object.getValue(M);if(!p)return this._reportError(M,"No target object provided");const Q=Array.isArray(b)?b:[b],q=Q[0].name;B=new k.AnimationGroup("flowGraphAnimationGroup-"+q+"-"+p.name,M.configuration.Kp);let u=!1;const T=M._getGlobalContextVariable("interpolationAnimations",[]);for(const M of Q)B.addTargetedAnimation(M,p),-1!==T.indexOf(M.uniqueId)&&(u=!0);u&&this._checkInterpolationDuplications(M,Q,p)}const u=this.speed.getValue(M)||1,T=this.from.getValue(M)??0,O=this.to.getValue(M)||B.to,H=!isFinite(O)||this.loop.getValue(M);this.currentAnimationGroup.setValue(B,M);const F=M._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==F.indexOf(B.uniqueId)&&B.stop();try{B.start(H,u,T,O),B.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(M))),B.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(M))),B.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(M))),B.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(M))),F.push(B.uniqueId),M._setGlobalContextVariable("currentlyRunningAnimationGroups",F)}catch(Q){this._reportError(M,Q)}}}_reportError(M,p){super._reportError(M,p),this.currentFrame.setValue(-1,M),this.currentTime.setValue(-1,M)}_executeOnTick(M){const p=this.currentAnimationGroup.getValue(M);var b;p&&(this.currentFrame.setValue(p.getCurrentFrame(),M),this.currentTime.setValue((null===(b=p.animatables[0])||void 0===b?void 0:b.elapsedTime)??0,M))}_execute(M){this._startPendingTasks(M)}_onAnimationGroupEnd(M){this._removeFromCurrentlyRunning(M,this.currentAnimationGroup.getValue(M)),this._resetAfterCanceled(M),this.done._activateSignal(M)}_checkInterpolationDuplications(M,p,b){const Q=M._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const q of Q){const Q=M.assetsContext.animationGroups.find((M=>M.uniqueId===q));if(Q)for(const q of Q.targetedAnimations)for(const B of p)q.animation.targetProperty===B.targetProperty&&q.target===b&&this._stopAnimationGroup(M,Q)}}_stopAnimationGroup(M,p){p.stop(!0),p.dispose(),this._removeFromCurrentlyRunning(M,p)}_removeFromCurrentlyRunning(M,p){const b=M._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),Q=b.indexOf(p.uniqueId);-1!==Q&&(b.splice(Q,1),M._setGlobalContextVariable("currentlyRunningAnimationGroups",b))}_cancelPendingTasks(M){const p=this.currentAnimationGroup.getValue(M);p&&this._stopAnimationGroup(M,p)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,B.g)("FlowGraphPlayAnimationBlock",u)}}]);