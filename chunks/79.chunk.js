"use strict";(self["80dd64vgxnn"]=self["80dd64vgxnn"]||[]).push([[79],{15755:(mm,o,u)=>{u.r(o),u.d(o,{FlowGraphPlayAnimationBlock:()=>w});var f=u(14299),B=u(14257),O=u(12702),r=u(15753);class w extends f.c{constructor(mm){super(mm,["animationLoop","animationEnd","animationGroupLoop"]),this.config=mm,this.speed=this.registerDataInput("speed",B.r),this.loop=this.registerDataInput("loop",B.f),this.from=this.registerDataInput("from",B.r,0),this.to=this.registerDataInput("to",B.r),this.currentFrame=this.registerDataOutput("currentFrame",B.r),this.currentTime=this.registerDataOutput("currentTime",B.r),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",B.b),this.animationGroup=this.registerDataInput("animationGroup",B.b,null===mm||void 0===mm?void 0:mm.animationGroup),this.animation=this.registerDataInput("animation",B.b),this.object=this.registerDataInput("object",B.b)}_preparePendingTasks(mm){const o=this.animationGroup.getValue(mm),u=this.animation.getValue(mm);if(!o&&!u)return this._reportError(mm,"No animation or animation group provided");{const B=this.currentAnimationGroup.getValue(mm);B&&B!==o&&B.dispose();let O=o;if(u&&!O){const o=this.object.getValue(mm);if(!o)return this._reportError(mm,"No target object provided");const f=Array.isArray(u)?u:[u],B=f[0].name;O=new r.AnimationGroup("flowGraphAnimationGroup-"+B+"-"+o.name,mm.configuration.bo);let w=!1;const p=mm._getGlobalContextVariable("interpolationAnimations",[]);for(const mm of f)O.addTargetedAnimation(mm,o),-1!==p.indexOf(mm.uniqueId)&&(w=!0);w&&this._checkInterpolationDuplications(mm,f,o)}const w=this.speed.getValue(mm)||1,p=this.from.getValue(mm)??0,K=this.to.getValue(mm)||O.to,z=!isFinite(K)||this.loop.getValue(mm);this.currentAnimationGroup.setValue(O,mm);const Y=mm._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==Y.indexOf(O.uniqueId)&&O.stop();try{O.start(z,w,p,K),O.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(mm))),O.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(mm))),O.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(mm))),O.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(mm))),Y.push(O.uniqueId),mm._setGlobalContextVariable("currentlyRunningAnimationGroups",Y)}catch(f){this._reportError(mm,f)}}}_reportError(mm,o){super._reportError(mm,o),this.currentFrame.setValue(-1,mm),this.currentTime.setValue(-1,mm)}_executeOnTick(mm){const o=this.currentAnimationGroup.getValue(mm);var u;o&&(this.currentFrame.setValue(o.getCurrentFrame(),mm),this.currentTime.setValue((null===(u=o.animatables[0])||void 0===u?void 0:u.elapsedTime)??0,mm))}_execute(mm){this._startPendingTasks(mm)}_onAnimationGroupEnd(mm){this._removeFromCurrentlyRunning(mm,this.currentAnimationGroup.getValue(mm)),this._resetAfterCanceled(mm),this.done._activateSignal(mm)}_checkInterpolationDuplications(mm,o,u){const f=mm._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const B of f){const f=mm.assetsContext.animationGroups.find((mm=>mm.uniqueId===B));if(f)for(const B of f.targetedAnimations)for(const O of o)B.animation.targetProperty===O.targetProperty&&B.target===u&&this._stopAnimationGroup(mm,f)}}_stopAnimationGroup(mm,o){o.stop(!0),o.dispose(),this._removeFromCurrentlyRunning(mm,o)}_removeFromCurrentlyRunning(mm,o){const u=mm._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),f=u.indexOf(o.uniqueId);-1!==f&&(u.splice(f,1),mm._setGlobalContextVariable("currentlyRunningAnimationGroups",u))}_cancelPendingTasks(mm){const o=this.currentAnimationGroup.getValue(mm);o&&this._stopAnimationGroup(mm,o)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,O.c)("FlowGraphPlayAnimationBlock",w)}}]);