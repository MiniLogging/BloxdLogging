"use strict";(self.rsqbdnwe5e=self.rsqbdnwe5e||[]).push([[79],{15488:(N,p,T)=>{T.r(p),T.d(p,{FlowGraphPlayAnimationBlock:()=>X});var A=T(14127),a=T(14082),C=T(12331),U=T(15484);class X extends A.e{constructor(N){super(N,["animationLoop","animationEnd","animationGroupLoop"]),this.config=N,this.speed=this.registerDataInput("speed",a.r),this.loop=this.registerDataInput("loop",a.g),this.from=this.registerDataInput("from",a.r,0),this.to=this.registerDataInput("to",a.r),this.currentFrame=this.registerDataOutput("currentFrame",a.r),this.currentTime=this.registerDataOutput("currentTime",a.r),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",a.d),this.animationGroup=this.registerDataInput("animationGroup",a.d,null===N||void 0===N?void 0:N.animationGroup),this.animation=this.registerDataInput("animation",a.d),this.object=this.registerDataInput("object",a.d)}_preparePendingTasks(N){const p=this.animationGroup.getValue(N),T=this.animation.getValue(N);if(!p&&!T)return this._reportError(N,"No animation or animation group provided");{const a=this.currentAnimationGroup.getValue(N);a&&a!==p&&a.dispose();let C=p;if(T&&!C){const p=this.object.getValue(N);if(!p)return this._reportError(N,"No target object provided");const A=Array.isArray(T)?T:[T],a=A[0].name;C=new U.AnimationGroup("flowGraphAnimationGroup-"+a+"-"+p.name,N.configuration.Lp);let X=!1;const y=N._getGlobalContextVariable("interpolationAnimations",[]);for(const N of A)C.addTargetedAnimation(N,p),-1!==y.indexOf(N.uniqueId)&&(X=!0);X&&this._checkInterpolationDuplications(N,A,p)}const X=this.speed.getValue(N)||1,y=this.from.getValue(N)??0,e=this.to.getValue(N)||C.to,H=!isFinite(e)||this.loop.getValue(N);this.currentAnimationGroup.setValue(C,N);const M=N._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==M.indexOf(C.uniqueId)&&C.stop();try{C.start(H,X,y,e),C.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(N))),C.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(N))),C.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(N))),C.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(N))),M.push(C.uniqueId),N._setGlobalContextVariable("currentlyRunningAnimationGroups",M)}catch(A){this._reportError(N,A)}}}_reportError(N,p){super._reportError(N,p),this.currentFrame.setValue(-1,N),this.currentTime.setValue(-1,N)}_executeOnTick(N){const p=this.currentAnimationGroup.getValue(N);var T;p&&(this.currentFrame.setValue(p.getCurrentFrame(),N),this.currentTime.setValue((null===(T=p.animatables[0])||void 0===T?void 0:T.elapsedTime)??0,N))}_execute(N){this._startPendingTasks(N)}_onAnimationGroupEnd(N){this._removeFromCurrentlyRunning(N,this.currentAnimationGroup.getValue(N)),this._resetAfterCanceled(N),this.done._activateSignal(N)}_checkInterpolationDuplications(N,p,T){const A=N._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const a of A){const A=N.assetsContext.animationGroups.find((N=>N.uniqueId===a));if(A)for(const a of A.targetedAnimations)for(const C of p)a.animation.targetProperty===C.targetProperty&&a.target===T&&this._stopAnimationGroup(N,A)}}_stopAnimationGroup(N,p){p.stop(!0),p.dispose(),this._removeFromCurrentlyRunning(N,p)}_removeFromCurrentlyRunning(N,p){const T=N._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),A=T.indexOf(p.uniqueId);-1!==A&&(T.splice(A,1),N._setGlobalContextVariable("currentlyRunningAnimationGroups",T))}_cancelPendingTasks(N){const p=this.currentAnimationGroup.getValue(N);p&&this._stopAnimationGroup(N,p)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,C.d)("FlowGraphPlayAnimationBlock",X)}}]);