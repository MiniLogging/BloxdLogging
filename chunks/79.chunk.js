"use strict";(self["269hv5nclphh"]=self["269hv5nclphh"]||[]).push([[79],{15551:(E,H,d)=>{d.r(H),d.d(H,{FlowGraphPlayAnimationBlock:()=>l});var n=d(14137),Z=d(14103),I=d(12344),g=d(15548);class l extends n.b{constructor(E){super(E,["animationLoop","animationEnd","animationGroupLoop"]),this.config=E,this.speed=this.registerDataInput("speed",Z.r),this.loop=this.registerDataInput("loop",Z.h),this.from=this.registerDataInput("from",Z.r,0),this.to=this.registerDataInput("to",Z.r),this.currentFrame=this.registerDataOutput("currentFrame",Z.r),this.currentTime=this.registerDataOutput("currentTime",Z.r),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",Z.e),this.animationGroup=this.registerDataInput("animationGroup",Z.e,null===E||void 0===E?void 0:E.animationGroup),this.animation=this.registerDataInput("animation",Z.e),this.object=this.registerDataInput("object",Z.e)}_preparePendingTasks(E){const H=this.animationGroup.getValue(E),d=this.animation.getValue(E);if(!H&&!d)return this._reportError(E,"No animation or animation group provided");{const Z=this.currentAnimationGroup.getValue(E);Z&&Z!==H&&Z.dispose();let I=H;if(d&&!I){const H=this.object.getValue(E);if(!H)return this._reportError(E,"No target object provided");const n=Array.isArray(d)?d:[d],Z=n[0].name;I=new g.AnimationGroup("flowGraphAnimationGroup-"+Z+"-"+H.name,E.configuration.QH);let l=!1;const r=E._getGlobalContextVariable("interpolationAnimations",[]);for(const E of n)I.addTargetedAnimation(E,H),-1!==r.indexOf(E.uniqueId)&&(l=!0);l&&this._checkInterpolationDuplications(E,n,H)}const l=this.speed.getValue(E)||1,r=this.from.getValue(E)??0,t=this.to.getValue(E)||I.to,S=!isFinite(t)||this.loop.getValue(E);this.currentAnimationGroup.setValue(I,E);const M=E._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==M.indexOf(I.uniqueId)&&I.stop();try{I.start(S,l,r,t),I.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(E))),I.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(E))),I.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(E))),I.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(E))),M.push(I.uniqueId),E._setGlobalContextVariable("currentlyRunningAnimationGroups",M)}catch(n){this._reportError(E,n)}}}_reportError(E,H){super._reportError(E,H),this.currentFrame.setValue(-1,E),this.currentTime.setValue(-1,E)}_executeOnTick(E){const H=this.currentAnimationGroup.getValue(E);var d;H&&(this.currentFrame.setValue(H.getCurrentFrame(),E),this.currentTime.setValue((null===(d=H.animatables[0])||void 0===d?void 0:d.elapsedTime)??0,E))}_execute(E){this._startPendingTasks(E)}_onAnimationGroupEnd(E){this._removeFromCurrentlyRunning(E,this.currentAnimationGroup.getValue(E)),this._resetAfterCanceled(E),this.done._activateSignal(E)}_checkInterpolationDuplications(E,H,d){const n=E._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const Z of n){const n=E.assetsContext.animationGroups.find((E=>E.uniqueId===Z));if(n)for(const Z of n.targetedAnimations)for(const I of H)Z.animation.targetProperty===I.targetProperty&&Z.target===d&&this._stopAnimationGroup(E,n)}}_stopAnimationGroup(E,H){H.stop(!0),H.dispose(),this._removeFromCurrentlyRunning(E,H)}_removeFromCurrentlyRunning(E,H){const d=E._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),n=d.indexOf(H.uniqueId);-1!==n&&(d.splice(n,1),E._setGlobalContextVariable("currentlyRunningAnimationGroups",d))}_cancelPendingTasks(E){const H=this.currentAnimationGroup.getValue(E);H&&this._stopAnimationGroup(E,H)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,I.e)("FlowGraphPlayAnimationBlock",l)}}]);