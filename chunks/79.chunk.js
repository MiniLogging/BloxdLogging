"use strict";(self.ra6kpa9z1sg=self.ra6kpa9z1sg||[]).push([[79],{15951:(p,b,M)=>{M.r(b),M.d(b,{FlowGraphPlayAnimationBlock:()=>P});var h=M(14362),Q=M(14316),mp=M(12730),y=M(15948);class P extends h.d{constructor(p){super(p,["animationLoop","animationEnd","animationGroupLoop"]),this.config=p,this.speed=this.registerDataInput("speed",Q.t),this.loop=this.registerDataInput("loop",Q.g),this.from=this.registerDataInput("from",Q.t,0),this.to=this.registerDataInput("to",Q.t),this.currentFrame=this.registerDataOutput("currentFrame",Q.t),this.currentTime=this.registerDataOutput("currentTime",Q.t),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",Q.e),this.animationGroup=this.registerDataInput("animationGroup",Q.e,null===p||void 0===p?void 0:p.animationGroup),this.animation=this.registerDataInput("animation",Q.e),this.object=this.registerDataInput("object",Q.e)}_preparePendingTasks(p){const b=this.animationGroup.getValue(p),M=this.animation.getValue(p);if(!b&&!M)return this._reportError(p,"No animation or animation group provided");{const Q=this.currentAnimationGroup.getValue(p);Q&&Q!==b&&Q.dispose();let mp=b;if(M&&!mp){const b=this.object.getValue(p);if(!b)return this._reportError(p,"No target object provided");const h=Array.isArray(M)?M:[M],Q=h[0].name;mp=new y.AnimationGroup("flowGraphAnimationGroup-"+Q+"-"+b.name,p.configuration.yM);let P=!1;const w=p._getGlobalContextVariable("interpolationAnimations",[]);for(const p of h)mp.addTargetedAnimation(p,b),-1!==w.indexOf(p.uniqueId)&&(P=!0);P&&this._checkInterpolationDuplications(p,h,b)}const P=this.speed.getValue(p)||1,w=this.from.getValue(p)??0,t=this.to.getValue(p)||mp.to,z=!isFinite(t)||this.loop.getValue(p);this.currentAnimationGroup.setValue(mp,p);const x=p._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==x.indexOf(mp.uniqueId)&&mp.stop();try{mp.start(z,P,w,t),mp.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(p))),mp.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(p))),mp.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(p))),mp.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(p))),x.push(mp.uniqueId),p._setGlobalContextVariable("currentlyRunningAnimationGroups",x)}catch(h){this._reportError(p,h)}}}_reportError(p,b){super._reportError(p,b),this.currentFrame.setValue(-1,p),this.currentTime.setValue(-1,p)}_executeOnTick(p){const b=this.currentAnimationGroup.getValue(p);var M;b&&(this.currentFrame.setValue(b.getCurrentFrame(),p),this.currentTime.setValue((null===(M=b.animatables[0])||void 0===M?void 0:M.elapsedTime)??0,p))}_execute(p){this._startPendingTasks(p)}_onAnimationGroupEnd(p){this._removeFromCurrentlyRunning(p,this.currentAnimationGroup.getValue(p)),this._resetAfterCanceled(p),this.done._activateSignal(p)}_checkInterpolationDuplications(p,b,M){const h=p._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const Q of h){const h=p.assetsContext.animationGroups.find((p=>p.uniqueId===Q));if(h)for(const Q of h.targetedAnimations)for(const mp of b)Q.animation.targetProperty===mp.targetProperty&&Q.target===M&&this._stopAnimationGroup(p,h)}}_stopAnimationGroup(p,b){b.stop(!0),b.dispose(),this._removeFromCurrentlyRunning(p,b)}_removeFromCurrentlyRunning(p,b){const M=p._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),h=M.indexOf(b.uniqueId);-1!==h&&(M.splice(h,1),p._setGlobalContextVariable("currentlyRunningAnimationGroups",M))}_cancelPendingTasks(p){const b=this.currentAnimationGroup.getValue(p);b&&this._stopAnimationGroup(p,b)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,mp.c)("FlowGraphPlayAnimationBlock",P)}}]);