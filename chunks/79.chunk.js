"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[79],{13954:(J,T,b)=>{b.r(T),b.d(T,{FlowGraphMultiGateBlock:()=>Y});var q=b(639),t=b(12620),j=b(12603),B=b(12598);class Y extends t.c{constructor(J){super(J),this.config=J,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",j.i,new B.e(-1)),this.setNumberOfOutputSignals(null===J||void 0===J?void 0:J.outputSignalCount)}_getNextIndex(J){if(J.includes(!1)||this.config.isLoop&&J.fill(!1),this.config.isRandom){const T=J.map(((J,T)=>J?-1:T)).filter((J=>-1!==J));return T.length?T[Math.floor(Math.random()*T.length)]:-1}return J.indexOf(!1)}setNumberOfOutputSignals(){let J=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>J;){const J=this.outputSignals.pop();J&&(J.disconnectFromAll(),this._unregisterSignalOutput(J.name))}for(;this.outputSignals.length<J;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(J,T){if(J._hasExecutionVariable(this,"indexesUsed")||J._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),T===this.reset)return J._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new B.e(-1),J);const b=J._getExecutionVariable(this,"indexesUsed",[]),q=this._getNextIndex(b);q>-1&&(this.lastIndex.setValue(new B.e(q),J),b[q]=!0,J._setExecutionVariable(this,"indexesUsed",b),this.outputSignals[q]._activateSignal(J))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(J){super.serialize(J),J.config.outputSignalCount=this.config.outputSignalCount,J.config.isRandom=this.config.isRandom,J.config.loop=this.config.isLoop,J.config.startIndex=this.config.startIndex}}(0,q.g)("FlowGraphMultiGateBlock",Y)}}]);