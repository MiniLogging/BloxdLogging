"use strict";(self.hbnkweqmycf=self.hbnkweqmycf||[]).push([[79],{14794:(F,P,f)=>{f.r(P),f.d(P,{FlowGraphPlayAnimationBlock:()=>A});var c=f(13307),N=f(13265),q=f(11587),H=f(14792);class A extends c.c{constructor(F){super(F,["animationLoop","animationEnd","animationGroupLoop"]),this.config=F,this.speed=this.registerDataInput("speed",N.o),this.loop=this.registerDataInput("loop",N.g),this.from=this.registerDataInput("from",N.o,0),this.to=this.registerDataInput("to",N.o),this.currentFrame=this.registerDataOutput("currentFrame",N.o),this.currentTime=this.registerDataOutput("currentTime",N.o),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",N.c),this.animationGroup=this.registerDataInput("animationGroup",N.c,null===F||void 0===F?void 0:F.animationGroup),this.animation=this.registerDataInput("animation",N.c),this.object=this.registerDataInput("object",N.c)}_preparePendingTasks(F){const P=this.animationGroup.getValue(F),f=this.animation.getValue(F);if(!P&&!f)return this._reportError(F,"No animation or animation group provided");{const N=this.currentAnimationGroup.getValue(F);N&&N!==P&&N.dispose();let q=P;if(f&&!q){const P=this.object.getValue(F);if(!P)return this._reportError(F,"No target object provided");const c=Array.isArray(f)?f:[f],N=c[0].name;q=new H.AnimationGroup("flowGraphAnimationGroup-"+N+"-"+P.name,F.configuration.LP);let A=!1;const o=F._getGlobalContextVariable("interpolationAnimations",[]);for(const F of c)q.addTargetedAnimation(F,P),-1!==o.indexOf(F.uniqueId)&&(A=!0);A&&this._checkInterpolationDuplications(F,c,P)}const A=this.speed.getValue(F)||1,o=this.from.getValue(F)??0,j=this.to.getValue(F)||q.to,i=!isFinite(j)||this.loop.getValue(F);this.currentAnimationGroup.setValue(q,F);const u=F._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==u.indexOf(q.uniqueId)&&q.stop();try{q.start(i,A,o,j),q.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(F))),q.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(F))),q.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(F))),q.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(F))),u.push(q.uniqueId),F._setGlobalContextVariable("currentlyRunningAnimationGroups",u)}catch(c){this._reportError(F,c)}}}_reportError(F,P){super._reportError(F,P),this.currentFrame.setValue(-1,F),this.currentTime.setValue(-1,F)}_executeOnTick(F){const P=this.currentAnimationGroup.getValue(F);var f;P&&(this.currentFrame.setValue(P.getCurrentFrame(),F),this.currentTime.setValue((null===(f=P.animatables[0])||void 0===f?void 0:f.elapsedTime)??0,F))}_execute(F){this._startPendingTasks(F)}_onAnimationGroupEnd(F){this._removeFromCurrentlyRunning(F,this.currentAnimationGroup.getValue(F)),this._resetAfterCanceled(F),this.done._activateSignal(F)}_checkInterpolationDuplications(F,P,f){const c=F._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const N of c){const c=F.assetsContext.animationGroups.find((F=>F.uniqueId===N));if(c)for(const N of c.targetedAnimations)for(const q of P)N.animation.targetProperty===q.targetProperty&&N.target===f&&this._stopAnimationGroup(F,c)}}_stopAnimationGroup(F,P){P.stop(!0),P.dispose(),this._removeFromCurrentlyRunning(F,P)}_removeFromCurrentlyRunning(F,P){const f=F._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),c=f.indexOf(P.uniqueId);-1!==c&&(f.splice(c,1),F._setGlobalContextVariable("currentlyRunningAnimationGroups",f))}_cancelPendingTasks(F){const P=this.currentAnimationGroup.getValue(F);P&&this._stopAnimationGroup(F,P)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,q.f)("FlowGraphPlayAnimationBlock",A)}}]);