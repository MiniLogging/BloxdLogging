"use strict";(self["1xyrlsr8vb9"]=self["1xyrlsr8vb9"]||[]).push([[79],{15307:(I,O,C)=>{C.r(O),C.d(O,{FlowGraphPlayAnimationBlock:()=>S});var j=C(13938),K=C(13886),i=C(12226),y=C(15305);class S extends j.b{constructor(I){super(I,["animationLoop","animationEnd","animationGroupLoop"]),this.config=I,this.speed=this.registerDataInput("speed",K.u),this.loop=this.registerDataInput("loop",K.g),this.from=this.registerDataInput("from",K.u,0),this.to=this.registerDataInput("to",K.u),this.currentFrame=this.registerDataOutput("currentFrame",K.u),this.currentTime=this.registerDataOutput("currentTime",K.u),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",K.d),this.animationGroup=this.registerDataInput("animationGroup",K.d,null===I||void 0===I?void 0:I.animationGroup),this.animation=this.registerDataInput("animation",K.d),this.object=this.registerDataInput("object",K.d)}_preparePendingTasks(I){const O=this.animationGroup.getValue(I),C=this.animation.getValue(I);if(!O&&!C)return this._reportError(I,"No animation or animation group provided");{const K=this.currentAnimationGroup.getValue(I);K&&K!==O&&K.dispose();let i=O;if(C&&!i){const O=this.object.getValue(I);if(!O)return this._reportError(I,"No target object provided");const j=Array.isArray(C)?C:[C],K=j[0].name;i=new y.AnimationGroup("flowGraphAnimationGroup-"+K+"-"+O.name,I.configuration.hO);let S=!1;const U=I._getGlobalContextVariable("interpolationAnimations",[]);for(const I of j)i.addTargetedAnimation(I,O),-1!==U.indexOf(I.uniqueId)&&(S=!0);S&&this._checkInterpolationDuplications(I,j,O)}const S=this.speed.getValue(I)||1,U=this.from.getValue(I)??0,p=this.to.getValue(I)||i.to,N=!isFinite(p)||this.loop.getValue(I);this.currentAnimationGroup.setValue(i,I);const Q=I._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==Q.indexOf(i.uniqueId)&&i.stop();try{i.start(N,S,U,p),i.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(I))),i.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(I))),i.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(I))),i.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(I))),Q.push(i.uniqueId),I._setGlobalContextVariable("currentlyRunningAnimationGroups",Q)}catch(j){this._reportError(I,j)}}}_reportError(I,O){super._reportError(I,O),this.currentFrame.setValue(-1,I),this.currentTime.setValue(-1,I)}_executeOnTick(I){const O=this.currentAnimationGroup.getValue(I);var C;O&&(this.currentFrame.setValue(O.getCurrentFrame(),I),this.currentTime.setValue((null===(C=O.animatables[0])||void 0===C?void 0:C.elapsedTime)??0,I))}_execute(I){this._startPendingTasks(I)}_onAnimationGroupEnd(I){this._removeFromCurrentlyRunning(I,this.currentAnimationGroup.getValue(I)),this._resetAfterCanceled(I),this.done._activateSignal(I)}_checkInterpolationDuplications(I,O,C){const j=I._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const K of j){const j=I.assetsContext.animationGroups.find((I=>I.uniqueId===K));if(j)for(const K of j.targetedAnimations)for(const i of O)K.animation.targetProperty===i.targetProperty&&K.target===C&&this._stopAnimationGroup(I,j)}}_stopAnimationGroup(I,O){O.stop(!0),O.dispose(),this._removeFromCurrentlyRunning(I,O)}_removeFromCurrentlyRunning(I,O){const C=I._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),j=C.indexOf(O.uniqueId);-1!==j&&(C.splice(j,1),I._setGlobalContextVariable("currentlyRunningAnimationGroups",C))}_cancelPendingTasks(I){const O=this.currentAnimationGroup.getValue(I);O&&this._stopAnimationGroup(I,O)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,i.e)("FlowGraphPlayAnimationBlock",S)}}]);