"use strict";(self.pp3k1ov3ibi=self.pp3k1ov3ibi||[]).push([[79],{15554:(M,Z,P)=>{P.r(Z),P.d(Z,{FlowGraphPlayAnimationBlock:()=>G});var x=P(14115),c=P(14073),w=P(12317),v=P(15547);class G extends x.e{constructor(M){super(M,["animationLoop","animationEnd","animationGroupLoop"]),this.config=M,this.speed=this.registerDataInput("speed",c.u),this.loop=this.registerDataInput("loop",c.g),this.from=this.registerDataInput("from",c.u,0),this.to=this.registerDataInput("to",c.u),this.currentFrame=this.registerDataOutput("currentFrame",c.u),this.currentTime=this.registerDataOutput("currentTime",c.u),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",c.e),this.animationGroup=this.registerDataInput("animationGroup",c.e,null===M||void 0===M?void 0:M.animationGroup),this.animation=this.registerDataInput("animation",c.e),this.object=this.registerDataInput("object",c.e)}_preparePendingTasks(M){const Z=this.animationGroup.getValue(M),P=this.animation.getValue(M);if(!Z&&!P)return this._reportError(M,"No animation or animation group provided");{const c=this.currentAnimationGroup.getValue(M);c&&c!==Z&&c.dispose();let w=Z;if(P&&!w){const Z=this.object.getValue(M);if(!Z)return this._reportError(M,"No target object provided");const x=Array.isArray(P)?P:[P],c=x[0].name;w=new v.AnimationGroup("flowGraphAnimationGroup-"+c+"-"+Z.name,M.configuration.nZ);let G=!1;const mM=M._getGlobalContextVariable("interpolationAnimations",[]);for(const M of x)w.addTargetedAnimation(M,Z),-1!==mM.indexOf(M.uniqueId)&&(G=!0);G&&this._checkInterpolationDuplications(M,x,Z)}const G=this.speed.getValue(M)||1,mM=this.from.getValue(M)??0,K=this.to.getValue(M)||w.to,d=!isFinite(K)||this.loop.getValue(M);this.currentAnimationGroup.setValue(w,M);const O=M._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==O.indexOf(w.uniqueId)&&w.stop();try{w.start(d,G,mM,K),w.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(M))),w.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(M))),w.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(M))),w.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(M))),O.push(w.uniqueId),M._setGlobalContextVariable("currentlyRunningAnimationGroups",O)}catch(x){this._reportError(M,x)}}}_reportError(M,Z){super._reportError(M,Z),this.currentFrame.setValue(-1,M),this.currentTime.setValue(-1,M)}_executeOnTick(M){const Z=this.currentAnimationGroup.getValue(M);var P;Z&&(this.currentFrame.setValue(Z.getCurrentFrame(),M),this.currentTime.setValue((null===(P=Z.animatables[0])||void 0===P?void 0:P.elapsedTime)??0,M))}_execute(M){this._startPendingTasks(M)}_onAnimationGroupEnd(M){this._removeFromCurrentlyRunning(M,this.currentAnimationGroup.getValue(M)),this._resetAfterCanceled(M),this.done._activateSignal(M)}_checkInterpolationDuplications(M,Z,P){const x=M._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const c of x){const x=M.assetsContext.animationGroups.find((M=>M.uniqueId===c));if(x)for(const c of x.targetedAnimations)for(const w of Z)c.animation.targetProperty===w.targetProperty&&c.target===P&&this._stopAnimationGroup(M,x)}}_stopAnimationGroup(M,Z){Z.stop(!0),Z.dispose(),this._removeFromCurrentlyRunning(M,Z)}_removeFromCurrentlyRunning(M,Z){const P=M._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),x=P.indexOf(Z.uniqueId);-1!==x&&(P.splice(x,1),M._setGlobalContextVariable("currentlyRunningAnimationGroups",P))}_cancelPendingTasks(M){const Z=this.currentAnimationGroup.getValue(M);Z&&this._stopAnimationGroup(M,Z)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,w.g)("FlowGraphPlayAnimationBlock",G)}}]);