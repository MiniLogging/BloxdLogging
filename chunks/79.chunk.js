"use strict";(self.u4k1rqylno=self.u4k1rqylno||[]).push([[79],{14840:(e,E,H)=>{H.r(E),H.d(E,{FlowGraphPlayAnimationBlock:()=>M});var N=H(13467),u=H(13415),z=H(11690),P=H(14837);class M extends N.b{constructor(e){super(e,["animationLoop","animationEnd","animationGroupLoop"]),this.config=e,this.speed=this.registerDataInput("speed",u.t),this.loop=this.registerDataInput("loop",u.f),this.from=this.registerDataInput("from",u.t,0),this.to=this.registerDataInput("to",u.t),this.currentFrame=this.registerDataOutput("currentFrame",u.t),this.currentTime=this.registerDataOutput("currentTime",u.t),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",u.b),this.animationGroup=this.registerDataInput("animationGroup",u.b,null===e||void 0===e?void 0:e.animationGroup),this.animation=this.registerDataInput("animation",u.b),this.object=this.registerDataInput("object",u.b)}_preparePendingTasks(e){const E=this.animationGroup.getValue(e),H=this.animation.getValue(e);if(!E&&!H)return this._reportError(e,"No animation or animation group provided");{const u=this.currentAnimationGroup.getValue(e);u&&u!==E&&u.dispose();let z=E;if(H&&!z){const E=this.object.getValue(e);if(!E)return this._reportError(e,"No target object provided");const N=Array.isArray(H)?H:[H],u=N[0].name;z=new P.AnimationGroup("flowGraphAnimationGroup-"+u+"-"+E.name,e.configuration.hE);let M=!1;const D=e._getGlobalContextVariable("interpolationAnimations",[]);for(const e of N)z.addTargetedAnimation(e,E),-1!==D.indexOf(e.uniqueId)&&(M=!0);M&&this._checkInterpolationDuplications(e,N,E)}const M=this.speed.getValue(e)||1,D=this.from.getValue(e)??0,A=this.to.getValue(e)||z.to,C=!isFinite(A)||this.loop.getValue(e);this.currentAnimationGroup.setValue(z,e);const i=e._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==i.indexOf(z.uniqueId)&&z.stop();try{z.start(C,M,D,A),z.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(e))),z.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(e))),z.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(e))),z.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(e))),i.push(z.uniqueId),e._setGlobalContextVariable("currentlyRunningAnimationGroups",i)}catch(N){this._reportError(e,N)}}}_reportError(e,E){super._reportError(e,E),this.currentFrame.setValue(-1,e),this.currentTime.setValue(-1,e)}_executeOnTick(e){const E=this.currentAnimationGroup.getValue(e);var H;E&&(this.currentFrame.setValue(E.getCurrentFrame(),e),this.currentTime.setValue((null===(H=E.animatables[0])||void 0===H?void 0:H.elapsedTime)??0,e))}_execute(e){this._startPendingTasks(e)}_onAnimationGroupEnd(e){this._removeFromCurrentlyRunning(e,this.currentAnimationGroup.getValue(e)),this._resetAfterCanceled(e),this.done._activateSignal(e)}_checkInterpolationDuplications(e,E,H){const N=e._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const u of N){const N=e.assetsContext.animationGroups.find((e=>e.uniqueId===u));if(N)for(const u of N.targetedAnimations)for(const z of E)u.animation.targetProperty===z.targetProperty&&u.target===H&&this._stopAnimationGroup(e,N)}}_stopAnimationGroup(e,E){E.stop(!0),E.dispose(),this._removeFromCurrentlyRunning(e,E)}_removeFromCurrentlyRunning(e,E){const H=e._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),N=H.indexOf(E.uniqueId);-1!==N&&(H.splice(N,1),e._setGlobalContextVariable("currentlyRunningAnimationGroups",H))}_cancelPendingTasks(e){const E=this.currentAnimationGroup.getValue(e);E&&this._stopAnimationGroup(e,E)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,z.g)("FlowGraphPlayAnimationBlock",M)}}]);