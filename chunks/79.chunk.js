"use strict";(self.zy41qorie9=self.zy41qorie9||[]).push([[79],{15305:(Z,l,C)=>{C.r(l),C.d(l,{FlowGraphPlayAnimationBlock:()=>f});var B=C(13866),x=C(13830),b=C(12400),K=C(15296);class f extends B.e{constructor(Z){super(Z,["animationLoop","animationEnd","animationGroupLoop"]),this.config=Z,this.speed=this.registerDataInput("speed",x.o),this.loop=this.registerDataInput("loop",x.e),this.from=this.registerDataInput("from",x.o,0),this.to=this.registerDataInput("to",x.o),this.currentFrame=this.registerDataOutput("currentFrame",x.o),this.currentTime=this.registerDataOutput("currentTime",x.o),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",x.c),this.animationGroup=this.registerDataInput("animationGroup",x.c,null===Z||void 0===Z?void 0:Z.animationGroup),this.animation=this.registerDataInput("animation",x.c),this.object=this.registerDataInput("object",x.c)}_preparePendingTasks(Z){const l=this.animationGroup.getValue(Z),C=this.animation.getValue(Z);if(!l&&!C)return this._reportError(Z,"No animation or animation group provided");{const x=this.currentAnimationGroup.getValue(Z);x&&x!==l&&x.dispose();let b=l;if(C&&!b){const l=this.object.getValue(Z);if(!l)return this._reportError(Z,"No target object provided");const B=Array.isArray(C)?C:[C],x=B[0].name;b=new K.AnimationGroup("flowGraphAnimationGroup-"+x+"-"+l.name,Z.configuration.Yl);let f=!1;const W=Z._getGlobalContextVariable("interpolationAnimations",[]);for(const Z of B)b.addTargetedAnimation(Z,l),-1!==W.indexOf(Z.uniqueId)&&(f=!0);f&&this._checkInterpolationDuplications(Z,B,l)}const f=this.speed.getValue(Z)||1,W=this.from.getValue(Z)??0,J=this.to.getValue(Z)||b.to,d=!isFinite(J)||this.loop.getValue(Z);this.currentAnimationGroup.setValue(b,Z);const E=Z._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==E.indexOf(b.uniqueId)&&b.stop();try{b.start(d,f,W,J),b.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(Z))),b.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(Z))),b.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(Z))),b.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(Z))),E.push(b.uniqueId),Z._setGlobalContextVariable("currentlyRunningAnimationGroups",E)}catch(B){this._reportError(Z,B)}}}_reportError(Z,l){super._reportError(Z,l),this.currentFrame.setValue(-1,Z),this.currentTime.setValue(-1,Z)}_executeOnTick(Z){const l=this.currentAnimationGroup.getValue(Z);var C;l&&(this.currentFrame.setValue(l.getCurrentFrame(),Z),this.currentTime.setValue((null===(C=l.animatables[0])||void 0===C?void 0:C.elapsedTime)??0,Z))}_execute(Z){this._startPendingTasks(Z)}_onAnimationGroupEnd(Z){this._removeFromCurrentlyRunning(Z,this.currentAnimationGroup.getValue(Z)),this._resetAfterCanceled(Z),this.done._activateSignal(Z)}_checkInterpolationDuplications(Z,l,C){const B=Z._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const x of B){const B=Z.assetsContext.animationGroups.find((Z=>Z.uniqueId===x));if(B)for(const x of B.targetedAnimations)for(const b of l)x.animation.targetProperty===b.targetProperty&&x.target===C&&this._stopAnimationGroup(Z,B)}}_stopAnimationGroup(Z,l){l.stop(!0),l.dispose(),this._removeFromCurrentlyRunning(Z,l)}_removeFromCurrentlyRunning(Z,l){const C=Z._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),B=C.indexOf(l.uniqueId);-1!==B&&(C.splice(B,1),Z._setGlobalContextVariable("currentlyRunningAnimationGroups",C))}_cancelPendingTasks(Z){const l=this.currentAnimationGroup.getValue(Z);l&&this._stopAnimationGroup(Z,l)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,b.c)("FlowGraphPlayAnimationBlock",f)}}]);