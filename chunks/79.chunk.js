"use strict";(self.ksd6jhs1yr=self.ksd6jhs1yr||[]).push([[79],{15569:(C,c,d)=>{d.r(c),d.d(c,{FlowGraphPlayAnimationBlock:()=>R});var b=d(14178),X=d(14126),P=d(12345),V=d(15563);class R extends b.c{constructor(C){super(C,["animationLoop","animationEnd","animationGroupLoop"]),this.config=C,this.speed=this.registerDataInput("speed",X.q),this.loop=this.registerDataInput("loop",X.e),this.from=this.registerDataInput("from",X.q,0),this.to=this.registerDataInput("to",X.q),this.currentFrame=this.registerDataOutput("currentFrame",X.q),this.currentTime=this.registerDataOutput("currentTime",X.q),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",X.b),this.animationGroup=this.registerDataInput("animationGroup",X.b,null===C||void 0===C?void 0:C.animationGroup),this.animation=this.registerDataInput("animation",X.b),this.object=this.registerDataInput("object",X.b)}_preparePendingTasks(C){const c=this.animationGroup.getValue(C),d=this.animation.getValue(C);if(!c&&!d)return this._reportError(C,"No animation or animation group provided");{const X=this.currentAnimationGroup.getValue(C);X&&X!==c&&X.dispose();let P=c;if(d&&!P){const c=this.object.getValue(C);if(!c)return this._reportError(C,"No target object provided");const b=Array.isArray(d)?d:[d],X=b[0].name;P=new V.AnimationGroup("flowGraphAnimationGroup-"+X+"-"+c.name,C.configuration.Pd);let R=!1;const p=C._getGlobalContextVariable("interpolationAnimations",[]);for(const C of b)P.addTargetedAnimation(C,c),-1!==p.indexOf(C.uniqueId)&&(R=!0);R&&this._checkInterpolationDuplications(C,b,c)}const R=this.speed.getValue(C)||1,p=this.from.getValue(C)??0,j=this.to.getValue(C)||P.to,g=!isFinite(j)||this.loop.getValue(C);this.currentAnimationGroup.setValue(P,C);const k=C._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==k.indexOf(P.uniqueId)&&P.stop();try{P.start(g,R,p,j),P.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(C))),P.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(C))),P.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(C))),P.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(C))),k.push(P.uniqueId),C._setGlobalContextVariable("currentlyRunningAnimationGroups",k)}catch(b){this._reportError(C,b)}}}_reportError(C,c){super._reportError(C,c),this.currentFrame.setValue(-1,C),this.currentTime.setValue(-1,C)}_executeOnTick(C){const c=this.currentAnimationGroup.getValue(C);var d;c&&(this.currentFrame.setValue(c.getCurrentFrame(),C),this.currentTime.setValue((null===(d=c.animatables[0])||void 0===d?void 0:d.elapsedTime)??0,C))}_execute(C){this._startPendingTasks(C)}_onAnimationGroupEnd(C){this._removeFromCurrentlyRunning(C,this.currentAnimationGroup.getValue(C)),this._resetAfterCanceled(C),this.done._activateSignal(C)}_checkInterpolationDuplications(C,c,d){const b=C._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const X of b){const b=C.assetsContext.animationGroups.find((C=>C.uniqueId===X));if(b)for(const X of b.targetedAnimations)for(const P of c)X.animation.targetProperty===P.targetProperty&&X.target===d&&this._stopAnimationGroup(C,b)}}_stopAnimationGroup(C,c){c.stop(!0),c.dispose(),this._removeFromCurrentlyRunning(C,c)}_removeFromCurrentlyRunning(C,c){const d=C._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),b=d.indexOf(c.uniqueId);-1!==b&&(d.splice(b,1),C._setGlobalContextVariable("currentlyRunningAnimationGroups",d))}_cancelPendingTasks(C){const c=this.currentAnimationGroup.getValue(C);c&&this._stopAnimationGroup(C,c)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,P.e)("FlowGraphPlayAnimationBlock",R)}}]);