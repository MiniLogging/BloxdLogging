"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[79],{14084:(U,M,b)=>{b.r(M),b.d(M,{FlowGraphMultiGateBlock:()=>y});var a=b(609),A=b(12793),H=b(12775),W=b(12767);class y extends A.c{constructor(U){super(U),this.config=U,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",H.i,new W.e(-1)),this.setNumberOfOutputSignals(null===U||void 0===U?void 0:U.outputSignalCount)}_getNextIndex(U){if(U.includes(!1)||this.config.isLoop&&U.fill(!1),this.config.isRandom){const M=U.map(((U,M)=>U?-1:M)).filter((U=>-1!==U));return M.length?M[Math.floor(Math.random()*M.length)]:-1}return U.indexOf(!1)}setNumberOfOutputSignals(){let U=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>U;){const U=this.outputSignals.pop();U&&(U.disconnectFromAll(),this._unregisterSignalOutput(U.name))}for(;this.outputSignals.length<U;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(U,M){if(U._hasExecutionVariable(this,"indexesUsed")||U._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),M===this.reset)return U._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new W.e(-1),U);const b=U._getExecutionVariable(this,"indexesUsed",[]),a=this._getNextIndex(b);a>-1&&(this.lastIndex.setValue(new W.e(a),U),b[a]=!0,U._setExecutionVariable(this,"indexesUsed",b),this.outputSignals[a]._activateSignal(U))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(U){super.serialize(U),U.config.outputSignalCount=this.config.outputSignalCount,U.config.isRandom=this.config.isRandom,U.config.loop=this.config.isLoop,U.config.startIndex=this.config.startIndex}}(0,a.i)("FlowGraphMultiGateBlock",y)}}]);