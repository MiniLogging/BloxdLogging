"use strict";(self["3gghkoft8x"]=self["3gghkoft8x"]||[]).push([[79],{15464:(y,S,I)=>{I.r(S),I.d(S,{FlowGraphPlayAnimationBlock:()=>d});var V=I(14075),i=I(14033),A=I(12282),B=I(15458);class d extends V.e{constructor(y){super(y,["animationLoop","animationEnd","animationGroupLoop"]),this.config=y,this.speed=this.registerDataInput("speed",i.t),this.loop=this.registerDataInput("loop",i.f),this.from=this.registerDataInput("from",i.t,0),this.to=this.registerDataInput("to",i.t),this.currentFrame=this.registerDataOutput("currentFrame",i.t),this.currentTime=this.registerDataOutput("currentTime",i.t),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",i.c),this.animationGroup=this.registerDataInput("animationGroup",i.c,null===y||void 0===y?void 0:y.animationGroup),this.animation=this.registerDataInput("animation",i.c),this.object=this.registerDataInput("object",i.c)}_preparePendingTasks(y){const S=this.animationGroup.getValue(y),I=this.animation.getValue(y);if(!S&&!I)return this._reportError(y,"No animation or animation group provided");{const i=this.currentAnimationGroup.getValue(y);i&&i!==S&&i.dispose();let A=S;if(I&&!A){const S=this.object.getValue(y);if(!S)return this._reportError(y,"No target object provided");const V=Array.isArray(I)?I:[I],i=V[0].name;A=new B.AnimationGroup("flowGraphAnimationGroup-"+i+"-"+S.name,y.configuration.mI);let d=!1;const F=y._getGlobalContextVariable("interpolationAnimations",[]);for(const y of V)A.addTargetedAnimation(y,S),-1!==F.indexOf(y.uniqueId)&&(d=!0);d&&this._checkInterpolationDuplications(y,V,S)}const d=this.speed.getValue(y)||1,F=this.from.getValue(y)??0,J=this.to.getValue(y)||A.to,u=!isFinite(J)||this.loop.getValue(y);this.currentAnimationGroup.setValue(A,y);const K=y._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==K.indexOf(A.uniqueId)&&A.stop();try{A.start(u,d,F,J),A.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(y))),A.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(y))),A.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(y))),A.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(y))),K.push(A.uniqueId),y._setGlobalContextVariable("currentlyRunningAnimationGroups",K)}catch(V){this._reportError(y,V)}}}_reportError(y,S){super._reportError(y,S),this.currentFrame.setValue(-1,y),this.currentTime.setValue(-1,y)}_executeOnTick(y){const S=this.currentAnimationGroup.getValue(y);var I;S&&(this.currentFrame.setValue(S.getCurrentFrame(),y),this.currentTime.setValue((null===(I=S.animatables[0])||void 0===I?void 0:I.elapsedTime)??0,y))}_execute(y){this._startPendingTasks(y)}_onAnimationGroupEnd(y){this._removeFromCurrentlyRunning(y,this.currentAnimationGroup.getValue(y)),this._resetAfterCanceled(y),this.done._activateSignal(y)}_checkInterpolationDuplications(y,S,I){const V=y._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const i of V){const V=y.assetsContext.animationGroups.find((y=>y.uniqueId===i));if(V)for(const i of V.targetedAnimations)for(const A of S)i.animation.targetProperty===A.targetProperty&&i.target===I&&this._stopAnimationGroup(y,V)}}_stopAnimationGroup(y,S){S.stop(!0),S.dispose(),this._removeFromCurrentlyRunning(y,S)}_removeFromCurrentlyRunning(y,S){const I=y._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),V=I.indexOf(S.uniqueId);-1!==V&&(I.splice(V,1),y._setGlobalContextVariable("currentlyRunningAnimationGroups",I))}_cancelPendingTasks(y){const S=this.currentAnimationGroup.getValue(y);S&&this._stopAnimationGroup(y,S)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,A.e)("FlowGraphPlayAnimationBlock",d)}}]);