"use strict";(self.b15p7b72fr8=self.b15p7b72fr8||[]).push([[79],{15803:(s,k,h)=>{h.r(k),h.d(k,{FlowGraphPlayAnimationBlock:()=>K});var A=h(14344),g=h(14315),ms=h(12543),i=h(15796);class K extends A.b{constructor(s){super(s,["animationLoop","animationEnd","animationGroupLoop"]),this.config=s,this.speed=this.registerDataInput("speed",g.m),this.loop=this.registerDataInput("loop",g.d),this.from=this.registerDataInput("from",g.m,0),this.to=this.registerDataInput("to",g.m),this.currentFrame=this.registerDataOutput("currentFrame",g.m),this.currentTime=this.registerDataOutput("currentTime",g.m),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",g.c),this.animationGroup=this.registerDataInput("animationGroup",g.c,null===s||void 0===s?void 0:s.animationGroup),this.animation=this.registerDataInput("animation",g.c),this.object=this.registerDataInput("object",g.c)}_preparePendingTasks(s){const k=this.animationGroup.getValue(s),h=this.animation.getValue(s);if(!k&&!h)return this._reportError(s,"No animation or animation group provided");{const g=this.currentAnimationGroup.getValue(s);g&&g!==k&&g.dispose();let ms=k;if(h&&!ms){const k=this.object.getValue(s);if(!k)return this._reportError(s,"No target object provided");const A=Array.isArray(h)?h:[h],g=A[0].name;ms=new i.AnimationGroup("flowGraphAnimationGroup-"+g+"-"+k.name,s.configuration.Dk);let K=!1;const H=s._getGlobalContextVariable("interpolationAnimations",[]);for(const s of A)ms.addTargetedAnimation(s,k),-1!==H.indexOf(s.uniqueId)&&(K=!0);K&&this._checkInterpolationDuplications(s,A,k)}const K=this.speed.getValue(s)||1,H=this.from.getValue(s)??0,O=this.to.getValue(s)||ms.to,c=!isFinite(O)||this.loop.getValue(s);this.currentAnimationGroup.setValue(ms,s);const S=s._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==S.indexOf(ms.uniqueId)&&ms.stop();try{ms.start(c,K,H,O),ms.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(s))),ms.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(s))),ms.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(s))),ms.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(s))),S.push(ms.uniqueId),s._setGlobalContextVariable("currentlyRunningAnimationGroups",S)}catch(A){this._reportError(s,A)}}}_reportError(s,k){super._reportError(s,k),this.currentFrame.setValue(-1,s),this.currentTime.setValue(-1,s)}_executeOnTick(s){const k=this.currentAnimationGroup.getValue(s);var h;k&&(this.currentFrame.setValue(k.getCurrentFrame(),s),this.currentTime.setValue((null===(h=k.animatables[0])||void 0===h?void 0:h.elapsedTime)??0,s))}_execute(s){this._startPendingTasks(s)}_onAnimationGroupEnd(s){this._removeFromCurrentlyRunning(s,this.currentAnimationGroup.getValue(s)),this._resetAfterCanceled(s),this.done._activateSignal(s)}_checkInterpolationDuplications(s,k,h){const A=s._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const g of A){const A=s.assetsContext.animationGroups.find((s=>s.uniqueId===g));if(A)for(const g of A.targetedAnimations)for(const ms of k)g.animation.targetProperty===ms.targetProperty&&g.target===h&&this._stopAnimationGroup(s,A)}}_stopAnimationGroup(s,k){k.stop(!0),k.dispose(),this._removeFromCurrentlyRunning(s,k)}_removeFromCurrentlyRunning(s,k){const h=s._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),A=h.indexOf(k.uniqueId);-1!==A&&(h.splice(A,1),s._setGlobalContextVariable("currentlyRunningAnimationGroups",h))}_cancelPendingTasks(s){const k=this.currentAnimationGroup.getValue(s);k&&this._stopAnimationGroup(s,k)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,ms.f)("FlowGraphPlayAnimationBlock",K)}}]);