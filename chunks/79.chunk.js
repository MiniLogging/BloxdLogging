"use strict";(self.dwifukwnts=self.dwifukwnts||[]).push([[79],{14778:(U,X,b)=>{b.r(X),b.d(X,{FlowGraphPlayAnimationBlock:()=>z});var F=b(13330),E=b(13281),w=b(11551),Q=b(14771);class z extends F.e{constructor(U){super(U,["animationLoop","animationEnd","animationGroupLoop"]),this.config=U,this.speed=this.registerDataInput("speed",E.s),this.loop=this.registerDataInput("loop",E.e),this.from=this.registerDataInput("from",E.s,0),this.to=this.registerDataInput("to",E.s),this.currentFrame=this.registerDataOutput("currentFrame",E.s),this.currentTime=this.registerDataOutput("currentTime",E.s),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",E.b),this.animationGroup=this.registerDataInput("animationGroup",E.b,null===U||void 0===U?void 0:U.animationGroup),this.animation=this.registerDataInput("animation",E.b),this.object=this.registerDataInput("object",E.b)}_preparePendingTasks(U){const X=this.animationGroup.getValue(U),b=this.animation.getValue(U);if(!X&&!b)return this._reportError(U,"No animation or animation group provided");{const E=this.currentAnimationGroup.getValue(U);E&&E!==X&&E.dispose();let w=X;if(b&&!w){const X=this.object.getValue(U);if(!X)return this._reportError(U,"No target object provided");const F=Array.isArray(b)?b:[b],E=F[0].name;w=new Q.AnimationGroup("flowGraphAnimationGroup-"+E+"-"+X.name,U.configuration.xX);let z=!1;const q=U._getGlobalContextVariable("interpolationAnimations",[]);for(const U of F)w.addTargetedAnimation(U,X),-1!==q.indexOf(U.uniqueId)&&(z=!0);z&&this._checkInterpolationDuplications(U,F,X)}const z=this.speed.getValue(U)||1,q=this.from.getValue(U)??0,p=this.to.getValue(U)||w.to,S=!isFinite(p)||this.loop.getValue(U);this.currentAnimationGroup.setValue(w,U);const R=U._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==R.indexOf(w.uniqueId)&&w.stop();try{w.start(S,z,q,p),w.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(U))),w.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(U))),w.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(U))),w.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(U))),R.push(w.uniqueId),U._setGlobalContextVariable("currentlyRunningAnimationGroups",R)}catch(F){this._reportError(U,F)}}}_reportError(U,X){super._reportError(U,X),this.currentFrame.setValue(-1,U),this.currentTime.setValue(-1,U)}_executeOnTick(U){const X=this.currentAnimationGroup.getValue(U);var b;X&&(this.currentFrame.setValue(X.getCurrentFrame(),U),this.currentTime.setValue((null===(b=X.animatables[0])||void 0===b?void 0:b.elapsedTime)??0,U))}_execute(U){this._startPendingTasks(U)}_onAnimationGroupEnd(U){this._removeFromCurrentlyRunning(U,this.currentAnimationGroup.getValue(U)),this._resetAfterCanceled(U),this.done._activateSignal(U)}_checkInterpolationDuplications(U,X,b){const F=U._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const E of F){const F=U.assetsContext.animationGroups.find((U=>U.uniqueId===E));if(F)for(const E of F.targetedAnimations)for(const w of X)E.animation.targetProperty===w.targetProperty&&E.target===b&&this._stopAnimationGroup(U,F)}}_stopAnimationGroup(U,X){X.stop(!0),X.dispose(),this._removeFromCurrentlyRunning(U,X)}_removeFromCurrentlyRunning(U,X){const b=U._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),F=b.indexOf(X.uniqueId);-1!==F&&(b.splice(F,1),U._setGlobalContextVariable("currentlyRunningAnimationGroups",b))}_cancelPendingTasks(U){const X=this.currentAnimationGroup.getValue(U);X&&this._stopAnimationGroup(U,X)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,w.f)("FlowGraphPlayAnimationBlock",z)}}]);