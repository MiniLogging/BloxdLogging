"use strict";(self["686i8587bmi"]=self["686i8587bmi"]||[]).push([[79],{16005:(h,d,T)=>{T.r(d),T.d(d,{FlowGraphPlayAnimationBlock:()=>X});var Y=T(14574),y=T(14528),C=T(12714),n=T(16001);class X extends Y.e{constructor(h){super(h,["animationLoop","animationEnd","animationGroupLoop"]),this.config=h,this.speed=this.registerDataInput("speed",y.s),this.loop=this.registerDataInput("loop",y.e),this.from=this.registerDataInput("from",y.s,0),this.to=this.registerDataInput("to",y.s),this.currentFrame=this.registerDataOutput("currentFrame",y.s),this.currentTime=this.registerDataOutput("currentTime",y.s),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",y.b),this.animationGroup=this.registerDataInput("animationGroup",y.b,null===h||void 0===h?void 0:h.animationGroup),this.animation=this.registerDataInput("animation",y.b),this.object=this.registerDataInput("object",y.b)}_preparePendingTasks(h){const d=this.animationGroup.getValue(h),T=this.animation.getValue(h);if(!d&&!T)return this._reportError(h,"No animation or animation group provided");{const y=this.currentAnimationGroup.getValue(h);y&&y!==d&&y.dispose();let C=d;if(T&&!C){const d=this.object.getValue(h);if(!d)return this._reportError(h,"No target object provided");const Y=Array.isArray(T)?T:[T],y=Y[0].name;C=new n.AnimationGroup("flowGraphAnimationGroup-"+y+"-"+d.name,h.configuration.qd);let X=!1;const F=h._getGlobalContextVariable("interpolationAnimations",[]);for(const h of Y)C.addTargetedAnimation(h,d),-1!==F.indexOf(h.uniqueId)&&(X=!0);X&&this._checkInterpolationDuplications(h,Y,d)}const X=this.speed.getValue(h)||1,F=this.from.getValue(h)??0,U=this.to.getValue(h)||C.to,Z=!isFinite(U)||this.loop.getValue(h);this.currentAnimationGroup.setValue(C,h);const S=h._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==S.indexOf(C.uniqueId)&&C.stop();try{C.start(Z,X,F,U),C.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(h))),C.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(h))),C.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(h))),C.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(h))),S.push(C.uniqueId),h._setGlobalContextVariable("currentlyRunningAnimationGroups",S)}catch(Y){this._reportError(h,Y)}}}_reportError(h,d){super._reportError(h,d),this.currentFrame.setValue(-1,h),this.currentTime.setValue(-1,h)}_executeOnTick(h){const d=this.currentAnimationGroup.getValue(h);var T;d&&(this.currentFrame.setValue(d.getCurrentFrame(),h),this.currentTime.setValue((null===(T=d.animatables[0])||void 0===T?void 0:T.elapsedTime)??0,h))}_execute(h){this._startPendingTasks(h)}_onAnimationGroupEnd(h){this._removeFromCurrentlyRunning(h,this.currentAnimationGroup.getValue(h)),this._resetAfterCanceled(h),this.done._activateSignal(h)}_checkInterpolationDuplications(h,d,T){const Y=h._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const y of Y){const Y=h.assetsContext.animationGroups.find((h=>h.uniqueId===y));if(Y)for(const y of Y.targetedAnimations)for(const C of d)y.animation.targetProperty===C.targetProperty&&y.target===T&&this._stopAnimationGroup(h,Y)}}_stopAnimationGroup(h,d){d.stop(!0),d.dispose(),this._removeFromCurrentlyRunning(h,d)}_removeFromCurrentlyRunning(h,d){const T=h._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),Y=T.indexOf(d.uniqueId);-1!==Y&&(T.splice(Y,1),h._setGlobalContextVariable("currentlyRunningAnimationGroups",T))}_cancelPendingTasks(h){const d=this.currentAnimationGroup.getValue(h);d&&this._stopAnimationGroup(h,d)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,C.e)("FlowGraphPlayAnimationBlock",X)}}]);