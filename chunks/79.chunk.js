"use strict";(self.fkqm0epoq5=self.fkqm0epoq5||[]).push([[79],{14812:(D,l,G)=>{G.r(l),G.d(l,{FlowGraphPlayAnimationBlock:()=>X});var V=G(13463),N=G(13423),M=G(11667),b=G(14806);class X extends V.d{constructor(D){super(D,["animationLoop","animationEnd","animationGroupLoop"]),this.config=D,this.speed=this.registerDataInput("speed",N.o),this.loop=this.registerDataInput("loop",N.g),this.from=this.registerDataInput("from",N.o,0),this.to=this.registerDataInput("to",N.o),this.currentFrame=this.registerDataOutput("currentFrame",N.o),this.currentTime=this.registerDataOutput("currentTime",N.o),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",N.d),this.animationGroup=this.registerDataInput("animationGroup",N.d,null===D||void 0===D?void 0:D.animationGroup),this.animation=this.registerDataInput("animation",N.d),this.object=this.registerDataInput("object",N.d)}_preparePendingTasks(D){const l=this.animationGroup.getValue(D),G=this.animation.getValue(D);if(!l&&!G)return this._reportError(D,"No animation or animation group provided");{const N=this.currentAnimationGroup.getValue(D);N&&N!==l&&N.dispose();let M=l;if(G&&!M){const l=this.object.getValue(D);if(!l)return this._reportError(D,"No target object provided");const V=Array.isArray(G)?G:[G],N=V[0].name;M=new b.AnimationGroup("flowGraphAnimationGroup-"+N+"-"+l.name,D.configuration.dl);let X=!1;const t=D._getGlobalContextVariable("interpolationAnimations",[]);for(const D of V)M.addTargetedAnimation(D,l),-1!==t.indexOf(D.uniqueId)&&(X=!0);X&&this._checkInterpolationDuplications(D,V,l)}const X=this.speed.getValue(D)||1,t=this.from.getValue(D)??0,R=this.to.getValue(D)||M.to,n=!isFinite(R)||this.loop.getValue(D);this.currentAnimationGroup.setValue(M,D);const g=D._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==g.indexOf(M.uniqueId)&&M.stop();try{M.start(n,X,t,R),M.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(D))),M.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(D))),M.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(D))),M.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(D))),g.push(M.uniqueId),D._setGlobalContextVariable("currentlyRunningAnimationGroups",g)}catch(V){this._reportError(D,V)}}}_reportError(D,l){super._reportError(D,l),this.currentFrame.setValue(-1,D),this.currentTime.setValue(-1,D)}_executeOnTick(D){const l=this.currentAnimationGroup.getValue(D);var G;l&&(this.currentFrame.setValue(l.getCurrentFrame(),D),this.currentTime.setValue((null===(G=l.animatables[0])||void 0===G?void 0:G.elapsedTime)??0,D))}_execute(D){this._startPendingTasks(D)}_onAnimationGroupEnd(D){this._removeFromCurrentlyRunning(D,this.currentAnimationGroup.getValue(D)),this._resetAfterCanceled(D),this.done._activateSignal(D)}_checkInterpolationDuplications(D,l,G){const V=D._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const N of V){const V=D.assetsContext.animationGroups.find((D=>D.uniqueId===N));if(V)for(const N of V.targetedAnimations)for(const M of l)N.animation.targetProperty===M.targetProperty&&N.target===G&&this._stopAnimationGroup(D,V)}}_stopAnimationGroup(D,l){l.stop(!0),l.dispose(),this._removeFromCurrentlyRunning(D,l)}_removeFromCurrentlyRunning(D,l){const G=D._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),V=G.indexOf(l.uniqueId);-1!==V&&(G.splice(V,1),D._setGlobalContextVariable("currentlyRunningAnimationGroups",G))}_cancelPendingTasks(D){const l=this.currentAnimationGroup.getValue(D);l&&this._stopAnimationGroup(D,l)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,M.c)("FlowGraphPlayAnimationBlock",X)}}]);