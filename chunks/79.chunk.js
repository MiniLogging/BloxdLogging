"use strict";(self.uji65st81d=self.uji65st81d||[]).push([[79],{15546:(V,h,mV)=>{mV.r(h),mV.d(h,{FlowGraphPlayAnimationBlock:()=>k});var t=mV(14140),L=mV(14109),N=mV(12388),A=mV(15540);class k extends t.d{constructor(V){super(V,["animationLoop","animationEnd","animationGroupLoop"]),this.config=V,this.speed=this.registerDataInput("speed",L.r),this.loop=this.registerDataInput("loop",L.h),this.from=this.registerDataInput("from",L.r,0),this.to=this.registerDataInput("to",L.r),this.currentFrame=this.registerDataOutput("currentFrame",L.r),this.currentTime=this.registerDataOutput("currentTime",L.r),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",L.e),this.animationGroup=this.registerDataInput("animationGroup",L.e,null===V||void 0===V?void 0:V.animationGroup),this.animation=this.registerDataInput("animation",L.e),this.object=this.registerDataInput("object",L.e)}_preparePendingTasks(V){const h=this.animationGroup.getValue(V),mV=this.animation.getValue(V);if(!h&&!mV)return this._reportError(V,"No animation or animation group provided");{const L=this.currentAnimationGroup.getValue(V);L&&L!==h&&L.dispose();let N=h;if(mV&&!N){const h=this.object.getValue(V);if(!h)return this._reportError(V,"No target object provided");const t=Array.isArray(mV)?mV:[mV],L=t[0].name;N=new A.AnimationGroup("flowGraphAnimationGroup-"+L+"-"+h.name,V.configuration.zh);let k=!1;const C=V._getGlobalContextVariable("interpolationAnimations",[]);for(const V of t)N.addTargetedAnimation(V,h),-1!==C.indexOf(V.uniqueId)&&(k=!0);k&&this._checkInterpolationDuplications(V,t,h)}const k=this.speed.getValue(V)||1,C=this.from.getValue(V)??0,K=this.to.getValue(V)||N.to,o=!isFinite(K)||this.loop.getValue(V);this.currentAnimationGroup.setValue(N,V);const n=V._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==n.indexOf(N.uniqueId)&&N.stop();try{N.start(o,k,C,K),N.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(V))),N.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(V))),N.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(V))),N.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(V))),n.push(N.uniqueId),V._setGlobalContextVariable("currentlyRunningAnimationGroups",n)}catch(t){this._reportError(V,t)}}}_reportError(V,h){super._reportError(V,h),this.currentFrame.setValue(-1,V),this.currentTime.setValue(-1,V)}_executeOnTick(V){const h=this.currentAnimationGroup.getValue(V);var mV;h&&(this.currentFrame.setValue(h.getCurrentFrame(),V),this.currentTime.setValue((null===(mV=h.animatables[0])||void 0===mV?void 0:mV.elapsedTime)??0,V))}_execute(V){this._startPendingTasks(V)}_onAnimationGroupEnd(V){this._removeFromCurrentlyRunning(V,this.currentAnimationGroup.getValue(V)),this._resetAfterCanceled(V),this.done._activateSignal(V)}_checkInterpolationDuplications(V,h,mV){const t=V._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const L of t){const t=V.assetsContext.animationGroups.find((V=>V.uniqueId===L));if(t)for(const L of t.targetedAnimations)for(const N of h)L.animation.targetProperty===N.targetProperty&&L.target===mV&&this._stopAnimationGroup(V,t)}}_stopAnimationGroup(V,h){h.stop(!0),h.dispose(),this._removeFromCurrentlyRunning(V,h)}_removeFromCurrentlyRunning(V,h){const mV=V._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),t=mV.indexOf(h.uniqueId);-1!==t&&(mV.splice(t,1),V._setGlobalContextVariable("currentlyRunningAnimationGroups",mV))}_cancelPendingTasks(V){const h=this.currentAnimationGroup.getValue(V);h&&this._stopAnimationGroup(V,h)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,N.i)("FlowGraphPlayAnimationBlock",k)}}]);