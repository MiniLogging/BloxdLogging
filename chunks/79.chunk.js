"use strict";(self.nyfa010khv=self.nyfa010khv||[]).push([[79],{15278:(L,r,p)=>{p.r(r),p.d(r,{FlowGraphPlayAnimationBlock:()=>z});var J=p(13913),i=p(13868),n=p(12087),j=p(15273);class z extends J.d{constructor(L){super(L,["animationLoop","animationEnd","animationGroupLoop"]),this.config=L,this.speed=this.registerDataInput("speed",i.v),this.loop=this.registerDataInput("loop",i.h),this.from=this.registerDataInput("from",i.v,0),this.to=this.registerDataInput("to",i.v),this.currentFrame=this.registerDataOutput("currentFrame",i.v),this.currentTime=this.registerDataOutput("currentTime",i.v),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",i.d),this.animationGroup=this.registerDataInput("animationGroup",i.d,null===L||void 0===L?void 0:L.animationGroup),this.animation=this.registerDataInput("animation",i.d),this.object=this.registerDataInput("object",i.d)}_preparePendingTasks(L){const r=this.animationGroup.getValue(L),p=this.animation.getValue(L);if(!r&&!p)return this._reportError(L,"No animation or animation group provided");{const i=this.currentAnimationGroup.getValue(L);i&&i!==r&&i.dispose();let n=r;if(p&&!n){const r=this.object.getValue(L);if(!r)return this._reportError(L,"No target object provided");const J=Array.isArray(p)?p:[p],i=J[0].name;n=new j.AnimationGroup("flowGraphAnimationGroup-"+i+"-"+r.name,L.configuration.Or);let z=!1;const G=L._getGlobalContextVariable("interpolationAnimations",[]);for(const L of J)n.addTargetedAnimation(L,r),-1!==G.indexOf(L.uniqueId)&&(z=!0);z&&this._checkInterpolationDuplications(L,J,r)}const z=this.speed.getValue(L)||1,G=this.from.getValue(L)??0,C=this.to.getValue(L)||n.to,t=!isFinite(C)||this.loop.getValue(L);this.currentAnimationGroup.setValue(n,L);const E=L._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==E.indexOf(n.uniqueId)&&n.stop();try{n.start(t,z,G,C),n.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(L))),n.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(L))),n.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(L))),n.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(L))),E.push(n.uniqueId),L._setGlobalContextVariable("currentlyRunningAnimationGroups",E)}catch(J){this._reportError(L,J)}}}_reportError(L,r){super._reportError(L,r),this.currentFrame.setValue(-1,L),this.currentTime.setValue(-1,L)}_executeOnTick(L){const r=this.currentAnimationGroup.getValue(L);var p;r&&(this.currentFrame.setValue(r.getCurrentFrame(),L),this.currentTime.setValue((null===(p=r.animatables[0])||void 0===p?void 0:p.elapsedTime)??0,L))}_execute(L){this._startPendingTasks(L)}_onAnimationGroupEnd(L){this._removeFromCurrentlyRunning(L,this.currentAnimationGroup.getValue(L)),this._resetAfterCanceled(L),this.done._activateSignal(L)}_checkInterpolationDuplications(L,r,p){const J=L._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const i of J){const J=L.assetsContext.animationGroups.find((L=>L.uniqueId===i));if(J)for(const i of J.targetedAnimations)for(const n of r)i.animation.targetProperty===n.targetProperty&&i.target===p&&this._stopAnimationGroup(L,J)}}_stopAnimationGroup(L,r){r.stop(!0),r.dispose(),this._removeFromCurrentlyRunning(L,r)}_removeFromCurrentlyRunning(L,r){const p=L._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),J=p.indexOf(r.uniqueId);-1!==J&&(p.splice(J,1),L._setGlobalContextVariable("currentlyRunningAnimationGroups",p))}_cancelPendingTasks(L){const r=this.currentAnimationGroup.getValue(L);r&&this._stopAnimationGroup(L,r)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,n.e)("FlowGraphPlayAnimationBlock",z)}}]);