"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[80],{14043:(z,u,Y)=>{Y.r(u),Y.d(u,{FlowGraphThrottleBlock:()=>l});var H=Y(12531),E=Y(12580),J=Y(10918);class l extends E.e{constructor(z){super(z),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",H.p),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",H.p,NaN)}_execute(z,u){if(u===this.reset)return this.lastRemainingTime.setValue(NaN,z),z._setExecutionVariable(this,"lastRemainingTime",NaN),void z._setExecutionVariable(this,"timestamp",0);const Y=this.duration.getValue(z);if(Y<=0||isNaN(Y)||!isFinite(Y))return this._reportError(z,"Invalid duration in Throttle block");const H=z._getExecutionVariable(this,"lastRemainingTime",NaN),E=Date.now();if(isNaN(H))return this.lastRemainingTime.setValue(0,z),z._setExecutionVariable(this,"lastRemainingTime",0),z._setExecutionVariable(this,"timestamp",E),this.out._activateSignal(z);{const u=E-z._getExecutionVariable(this,"timestamp",0),H=1e3*Y;if(H<=u)return this.lastRemainingTime.setValue(0,z),z._setExecutionVariable(this,"lastRemainingTime",0),z._setExecutionVariable(this,"timestamp",E),this.out._activateSignal(z);{const Y=H-u;this.lastRemainingTime.setValue(Y/1e3,z),z._setExecutionVariable(this,"lastRemainingTime",Y)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,J.d)("FlowGraphThrottleBlock",l)}}]);