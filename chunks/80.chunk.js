"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[80],{14586:(G,V,W)=>{W.r(V),W.d(V,{FlowGraphThrottleBlock:()=>k});var J=W(13071),R=W(13115),d=W(11159);class k extends R.e{constructor(G){super(G),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",J.r),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",J.r,NaN)}_execute(G,V){if(V===this.reset)return this.lastRemainingTime.setValue(NaN,G),G._setExecutionVariable(this,"lastRemainingTime",NaN),void G._setExecutionVariable(this,"timestamp",0);const W=this.duration.getValue(G);if(W<=0||isNaN(W)||!isFinite(W))return this._reportError(G,"Invalid duration in Throttle block");const J=G._getExecutionVariable(this,"lastRemainingTime",NaN),R=Date.now();if(isNaN(J))return this.lastRemainingTime.setValue(0,G),G._setExecutionVariable(this,"lastRemainingTime",0),G._setExecutionVariable(this,"timestamp",R),this.out._activateSignal(G);{const V=R-G._getExecutionVariable(this,"timestamp",0),J=1e3*W;if(J<=V)return this.lastRemainingTime.setValue(0,G),G._setExecutionVariable(this,"lastRemainingTime",0),G._setExecutionVariable(this,"timestamp",R),this.out._activateSignal(G);{const W=J-V;this.lastRemainingTime.setValue(W/1e3,G),G._setExecutionVariable(this,"lastRemainingTime",W)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,d.d)("FlowGraphThrottleBlock",k)}}]);