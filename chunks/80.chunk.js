"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[80],{14449:(w,p,e)=>{e.r(p),e.d(p,{FlowGraphThrottleBlock:()=>f});var r=e(12872),I=e(12920),d=e(11038);class f extends I.c{constructor(w){super(w),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",r.o),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",r.o,NaN)}_execute(w,p){if(p===this.reset)return this.lastRemainingTime.setValue(NaN,w),w._setExecutionVariable(this,"lastRemainingTime",NaN),void w._setExecutionVariable(this,"timestamp",0);const e=this.duration.getValue(w);if(e<=0||isNaN(e)||!isFinite(e))return this._reportError(w,"Invalid duration in Throttle block");const r=w._getExecutionVariable(this,"lastRemainingTime",NaN),I=Date.now();if(isNaN(r))return this.lastRemainingTime.setValue(0,w),w._setExecutionVariable(this,"lastRemainingTime",0),w._setExecutionVariable(this,"timestamp",I),this.out._activateSignal(w);{const p=I-w._getExecutionVariable(this,"timestamp",0),r=1e3*e;if(r<=p)return this.lastRemainingTime.setValue(0,w),w._setExecutionVariable(this,"lastRemainingTime",0),w._setExecutionVariable(this,"timestamp",I),this.out._activateSignal(w);{const e=r-p;this.lastRemainingTime.setValue(e/1e3,w),w._setExecutionVariable(this,"lastRemainingTime",e)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,d.d)("FlowGraphThrottleBlock",f)}}]);