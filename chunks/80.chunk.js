"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[80],{14254:(x,O,Q)=>{Q.r(O),Q.d(O,{FlowGraphThrottleBlock:()=>V});var X=Q(12707),Z=Q(12744),n=Q(10866);class V extends Z.d{constructor(x){super(x),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",X.q),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",X.q,NaN)}_execute(x,O){if(O===this.reset)return this.lastRemainingTime.setValue(NaN,x),x._setExecutionVariable(this,"lastRemainingTime",NaN),void x._setExecutionVariable(this,"timestamp",0);const Q=this.duration.getValue(x);if(Q<=0||isNaN(Q)||!isFinite(Q))return this._reportError(x,"Invalid duration in Throttle block");const X=x._getExecutionVariable(this,"lastRemainingTime",NaN),Z=Date.now();if(isNaN(X))return this.lastRemainingTime.setValue(0,x),x._setExecutionVariable(this,"lastRemainingTime",0),x._setExecutionVariable(this,"timestamp",Z),this.out._activateSignal(x);{const O=Z-x._getExecutionVariable(this,"timestamp",0),X=1e3*Q;if(X<=O)return this.lastRemainingTime.setValue(0,x),x._setExecutionVariable(this,"lastRemainingTime",0),x._setExecutionVariable(this,"timestamp",Z),this.out._activateSignal(x);{const Q=X-O;this.lastRemainingTime.setValue(Q/1e3,x),x._setExecutionVariable(this,"lastRemainingTime",Q)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,n.d)("FlowGraphThrottleBlock",V)}}]);