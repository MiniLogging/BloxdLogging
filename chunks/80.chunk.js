"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[80],{14473:(V,I,m)=>{m.r(I),m.d(I,{FlowGraphThrottleBlock:()=>F});var C=m(12899),l=m(12934),s=m(11048);class F extends l.d{constructor(V){super(V),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",C.r),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",C.r,NaN)}_execute(V,I){if(I===this.reset)return this.lastRemainingTime.setValue(NaN,V),V._setExecutionVariable(this,"lastRemainingTime",NaN),void V._setExecutionVariable(this,"timestamp",0);const m=this.duration.getValue(V);if(m<=0||isNaN(m)||!isFinite(m))return this._reportError(V,"Invalid duration in Throttle block");const C=V._getExecutionVariable(this,"lastRemainingTime",NaN),l=Date.now();if(isNaN(C))return this.lastRemainingTime.setValue(0,V),V._setExecutionVariable(this,"lastRemainingTime",0),V._setExecutionVariable(this,"timestamp",l),this.out._activateSignal(V);{const I=l-V._getExecutionVariable(this,"timestamp",0),C=1e3*m;if(C<=I)return this.lastRemainingTime.setValue(0,V),V._setExecutionVariable(this,"lastRemainingTime",0),V._setExecutionVariable(this,"timestamp",l),this.out._activateSignal(V);{const m=C-I;this.lastRemainingTime.setValue(m/1e3,V),V._setExecutionVariable(this,"lastRemainingTime",m)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,s.h)("FlowGraphThrottleBlock",F)}}]);