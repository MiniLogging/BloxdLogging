"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[80],{14169:(h,d,m)=>{m.r(d),m.d(d,{FlowGraphThrottleBlock:()=>w});var j=m(12671),A=m(12710),b=m(11080);class w extends A.d{constructor(h){super(h),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",j.y),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",j.y,NaN)}_execute(h,d){if(d===this.reset)return this.lastRemainingTime.setValue(NaN,h),h._setExecutionVariable(this,"lastRemainingTime",NaN),void h._setExecutionVariable(this,"timestamp",0);const m=this.duration.getValue(h);if(m<=0||isNaN(m)||!isFinite(m))return this._reportError(h,"Invalid duration in Throttle block");const j=h._getExecutionVariable(this,"lastRemainingTime",NaN),A=Date.now();if(isNaN(j))return this.lastRemainingTime.setValue(0,h),h._setExecutionVariable(this,"lastRemainingTime",0),h._setExecutionVariable(this,"timestamp",A),this.out._activateSignal(h);{const d=A-h._getExecutionVariable(this,"timestamp",0),j=1e3*m;if(j<=d)return this.lastRemainingTime.setValue(0,h),h._setExecutionVariable(this,"lastRemainingTime",0),h._setExecutionVariable(this,"timestamp",A),this.out._activateSignal(h);{const m=j-d;this.lastRemainingTime.setValue(m/1e3,h),h._setExecutionVariable(this,"lastRemainingTime",m)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,b.i)("FlowGraphThrottleBlock",w)}}]);