"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[80],{14223:(q,f,j)=>{j.r(f),j.d(f,{FlowGraphThrottleBlock:()=>L});var d=j(12709),g=j(12752),h=j(10965);class L extends g.c{constructor(q){super(q),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",d.o),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",d.o,NaN)}_execute(q,f){if(f===this.reset)return this.lastRemainingTime.setValue(NaN,q),q._setExecutionVariable(this,"lastRemainingTime",NaN),void q._setExecutionVariable(this,"timestamp",0);const j=this.duration.getValue(q);if(j<=0||isNaN(j)||!isFinite(j))return this._reportError(q,"Invalid duration in Throttle block");const d=q._getExecutionVariable(this,"lastRemainingTime",NaN),g=Date.now();if(isNaN(d))return this.lastRemainingTime.setValue(0,q),q._setExecutionVariable(this,"lastRemainingTime",0),q._setExecutionVariable(this,"timestamp",g),this.out._activateSignal(q);{const f=g-q._getExecutionVariable(this,"timestamp",0),d=1e3*j;if(d<=f)return this.lastRemainingTime.setValue(0,q),q._setExecutionVariable(this,"lastRemainingTime",0),q._setExecutionVariable(this,"timestamp",g),this.out._activateSignal(q);{const j=d-f;this.lastRemainingTime.setValue(j/1e3,q),q._setExecutionVariable(this,"lastRemainingTime",j)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,h.f)("FlowGraphThrottleBlock",L)}}]);