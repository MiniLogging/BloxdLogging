"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[80],{14311:(s,Z,o)=>{o.r(Z),o.d(Z,{FlowGraphThrottleBlock:()=>a});var t=o(12775),j=o(12831),S=o(10916);class a extends j.b{constructor(s){super(s),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",t.w),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",t.w,NaN)}_execute(s,Z){if(Z===this.reset)return this.lastRemainingTime.setValue(NaN,s),s._setExecutionVariable(this,"lastRemainingTime",NaN),void s._setExecutionVariable(this,"timestamp",0);const o=this.duration.getValue(s);if(o<=0||isNaN(o)||!isFinite(o))return this._reportError(s,"Invalid duration in Throttle block");const t=s._getExecutionVariable(this,"lastRemainingTime",NaN),j=Date.now();if(isNaN(t))return this.lastRemainingTime.setValue(0,s),s._setExecutionVariable(this,"lastRemainingTime",0),s._setExecutionVariable(this,"timestamp",j),this.out._activateSignal(s);{const Z=j-s._getExecutionVariable(this,"timestamp",0),t=1e3*o;if(t<=Z)return this.lastRemainingTime.setValue(0,s),s._setExecutionVariable(this,"lastRemainingTime",0),s._setExecutionVariable(this,"timestamp",j),this.out._activateSignal(s);{const o=t-Z;this.lastRemainingTime.setValue(o/1e3,s),s._setExecutionVariable(this,"lastRemainingTime",o)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,S.f)("FlowGraphThrottleBlock",a)}}]);