"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[80],{14415:(Z,c,L)=>{L.r(c),L.d(c,{FlowGraphThrottleBlock:()=>G});var k=L(12825),N=L(12875),R=L(11012);class G extends N.e{constructor(Z){super(Z),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",k.t),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",k.t,NaN)}_execute(Z,c){if(c===this.reset)return this.lastRemainingTime.setValue(NaN,Z),Z._setExecutionVariable(this,"lastRemainingTime",NaN),void Z._setExecutionVariable(this,"timestamp",0);const L=this.duration.getValue(Z);if(L<=0||isNaN(L)||!isFinite(L))return this._reportError(Z,"Invalid duration in Throttle block");const k=Z._getExecutionVariable(this,"lastRemainingTime",NaN),N=Date.now();if(isNaN(k))return this.lastRemainingTime.setValue(0,Z),Z._setExecutionVariable(this,"lastRemainingTime",0),Z._setExecutionVariable(this,"timestamp",N),this.out._activateSignal(Z);{const c=N-Z._getExecutionVariable(this,"timestamp",0),k=1e3*L;if(k<=c)return this.lastRemainingTime.setValue(0,Z),Z._setExecutionVariable(this,"lastRemainingTime",0),Z._setExecutionVariable(this,"timestamp",N),this.out._activateSignal(Z);{const L=k-c;this.lastRemainingTime.setValue(L/1e3,Z),Z._setExecutionVariable(this,"lastRemainingTime",L)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,R.g)("FlowGraphThrottleBlock",G)}}]);