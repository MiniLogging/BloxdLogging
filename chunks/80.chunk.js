"use strict";(self["6xhfpmwgjr5"]=self["6xhfpmwgjr5"]||[]).push([[80],{16408:(P,a,R)=>{R.d(a,{DDSTools:()=>O});var S=R(14184),A=R(14057),Z=R(15270),p=R(15234);R(15300);const j=131072,U=131072;function Q(P){return P.charCodeAt(0)+(P.charCodeAt(1)<<8)+(P.charCodeAt(2)<<16)+(P.charCodeAt(3)<<24)}const h=Q("DXT1"),l=Q("DXT3"),V=Q("DXT5"),f=Q("DX10");class O{static GetDDSInfo(P){const a=new Int32Array(P.buffer,P.byteOffset,31),R=new Int32Array(P.buffer,P.byteOffset,35);let S=1;a[2]&j&&(S=Math.max(1,a[7]));const A=a[21],Z=A===f?R[32]:0;let p=0;switch(A){case 113:p=2;break;case 116:p=1;break;case f:if(10===Z){p=2;break}if(2===Z){p=1;break}}return{width:a[4],height:a[3],mipmapCount:S,isFourCC:4===(4&a[20]),isRGB:64===(64&a[20]),isLuminance:(a[20]&U)===U,isCube:512===(512&a[28]),isCompressed:A===h||A===l||A===V,dxgiFormat:Z,textureType:p}}static _GetHalfFloatAsFloatRGBAArrayBuffer(P,a,R,S,A,Z){const j=new Float32Array(S),U=new Uint16Array(A,R);let Q=0;for(let h=0;h<a;h++)for(let a=0;a<P;a++){const R=4*(a+h*P);j[Q]=(0,p.h)(U[R]),j[Q+1]=(0,p.h)(U[R+1]),j[Q+2]=(0,p.h)(U[R+2]),O.StoreLODInAlphaChannel?j[Q+3]=Z:j[Q+3]=(0,p.h)(U[R+3]),Q+=4}return j}static _GetHalfFloatRGBAArrayBuffer(P,a,R,S,A,Z){if(O.StoreLODInAlphaChannel){const j=new Uint16Array(S),U=new Uint16Array(A,R);let Q=0;for(let R=0;R<a;R++)for(let a=0;a<P;a++){const S=4*(a+R*P);j[Q]=U[S],j[Q+1]=U[S+1],j[Q+2]=U[S+2],j[Q+3]=(0,p.l)(Z),Q+=4}return j}return new Uint16Array(A,R,S)}static _GetFloatRGBAArrayBuffer(P,a,R,S,A,Z){if(O.StoreLODInAlphaChannel){const p=new Float32Array(S),j=new Float32Array(A,R);let U=0;for(let R=0;R<a;R++)for(let a=0;a<P;a++){const S=4*(a+R*P);p[U]=j[S],p[U+1]=j[S+1],p[U+2]=j[S+2],p[U+3]=Z,U+=4}return p}return new Float32Array(A,R,S)}static _GetFloatAsHalfFloatRGBAArrayBuffer(P,a,R,S,A,Z){const j=new Uint16Array(S),U=new Float32Array(A,R);let Q=0;for(let h=0;h<a;h++)for(let a=0;a<P;a++)j[Q]=(0,p.l)(U[Q]),j[Q+1]=(0,p.l)(U[Q+1]),j[Q+2]=(0,p.l)(U[Q+2]),O.StoreLODInAlphaChannel?j[Q+3]=(0,p.l)(Z):j[Q+3]=(0,p.l)(U[Q+3]),Q+=4;return j}static _GetFloatAsUIntRGBAArrayBuffer(P,a,R,A,Z,p){const j=new Uint8Array(A),U=new Float32Array(Z,R);let Q=0;for(let h=0;h<a;h++)for(let a=0;a<P;a++){const R=4*(a+h*P);j[Q]=255*(0,S.e)(U[R]),j[Q+1]=255*(0,S.e)(U[R+1]),j[Q+2]=255*(0,S.e)(U[R+2]),O.StoreLODInAlphaChannel?j[Q+3]=p:j[Q+3]=255*(0,S.e)(U[R+3]),Q+=4}return j}static _GetHalfFloatAsUIntRGBAArrayBuffer(P,a,R,A,Z,j){const U=new Uint8Array(A),Q=new Uint16Array(Z,R);let h=0;for(let l=0;l<a;l++)for(let a=0;a<P;a++){const R=4*(a+l*P);U[h]=255*(0,S.e)((0,p.h)(Q[R])),U[h+1]=255*(0,S.e)((0,p.h)(Q[R+1])),U[h+2]=255*(0,S.e)((0,p.h)(Q[R+2])),O.StoreLODInAlphaChannel?U[h+3]=j:U[h+3]=255*(0,S.e)((0,p.h)(Q[R+3])),h+=4}return U}static _GetRGBAArrayBuffer(P,a,R,S,A,Z,p,j,U){const Q=new Uint8Array(S),h=new Uint8Array(A,R);let l=0;for(let V=0;V<a;V++)for(let a=0;a<P;a++){const R=4*(a+V*P);Q[l]=h[R+Z],Q[l+1]=h[R+p],Q[l+2]=h[R+j],Q[l+3]=h[R+U],l+=4}return Q}static _ExtractLongWordOrder(P){return 0===P||255===P||-16777216===P?0:1+O._ExtractLongWordOrder(P>>8)}static _GetRGBArrayBuffer(P,a,R,S,A,Z,p,j){const U=new Uint8Array(S),Q=new Uint8Array(A,R);let h=0;for(let l=0;l<a;l++)for(let a=0;a<P;a++){const R=3*(a+l*P);U[h]=Q[R+Z],U[h+1]=Q[R+p],U[h+2]=Q[R+j],h+=3}return U}static _GetLuminanceArrayBuffer(P,a,R,S,A){const Z=new Uint8Array(S),p=new Uint8Array(A,R);let j=0;for(let U=0;U<a;U++)for(let a=0;a<P;a++){const R=a+U*P;Z[j]=p[R],j++}return Z}static UploadDDSLevels(P,a,R,S,p,U){let Q=arguments.length>6&&void 0!==arguments[6]?arguments[6]:-1,q=arguments.length>7?arguments[7]:void 0,y=!(arguments.length>8&&void 0!==arguments[8])||arguments[8],t=null;S.sphericalPolynomial&&(t=[]);const W=!!P.getCaps().s3tc;a.generateMipMaps=p;const k=new Int32Array(R.buffer,R.byteOffset,31);let x,s,d,G,H,mP,N,D=0,L=0,c=1;if(542327876!==k[0])return void A.d.Error("Invalid magic number in DDS header");if(!S.isFourCC&&!S.isRGB&&!S.isLuminance)return void A.d.Error("Unsupported format, must contain a FourCC, RGB or LUMINANCE code");if(S.isCompressed&&!W)return void A.d.Error("Compressed textures are not supported on this platform.");let u=k[22];G=k[1]+4;let Y=!1;if(S.isFourCC)switch(x=k[21],x){case h:c=8,L=33777;break;case l:c=16,L=33778;break;case V:c=16,L=33779;break;case 113:Y=!0,u=64;break;case 116:Y=!0,u=128;break;case f:{G+=20;let P=!1;switch(S.dxgiFormat){case 10:Y=!0,u=64,P=!0;break;case 2:Y=!0,u=128,P=!0;break;case 88:S.isRGB=!0,S.isFourCC=!1,u=32,P=!0}if(P)break}default:return void A.d.Error(["Unsupported FourCC code:",(J=x,String.fromCharCode(255&J,J>>8&255,J>>16&255,J>>24&255))])}var J;const n=O._ExtractLongWordOrder(k[23]),b=O._ExtractLongWordOrder(k[24]),B=O._ExtractLongWordOrder(k[25]),o=O._ExtractLongWordOrder(k[26]);Y&&(L=P._getRGBABufferInternalSizedFormat(S.textureType)),mP=1,k[2]&j&&!1!==p&&(mP=Math.max(1,k[7]));const r=q||0,v=P.getCaps();for(let A=r;A<U;A++){for(s=k[4],d=k[3],N=0;N<mP;++N){if(-1===Q||Q===N){const Z=-1===Q?N:0;if(!S.isCompressed&&S.isFourCC){a.format=5,D=s*d*4;let S=null;if(P._badOS||P._badDesktopOS||!v.textureHalfFloat&&!v.textureFloat)128===u?(S=O._GetFloatAsUIntRGBAArrayBuffer(s,d,R.byteOffset+G,D,R.buffer,Z),t&&0==Z&&t.push(O._GetFloatRGBAArrayBuffer(s,d,R.byteOffset+G,D,R.buffer,Z))):64===u&&(S=O._GetHalfFloatAsUIntRGBAArrayBuffer(s,d,R.byteOffset+G,D,R.buffer,Z),t&&0==Z&&t.push(O._GetHalfFloatAsFloatRGBAArrayBuffer(s,d,R.byteOffset+G,D,R.buffer,Z))),a.type=0;else{const P=v.textureFloat&&(y&&v.textureFloatLinearFiltering||!y),A=v.textureHalfFloat&&(y&&v.textureHalfFloatLinearFiltering||!y),p=(128===u||64===u&&!A)&&P?1:(64===u||128===u&&!P)&&A?2:0;let j,U=null;if(128===u)switch(p){case 1:j=O._GetFloatRGBAArrayBuffer,U=null;break;case 2:j=O._GetFloatAsHalfFloatRGBAArrayBuffer,U=O._GetFloatRGBAArrayBuffer;break;case 0:j=O._GetFloatAsUIntRGBAArrayBuffer,U=O._GetFloatRGBAArrayBuffer}else switch(p){case 1:j=O._GetHalfFloatAsFloatRGBAArrayBuffer,U=null;break;case 2:j=O._GetHalfFloatRGBAArrayBuffer,U=O._GetHalfFloatAsFloatRGBAArrayBuffer;break;case 0:j=O._GetHalfFloatAsUIntRGBAArrayBuffer,U=O._GetHalfFloatAsFloatRGBAArrayBuffer}a.type=p,S=j(s,d,R.byteOffset+G,D,R.buffer,Z),t&&0==Z&&t.push(U?U(s,d,R.byteOffset+G,D,R.buffer,Z):S)}S&&P._uploadDataToTextureDirectly(a,S,A,Z)}else if(S.isRGB)a.type=0,24===u?(a.format=4,D=s*d*3,H=O._GetRGBArrayBuffer(s,d,R.byteOffset+G,D,R.buffer,n,b,B),P._uploadDataToTextureDirectly(a,H,A,Z)):(a.format=5,D=s*d*4,H=O._GetRGBAArrayBuffer(s,d,R.byteOffset+G,D,R.buffer,n,b,B,o),P._uploadDataToTextureDirectly(a,H,A,Z));else if(S.isLuminance){const S=P._getUnpackAlignement(),p=s;D=Math.floor((s+S-1)/S)*S*(d-1)+p,H=O._GetLuminanceArrayBuffer(s,d,R.byteOffset+G,D,R.buffer),a.format=1,a.type=0,P._uploadDataToTextureDirectly(a,H,A,Z)}else D=Math.max(4,s)/4*Math.max(4,d)/4*c,H=new Uint8Array(R.buffer,R.byteOffset+G,D),a.type=0,P._uploadCompressedDataToTextureDirectly(a,L,s,d,H,A,Z)}G+=u?s*d*(u/8):D,s*=.5,d*=.5,s=Math.max(1,s),d=Math.max(1,d)}if(void 0!==q)break}t&&t.length>0?S.sphericalPolynomial=Z.b.ConvertCubeMapToSphericalPolynomial({size:k[4],right:t[0],left:t[1],up:t[2],down:t[3],front:t[4],back:t[5],format:5,type:1,gammaSpace:!1}):S.sphericalPolynomial=void 0}}O.StoreLODInAlphaChannel=!1}}]);