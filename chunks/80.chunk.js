"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[80],{14099:(Z,U,n)=>{n.r(U),n.d(U,{FlowGraphSetDelayBlock:()=>F});var i,B=n(12859),l=n(12826),H=n(493);!function(Z){Z[Z.INIT=0]="INIT",Z[Z.STARTED=1]="STARTED",Z[Z.ENDED=2]="ENDED"}(i||(i={}));class V{constructor(Z){this.onEachCountObservable=new H.e,this.onTimerAbortedObservable=new H.e,this.onTimerEndedObservable=new H.e,this.onStateChangedObservable=new H.e,this._observer=null,this._breakOnNextTick=!1,this._tick=Z=>{const U=Date.now();this._timer=U-this._startTime;const n={startTime:this._startTime,currentTime:U,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:Z},i=this._breakOnNextTick||this._breakCondition(n);i||this._timer>=this._timeToEnd?this._stop(n,i):this.onEachCountObservable.notifyObservers(n)},this._setState(0),this._contextObservable=Z.contextObservable,this._observableParameters=Z.observableParameters??{},this._breakCondition=Z.breakCondition??(()=>!1),this._timeToEnd=Z.timeout,Z.onEnded&&this.onTimerEndedObservable.add(Z.onEnded),Z.$k&&this.onEachCountObservable.add(Z.$k),Z.onAborted&&this.onTimerAbortedObservable.add(Z.onAborted)}set breakCondition(Z){this._breakCondition=Z}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let Z=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=Z,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(Z){this._state=Z,this.onStateChangedObservable.notifyObservers(this._state)}_stop(Z){let U=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),U?this.onTimerAbortedObservable.notifyObservers(Z):this.onTimerEndedObservable.notifyObservers(Z)}}var G=n(513),R=n(633),d=n(12817);class F extends B.c{constructor(Z){super(Z),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",l.s),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",l.g,new d.d(-1))}_preparePendingTasks(Z){const U=this.duration.getValue(Z);if(U<0||isNaN(U)||!isFinite(U))return this._reportError(Z,"Invalid duration in SetDelay block");if(Z._getGlobalContextVariable("activeDelays",0)>=F.MaxParallelDelayCount)return this._reportError(Z,"Max parallel delays reached");const n=Z._getGlobalContextVariable("lastDelayIndex",-1),i=Z._getExecutionVariable(this,"pendingDelays",[]),B=Z.configuration.Rk,l=new V({timeout:1e3*U,contextObservable:B.onBeforeRenderObservable,onEnded:()=>this._onEnded(l,Z)});l.start();const H=n+1;this.lastDelayIndex.setValue(new d.d(H),Z),Z._setGlobalContextVariable("lastDelayIndex",H),i[H]=l,Z._setExecutionVariable(this,"pendingDelays",i),this._updateGlobalTimers(Z)}_cancelPendingTasks(Z){const U=Z._getExecutionVariable(this,"pendingDelays",[]);for(const n of U)null===n||void 0===n||n.dispose();Z._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new d.d(-1),Z),this._updateGlobalTimers(Z)}_execute(Z,U){U!==this.cancel?(this._preparePendingTasks(Z),this.out._activateSignal(Z)):this._cancelPendingTasks(Z)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(Z,U){const n=U._getExecutionVariable(this,"pendingDelays",[]),i=n.indexOf(Z);-1!==i?n.splice(i,1):G.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),U._removePendingBlock(this),this.done._activateSignal(U),this._updateGlobalTimers(U)}_updateGlobalTimers(Z){const U=Z._getExecutionVariable(this,"pendingDelays",[]),n=Z._getGlobalContextVariable("pendingDelays",[]);for(let i=0;i<U.length;i++){if(!U[i])continue;const Z=U[i];n[i]&&n[i]!==Z?G.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):n[i]=Z}Z._setGlobalContextVariable("pendingDelays",n)}}F.MaxParallelDelayCount=100,(0,R.g)("FlowGraphSetDelayBlock",F)}}]);