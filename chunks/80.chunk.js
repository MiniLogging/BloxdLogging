"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[80],{13786:(L,j,P)=>{P.r(j),P.d(j,{FlowGraphSetDelayBlock:()=>g});var A,R=P(12546),o=P(12510),Y=P(469);!function(L){L[L.INIT=0]="INIT",L[L.STARTED=1]="STARTED",L[L.ENDED=2]="ENDED"}(A||(A={}));class u{constructor(L){this.onEachCountObservable=new Y.e,this.onTimerAbortedObservable=new Y.e,this.onTimerEndedObservable=new Y.e,this.onStateChangedObservable=new Y.e,this._observer=null,this._breakOnNextTick=!1,this._tick=L=>{const j=Date.now();this._timer=j-this._startTime;const P={startTime:this._startTime,currentTime:j,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:L},A=this._breakOnNextTick||this._breakCondition(P);A||this._timer>=this._timeToEnd?this._stop(P,A):this.onEachCountObservable.notifyObservers(P)},this._setState(0),this._contextObservable=L.contextObservable,this._observableParameters=L.observableParameters??{},this._breakCondition=L.breakCondition??(()=>!1),this._timeToEnd=L.timeout,L.onEnded&&this.onTimerEndedObservable.add(L.onEnded),L.Yk&&this.onEachCountObservable.add(L.Yk),L.onAborted&&this.onTimerAbortedObservable.add(L.onAborted)}set breakCondition(L){this._breakCondition=L}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let L=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=L,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(L){this._state=L,this.onStateChangedObservable.notifyObservers(this._state)}_stop(L){let j=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),j?this.onTimerAbortedObservable.notifyObservers(L):this.onTimerEndedObservable.notifyObservers(L)}}var a=P(490),D=P(606),S=P(12506);class g extends R.b{constructor(L){super(L),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",o.p),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",o.f,new S.b(-1))}_preparePendingTasks(L){const j=this.duration.getValue(L);if(j<0||isNaN(j)||!isFinite(j))return this._reportError(L,"Invalid duration in SetDelay block");if(L._getGlobalContextVariable("activeDelays",0)>=g.MaxParallelDelayCount)return this._reportError(L,"Max parallel delays reached");const P=L._getGlobalContextVariable("lastDelayIndex",-1),A=L._getExecutionVariable(this,"pendingDelays",[]),R=L.configuration.Rk,o=new u({timeout:1e3*j,contextObservable:R.onBeforeRenderObservable,onEnded:()=>this._onEnded(o,L)});o.start();const Y=P+1;this.lastDelayIndex.setValue(new S.b(Y),L),L._setGlobalContextVariable("lastDelayIndex",Y),A[Y]=o,L._setExecutionVariable(this,"pendingDelays",A),this._updateGlobalTimers(L)}_cancelPendingTasks(L){const j=L._getExecutionVariable(this,"pendingDelays",[]);for(const P of j)null===P||void 0===P||P.dispose();L._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new S.b(-1),L),this._updateGlobalTimers(L)}_execute(L,j){j!==this.cancel?(this._preparePendingTasks(L),this.out._activateSignal(L)):this._cancelPendingTasks(L)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(L,j){const P=j._getExecutionVariable(this,"pendingDelays",[]),A=P.indexOf(L);-1!==A?P.splice(A,1):a.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),j._removePendingBlock(this),this.done._activateSignal(j),this._updateGlobalTimers(j)}_updateGlobalTimers(L){const j=L._getExecutionVariable(this,"pendingDelays",[]),P=L._getGlobalContextVariable("pendingDelays",[]);for(let A=0;A<j.length;A++){if(!j[A])continue;const L=j[A];P[A]&&P[A]!==L?a.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):P[A]=L}L._setGlobalContextVariable("pendingDelays",P)}}g.MaxParallelDelayCount=100,(0,D.h)("FlowGraphSetDelayBlock",g)}}]);