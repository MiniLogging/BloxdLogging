"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[80],{14e3:(U,W,l)=>{l.r(W),l.d(W,{FlowGraphSetDelayBlock:()=>y});var M,t=l(12761),L=l(12704),p=l(496);!function(U){U[U.INIT=0]="INIT",U[U.STARTED=1]="STARTED",U[U.ENDED=2]="ENDED"}(M||(M={}));class B{constructor(U){this.onEachCountObservable=new p.b,this.onTimerAbortedObservable=new p.b,this.onTimerEndedObservable=new p.b,this.onStateChangedObservable=new p.b,this._observer=null,this._breakOnNextTick=!1,this._tick=U=>{const W=Date.now();this._timer=W-this._startTime;const l={startTime:this._startTime,currentTime:W,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:U},M=this._breakOnNextTick||this._breakCondition(l);M||this._timer>=this._timeToEnd?this._stop(l,M):this.onEachCountObservable.notifyObservers(l)},this._setState(0),this._contextObservable=U.contextObservable,this._observableParameters=U.observableParameters??{},this._breakCondition=U.breakCondition??(()=>!1),this._timeToEnd=U.timeout,U.onEnded&&this.onTimerEndedObservable.add(U.onEnded),U.al&&this.onEachCountObservable.add(U.al),U.onAborted&&this.onTimerAbortedObservable.add(U.onAborted)}set breakCondition(U){this._breakCondition=U}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let U=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=U,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(U){this._state=U,this.onStateChangedObservable.notifyObservers(this._state)}_stop(U){let W=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),W?this.onTimerAbortedObservable.notifyObservers(U):this.onTimerEndedObservable.notifyObservers(U)}}var k=l(512),A=l(655),q=l(12699);class y extends t.b{constructor(U){super(U),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",L.s),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",L.k,new q.d(-1))}_preparePendingTasks(U){const W=this.duration.getValue(U);if(W<0||isNaN(W)||!isFinite(W))return this._reportError(U,"Invalid duration in SetDelay block");if(U._getGlobalContextVariable("activeDelays",0)>=y.MaxParallelDelayCount)return this._reportError(U,"Max parallel delays reached");const l=U._getGlobalContextVariable("lastDelayIndex",-1),M=U._getExecutionVariable(this,"pendingDelays",[]),t=U.configuration.Gd,L=new B({timeout:1e3*W,contextObservable:t.onBeforeRenderObservable,onEnded:()=>this._onEnded(L,U)});L.start();const p=l+1;this.lastDelayIndex.setValue(new q.d(p),U),U._setGlobalContextVariable("lastDelayIndex",p),M[p]=L,U._setExecutionVariable(this,"pendingDelays",M),this._updateGlobalTimers(U)}_cancelPendingTasks(U){const W=U._getExecutionVariable(this,"pendingDelays",[]);for(const l of W)null===l||void 0===l||l.dispose();U._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new q.d(-1),U),this._updateGlobalTimers(U)}_execute(U,W){W!==this.cancel?(this._preparePendingTasks(U),this.out._activateSignal(U)):this._cancelPendingTasks(U)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(U,W){const l=W._getExecutionVariable(this,"pendingDelays",[]),M=l.indexOf(U);-1!==M?l.splice(M,1):k.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),W._removePendingBlock(this),this.done._activateSignal(W),this._updateGlobalTimers(W)}_updateGlobalTimers(U){const W=U._getExecutionVariable(this,"pendingDelays",[]),l=U._getGlobalContextVariable("pendingDelays",[]);for(let M=0;M<W.length;M++){if(!W[M])continue;const U=W[M];l[M]&&l[M]!==U?k.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):l[M]=U}U._setGlobalContextVariable("pendingDelays",l)}}y.MaxParallelDelayCount=100,(0,A.f)("FlowGraphSetDelayBlock",y)}}]);