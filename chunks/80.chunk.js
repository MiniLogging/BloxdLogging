"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[80],{14147:(q,c,U)=>{U.r(c),U.d(c,{FlowGraphThrottleBlock:()=>g});var J=U(12648),Q=U(12699),s=U(10850);class g extends Q.e{constructor(q){super(q),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",J.t),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",J.t,NaN)}_execute(q,c){if(c===this.reset)return this.lastRemainingTime.setValue(NaN,q),q._setExecutionVariable(this,"lastRemainingTime",NaN),void q._setExecutionVariable(this,"timestamp",0);const U=this.duration.getValue(q);if(U<=0||isNaN(U)||!isFinite(U))return this._reportError(q,"Invalid duration in Throttle block");const J=q._getExecutionVariable(this,"lastRemainingTime",NaN),Q=Date.now();if(isNaN(J))return this.lastRemainingTime.setValue(0,q),q._setExecutionVariable(this,"lastRemainingTime",0),q._setExecutionVariable(this,"timestamp",Q),this.out._activateSignal(q);{const c=Q-q._getExecutionVariable(this,"timestamp",0),J=1e3*U;if(J<=c)return this.lastRemainingTime.setValue(0,q),q._setExecutionVariable(this,"lastRemainingTime",0),q._setExecutionVariable(this,"timestamp",Q),this.out._activateSignal(q);{const U=J-c;this.lastRemainingTime.setValue(U/1e3,q),q._setExecutionVariable(this,"lastRemainingTime",U)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,s.f)("FlowGraphThrottleBlock",g)}}]);