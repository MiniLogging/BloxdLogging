"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[80],{14054:(c,b,A)=>{A.r(b),A.d(b,{FlowGraphSetDelayBlock:()=>X});var o,t=A(12807),n=A(12763),h=A(518);!function(c){c[c.INIT=0]="INIT",c[c.STARTED=1]="STARTED",c[c.ENDED=2]="ENDED"}(o||(o={}));class s{constructor(c){this.onEachCountObservable=new h.b,this.onTimerAbortedObservable=new h.b,this.onTimerEndedObservable=new h.b,this.onStateChangedObservable=new h.b,this._observer=null,this._breakOnNextTick=!1,this._tick=c=>{const b=Date.now();this._timer=b-this._startTime;const A={startTime:this._startTime,currentTime:b,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:c},o=this._breakOnNextTick||this._breakCondition(A);o||this._timer>=this._timeToEnd?this._stop(A,o):this.onEachCountObservable.notifyObservers(A)},this._setState(0),this._contextObservable=c.contextObservable,this._observableParameters=c.observableParameters??{},this._breakCondition=c.breakCondition??(()=>!1),this._timeToEnd=c.timeout,c.onEnded&&this.onTimerEndedObservable.add(c.onEnded),c.Zk&&this.onEachCountObservable.add(c.Zk),c.onAborted&&this.onTimerAbortedObservable.add(c.onAborted)}set breakCondition(c){this._breakCondition=c}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let c=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=c,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(c){this._state=c,this.onStateChangedObservable.notifyObservers(this._state)}_stop(c){let b=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),b?this.onTimerAbortedObservable.notifyObservers(c):this.onTimerEndedObservable.notifyObservers(c)}}var L=A(531),C=A(633),J=A(12760);class X extends t.d{constructor(c){super(c),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",n.t),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",n.g,new J.d(-1))}_preparePendingTasks(c){const b=this.duration.getValue(c);if(b<0||isNaN(b)||!isFinite(b))return this._reportError(c,"Invalid duration in SetDelay block");if(c._getGlobalContextVariable("activeDelays",0)>=X.MaxParallelDelayCount)return this._reportError(c,"Max parallel delays reached");const A=c._getGlobalContextVariable("lastDelayIndex",-1),o=c._getExecutionVariable(this,"pendingDelays",[]),t=c.configuration.yd,n=new s({timeout:1e3*b,contextObservable:t.onBeforeRenderObservable,onEnded:()=>this._onEnded(n,c)});n.start();const h=A+1;this.lastDelayIndex.setValue(new J.d(h),c),c._setGlobalContextVariable("lastDelayIndex",h),o[h]=n,c._setExecutionVariable(this,"pendingDelays",o),this._updateGlobalTimers(c)}_cancelPendingTasks(c){const b=c._getExecutionVariable(this,"pendingDelays",[]);for(const A of b)null===A||void 0===A||A.dispose();c._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new J.d(-1),c),this._updateGlobalTimers(c)}_execute(c,b){b!==this.cancel?(this._preparePendingTasks(c),this.out._activateSignal(c)):this._cancelPendingTasks(c)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(c,b){const A=b._getExecutionVariable(this,"pendingDelays",[]),o=A.indexOf(c);-1!==o?A.splice(o,1):L.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),b._removePendingBlock(this),this.done._activateSignal(b),this._updateGlobalTimers(b)}_updateGlobalTimers(c){const b=c._getExecutionVariable(this,"pendingDelays",[]),A=c._getGlobalContextVariable("pendingDelays",[]);for(let o=0;o<b.length;o++){if(!b[o])continue;const c=b[o];A[o]&&A[o]!==c?L.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):A[o]=c}c._setGlobalContextVariable("pendingDelays",A)}}X.MaxParallelDelayCount=100,(0,C.d)("FlowGraphSetDelayBlock",X)}}]);