"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[65],{14057:(P,Q,O)=>{O.r(Q),O.d(Q,{FlowGraphDeterminantBlock:()=>C,FlowGraphInvertMatrixBlock:()=>L,FlowGraphMatrixComposeBlock:()=>j,FlowGraphMatrixDecomposeBlock:()=>A,FlowGraphMatrixMultiplicationBlock:()=>G,FlowGraphTransposeBlock:()=>X});var b=O(12885),F=O(12871),g=O(751),m=O(696),q=O(14046),R=O(14033);class X extends q.b{constructor(P){super((0,F.K)((null===P||void 0===P?void 0:P.matrixType)||"Matrix"),(0,F.K)((null===P||void 0===P?void 0:P.matrixType)||"Matrix"),(P=>P.transpose?P.transpose():g.c.Transpose(P)),"FlowGraphTransposeBlock",P)}}(0,m.f)("FlowGraphTransposeBlock",X);class C extends q.b{constructor(P){super((0,F.K)((null===P||void 0===P?void 0:P.matrixType)||"Matrix"),F.o,(P=>P.determinant()),"FlowGraphDeterminantBlock",P)}}(0,m.f)("FlowGraphDeterminantBlock",C);class L extends q.b{constructor(P){super((0,F.K)((null===P||void 0===P?void 0:P.matrixType)||"Matrix"),(0,F.K)((null===P||void 0===P?void 0:P.matrixType)||"Matrix"),(P=>P.inverse?P.inverse():g.c.Invert(P)),"FlowGraphInvertMatrixBlock",P)}}(0,m.f)("FlowGraphInvertMatrixBlock",L);class G extends R.d{constructor(P){super((0,F.K)((null===P||void 0===P?void 0:P.matrixType)||"Matrix"),(0,F.K)((null===P||void 0===P?void 0:P.matrixType)||"Matrix"),(0,F.K)((null===P||void 0===P?void 0:P.matrixType)||"Matrix"),((P,Q)=>Q.multiply(P)),"FlowGraphMatrixMultiplicationBlock",P)}}(0,m.f)("FlowGraphMatrixMultiplicationBlock",G);class A extends b.c{constructor(P){super(P),this.input=this.registerDataInput("input",F.k),this.position=this.registerDataOutput("position",F.A),this.rotationQuaternion=this.registerDataOutput("rotationQuaternion",F.r),this.td=this.registerDataOutput("td",F.A),this.isValid=this.registerDataOutput("isValid",F.g,!1)}_updateOutputs(P){const Q=P._getExecutionVariable(this,"executionId",-1),O=P._getExecutionVariable(this,"cachedPosition",null),b=P._getExecutionVariable(this,"cachedRotation",null),F=P._getExecutionVariable(this,"cachedScaling",null);if(Q===P.executionId&&O&&b&&F)this.position.setValue(O,P),this.rotationQuaternion.setValue(b,P),this.td.setValue(F,P);else{const Q=this.input.getValue(P),m=O||new g.j,q=b||new g.d,R=F||new g.j,X=Math.round(1e4*Q.m[3])/1e4,C=Math.round(1e4*Q.m[7])/1e4,L=Math.round(1e4*Q.m[11])/1e4,G=Math.round(1e4*Q.m[15])/1e4;if(0!==X||0!==C||0!==L||1!==G)return this.isValid.setValue(!1,P),this.position.setValue(g.j.Zero(),P),this.rotationQuaternion.setValue(g.d.Identity(),P),void this.td.setValue(g.j.One(),P);const A=Q.decompose(R,q,m);this.isValid.setValue(A,P),this.position.setValue(m,P),this.rotationQuaternion.setValue(q,P),this.td.setValue(R,P),P._setExecutionVariable(this,"cachedPosition",m),P._setExecutionVariable(this,"cachedRotation",q),P._setExecutionVariable(this,"cachedScaling",R),P._setExecutionVariable(this,"executionId",P.executionId)}}getClassName(){return"FlowGraphMatrixDecompose"}}(0,m.f)("FlowGraphMatrixDecompose",A);class j extends b.c{constructor(P){super(P),this.position=this.registerDataInput("position",F.A),this.rotationQuaternion=this.registerDataInput("rotationQuaternion",F.r),this.td=this.registerDataInput("td",F.A),this.value=this.registerDataOutput("value",F.k)}_updateOutputs(P){const Q=P._getExecutionVariable(this,"executionId",-1),O=P._getExecutionVariable(this,"cachedMatrix",null);if(Q===P.executionId&&O)this.value.setValue(O,P);else{const Q=g.c.Compose(this.td.getValue(P),this.rotationQuaternion.getValue(P),this.position.getValue(P));this.value.setValue(Q,P),P._setExecutionVariable(this,"cachedMatrix",Q),P._setExecutionVariable(this,"executionId",P.executionId)}}getClassName(){return"FlowGraphMatrixCompose"}}(0,m.f)("FlowGraphMatrixCompose",j)},14033:(P,Q,O)=>{O.d(Q,{d:()=>F});var b=O(14042);class F extends b.e{constructor(P,Q,O,b,F,g){super(O,g),this._operation=b,this._className=F,this.a=this.registerDataInput("a",P),this.b=this.registerDataInput("b",Q)}_doOperation(P){const Q=this.a.getValue(P),O=this.b.getValue(P);return this._operation(Q,O)}getClassName(){return this._className}}},14042:(P,Q,O)=>{O.d(Q,{e:()=>q});var b=O(12885),F=O(12871);const g="cachedOperationValue",m="cachedExecutionId";class q extends b.c{constructor(P,Q){super(Q),this.value=this.registerDataOutput("value",P),this.isValid=this.registerDataOutput("isValid",F.g)}_updateOutputs(P){const Q=P._getExecutionVariable(this,m,-1),O=P._getExecutionVariable(this,g,null);if(void 0!==O&&null!==O&&Q===P.executionId)this.isValid.setValue(!0,P),this.value.setValue(O,P);else try{const Q=this._doOperation(P);if(void 0===Q||null===Q)return void this.isValid.setValue(!1,P);P._setExecutionVariable(this,g,Q),P._setExecutionVariable(this,m,P.executionId),this.value.setValue(Q,P),this.isValid.setValue(!0,P)}catch(b){this.isValid.setValue(!1,P)}}}},14046:(P,Q,O)=>{O.d(Q,{b:()=>F});var b=O(14042);class F extends b.e{constructor(P,Q,O,b,F){super(Q,F),this._operation=O,this._className=b,this.a=this.registerDataInput("a",P)}_doOperation(P){return this._operation(this.a.getValue(P))}getClassName(){return this._className}}}}]);