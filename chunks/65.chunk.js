"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[65],{13858:(A,X,s)=>{s.r(X),s.d(X,{FlowGraphDeterminantBlock:()=>Y,FlowGraphInvertMatrixBlock:()=>v,FlowGraphMatrixComposeBlock:()=>d,FlowGraphMatrixDecomposeBlock:()=>M,FlowGraphMatrixMultiplicationBlock:()=>c,FlowGraphTransposeBlock:()=>i});var N=s(12701),f=s(12677),E=s(678),g=s(616),K=s(13846),r=s(13835);class i extends K.d{constructor(A){super((0,f.C)((null===A||void 0===A?void 0:A.matrixType)||"Matrix"),(0,f.C)((null===A||void 0===A?void 0:A.matrixType)||"Matrix"),(A=>A.transpose?A.transpose():E.c.Transpose(A)),"FlowGraphTransposeBlock",A)}}(0,g.f)("FlowGraphTransposeBlock",i);class Y extends K.d{constructor(A){super((0,f.C)((null===A||void 0===A?void 0:A.matrixType)||"Matrix"),f.n,(A=>A.determinant()),"FlowGraphDeterminantBlock",A)}}(0,g.f)("FlowGraphDeterminantBlock",Y);class v extends K.d{constructor(A){super((0,f.C)((null===A||void 0===A?void 0:A.matrixType)||"Matrix"),(0,f.C)((null===A||void 0===A?void 0:A.matrixType)||"Matrix"),(A=>A.inverse?A.inverse():E.c.Invert(A)),"FlowGraphInvertMatrixBlock",A)}}(0,g.f)("FlowGraphInvertMatrixBlock",v);class c extends r.c{constructor(A){super((0,f.C)((null===A||void 0===A?void 0:A.matrixType)||"Matrix"),(0,f.C)((null===A||void 0===A?void 0:A.matrixType)||"Matrix"),(0,f.C)((null===A||void 0===A?void 0:A.matrixType)||"Matrix"),((A,X)=>X.multiply(A)),"FlowGraphMatrixMultiplicationBlock",A)}}(0,g.f)("FlowGraphMatrixMultiplicationBlock",c);class M extends N.e{constructor(A){super(A),this.input=this.registerDataInput("input",f.g),this.position=this.registerDataOutput("position",f.u),this.rotationQuaternion=this.registerDataOutput("rotationQuaternion",f.p),this.hi=this.registerDataOutput("hi",f.u),this.isValid=this.registerDataOutput("isValid",f.c,!1)}_updateOutputs(A){const X=A._getExecutionVariable(this,"executionId",-1),s=A._getExecutionVariable(this,"cachedPosition",null),N=A._getExecutionVariable(this,"cachedRotation",null),f=A._getExecutionVariable(this,"cachedScaling",null);if(X===A.executionId&&s&&N&&f)this.position.setValue(s,A),this.rotationQuaternion.setValue(N,A),this.hi.setValue(f,A);else{const X=this.input.getValue(A),g=s||new E.k,K=N||new E.d,r=f||new E.k,i=Math.round(1e4*X.m[3])/1e4,Y=Math.round(1e4*X.m[7])/1e4,v=Math.round(1e4*X.m[11])/1e4,c=Math.round(1e4*X.m[15])/1e4;if(0!==i||0!==Y||0!==v||1!==c)return this.isValid.setValue(!1,A),this.position.setValue(E.k.Zero(),A),this.rotationQuaternion.setValue(E.d.Identity(),A),void this.hi.setValue(E.k.One(),A);const M=X.decompose(r,K,g);this.isValid.setValue(M,A),this.position.setValue(g,A),this.rotationQuaternion.setValue(K,A),this.hi.setValue(r,A),A._setExecutionVariable(this,"cachedPosition",g),A._setExecutionVariable(this,"cachedRotation",K),A._setExecutionVariable(this,"cachedScaling",r),A._setExecutionVariable(this,"executionId",A.executionId)}}getClassName(){return"FlowGraphMatrixDecompose"}}(0,g.f)("FlowGraphMatrixDecompose",M);class d extends N.e{constructor(A){super(A),this.position=this.registerDataInput("position",f.u),this.rotationQuaternion=this.registerDataInput("rotationQuaternion",f.p),this.hi=this.registerDataInput("hi",f.u),this.value=this.registerDataOutput("value",f.g)}_updateOutputs(A){const X=A._getExecutionVariable(this,"executionId",-1),s=A._getExecutionVariable(this,"cachedMatrix",null);if(X===A.executionId&&s)this.value.setValue(s,A);else{const X=E.c.Compose(this.hi.getValue(A),this.rotationQuaternion.getValue(A),this.position.getValue(A));this.value.setValue(X,A),A._setExecutionVariable(this,"cachedMatrix",X),A._setExecutionVariable(this,"executionId",A.executionId)}}getClassName(){return"FlowGraphMatrixCompose"}}(0,g.f)("FlowGraphMatrixCompose",d)},13835:(A,X,s)=>{s.d(X,{c:()=>f});var N=s(13839);class f extends N.e{constructor(A,X,s,N,f,E){super(s,E),this._operation=N,this._className=f,this.a=this.registerDataInput("a",A),this.b=this.registerDataInput("b",X)}_doOperation(A){const X=this.a.getValue(A),s=this.b.getValue(A);return this._operation(X,s)}getClassName(){return this._className}}},13839:(A,X,s)=>{s.d(X,{e:()=>K});var N=s(12701),f=s(12677);const E="cachedOperationValue",g="cachedExecutionId";class K extends N.e{constructor(A,X){super(X),this.value=this.registerDataOutput("value",A),this.isValid=this.registerDataOutput("isValid",f.c)}_updateOutputs(A){const X=A._getExecutionVariable(this,g,-1),s=A._getExecutionVariable(this,E,null);if(void 0!==s&&null!==s&&X===A.executionId)this.isValid.setValue(!0,A),this.value.setValue(s,A);else try{const X=this._doOperation(A);if(void 0===X||null===X)return void this.isValid.setValue(!1,A);A._setExecutionVariable(this,E,X),A._setExecutionVariable(this,g,A.executionId),this.value.setValue(X,A),this.isValid.setValue(!0,A)}catch(N){this.isValid.setValue(!1,A)}}}},13846:(A,X,s)=>{s.d(X,{d:()=>f});var N=s(13839);class f extends N.e{constructor(A,X,s,N,f){super(X,f),this._operation=s,this._className=N,this.a=this.registerDataInput("a",A)}_doOperation(A){return this._operation(this.a.getValue(A))}getClassName(){return this._className}}}}]);