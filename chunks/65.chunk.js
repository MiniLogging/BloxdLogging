"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[65],{14064:(n,k,T)=>{T.r(k),T.d(k,{FlowGraphDeterminantBlock:()=>S,FlowGraphInvertMatrixBlock:()=>P,FlowGraphMatrixComposeBlock:()=>H,FlowGraphMatrixDecomposeBlock:()=>J,FlowGraphMatrixMultiplicationBlock:()=>W,FlowGraphTransposeBlock:()=>I});var c=T(12845),K=T(12831),Q=T(730),G=T(675),w=T(14055),E=T(14044);class I extends w.c{constructor(n){super((0,K.L)((null===n||void 0===n?void 0:n.matrixType)||"Matrix"),(0,K.L)((null===n||void 0===n?void 0:n.matrixType)||"Matrix"),(n=>n.transpose?n.transpose():Q.d.Transpose(n)),"FlowGraphTransposeBlock",n)}}(0,G.f)("FlowGraphTransposeBlock",I);class S extends w.c{constructor(n){super((0,K.L)((null===n||void 0===n?void 0:n.matrixType)||"Matrix"),K.w,(n=>n.determinant()),"FlowGraphDeterminantBlock",n)}}(0,G.f)("FlowGraphDeterminantBlock",S);class P extends w.c{constructor(n){super((0,K.L)((null===n||void 0===n?void 0:n.matrixType)||"Matrix"),(0,K.L)((null===n||void 0===n?void 0:n.matrixType)||"Matrix"),(n=>n.inverse?n.inverse():Q.d.Invert(n)),"FlowGraphInvertMatrixBlock",n)}}(0,G.f)("FlowGraphInvertMatrixBlock",P);class W extends E.e{constructor(n){super((0,K.L)((null===n||void 0===n?void 0:n.matrixType)||"Matrix"),(0,K.L)((null===n||void 0===n?void 0:n.matrixType)||"Matrix"),(0,K.L)((null===n||void 0===n?void 0:n.matrixType)||"Matrix"),((n,k)=>k.multiply(n)),"FlowGraphMatrixMultiplicationBlock",n)}}(0,G.f)("FlowGraphMatrixMultiplicationBlock",W);class J extends c.b{constructor(n){super(n),this.input=this.registerDataInput("input",K.m),this.position=this.registerDataOutput("position",K.C),this.rotationQuaternion=this.registerDataOutput("rotationQuaternion",K.x),this.ei=this.registerDataOutput("ei",K.C),this.isValid=this.registerDataOutput("isValid",K.g,!1)}_updateOutputs(n){const k=n._getExecutionVariable(this,"executionId",-1),T=n._getExecutionVariable(this,"cachedPosition",null),c=n._getExecutionVariable(this,"cachedRotation",null),K=n._getExecutionVariable(this,"cachedScaling",null);if(k===n.executionId&&T&&c&&K)this.position.setValue(T,n),this.rotationQuaternion.setValue(c,n),this.ei.setValue(K,n);else{const k=this.input.getValue(n),G=T||new Q.o,w=c||new Q.h,E=K||new Q.o,I=Math.round(1e4*k.m[3])/1e4,S=Math.round(1e4*k.m[7])/1e4,P=Math.round(1e4*k.m[11])/1e4,W=Math.round(1e4*k.m[15])/1e4;if(0!==I||0!==S||0!==P||1!==W)return this.isValid.setValue(!1,n),this.position.setValue(Q.o.Zero(),n),this.rotationQuaternion.setValue(Q.h.Identity(),n),void this.ei.setValue(Q.o.One(),n);const J=k.decompose(E,w,G);this.isValid.setValue(J,n),this.position.setValue(G,n),this.rotationQuaternion.setValue(w,n),this.ei.setValue(E,n),n._setExecutionVariable(this,"cachedPosition",G),n._setExecutionVariable(this,"cachedRotation",w),n._setExecutionVariable(this,"cachedScaling",E),n._setExecutionVariable(this,"executionId",n.executionId)}}getClassName(){return"FlowGraphMatrixDecompose"}}(0,G.f)("FlowGraphMatrixDecompose",J);class H extends c.b{constructor(n){super(n),this.position=this.registerDataInput("position",K.C),this.rotationQuaternion=this.registerDataInput("rotationQuaternion",K.x),this.ei=this.registerDataInput("ei",K.C),this.value=this.registerDataOutput("value",K.m)}_updateOutputs(n){const k=n._getExecutionVariable(this,"executionId",-1),T=n._getExecutionVariable(this,"cachedMatrix",null);if(k===n.executionId&&T)this.value.setValue(T,n);else{const k=Q.d.Compose(this.ei.getValue(n),this.rotationQuaternion.getValue(n),this.position.getValue(n));this.value.setValue(k,n),n._setExecutionVariable(this,"cachedMatrix",k),n._setExecutionVariable(this,"executionId",n.executionId)}}getClassName(){return"FlowGraphMatrixCompose"}}(0,G.f)("FlowGraphMatrixCompose",H)},14044:(n,k,T)=>{T.d(k,{e:()=>K});var c=T(14053);class K extends c.b{constructor(n,k,T,c,K,Q){super(T,Q),this._operation=c,this._className=K,this.a=this.registerDataInput("a",n),this.b=this.registerDataInput("b",k)}_doOperation(n){const k=this.a.getValue(n),T=this.b.getValue(n);return this._operation(k,T)}getClassName(){return this._className}}},14053:(n,k,T)=>{T.d(k,{b:()=>w});var c=T(12845),K=T(12831);const Q="cachedOperationValue",G="cachedExecutionId";class w extends c.b{constructor(n,k){super(k),this.value=this.registerDataOutput("value",n),this.isValid=this.registerDataOutput("isValid",K.g)}_updateOutputs(n){const k=n._getExecutionVariable(this,G,-1),T=n._getExecutionVariable(this,Q,null);if(void 0!==T&&null!==T&&k===n.executionId)this.isValid.setValue(!0,n),this.value.setValue(T,n);else try{const k=this._doOperation(n);if(void 0===k||null===k)return void this.isValid.setValue(!1,n);n._setExecutionVariable(this,Q,k),n._setExecutionVariable(this,G,n.executionId),this.value.setValue(k,n),this.isValid.setValue(!0,n)}catch(c){this.isValid.setValue(!1,n)}}}},14055:(n,k,T)=>{T.d(k,{c:()=>K});var c=T(14053);class K extends c.b{constructor(n,k,T,c,K){super(k,K),this._operation=T,this._className=c,this.a=this.registerDataInput("a",n)}_doOperation(n){return this._operation(this.a.getValue(n))}getClassName(){return this._className}}}}]);