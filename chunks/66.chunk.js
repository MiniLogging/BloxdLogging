"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[66],{14342:(Z,c,L)=>{L.r(c),L.d(c,{FlowGraphReceiveCustomEventBlock:()=>V});var k=L(12866),N=L(11038),R=L(11012),G=L(12807);class V extends k.e{constructor(Z){super(Z),this.config=Z,this.initPriority=1;for(const c in this.config.eventData)this.registerDataOutput(c,this.config.eventData[c].type)}_preparePendingTasks(Z){const c=Z.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(c&&c.hasObservers()&&c.observers.length>G.d.MaxEventsPerType)return void this._reportError(Z,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${G.d.MaxEventsPerType}.`);const L=c.add((c=>{const L=Object.keys(c);for(const N of L){var k;null===(k=this.getDataOutput(N))||void 0===k||k.setValue(c[N],Z)}this._execute(Z)}));Z._setExecutionVariable(this,"_eventObserver",L)}_cancelPendingTasks(Z){const c=Z.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(c){const L=Z._getExecutionVariable(this,"_eventObserver",null);c.remove(L)}else N.c.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(Z,c){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,R.g)("FlowGraphReceiveCustomEventBlock",V)}}]);