"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[66],{14146:(q,f,j)=>{j.r(f),j.d(f,{FlowGraphReceiveCustomEventBlock:()=>Q});var d=j(12742),g=j(10992),h=j(10965),L=j(12691);class Q extends d.e{constructor(q){super(q),this.config=q,this.initPriority=1;for(const f in this.config.eventData)this.registerDataOutput(f,this.config.eventData[f].type)}_preparePendingTasks(q){const f=q.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(f&&f.hasObservers()&&f.observers.length>L.e.MaxEventsPerType)return void this._reportError(q,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${L.e.MaxEventsPerType}.`);const j=f.add((f=>{const j=Object.keys(f);for(const g of j){var d;null===(d=this.getDataOutput(g))||void 0===d||d.setValue(f[g],q)}this._execute(q)}));q._setExecutionVariable(this,"_eventObserver",j)}_cancelPendingTasks(q){const f=q.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(f){const j=q._getExecutionVariable(this,"_eventObserver",null);f.remove(j)}else g.h.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(q,f){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,h.f)("FlowGraphReceiveCustomEventBlock",Q)}}]);