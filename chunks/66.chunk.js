"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[66],{14189:(x,O,Q)=>{Q.r(O),Q.d(O,{FlowGraphReceiveCustomEventBlock:()=>o});var X=Q(12739),Z=Q(10894),n=Q(10866),V=Q(12694);class o extends X.e{constructor(x){super(x),this.config=x,this.initPriority=1;for(const O in this.config.eventData)this.registerDataOutput(O,this.config.eventData[O].type)}_preparePendingTasks(x){const O=x.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(O&&O.hasObservers()&&O.observers.length>V.b.MaxEventsPerType)return void this._reportError(x,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${V.b.MaxEventsPerType}.`);const Q=O.add((O=>{const Q=Object.keys(O);for(const Z of Q){var X;null===(X=this.getDataOutput(Z))||void 0===X||X.setValue(O[Z],x)}this._execute(x)}));x._setExecutionVariable(this,"_eventObserver",Q)}_cancelPendingTasks(x){const O=x.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(O){const Q=x._getExecutionVariable(this,"_eventObserver",null);O.remove(Q)}else Z.g.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(x,O){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,n.d)("FlowGraphReceiveCustomEventBlock",o)}}]);