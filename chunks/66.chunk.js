"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[66],{14250:(s,Z,o)=>{o.r(Z),o.d(Z,{FlowGraphReceiveCustomEventBlock:()=>O});var t=o(12825),j=o(10938),S=o(10916),a=o(12763);class O extends t.c{constructor(s){super(s),this.config=s,this.initPriority=1;for(const Z in this.config.eventData)this.registerDataOutput(Z,this.config.eventData[Z].type)}_preparePendingTasks(s){const Z=s.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(Z&&Z.hasObservers()&&Z.observers.length>a.c.MaxEventsPerType)return void this._reportError(s,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${a.c.MaxEventsPerType}.`);const o=Z.add((Z=>{const o=Object.keys(Z);for(const j of o){var t;null===(t=this.getDataOutput(j))||void 0===t||t.setValue(Z[j],s)}this._execute(s)}));s._setExecutionVariable(this,"_eventObserver",o)}_cancelPendingTasks(s){const Z=s.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(Z){const o=s._getExecutionVariable(this,"_eventObserver",null);Z.remove(o)}else j.g.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(s,Z){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,S.f)("FlowGraphReceiveCustomEventBlock",O)}}]);