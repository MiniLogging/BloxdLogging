"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[66],{13960:(z,u,Y)=>{Y.r(u),Y.d(u,{FlowGraphReceiveCustomEventBlock:()=>T});var H=Y(12573),E=Y(10945),J=Y(10918),l=Y(12512);class T extends H.b{constructor(z){super(z),this.config=z,this.initPriority=1;for(const u in this.config.eventData)this.registerDataOutput(u,this.config.eventData[u].type)}_preparePendingTasks(z){const u=z.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(u&&u.hasObservers()&&u.observers.length>l.b.MaxEventsPerType)return void this._reportError(z,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${l.b.MaxEventsPerType}.`);const Y=u.add((u=>{const Y=Object.keys(u);for(const E of Y){var H;null===(H=this.getDataOutput(E))||void 0===H||H.setValue(u[E],z)}this._execute(z)}));z._setExecutionVariable(this,"_eventObserver",Y)}_cancelPendingTasks(z){const u=z.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(u){const Y=z._getExecutionVariable(this,"_eventObserver",null);u.remove(Y)}else E.e.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(z,u){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,J.d)("FlowGraphReceiveCustomEventBlock",T)}}]);