"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[66],{14515:(G,V,W)=>{W.r(V),W.d(V,{FlowGraphReceiveCustomEventBlock:()=>z});var J=W(13106),R=W(11189),d=W(11159),k=W(13053);class z extends J.d{constructor(G){super(G),this.config=G,this.initPriority=1;for(const V in this.config.eventData)this.registerDataOutput(V,this.config.eventData[V].type)}_preparePendingTasks(G){const V=G.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(V&&V.hasObservers()&&V.observers.length>k.c.MaxEventsPerType)return void this._reportError(G,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${k.c.MaxEventsPerType}.`);const W=V.add((V=>{const W=Object.keys(V);for(const R of W){var J;null===(J=this.getDataOutput(R))||void 0===J||J.setValue(V[R],G)}this._execute(G)}));G._setExecutionVariable(this,"_eventObserver",W)}_cancelPendingTasks(G){const V=G.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(V){const W=G._getExecutionVariable(this,"_eventObserver",null);V.remove(W)}else R.h.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(G,V){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,d.d)("FlowGraphReceiveCustomEventBlock",z)}}]);