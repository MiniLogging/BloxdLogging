"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[66],{14388:(w,p,e)=>{e.r(p),e.d(p,{FlowGraphReceiveCustomEventBlock:()=>q});var r=e(12909),I=e(11071),d=e(11038),f=e(12854);class q extends r.d{constructor(w){super(w),this.config=w,this.initPriority=1;for(const p in this.config.eventData)this.registerDataOutput(p,this.config.eventData[p].type)}_preparePendingTasks(w){const p=w.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(p&&p.hasObservers()&&p.observers.length>f.c.MaxEventsPerType)return void this._reportError(w,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${f.c.MaxEventsPerType}.`);const e=p.add((p=>{const e=Object.keys(p);for(const I of e){var r;null===(r=this.getDataOutput(I))||void 0===r||r.setValue(p[I],w)}this._execute(w)}));w._setExecutionVariable(this,"_eventObserver",e)}_cancelPendingTasks(w){const p=w.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(p){const e=w._getExecutionVariable(this,"_eventObserver",null);p.remove(e)}else I.g.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(w,p){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,d.d)("FlowGraphReceiveCustomEventBlock",q)}}]);