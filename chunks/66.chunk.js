"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[66],{14409:(V,I,m)=>{m.r(I),m.d(I,{FlowGraphReceiveCustomEventBlock:()=>k});var C=m(12930),l=m(11076),s=m(11048),F=m(12891);class k extends C.b{constructor(V){super(V),this.config=V,this.initPriority=1;for(const I in this.config.eventData)this.registerDataOutput(I,this.config.eventData[I].type)}_preparePendingTasks(V){const I=V.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(I&&I.hasObservers()&&I.observers.length>F.c.MaxEventsPerType)return void this._reportError(V,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${F.c.MaxEventsPerType}.`);const m=I.add((I=>{const m=Object.keys(I);for(const l of m){var C;null===(C=this.getDataOutput(l))||void 0===C||C.setValue(I[l],V)}this._execute(V)}));V._setExecutionVariable(this,"_eventObserver",m)}_cancelPendingTasks(V){const I=V.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(I){const m=V._getExecutionVariable(this,"_eventObserver",null);I.remove(m)}else l.d.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(V,I){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,s.h)("FlowGraphReceiveCustomEventBlock",k)}}]);