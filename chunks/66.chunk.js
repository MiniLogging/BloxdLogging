"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[66],{14074:(q,c,U)=>{U.r(c),U.d(c,{FlowGraphReceiveCustomEventBlock:()=>X});var J=U(12686),Q=U(10879),s=U(10850),g=U(12630);class X extends J.e{constructor(q){super(q),this.config=q,this.initPriority=1;for(const c in this.config.eventData)this.registerDataOutput(c,this.config.eventData[c].type)}_preparePendingTasks(q){const c=q.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(c&&c.hasObservers()&&c.observers.length>g.b.MaxEventsPerType)return void this._reportError(q,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${g.b.MaxEventsPerType}.`);const U=c.add((c=>{const U=Object.keys(c);for(const Q of U){var J;null===(J=this.getDataOutput(Q))||void 0===J||J.setValue(c[Q],q)}this._execute(q)}));q._setExecutionVariable(this,"_eventObserver",U)}_cancelPendingTasks(q){const c=q.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(c){const U=q._getExecutionVariable(this,"_eventObserver",null);c.remove(U)}else Q.e.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(q,c){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,s.f)("FlowGraphReceiveCustomEventBlock",X)}}]);