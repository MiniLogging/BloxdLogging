"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[66],{14100:(h,d,m)=>{m.r(d),m.d(d,{FlowGraphReceiveCustomEventBlock:()=>a});var j=m(12703),A=m(11107),b=m(11080),w=m(12651);class a extends j.c{constructor(h){super(h),this.config=h,this.initPriority=1;for(const d in this.config.eventData)this.registerDataOutput(d,this.config.eventData[d].type)}_preparePendingTasks(h){const d=h.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(d&&d.hasObservers()&&d.observers.length>w.b.MaxEventsPerType)return void this._reportError(h,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${w.b.MaxEventsPerType}.`);const m=d.add((d=>{const m=Object.keys(d);for(const A of m){var j;null===(j=this.getDataOutput(A))||void 0===j||j.setValue(d[A],h)}this._execute(h)}));h._setExecutionVariable(this,"_eventObserver",m)}_cancelPendingTasks(h){const d=h.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(d){const m=h._getExecutionVariable(this,"_eventObserver",null);d.remove(m)}else A.e.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(h,d){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,b.i)("FlowGraphReceiveCustomEventBlock",a)}}]);