"use strict";(self.u4k1rqylno=self.u4k1rqylno||[]).push([[22],{11958:(e,E,H)=>{H.r(E),H.d(E,{ShaderMaterial:()=>h});var N=H(11776),u=H(11967),z=H(11738),P=H(11818),M=H(11712),D=H(11690),A=H(12042),C=H(11571),i=H(12045),V=H(11579),U=H(12085),j=H(12080);const F={effect:null,subMesh:null};class h extends i.e{constructor(e,E,H){let N=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(e,E,!(arguments.length>4&&void 0!==arguments[4])||arguments[4]),this._textures={},this._textureArrays={},this._externalTextures={},this._floats={},this._ints={},this._uints={},this._floatsArrays={},this._colors3={},this._colors3Arrays={},this._colors4={},this._colors4Arrays={},this._vectors2={},this._vectors3={},this._vectors4={},this._quaternions={},this._quaternionsArrays={},this._matrices={},this._matrixArrays={},this._matrices3x3={},this._matrices2x2={},this._vectors2Arrays={},this._vectors3Arrays={},this._vectors4Arrays={},this._uniformBuffers={},this._textureSamplers={},this._storageBuffers={},this._cachedWorldViewMatrix=new z.Matrix,this._cachedWorldViewProjectionMatrix=new z.Matrix,this._multiview=!1,this._materialHelperNeedsPreviousMatrices=!1,this._shaderPath=H,this._options={needAlphaBlending:!1,needAlphaTesting:!1,attributes:["position","normal","uv"],uniforms:["worldViewProjection"],uniformBuffers:[],samplers:[],externalTextures:[],samplerObjects:[],storageBuffers:[],defines:[],useClipPlane:!1,...N}}get shaderPath(){return this._shaderPath}set shaderPath(e){this._shaderPath=e}get options(){return this._options}get isMultiview(){return this._multiview}getClassName(){return"ShaderMaterial"}needAlphaBlending(){return this.alpha<1||this._options.needAlphaBlending}needAlphaTesting(){return this._options.needAlphaTesting}_checkUniform(e){-1===this._options.uniforms.indexOf(e)&&this._options.uniforms.push(e)}setTexture(e,E){return-1===this._options.samplers.indexOf(e)&&this._options.samplers.push(e),this._textures[e]=E,this}removeTexture(e){delete this._textures[e]}setTextureArray(e,E){return-1===this._options.samplers.indexOf(e)&&this._options.samplers.push(e),this._checkUniform(e),this._textureArrays[e]=E,this}setExternalTexture(e,E){return-1===this._options.externalTextures.indexOf(e)&&this._options.externalTextures.push(e),this._externalTextures[e]=E,this}setFloat(e,E){return this._checkUniform(e),this._floats[e]=E,this}setInt(e,E){return this._checkUniform(e),this._ints[e]=E,this}setUInt(e,E){return this._checkUniform(e),this._uints[e]=E,this}setFloats(e,E){return this._checkUniform(e),this._floatsArrays[e]=E,this}setColor3(e,E){return this._checkUniform(e),this._colors3[e]=E,this}setColor3Array(e,E){return this._checkUniform(e),this._colors3Arrays[e]=E.reduce(((e,E)=>(e.push(E.r,E.g,E.b),e)),[]),this}setColor4(e,E){return this._checkUniform(e),this._colors4[e]=E,this}setColor4Array(e,E){return this._checkUniform(e),this._colors4Arrays[e]=E.reduce(((e,E)=>(e.push(E.r,E.g,E.b,E.a),e)),[]),this}setVector2(e,E){return this._checkUniform(e),this._vectors2[e]=E,this}setVector3(e,E){return this._checkUniform(e),this._vectors3[e]=E,this}setVector4(e,E){return this._checkUniform(e),this._vectors4[e]=E,this}setQuaternion(e,E){return this._checkUniform(e),this._quaternions[e]=E,this}setQuaternionArray(e,E){return this._checkUniform(e),this._quaternionsArrays[e]=E.reduce(((e,E)=>(E.toArray(e,e.length),e)),[]),this}setMatrix(e,E){return this._checkUniform(e),this._matrices[e]=E,this}setMatrices(e,E){this._checkUniform(e);const H=new Float32Array(16*E.length);for(let N=0;N<E.length;N++){E[N].copyToArray(H,16*N)}return this._matrixArrays[e]=H,this}setMatrix3x3(e,E){return this._checkUniform(e),this._matrices3x3[e]=E,this}setMatrix2x2(e,E){return this._checkUniform(e),this._matrices2x2[e]=E,this}setArray2(e,E){return this._checkUniform(e),this._vectors2Arrays[e]=E,this}setArray3(e,E){return this._checkUniform(e),this._vectors3Arrays[e]=E,this}setArray4(e,E){return this._checkUniform(e),this._vectors4Arrays[e]=E,this}setUniformBuffer(e,E){return-1===this._options.uniformBuffers.indexOf(e)&&this._options.uniformBuffers.push(e),this._uniformBuffers[e]=E,this}setTextureSampler(e,E){return-1===this._options.samplerObjects.indexOf(e)&&this._options.samplerObjects.push(e),this._textureSamplers[e]=E,this}setStorageBuffer(e,E){return-1===this._options.storageBuffers.indexOf(e)&&this._options.storageBuffers.push(e),this._storageBuffers[e]=E,this}setDefine(e,E){const H=e.trimEnd()+" ",N=this.options.defines.findIndex((E=>E===e||E.startsWith(H)));return N>=0&&this.options.defines.splice(N,1),("boolean"!==typeof E||E)&&this.options.defines.push(H+E),this}isReadyForSubMesh(e,E,H){return this.isReady(e,H,E)}isReady(e,E,H){var N;const z=H&&this._storeEffectOnSubMeshes;if(this.isFrozen){const e=z?H._drawWrapper:this._drawWrapper;if(e.effect&&e._wasPreviouslyReady&&e._wasPreviouslyUsingInstances===E)return!0}const M=this.fe(),D=M.getEngine(),C=[],i=[];let V=null,h=this._shaderPath,S=this._options.uniforms,X=this._options.uniformBuffers,a=this._options.samplers;D.getCaps().multiview&&M.activeCamera&&M.activeCamera.outputRenderTarget&&M.activeCamera.outputRenderTarget.getViewCount()>1&&(this._multiview=!0,C.push("#define MULTIVIEW"),-1!==S.indexOf("viewProjection")&&-1===S.indexOf("viewProjectionR")&&S.push("viewProjectionR"));for(let u=0;u<this._options.defines.length;u++){const e=0===this._options.defines[u].indexOf("#define")?this._options.defines[u]:`#define ${this._options.defines[u]}`;C.push(e)}for(let u=0;u<this._options.attributes.length;u++)i.push(this._options.attributes[u]);if(e&&e.isVerticesDataPresent(P.g.ColorKind)&&(-1===i.indexOf(P.g.ColorKind)&&i.push(P.g.ColorKind),C.push("#define VERTEXCOLOR")),E&&(C.push("#define INSTANCES"),(0,j.eb)(i,this._materialHelperNeedsPreviousMatrices),null!==e&&void 0!==e&&e.hasThinInstances&&(C.push("#define THIN_INSTANCES"),e&&e.isVerticesDataPresent(P.g.ColorInstanceKind)&&(i.push(P.g.ColorInstanceKind),C.push("#define INSTANCESCOLOR")))),e&&e.useBones&&e.computeBonesUsingShaders&&e.skeleton){i.push(P.g.MatricesIndicesKind),i.push(P.g.MatricesWeightsKind),e.numBoneInfluencers>4&&(i.push(P.g.MatricesIndicesExtraKind),i.push(P.g.MatricesWeightsExtraKind));const E=e.skeleton;C.push("#define NUM_BONE_INFLUENCERS "+e.numBoneInfluencers),V=new A.d,V.addCPUSkinningFallback(0,e),E.isUsingTextureForMatrices?(C.push("#define BONETEXTURE"),-1===S.indexOf("boneTextureWidth")&&S.push("boneTextureWidth"),-1===this._options.samplers.indexOf("boneSampler")&&this._options.samplers.push("boneSampler")):(C.push("#define BonesPerMesh "+(E.bones.length+1)),-1===S.indexOf("mBones")&&S.push("mBones"))}else C.push("#define NUM_BONE_INFLUENCERS 0");let W=0;const r=e?e.morphTargetManager:null;if(r){const E=-1!==C.indexOf("#define UV1"),H=-1!==C.indexOf("#define UV2"),N=-1!==C.indexOf("#define TANGENT"),u=-1!==C.indexOf("#define NORMAL"),z=-1!==C.indexOf("#define VERTEXCOLOR");W=(0,j.G)(r,C,i,e,!0,u,N,E,H,z),r.isUsingTextureForTargets&&(-1===S.indexOf("morphTargetTextureIndices")&&S.push("morphTargetTextureIndices"),-1===this._options.samplers.indexOf("morphTargets")&&this._options.samplers.push("morphTargets")),W>0&&(S=S.slice(),S.push("morphTargetInfluences"),S.push("morphTargetCount"),S.push("morphTargetTextureInfo"),S.push("morphTargetTextureIndices"))}else C.push("#define NUM_MORPH_INFLUENCERS 0");if(e){const E=e.bakedVertexAnimationManager;E&&E.isEnabled&&(C.push("#define BAKED_VERTEX_ANIMATION_TEXTURE"),-1===S.indexOf("bakedVertexAnimationSettings")&&S.push("bakedVertexAnimationSettings"),-1===S.indexOf("bakedVertexAnimationTextureSizeInverted")&&S.push("bakedVertexAnimationTextureSizeInverted"),-1===S.indexOf("bakedVertexAnimationTime")&&S.push("bakedVertexAnimationTime"),-1===this._options.samplers.indexOf("bakedVertexAnimationTexture")&&this._options.samplers.push("bakedVertexAnimationTexture")),(0,j.u)(i,e,C)}for(const u in this._textures)if(!this._textures[u].isReady())return!1;e&&this.needAlphaTestingForMesh(e)&&C.push("#define ALPHATEST"),!1!==this._options.useClipPlane&&((0,U.d)(S),(0,U.j)(this,M,C)),M.fogEnabled&&null!==e&&void 0!==e&&e.applyFog&&M.fogMode!==u.c.FOGMODE_NONE&&(C.push("#define FOG"),-1===S.indexOf("view")&&S.push("view"),-1===S.indexOf("vFogInfos")&&S.push("vFogInfos"),-1===S.indexOf("vFogColor")&&S.push("vFogColor")),this._useLogarithmicDepth&&(C.push("#define LOGARITHMICDEPTH"),-1===S.indexOf("logarithmicDepthConstant")&&S.push("logarithmicDepthConstant")),this.customShaderNameResolve&&(S=S.slice(),X=X.slice(),a=a.slice(),h=this.customShaderNameResolve(this.name,S,X,a,C,i));const Y=z?H._getDrawWrapper(void 0,!0):this._drawWrapper,f=(null===Y||void 0===Y?void 0:Y.effect)??null,w=(null===Y||void 0===Y?void 0:Y.defines)??null,s=C.join("\n");let p=f;return w!==s&&(p=D.createEffect(h,{attributes:i,uniformsNames:S,uniformBuffersNames:X,samplers:a,defines:s,fallbacks:V,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousMorphTargets:W},shaderLanguage:this._options.shaderLanguage,extraInitializationsAsync:this._options.extraInitializationsAsync},D),z?H.setEffect(p,s,this._materialContext):Y&&Y.setEffect(p,s),this._onEffectCreatedObservable&&(F.effect=p,F.subMesh=H??(null===e||void 0===e?void 0:e.NM[0])??null,this._onEffectCreatedObservable.notifyObservers(F))),Y._wasPreviouslyUsingInstances=!!E,!(null===(N=p)||void 0===N||!N.isReady())&&(f!==p&&M.resetCachedMaterial(),Y._wasPreviouslyReady=!0,!0)}bindOnlyWorldMatrix(e,E){const H=E??this.getEffect();if(!H)return;const N=this._options.uniforms;-1!==N.indexOf("world")&&H.setMatrix("world",e);const u=this.fe();-1!==N.indexOf("worldView")&&(e.multiplyToRef(u.getViewMatrix(),this._cachedWorldViewMatrix),H.setMatrix("worldView",this._cachedWorldViewMatrix)),-1!==N.indexOf("worldViewProjection")&&(e.multiplyToRef(u.getTransformMatrix(),this._cachedWorldViewProjectionMatrix),H.setMatrix("worldViewProjection",this._cachedWorldViewProjectionMatrix)),-1!==N.indexOf("view")&&H.setMatrix("view",u.getViewMatrix())}bindForSubMesh(e,E,H){var N;this.bind(e,E,null===(N=H._drawWrapperOverride)||void 0===N?void 0:N.effect,H)}bind(e,E,H,N){const u=N&&this._storeEffectOnSubMeshes,z=H??(u?N.effect:this.getEffect());if(!z)return;const P=this.fe();this._activeEffect=z,this.bindOnlyWorldMatrix(e,H);const M=this._options.uniformBuffers;let D=!1;if(z&&M&&M.length>0&&P.getEngine().supportsUniformBuffers)for(let i=0;i<M.length;++i){switch(M[i]){case"Mesh":E&&(E.getMeshUniformBuffer().bindToEffect(z,"Mesh"),E.transferToEffect(e));break;case"Scene":(0,j.n)(z,P.getSceneUniformBuffer()),P.finalizeSceneUbo(),D=!0}}const A=E&&u?this._mustRebind(P,z,N,E.visibility):P.getCachedMaterial()!==this;if(z&&A){let e;for(e in D||-1===this._options.uniforms.indexOf("view")||z.setMatrix("view",P.getViewMatrix()),D||-1===this._options.uniforms.indexOf("projection")||z.setMatrix("projection",P.getProjectionMatrix()),D||-1===this._options.uniforms.indexOf("viewProjection")||(z.setMatrix("viewProjection",P.getTransformMatrix()),this._multiview&&z.setMatrix("viewProjectionR",P._transformMatrixR)),P.activeCamera&&-1!==this._options.uniforms.indexOf("cameraPosition")&&z.setVector3("cameraPosition",P.activeCamera.globalPosition),(0,j.c)(E,z),(0,U.f)(z,this,P),this._useLogarithmicDepth&&(0,j.j)(u?N.materialDefines:z.defines,z,P),E&&(0,j.d)(P,E,z),this._textures)z.setTexture(e,this._textures[e]);for(e in this._textureArrays)z.setTextureArray(e,this._textureArrays[e]);for(e in this._ints)z.setInt(e,this._ints[e]);for(e in this._uints)z.setUInt(e,this._uints[e]);for(e in this._floats)z.setFloat(e,this._floats[e]);for(e in this._floatsArrays)z.setArray(e,this._floatsArrays[e]);for(e in this._colors3)z.setColor3(e,this._colors3[e]);for(e in this._colors3Arrays)z.setArray3(e,this._colors3Arrays[e]);for(e in this._colors4){const E=this._colors4[e];z.setFloat4(e,E.r,E.g,E.b,E.a)}for(e in this._colors4Arrays)z.setArray4(e,this._colors4Arrays[e]);for(e in this._vectors2)z.setVector2(e,this._vectors2[e]);for(e in this._vectors3)z.setVector3(e,this._vectors3[e]);for(e in this._vectors4)z.setVector4(e,this._vectors4[e]);for(e in this._quaternions)z.setQuaternion(e,this._quaternions[e]);for(e in this._matrices)z.setMatrix(e,this._matrices[e]);for(e in this._matrixArrays)z.setMatrices(e,this._matrixArrays[e]);for(e in this._matrices3x3)z.setMatrix3x3(e,this._matrices3x3[e]);for(e in this._matrices2x2)z.setMatrix2x2(e,this._matrices2x2[e]);for(e in this._vectors2Arrays)z.setArray2(e,this._vectors2Arrays[e]);for(e in this._vectors3Arrays)z.setArray3(e,this._vectors3Arrays[e]);for(e in this._vectors4Arrays)z.setArray4(e,this._vectors4Arrays[e]);for(e in this._quaternionsArrays)z.setArray4(e,this._quaternionsArrays[e]);for(e in this._uniformBuffers){const E=this._uniformBuffers[e].getBuffer();E&&z.bindUniformBuffer(E,e)}const H=P.getEngine(),M=H.setExternalTexture;if(M)for(e in this._externalTextures)M.call(H,e,this._externalTextures[e]);const A=H.setTextureSampler;if(A)for(e in this._textureSamplers)A.call(H,e,this._textureSamplers[e]);const C=H.setStorageBuffer;if(C)for(e in this._storageBuffers)C.call(H,e,this._storageBuffers[e])}if(z&&E&&(A||!this.isFrozen)){(0,j.m)(E,z),E.morphTargetManager&&E.morphTargetManager.isUsingTextureForTargets&&E.morphTargetManager._bind(z);const e=E.bakedVertexAnimationManager;if(e&&e.isEnabled){var C;const e=u?N._drawWrapper:this._drawWrapper;null===(C=E.bakedVertexAnimationManager)||void 0===C||C.bind(z,!!e._wasPreviouslyUsingInstances)}}this._afterBind(E,z,N)}getActiveTextures(){const e=super.getActiveTextures();for(const E in this._textures)e.push(this._textures[E]);for(const E in this._textureArrays){const H=this._textureArrays[E];for(let E=0;E<H.length;E++)e.push(H[E])}return e}hasTexture(e){if(super.hasTexture(e))return!0;for(const E in this._textures)if(this._textures[E]===e)return!0;for(const E in this._textureArrays){const H=this._textureArrays[E];for(let E=0;E<H.length;E++)if(H[E]===e)return!0}return!1}clone(e){const E=N.d.Clone((()=>new h(e,this.fe(),this._shaderPath,this._options,this._storeEffectOnSubMeshes)),this);E.name=e,E.id=e,"object"===typeof E._shaderPath&&(E._shaderPath={...E._shaderPath}),this._options={...this._options};const H=Object.keys(this._options);for(const N of H){const e=this._options[N];Array.isArray(e)&&(this._options[N]=e.slice(0))}this.nP.copyTo(E.nP);for(const N in this._textures)E.setTexture(N,this._textures[N]);for(const N in this._textureArrays)E.setTextureArray(N,this._textureArrays[N]);for(const N in this._externalTextures)E.setExternalTexture(N,this._externalTextures[N]);for(const N in this._ints)E.setInt(N,this._ints[N]);for(const N in this._uints)E.setUInt(N,this._uints[N]);for(const N in this._floats)E.setFloat(N,this._floats[N]);for(const N in this._floatsArrays)E.setFloats(N,this._floatsArrays[N]);for(const N in this._colors3)E.setColor3(N,this._colors3[N]);for(const N in this._colors3Arrays)E._colors3Arrays[N]=this._colors3Arrays[N];for(const N in this._colors4)E.setColor4(N,this._colors4[N]);for(const N in this._colors4Arrays)E._colors4Arrays[N]=this._colors4Arrays[N];for(const N in this._vectors2)E.setVector2(N,this._vectors2[N]);for(const N in this._vectors3)E.setVector3(N,this._vectors3[N]);for(const N in this._vectors4)E.setVector4(N,this._vectors4[N]);for(const N in this._quaternions)E.setQuaternion(N,this._quaternions[N]);for(const N in this._quaternionsArrays)E._quaternionsArrays[N]=this._quaternionsArrays[N];for(const N in this._matrices)E.setMatrix(N,this._matrices[N]);for(const N in this._matrixArrays)E._matrixArrays[N]=this._matrixArrays[N].slice();for(const N in this._matrices3x3)E.setMatrix3x3(N,this._matrices3x3[N]);for(const N in this._matrices2x2)E.setMatrix2x2(N,this._matrices2x2[N]);for(const N in this._vectors2Arrays)E.setArray2(N,this._vectors2Arrays[N]);for(const N in this._vectors3Arrays)E.setArray3(N,this._vectors3Arrays[N]);for(const N in this._vectors4Arrays)E.setArray4(N,this._vectors4Arrays[N]);for(const N in this._uniformBuffers)E.setUniformBuffer(N,this._uniformBuffers[N]);for(const N in this._textureSamplers)E.setTextureSampler(N,this._textureSamplers[N]);for(const N in this._storageBuffers)E.setStorageBuffer(N,this._storageBuffers[N]);return E}dispose(e,E,H){if(E){let e;for(e in this._textures)this._textures[e].dispose();for(e in this._textureArrays){const E=this._textureArrays[e];for(let e=0;e<E.length;e++)E[e].dispose()}}this._textures={},super.dispose(e,E,H)}serialize(){const e=N.d.Serialize(this);let E;for(E in e.customType="BABYLON.ShaderMaterial",e.uniqueId=this.uniqueId,e.options=this._options,e.shaderPath=this._shaderPath,e.storeEffectOnSubMeshes=this._storeEffectOnSubMeshes,e.nP=this.nP.serialize(),e.textures={},this._textures)e.textures[E]=this._textures[E].serialize();for(E in e.textureArrays={},this._textureArrays){e.textureArrays[E]=[];const H=this._textureArrays[E];for(let N=0;N<H.length;N++)e.textureArrays[E].push(H[N].serialize())}for(E in e.ints={},this._ints)e.ints[E]=this._ints[E];for(E in e.uints={},this._uints)e.uints[E]=this._uints[E];for(E in e.floats={},this._floats)e.floats[E]=this._floats[E];for(E in e.floatsArrays={},this._floatsArrays)e.floatsArrays[E]=this._floatsArrays[E];for(E in e.colors3={},this._colors3){const H=this._colors3[E];e.colors3[E]=[H.r,H.g,H.b]}for(E in e.colors3Arrays={},this._colors3Arrays)e.colors3Arrays[E]=this._colors3Arrays[E];for(E in e.colors4={},this._colors4){const H=this._colors4[E];e.colors4[E]=[H.r,H.g,H.b,H.a]}for(E in e.colors4Arrays={},this._colors4Arrays)e.colors4Arrays[E]=this._colors4Arrays[E];for(E in e.vectors2={},this._vectors2){const H=this._vectors2[E];e.vectors2[E]=[H.x,H.y]}for(E in e.vectors3={},this._vectors3){const H=this._vectors3[E];e.vectors3[E]=[H.x,H.y,H.z]}for(E in e.vectors4={},this._vectors4){const H=this._vectors4[E];e.vectors4[E]=[H.x,H.y,H.z,H.w]}for(E in e.quaternions={},this._quaternions)e.quaternions[E]=this._quaternions[E].uM();for(E in e.matrices={},this._matrices)e.matrices[E]=this._matrices[E].uM();for(E in e.matrixArray={},this._matrixArrays)e.matrixArray[E]=this._matrixArrays[E];for(E in e.matrices3x3={},this._matrices3x3)e.matrices3x3[E]=this._matrices3x3[E];for(E in e.matrices2x2={},this._matrices2x2)e.matrices2x2[E]=this._matrices2x2[E];for(E in e.vectors2Arrays={},this._vectors2Arrays)e.vectors2Arrays[E]=this._vectors2Arrays[E];for(E in e.vectors3Arrays={},this._vectors3Arrays)e.vectors3Arrays[E]=this._vectors3Arrays[E];for(E in e.vectors4Arrays={},this._vectors4Arrays)e.vectors4Arrays[E]=this._vectors4Arrays[E];for(E in e.quaternionsArrays={},this._quaternionsArrays)e.quaternionsArrays[E]=this._quaternionsArrays[E];return e}static Parse(e,E,H){const u=N.d.Parse((()=>new h(e.name,E,e.shaderPath,e.options,e.storeEffectOnSubMeshes)),e,E,H);let P;for(P in e.nP&&u.nP.parse(e.nP,E,H),e.textures)u.setTexture(P,M.b.Parse(e.textures[P],E,H));for(P in e.textureArrays){const N=e.textureArrays[P],z=[];for(let e=0;e<N.length;e++)z.push(M.b.Parse(N[e],E,H));u.setTextureArray(P,z)}for(P in e.ints)u.setInt(P,e.ints[P]);for(P in e.uints)u.setUInt(P,e.uints[P]);for(P in e.floats)u.setFloat(P,e.floats[P]);for(P in e.floatsArrays)u.setFloats(P,e.floatsArrays[P]);for(P in e.colors3){const E=e.colors3[P];u.setColor3(P,{r:E[0],g:E[1],b:E[2]})}for(P in e.colors3Arrays){const E=e.colors3Arrays[P].reduce(((e,E,H)=>(H%3===0?e.push([E]):e[e.length-1].push(E),e)),[]).map((e=>({r:e[0],g:e[1],b:e[2]})));u.setColor3Array(P,E)}for(P in e.colors4){const E=e.colors4[P];u.setColor4(P,{r:E[0],g:E[1],b:E[2],a:E[3]})}for(P in e.colors4Arrays){const E=e.colors4Arrays[P].reduce(((e,E,H)=>(H%4===0?e.push([E]):e[e.length-1].push(E),e)),[]).map((e=>({r:e[0],g:e[1],b:e[2],a:e[3]})));u.setColor4Array(P,E)}for(P in e.vectors2){const E=e.vectors2[P];u.setVector2(P,{x:E[0],y:E[1]})}for(P in e.vectors3){const E=e.vectors3[P];u.setVector3(P,{x:E[0],y:E[1],z:E[2]})}for(P in e.vectors4){const E=e.vectors4[P];u.setVector4(P,{x:E[0],y:E[1],z:E[2],w:E[3]})}for(P in e.quaternions)u.setQuaternion(P,z.Quaternion.aE(e.quaternions[P]));for(P in e.matrices)u.setMatrix(P,z.Matrix.aE(e.matrices[P]));for(P in e.matrixArray)u._matrixArrays[P]=new Float32Array(e.matrixArray[P]);for(P in e.matrices3x3)u.setMatrix3x3(P,e.matrices3x3[P]);for(P in e.matrices2x2)u.setMatrix2x2(P,e.matrices2x2[P]);for(P in e.vectors2Arrays)u.setArray2(P,e.vectors2Arrays[P]);for(P in e.vectors3Arrays)u.setArray3(P,e.vectors3Arrays[P]);for(P in e.vectors4Arrays)u.setArray4(P,e.vectors4Arrays[P]);for(P in e.quaternionsArrays)u.setArray4(P,e.quaternionsArrays[P]);return u}static async ParseFromFileAsync(e,E,H){let N=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return await new Promise(((u,z)=>{const P=new C.b;P.addEventListener("readystatechange",(()=>{if(4==P.readyState)if(200==P.status){const E=JSON.parse(P.responseText),z=this.Parse(E,H||V.d.LastCreatedScene,N);e&&(z.name=e),u(z)}else z("Unable to load the ShaderMaterial")})),P.open("GET",E),P.send()}))}static async ParseFromSnippetAsync(e,E){let H=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return await new Promise(((N,u)=>{const z=new C.b;z.addEventListener("readystatechange",(()=>{if(4==z.readyState)if(200==z.status){const u=JSON.parse(JSON.parse(z.responseText).jsonPayload),P=JSON.parse(u.shaderMaterial),M=this.Parse(P,E||V.d.LastCreatedScene,H);M.snippetId=e,N(M)}else u("Unable to load the snippet "+e)})),z.open("GET",this.SnippetUrl+"/"+e.replace(/#/g,"/")),z.send()}))}}h.SnippetUrl="https://snippet.babylonjs.com",h.CreateFromSnippetAsync=h.ParseFromSnippetAsync,(0,D.g)("BABYLON.ShaderMaterial",h)}}]);