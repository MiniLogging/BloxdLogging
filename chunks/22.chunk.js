"use strict";(self["80dd64vgxnn"]=self["80dd64vgxnn"]||[]).push([[22],{12960:(mm,o,u)=>{u.r(o),u.d(o,{ShaderMaterial:()=>M});var f=u(12766),B=u(12965),O=u(12740),r=u(12809),w=u(12727),p=u(12702),K=u(13037),z=u(12594),Y=u(13041),q=u(12596),x=u(13093),H=u(13088);const E={effect:null,subMesh:null};class M extends Y.d{constructor(mm,o,u){let f=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(mm,o,!(arguments.length>4&&void 0!==arguments[4])||arguments[4]),this._textures={},this._textureArrays={},this._externalTextures={},this._floats={},this._ints={},this._uints={},this._floatsArrays={},this._colors3={},this._colors3Arrays={},this._colors4={},this._colors4Arrays={},this._vectors2={},this._vectors3={},this._vectors4={},this._quaternions={},this._quaternionsArrays={},this._matrices={},this._matrixArrays={},this._matrices3x3={},this._matrices2x2={},this._vectors2Arrays={},this._vectors3Arrays={},this._vectors4Arrays={},this._uniformBuffers={},this._textureSamplers={},this._storageBuffers={},this._cachedWorldViewMatrix=new O.Matrix,this._cachedWorldViewProjectionMatrix=new O.Matrix,this._multiview=!1,this._materialHelperNeedsPreviousMatrices=!1,this._shaderPath=u,this._options={needAlphaBlending:!1,needAlphaTesting:!1,attributes:["position","normal","uv"],uniforms:["worldViewProjection"],uniformBuffers:[],samplers:[],externalTextures:[],samplerObjects:[],storageBuffers:[],defines:[],useClipPlane:!1,...f}}get shaderPath(){return this._shaderPath}set shaderPath(mm){this._shaderPath=mm}get options(){return this._options}get isMultiview(){return this._multiview}getClassName(){return"ShaderMaterial"}needAlphaBlending(){return this.alpha<1||this._options.needAlphaBlending}needAlphaTesting(){return this._options.needAlphaTesting}_checkUniform(mm){-1===this._options.uniforms.indexOf(mm)&&this._options.uniforms.push(mm)}setTexture(mm,o){return-1===this._options.samplers.indexOf(mm)&&this._options.samplers.push(mm),this._textures[mm]=o,this}removeTexture(mm){delete this._textures[mm]}setTextureArray(mm,o){return-1===this._options.samplers.indexOf(mm)&&this._options.samplers.push(mm),this._checkUniform(mm),this._textureArrays[mm]=o,this}setExternalTexture(mm,o){return-1===this._options.externalTextures.indexOf(mm)&&this._options.externalTextures.push(mm),this._externalTextures[mm]=o,this}setFloat(mm,o){return this._checkUniform(mm),this._floats[mm]=o,this}setInt(mm,o){return this._checkUniform(mm),this._ints[mm]=o,this}setUInt(mm,o){return this._checkUniform(mm),this._uints[mm]=o,this}setFloats(mm,o){return this._checkUniform(mm),this._floatsArrays[mm]=o,this}setColor3(mm,o){return this._checkUniform(mm),this._colors3[mm]=o,this}setColor3Array(mm,o){return this._checkUniform(mm),this._colors3Arrays[mm]=o.reduce(((mm,o)=>(mm.push(o.r,o.g,o.b),mm)),[]),this}setColor4(mm,o){return this._checkUniform(mm),this._colors4[mm]=o,this}setColor4Array(mm,o){return this._checkUniform(mm),this._colors4Arrays[mm]=o.reduce(((mm,o)=>(mm.push(o.r,o.g,o.b,o.a),mm)),[]),this}setVector2(mm,o){return this._checkUniform(mm),this._vectors2[mm]=o,this}setVector3(mm,o){return this._checkUniform(mm),this._vectors3[mm]=o,this}setVector4(mm,o){return this._checkUniform(mm),this._vectors4[mm]=o,this}setQuaternion(mm,o){return this._checkUniform(mm),this._quaternions[mm]=o,this}setQuaternionArray(mm,o){return this._checkUniform(mm),this._quaternionsArrays[mm]=o.reduce(((mm,o)=>(o.toArray(mm,mm.length),mm)),[]),this}setMatrix(mm,o){return this._checkUniform(mm),this._matrices[mm]=o,this}setMatrices(mm,o){this._checkUniform(mm);const u=new Float32Array(16*o.length);for(let f=0;f<o.length;f++){o[f].copyToArray(u,16*f)}return this._matrixArrays[mm]=u,this}setMatrix3x3(mm,o){return this._checkUniform(mm),this._matrices3x3[mm]=o,this}setMatrix2x2(mm,o){return this._checkUniform(mm),this._matrices2x2[mm]=o,this}setArray2(mm,o){return this._checkUniform(mm),this._vectors2Arrays[mm]=o,this}setArray3(mm,o){return this._checkUniform(mm),this._vectors3Arrays[mm]=o,this}setArray4(mm,o){return this._checkUniform(mm),this._vectors4Arrays[mm]=o,this}setUniformBuffer(mm,o){return-1===this._options.uniformBuffers.indexOf(mm)&&this._options.uniformBuffers.push(mm),this._uniformBuffers[mm]=o,this}setTextureSampler(mm,o){return-1===this._options.samplerObjects.indexOf(mm)&&this._options.samplerObjects.push(mm),this._textureSamplers[mm]=o,this}setStorageBuffer(mm,o){return-1===this._options.storageBuffers.indexOf(mm)&&this._options.storageBuffers.push(mm),this._storageBuffers[mm]=o,this}setDefine(mm,o){const u=mm.trimEnd()+" ",f=this.options.defines.findIndex((o=>o===mm||o.startsWith(u)));return f>=0&&this.options.defines.splice(f,1),("boolean"!==typeof o||o)&&this.options.defines.push(u+o),this}isReadyForSubMesh(mm,o,u){return this.isReady(mm,u,o)}isReady(mm,o,u){var f;const O=u&&this._storeEffectOnSubMeshes;if(this.isFrozen){const mm=O?u._drawWrapper:this._drawWrapper;if(mm.effect&&mm._wasPreviouslyReady&&mm._wasPreviouslyUsingInstances===o)return!0}const w=this.Pm(),p=w.getEngine(),z=[],Y=[];let q=null,M=this._shaderPath,l=this._options.uniforms,t=this._options.uniformBuffers,Q=this._options.samplers;p.getCaps().multiview&&w.activeCamera&&w.activeCamera.outputRenderTarget&&w.activeCamera.outputRenderTarget.getViewCount()>1&&(this._multiview=!0,z.push("#define MULTIVIEW"),-1!==l.indexOf("viewProjection")&&-1===l.indexOf("viewProjectionR")&&l.push("viewProjectionR"));for(let B=0;B<this._options.defines.length;B++){const mm=0===this._options.defines[B].indexOf("#define")?this._options.defines[B]:`#define ${this._options.defines[B]}`;z.push(mm)}for(let B=0;B<this._options.attributes.length;B++)Y.push(this._options.attributes[B]);if(mm&&mm.isVerticesDataPresent(r.f.ColorKind)&&(-1===Y.indexOf(r.f.ColorKind)&&Y.push(r.f.ColorKind),z.push("#define VERTEXCOLOR")),o&&(z.push("#define INSTANCES"),(0,H.hb)(Y,this._materialHelperNeedsPreviousMatrices),null!==mm&&void 0!==mm&&mm.hasThinInstances&&(z.push("#define THIN_INSTANCES"),mm&&mm.isVerticesDataPresent(r.f.ColorInstanceKind)&&(Y.push(r.f.ColorInstanceKind),z.push("#define INSTANCESCOLOR")))),mm&&mm.useBones&&mm.computeBonesUsingShaders&&mm.skeleton){Y.push(r.f.MatricesIndicesKind),Y.push(r.f.MatricesWeightsKind),mm.numBoneInfluencers>4&&(Y.push(r.f.MatricesIndicesExtraKind),Y.push(r.f.MatricesWeightsExtraKind));const o=mm.skeleton;z.push("#define NUM_BONE_INFLUENCERS "+mm.numBoneInfluencers),q=new K.e,q.addCPUSkinningFallback(0,mm),o.isUsingTextureForMatrices?(z.push("#define BONETEXTURE"),-1===l.indexOf("boneTextureWidth")&&l.push("boneTextureWidth"),-1===this._options.samplers.indexOf("boneSampler")&&this._options.samplers.push("boneSampler")):(z.push("#define BonesPerMesh "+(o.bones.length+1)),-1===l.indexOf("mBones")&&l.push("mBones"))}else z.push("#define NUM_BONE_INFLUENCERS 0");let b=0;const J=mm?mm.morphTargetManager:null;if(J){const o=-1!==z.indexOf("#define UV1"),u=-1!==z.indexOf("#define UV2"),f=-1!==z.indexOf("#define TANGENT"),B=-1!==z.indexOf("#define NORMAL"),O=-1!==z.indexOf("#define VERTEXCOLOR");b=(0,H.F)(J,z,Y,mm,!0,B,f,o,u,O),J.isUsingTextureForTargets&&(-1===l.indexOf("morphTargetTextureIndices")&&l.push("morphTargetTextureIndices"),-1===this._options.samplers.indexOf("morphTargets")&&this._options.samplers.push("morphTargets")),b>0&&(l=l.slice(),l.push("morphTargetInfluences"),l.push("morphTargetCount"),l.push("morphTargetTextureInfo"),l.push("morphTargetTextureIndices"))}else z.push("#define NUM_MORPH_INFLUENCERS 0");if(mm){const o=mm.bakedVertexAnimationManager;o&&o.isEnabled&&(z.push("#define BAKED_VERTEX_ANIMATION_TEXTURE"),-1===l.indexOf("bakedVertexAnimationSettings")&&l.push("bakedVertexAnimationSettings"),-1===l.indexOf("bakedVertexAnimationTextureSizeInverted")&&l.push("bakedVertexAnimationTextureSizeInverted"),-1===l.indexOf("bakedVertexAnimationTime")&&l.push("bakedVertexAnimationTime"),-1===this._options.samplers.indexOf("bakedVertexAnimationTexture")&&this._options.samplers.push("bakedVertexAnimationTexture")),(0,H.v)(Y,mm,z)}for(const B in this._textures)if(!this._textures[B].isReady())return!1;mm&&this.needAlphaTestingForMesh(mm)&&z.push("#define ALPHATEST"),!1!==this._options.useClipPlane&&((0,x.e)(l),(0,x.l)(this,w,z)),w.fogEnabled&&null!==mm&&void 0!==mm&&mm.applyFog&&w.fogMode!==B.d.FOGMODE_NONE&&(z.push("#define FOG"),-1===l.indexOf("view")&&l.push("view"),-1===l.indexOf("vFogInfos")&&l.push("vFogInfos"),-1===l.indexOf("vFogColor")&&l.push("vFogColor")),this._useLogarithmicDepth&&(z.push("#define LOGARITHMICDEPTH"),-1===l.indexOf("logarithmicDepthConstant")&&l.push("logarithmicDepthConstant")),this.customShaderNameResolve&&(l=l.slice(),t=t.slice(),Q=Q.slice(),M=this.customShaderNameResolve(this.name,l,t,Q,z,Y));const N=O?u._getDrawWrapper(void 0,!0):this._drawWrapper,S=(null===N||void 0===N?void 0:N.effect)??null,P=(null===N||void 0===N?void 0:N.defines)??null,R=z.join("\n");let g=S;return P!==R&&(g=p.createEffect(M,{attributes:Y,uniformsNames:l,uniformBuffersNames:t,samplers:Q,defines:R,fallbacks:q,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousMorphTargets:b},shaderLanguage:this._options.shaderLanguage,extraInitializationsAsync:this._options.extraInitializationsAsync},p),O?u.setEffect(g,R,this._materialContext):N&&N.setEffect(g,R),this._onEffectCreatedObservable&&(E.effect=g,E.subMesh=u??(null===mm||void 0===mm?void 0:mm.kf[0])??null,this._onEffectCreatedObservable.notifyObservers(E))),N._wasPreviouslyUsingInstances=!!o,!(null===(f=g)||void 0===f||!f.isReady())&&(S!==g&&w.resetCachedMaterial(),N._wasPreviouslyReady=!0,!0)}bindOnlyWorldMatrix(mm,o){const u=o??this.getEffect();if(!u)return;const f=this._options.uniforms;-1!==f.indexOf("world")&&u.setMatrix("world",mm);const B=this.Pm();-1!==f.indexOf("worldView")&&(mm.multiplyToRef(B.getViewMatrix(),this._cachedWorldViewMatrix),u.setMatrix("worldView",this._cachedWorldViewMatrix)),-1!==f.indexOf("worldViewProjection")&&(mm.multiplyToRef(B.getTransformMatrix(),this._cachedWorldViewProjectionMatrix),u.setMatrix("worldViewProjection",this._cachedWorldViewProjectionMatrix)),-1!==f.indexOf("view")&&u.setMatrix("view",B.getViewMatrix())}bindForSubMesh(mm,o,u){var f;this.bind(mm,o,null===(f=u._drawWrapperOverride)||void 0===f?void 0:f.effect,u)}bind(mm,o,u,f){const B=f&&this._storeEffectOnSubMeshes,O=u??(B?f.effect:this.getEffect());if(!O)return;const r=this.Pm();this._activeEffect=O,this.bindOnlyWorldMatrix(mm,u);const w=this._options.uniformBuffers;let p=!1;if(O&&w&&w.length>0&&r.getEngine().supportsUniformBuffers)for(let Y=0;Y<w.length;++Y){switch(w[Y]){case"Mesh":o&&(o.getMeshUniformBuffer().bindToEffect(O,"Mesh"),o.transferToEffect(mm));break;case"Scene":(0,H.q)(O,r.getSceneUniformBuffer()),r.finalizeSceneUbo(),p=!0}}const K=o&&B?this._mustRebind(r,O,f,o.visibility):r.getCachedMaterial()!==this;if(O&&K){let mm;for(mm in p||-1===this._options.uniforms.indexOf("view")||O.setMatrix("view",r.getViewMatrix()),p||-1===this._options.uniforms.indexOf("projection")||O.setMatrix("projection",r.getProjectionMatrix()),p||-1===this._options.uniforms.indexOf("viewProjection")||(O.setMatrix("viewProjection",r.getTransformMatrix()),this._multiview&&O.setMatrix("viewProjectionR",r._transformMatrixR)),r.activeCamera&&-1!==this._options.uniforms.indexOf("cameraPosition")&&O.setVector3("cameraPosition",r.activeCamera.globalPosition),(0,H.e)(o,O),(0,x.h)(O,this,r),this._useLogarithmicDepth&&(0,H.k)(B?f.materialDefines:O.defines,O,r),o&&(0,H.f)(r,o,O),this._textures)O.setTexture(mm,this._textures[mm]);for(mm in this._textureArrays)O.setTextureArray(mm,this._textureArrays[mm]);for(mm in this._ints)O.setInt(mm,this._ints[mm]);for(mm in this._uints)O.setUInt(mm,this._uints[mm]);for(mm in this._floats)O.setFloat(mm,this._floats[mm]);for(mm in this._floatsArrays)O.setArray(mm,this._floatsArrays[mm]);for(mm in this._colors3)O.setColor3(mm,this._colors3[mm]);for(mm in this._colors3Arrays)O.setArray3(mm,this._colors3Arrays[mm]);for(mm in this._colors4){const o=this._colors4[mm];O.setFloat4(mm,o.r,o.g,o.b,o.a)}for(mm in this._colors4Arrays)O.setArray4(mm,this._colors4Arrays[mm]);for(mm in this._vectors2)O.setVector2(mm,this._vectors2[mm]);for(mm in this._vectors3)O.setVector3(mm,this._vectors3[mm]);for(mm in this._vectors4)O.setVector4(mm,this._vectors4[mm]);for(mm in this._quaternions)O.setQuaternion(mm,this._quaternions[mm]);for(mm in this._matrices)O.setMatrix(mm,this._matrices[mm]);for(mm in this._matrixArrays)O.setMatrices(mm,this._matrixArrays[mm]);for(mm in this._matrices3x3)O.setMatrix3x3(mm,this._matrices3x3[mm]);for(mm in this._matrices2x2)O.setMatrix2x2(mm,this._matrices2x2[mm]);for(mm in this._vectors2Arrays)O.setArray2(mm,this._vectors2Arrays[mm]);for(mm in this._vectors3Arrays)O.setArray3(mm,this._vectors3Arrays[mm]);for(mm in this._vectors4Arrays)O.setArray4(mm,this._vectors4Arrays[mm]);for(mm in this._quaternionsArrays)O.setArray4(mm,this._quaternionsArrays[mm]);for(mm in this._uniformBuffers){const o=this._uniformBuffers[mm].getBuffer();o&&O.bindUniformBuffer(o,mm)}const u=r.getEngine(),w=u.setExternalTexture;if(w)for(mm in this._externalTextures)w.call(u,mm,this._externalTextures[mm]);const K=u.setTextureSampler;if(K)for(mm in this._textureSamplers)K.call(u,mm,this._textureSamplers[mm]);const z=u.setStorageBuffer;if(z)for(mm in this._storageBuffers)z.call(u,mm,this._storageBuffers[mm])}if(O&&o&&(K||!this.isFrozen)){(0,H.o)(o,O),o.morphTargetManager&&o.morphTargetManager.isUsingTextureForTargets&&o.morphTargetManager._bind(O);const mm=o.bakedVertexAnimationManager;if(mm&&mm.isEnabled){var z;const mm=B?f._drawWrapper:this._drawWrapper;null===(z=o.bakedVertexAnimationManager)||void 0===z||z.bind(O,!!mm._wasPreviouslyUsingInstances)}}this._afterBind(o,O,f)}getActiveTextures(){const mm=super.getActiveTextures();for(const o in this._textures)mm.push(this._textures[o]);for(const o in this._textureArrays){const u=this._textureArrays[o];for(let o=0;o<u.length;o++)mm.push(u[o])}return mm}hasTexture(mm){if(super.hasTexture(mm))return!0;for(const o in this._textures)if(this._textures[o]===mm)return!0;for(const o in this._textureArrays){const u=this._textureArrays[o];for(let o=0;o<u.length;o++)if(u[o]===mm)return!0}return!1}clone(mm){const o=f.c.Clone((()=>new M(mm,this.Pm(),this._shaderPath,this._options,this._storeEffectOnSubMeshes)),this);o.name=mm,o.id=mm,"object"===typeof o._shaderPath&&(o._shaderPath={...o._shaderPath}),this._options={...this._options};const u=Object.keys(this._options);for(const f of u){const mm=this._options[f];Array.isArray(mm)&&(this._options[f]=mm.slice(0))}this.Nf.copyTo(o.Nf);for(const f in this._textures)o.setTexture(f,this._textures[f]);for(const f in this._textureArrays)o.setTextureArray(f,this._textureArrays[f]);for(const f in this._externalTextures)o.setExternalTexture(f,this._externalTextures[f]);for(const f in this._ints)o.setInt(f,this._ints[f]);for(const f in this._uints)o.setUInt(f,this._uints[f]);for(const f in this._floats)o.setFloat(f,this._floats[f]);for(const f in this._floatsArrays)o.setFloats(f,this._floatsArrays[f]);for(const f in this._colors3)o.setColor3(f,this._colors3[f]);for(const f in this._colors3Arrays)o._colors3Arrays[f]=this._colors3Arrays[f];for(const f in this._colors4)o.setColor4(f,this._colors4[f]);for(const f in this._colors4Arrays)o._colors4Arrays[f]=this._colors4Arrays[f];for(const f in this._vectors2)o.setVector2(f,this._vectors2[f]);for(const f in this._vectors3)o.setVector3(f,this._vectors3[f]);for(const f in this._vectors4)o.setVector4(f,this._vectors4[f]);for(const f in this._quaternions)o.setQuaternion(f,this._quaternions[f]);for(const f in this._quaternionsArrays)o._quaternionsArrays[f]=this._quaternionsArrays[f];for(const f in this._matrices)o.setMatrix(f,this._matrices[f]);for(const f in this._matrixArrays)o._matrixArrays[f]=this._matrixArrays[f].slice();for(const f in this._matrices3x3)o.setMatrix3x3(f,this._matrices3x3[f]);for(const f in this._matrices2x2)o.setMatrix2x2(f,this._matrices2x2[f]);for(const f in this._vectors2Arrays)o.setArray2(f,this._vectors2Arrays[f]);for(const f in this._vectors3Arrays)o.setArray3(f,this._vectors3Arrays[f]);for(const f in this._vectors4Arrays)o.setArray4(f,this._vectors4Arrays[f]);for(const f in this._uniformBuffers)o.setUniformBuffer(f,this._uniformBuffers[f]);for(const f in this._textureSamplers)o.setTextureSampler(f,this._textureSamplers[f]);for(const f in this._storageBuffers)o.setStorageBuffer(f,this._storageBuffers[f]);return o}dispose(mm,o,u){if(o){let mm;for(mm in this._textures)this._textures[mm].dispose();for(mm in this._textureArrays){const o=this._textureArrays[mm];for(let mm=0;mm<o.length;mm++)o[mm].dispose()}}this._textures={},super.dispose(mm,o,u)}serialize(){const mm=f.c.Serialize(this);let o;for(o in mm.customType="BABYLON.ShaderMaterial",mm.uniqueId=this.uniqueId,mm.options=this._options,mm.shaderPath=this._shaderPath,mm.storeEffectOnSubMeshes=this._storeEffectOnSubMeshes,mm.Nf=this.Nf.serialize(),mm.textures={},this._textures)mm.textures[o]=this._textures[o].serialize();for(o in mm.textureArrays={},this._textureArrays){mm.textureArrays[o]=[];const u=this._textureArrays[o];for(let f=0;f<u.length;f++)mm.textureArrays[o].push(u[f].serialize())}for(o in mm.ints={},this._ints)mm.ints[o]=this._ints[o];for(o in mm.uints={},this._uints)mm.uints[o]=this._uints[o];for(o in mm.floats={},this._floats)mm.floats[o]=this._floats[o];for(o in mm.floatsArrays={},this._floatsArrays)mm.floatsArrays[o]=this._floatsArrays[o];for(o in mm.colors3={},this._colors3){const u=this._colors3[o];mm.colors3[o]=[u.r,u.g,u.b]}for(o in mm.colors3Arrays={},this._colors3Arrays)mm.colors3Arrays[o]=this._colors3Arrays[o];for(o in mm.colors4={},this._colors4){const u=this._colors4[o];mm.colors4[o]=[u.r,u.g,u.b,u.a]}for(o in mm.colors4Arrays={},this._colors4Arrays)mm.colors4Arrays[o]=this._colors4Arrays[o];for(o in mm.vectors2={},this._vectors2){const u=this._vectors2[o];mm.vectors2[o]=[u.x,u.y]}for(o in mm.vectors3={},this._vectors3){const u=this._vectors3[o];mm.vectors3[o]=[u.x,u.y,u.z]}for(o in mm.vectors4={},this._vectors4){const u=this._vectors4[o];mm.vectors4[o]=[u.x,u.y,u.z,u.w]}for(o in mm.quaternions={},this._quaternions)mm.quaternions[o]=this._quaternions[o].df();for(o in mm.matrices={},this._matrices)mm.matrices[o]=this._matrices[o].df();for(o in mm.matrixArray={},this._matrixArrays)mm.matrixArray[o]=this._matrixArrays[o];for(o in mm.matrices3x3={},this._matrices3x3)mm.matrices3x3[o]=this._matrices3x3[o];for(o in mm.matrices2x2={},this._matrices2x2)mm.matrices2x2[o]=this._matrices2x2[o];for(o in mm.vectors2Arrays={},this._vectors2Arrays)mm.vectors2Arrays[o]=this._vectors2Arrays[o];for(o in mm.vectors3Arrays={},this._vectors3Arrays)mm.vectors3Arrays[o]=this._vectors3Arrays[o];for(o in mm.vectors4Arrays={},this._vectors4Arrays)mm.vectors4Arrays[o]=this._vectors4Arrays[o];for(o in mm.quaternionsArrays={},this._quaternionsArrays)mm.quaternionsArrays[o]=this._quaternionsArrays[o];return mm}static Parse(mm,o,u){const B=f.c.Parse((()=>new M(mm.name,o,mm.shaderPath,mm.options,mm.storeEffectOnSubMeshes)),mm,o,u);let r;for(r in mm.Nf&&B.Nf.parse(mm.Nf,o,u),mm.textures)B.setTexture(r,w.b.Parse(mm.textures[r],o,u));for(r in mm.textureArrays){const f=mm.textureArrays[r],O=[];for(let mm=0;mm<f.length;mm++)O.push(w.b.Parse(f[mm],o,u));B.setTextureArray(r,O)}for(r in mm.ints)B.setInt(r,mm.ints[r]);for(r in mm.uints)B.setUInt(r,mm.uints[r]);for(r in mm.floats)B.setFloat(r,mm.floats[r]);for(r in mm.floatsArrays)B.setFloats(r,mm.floatsArrays[r]);for(r in mm.colors3){const o=mm.colors3[r];B.setColor3(r,{r:o[0],g:o[1],b:o[2]})}for(r in mm.colors3Arrays){const o=mm.colors3Arrays[r].reduce(((mm,o,u)=>(u%3===0?mm.push([o]):mm[mm.length-1].push(o),mm)),[]).map((mm=>({r:mm[0],g:mm[1],b:mm[2]})));B.setColor3Array(r,o)}for(r in mm.colors4){const o=mm.colors4[r];B.setColor4(r,{r:o[0],g:o[1],b:o[2],a:o[3]})}for(r in mm.colors4Arrays){const o=mm.colors4Arrays[r].reduce(((mm,o,u)=>(u%4===0?mm.push([o]):mm[mm.length-1].push(o),mm)),[]).map((mm=>({r:mm[0],g:mm[1],b:mm[2],a:mm[3]})));B.setColor4Array(r,o)}for(r in mm.vectors2){const o=mm.vectors2[r];B.setVector2(r,{x:o[0],y:o[1]})}for(r in mm.vectors3){const o=mm.vectors3[r];B.setVector3(r,{x:o[0],y:o[1],z:o[2]})}for(r in mm.vectors4){const o=mm.vectors4[r];B.setVector4(r,{x:o[0],y:o[1],z:o[2],w:o[3]})}for(r in mm.quaternions)B.setQuaternion(r,O.Quaternion.So(mm.quaternions[r]));for(r in mm.matrices)B.setMatrix(r,O.Matrix.So(mm.matrices[r]));for(r in mm.matrixArray)B._matrixArrays[r]=new Float32Array(mm.matrixArray[r]);for(r in mm.matrices3x3)B.setMatrix3x3(r,mm.matrices3x3[r]);for(r in mm.matrices2x2)B.setMatrix2x2(r,mm.matrices2x2[r]);for(r in mm.vectors2Arrays)B.setArray2(r,mm.vectors2Arrays[r]);for(r in mm.vectors3Arrays)B.setArray3(r,mm.vectors3Arrays[r]);for(r in mm.vectors4Arrays)B.setArray4(r,mm.vectors4Arrays[r]);for(r in mm.quaternionsArrays)B.setArray4(r,mm.quaternionsArrays[r]);return B}static async ParseFromFileAsync(mm,o,u){let f=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return await new Promise(((B,O)=>{const r=new z.e;r.addEventListener("readystatechange",(()=>{if(4==r.readyState)if(200==r.status){const o=JSON.parse(r.responseText),O=this.Parse(o,u||q.d.LastCreatedScene,f);mm&&(O.name=mm),B(O)}else O("Unable to load the ShaderMaterial")})),r.open("GET",o),r.send()}))}static async ParseFromSnippetAsync(mm,o){let u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return await new Promise(((f,B)=>{const O=new z.e;O.addEventListener("readystatechange",(()=>{if(4==O.readyState)if(200==O.status){const B=JSON.parse(JSON.parse(O.responseText).jsonPayload),r=JSON.parse(B.shaderMaterial),w=this.Parse(r,o||q.d.LastCreatedScene,u);w.snippetId=mm,f(w)}else B("Unable to load the snippet "+mm)})),O.open("GET",this.SnippetUrl+"/"+mm.replace(/#/g,"/")),O.send()}))}}M.SnippetUrl="https://snippet.babylonjs.com",M.CreateFromSnippetAsync=M.ParseFromSnippetAsync,(0,p.c)("BABYLON.ShaderMaterial",M)}}]);