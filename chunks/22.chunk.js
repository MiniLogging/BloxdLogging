"use strict";(self["3nlrbof8msu"]=self["3nlrbof8msu"]||[]).push([[22],{12973:(t,b,Z)=>{Z.r(b),Z.d(b,{ShaderMaterial:()=>k});var J=Z(12760),S=Z(12975),P=Z(12735),v=Z(12800),h=Z(12716),C=Z(12688),Y=Z(13040),g=Z(12577),I=Z(13046),r=Z(12585),M=Z(13107),T=Z(13098);const a={effect:null,subMesh:null};class k extends I.b{constructor(t,b,Z){let J=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(t,b,!(arguments.length>4&&void 0!==arguments[4])||arguments[4]),this._textures={},this._textureArrays={},this._externalTextures={},this._floats={},this._ints={},this._uints={},this._floatsArrays={},this._colors3={},this._colors3Arrays={},this._colors4={},this._colors4Arrays={},this._vectors2={},this._vectors3={},this._vectors4={},this._quaternions={},this._quaternionsArrays={},this._matrices={},this._matrixArrays={},this._matrices3x3={},this._matrices2x2={},this._vectors2Arrays={},this._vectors3Arrays={},this._vectors4Arrays={},this._uniformBuffers={},this._textureSamplers={},this._storageBuffers={},this._cachedWorldViewMatrix=new P.Matrix,this._cachedWorldViewProjectionMatrix=new P.Matrix,this._multiview=!1,this._materialHelperNeedsPreviousMatrices=!1,this._shaderPath=Z,this._options={needAlphaBlending:!1,needAlphaTesting:!1,attributes:["position","normal","uv"],uniforms:["worldViewProjection"],uniformBuffers:[],samplers:[],externalTextures:[],samplerObjects:[],storageBuffers:[],defines:[],useClipPlane:!1,...J}}get shaderPath(){return this._shaderPath}set shaderPath(t){this._shaderPath=t}get options(){return this._options}get isMultiview(){return this._multiview}getClassName(){return"ShaderMaterial"}needAlphaBlending(){return this.alpha<1||this._options.needAlphaBlending}needAlphaTesting(){return this._options.needAlphaTesting}_checkUniform(t){-1===this._options.uniforms.indexOf(t)&&this._options.uniforms.push(t)}setTexture(t,b){return-1===this._options.samplers.indexOf(t)&&this._options.samplers.push(t),this._textures[t]=b,this}removeTexture(t){delete this._textures[t]}setTextureArray(t,b){return-1===this._options.samplers.indexOf(t)&&this._options.samplers.push(t),this._checkUniform(t),this._textureArrays[t]=b,this}setExternalTexture(t,b){return-1===this._options.externalTextures.indexOf(t)&&this._options.externalTextures.push(t),this._externalTextures[t]=b,this}setFloat(t,b){return this._checkUniform(t),this._floats[t]=b,this}setInt(t,b){return this._checkUniform(t),this._ints[t]=b,this}setUInt(t,b){return this._checkUniform(t),this._uints[t]=b,this}setFloats(t,b){return this._checkUniform(t),this._floatsArrays[t]=b,this}setColor3(t,b){return this._checkUniform(t),this._colors3[t]=b,this}setColor3Array(t,b){return this._checkUniform(t),this._colors3Arrays[t]=b.reduce(((t,b)=>(t.push(b.r,b.g,b.b),t)),[]),this}setColor4(t,b){return this._checkUniform(t),this._colors4[t]=b,this}setColor4Array(t,b){return this._checkUniform(t),this._colors4Arrays[t]=b.reduce(((t,b)=>(t.push(b.r,b.g,b.b,b.a),t)),[]),this}setVector2(t,b){return this._checkUniform(t),this._vectors2[t]=b,this}setVector3(t,b){return this._checkUniform(t),this._vectors3[t]=b,this}setVector4(t,b){return this._checkUniform(t),this._vectors4[t]=b,this}setQuaternion(t,b){return this._checkUniform(t),this._quaternions[t]=b,this}setQuaternionArray(t,b){return this._checkUniform(t),this._quaternionsArrays[t]=b.reduce(((t,b)=>(b.toArray(t,t.length),t)),[]),this}setMatrix(t,b){return this._checkUniform(t),this._matrices[t]=b,this}setMatrices(t,b){this._checkUniform(t);const Z=new Float32Array(16*b.length);for(let J=0;J<b.length;J++){b[J].copyToArray(Z,16*J)}return this._matrixArrays[t]=Z,this}setMatrix3x3(t,b){return this._checkUniform(t),this._matrices3x3[t]=b,this}setMatrix2x2(t,b){return this._checkUniform(t),this._matrices2x2[t]=b,this}setArray2(t,b){return this._checkUniform(t),this._vectors2Arrays[t]=b,this}setArray3(t,b){return this._checkUniform(t),this._vectors3Arrays[t]=b,this}setArray4(t,b){return this._checkUniform(t),this._vectors4Arrays[t]=b,this}setUniformBuffer(t,b){return-1===this._options.uniformBuffers.indexOf(t)&&this._options.uniformBuffers.push(t),this._uniformBuffers[t]=b,this}setTextureSampler(t,b){return-1===this._options.samplerObjects.indexOf(t)&&this._options.samplerObjects.push(t),this._textureSamplers[t]=b,this}setStorageBuffer(t,b){return-1===this._options.storageBuffers.indexOf(t)&&this._options.storageBuffers.push(t),this._storageBuffers[t]=b,this}setDefine(t,b){const Z=t.trimEnd()+" ",J=this.options.defines.findIndex((b=>b===t||b.startsWith(Z)));return J>=0&&this.options.defines.splice(J,1),("boolean"!==typeof b||b)&&this.options.defines.push(Z+b),this}isReadyForSubMesh(t,b,Z){return this.isReady(t,Z,b)}isReady(t,b,Z){var J;const P=Z&&this._storeEffectOnSubMeshes;if(this.isFrozen){const t=P?Z._drawWrapper:this._drawWrapper;if(t.effect&&t._wasPreviouslyReady&&t._wasPreviouslyUsingInstances===b)return!0}const h=this.et(),C=h.getEngine(),g=[],I=[];let r=null,k=this._shaderPath,u=this._options.uniforms,l=this._options.uniformBuffers,U=this._options.samplers;C.getCaps().multiview&&h.activeCamera&&h.activeCamera.outputRenderTarget&&h.activeCamera.outputRenderTarget.getViewCount()>1&&(this._multiview=!0,g.push("#define MULTIVIEW"),-1!==u.indexOf("viewProjection")&&-1===u.indexOf("viewProjectionR")&&u.push("viewProjectionR"));for(let S=0;S<this._options.defines.length;S++){const t=0===this._options.defines[S].indexOf("#define")?this._options.defines[S]:`#define ${this._options.defines[S]}`;g.push(t)}for(let S=0;S<this._options.attributes.length;S++)I.push(this._options.attributes[S]);if(t&&t.isVerticesDataPresent(v.g.ColorKind)&&(-1===I.indexOf(v.g.ColorKind)&&I.push(v.g.ColorKind),g.push("#define VERTEXCOLOR")),b&&(g.push("#define INSTANCES"),(0,T.gb)(I,this._materialHelperNeedsPreviousMatrices),null!==t&&void 0!==t&&t.hasThinInstances&&(g.push("#define THIN_INSTANCES"),t&&t.isVerticesDataPresent(v.g.ColorInstanceKind)&&(I.push(v.g.ColorInstanceKind),g.push("#define INSTANCESCOLOR")))),t&&t.useBones&&t.computeBonesUsingShaders&&t.skeleton){I.push(v.g.MatricesIndicesKind),I.push(v.g.MatricesWeightsKind),t.numBoneInfluencers>4&&(I.push(v.g.MatricesIndicesExtraKind),I.push(v.g.MatricesWeightsExtraKind));const b=t.skeleton;g.push("#define NUM_BONE_INFLUENCERS "+t.numBoneInfluencers),r=new Y.b,r.addCPUSkinningFallback(0,t),b.isUsingTextureForMatrices?(g.push("#define BONETEXTURE"),-1===u.indexOf("boneTextureWidth")&&u.push("boneTextureWidth"),-1===this._options.samplers.indexOf("boneSampler")&&this._options.samplers.push("boneSampler")):(g.push("#define BonesPerMesh "+(b.bones.length+1)),-1===u.indexOf("mBones")&&u.push("mBones"))}else g.push("#define NUM_BONE_INFLUENCERS 0");let E=0;const c=t?t.morphTargetManager:null;if(c){const b=-1!==g.indexOf("#define UV1"),Z=-1!==g.indexOf("#define UV2"),J=-1!==g.indexOf("#define TANGENT"),S=-1!==g.indexOf("#define NORMAL"),P=-1!==g.indexOf("#define VERTEXCOLOR");E=(0,T.I)(c,g,I,t,!0,S,J,b,Z,P),c.isUsingTextureForTargets&&(-1===u.indexOf("morphTargetTextureIndices")&&u.push("morphTargetTextureIndices"),-1===this._options.samplers.indexOf("morphTargets")&&this._options.samplers.push("morphTargets")),E>0&&(u=u.slice(),u.push("morphTargetInfluences"),u.push("morphTargetCount"),u.push("morphTargetTextureInfo"),u.push("morphTargetTextureIndices"))}else g.push("#define NUM_MORPH_INFLUENCERS 0");if(t){const b=t.bakedVertexAnimationManager;b&&b.isEnabled&&(g.push("#define BAKED_VERTEX_ANIMATION_TEXTURE"),-1===u.indexOf("bakedVertexAnimationSettings")&&u.push("bakedVertexAnimationSettings"),-1===u.indexOf("bakedVertexAnimationTextureSizeInverted")&&u.push("bakedVertexAnimationTextureSizeInverted"),-1===u.indexOf("bakedVertexAnimationTime")&&u.push("bakedVertexAnimationTime"),-1===this._options.samplers.indexOf("bakedVertexAnimationTexture")&&this._options.samplers.push("bakedVertexAnimationTexture")),(0,T.z)(I,t,g)}for(const S in this._textures)if(!this._textures[S].isReady())return!1;t&&this.needAlphaTestingForMesh(t)&&g.push("#define ALPHATEST"),!1!==this._options.useClipPlane&&((0,M.c)(u),(0,M.k)(this,h,g)),h.fogEnabled&&null!==t&&void 0!==t&&t.applyFog&&h.fogMode!==S.d.FOGMODE_NONE&&(g.push("#define FOG"),-1===u.indexOf("view")&&u.push("view"),-1===u.indexOf("vFogInfos")&&u.push("vFogInfos"),-1===u.indexOf("vFogColor")&&u.push("vFogColor")),this._useLogarithmicDepth&&(g.push("#define LOGARITHMICDEPTH"),-1===u.indexOf("logarithmicDepthConstant")&&u.push("logarithmicDepthConstant")),this.customShaderNameResolve&&(u=u.slice(),l=l.slice(),U=U.slice(),k=this.customShaderNameResolve(this.name,u,l,U,g,I));const H=P?Z._getDrawWrapper(void 0,!0):this._drawWrapper,o=(null===H||void 0===H?void 0:H.effect)??null,O=(null===H||void 0===H?void 0:H.defines)??null,p=g.join("\n");let e=o;return O!==p&&(e=C.createEffect(k,{attributes:I,uniformsNames:u,uniformBuffersNames:l,samplers:U,defines:p,fallbacks:r,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousMorphTargets:E},shaderLanguage:this._options.shaderLanguage,extraInitializationsAsync:this._options.extraInitializationsAsync},C),P?Z.setEffect(e,p,this._materialContext):H&&H.setEffect(e,p),this._onEffectCreatedObservable&&(a.effect=e,a.subMesh=Z??(null===t||void 0===t?void 0:t.Wb[0])??null,this._onEffectCreatedObservable.notifyObservers(a))),H._wasPreviouslyUsingInstances=!!b,!(null===(J=e)||void 0===J||!J.isReady())&&(o!==e&&h.resetCachedMaterial(),H._wasPreviouslyReady=!0,!0)}bindOnlyWorldMatrix(t,b){const Z=b??this.getEffect();if(!Z)return;const J=this._options.uniforms;-1!==J.indexOf("world")&&Z.setMatrix("world",t);const S=this.et();-1!==J.indexOf("worldView")&&(t.multiplyToRef(S.getViewMatrix(),this._cachedWorldViewMatrix),Z.setMatrix("worldView",this._cachedWorldViewMatrix)),-1!==J.indexOf("worldViewProjection")&&(t.multiplyToRef(S.getTransformMatrix(),this._cachedWorldViewProjectionMatrix),Z.setMatrix("worldViewProjection",this._cachedWorldViewProjectionMatrix)),-1!==J.indexOf("view")&&Z.setMatrix("view",S.getViewMatrix())}bindForSubMesh(t,b,Z){var J;this.bind(t,b,null===(J=Z._drawWrapperOverride)||void 0===J?void 0:J.effect,Z)}bind(t,b,Z,J){const S=J&&this._storeEffectOnSubMeshes,P=Z??(S?J.effect:this.getEffect());if(!P)return;const v=this.et();this._activeEffect=P,this.bindOnlyWorldMatrix(t,Z);const h=this._options.uniformBuffers;let C=!1;if(P&&h&&h.length>0&&v.getEngine().supportsUniformBuffers)for(let I=0;I<h.length;++I){switch(h[I]){case"Mesh":b&&(b.getMeshUniformBuffer().bindToEffect(P,"Mesh"),b.transferToEffect(t));break;case"Scene":(0,T.q)(P,v.getSceneUniformBuffer()),v.finalizeSceneUbo(),C=!0}}const Y=b&&S?this._mustRebind(v,P,J,b.visibility):v.getCachedMaterial()!==this;if(P&&Y){let t;for(t in C||-1===this._options.uniforms.indexOf("view")||P.setMatrix("view",v.getViewMatrix()),C||-1===this._options.uniforms.indexOf("projection")||P.setMatrix("projection",v.getProjectionMatrix()),C||-1===this._options.uniforms.indexOf("viewProjection")||(P.setMatrix("viewProjection",v.getTransformMatrix()),this._multiview&&P.setMatrix("viewProjectionR",v._transformMatrixR)),v.activeCamera&&-1!==this._options.uniforms.indexOf("cameraPosition")&&P.setVector3("cameraPosition",v.activeCamera.globalPosition),(0,T.d)(b,P),(0,M.f)(P,this,v),this._useLogarithmicDepth&&(0,T.m)(S?J.materialDefines:P.defines,P,v),b&&(0,T.g)(v,b,P),this._textures)P.setTexture(t,this._textures[t]);for(t in this._textureArrays)P.setTextureArray(t,this._textureArrays[t]);for(t in this._ints)P.setInt(t,this._ints[t]);for(t in this._uints)P.setUInt(t,this._uints[t]);for(t in this._floats)P.setFloat(t,this._floats[t]);for(t in this._floatsArrays)P.setArray(t,this._floatsArrays[t]);for(t in this._colors3)P.setColor3(t,this._colors3[t]);for(t in this._colors3Arrays)P.setArray3(t,this._colors3Arrays[t]);for(t in this._colors4){const b=this._colors4[t];P.setFloat4(t,b.r,b.g,b.b,b.a)}for(t in this._colors4Arrays)P.setArray4(t,this._colors4Arrays[t]);for(t in this._vectors2)P.setVector2(t,this._vectors2[t]);for(t in this._vectors3)P.setVector3(t,this._vectors3[t]);for(t in this._vectors4)P.setVector4(t,this._vectors4[t]);for(t in this._quaternions)P.setQuaternion(t,this._quaternions[t]);for(t in this._matrices)P.setMatrix(t,this._matrices[t]);for(t in this._matrixArrays)P.setMatrices(t,this._matrixArrays[t]);for(t in this._matrices3x3)P.setMatrix3x3(t,this._matrices3x3[t]);for(t in this._matrices2x2)P.setMatrix2x2(t,this._matrices2x2[t]);for(t in this._vectors2Arrays)P.setArray2(t,this._vectors2Arrays[t]);for(t in this._vectors3Arrays)P.setArray3(t,this._vectors3Arrays[t]);for(t in this._vectors4Arrays)P.setArray4(t,this._vectors4Arrays[t]);for(t in this._quaternionsArrays)P.setArray4(t,this._quaternionsArrays[t]);for(t in this._uniformBuffers){const b=this._uniformBuffers[t].getBuffer();b&&P.bindUniformBuffer(b,t)}const Z=v.getEngine(),h=Z.setExternalTexture;if(h)for(t in this._externalTextures)h.call(Z,t,this._externalTextures[t]);const Y=Z.setTextureSampler;if(Y)for(t in this._textureSamplers)Y.call(Z,t,this._textureSamplers[t]);const g=Z.setStorageBuffer;if(g)for(t in this._storageBuffers)g.call(Z,t,this._storageBuffers[t])}if(P&&b&&(Y||!this.isFrozen)){(0,T.n)(b,P),b.morphTargetManager&&b.morphTargetManager.isUsingTextureForTargets&&b.morphTargetManager._bind(P);const t=b.bakedVertexAnimationManager;if(t&&t.isEnabled){var g;const t=S?J._drawWrapper:this._drawWrapper;null===(g=b.bakedVertexAnimationManager)||void 0===g||g.bind(P,!!t._wasPreviouslyUsingInstances)}}this._afterBind(b,P,J)}getActiveTextures(){const t=super.getActiveTextures();for(const b in this._textures)t.push(this._textures[b]);for(const b in this._textureArrays){const Z=this._textureArrays[b];for(let b=0;b<Z.length;b++)t.push(Z[b])}return t}hasTexture(t){if(super.hasTexture(t))return!0;for(const b in this._textures)if(this._textures[b]===t)return!0;for(const b in this._textureArrays){const Z=this._textureArrays[b];for(let b=0;b<Z.length;b++)if(Z[b]===t)return!0}return!1}clone(t){const b=J.d.Clone((()=>new k(t,this.et(),this._shaderPath,this._options,this._storeEffectOnSubMeshes)),this);b.name=t,b.id=t,"object"===typeof b._shaderPath&&(b._shaderPath={...b._shaderPath}),this._options={...this._options};const Z=Object.keys(this._options);for(const J of Z){const t=this._options[J];Array.isArray(t)&&(this._options[J]=t.slice(0))}this.Ub.copyTo(b.Ub);for(const J in this._textures)b.setTexture(J,this._textures[J]);for(const J in this._textureArrays)b.setTextureArray(J,this._textureArrays[J]);for(const J in this._externalTextures)b.setExternalTexture(J,this._externalTextures[J]);for(const J in this._ints)b.setInt(J,this._ints[J]);for(const J in this._uints)b.setUInt(J,this._uints[J]);for(const J in this._floats)b.setFloat(J,this._floats[J]);for(const J in this._floatsArrays)b.setFloats(J,this._floatsArrays[J]);for(const J in this._colors3)b.setColor3(J,this._colors3[J]);for(const J in this._colors3Arrays)b._colors3Arrays[J]=this._colors3Arrays[J];for(const J in this._colors4)b.setColor4(J,this._colors4[J]);for(const J in this._colors4Arrays)b._colors4Arrays[J]=this._colors4Arrays[J];for(const J in this._vectors2)b.setVector2(J,this._vectors2[J]);for(const J in this._vectors3)b.setVector3(J,this._vectors3[J]);for(const J in this._vectors4)b.setVector4(J,this._vectors4[J]);for(const J in this._quaternions)b.setQuaternion(J,this._quaternions[J]);for(const J in this._quaternionsArrays)b._quaternionsArrays[J]=this._quaternionsArrays[J];for(const J in this._matrices)b.setMatrix(J,this._matrices[J]);for(const J in this._matrixArrays)b._matrixArrays[J]=this._matrixArrays[J].slice();for(const J in this._matrices3x3)b.setMatrix3x3(J,this._matrices3x3[J]);for(const J in this._matrices2x2)b.setMatrix2x2(J,this._matrices2x2[J]);for(const J in this._vectors2Arrays)b.setArray2(J,this._vectors2Arrays[J]);for(const J in this._vectors3Arrays)b.setArray3(J,this._vectors3Arrays[J]);for(const J in this._vectors4Arrays)b.setArray4(J,this._vectors4Arrays[J]);for(const J in this._uniformBuffers)b.setUniformBuffer(J,this._uniformBuffers[J]);for(const J in this._textureSamplers)b.setTextureSampler(J,this._textureSamplers[J]);for(const J in this._storageBuffers)b.setStorageBuffer(J,this._storageBuffers[J]);return b}dispose(t,b,Z){if(b){let t;for(t in this._textures)this._textures[t].dispose();for(t in this._textureArrays){const b=this._textureArrays[t];for(let t=0;t<b.length;t++)b[t].dispose()}}this._textures={},super.dispose(t,b,Z)}serialize(){const t=J.d.Serialize(this);let b;for(b in t.customType="BABYLON.ShaderMaterial",t.uniqueId=this.uniqueId,t.options=this._options,t.shaderPath=this._shaderPath,t.storeEffectOnSubMeshes=this._storeEffectOnSubMeshes,t.Ub=this.Ub.serialize(),t.textures={},this._textures)t.textures[b]=this._textures[b].serialize();for(b in t.textureArrays={},this._textureArrays){t.textureArrays[b]=[];const Z=this._textureArrays[b];for(let J=0;J<Z.length;J++)t.textureArrays[b].push(Z[J].serialize())}for(b in t.ints={},this._ints)t.ints[b]=this._ints[b];for(b in t.uints={},this._uints)t.uints[b]=this._uints[b];for(b in t.floats={},this._floats)t.floats[b]=this._floats[b];for(b in t.floatsArrays={},this._floatsArrays)t.floatsArrays[b]=this._floatsArrays[b];for(b in t.colors3={},this._colors3){const Z=this._colors3[b];t.colors3[b]=[Z.r,Z.g,Z.b]}for(b in t.colors3Arrays={},this._colors3Arrays)t.colors3Arrays[b]=this._colors3Arrays[b];for(b in t.colors4={},this._colors4){const Z=this._colors4[b];t.colors4[b]=[Z.r,Z.g,Z.b,Z.a]}for(b in t.colors4Arrays={},this._colors4Arrays)t.colors4Arrays[b]=this._colors4Arrays[b];for(b in t.vectors2={},this._vectors2){const Z=this._vectors2[b];t.vectors2[b]=[Z.x,Z.y]}for(b in t.vectors3={},this._vectors3){const Z=this._vectors3[b];t.vectors3[b]=[Z.x,Z.y,Z.z]}for(b in t.vectors4={},this._vectors4){const Z=this._vectors4[b];t.vectors4[b]=[Z.x,Z.y,Z.z,Z.w]}for(b in t.quaternions={},this._quaternions)t.quaternions[b]=this._quaternions[b].jb();for(b in t.matrices={},this._matrices)t.matrices[b]=this._matrices[b].jb();for(b in t.matrixArray={},this._matrixArrays)t.matrixArray[b]=this._matrixArrays[b];for(b in t.matrices3x3={},this._matrices3x3)t.matrices3x3[b]=this._matrices3x3[b];for(b in t.matrices2x2={},this._matrices2x2)t.matrices2x2[b]=this._matrices2x2[b];for(b in t.vectors2Arrays={},this._vectors2Arrays)t.vectors2Arrays[b]=this._vectors2Arrays[b];for(b in t.vectors3Arrays={},this._vectors3Arrays)t.vectors3Arrays[b]=this._vectors3Arrays[b];for(b in t.vectors4Arrays={},this._vectors4Arrays)t.vectors4Arrays[b]=this._vectors4Arrays[b];for(b in t.quaternionsArrays={},this._quaternionsArrays)t.quaternionsArrays[b]=this._quaternionsArrays[b];return t}static Parse(t,b,Z){const S=J.d.Parse((()=>new k(t.name,b,t.shaderPath,t.options,t.storeEffectOnSubMeshes)),t,b,Z);let v;for(v in t.Ub&&S.Ub.parse(t.Ub,b,Z),t.textures)S.setTexture(v,h.c.Parse(t.textures[v],b,Z));for(v in t.textureArrays){const J=t.textureArrays[v],P=[];for(let t=0;t<J.length;t++)P.push(h.c.Parse(J[t],b,Z));S.setTextureArray(v,P)}for(v in t.ints)S.setInt(v,t.ints[v]);for(v in t.uints)S.setUInt(v,t.uints[v]);for(v in t.floats)S.setFloat(v,t.floats[v]);for(v in t.floatsArrays)S.setFloats(v,t.floatsArrays[v]);for(v in t.colors3){const b=t.colors3[v];S.setColor3(v,{r:b[0],g:b[1],b:b[2]})}for(v in t.colors3Arrays){const b=t.colors3Arrays[v].reduce(((t,b,Z)=>(Z%3===0?t.push([b]):t[t.length-1].push(b),t)),[]).map((t=>({r:t[0],g:t[1],b:t[2]})));S.setColor3Array(v,b)}for(v in t.colors4){const b=t.colors4[v];S.setColor4(v,{r:b[0],g:b[1],b:b[2],a:b[3]})}for(v in t.colors4Arrays){const b=t.colors4Arrays[v].reduce(((t,b,Z)=>(Z%4===0?t.push([b]):t[t.length-1].push(b),t)),[]).map((t=>({r:t[0],g:t[1],b:t[2],a:t[3]})));S.setColor4Array(v,b)}for(v in t.vectors2){const b=t.vectors2[v];S.setVector2(v,{x:b[0],y:b[1]})}for(v in t.vectors3){const b=t.vectors3[v];S.setVector3(v,{x:b[0],y:b[1],z:b[2]})}for(v in t.vectors4){const b=t.vectors4[v];S.setVector4(v,{x:b[0],y:b[1],z:b[2],w:b[3]})}for(v in t.quaternions)S.setQuaternion(v,P.Quaternion.CZ(t.quaternions[v]));for(v in t.matrices)S.setMatrix(v,P.Matrix.CZ(t.matrices[v]));for(v in t.matrixArray)S._matrixArrays[v]=new Float32Array(t.matrixArray[v]);for(v in t.matrices3x3)S.setMatrix3x3(v,t.matrices3x3[v]);for(v in t.matrices2x2)S.setMatrix2x2(v,t.matrices2x2[v]);for(v in t.vectors2Arrays)S.setArray2(v,t.vectors2Arrays[v]);for(v in t.vectors3Arrays)S.setArray3(v,t.vectors3Arrays[v]);for(v in t.vectors4Arrays)S.setArray4(v,t.vectors4Arrays[v]);for(v in t.quaternionsArrays)S.setArray4(v,t.quaternionsArrays[v]);return S}static async ParseFromFileAsync(t,b,Z){let J=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return await new Promise(((S,P)=>{const v=new g.b;v.addEventListener("readystatechange",(()=>{if(4==v.readyState)if(200==v.status){const b=JSON.parse(v.responseText),P=this.Parse(b,Z||r.e.LastCreatedScene,J);t&&(P.name=t),S(P)}else P("Unable to load the ShaderMaterial")})),v.open("GET",b),v.send()}))}static async ParseFromSnippetAsync(t,b){let Z=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return await new Promise(((J,S)=>{const P=new g.b;P.addEventListener("readystatechange",(()=>{if(4==P.readyState)if(200==P.status){const S=JSON.parse(JSON.parse(P.responseText).jsonPayload),v=JSON.parse(S.shaderMaterial),h=this.Parse(v,b||r.e.LastCreatedScene,Z);h.snippetId=t,J(h)}else S("Unable to load the snippet "+t)})),P.open("GET",this.SnippetUrl+"/"+t.replace(/#/g,"/")),P.send()}))}}k.SnippetUrl="https://snippet.babylonjs.com",k.CreateFromSnippetAsync=k.ParseFromSnippetAsync,(0,C.f)("BABYLON.ShaderMaterial",k)}}]);