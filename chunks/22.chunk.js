"use strict";(self.kdlk57exiqh=self.kdlk57exiqh||[]).push([[22],{12444:(i,x,e)=>{e.r(x),e.d(x,{ShaderMaterial:()=>z});var j=e(12278),E=e(12452),a=e(12250),Y=e(12314),J=e(12227),u=e(12204),b=e(12530),g=e(12101),A=e(12537),K=e(12108),L=e(12580),o=e(12571);const M={effect:null,subMesh:null};class z extends A.d{constructor(i,x,e){let j=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(i,x,!(arguments.length>4&&void 0!==arguments[4])||arguments[4]),this._textures={},this._textureArrays={},this._externalTextures={},this._floats={},this._ints={},this._uints={},this._floatsArrays={},this._colors3={},this._colors3Arrays={},this._colors4={},this._colors4Arrays={},this._vectors2={},this._vectors3={},this._vectors4={},this._quaternions={},this._quaternionsArrays={},this._matrices={},this._matrixArrays={},this._matrices3x3={},this._matrices2x2={},this._vectors2Arrays={},this._vectors3Arrays={},this._vectors4Arrays={},this._uniformBuffers={},this._textureSamplers={},this._storageBuffers={},this._cachedWorldViewMatrix=new a.Matrix,this._cachedWorldViewProjectionMatrix=new a.Matrix,this._multiview=!1,this._materialHelperNeedsPreviousMatrices=!1,this._shaderPath=e,this._options={needAlphaBlending:!1,needAlphaTesting:!1,attributes:["position","normal","uv"],uniforms:["worldViewProjection"],uniformBuffers:[],samplers:[],externalTextures:[],samplerObjects:[],storageBuffers:[],defines:[],useClipPlane:!1,...j}}get shaderPath(){return this._shaderPath}set shaderPath(i){this._shaderPath=i}get options(){return this._options}get isMultiview(){return this._multiview}getClassName(){return"ShaderMaterial"}needAlphaBlending(){return this.alpha<1||this._options.needAlphaBlending}needAlphaTesting(){return this._options.needAlphaTesting}_checkUniform(i){-1===this._options.uniforms.indexOf(i)&&this._options.uniforms.push(i)}setTexture(i,x){return-1===this._options.samplers.indexOf(i)&&this._options.samplers.push(i),this._textures[i]=x,this}removeTexture(i){delete this._textures[i]}setTextureArray(i,x){return-1===this._options.samplers.indexOf(i)&&this._options.samplers.push(i),this._checkUniform(i),this._textureArrays[i]=x,this}setExternalTexture(i,x){return-1===this._options.externalTextures.indexOf(i)&&this._options.externalTextures.push(i),this._externalTextures[i]=x,this}setFloat(i,x){return this._checkUniform(i),this._floats[i]=x,this}setInt(i,x){return this._checkUniform(i),this._ints[i]=x,this}setUInt(i,x){return this._checkUniform(i),this._uints[i]=x,this}setFloats(i,x){return this._checkUniform(i),this._floatsArrays[i]=x,this}setColor3(i,x){return this._checkUniform(i),this._colors3[i]=x,this}setColor3Array(i,x){return this._checkUniform(i),this._colors3Arrays[i]=x.reduce(((i,x)=>(i.push(x.r,x.g,x.b),i)),[]),this}setColor4(i,x){return this._checkUniform(i),this._colors4[i]=x,this}setColor4Array(i,x){return this._checkUniform(i),this._colors4Arrays[i]=x.reduce(((i,x)=>(i.push(x.r,x.g,x.b,x.a),i)),[]),this}setVector2(i,x){return this._checkUniform(i),this._vectors2[i]=x,this}setVector3(i,x){return this._checkUniform(i),this._vectors3[i]=x,this}setVector4(i,x){return this._checkUniform(i),this._vectors4[i]=x,this}setQuaternion(i,x){return this._checkUniform(i),this._quaternions[i]=x,this}setQuaternionArray(i,x){return this._checkUniform(i),this._quaternionsArrays[i]=x.reduce(((i,x)=>(x.toArray(i,i.length),i)),[]),this}setMatrix(i,x){return this._checkUniform(i),this._matrices[i]=x,this}setMatrices(i,x){this._checkUniform(i);const e=new Float32Array(16*x.length);for(let j=0;j<x.length;j++){x[j].copyToArray(e,16*j)}return this._matrixArrays[i]=e,this}setMatrix3x3(i,x){return this._checkUniform(i),this._matrices3x3[i]=x,this}setMatrix2x2(i,x){return this._checkUniform(i),this._matrices2x2[i]=x,this}setArray2(i,x){return this._checkUniform(i),this._vectors2Arrays[i]=x,this}setArray3(i,x){return this._checkUniform(i),this._vectors3Arrays[i]=x,this}setArray4(i,x){return this._checkUniform(i),this._vectors4Arrays[i]=x,this}setUniformBuffer(i,x){return-1===this._options.uniformBuffers.indexOf(i)&&this._options.uniformBuffers.push(i),this._uniformBuffers[i]=x,this}setTextureSampler(i,x){return-1===this._options.samplerObjects.indexOf(i)&&this._options.samplerObjects.push(i),this._textureSamplers[i]=x,this}setStorageBuffer(i,x){return-1===this._options.storageBuffers.indexOf(i)&&this._options.storageBuffers.push(i),this._storageBuffers[i]=x,this}setDefine(i,x){const e=i.trimEnd()+" ",j=this.options.defines.findIndex((x=>x===i||x.startsWith(e)));return j>=0&&this.options.defines.splice(j,1),("boolean"!==typeof x||x)&&this.options.defines.push(e+x),this}isReadyForSubMesh(i,x,e){return this.isReady(i,e,x)}isReady(i,x,e){var j;const a=e&&this._storeEffectOnSubMeshes;if(this.isFrozen){const i=a?e._drawWrapper:this._drawWrapper;if(i.effect&&i._wasPreviouslyReady&&i._wasPreviouslyUsingInstances===x)return!0}const J=this.wi(),u=J.getEngine(),g=[],A=[];let K=null,z=this._shaderPath,T=this._options.uniforms,Q=this._options.uniformBuffers,t=this._options.samplers;u.getCaps().multiview&&J.activeCamera&&J.activeCamera.outputRenderTarget&&J.activeCamera.outputRenderTarget.getViewCount()>1&&(this._multiview=!0,g.push("#define MULTIVIEW"),-1!==T.indexOf("viewProjection")&&-1===T.indexOf("viewProjectionR")&&T.push("viewProjectionR"));for(let E=0;E<this._options.defines.length;E++){const i=0===this._options.defines[E].indexOf("#define")?this._options.defines[E]:`#define ${this._options.defines[E]}`;g.push(i)}for(let E=0;E<this._options.attributes.length;E++)A.push(this._options.attributes[E]);if(i&&i.isVerticesDataPresent(Y.f.ColorKind)&&(-1===A.indexOf(Y.f.ColorKind)&&A.push(Y.f.ColorKind),g.push("#define VERTEXCOLOR")),x&&(g.push("#define INSTANCES"),(0,o.$)(A,this._materialHelperNeedsPreviousMatrices),null!==i&&void 0!==i&&i.hasThinInstances&&(g.push("#define THIN_INSTANCES"),i&&i.isVerticesDataPresent(Y.f.ColorInstanceKind)&&(A.push(Y.f.ColorInstanceKind),g.push("#define INSTANCESCOLOR")))),i&&i.useBones&&i.computeBonesUsingShaders&&i.skeleton){A.push(Y.f.MatricesIndicesKind),A.push(Y.f.MatricesWeightsKind),i.numBoneInfluencers>4&&(A.push(Y.f.MatricesIndicesExtraKind),A.push(Y.f.MatricesWeightsExtraKind));const x=i.skeleton;g.push("#define NUM_BONE_INFLUENCERS "+i.numBoneInfluencers),K=new b.b,K.addCPUSkinningFallback(0,i),x.isUsingTextureForMatrices?(g.push("#define BONETEXTURE"),-1===T.indexOf("boneTextureWidth")&&T.push("boneTextureWidth"),-1===this._options.samplers.indexOf("boneSampler")&&this._options.samplers.push("boneSampler")):(g.push("#define BonesPerMesh "+(x.bones.length+1)),-1===T.indexOf("mBones")&&T.push("mBones"))}else g.push("#define NUM_BONE_INFLUENCERS 0");let V=0;const S=i?i.morphTargetManager:null;if(S){const x=-1!==g.indexOf("#define UV1"),e=-1!==g.indexOf("#define UV2"),j=-1!==g.indexOf("#define TANGENT"),E=-1!==g.indexOf("#define NORMAL"),a=-1!==g.indexOf("#define VERTEXCOLOR");V=(0,o.C)(S,g,A,i,!0,E,j,x,e,a),S.isUsingTextureForTargets&&(-1===T.indexOf("morphTargetTextureIndices")&&T.push("morphTargetTextureIndices"),-1===this._options.samplers.indexOf("morphTargets")&&this._options.samplers.push("morphTargets")),V>0&&(T=T.slice(),T.push("morphTargetInfluences"),T.push("morphTargetCount"),T.push("morphTargetTextureInfo"),T.push("morphTargetTextureIndices"))}else g.push("#define NUM_MORPH_INFLUENCERS 0");if(i){const x=i.bakedVertexAnimationManager;x&&x.isEnabled&&(g.push("#define BAKED_VERTEX_ANIMATION_TEXTURE"),-1===T.indexOf("bakedVertexAnimationSettings")&&T.push("bakedVertexAnimationSettings"),-1===T.indexOf("bakedVertexAnimationTextureSizeInverted")&&T.push("bakedVertexAnimationTextureSizeInverted"),-1===T.indexOf("bakedVertexAnimationTime")&&T.push("bakedVertexAnimationTime"),-1===this._options.samplers.indexOf("bakedVertexAnimationTexture")&&this._options.samplers.push("bakedVertexAnimationTexture")),(0,o.s)(A,i,g)}for(const E in this._textures)if(!this._textures[E].isReady())return!1;i&&this.needAlphaTestingForMesh(i)&&g.push("#define ALPHATEST"),!1!==this._options.useClipPlane&&((0,L.b)(T),(0,L.i)(this,J,g)),J.fogEnabled&&null!==i&&void 0!==i&&i.applyFog&&J.fogMode!==E.d.FOGMODE_NONE&&(g.push("#define FOG"),-1===T.indexOf("view")&&T.push("view"),-1===T.indexOf("vFogInfos")&&T.push("vFogInfos"),-1===T.indexOf("vFogColor")&&T.push("vFogColor")),this._useLogarithmicDepth&&(g.push("#define LOGARITHMICDEPTH"),-1===T.indexOf("logarithmicDepthConstant")&&T.push("logarithmicDepthConstant")),this.customShaderNameResolve&&(T=T.slice(),Q=Q.slice(),t=t.slice(),z=this.customShaderNameResolve(this.name,T,Q,t,g,A));const f=a?e._getDrawWrapper(void 0,!0):this._drawWrapper,w=(null===f||void 0===f?void 0:f.effect)??null,O=(null===f||void 0===f?void 0:f.defines)??null,l=g.join("\n");let Z=w;return O!==l&&(Z=u.createEffect(z,{attributes:A,uniformsNames:T,uniformBuffersNames:Q,samplers:t,defines:l,fallbacks:K,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousMorphTargets:V},shaderLanguage:this._options.shaderLanguage,extraInitializationsAsync:this._options.extraInitializationsAsync},u),a?e.setEffect(Z,l,this._materialContext):f&&f.setEffect(Z,l),this._onEffectCreatedObservable&&(M.effect=Z,M.subMesh=e??(null===i||void 0===i?void 0:i.ne[0])??null,this._onEffectCreatedObservable.notifyObservers(M))),f._wasPreviouslyUsingInstances=!!x,!(null===(j=Z)||void 0===j||!j.isReady())&&(w!==Z&&J.resetCachedMaterial(),f._wasPreviouslyReady=!0,!0)}bindOnlyWorldMatrix(i,x){const e=x??this.getEffect();if(!e)return;const j=this._options.uniforms;-1!==j.indexOf("world")&&e.setMatrix("world",i);const E=this.wi();-1!==j.indexOf("worldView")&&(i.multiplyToRef(E.getViewMatrix(),this._cachedWorldViewMatrix),e.setMatrix("worldView",this._cachedWorldViewMatrix)),-1!==j.indexOf("worldViewProjection")&&(i.multiplyToRef(E.getTransformMatrix(),this._cachedWorldViewProjectionMatrix),e.setMatrix("worldViewProjection",this._cachedWorldViewProjectionMatrix)),-1!==j.indexOf("view")&&e.setMatrix("view",E.getViewMatrix())}bindForSubMesh(i,x,e){var j;this.bind(i,x,null===(j=e._drawWrapperOverride)||void 0===j?void 0:j.effect,e)}bind(i,x,e,j){const E=j&&this._storeEffectOnSubMeshes,a=e??(E?j.effect:this.getEffect());if(!a)return;const Y=this.wi();this._activeEffect=a,this.bindOnlyWorldMatrix(i,e);const J=this._options.uniformBuffers;let u=!1;if(a&&J&&J.length>0&&Y.getEngine().supportsUniformBuffers)for(let A=0;A<J.length;++A){switch(J[A]){case"Mesh":x&&(x.getMeshUniformBuffer().bindToEffect(a,"Mesh"),x.transferToEffect(i));break;case"Scene":(0,o.p)(a,Y.getSceneUniformBuffer()),Y.finalizeSceneUbo(),u=!0}}const b=x&&E?this._mustRebind(Y,a,j,x.visibility):Y.getCachedMaterial()!==this;if(a&&b){let i;for(i in u||-1===this._options.uniforms.indexOf("view")||a.setMatrix("view",Y.getViewMatrix()),u||-1===this._options.uniforms.indexOf("projection")||a.setMatrix("projection",Y.getProjectionMatrix()),u||-1===this._options.uniforms.indexOf("viewProjection")||(a.setMatrix("viewProjection",Y.getTransformMatrix()),this._multiview&&a.setMatrix("viewProjectionR",Y._transformMatrixR)),Y.activeCamera&&-1!==this._options.uniforms.indexOf("cameraPosition")&&a.setVector3("cameraPosition",Y.activeCamera.globalPosition),(0,o.b)(x,a),(0,L.d)(a,this,Y),this._useLogarithmicDepth&&(0,o.j)(E?j.materialDefines:a.defines,a,Y),x&&(0,o.d)(Y,x,a),this._textures)a.setTexture(i,this._textures[i]);for(i in this._textureArrays)a.setTextureArray(i,this._textureArrays[i]);for(i in this._ints)a.setInt(i,this._ints[i]);for(i in this._uints)a.setUInt(i,this._uints[i]);for(i in this._floats)a.setFloat(i,this._floats[i]);for(i in this._floatsArrays)a.setArray(i,this._floatsArrays[i]);for(i in this._colors3)a.setColor3(i,this._colors3[i]);for(i in this._colors3Arrays)a.setArray3(i,this._colors3Arrays[i]);for(i in this._colors4){const x=this._colors4[i];a.setFloat4(i,x.r,x.g,x.b,x.a)}for(i in this._colors4Arrays)a.setArray4(i,this._colors4Arrays[i]);for(i in this._vectors2)a.setVector2(i,this._vectors2[i]);for(i in this._vectors3)a.setVector3(i,this._vectors3[i]);for(i in this._vectors4)a.setVector4(i,this._vectors4[i]);for(i in this._quaternions)a.setQuaternion(i,this._quaternions[i]);for(i in this._matrices)a.setMatrix(i,this._matrices[i]);for(i in this._matrixArrays)a.setMatrices(i,this._matrixArrays[i]);for(i in this._matrices3x3)a.setMatrix3x3(i,this._matrices3x3[i]);for(i in this._matrices2x2)a.setMatrix2x2(i,this._matrices2x2[i]);for(i in this._vectors2Arrays)a.setArray2(i,this._vectors2Arrays[i]);for(i in this._vectors3Arrays)a.setArray3(i,this._vectors3Arrays[i]);for(i in this._vectors4Arrays)a.setArray4(i,this._vectors4Arrays[i]);for(i in this._quaternionsArrays)a.setArray4(i,this._quaternionsArrays[i]);for(i in this._uniformBuffers){const x=this._uniformBuffers[i].getBuffer();x&&a.bindUniformBuffer(x,i)}const e=Y.getEngine(),J=e.setExternalTexture;if(J)for(i in this._externalTextures)J.call(e,i,this._externalTextures[i]);const b=e.setTextureSampler;if(b)for(i in this._textureSamplers)b.call(e,i,this._textureSamplers[i]);const g=e.setStorageBuffer;if(g)for(i in this._storageBuffers)g.call(e,i,this._storageBuffers[i])}if(a&&x&&(b||!this.isFrozen)){(0,o.m)(x,a),x.morphTargetManager&&x.morphTargetManager.isUsingTextureForTargets&&x.morphTargetManager._bind(a);const i=x.bakedVertexAnimationManager;if(i&&i.isEnabled){var g;const i=E?j._drawWrapper:this._drawWrapper;null===(g=x.bakedVertexAnimationManager)||void 0===g||g.bind(a,!!i._wasPreviouslyUsingInstances)}}this._afterBind(x,a,j)}getActiveTextures(){const i=super.getActiveTextures();for(const x in this._textures)i.push(this._textures[x]);for(const x in this._textureArrays){const e=this._textureArrays[x];for(let x=0;x<e.length;x++)i.push(e[x])}return i}hasTexture(i){if(super.hasTexture(i))return!0;for(const x in this._textures)if(this._textures[x]===i)return!0;for(const x in this._textureArrays){const e=this._textureArrays[x];for(let x=0;x<e.length;x++)if(e[x]===i)return!0}return!1}clone(i){const x=j.b.Clone((()=>new z(i,this.wi(),this._shaderPath,this._options,this._storeEffectOnSubMeshes)),this);x.name=i,x.id=i,"object"===typeof x._shaderPath&&(x._shaderPath={...x._shaderPath}),this._options={...this._options};const e=Object.keys(this._options);for(const j of e){const i=this._options[j];Array.isArray(i)&&(this._options[j]=i.slice(0))}this.Ve.copyTo(x.Ve);for(const j in this._textures)x.setTexture(j,this._textures[j]);for(const j in this._textureArrays)x.setTextureArray(j,this._textureArrays[j]);for(const j in this._externalTextures)x.setExternalTexture(j,this._externalTextures[j]);for(const j in this._ints)x.setInt(j,this._ints[j]);for(const j in this._uints)x.setUInt(j,this._uints[j]);for(const j in this._floats)x.setFloat(j,this._floats[j]);for(const j in this._floatsArrays)x.setFloats(j,this._floatsArrays[j]);for(const j in this._colors3)x.setColor3(j,this._colors3[j]);for(const j in this._colors3Arrays)x._colors3Arrays[j]=this._colors3Arrays[j];for(const j in this._colors4)x.setColor4(j,this._colors4[j]);for(const j in this._colors4Arrays)x._colors4Arrays[j]=this._colors4Arrays[j];for(const j in this._vectors2)x.setVector2(j,this._vectors2[j]);for(const j in this._vectors3)x.setVector3(j,this._vectors3[j]);for(const j in this._vectors4)x.setVector4(j,this._vectors4[j]);for(const j in this._quaternions)x.setQuaternion(j,this._quaternions[j]);for(const j in this._quaternionsArrays)x._quaternionsArrays[j]=this._quaternionsArrays[j];for(const j in this._matrices)x.setMatrix(j,this._matrices[j]);for(const j in this._matrixArrays)x._matrixArrays[j]=this._matrixArrays[j].slice();for(const j in this._matrices3x3)x.setMatrix3x3(j,this._matrices3x3[j]);for(const j in this._matrices2x2)x.setMatrix2x2(j,this._matrices2x2[j]);for(const j in this._vectors2Arrays)x.setArray2(j,this._vectors2Arrays[j]);for(const j in this._vectors3Arrays)x.setArray3(j,this._vectors3Arrays[j]);for(const j in this._vectors4Arrays)x.setArray4(j,this._vectors4Arrays[j]);for(const j in this._uniformBuffers)x.setUniformBuffer(j,this._uniformBuffers[j]);for(const j in this._textureSamplers)x.setTextureSampler(j,this._textureSamplers[j]);for(const j in this._storageBuffers)x.setStorageBuffer(j,this._storageBuffers[j]);return x}dispose(i,x,e){if(x){let i;for(i in this._textures)this._textures[i].dispose();for(i in this._textureArrays){const x=this._textureArrays[i];for(let i=0;i<x.length;i++)x[i].dispose()}}this._textures={},super.dispose(i,x,e)}serialize(){const i=j.b.Serialize(this);let x;for(x in i.customType="BABYLON.ShaderMaterial",i.uniqueId=this.uniqueId,i.options=this._options,i.shaderPath=this._shaderPath,i.storeEffectOnSubMeshes=this._storeEffectOnSubMeshes,i.Ve=this.Ve.serialize(),i.textures={},this._textures)i.textures[x]=this._textures[x].serialize();for(x in i.textureArrays={},this._textureArrays){i.textureArrays[x]=[];const e=this._textureArrays[x];for(let j=0;j<e.length;j++)i.textureArrays[x].push(e[j].serialize())}for(x in i.ints={},this._ints)i.ints[x]=this._ints[x];for(x in i.uints={},this._uints)i.uints[x]=this._uints[x];for(x in i.floats={},this._floats)i.floats[x]=this._floats[x];for(x in i.floatsArrays={},this._floatsArrays)i.floatsArrays[x]=this._floatsArrays[x];for(x in i.colors3={},this._colors3){const e=this._colors3[x];i.colors3[x]=[e.r,e.g,e.b]}for(x in i.colors3Arrays={},this._colors3Arrays)i.colors3Arrays[x]=this._colors3Arrays[x];for(x in i.colors4={},this._colors4){const e=this._colors4[x];i.colors4[x]=[e.r,e.g,e.b,e.a]}for(x in i.colors4Arrays={},this._colors4Arrays)i.colors4Arrays[x]=this._colors4Arrays[x];for(x in i.vectors2={},this._vectors2){const e=this._vectors2[x];i.vectors2[x]=[e.x,e.y]}for(x in i.vectors3={},this._vectors3){const e=this._vectors3[x];i.vectors3[x]=[e.x,e.y,e.z]}for(x in i.vectors4={},this._vectors4){const e=this._vectors4[x];i.vectors4[x]=[e.x,e.y,e.z,e.w]}for(x in i.quaternions={},this._quaternions)i.quaternions[x]=this._quaternions[x].de();for(x in i.matrices={},this._matrices)i.matrices[x]=this._matrices[x].de();for(x in i.matrixArray={},this._matrixArrays)i.matrixArray[x]=this._matrixArrays[x];for(x in i.matrices3x3={},this._matrices3x3)i.matrices3x3[x]=this._matrices3x3[x];for(x in i.matrices2x2={},this._matrices2x2)i.matrices2x2[x]=this._matrices2x2[x];for(x in i.vectors2Arrays={},this._vectors2Arrays)i.vectors2Arrays[x]=this._vectors2Arrays[x];for(x in i.vectors3Arrays={},this._vectors3Arrays)i.vectors3Arrays[x]=this._vectors3Arrays[x];for(x in i.vectors4Arrays={},this._vectors4Arrays)i.vectors4Arrays[x]=this._vectors4Arrays[x];for(x in i.quaternionsArrays={},this._quaternionsArrays)i.quaternionsArrays[x]=this._quaternionsArrays[x];return i}static Parse(i,x,e){const E=j.b.Parse((()=>new z(i.name,x,i.shaderPath,i.options,i.storeEffectOnSubMeshes)),i,x,e);let Y;for(Y in i.Ve&&E.Ve.parse(i.Ve,x,e),i.textures)E.setTexture(Y,J.d.Parse(i.textures[Y],x,e));for(Y in i.textureArrays){const j=i.textureArrays[Y],a=[];for(let i=0;i<j.length;i++)a.push(J.d.Parse(j[i],x,e));E.setTextureArray(Y,a)}for(Y in i.ints)E.setInt(Y,i.ints[Y]);for(Y in i.uints)E.setUInt(Y,i.uints[Y]);for(Y in i.floats)E.setFloat(Y,i.floats[Y]);for(Y in i.floatsArrays)E.setFloats(Y,i.floatsArrays[Y]);for(Y in i.colors3){const x=i.colors3[Y];E.setColor3(Y,{r:x[0],g:x[1],b:x[2]})}for(Y in i.colors3Arrays){const x=i.colors3Arrays[Y].reduce(((i,x,e)=>(e%3===0?i.push([x]):i[i.length-1].push(x),i)),[]).map((i=>({r:i[0],g:i[1],b:i[2]})));E.setColor3Array(Y,x)}for(Y in i.colors4){const x=i.colors4[Y];E.setColor4(Y,{r:x[0],g:x[1],b:x[2],a:x[3]})}for(Y in i.colors4Arrays){const x=i.colors4Arrays[Y].reduce(((i,x,e)=>(e%4===0?i.push([x]):i[i.length-1].push(x),i)),[]).map((i=>({r:i[0],g:i[1],b:i[2],a:i[3]})));E.setColor4Array(Y,x)}for(Y in i.vectors2){const x=i.vectors2[Y];E.setVector2(Y,{x:x[0],y:x[1]})}for(Y in i.vectors3){const x=i.vectors3[Y];E.setVector3(Y,{x:x[0],y:x[1],z:x[2]})}for(Y in i.vectors4){const x=i.vectors4[Y];E.setVector4(Y,{x:x[0],y:x[1],z:x[2],w:x[3]})}for(Y in i.quaternions)E.setQuaternion(Y,a.Quaternion.zJ(i.quaternions[Y]));for(Y in i.matrices)E.setMatrix(Y,a.Matrix.zJ(i.matrices[Y]));for(Y in i.matrixArray)E._matrixArrays[Y]=new Float32Array(i.matrixArray[Y]);for(Y in i.matrices3x3)E.setMatrix3x3(Y,i.matrices3x3[Y]);for(Y in i.matrices2x2)E.setMatrix2x2(Y,i.matrices2x2[Y]);for(Y in i.vectors2Arrays)E.setArray2(Y,i.vectors2Arrays[Y]);for(Y in i.vectors3Arrays)E.setArray3(Y,i.vectors3Arrays[Y]);for(Y in i.vectors4Arrays)E.setArray4(Y,i.vectors4Arrays[Y]);for(Y in i.quaternionsArrays)E.setArray4(Y,i.quaternionsArrays[Y]);return E}static async ParseFromFileAsync(i,x,e){let j=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return await new Promise(((E,a)=>{const Y=new g.e;Y.addEventListener("readystatechange",(()=>{if(4==Y.readyState)if(200==Y.status){const x=JSON.parse(Y.responseText),a=this.Parse(x,e||K.e.LastCreatedScene,j);i&&(a.name=i),E(a)}else a("Unable to load the ShaderMaterial")})),Y.open("GET",x),Y.send()}))}static async ParseFromSnippetAsync(i,x){let e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return await new Promise(((j,E)=>{const a=new g.e;a.addEventListener("readystatechange",(()=>{if(4==a.readyState)if(200==a.status){const E=JSON.parse(JSON.parse(a.responseText).jsonPayload),Y=JSON.parse(E.shaderMaterial),J=this.Parse(Y,x||K.e.LastCreatedScene,e);J.snippetId=i,j(J)}else E("Unable to load the snippet "+i)})),a.open("GET",this.SnippetUrl+"/"+i.replace(/#/g,"/")),a.send()}))}}z.SnippetUrl="https://snippet.babylonjs.com",z.CreateFromSnippetAsync=z.ParseFromSnippetAsync,(0,u.f)("BABYLON.ShaderMaterial",z)}}]);