"use strict";(self.ex92n20nlz8=self.ex92n20nlz8||[]).push([[22],{12808:(I,g,b)=>{b.r(g),b.d(g,{ShaderMaterial:()=>S});var e=b(12622),c=b(12814),z=b(12590),M=b(12659),J=b(12572),o=b(12558),n=b(12892),G=b(12443),D=b(12899),p=b(12449),x=b(12952),Z=b(12943);const k={effect:null,subMesh:null};class S extends D.d{constructor(I,g,b){let e=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(I,g,!(arguments.length>4&&void 0!==arguments[4])||arguments[4]),this._textures={},this._textureArrays={},this._externalTextures={},this._floats={},this._ints={},this._uints={},this._floatsArrays={},this._colors3={},this._colors3Arrays={},this._colors4={},this._colors4Arrays={},this._vectors2={},this._vectors3={},this._vectors4={},this._quaternions={},this._quaternionsArrays={},this._matrices={},this._matrixArrays={},this._matrices3x3={},this._matrices2x2={},this._vectors2Arrays={},this._vectors3Arrays={},this._vectors4Arrays={},this._uniformBuffers={},this._textureSamplers={},this._storageBuffers={},this._cachedWorldViewMatrix=new z.Matrix,this._cachedWorldViewProjectionMatrix=new z.Matrix,this._multiview=!1,this._materialHelperNeedsPreviousMatrices=!1,this._shaderPath=b,this._options={needAlphaBlending:!1,needAlphaTesting:!1,attributes:["position","normal","uv"],uniforms:["worldViewProjection"],uniformBuffers:[],samplers:[],externalTextures:[],samplerObjects:[],storageBuffers:[],defines:[],useClipPlane:!1,...e}}get shaderPath(){return this._shaderPath}set shaderPath(I){this._shaderPath=I}get options(){return this._options}get isMultiview(){return this._multiview}getClassName(){return"ShaderMaterial"}needAlphaBlending(){return this.alpha<1||this._options.needAlphaBlending}needAlphaTesting(){return this._options.needAlphaTesting}_checkUniform(I){-1===this._options.uniforms.indexOf(I)&&this._options.uniforms.push(I)}setTexture(I,g){return-1===this._options.samplers.indexOf(I)&&this._options.samplers.push(I),this._textures[I]=g,this}removeTexture(I){delete this._textures[I]}setTextureArray(I,g){return-1===this._options.samplers.indexOf(I)&&this._options.samplers.push(I),this._checkUniform(I),this._textureArrays[I]=g,this}setExternalTexture(I,g){return-1===this._options.externalTextures.indexOf(I)&&this._options.externalTextures.push(I),this._externalTextures[I]=g,this}setFloat(I,g){return this._checkUniform(I),this._floats[I]=g,this}setInt(I,g){return this._checkUniform(I),this._ints[I]=g,this}setUInt(I,g){return this._checkUniform(I),this._uints[I]=g,this}setFloats(I,g){return this._checkUniform(I),this._floatsArrays[I]=g,this}setColor3(I,g){return this._checkUniform(I),this._colors3[I]=g,this}setColor3Array(I,g){return this._checkUniform(I),this._colors3Arrays[I]=g.reduce(((I,g)=>(I.push(g.r,g.g,g.b),I)),[]),this}setColor4(I,g){return this._checkUniform(I),this._colors4[I]=g,this}setColor4Array(I,g){return this._checkUniform(I),this._colors4Arrays[I]=g.reduce(((I,g)=>(I.push(g.r,g.g,g.b,g.a),I)),[]),this}setVector2(I,g){return this._checkUniform(I),this._vectors2[I]=g,this}setVector3(I,g){return this._checkUniform(I),this._vectors3[I]=g,this}setVector4(I,g){return this._checkUniform(I),this._vectors4[I]=g,this}setQuaternion(I,g){return this._checkUniform(I),this._quaternions[I]=g,this}setQuaternionArray(I,g){return this._checkUniform(I),this._quaternionsArrays[I]=g.reduce(((I,g)=>(g.toArray(I,I.length),I)),[]),this}setMatrix(I,g){return this._checkUniform(I),this._matrices[I]=g,this}setMatrices(I,g){this._checkUniform(I);const b=new Float32Array(16*g.length);for(let e=0;e<g.length;e++){g[e].copyToArray(b,16*e)}return this._matrixArrays[I]=b,this}setMatrix3x3(I,g){return this._checkUniform(I),this._matrices3x3[I]=g,this}setMatrix2x2(I,g){return this._checkUniform(I),this._matrices2x2[I]=g,this}setArray2(I,g){return this._checkUniform(I),this._vectors2Arrays[I]=g,this}setArray3(I,g){return this._checkUniform(I),this._vectors3Arrays[I]=g,this}setArray4(I,g){return this._checkUniform(I),this._vectors4Arrays[I]=g,this}setUniformBuffer(I,g){return-1===this._options.uniformBuffers.indexOf(I)&&this._options.uniformBuffers.push(I),this._uniformBuffers[I]=g,this}setTextureSampler(I,g){return-1===this._options.samplerObjects.indexOf(I)&&this._options.samplerObjects.push(I),this._textureSamplers[I]=g,this}setStorageBuffer(I,g){return-1===this._options.storageBuffers.indexOf(I)&&this._options.storageBuffers.push(I),this._storageBuffers[I]=g,this}setDefine(I,g){const b=I.trimEnd()+" ",e=this.options.defines.findIndex((g=>g===I||g.startsWith(b)));return e>=0&&this.options.defines.splice(e,1),("boolean"!==typeof g||g)&&this.options.defines.push(b+g),this}isReadyForSubMesh(I,g,b){return this.isReady(I,b,g)}isReady(I,g,b){var e;const z=b&&this._storeEffectOnSubMeshes;if(this.isFrozen){const I=z?b._drawWrapper:this._drawWrapper;if(I.effect&&I._wasPreviouslyReady&&I._wasPreviouslyUsingInstances===g)return!0}const J=this.EI(),o=J.getEngine(),G=[],D=[];let p=null,S=this._shaderPath,f=this._options.uniforms,V=this._options.uniformBuffers,a=this._options.samplers;o.getCaps().multiview&&J.activeCamera&&J.activeCamera.outputRenderTarget&&J.activeCamera.outputRenderTarget.getViewCount()>1&&(this._multiview=!0,G.push("#define MULTIVIEW"),-1!==f.indexOf("viewProjection")&&-1===f.indexOf("viewProjectionR")&&f.push("viewProjectionR"));for(let c=0;c<this._options.defines.length;c++){const I=0===this._options.defines[c].indexOf("#define")?this._options.defines[c]:`#define ${this._options.defines[c]}`;G.push(I)}for(let c=0;c<this._options.attributes.length;c++)D.push(this._options.attributes[c]);if(I&&I.isVerticesDataPresent(M.f.ColorKind)&&(-1===D.indexOf(M.f.ColorKind)&&D.push(M.f.ColorKind),G.push("#define VERTEXCOLOR")),g&&(G.push("#define INSTANCES"),(0,Z.$)(D,this._materialHelperNeedsPreviousMatrices),null!==I&&void 0!==I&&I.hasThinInstances&&(G.push("#define THIN_INSTANCES"),I&&I.isVerticesDataPresent(M.f.ColorInstanceKind)&&(D.push(M.f.ColorInstanceKind),G.push("#define INSTANCESCOLOR")))),I&&I.useBones&&I.computeBonesUsingShaders&&I.skeleton){D.push(M.f.MatricesIndicesKind),D.push(M.f.MatricesWeightsKind),I.numBoneInfluencers>4&&(D.push(M.f.MatricesIndicesExtraKind),D.push(M.f.MatricesWeightsExtraKind));const g=I.skeleton;G.push("#define NUM_BONE_INFLUENCERS "+I.numBoneInfluencers),p=new n.e,p.addCPUSkinningFallback(0,I),g.isUsingTextureForMatrices?(G.push("#define BONETEXTURE"),-1===f.indexOf("boneTextureWidth")&&f.push("boneTextureWidth"),-1===this._options.samplers.indexOf("boneSampler")&&this._options.samplers.push("boneSampler")):(G.push("#define BonesPerMesh "+(g.bones.length+1)),-1===f.indexOf("mBones")&&f.push("mBones"))}else G.push("#define NUM_BONE_INFLUENCERS 0");let v=0;const X=I?I.morphTargetManager:null;if(X){const g=-1!==G.indexOf("#define UV1"),b=-1!==G.indexOf("#define UV2"),e=-1!==G.indexOf("#define TANGENT"),c=-1!==G.indexOf("#define NORMAL"),z=-1!==G.indexOf("#define VERTEXCOLOR");v=(0,Z.G)(X,G,D,I,!0,c,e,g,b,z),X.isUsingTextureForTargets&&(-1===f.indexOf("morphTargetTextureIndices")&&f.push("morphTargetTextureIndices"),-1===this._options.samplers.indexOf("morphTargets")&&this._options.samplers.push("morphTargets")),v>0&&(f=f.slice(),f.push("morphTargetInfluences"),f.push("morphTargetCount"),f.push("morphTargetTextureInfo"),f.push("morphTargetTextureIndices"))}else G.push("#define NUM_MORPH_INFLUENCERS 0");if(I){const g=I.bakedVertexAnimationManager;g&&g.isEnabled&&(G.push("#define BAKED_VERTEX_ANIMATION_TEXTURE"),-1===f.indexOf("bakedVertexAnimationSettings")&&f.push("bakedVertexAnimationSettings"),-1===f.indexOf("bakedVertexAnimationTextureSizeInverted")&&f.push("bakedVertexAnimationTextureSizeInverted"),-1===f.indexOf("bakedVertexAnimationTime")&&f.push("bakedVertexAnimationTime"),-1===this._options.samplers.indexOf("bakedVertexAnimationTexture")&&this._options.samplers.push("bakedVertexAnimationTexture")),(0,Z.y)(D,I,G)}for(const c in this._textures)if(!this._textures[c].isReady())return!1;I&&this.needAlphaTestingForMesh(I)&&G.push("#define ALPHATEST"),!1!==this._options.useClipPlane&&((0,x.b)(f),(0,x.j)(this,J,G)),J.fogEnabled&&null!==I&&void 0!==I&&I.applyFog&&J.fogMode!==c.c.FOGMODE_NONE&&(G.push("#define FOG"),-1===f.indexOf("view")&&f.push("view"),-1===f.indexOf("vFogInfos")&&f.push("vFogInfos"),-1===f.indexOf("vFogColor")&&f.push("vFogColor")),this._useLogarithmicDepth&&(G.push("#define LOGARITHMICDEPTH"),-1===f.indexOf("logarithmicDepthConstant")&&f.push("logarithmicDepthConstant")),this.customShaderNameResolve&&(f=f.slice(),V=V.slice(),a=a.slice(),S=this.customShaderNameResolve(this.name,f,V,a,G,D));const R=z?b._getDrawWrapper(void 0,!0):this._drawWrapper,E=(null===R||void 0===R?void 0:R.effect)??null,mI=(null===R||void 0===R?void 0:R.defines)??null,s=G.join("\n");let F=E;return mI!==s&&(F=o.createEffect(S,{attributes:D,uniformsNames:f,uniformBuffersNames:V,samplers:a,defines:s,fallbacks:p,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousMorphTargets:v},shaderLanguage:this._options.shaderLanguage,extraInitializationsAsync:this._options.extraInitializationsAsync},o),z?b.setEffect(F,s,this._materialContext):R&&R.setEffect(F,s),this._onEffectCreatedObservable&&(k.effect=F,k.subMesh=b??(null===I||void 0===I?void 0:I.Ib[0])??null,this._onEffectCreatedObservable.notifyObservers(k))),R._wasPreviouslyUsingInstances=!!g,!(null===(e=F)||void 0===e||!e.isReady())&&(E!==F&&J.resetCachedMaterial(),R._wasPreviouslyReady=!0,!0)}bindOnlyWorldMatrix(I,g){const b=g??this.getEffect();if(!b)return;const e=this._options.uniforms;-1!==e.indexOf("world")&&b.setMatrix("world",I);const c=this.EI();-1!==e.indexOf("worldView")&&(I.multiplyToRef(c.getViewMatrix(),this._cachedWorldViewMatrix),b.setMatrix("worldView",this._cachedWorldViewMatrix)),-1!==e.indexOf("worldViewProjection")&&(I.multiplyToRef(c.getTransformMatrix(),this._cachedWorldViewProjectionMatrix),b.setMatrix("worldViewProjection",this._cachedWorldViewProjectionMatrix)),-1!==e.indexOf("view")&&b.setMatrix("view",c.getViewMatrix())}bindForSubMesh(I,g,b){var e;this.bind(I,g,null===(e=b._drawWrapperOverride)||void 0===e?void 0:e.effect,b)}bind(I,g,b,e){const c=e&&this._storeEffectOnSubMeshes,z=b??(c?e.effect:this.getEffect());if(!z)return;const M=this.EI();this._activeEffect=z,this.bindOnlyWorldMatrix(I,b);const J=this._options.uniformBuffers;let o=!1;if(z&&J&&J.length>0&&M.getEngine().supportsUniformBuffers)for(let D=0;D<J.length;++D){switch(J[D]){case"Mesh":g&&(g.getMeshUniformBuffer().bindToEffect(z,"Mesh"),g.transferToEffect(I));break;case"Scene":(0,Z.r)(z,M.getSceneUniformBuffer()),M.finalizeSceneUbo(),o=!0}}const n=g&&c?this._mustRebind(M,z,e,g.visibility):M.getCachedMaterial()!==this;if(z&&n){let I;for(I in o||-1===this._options.uniforms.indexOf("view")||z.setMatrix("view",M.getViewMatrix()),o||-1===this._options.uniforms.indexOf("projection")||z.setMatrix("projection",M.getProjectionMatrix()),o||-1===this._options.uniforms.indexOf("viewProjection")||(z.setMatrix("viewProjection",M.getTransformMatrix()),this._multiview&&z.setMatrix("viewProjectionR",M._transformMatrixR)),M.activeCamera&&-1!==this._options.uniforms.indexOf("cameraPosition")&&z.setVector3("cameraPosition",M.activeCamera.globalPosition),(0,Z.b)(g,z),(0,x.f)(z,this,M),this._useLogarithmicDepth&&(0,Z.j)(c?e.materialDefines:z.defines,z,M),g&&(0,Z.d)(M,g,z),this._textures)z.setTexture(I,this._textures[I]);for(I in this._textureArrays)z.setTextureArray(I,this._textureArrays[I]);for(I in this._ints)z.setInt(I,this._ints[I]);for(I in this._uints)z.setUInt(I,this._uints[I]);for(I in this._floats)z.setFloat(I,this._floats[I]);for(I in this._floatsArrays)z.setArray(I,this._floatsArrays[I]);for(I in this._colors3)z.setColor3(I,this._colors3[I]);for(I in this._colors3Arrays)z.setArray3(I,this._colors3Arrays[I]);for(I in this._colors4){const g=this._colors4[I];z.setFloat4(I,g.r,g.g,g.b,g.a)}for(I in this._colors4Arrays)z.setArray4(I,this._colors4Arrays[I]);for(I in this._vectors2)z.setVector2(I,this._vectors2[I]);for(I in this._vectors3)z.setVector3(I,this._vectors3[I]);for(I in this._vectors4)z.setVector4(I,this._vectors4[I]);for(I in this._quaternions)z.setQuaternion(I,this._quaternions[I]);for(I in this._matrices)z.setMatrix(I,this._matrices[I]);for(I in this._matrixArrays)z.setMatrices(I,this._matrixArrays[I]);for(I in this._matrices3x3)z.setMatrix3x3(I,this._matrices3x3[I]);for(I in this._matrices2x2)z.setMatrix2x2(I,this._matrices2x2[I]);for(I in this._vectors2Arrays)z.setArray2(I,this._vectors2Arrays[I]);for(I in this._vectors3Arrays)z.setArray3(I,this._vectors3Arrays[I]);for(I in this._vectors4Arrays)z.setArray4(I,this._vectors4Arrays[I]);for(I in this._quaternionsArrays)z.setArray4(I,this._quaternionsArrays[I]);for(I in this._uniformBuffers){const g=this._uniformBuffers[I].getBuffer();g&&z.bindUniformBuffer(g,I)}const b=M.getEngine(),J=b.setExternalTexture;if(J)for(I in this._externalTextures)J.call(b,I,this._externalTextures[I]);const n=b.setTextureSampler;if(n)for(I in this._textureSamplers)n.call(b,I,this._textureSamplers[I]);const G=b.setStorageBuffer;if(G)for(I in this._storageBuffers)G.call(b,I,this._storageBuffers[I])}if(z&&g&&(n||!this.isFrozen)){(0,Z.n)(g,z),g.morphTargetManager&&g.morphTargetManager.isUsingTextureForTargets&&g.morphTargetManager._bind(z);const I=g.bakedVertexAnimationManager;if(I&&I.isEnabled){var G;const I=c?e._drawWrapper:this._drawWrapper;null===(G=g.bakedVertexAnimationManager)||void 0===G||G.bind(z,!!I._wasPreviouslyUsingInstances)}}this._afterBind(g,z,e)}getActiveTextures(){const I=super.getActiveTextures();for(const g in this._textures)I.push(this._textures[g]);for(const g in this._textureArrays){const b=this._textureArrays[g];for(let g=0;g<b.length;g++)I.push(b[g])}return I}hasTexture(I){if(super.hasTexture(I))return!0;for(const g in this._textures)if(this._textures[g]===I)return!0;for(const g in this._textureArrays){const b=this._textureArrays[g];for(let g=0;g<b.length;g++)if(b[g]===I)return!0}return!1}clone(I){const g=e.b.Clone((()=>new S(I,this.EI(),this._shaderPath,this._options,this._storeEffectOnSubMeshes)),this);g.name=I,g.id=I,"object"===typeof g._shaderPath&&(g._shaderPath={...g._shaderPath}),this._options={...this._options};const b=Object.keys(this._options);for(const e of b){const I=this._options[e];Array.isArray(I)&&(this._options[e]=I.slice(0))}this.ig.copyTo(g.ig);for(const e in this._textures)g.setTexture(e,this._textures[e]);for(const e in this._textureArrays)g.setTextureArray(e,this._textureArrays[e]);for(const e in this._externalTextures)g.setExternalTexture(e,this._externalTextures[e]);for(const e in this._ints)g.setInt(e,this._ints[e]);for(const e in this._uints)g.setUInt(e,this._uints[e]);for(const e in this._floats)g.setFloat(e,this._floats[e]);for(const e in this._floatsArrays)g.setFloats(e,this._floatsArrays[e]);for(const e in this._colors3)g.setColor3(e,this._colors3[e]);for(const e in this._colors3Arrays)g._colors3Arrays[e]=this._colors3Arrays[e];for(const e in this._colors4)g.setColor4(e,this._colors4[e]);for(const e in this._colors4Arrays)g._colors4Arrays[e]=this._colors4Arrays[e];for(const e in this._vectors2)g.setVector2(e,this._vectors2[e]);for(const e in this._vectors3)g.setVector3(e,this._vectors3[e]);for(const e in this._vectors4)g.setVector4(e,this._vectors4[e]);for(const e in this._quaternions)g.setQuaternion(e,this._quaternions[e]);for(const e in this._quaternionsArrays)g._quaternionsArrays[e]=this._quaternionsArrays[e];for(const e in this._matrices)g.setMatrix(e,this._matrices[e]);for(const e in this._matrixArrays)g._matrixArrays[e]=this._matrixArrays[e].slice();for(const e in this._matrices3x3)g.setMatrix3x3(e,this._matrices3x3[e]);for(const e in this._matrices2x2)g.setMatrix2x2(e,this._matrices2x2[e]);for(const e in this._vectors2Arrays)g.setArray2(e,this._vectors2Arrays[e]);for(const e in this._vectors3Arrays)g.setArray3(e,this._vectors3Arrays[e]);for(const e in this._vectors4Arrays)g.setArray4(e,this._vectors4Arrays[e]);for(const e in this._uniformBuffers)g.setUniformBuffer(e,this._uniformBuffers[e]);for(const e in this._textureSamplers)g.setTextureSampler(e,this._textureSamplers[e]);for(const e in this._storageBuffers)g.setStorageBuffer(e,this._storageBuffers[e]);return g}dispose(I,g,b){if(g){let I;for(I in this._textures)this._textures[I].dispose();for(I in this._textureArrays){const g=this._textureArrays[I];for(let I=0;I<g.length;I++)g[I].dispose()}}this._textures={},super.dispose(I,g,b)}serialize(){const I=e.b.Serialize(this);let g;for(g in I.customType="BABYLON.ShaderMaterial",I.uniqueId=this.uniqueId,I.options=this._options,I.shaderPath=this._shaderPath,I.storeEffectOnSubMeshes=this._storeEffectOnSubMeshes,I.ig=this.ig.serialize(),I.textures={},this._textures)I.textures[g]=this._textures[g].serialize();for(g in I.textureArrays={},this._textureArrays){I.textureArrays[g]=[];const b=this._textureArrays[g];for(let e=0;e<b.length;e++)I.textureArrays[g].push(b[e].serialize())}for(g in I.ints={},this._ints)I.ints[g]=this._ints[g];for(g in I.uints={},this._uints)I.uints[g]=this._uints[g];for(g in I.floats={},this._floats)I.floats[g]=this._floats[g];for(g in I.floatsArrays={},this._floatsArrays)I.floatsArrays[g]=this._floatsArrays[g];for(g in I.colors3={},this._colors3){const b=this._colors3[g];I.colors3[g]=[b.r,b.g,b.b]}for(g in I.colors3Arrays={},this._colors3Arrays)I.colors3Arrays[g]=this._colors3Arrays[g];for(g in I.colors4={},this._colors4){const b=this._colors4[g];I.colors4[g]=[b.r,b.g,b.b,b.a]}for(g in I.colors4Arrays={},this._colors4Arrays)I.colors4Arrays[g]=this._colors4Arrays[g];for(g in I.vectors2={},this._vectors2){const b=this._vectors2[g];I.vectors2[g]=[b.x,b.y]}for(g in I.vectors3={},this._vectors3){const b=this._vectors3[g];I.vectors3[g]=[b.x,b.y,b.z]}for(g in I.vectors4={},this._vectors4){const b=this._vectors4[g];I.vectors4[g]=[b.x,b.y,b.z,b.w]}for(g in I.quaternions={},this._quaternions)I.quaternions[g]=this._quaternions[g].bb();for(g in I.matrices={},this._matrices)I.matrices[g]=this._matrices[g].bb();for(g in I.matrixArray={},this._matrixArrays)I.matrixArray[g]=this._matrixArrays[g];for(g in I.matrices3x3={},this._matrices3x3)I.matrices3x3[g]=this._matrices3x3[g];for(g in I.matrices2x2={},this._matrices2x2)I.matrices2x2[g]=this._matrices2x2[g];for(g in I.vectors2Arrays={},this._vectors2Arrays)I.vectors2Arrays[g]=this._vectors2Arrays[g];for(g in I.vectors3Arrays={},this._vectors3Arrays)I.vectors3Arrays[g]=this._vectors3Arrays[g];for(g in I.vectors4Arrays={},this._vectors4Arrays)I.vectors4Arrays[g]=this._vectors4Arrays[g];for(g in I.quaternionsArrays={},this._quaternionsArrays)I.quaternionsArrays[g]=this._quaternionsArrays[g];return I}static Parse(I,g,b){const c=e.b.Parse((()=>new S(I.name,g,I.shaderPath,I.options,I.storeEffectOnSubMeshes)),I,g,b);let M;for(M in I.ig&&c.ig.parse(I.ig,g,b),I.textures)c.setTexture(M,J.b.Parse(I.textures[M],g,b));for(M in I.textureArrays){const e=I.textureArrays[M],z=[];for(let I=0;I<e.length;I++)z.push(J.b.Parse(e[I],g,b));c.setTextureArray(M,z)}for(M in I.ints)c.setInt(M,I.ints[M]);for(M in I.uints)c.setUInt(M,I.uints[M]);for(M in I.floats)c.setFloat(M,I.floats[M]);for(M in I.floatsArrays)c.setFloats(M,I.floatsArrays[M]);for(M in I.colors3){const g=I.colors3[M];c.setColor3(M,{r:g[0],g:g[1],b:g[2]})}for(M in I.colors3Arrays){const g=I.colors3Arrays[M].reduce(((I,g,b)=>(b%3===0?I.push([g]):I[I.length-1].push(g),I)),[]).map((I=>({r:I[0],g:I[1],b:I[2]})));c.setColor3Array(M,g)}for(M in I.colors4){const g=I.colors4[M];c.setColor4(M,{r:g[0],g:g[1],b:g[2],a:g[3]})}for(M in I.colors4Arrays){const g=I.colors4Arrays[M].reduce(((I,g,b)=>(b%4===0?I.push([g]):I[I.length-1].push(g),I)),[]).map((I=>({r:I[0],g:I[1],b:I[2],a:I[3]})));c.setColor4Array(M,g)}for(M in I.vectors2){const g=I.vectors2[M];c.setVector2(M,{x:g[0],y:g[1]})}for(M in I.vectors3){const g=I.vectors3[M];c.setVector3(M,{x:g[0],y:g[1],z:g[2]})}for(M in I.vectors4){const g=I.vectors4[M];c.setVector4(M,{x:g[0],y:g[1],z:g[2],w:g[3]})}for(M in I.quaternions)c.setQuaternion(M,z.Quaternion.mb(I.quaternions[M]));for(M in I.matrices)c.setMatrix(M,z.Matrix.mb(I.matrices[M]));for(M in I.matrixArray)c._matrixArrays[M]=new Float32Array(I.matrixArray[M]);for(M in I.matrices3x3)c.setMatrix3x3(M,I.matrices3x3[M]);for(M in I.matrices2x2)c.setMatrix2x2(M,I.matrices2x2[M]);for(M in I.vectors2Arrays)c.setArray2(M,I.vectors2Arrays[M]);for(M in I.vectors3Arrays)c.setArray3(M,I.vectors3Arrays[M]);for(M in I.vectors4Arrays)c.setArray4(M,I.vectors4Arrays[M]);for(M in I.quaternionsArrays)c.setArray4(M,I.quaternionsArrays[M]);return c}static async ParseFromFileAsync(I,g,b){let e=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return await new Promise(((c,z)=>{const M=new G.d;M.addEventListener("readystatechange",(()=>{if(4==M.readyState)if(200==M.status){const g=JSON.parse(M.responseText),z=this.Parse(g,b||p.b.LastCreatedScene,e);I&&(z.name=I),c(z)}else z("Unable to load the ShaderMaterial")})),M.open("GET",g),M.send()}))}static async ParseFromSnippetAsync(I,g){let b=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return await new Promise(((e,c)=>{const z=new G.d;z.addEventListener("readystatechange",(()=>{if(4==z.readyState)if(200==z.status){const c=JSON.parse(JSON.parse(z.responseText).jsonPayload),M=JSON.parse(c.shaderMaterial),J=this.Parse(M,g||p.b.LastCreatedScene,b);J.snippetId=I,e(J)}else c("Unable to load the snippet "+I)})),z.open("GET",this.SnippetUrl+"/"+I.replace(/#/g,"/")),z.send()}))}}S.SnippetUrl="https://snippet.babylonjs.com",S.CreateFromSnippetAsync=S.ParseFromSnippetAsync,(0,o.g)("BABYLON.ShaderMaterial",S)}}]);