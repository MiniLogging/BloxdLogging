"use strict";(self.hmihoa2fs98=self.hmihoa2fs98||[]).push([[22],{11906:(b,d,P)=>{P.r(d),P.d(d,{ShaderMaterial:()=>r});var G=P(11716),W=P(11909),i=P(11681),q=P(11752),C=P(11658),J=P(11639),L=P(11984),x=P(11531),Y=P(11990),s=P(11535),E=P(12049),w=P(12045);const t={effect:null,subMesh:null};class r extends Y.c{constructor(b,d,P){let G=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(b,d,!(arguments.length>4&&void 0!==arguments[4])||arguments[4]),this._textures={},this._textureArrays={},this._externalTextures={},this._floats={},this._ints={},this._uints={},this._floatsArrays={},this._colors3={},this._colors3Arrays={},this._colors4={},this._colors4Arrays={},this._vectors2={},this._vectors3={},this._vectors4={},this._quaternions={},this._quaternionsArrays={},this._matrices={},this._matrixArrays={},this._matrices3x3={},this._matrices2x2={},this._vectors2Arrays={},this._vectors3Arrays={},this._vectors4Arrays={},this._uniformBuffers={},this._textureSamplers={},this._storageBuffers={},this._cachedWorldViewMatrix=new i.Matrix,this._cachedWorldViewProjectionMatrix=new i.Matrix,this._multiview=!1,this._materialHelperNeedsPreviousMatrices=!1,this._shaderPath=P,this._options={needAlphaBlending:!1,needAlphaTesting:!1,attributes:["position","normal","uv"],uniforms:["worldViewProjection"],uniformBuffers:[],samplers:[],externalTextures:[],samplerObjects:[],storageBuffers:[],defines:[],useClipPlane:!1,...G}}get shaderPath(){return this._shaderPath}set shaderPath(b){this._shaderPath=b}get options(){return this._options}get isMultiview(){return this._multiview}getClassName(){return"ShaderMaterial"}needAlphaBlending(){return this.alpha<1||this._options.needAlphaBlending}needAlphaTesting(){return this._options.needAlphaTesting}_checkUniform(b){-1===this._options.uniforms.indexOf(b)&&this._options.uniforms.push(b)}setTexture(b,d){return-1===this._options.samplers.indexOf(b)&&this._options.samplers.push(b),this._textures[b]=d,this}removeTexture(b){delete this._textures[b]}setTextureArray(b,d){return-1===this._options.samplers.indexOf(b)&&this._options.samplers.push(b),this._checkUniform(b),this._textureArrays[b]=d,this}setExternalTexture(b,d){return-1===this._options.externalTextures.indexOf(b)&&this._options.externalTextures.push(b),this._externalTextures[b]=d,this}setFloat(b,d){return this._checkUniform(b),this._floats[b]=d,this}setInt(b,d){return this._checkUniform(b),this._ints[b]=d,this}setUInt(b,d){return this._checkUniform(b),this._uints[b]=d,this}setFloats(b,d){return this._checkUniform(b),this._floatsArrays[b]=d,this}setColor3(b,d){return this._checkUniform(b),this._colors3[b]=d,this}setColor3Array(b,d){return this._checkUniform(b),this._colors3Arrays[b]=d.reduce(((b,d)=>(b.push(d.r,d.g,d.b),b)),[]),this}setColor4(b,d){return this._checkUniform(b),this._colors4[b]=d,this}setColor4Array(b,d){return this._checkUniform(b),this._colors4Arrays[b]=d.reduce(((b,d)=>(b.push(d.r,d.g,d.b,d.a),b)),[]),this}setVector2(b,d){return this._checkUniform(b),this._vectors2[b]=d,this}setVector3(b,d){return this._checkUniform(b),this._vectors3[b]=d,this}setVector4(b,d){return this._checkUniform(b),this._vectors4[b]=d,this}setQuaternion(b,d){return this._checkUniform(b),this._quaternions[b]=d,this}setQuaternionArray(b,d){return this._checkUniform(b),this._quaternionsArrays[b]=d.reduce(((b,d)=>(d.toArray(b,b.length),b)),[]),this}setMatrix(b,d){return this._checkUniform(b),this._matrices[b]=d,this}setMatrices(b,d){this._checkUniform(b);const P=new Float32Array(16*d.length);for(let G=0;G<d.length;G++){d[G].copyToArray(P,16*G)}return this._matrixArrays[b]=P,this}setMatrix3x3(b,d){return this._checkUniform(b),this._matrices3x3[b]=d,this}setMatrix2x2(b,d){return this._checkUniform(b),this._matrices2x2[b]=d,this}setArray2(b,d){return this._checkUniform(b),this._vectors2Arrays[b]=d,this}setArray3(b,d){return this._checkUniform(b),this._vectors3Arrays[b]=d,this}setArray4(b,d){return this._checkUniform(b),this._vectors4Arrays[b]=d,this}setUniformBuffer(b,d){return-1===this._options.uniformBuffers.indexOf(b)&&this._options.uniformBuffers.push(b),this._uniformBuffers[b]=d,this}setTextureSampler(b,d){return-1===this._options.samplerObjects.indexOf(b)&&this._options.samplerObjects.push(b),this._textureSamplers[b]=d,this}setStorageBuffer(b,d){return-1===this._options.storageBuffers.indexOf(b)&&this._options.storageBuffers.push(b),this._storageBuffers[b]=d,this}setDefine(b,d){const P=b.trimEnd()+" ",G=this.options.defines.findIndex((d=>d===b||d.startsWith(P)));return G>=0&&this.options.defines.splice(G,1),("boolean"!==typeof d||d)&&this.options.defines.push(P+d),this}isReadyForSubMesh(b,d,P){return this.isReady(b,P,d)}isReady(b,d,P){var G;const i=P&&this._storeEffectOnSubMeshes;if(this.isFrozen){const b=i?P._drawWrapper:this._drawWrapper;if(b.effect&&b._wasPreviouslyReady&&b._wasPreviouslyUsingInstances===d)return!0}const C=this.Xb(),J=C.getEngine(),x=[],Y=[];let s=null,r=this._shaderPath,B=this._options.uniforms,n=this._options.uniformBuffers,Z=this._options.samplers;J.getCaps().multiview&&C.activeCamera&&C.activeCamera.outputRenderTarget&&C.activeCamera.outputRenderTarget.getViewCount()>1&&(this._multiview=!0,x.push("#define MULTIVIEW"),-1!==B.indexOf("viewProjection")&&-1===B.indexOf("viewProjectionR")&&B.push("viewProjectionR"));for(let W=0;W<this._options.defines.length;W++){const b=0===this._options.defines[W].indexOf("#define")?this._options.defines[W]:`#define ${this._options.defines[W]}`;x.push(b)}for(let W=0;W<this._options.attributes.length;W++)Y.push(this._options.attributes[W]);if(b&&b.isVerticesDataPresent(q.c.ColorKind)&&(-1===Y.indexOf(q.c.ColorKind)&&Y.push(q.c.ColorKind),x.push("#define VERTEXCOLOR")),d&&(x.push("#define INSTANCES"),(0,w.T)(Y,this._materialHelperNeedsPreviousMatrices),null!==b&&void 0!==b&&b.hasThinInstances&&(x.push("#define THIN_INSTANCES"),b&&b.isVerticesDataPresent(q.c.ColorInstanceKind)&&(Y.push(q.c.ColorInstanceKind),x.push("#define INSTANCESCOLOR")))),b&&b.useBones&&b.computeBonesUsingShaders&&b.skeleton){Y.push(q.c.MatricesIndicesKind),Y.push(q.c.MatricesWeightsKind),b.numBoneInfluencers>4&&(Y.push(q.c.MatricesIndicesExtraKind),Y.push(q.c.MatricesWeightsExtraKind));const d=b.skeleton;x.push("#define NUM_BONE_INFLUENCERS "+b.numBoneInfluencers),s=new L.d,s.addCPUSkinningFallback(0,b),d.isUsingTextureForMatrices?(x.push("#define BONETEXTURE"),-1===B.indexOf("boneTextureWidth")&&B.push("boneTextureWidth"),-1===this._options.samplers.indexOf("boneSampler")&&this._options.samplers.push("boneSampler")):(x.push("#define BonesPerMesh "+(d.bones.length+1)),-1===B.indexOf("mBones")&&B.push("mBones"))}else x.push("#define NUM_BONE_INFLUENCERS 0");let o=0;const A=b?b.morphTargetManager:null;if(A){const d=-1!==x.indexOf("#define UV1"),P=-1!==x.indexOf("#define UV2"),G=-1!==x.indexOf("#define TANGENT"),W=-1!==x.indexOf("#define NORMAL"),i=-1!==x.indexOf("#define VERTEXCOLOR");o=(0,w.x)(A,x,Y,b,!0,W,G,d,P,i),A.isUsingTextureForTargets&&(-1===B.indexOf("morphTargetTextureIndices")&&B.push("morphTargetTextureIndices"),-1===this._options.samplers.indexOf("morphTargets")&&this._options.samplers.push("morphTargets")),o>0&&(B=B.slice(),B.push("morphTargetInfluences"),B.push("morphTargetCount"),B.push("morphTargetTextureInfo"),B.push("morphTargetTextureIndices"))}else x.push("#define NUM_MORPH_INFLUENCERS 0");if(b){const d=b.bakedVertexAnimationManager;d&&d.isEnabled&&(x.push("#define BAKED_VERTEX_ANIMATION_TEXTURE"),-1===B.indexOf("bakedVertexAnimationSettings")&&B.push("bakedVertexAnimationSettings"),-1===B.indexOf("bakedVertexAnimationTextureSizeInverted")&&B.push("bakedVertexAnimationTextureSizeInverted"),-1===B.indexOf("bakedVertexAnimationTime")&&B.push("bakedVertexAnimationTime"),-1===this._options.samplers.indexOf("bakedVertexAnimationTexture")&&this._options.samplers.push("bakedVertexAnimationTexture")),(0,w.l)(Y,b,x)}for(const W in this._textures)if(!this._textures[W].isReady())return!1;b&&this.needAlphaTestingForMesh(b)&&x.push("#define ALPHATEST"),!1!==this._options.useClipPlane&&((0,E.c)(B),(0,E.k)(this,C,x)),C.fogEnabled&&null!==b&&void 0!==b&&b.applyFog&&C.fogMode!==W.e.FOGMODE_NONE&&(x.push("#define FOG"),-1===B.indexOf("view")&&B.push("view"),-1===B.indexOf("vFogInfos")&&B.push("vFogInfos"),-1===B.indexOf("vFogColor")&&B.push("vFogColor")),this._useLogarithmicDepth&&(x.push("#define LOGARITHMICDEPTH"),-1===B.indexOf("logarithmicDepthConstant")&&B.push("logarithmicDepthConstant")),this.customShaderNameResolve&&(B=B.slice(),n=n.slice(),Z=Z.slice(),r=this.customShaderNameResolve(this.name,B,n,Z,x,Y));const f=i?P._getDrawWrapper(void 0,!0):this._drawWrapper,g=(null===f||void 0===f?void 0:f.effect)??null,X=(null===f||void 0===f?void 0:f.defines)??null,u=x.join("\n");let M=g;return X!==u&&(M=J.createEffect(r,{attributes:Y,uniformsNames:B,uniformBuffersNames:n,samplers:Z,defines:u,fallbacks:s,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousMorphTargets:o},shaderLanguage:this._options.shaderLanguage,extraInitializationsAsync:this._options.extraInitializationsAsync},J),i?P.setEffect(M,u,this._materialContext):f&&f.setEffect(M,u),this._onEffectCreatedObservable&&(t.effect=M,t.subMesh=P??(null===b||void 0===b?void 0:b.ld[0])??null,this._onEffectCreatedObservable.notifyObservers(t))),f._wasPreviouslyUsingInstances=!!d,!(null===(G=M)||void 0===G||!G.isReady())&&(g!==M&&C.resetCachedMaterial(),f._wasPreviouslyReady=!0,!0)}bindOnlyWorldMatrix(b,d){const P=d??this.getEffect();if(!P)return;const G=this._options.uniforms;-1!==G.indexOf("world")&&P.setMatrix("world",b);const W=this.Xb();-1!==G.indexOf("worldView")&&(b.multiplyToRef(W.getViewMatrix(),this._cachedWorldViewMatrix),P.setMatrix("worldView",this._cachedWorldViewMatrix)),-1!==G.indexOf("worldViewProjection")&&(b.multiplyToRef(W.getTransformMatrix(),this._cachedWorldViewProjectionMatrix),P.setMatrix("worldViewProjection",this._cachedWorldViewProjectionMatrix)),-1!==G.indexOf("view")&&P.setMatrix("view",W.getViewMatrix())}bindForSubMesh(b,d,P){var G;this.bind(b,d,null===(G=P._drawWrapperOverride)||void 0===G?void 0:G.effect,P)}bind(b,d,P,G){const W=G&&this._storeEffectOnSubMeshes,i=P??(W?G.effect:this.getEffect());if(!i)return;const q=this.Xb();this._activeEffect=i,this.bindOnlyWorldMatrix(b,P);const C=this._options.uniformBuffers;let J=!1;if(i&&C&&C.length>0&&q.getEngine().supportsUniformBuffers)for(let Y=0;Y<C.length;++Y){switch(C[Y]){case"Mesh":d&&(d.getMeshUniformBuffer().bindToEffect(i,"Mesh"),d.transferToEffect(b));break;case"Scene":(0,w.g)(i,q.getSceneUniformBuffer()),q.finalizeSceneUbo(),J=!0}}const L=d&&W?this._mustRebind(q,i,G,d.visibility):q.getCachedMaterial()!==this;if(i&&L){let b;for(b in J||-1===this._options.uniforms.indexOf("view")||i.setMatrix("view",q.getViewMatrix()),J||-1===this._options.uniforms.indexOf("projection")||i.setMatrix("projection",q.getProjectionMatrix()),J||-1===this._options.uniforms.indexOf("viewProjection")||(i.setMatrix("viewProjection",q.getTransformMatrix()),this._multiview&&i.setMatrix("viewProjectionR",q._transformMatrixR)),q.activeCamera&&-1!==this._options.uniforms.indexOf("cameraPosition")&&i.setVector3("cameraPosition",q.activeCamera.globalPosition),(0,w.b)(d,i),(0,E.f)(i,this,q),this._useLogarithmicDepth&&(0,w.e)(W?G.materialDefines:i.defines,i,q),d&&(0,w.c)(q,d,i),this._textures)i.setTexture(b,this._textures[b]);for(b in this._textureArrays)i.setTextureArray(b,this._textureArrays[b]);for(b in this._ints)i.setInt(b,this._ints[b]);for(b in this._uints)i.setUInt(b,this._uints[b]);for(b in this._floats)i.setFloat(b,this._floats[b]);for(b in this._floatsArrays)i.setArray(b,this._floatsArrays[b]);for(b in this._colors3)i.setColor3(b,this._colors3[b]);for(b in this._colors3Arrays)i.setArray3(b,this._colors3Arrays[b]);for(b in this._colors4){const d=this._colors4[b];i.setFloat4(b,d.r,d.g,d.b,d.a)}for(b in this._colors4Arrays)i.setArray4(b,this._colors4Arrays[b]);for(b in this._vectors2)i.setVector2(b,this._vectors2[b]);for(b in this._vectors3)i.setVector3(b,this._vectors3[b]);for(b in this._vectors4)i.setVector4(b,this._vectors4[b]);for(b in this._quaternions)i.setQuaternion(b,this._quaternions[b]);for(b in this._matrices)i.setMatrix(b,this._matrices[b]);for(b in this._matrixArrays)i.setMatrices(b,this._matrixArrays[b]);for(b in this._matrices3x3)i.setMatrix3x3(b,this._matrices3x3[b]);for(b in this._matrices2x2)i.setMatrix2x2(b,this._matrices2x2[b]);for(b in this._vectors2Arrays)i.setArray2(b,this._vectors2Arrays[b]);for(b in this._vectors3Arrays)i.setArray3(b,this._vectors3Arrays[b]);for(b in this._vectors4Arrays)i.setArray4(b,this._vectors4Arrays[b]);for(b in this._quaternionsArrays)i.setArray4(b,this._quaternionsArrays[b]);for(b in this._uniformBuffers){const d=this._uniformBuffers[b].getBuffer();d&&i.bindUniformBuffer(d,b)}const P=q.getEngine(),C=P.setExternalTexture;if(C)for(b in this._externalTextures)C.call(P,b,this._externalTextures[b]);const L=P.setTextureSampler;if(L)for(b in this._textureSamplers)L.call(P,b,this._textureSamplers[b]);const x=P.setStorageBuffer;if(x)for(b in this._storageBuffers)x.call(P,b,this._storageBuffers[b])}if(i&&d&&(L||!this.isFrozen)){(0,w.f)(d,i),d.morphTargetManager&&d.morphTargetManager.isUsingTextureForTargets&&d.morphTargetManager._bind(i);const b=d.bakedVertexAnimationManager;if(b&&b.isEnabled){var x;const b=W?G._drawWrapper:this._drawWrapper;null===(x=d.bakedVertexAnimationManager)||void 0===x||x.bind(i,!!b._wasPreviouslyUsingInstances)}}this._afterBind(d,i,G)}getActiveTextures(){const b=super.getActiveTextures();for(const d in this._textures)b.push(this._textures[d]);for(const d in this._textureArrays){const P=this._textureArrays[d];for(let d=0;d<P.length;d++)b.push(P[d])}return b}hasTexture(b){if(super.hasTexture(b))return!0;for(const d in this._textures)if(this._textures[d]===b)return!0;for(const d in this._textureArrays){const P=this._textureArrays[d];for(let d=0;d<P.length;d++)if(P[d]===b)return!0}return!1}clone(b){const d=G.c.Clone((()=>new r(b,this.Xb(),this._shaderPath,this._options,this._storeEffectOnSubMeshes)),this);d.name=b,d.id=b,"object"===typeof d._shaderPath&&(d._shaderPath={...d._shaderPath}),this._options={...this._options};const P=Object.keys(this._options);for(const G of P){const b=this._options[G];Array.isArray(b)&&(this._options[G]=b.slice(0))}this.stencil.copyTo(d.stencil);for(const G in this._textures)d.setTexture(G,this._textures[G]);for(const G in this._textureArrays)d.setTextureArray(G,this._textureArrays[G]);for(const G in this._externalTextures)d.setExternalTexture(G,this._externalTextures[G]);for(const G in this._ints)d.setInt(G,this._ints[G]);for(const G in this._uints)d.setUInt(G,this._uints[G]);for(const G in this._floats)d.setFloat(G,this._floats[G]);for(const G in this._floatsArrays)d.setFloats(G,this._floatsArrays[G]);for(const G in this._colors3)d.setColor3(G,this._colors3[G]);for(const G in this._colors3Arrays)d._colors3Arrays[G]=this._colors3Arrays[G];for(const G in this._colors4)d.setColor4(G,this._colors4[G]);for(const G in this._colors4Arrays)d._colors4Arrays[G]=this._colors4Arrays[G];for(const G in this._vectors2)d.setVector2(G,this._vectors2[G]);for(const G in this._vectors3)d.setVector3(G,this._vectors3[G]);for(const G in this._vectors4)d.setVector4(G,this._vectors4[G]);for(const G in this._quaternions)d.setQuaternion(G,this._quaternions[G]);for(const G in this._quaternionsArrays)d._quaternionsArrays[G]=this._quaternionsArrays[G];for(const G in this._matrices)d.setMatrix(G,this._matrices[G]);for(const G in this._matrixArrays)d._matrixArrays[G]=this._matrixArrays[G].slice();for(const G in this._matrices3x3)d.setMatrix3x3(G,this._matrices3x3[G]);for(const G in this._matrices2x2)d.setMatrix2x2(G,this._matrices2x2[G]);for(const G in this._vectors2Arrays)d.setArray2(G,this._vectors2Arrays[G]);for(const G in this._vectors3Arrays)d.setArray3(G,this._vectors3Arrays[G]);for(const G in this._vectors4Arrays)d.setArray4(G,this._vectors4Arrays[G]);for(const G in this._uniformBuffers)d.setUniformBuffer(G,this._uniformBuffers[G]);for(const G in this._textureSamplers)d.setTextureSampler(G,this._textureSamplers[G]);for(const G in this._storageBuffers)d.setStorageBuffer(G,this._storageBuffers[G]);return d}dispose(b,d,P){if(d){let b;for(b in this._textures)this._textures[b].dispose();for(b in this._textureArrays){const d=this._textureArrays[b];for(let b=0;b<d.length;b++)d[b].dispose()}}this._textures={},super.dispose(b,d,P)}serialize(){const b=G.c.Serialize(this);let d;for(d in b.customType="BABYLON.ShaderMaterial",b.uniqueId=this.uniqueId,b.options=this._options,b.shaderPath=this._shaderPath,b.storeEffectOnSubMeshes=this._storeEffectOnSubMeshes,b.stencil=this.stencil.serialize(),b.textures={},this._textures)b.textures[d]=this._textures[d].serialize();for(d in b.textureArrays={},this._textureArrays){b.textureArrays[d]=[];const P=this._textureArrays[d];for(let G=0;G<P.length;G++)b.textureArrays[d].push(P[G].serialize())}for(d in b.ints={},this._ints)b.ints[d]=this._ints[d];for(d in b.uints={},this._uints)b.uints[d]=this._uints[d];for(d in b.floats={},this._floats)b.floats[d]=this._floats[d];for(d in b.floatsArrays={},this._floatsArrays)b.floatsArrays[d]=this._floatsArrays[d];for(d in b.colors3={},this._colors3){const P=this._colors3[d];b.colors3[d]=[P.r,P.g,P.b]}for(d in b.colors3Arrays={},this._colors3Arrays)b.colors3Arrays[d]=this._colors3Arrays[d];for(d in b.colors4={},this._colors4){const P=this._colors4[d];b.colors4[d]=[P.r,P.g,P.b,P.a]}for(d in b.colors4Arrays={},this._colors4Arrays)b.colors4Arrays[d]=this._colors4Arrays[d];for(d in b.vectors2={},this._vectors2){const P=this._vectors2[d];b.vectors2[d]=[P.x,P.y]}for(d in b.vectors3={},this._vectors3){const P=this._vectors3[d];b.vectors3[d]=[P.x,P.y,P.z]}for(d in b.vectors4={},this._vectors4){const P=this._vectors4[d];b.vectors4[d]=[P.x,P.y,P.z,P.w]}for(d in b.quaternions={},this._quaternions)b.quaternions[d]=this._quaternions[d].jd();for(d in b.matrices={},this._matrices)b.matrices[d]=this._matrices[d].jd();for(d in b.matrixArray={},this._matrixArrays)b.matrixArray[d]=this._matrixArrays[d];for(d in b.matrices3x3={},this._matrices3x3)b.matrices3x3[d]=this._matrices3x3[d];for(d in b.matrices2x2={},this._matrices2x2)b.matrices2x2[d]=this._matrices2x2[d];for(d in b.vectors2Arrays={},this._vectors2Arrays)b.vectors2Arrays[d]=this._vectors2Arrays[d];for(d in b.vectors3Arrays={},this._vectors3Arrays)b.vectors3Arrays[d]=this._vectors3Arrays[d];for(d in b.vectors4Arrays={},this._vectors4Arrays)b.vectors4Arrays[d]=this._vectors4Arrays[d];for(d in b.quaternionsArrays={},this._quaternionsArrays)b.quaternionsArrays[d]=this._quaternionsArrays[d];return b}static Parse(b,d,P){const W=G.c.Parse((()=>new r(b.name,d,b.shaderPath,b.options,b.storeEffectOnSubMeshes)),b,d,P);let q;for(q in b.stencil&&W.stencil.parse(b.stencil,d,P),b.textures)W.setTexture(q,C.d.Parse(b.textures[q],d,P));for(q in b.textureArrays){const G=b.textureArrays[q],i=[];for(let b=0;b<G.length;b++)i.push(C.d.Parse(G[b],d,P));W.setTextureArray(q,i)}for(q in b.ints)W.setInt(q,b.ints[q]);for(q in b.uints)W.setUInt(q,b.uints[q]);for(q in b.floats)W.setFloat(q,b.floats[q]);for(q in b.floatsArrays)W.setFloats(q,b.floatsArrays[q]);for(q in b.colors3){const d=b.colors3[q];W.setColor3(q,{r:d[0],g:d[1],b:d[2]})}for(q in b.colors3Arrays){const d=b.colors3Arrays[q].reduce(((b,d,P)=>(P%3===0?b.push([d]):b[b.length-1].push(d),b)),[]).map((b=>({r:b[0],g:b[1],b:b[2]})));W.setColor3Array(q,d)}for(q in b.colors4){const d=b.colors4[q];W.setColor4(q,{r:d[0],g:d[1],b:d[2],a:d[3]})}for(q in b.colors4Arrays){const d=b.colors4Arrays[q].reduce(((b,d,P)=>(P%4===0?b.push([d]):b[b.length-1].push(d),b)),[]).map((b=>({r:b[0],g:b[1],b:b[2],a:b[3]})));W.setColor4Array(q,d)}for(q in b.vectors2){const d=b.vectors2[q];W.setVector2(q,{x:d[0],y:d[1]})}for(q in b.vectors3){const d=b.vectors3[q];W.setVector3(q,{x:d[0],y:d[1],z:d[2]})}for(q in b.vectors4){const d=b.vectors4[q];W.setVector4(q,{x:d[0],y:d[1],z:d[2],w:d[3]})}for(q in b.quaternions)W.setQuaternion(q,i.Quaternion.Od(b.quaternions[q]));for(q in b.matrices)W.setMatrix(q,i.Matrix.Od(b.matrices[q]));for(q in b.matrixArray)W._matrixArrays[q]=new Float32Array(b.matrixArray[q]);for(q in b.matrices3x3)W.setMatrix3x3(q,b.matrices3x3[q]);for(q in b.matrices2x2)W.setMatrix2x2(q,b.matrices2x2[q]);for(q in b.vectors2Arrays)W.setArray2(q,b.vectors2Arrays[q]);for(q in b.vectors3Arrays)W.setArray3(q,b.vectors3Arrays[q]);for(q in b.vectors4Arrays)W.setArray4(q,b.vectors4Arrays[q]);for(q in b.quaternionsArrays)W.setArray4(q,b.quaternionsArrays[q]);return W}static async ParseFromFileAsync(b,d,P){let G=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return await new Promise(((W,i)=>{const q=new x.c;q.addEventListener("readystatechange",(()=>{if(4==q.readyState)if(200==q.status){const d=JSON.parse(q.responseText),i=this.Parse(d,P||s.e.LastCreatedScene,G);b&&(i.name=b),W(i)}else i("Unable to load the ShaderMaterial")})),q.open("GET",d),q.send()}))}static async ParseFromSnippetAsync(b,d){let P=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return await new Promise(((G,W)=>{const i=new x.c;i.addEventListener("readystatechange",(()=>{if(4==i.readyState)if(200==i.status){const W=JSON.parse(JSON.parse(i.responseText).jsonPayload),q=JSON.parse(W.shaderMaterial),C=this.Parse(q,d||s.e.LastCreatedScene,P);C.snippetId=b,G(C)}else W("Unable to load the snippet "+b)})),i.open("GET",this.SnippetUrl+"/"+b.replace(/#/g,"/")),i.send()}))}}r.SnippetUrl="https://snippet.babylonjs.com",r.CreateFromSnippetAsync=r.ParseFromSnippetAsync,(0,J.f)("BABYLON.ShaderMaterial",r)}}]);