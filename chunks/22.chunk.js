"use strict";(self.zy41qorie9=self.zy41qorie9||[]).push([[22],{12700:(Z,l,C)=>{C.r(l),C.d(l,{ShaderMaterial:()=>Y});var B=C(12478),x=C(12704),b=C(12442),K=C(12530),f=C(12423),W=C(12400),J=C(12758),d=C(12288),E=C(12760),G=C(12295),a=C(12804),q=C(12800);const z={effect:null,subMesh:null};class Y extends E.e{constructor(Z,l,C){let B=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(Z,l,!(arguments.length>4&&void 0!==arguments[4])||arguments[4]),this._textures={},this._textureArrays={},this._externalTextures={},this._floats={},this._ints={},this._uints={},this._floatsArrays={},this._colors3={},this._colors3Arrays={},this._colors4={},this._colors4Arrays={},this._vectors2={},this._vectors3={},this._vectors4={},this._quaternions={},this._quaternionsArrays={},this._matrices={},this._matrixArrays={},this._matrices3x3={},this._matrices2x2={},this._vectors2Arrays={},this._vectors3Arrays={},this._vectors4Arrays={},this._uniformBuffers={},this._textureSamplers={},this._storageBuffers={},this._cachedWorldViewMatrix=new b.Matrix,this._cachedWorldViewProjectionMatrix=new b.Matrix,this._multiview=!1,this._materialHelperNeedsPreviousMatrices=!1,this._shaderPath=C,this._options={needAlphaBlending:!1,needAlphaTesting:!1,attributes:["position","normal","uv"],uniforms:["worldViewProjection"],uniformBuffers:[],samplers:[],externalTextures:[],samplerObjects:[],storageBuffers:[],defines:[],useClipPlane:!1,...B}}get shaderPath(){return this._shaderPath}set shaderPath(Z){this._shaderPath=Z}get options(){return this._options}get isMultiview(){return this._multiview}getClassName(){return"ShaderMaterial"}needAlphaBlending(){return this.alpha<1||this._options.needAlphaBlending}needAlphaTesting(){return this._options.needAlphaTesting}_checkUniform(Z){-1===this._options.uniforms.indexOf(Z)&&this._options.uniforms.push(Z)}setTexture(Z,l){return-1===this._options.samplers.indexOf(Z)&&this._options.samplers.push(Z),this._textures[Z]=l,this}removeTexture(Z){delete this._textures[Z]}setTextureArray(Z,l){return-1===this._options.samplers.indexOf(Z)&&this._options.samplers.push(Z),this._checkUniform(Z),this._textureArrays[Z]=l,this}setExternalTexture(Z,l){return-1===this._options.externalTextures.indexOf(Z)&&this._options.externalTextures.push(Z),this._externalTextures[Z]=l,this}setFloat(Z,l){return this._checkUniform(Z),this._floats[Z]=l,this}setInt(Z,l){return this._checkUniform(Z),this._ints[Z]=l,this}setUInt(Z,l){return this._checkUniform(Z),this._uints[Z]=l,this}setFloats(Z,l){return this._checkUniform(Z),this._floatsArrays[Z]=l,this}setColor3(Z,l){return this._checkUniform(Z),this._colors3[Z]=l,this}setColor3Array(Z,l){return this._checkUniform(Z),this._colors3Arrays[Z]=l.reduce(((Z,l)=>(Z.push(l.r,l.g,l.b),Z)),[]),this}setColor4(Z,l){return this._checkUniform(Z),this._colors4[Z]=l,this}setColor4Array(Z,l){return this._checkUniform(Z),this._colors4Arrays[Z]=l.reduce(((Z,l)=>(Z.push(l.r,l.g,l.b,l.a),Z)),[]),this}setVector2(Z,l){return this._checkUniform(Z),this._vectors2[Z]=l,this}setVector3(Z,l){return this._checkUniform(Z),this._vectors3[Z]=l,this}setVector4(Z,l){return this._checkUniform(Z),this._vectors4[Z]=l,this}setQuaternion(Z,l){return this._checkUniform(Z),this._quaternions[Z]=l,this}setQuaternionArray(Z,l){return this._checkUniform(Z),this._quaternionsArrays[Z]=l.reduce(((Z,l)=>(l.toArray(Z,Z.length),Z)),[]),this}setMatrix(Z,l){return this._checkUniform(Z),this._matrices[Z]=l,this}setMatrices(Z,l){this._checkUniform(Z);const C=new Float32Array(16*l.length);for(let B=0;B<l.length;B++){l[B].copyToArray(C,16*B)}return this._matrixArrays[Z]=C,this}setMatrix3x3(Z,l){return this._checkUniform(Z),this._matrices3x3[Z]=l,this}setMatrix2x2(Z,l){return this._checkUniform(Z),this._matrices2x2[Z]=l,this}setArray2(Z,l){return this._checkUniform(Z),this._vectors2Arrays[Z]=l,this}setArray3(Z,l){return this._checkUniform(Z),this._vectors3Arrays[Z]=l,this}setArray4(Z,l){return this._checkUniform(Z),this._vectors4Arrays[Z]=l,this}setUniformBuffer(Z,l){return-1===this._options.uniformBuffers.indexOf(Z)&&this._options.uniformBuffers.push(Z),this._uniformBuffers[Z]=l,this}setTextureSampler(Z,l){return-1===this._options.samplerObjects.indexOf(Z)&&this._options.samplerObjects.push(Z),this._textureSamplers[Z]=l,this}setStorageBuffer(Z,l){return-1===this._options.storageBuffers.indexOf(Z)&&this._options.storageBuffers.push(Z),this._storageBuffers[Z]=l,this}setDefine(Z,l){const C=Z.trimEnd()+" ",B=this.options.defines.findIndex((l=>l===Z||l.startsWith(C)));return B>=0&&this.options.defines.splice(B,1),("boolean"!==typeof l||l)&&this.options.defines.push(C+l),this}isReadyForSubMesh(Z,l,C){return this.isReady(Z,C,l)}isReady(Z,l,C){var B;const b=C&&this._storeEffectOnSubMeshes;if(this.isFrozen){const Z=b?C._drawWrapper:this._drawWrapper;if(Z.effect&&Z._wasPreviouslyReady&&Z._wasPreviouslyUsingInstances===l)return!0}const f=this.cZ(),W=f.getEngine(),d=[],E=[];let G=null,Y=this._shaderPath,P=this._options.uniforms,S=this._options.uniformBuffers,i=this._options.samplers;W.getCaps().multiview&&f.activeCamera&&f.activeCamera.outputRenderTarget&&f.activeCamera.outputRenderTarget.getViewCount()>1&&(this._multiview=!0,d.push("#define MULTIVIEW"),-1!==P.indexOf("viewProjection")&&-1===P.indexOf("viewProjectionR")&&P.push("viewProjectionR"));for(let x=0;x<this._options.defines.length;x++){const Z=0===this._options.defines[x].indexOf("#define")?this._options.defines[x]:`#define ${this._options.defines[x]}`;d.push(Z)}for(let x=0;x<this._options.attributes.length;x++)E.push(this._options.attributes[x]);if(Z&&Z.isVerticesDataPresent(K.h.ColorKind)&&(-1===E.indexOf(K.h.ColorKind)&&E.push(K.h.ColorKind),d.push("#define VERTEXCOLOR")),l&&(d.push("#define INSTANCES"),(0,q.hb)(E,this._materialHelperNeedsPreviousMatrices),null!==Z&&void 0!==Z&&Z.hasThinInstances&&(d.push("#define THIN_INSTANCES"),Z&&Z.isVerticesDataPresent(K.h.ColorInstanceKind)&&(E.push(K.h.ColorInstanceKind),d.push("#define INSTANCESCOLOR")))),Z&&Z.useBones&&Z.computeBonesUsingShaders&&Z.skeleton){E.push(K.h.MatricesIndicesKind),E.push(K.h.MatricesWeightsKind),Z.numBoneInfluencers>4&&(E.push(K.h.MatricesIndicesExtraKind),E.push(K.h.MatricesWeightsExtraKind));const l=Z.skeleton;d.push("#define NUM_BONE_INFLUENCERS "+Z.numBoneInfluencers),G=new J.d,G.addCPUSkinningFallback(0,Z),l.isUsingTextureForMatrices?(d.push("#define BONETEXTURE"),-1===P.indexOf("boneTextureWidth")&&P.push("boneTextureWidth"),-1===this._options.samplers.indexOf("boneSampler")&&this._options.samplers.push("boneSampler")):(d.push("#define BonesPerMesh "+(l.bones.length+1)),-1===P.indexOf("mBones")&&P.push("mBones"))}else d.push("#define NUM_BONE_INFLUENCERS 0");let s=0;const F=Z?Z.morphTargetManager:null;if(F){const l=-1!==d.indexOf("#define UV1"),C=-1!==d.indexOf("#define UV2"),B=-1!==d.indexOf("#define TANGENT"),x=-1!==d.indexOf("#define NORMAL"),b=-1!==d.indexOf("#define VERTEXCOLOR");s=(0,q.K)(F,d,E,Z,!0,x,B,l,C,b),F.isUsingTextureForTargets&&(-1===P.indexOf("morphTargetTextureIndices")&&P.push("morphTargetTextureIndices"),-1===this._options.samplers.indexOf("morphTargets")&&this._options.samplers.push("morphTargets")),s>0&&(P=P.slice(),P.push("morphTargetInfluences"),P.push("morphTargetCount"),P.push("morphTargetTextureInfo"),P.push("morphTargetTextureIndices"))}else d.push("#define NUM_MORPH_INFLUENCERS 0");if(Z){const l=Z.bakedVertexAnimationManager;l&&l.isEnabled&&(d.push("#define BAKED_VERTEX_ANIMATION_TEXTURE"),-1===P.indexOf("bakedVertexAnimationSettings")&&P.push("bakedVertexAnimationSettings"),-1===P.indexOf("bakedVertexAnimationTextureSizeInverted")&&P.push("bakedVertexAnimationTextureSizeInverted"),-1===P.indexOf("bakedVertexAnimationTime")&&P.push("bakedVertexAnimationTime"),-1===this._options.samplers.indexOf("bakedVertexAnimationTexture")&&this._options.samplers.push("bakedVertexAnimationTexture")),(0,q.y)(E,Z,d)}for(const x in this._textures)if(!this._textures[x].isReady())return!1;Z&&this.needAlphaTestingForMesh(Z)&&d.push("#define ALPHATEST"),!1!==this._options.useClipPlane&&((0,a.b)(P),(0,a.h)(this,f,d)),f.fogEnabled&&null!==Z&&void 0!==Z&&Z.applyFog&&f.fogMode!==x.e.FOGMODE_NONE&&(d.push("#define FOG"),-1===P.indexOf("view")&&P.push("view"),-1===P.indexOf("vFogInfos")&&P.push("vFogInfos"),-1===P.indexOf("vFogColor")&&P.push("vFogColor")),this._useLogarithmicDepth&&(d.push("#define LOGARITHMICDEPTH"),-1===P.indexOf("logarithmicDepthConstant")&&P.push("logarithmicDepthConstant")),this.customShaderNameResolve&&(P=P.slice(),S=S.slice(),i=i.slice(),Y=this.customShaderNameResolve(this.name,P,S,i,d,E));const n=b?C._getDrawWrapper(void 0,!0):this._drawWrapper,c=(null===n||void 0===n?void 0:n.effect)??null,U=(null===n||void 0===n?void 0:n.defines)??null,t=d.join("\n");let r=c;return U!==t&&(r=W.createEffect(Y,{attributes:E,uniformsNames:P,uniformBuffersNames:S,samplers:i,defines:t,fallbacks:G,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousMorphTargets:s},shaderLanguage:this._options.shaderLanguage,extraInitializationsAsync:this._options.extraInitializationsAsync},W),b?C.setEffect(r,t,this._materialContext):n&&n.setEffect(r,t),this._onEffectCreatedObservable&&(z.effect=r,z.subMesh=C??(null===Z||void 0===Z?void 0:Z.zb[0])??null,this._onEffectCreatedObservable.notifyObservers(z))),n._wasPreviouslyUsingInstances=!!l,!(null===(B=r)||void 0===B||!B.isReady())&&(c!==r&&f.resetCachedMaterial(),n._wasPreviouslyReady=!0,!0)}bindOnlyWorldMatrix(Z,l){const C=l??this.getEffect();if(!C)return;const B=this._options.uniforms;-1!==B.indexOf("world")&&C.setMatrix("world",Z);const x=this.cZ();-1!==B.indexOf("worldView")&&(Z.multiplyToRef(x.getViewMatrix(),this._cachedWorldViewMatrix),C.setMatrix("worldView",this._cachedWorldViewMatrix)),-1!==B.indexOf("worldViewProjection")&&(Z.multiplyToRef(x.getTransformMatrix(),this._cachedWorldViewProjectionMatrix),C.setMatrix("worldViewProjection",this._cachedWorldViewProjectionMatrix)),-1!==B.indexOf("view")&&C.setMatrix("view",x.getViewMatrix())}bindForSubMesh(Z,l,C){var B;this.bind(Z,l,null===(B=C._drawWrapperOverride)||void 0===B?void 0:B.effect,C)}bind(Z,l,C,B){const x=B&&this._storeEffectOnSubMeshes,b=C??(x?B.effect:this.getEffect());if(!b)return;const K=this.cZ();this._activeEffect=b,this.bindOnlyWorldMatrix(Z,C);const f=this._options.uniformBuffers;let W=!1;if(b&&f&&f.length>0&&K.getEngine().supportsUniformBuffers)for(let E=0;E<f.length;++E){switch(f[E]){case"Mesh":l&&(l.getMeshUniformBuffer().bindToEffect(b,"Mesh"),l.transferToEffect(Z));break;case"Scene":(0,q.q)(b,K.getSceneUniformBuffer()),K.finalizeSceneUbo(),W=!0}}const J=l&&x?this._mustRebind(K,b,B,l.visibility):K.getCachedMaterial()!==this;if(b&&J){let Z;for(Z in W||-1===this._options.uniforms.indexOf("view")||b.setMatrix("view",K.getViewMatrix()),W||-1===this._options.uniforms.indexOf("projection")||b.setMatrix("projection",K.getProjectionMatrix()),W||-1===this._options.uniforms.indexOf("viewProjection")||(b.setMatrix("viewProjection",K.getTransformMatrix()),this._multiview&&b.setMatrix("viewProjectionR",K._transformMatrixR)),K.activeCamera&&-1!==this._options.uniforms.indexOf("cameraPosition")&&b.setVector3("cameraPosition",K.activeCamera.globalPosition),(0,q.b)(l,b),(0,a.d)(b,this,K),this._useLogarithmicDepth&&(0,q.j)(x?B.materialDefines:b.defines,b,K),l&&(0,q.f)(K,l,b),this._textures)b.setTexture(Z,this._textures[Z]);for(Z in this._textureArrays)b.setTextureArray(Z,this._textureArrays[Z]);for(Z in this._ints)b.setInt(Z,this._ints[Z]);for(Z in this._uints)b.setUInt(Z,this._uints[Z]);for(Z in this._floats)b.setFloat(Z,this._floats[Z]);for(Z in this._floatsArrays)b.setArray(Z,this._floatsArrays[Z]);for(Z in this._colors3)b.setColor3(Z,this._colors3[Z]);for(Z in this._colors3Arrays)b.setArray3(Z,this._colors3Arrays[Z]);for(Z in this._colors4){const l=this._colors4[Z];b.setFloat4(Z,l.r,l.g,l.b,l.a)}for(Z in this._colors4Arrays)b.setArray4(Z,this._colors4Arrays[Z]);for(Z in this._vectors2)b.setVector2(Z,this._vectors2[Z]);for(Z in this._vectors3)b.setVector3(Z,this._vectors3[Z]);for(Z in this._vectors4)b.setVector4(Z,this._vectors4[Z]);for(Z in this._quaternions)b.setQuaternion(Z,this._quaternions[Z]);for(Z in this._matrices)b.setMatrix(Z,this._matrices[Z]);for(Z in this._matrixArrays)b.setMatrices(Z,this._matrixArrays[Z]);for(Z in this._matrices3x3)b.setMatrix3x3(Z,this._matrices3x3[Z]);for(Z in this._matrices2x2)b.setMatrix2x2(Z,this._matrices2x2[Z]);for(Z in this._vectors2Arrays)b.setArray2(Z,this._vectors2Arrays[Z]);for(Z in this._vectors3Arrays)b.setArray3(Z,this._vectors3Arrays[Z]);for(Z in this._vectors4Arrays)b.setArray4(Z,this._vectors4Arrays[Z]);for(Z in this._quaternionsArrays)b.setArray4(Z,this._quaternionsArrays[Z]);for(Z in this._uniformBuffers){const l=this._uniformBuffers[Z].getBuffer();l&&b.bindUniformBuffer(l,Z)}const C=K.getEngine(),f=C.setExternalTexture;if(f)for(Z in this._externalTextures)f.call(C,Z,this._externalTextures[Z]);const J=C.setTextureSampler;if(J)for(Z in this._textureSamplers)J.call(C,Z,this._textureSamplers[Z]);const d=C.setStorageBuffer;if(d)for(Z in this._storageBuffers)d.call(C,Z,this._storageBuffers[Z])}if(b&&l&&(J||!this.isFrozen)){(0,q.n)(l,b),l.morphTargetManager&&l.morphTargetManager.isUsingTextureForTargets&&l.morphTargetManager._bind(b);const Z=l.bakedVertexAnimationManager;if(Z&&Z.isEnabled){var d;const Z=x?B._drawWrapper:this._drawWrapper;null===(d=l.bakedVertexAnimationManager)||void 0===d||d.bind(b,!!Z._wasPreviouslyUsingInstances)}}this._afterBind(l,b,B)}getActiveTextures(){const Z=super.getActiveTextures();for(const l in this._textures)Z.push(this._textures[l]);for(const l in this._textureArrays){const C=this._textureArrays[l];for(let l=0;l<C.length;l++)Z.push(C[l])}return Z}hasTexture(Z){if(super.hasTexture(Z))return!0;for(const l in this._textures)if(this._textures[l]===Z)return!0;for(const l in this._textureArrays){const C=this._textureArrays[l];for(let l=0;l<C.length;l++)if(C[l]===Z)return!0}return!1}clone(Z){const l=B.b.Clone((()=>new Y(Z,this.cZ(),this._shaderPath,this._options,this._storeEffectOnSubMeshes)),this);l.name=Z,l.id=Z,"object"===typeof l._shaderPath&&(l._shaderPath={...l._shaderPath}),this._options={...this._options};const C=Object.keys(this._options);for(const B of C){const Z=this._options[B];Array.isArray(Z)&&(this._options[B]=Z.slice(0))}this.bb.copyTo(l.bb);for(const B in this._textures)l.setTexture(B,this._textures[B]);for(const B in this._textureArrays)l.setTextureArray(B,this._textureArrays[B]);for(const B in this._externalTextures)l.setExternalTexture(B,this._externalTextures[B]);for(const B in this._ints)l.setInt(B,this._ints[B]);for(const B in this._uints)l.setUInt(B,this._uints[B]);for(const B in this._floats)l.setFloat(B,this._floats[B]);for(const B in this._floatsArrays)l.setFloats(B,this._floatsArrays[B]);for(const B in this._colors3)l.setColor3(B,this._colors3[B]);for(const B in this._colors3Arrays)l._colors3Arrays[B]=this._colors3Arrays[B];for(const B in this._colors4)l.setColor4(B,this._colors4[B]);for(const B in this._colors4Arrays)l._colors4Arrays[B]=this._colors4Arrays[B];for(const B in this._vectors2)l.setVector2(B,this._vectors2[B]);for(const B in this._vectors3)l.setVector3(B,this._vectors3[B]);for(const B in this._vectors4)l.setVector4(B,this._vectors4[B]);for(const B in this._quaternions)l.setQuaternion(B,this._quaternions[B]);for(const B in this._quaternionsArrays)l._quaternionsArrays[B]=this._quaternionsArrays[B];for(const B in this._matrices)l.setMatrix(B,this._matrices[B]);for(const B in this._matrixArrays)l._matrixArrays[B]=this._matrixArrays[B].slice();for(const B in this._matrices3x3)l.setMatrix3x3(B,this._matrices3x3[B]);for(const B in this._matrices2x2)l.setMatrix2x2(B,this._matrices2x2[B]);for(const B in this._vectors2Arrays)l.setArray2(B,this._vectors2Arrays[B]);for(const B in this._vectors3Arrays)l.setArray3(B,this._vectors3Arrays[B]);for(const B in this._vectors4Arrays)l.setArray4(B,this._vectors4Arrays[B]);for(const B in this._uniformBuffers)l.setUniformBuffer(B,this._uniformBuffers[B]);for(const B in this._textureSamplers)l.setTextureSampler(B,this._textureSamplers[B]);for(const B in this._storageBuffers)l.setStorageBuffer(B,this._storageBuffers[B]);return l}dispose(Z,l,C){if(l){let Z;for(Z in this._textures)this._textures[Z].dispose();for(Z in this._textureArrays){const l=this._textureArrays[Z];for(let Z=0;Z<l.length;Z++)l[Z].dispose()}}this._textures={},super.dispose(Z,l,C)}serialize(){const Z=B.b.Serialize(this);let l;for(l in Z.customType="BABYLON.ShaderMaterial",Z.uniqueId=this.uniqueId,Z.options=this._options,Z.shaderPath=this._shaderPath,Z.storeEffectOnSubMeshes=this._storeEffectOnSubMeshes,Z.bb=this.bb.serialize(),Z.textures={},this._textures)Z.textures[l]=this._textures[l].serialize();for(l in Z.textureArrays={},this._textureArrays){Z.textureArrays[l]=[];const C=this._textureArrays[l];for(let B=0;B<C.length;B++)Z.textureArrays[l].push(C[B].serialize())}for(l in Z.ints={},this._ints)Z.ints[l]=this._ints[l];for(l in Z.uints={},this._uints)Z.uints[l]=this._uints[l];for(l in Z.floats={},this._floats)Z.floats[l]=this._floats[l];for(l in Z.floatsArrays={},this._floatsArrays)Z.floatsArrays[l]=this._floatsArrays[l];for(l in Z.colors3={},this._colors3){const C=this._colors3[l];Z.colors3[l]=[C.r,C.g,C.b]}for(l in Z.colors3Arrays={},this._colors3Arrays)Z.colors3Arrays[l]=this._colors3Arrays[l];for(l in Z.colors4={},this._colors4){const C=this._colors4[l];Z.colors4[l]=[C.r,C.g,C.b,C.a]}for(l in Z.colors4Arrays={},this._colors4Arrays)Z.colors4Arrays[l]=this._colors4Arrays[l];for(l in Z.vectors2={},this._vectors2){const C=this._vectors2[l];Z.vectors2[l]=[C.x,C.y]}for(l in Z.vectors3={},this._vectors3){const C=this._vectors3[l];Z.vectors3[l]=[C.x,C.y,C.z]}for(l in Z.vectors4={},this._vectors4){const C=this._vectors4[l];Z.vectors4[l]=[C.x,C.y,C.z,C.w]}for(l in Z.quaternions={},this._quaternions)Z.quaternions[l]=this._quaternions[l].Yb();for(l in Z.matrices={},this._matrices)Z.matrices[l]=this._matrices[l].Yb();for(l in Z.matrixArray={},this._matrixArrays)Z.matrixArray[l]=this._matrixArrays[l];for(l in Z.matrices3x3={},this._matrices3x3)Z.matrices3x3[l]=this._matrices3x3[l];for(l in Z.matrices2x2={},this._matrices2x2)Z.matrices2x2[l]=this._matrices2x2[l];for(l in Z.vectors2Arrays={},this._vectors2Arrays)Z.vectors2Arrays[l]=this._vectors2Arrays[l];for(l in Z.vectors3Arrays={},this._vectors3Arrays)Z.vectors3Arrays[l]=this._vectors3Arrays[l];for(l in Z.vectors4Arrays={},this._vectors4Arrays)Z.vectors4Arrays[l]=this._vectors4Arrays[l];for(l in Z.quaternionsArrays={},this._quaternionsArrays)Z.quaternionsArrays[l]=this._quaternionsArrays[l];return Z}static Parse(Z,l,C){const x=B.b.Parse((()=>new Y(Z.name,l,Z.shaderPath,Z.options,Z.storeEffectOnSubMeshes)),Z,l,C);let K;for(K in Z.bb&&x.bb.parse(Z.bb,l,C),Z.textures)x.setTexture(K,f.c.Parse(Z.textures[K],l,C));for(K in Z.textureArrays){const B=Z.textureArrays[K],b=[];for(let Z=0;Z<B.length;Z++)b.push(f.c.Parse(B[Z],l,C));x.setTextureArray(K,b)}for(K in Z.ints)x.setInt(K,Z.ints[K]);for(K in Z.uints)x.setUInt(K,Z.uints[K]);for(K in Z.floats)x.setFloat(K,Z.floats[K]);for(K in Z.floatsArrays)x.setFloats(K,Z.floatsArrays[K]);for(K in Z.colors3){const l=Z.colors3[K];x.setColor3(K,{r:l[0],g:l[1],b:l[2]})}for(K in Z.colors3Arrays){const l=Z.colors3Arrays[K].reduce(((Z,l,C)=>(C%3===0?Z.push([l]):Z[Z.length-1].push(l),Z)),[]).map((Z=>({r:Z[0],g:Z[1],b:Z[2]})));x.setColor3Array(K,l)}for(K in Z.colors4){const l=Z.colors4[K];x.setColor4(K,{r:l[0],g:l[1],b:l[2],a:l[3]})}for(K in Z.colors4Arrays){const l=Z.colors4Arrays[K].reduce(((Z,l,C)=>(C%4===0?Z.push([l]):Z[Z.length-1].push(l),Z)),[]).map((Z=>({r:Z[0],g:Z[1],b:Z[2],a:Z[3]})));x.setColor4Array(K,l)}for(K in Z.vectors2){const l=Z.vectors2[K];x.setVector2(K,{x:l[0],y:l[1]})}for(K in Z.vectors3){const l=Z.vectors3[K];x.setVector3(K,{x:l[0],y:l[1],z:l[2]})}for(K in Z.vectors4){const l=Z.vectors4[K];x.setVector4(K,{x:l[0],y:l[1],z:l[2],w:l[3]})}for(K in Z.quaternions)x.setQuaternion(K,b.Quaternion.il(Z.quaternions[K]));for(K in Z.matrices)x.setMatrix(K,b.Matrix.il(Z.matrices[K]));for(K in Z.matrixArray)x._matrixArrays[K]=new Float32Array(Z.matrixArray[K]);for(K in Z.matrices3x3)x.setMatrix3x3(K,Z.matrices3x3[K]);for(K in Z.matrices2x2)x.setMatrix2x2(K,Z.matrices2x2[K]);for(K in Z.vectors2Arrays)x.setArray2(K,Z.vectors2Arrays[K]);for(K in Z.vectors3Arrays)x.setArray3(K,Z.vectors3Arrays[K]);for(K in Z.vectors4Arrays)x.setArray4(K,Z.vectors4Arrays[K]);for(K in Z.quaternionsArrays)x.setArray4(K,Z.quaternionsArrays[K]);return x}static async ParseFromFileAsync(Z,l,C){let B=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return await new Promise(((x,b)=>{const K=new d.c;K.addEventListener("readystatechange",(()=>{if(4==K.readyState)if(200==K.status){const l=JSON.parse(K.responseText),b=this.Parse(l,C||G.b.LastCreatedScene,B);Z&&(b.name=Z),x(b)}else b("Unable to load the ShaderMaterial")})),K.open("GET",l),K.send()}))}static async ParseFromSnippetAsync(Z,l){let C=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return await new Promise(((B,x)=>{const b=new d.c;b.addEventListener("readystatechange",(()=>{if(4==b.readyState)if(200==b.status){const x=JSON.parse(JSON.parse(b.responseText).jsonPayload),K=JSON.parse(x.shaderMaterial),f=this.Parse(K,l||G.b.LastCreatedScene,C);f.snippetId=Z,B(f)}else x("Unable to load the snippet "+Z)})),b.open("GET",this.SnippetUrl+"/"+Z.replace(/#/g,"/")),b.send()}))}}Y.SnippetUrl="https://snippet.babylonjs.com",Y.CreateFromSnippetAsync=Y.ParseFromSnippetAsync,(0,W.c)("BABYLON.ShaderMaterial",Y)}}]);