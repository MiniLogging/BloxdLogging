"use strict";(self.nyfa010khv=self.nyfa010khv||[]).push([[22],{12350:(L,r,p)=>{p.r(r),p.d(r,{ShaderMaterial:()=>c});var J=p(12162),i=p(12355),n=p(12136),j=p(12208),z=p(12111),G=p(12087),C=p(12434),t=p(12004),E=p(12438),x=p(12009),w=p(12500),g=p(12493);const b={effect:null,subMesh:null};class c extends E.c{constructor(L,r,p){let J=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(L,r,!(arguments.length>4&&void 0!==arguments[4])||arguments[4]),this._textures={},this._textureArrays={},this._externalTextures={},this._floats={},this._ints={},this._uints={},this._floatsArrays={},this._colors3={},this._colors3Arrays={},this._colors4={},this._colors4Arrays={},this._vectors2={},this._vectors3={},this._vectors4={},this._quaternions={},this._quaternionsArrays={},this._matrices={},this._matrixArrays={},this._matrices3x3={},this._matrices2x2={},this._vectors2Arrays={},this._vectors3Arrays={},this._vectors4Arrays={},this._uniformBuffers={},this._textureSamplers={},this._storageBuffers={},this._cachedWorldViewMatrix=new n.Matrix,this._cachedWorldViewProjectionMatrix=new n.Matrix,this._multiview=!1,this._materialHelperNeedsPreviousMatrices=!1,this._shaderPath=p,this._options={needAlphaBlending:!1,needAlphaTesting:!1,attributes:["position","normal","uv"],uniforms:["worldViewProjection"],uniformBuffers:[],samplers:[],externalTextures:[],samplerObjects:[],storageBuffers:[],defines:[],useClipPlane:!1,...J}}get shaderPath(){return this._shaderPath}set shaderPath(L){this._shaderPath=L}get options(){return this._options}get isMultiview(){return this._multiview}getClassName(){return"ShaderMaterial"}needAlphaBlending(){return this.alpha<1||this._options.needAlphaBlending}needAlphaTesting(){return this._options.needAlphaTesting}_checkUniform(L){-1===this._options.uniforms.indexOf(L)&&this._options.uniforms.push(L)}setTexture(L,r){return-1===this._options.samplers.indexOf(L)&&this._options.samplers.push(L),this._textures[L]=r,this}removeTexture(L){delete this._textures[L]}setTextureArray(L,r){return-1===this._options.samplers.indexOf(L)&&this._options.samplers.push(L),this._checkUniform(L),this._textureArrays[L]=r,this}setExternalTexture(L,r){return-1===this._options.externalTextures.indexOf(L)&&this._options.externalTextures.push(L),this._externalTextures[L]=r,this}setFloat(L,r){return this._checkUniform(L),this._floats[L]=r,this}setInt(L,r){return this._checkUniform(L),this._ints[L]=r,this}setUInt(L,r){return this._checkUniform(L),this._uints[L]=r,this}setFloats(L,r){return this._checkUniform(L),this._floatsArrays[L]=r,this}setColor3(L,r){return this._checkUniform(L),this._colors3[L]=r,this}setColor3Array(L,r){return this._checkUniform(L),this._colors3Arrays[L]=r.reduce(((L,r)=>(L.push(r.r,r.g,r.b),L)),[]),this}setColor4(L,r){return this._checkUniform(L),this._colors4[L]=r,this}setColor4Array(L,r){return this._checkUniform(L),this._colors4Arrays[L]=r.reduce(((L,r)=>(L.push(r.r,r.g,r.b,r.a),L)),[]),this}setVector2(L,r){return this._checkUniform(L),this._vectors2[L]=r,this}setVector3(L,r){return this._checkUniform(L),this._vectors3[L]=r,this}setVector4(L,r){return this._checkUniform(L),this._vectors4[L]=r,this}setQuaternion(L,r){return this._checkUniform(L),this._quaternions[L]=r,this}setQuaternionArray(L,r){return this._checkUniform(L),this._quaternionsArrays[L]=r.reduce(((L,r)=>(r.toArray(L,L.length),L)),[]),this}setMatrix(L,r){return this._checkUniform(L),this._matrices[L]=r,this}setMatrices(L,r){this._checkUniform(L);const p=new Float32Array(16*r.length);for(let J=0;J<r.length;J++){r[J].copyToArray(p,16*J)}return this._matrixArrays[L]=p,this}setMatrix3x3(L,r){return this._checkUniform(L),this._matrices3x3[L]=r,this}setMatrix2x2(L,r){return this._checkUniform(L),this._matrices2x2[L]=r,this}setArray2(L,r){return this._checkUniform(L),this._vectors2Arrays[L]=r,this}setArray3(L,r){return this._checkUniform(L),this._vectors3Arrays[L]=r,this}setArray4(L,r){return this._checkUniform(L),this._vectors4Arrays[L]=r,this}setUniformBuffer(L,r){return-1===this._options.uniformBuffers.indexOf(L)&&this._options.uniformBuffers.push(L),this._uniformBuffers[L]=r,this}setTextureSampler(L,r){return-1===this._options.samplerObjects.indexOf(L)&&this._options.samplerObjects.push(L),this._textureSamplers[L]=r,this}setStorageBuffer(L,r){return-1===this._options.storageBuffers.indexOf(L)&&this._options.storageBuffers.push(L),this._storageBuffers[L]=r,this}setDefine(L,r){const p=L.trimEnd()+" ",J=this.options.defines.findIndex((r=>r===L||r.startsWith(p)));return J>=0&&this.options.defines.splice(J,1),("boolean"!==typeof r||r)&&this.options.defines.push(p+r),this}isReadyForSubMesh(L,r,p){return this.isReady(L,p,r)}isReady(L,r,p){var J;const n=p&&this._storeEffectOnSubMeshes;if(this.isFrozen){const L=n?p._drawWrapper:this._drawWrapper;if(L.effect&&L._wasPreviouslyReady&&L._wasPreviouslyUsingInstances===r)return!0}const z=this.FL(),G=z.getEngine(),t=[],E=[];let x=null,c=this._shaderPath,P=this._options.uniforms,O=this._options.uniformBuffers,h=this._options.samplers;G.getCaps().multiview&&z.activeCamera&&z.activeCamera.outputRenderTarget&&z.activeCamera.outputRenderTarget.getViewCount()>1&&(this._multiview=!0,t.push("#define MULTIVIEW"),-1!==P.indexOf("viewProjection")&&-1===P.indexOf("viewProjectionR")&&P.push("viewProjectionR"));for(let i=0;i<this._options.defines.length;i++){const L=0===this._options.defines[i].indexOf("#define")?this._options.defines[i]:`#define ${this._options.defines[i]}`;t.push(L)}for(let i=0;i<this._options.attributes.length;i++)E.push(this._options.attributes[i]);if(L&&L.isVerticesDataPresent(j.e.ColorKind)&&(-1===E.indexOf(j.e.ColorKind)&&E.push(j.e.ColorKind),t.push("#define VERTEXCOLOR")),r&&(t.push("#define INSTANCES"),(0,g.fb)(E,this._materialHelperNeedsPreviousMatrices),null!==L&&void 0!==L&&L.hasThinInstances&&(t.push("#define THIN_INSTANCES"),L&&L.isVerticesDataPresent(j.e.ColorInstanceKind)&&(E.push(j.e.ColorInstanceKind),t.push("#define INSTANCESCOLOR")))),L&&L.useBones&&L.computeBonesUsingShaders&&L.skeleton){E.push(j.e.MatricesIndicesKind),E.push(j.e.MatricesWeightsKind),L.numBoneInfluencers>4&&(E.push(j.e.MatricesIndicesExtraKind),E.push(j.e.MatricesWeightsExtraKind));const r=L.skeleton;t.push("#define NUM_BONE_INFLUENCERS "+L.numBoneInfluencers),x=new C.e,x.addCPUSkinningFallback(0,L),r.isUsingTextureForMatrices?(t.push("#define BONETEXTURE"),-1===P.indexOf("boneTextureWidth")&&P.push("boneTextureWidth"),-1===this._options.samplers.indexOf("boneSampler")&&this._options.samplers.push("boneSampler")):(t.push("#define BonesPerMesh "+(r.bones.length+1)),-1===P.indexOf("mBones")&&P.push("mBones"))}else t.push("#define NUM_BONE_INFLUENCERS 0");let U=0;const W=L?L.morphTargetManager:null;if(W){const r=-1!==t.indexOf("#define UV1"),p=-1!==t.indexOf("#define UV2"),J=-1!==t.indexOf("#define TANGENT"),i=-1!==t.indexOf("#define NORMAL"),n=-1!==t.indexOf("#define VERTEXCOLOR");U=(0,g.L)(W,t,E,L,!0,i,J,r,p,n),W.isUsingTextureForTargets&&(-1===P.indexOf("morphTargetTextureIndices")&&P.push("morphTargetTextureIndices"),-1===this._options.samplers.indexOf("morphTargets")&&this._options.samplers.push("morphTargets")),U>0&&(P=P.slice(),P.push("morphTargetInfluences"),P.push("morphTargetCount"),P.push("morphTargetTextureInfo"),P.push("morphTargetTextureIndices"))}else t.push("#define NUM_MORPH_INFLUENCERS 0");if(L){const r=L.bakedVertexAnimationManager;r&&r.isEnabled&&(t.push("#define BAKED_VERTEX_ANIMATION_TEXTURE"),-1===P.indexOf("bakedVertexAnimationSettings")&&P.push("bakedVertexAnimationSettings"),-1===P.indexOf("bakedVertexAnimationTextureSizeInverted")&&P.push("bakedVertexAnimationTextureSizeInverted"),-1===P.indexOf("bakedVertexAnimationTime")&&P.push("bakedVertexAnimationTime"),-1===this._options.samplers.indexOf("bakedVertexAnimationTexture")&&this._options.samplers.push("bakedVertexAnimationTexture")),(0,g.A)(E,L,t)}for(const i in this._textures)if(!this._textures[i].isReady())return!1;L&&this.needAlphaTestingForMesh(L)&&t.push("#define ALPHATEST"),!1!==this._options.useClipPlane&&((0,w.e)(P),(0,w.m)(this,z,t)),z.fogEnabled&&null!==L&&void 0!==L&&L.applyFog&&z.fogMode!==i.b.FOGMODE_NONE&&(t.push("#define FOG"),-1===P.indexOf("view")&&P.push("view"),-1===P.indexOf("vFogInfos")&&P.push("vFogInfos"),-1===P.indexOf("vFogColor")&&P.push("vFogColor")),this._useLogarithmicDepth&&(t.push("#define LOGARITHMICDEPTH"),-1===P.indexOf("logarithmicDepthConstant")&&P.push("logarithmicDepthConstant")),this.customShaderNameResolve&&(P=P.slice(),O=O.slice(),h=h.slice(),c=this.customShaderNameResolve(this.name,P,O,h,t,E));const B=n?p._getDrawWrapper(void 0,!0):this._drawWrapper,F=(null===B||void 0===B?void 0:B.effect)??null,Q=(null===B||void 0===B?void 0:B.defines)??null,e=t.join("\n");let v=F;return Q!==e&&(v=G.createEffect(c,{attributes:E,uniformsNames:P,uniformBuffersNames:O,samplers:h,defines:e,fallbacks:x,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousMorphTargets:U},shaderLanguage:this._options.shaderLanguage,extraInitializationsAsync:this._options.extraInitializationsAsync},G),n?p.setEffect(v,e,this._materialContext):B&&B.setEffect(v,e),this._onEffectCreatedObservable&&(b.effect=v,b.subMesh=p??(null===L||void 0===L?void 0:L.ln[0])??null,this._onEffectCreatedObservable.notifyObservers(b))),B._wasPreviouslyUsingInstances=!!r,!(null===(J=v)||void 0===J||!J.isReady())&&(F!==v&&z.resetCachedMaterial(),B._wasPreviouslyReady=!0,!0)}bindOnlyWorldMatrix(L,r){const p=r??this.getEffect();if(!p)return;const J=this._options.uniforms;-1!==J.indexOf("world")&&p.setMatrix("world",L);const i=this.FL();-1!==J.indexOf("worldView")&&(L.multiplyToRef(i.getViewMatrix(),this._cachedWorldViewMatrix),p.setMatrix("worldView",this._cachedWorldViewMatrix)),-1!==J.indexOf("worldViewProjection")&&(L.multiplyToRef(i.getTransformMatrix(),this._cachedWorldViewProjectionMatrix),p.setMatrix("worldViewProjection",this._cachedWorldViewProjectionMatrix)),-1!==J.indexOf("view")&&p.setMatrix("view",i.getViewMatrix())}bindForSubMesh(L,r,p){var J;this.bind(L,r,null===(J=p._drawWrapperOverride)||void 0===J?void 0:J.effect,p)}bind(L,r,p,J){const i=J&&this._storeEffectOnSubMeshes,n=p??(i?J.effect:this.getEffect());if(!n)return;const j=this.FL();this._activeEffect=n,this.bindOnlyWorldMatrix(L,p);const z=this._options.uniformBuffers;let G=!1;if(n&&z&&z.length>0&&j.getEngine().supportsUniformBuffers)for(let E=0;E<z.length;++E){switch(z[E]){case"Mesh":r&&(r.getMeshUniformBuffer().bindToEffect(n,"Mesh"),r.transferToEffect(L));break;case"Scene":(0,g.s)(n,j.getSceneUniformBuffer()),j.finalizeSceneUbo(),G=!0}}const C=r&&i?this._mustRebind(j,n,J,r.visibility):j.getCachedMaterial()!==this;if(n&&C){let L;for(L in G||-1===this._options.uniforms.indexOf("view")||n.setMatrix("view",j.getViewMatrix()),G||-1===this._options.uniforms.indexOf("projection")||n.setMatrix("projection",j.getProjectionMatrix()),G||-1===this._options.uniforms.indexOf("viewProjection")||(n.setMatrix("viewProjection",j.getTransformMatrix()),this._multiview&&n.setMatrix("viewProjectionR",j._transformMatrixR)),j.activeCamera&&-1!==this._options.uniforms.indexOf("cameraPosition")&&n.setVector3("cameraPosition",j.activeCamera.globalPosition),(0,g.e)(r,n),(0,w.g)(n,this,j),this._useLogarithmicDepth&&(0,g.n)(i?J.materialDefines:n.defines,n,j),r&&(0,g.h)(j,r,n),this._textures)n.setTexture(L,this._textures[L]);for(L in this._textureArrays)n.setTextureArray(L,this._textureArrays[L]);for(L in this._ints)n.setInt(L,this._ints[L]);for(L in this._uints)n.setUInt(L,this._uints[L]);for(L in this._floats)n.setFloat(L,this._floats[L]);for(L in this._floatsArrays)n.setArray(L,this._floatsArrays[L]);for(L in this._colors3)n.setColor3(L,this._colors3[L]);for(L in this._colors3Arrays)n.setArray3(L,this._colors3Arrays[L]);for(L in this._colors4){const r=this._colors4[L];n.setFloat4(L,r.r,r.g,r.b,r.a)}for(L in this._colors4Arrays)n.setArray4(L,this._colors4Arrays[L]);for(L in this._vectors2)n.setVector2(L,this._vectors2[L]);for(L in this._vectors3)n.setVector3(L,this._vectors3[L]);for(L in this._vectors4)n.setVector4(L,this._vectors4[L]);for(L in this._quaternions)n.setQuaternion(L,this._quaternions[L]);for(L in this._matrices)n.setMatrix(L,this._matrices[L]);for(L in this._matrixArrays)n.setMatrices(L,this._matrixArrays[L]);for(L in this._matrices3x3)n.setMatrix3x3(L,this._matrices3x3[L]);for(L in this._matrices2x2)n.setMatrix2x2(L,this._matrices2x2[L]);for(L in this._vectors2Arrays)n.setArray2(L,this._vectors2Arrays[L]);for(L in this._vectors3Arrays)n.setArray3(L,this._vectors3Arrays[L]);for(L in this._vectors4Arrays)n.setArray4(L,this._vectors4Arrays[L]);for(L in this._quaternionsArrays)n.setArray4(L,this._quaternionsArrays[L]);for(L in this._uniformBuffers){const r=this._uniformBuffers[L].getBuffer();r&&n.bindUniformBuffer(r,L)}const p=j.getEngine(),z=p.setExternalTexture;if(z)for(L in this._externalTextures)z.call(p,L,this._externalTextures[L]);const C=p.setTextureSampler;if(C)for(L in this._textureSamplers)C.call(p,L,this._textureSamplers[L]);const t=p.setStorageBuffer;if(t)for(L in this._storageBuffers)t.call(p,L,this._storageBuffers[L])}if(n&&r&&(C||!this.isFrozen)){(0,g.o)(r,n),r.morphTargetManager&&r.morphTargetManager.isUsingTextureForTargets&&r.morphTargetManager._bind(n);const L=r.bakedVertexAnimationManager;if(L&&L.isEnabled){var t;const L=i?J._drawWrapper:this._drawWrapper;null===(t=r.bakedVertexAnimationManager)||void 0===t||t.bind(n,!!L._wasPreviouslyUsingInstances)}}this._afterBind(r,n,J)}getActiveTextures(){const L=super.getActiveTextures();for(const r in this._textures)L.push(this._textures[r]);for(const r in this._textureArrays){const p=this._textureArrays[r];for(let r=0;r<p.length;r++)L.push(p[r])}return L}hasTexture(L){if(super.hasTexture(L))return!0;for(const r in this._textures)if(this._textures[r]===L)return!0;for(const r in this._textureArrays){const p=this._textureArrays[r];for(let r=0;r<p.length;r++)if(p[r]===L)return!0}return!1}clone(L){const r=J.c.Clone((()=>new c(L,this.FL(),this._shaderPath,this._options,this._storeEffectOnSubMeshes)),this);r.name=L,r.id=L,"object"===typeof r._shaderPath&&(r._shaderPath={...r._shaderPath}),this._options={...this._options};const p=Object.keys(this._options);for(const J of p){const L=this._options[J];Array.isArray(L)&&(this._options[J]=L.slice(0))}this.ti.copyTo(r.ti);for(const J in this._textures)r.setTexture(J,this._textures[J]);for(const J in this._textureArrays)r.setTextureArray(J,this._textureArrays[J]);for(const J in this._externalTextures)r.setExternalTexture(J,this._externalTextures[J]);for(const J in this._ints)r.setInt(J,this._ints[J]);for(const J in this._uints)r.setUInt(J,this._uints[J]);for(const J in this._floats)r.setFloat(J,this._floats[J]);for(const J in this._floatsArrays)r.setFloats(J,this._floatsArrays[J]);for(const J in this._colors3)r.setColor3(J,this._colors3[J]);for(const J in this._colors3Arrays)r._colors3Arrays[J]=this._colors3Arrays[J];for(const J in this._colors4)r.setColor4(J,this._colors4[J]);for(const J in this._colors4Arrays)r._colors4Arrays[J]=this._colors4Arrays[J];for(const J in this._vectors2)r.setVector2(J,this._vectors2[J]);for(const J in this._vectors3)r.setVector3(J,this._vectors3[J]);for(const J in this._vectors4)r.setVector4(J,this._vectors4[J]);for(const J in this._quaternions)r.setQuaternion(J,this._quaternions[J]);for(const J in this._quaternionsArrays)r._quaternionsArrays[J]=this._quaternionsArrays[J];for(const J in this._matrices)r.setMatrix(J,this._matrices[J]);for(const J in this._matrixArrays)r._matrixArrays[J]=this._matrixArrays[J].slice();for(const J in this._matrices3x3)r.setMatrix3x3(J,this._matrices3x3[J]);for(const J in this._matrices2x2)r.setMatrix2x2(J,this._matrices2x2[J]);for(const J in this._vectors2Arrays)r.setArray2(J,this._vectors2Arrays[J]);for(const J in this._vectors3Arrays)r.setArray3(J,this._vectors3Arrays[J]);for(const J in this._vectors4Arrays)r.setArray4(J,this._vectors4Arrays[J]);for(const J in this._uniformBuffers)r.setUniformBuffer(J,this._uniformBuffers[J]);for(const J in this._textureSamplers)r.setTextureSampler(J,this._textureSamplers[J]);for(const J in this._storageBuffers)r.setStorageBuffer(J,this._storageBuffers[J]);return r}dispose(L,r,p){if(r){let L;for(L in this._textures)this._textures[L].dispose();for(L in this._textureArrays){const r=this._textureArrays[L];for(let L=0;L<r.length;L++)r[L].dispose()}}this._textures={},super.dispose(L,r,p)}serialize(){const L=J.c.Serialize(this);let r;for(r in L.customType="BABYLON.ShaderMaterial",L.uniqueId=this.uniqueId,L.options=this._options,L.shaderPath=this._shaderPath,L.storeEffectOnSubMeshes=this._storeEffectOnSubMeshes,L.ti=this.ti.serialize(),L.textures={},this._textures)L.textures[r]=this._textures[r].serialize();for(r in L.textureArrays={},this._textureArrays){L.textureArrays[r]=[];const p=this._textureArrays[r];for(let J=0;J<p.length;J++)L.textureArrays[r].push(p[J].serialize())}for(r in L.ints={},this._ints)L.ints[r]=this._ints[r];for(r in L.uints={},this._uints)L.uints[r]=this._uints[r];for(r in L.floats={},this._floats)L.floats[r]=this._floats[r];for(r in L.floatsArrays={},this._floatsArrays)L.floatsArrays[r]=this._floatsArrays[r];for(r in L.colors3={},this._colors3){const p=this._colors3[r];L.colors3[r]=[p.r,p.g,p.b]}for(r in L.colors3Arrays={},this._colors3Arrays)L.colors3Arrays[r]=this._colors3Arrays[r];for(r in L.colors4={},this._colors4){const p=this._colors4[r];L.colors4[r]=[p.r,p.g,p.b,p.a]}for(r in L.colors4Arrays={},this._colors4Arrays)L.colors4Arrays[r]=this._colors4Arrays[r];for(r in L.vectors2={},this._vectors2){const p=this._vectors2[r];L.vectors2[r]=[p.x,p.y]}for(r in L.vectors3={},this._vectors3){const p=this._vectors3[r];L.vectors3[r]=[p.x,p.y,p.z]}for(r in L.vectors4={},this._vectors4){const p=this._vectors4[r];L.vectors4[r]=[p.x,p.y,p.z,p.w]}for(r in L.quaternions={},this._quaternions)L.quaternions[r]=this._quaternions[r].mz();for(r in L.matrices={},this._matrices)L.matrices[r]=this._matrices[r].mz();for(r in L.matrixArray={},this._matrixArrays)L.matrixArray[r]=this._matrixArrays[r];for(r in L.matrices3x3={},this._matrices3x3)L.matrices3x3[r]=this._matrices3x3[r];for(r in L.matrices2x2={},this._matrices2x2)L.matrices2x2[r]=this._matrices2x2[r];for(r in L.vectors2Arrays={},this._vectors2Arrays)L.vectors2Arrays[r]=this._vectors2Arrays[r];for(r in L.vectors3Arrays={},this._vectors3Arrays)L.vectors3Arrays[r]=this._vectors3Arrays[r];for(r in L.vectors4Arrays={},this._vectors4Arrays)L.vectors4Arrays[r]=this._vectors4Arrays[r];for(r in L.quaternionsArrays={},this._quaternionsArrays)L.quaternionsArrays[r]=this._quaternionsArrays[r];return L}static Parse(L,r,p){const i=J.c.Parse((()=>new c(L.name,r,L.shaderPath,L.options,L.storeEffectOnSubMeshes)),L,r,p);let j;for(j in L.ti&&i.ti.parse(L.ti,r,p),L.textures)i.setTexture(j,z.c.Parse(L.textures[j],r,p));for(j in L.textureArrays){const J=L.textureArrays[j],n=[];for(let L=0;L<J.length;L++)n.push(z.c.Parse(J[L],r,p));i.setTextureArray(j,n)}for(j in L.ints)i.setInt(j,L.ints[j]);for(j in L.uints)i.setUInt(j,L.uints[j]);for(j in L.floats)i.setFloat(j,L.floats[j]);for(j in L.floatsArrays)i.setFloats(j,L.floatsArrays[j]);for(j in L.colors3){const r=L.colors3[j];i.setColor3(j,{r:r[0],g:r[1],b:r[2]})}for(j in L.colors3Arrays){const r=L.colors3Arrays[j].reduce(((L,r,p)=>(p%3===0?L.push([r]):L[L.length-1].push(r),L)),[]).map((L=>({r:L[0],g:L[1],b:L[2]})));i.setColor3Array(j,r)}for(j in L.colors4){const r=L.colors4[j];i.setColor4(j,{r:r[0],g:r[1],b:r[2],a:r[3]})}for(j in L.colors4Arrays){const r=L.colors4Arrays[j].reduce(((L,r,p)=>(p%4===0?L.push([r]):L[L.length-1].push(r),L)),[]).map((L=>({r:L[0],g:L[1],b:L[2],a:L[3]})));i.setColor4Array(j,r)}for(j in L.vectors2){const r=L.vectors2[j];i.setVector2(j,{x:r[0],y:r[1]})}for(j in L.vectors3){const r=L.vectors3[j];i.setVector3(j,{x:r[0],y:r[1],z:r[2]})}for(j in L.vectors4){const r=L.vectors4[j];i.setVector4(j,{x:r[0],y:r[1],z:r[2],w:r[3]})}for(j in L.quaternions)i.setQuaternion(j,n.Quaternion.Br(L.quaternions[j]));for(j in L.matrices)i.setMatrix(j,n.Matrix.Br(L.matrices[j]));for(j in L.matrixArray)i._matrixArrays[j]=new Float32Array(L.matrixArray[j]);for(j in L.matrices3x3)i.setMatrix3x3(j,L.matrices3x3[j]);for(j in L.matrices2x2)i.setMatrix2x2(j,L.matrices2x2[j]);for(j in L.vectors2Arrays)i.setArray2(j,L.vectors2Arrays[j]);for(j in L.vectors3Arrays)i.setArray3(j,L.vectors3Arrays[j]);for(j in L.vectors4Arrays)i.setArray4(j,L.vectors4Arrays[j]);for(j in L.quaternionsArrays)i.setArray4(j,L.quaternionsArrays[j]);return i}static async ParseFromFileAsync(L,r,p){let J=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return await new Promise(((i,n)=>{const j=new t.b;j.addEventListener("readystatechange",(()=>{if(4==j.readyState)if(200==j.status){const r=JSON.parse(j.responseText),n=this.Parse(r,p||x.c.LastCreatedScene,J);L&&(n.name=L),i(n)}else n("Unable to load the ShaderMaterial")})),j.open("GET",r),j.send()}))}static async ParseFromSnippetAsync(L,r){let p=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return await new Promise(((J,i)=>{const n=new t.b;n.addEventListener("readystatechange",(()=>{if(4==n.readyState)if(200==n.status){const i=JSON.parse(JSON.parse(n.responseText).jsonPayload),j=JSON.parse(i.shaderMaterial),z=this.Parse(j,r||x.c.LastCreatedScene,p);z.snippetId=L,J(z)}else i("Unable to load the snippet "+L)})),n.open("GET",this.SnippetUrl+"/"+L.replace(/#/g,"/")),n.send()}))}}c.SnippetUrl="https://snippet.babylonjs.com",c.CreateFromSnippetAsync=c.ParseFromSnippetAsync,(0,G.e)("BABYLON.ShaderMaterial",c)}}]);