"use strict";(self.fjf2z1c8il8=self.fjf2z1c8il8||[]).push([[22],{12690:(g,i,a)=>{a.r(i),a.d(i,{ShaderMaterial:()=>D});var n=a(12484),L=a(12692),d=a(12452),b=a(12526),k=a(12436),e=a(12415),N=a(12770),F=a(12308),I=a(12773),j=a(12316),y=a(12825),B=a(12820);const c={effect:null,subMesh:null};class D extends I.b{constructor(g,i,a){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(g,i,!(arguments.length>4&&void 0!==arguments[4])||arguments[4]),this._textures={},this._textureArrays={},this._externalTextures={},this._floats={},this._ints={},this._uints={},this._floatsArrays={},this._colors3={},this._colors3Arrays={},this._colors4={},this._colors4Arrays={},this._vectors2={},this._vectors3={},this._vectors4={},this._quaternions={},this._quaternionsArrays={},this._matrices={},this._matrixArrays={},this._matrices3x3={},this._matrices2x2={},this._vectors2Arrays={},this._vectors3Arrays={},this._vectors4Arrays={},this._uniformBuffers={},this._textureSamplers={},this._storageBuffers={},this._cachedWorldViewMatrix=new d.Matrix,this._cachedWorldViewProjectionMatrix=new d.Matrix,this._multiview=!1,this._materialHelperNeedsPreviousMatrices=!1,this._shaderPath=a,this._options={needAlphaBlending:!1,needAlphaTesting:!1,attributes:["position","normal","uv"],uniforms:["worldViewProjection"],uniformBuffers:[],samplers:[],externalTextures:[],samplerObjects:[],storageBuffers:[],defines:[],useClipPlane:!1,...n}}get shaderPath(){return this._shaderPath}set shaderPath(g){this._shaderPath=g}get options(){return this._options}get isMultiview(){return this._multiview}getClassName(){return"ShaderMaterial"}needAlphaBlending(){return this.alpha<1||this._options.needAlphaBlending}needAlphaTesting(){return this._options.needAlphaTesting}_checkUniform(g){-1===this._options.uniforms.indexOf(g)&&this._options.uniforms.push(g)}setTexture(g,i){return-1===this._options.samplers.indexOf(g)&&this._options.samplers.push(g),this._textures[g]=i,this}removeTexture(g){delete this._textures[g]}setTextureArray(g,i){return-1===this._options.samplers.indexOf(g)&&this._options.samplers.push(g),this._checkUniform(g),this._textureArrays[g]=i,this}setExternalTexture(g,i){return-1===this._options.externalTextures.indexOf(g)&&this._options.externalTextures.push(g),this._externalTextures[g]=i,this}setFloat(g,i){return this._checkUniform(g),this._floats[g]=i,this}setInt(g,i){return this._checkUniform(g),this._ints[g]=i,this}setUInt(g,i){return this._checkUniform(g),this._uints[g]=i,this}setFloats(g,i){return this._checkUniform(g),this._floatsArrays[g]=i,this}setColor3(g,i){return this._checkUniform(g),this._colors3[g]=i,this}setColor3Array(g,i){return this._checkUniform(g),this._colors3Arrays[g]=i.reduce(((g,i)=>(g.push(i.r,i.g,i.b),g)),[]),this}setColor4(g,i){return this._checkUniform(g),this._colors4[g]=i,this}setColor4Array(g,i){return this._checkUniform(g),this._colors4Arrays[g]=i.reduce(((g,i)=>(g.push(i.r,i.g,i.b,i.a),g)),[]),this}setVector2(g,i){return this._checkUniform(g),this._vectors2[g]=i,this}setVector3(g,i){return this._checkUniform(g),this._vectors3[g]=i,this}setVector4(g,i){return this._checkUniform(g),this._vectors4[g]=i,this}setQuaternion(g,i){return this._checkUniform(g),this._quaternions[g]=i,this}setQuaternionArray(g,i){return this._checkUniform(g),this._quaternionsArrays[g]=i.reduce(((g,i)=>(i.toArray(g,g.length),g)),[]),this}setMatrix(g,i){return this._checkUniform(g),this._matrices[g]=i,this}setMatrices(g,i){this._checkUniform(g);const a=new Float32Array(16*i.length);for(let n=0;n<i.length;n++){i[n].copyToArray(a,16*n)}return this._matrixArrays[g]=a,this}setMatrix3x3(g,i){return this._checkUniform(g),this._matrices3x3[g]=i,this}setMatrix2x2(g,i){return this._checkUniform(g),this._matrices2x2[g]=i,this}setArray2(g,i){return this._checkUniform(g),this._vectors2Arrays[g]=i,this}setArray3(g,i){return this._checkUniform(g),this._vectors3Arrays[g]=i,this}setArray4(g,i){return this._checkUniform(g),this._vectors4Arrays[g]=i,this}setUniformBuffer(g,i){return-1===this._options.uniformBuffers.indexOf(g)&&this._options.uniformBuffers.push(g),this._uniformBuffers[g]=i,this}setTextureSampler(g,i){return-1===this._options.samplerObjects.indexOf(g)&&this._options.samplerObjects.push(g),this._textureSamplers[g]=i,this}setStorageBuffer(g,i){return-1===this._options.storageBuffers.indexOf(g)&&this._options.storageBuffers.push(g),this._storageBuffers[g]=i,this}setDefine(g,i){const a=g.trimEnd()+" ",n=this.options.defines.findIndex((i=>i===g||i.startsWith(a)));return n>=0&&this.options.defines.splice(n,1),("boolean"!==typeof i||i)&&this.options.defines.push(a+i),this}isReadyForSubMesh(g,i,a){return this.isReady(g,a,i)}isReady(g,i,a){var n;const d=a&&this._storeEffectOnSubMeshes;if(this.isFrozen){const g=d?a._drawWrapper:this._drawWrapper;if(g.effect&&g._wasPreviouslyReady&&g._wasPreviouslyUsingInstances===i)return!0}const k=this.Pg(),e=k.getEngine(),F=[],I=[];let j=null,D=this._shaderPath,p=this._options.uniforms,R=this._options.uniformBuffers,x=this._options.samplers;e.getCaps().multiview&&k.activeCamera&&k.activeCamera.outputRenderTarget&&k.activeCamera.outputRenderTarget.getViewCount()>1&&(this._multiview=!0,F.push("#define MULTIVIEW"),-1!==p.indexOf("viewProjection")&&-1===p.indexOf("viewProjectionR")&&p.push("viewProjectionR"));for(let L=0;L<this._options.defines.length;L++){const g=0===this._options.defines[L].indexOf("#define")?this._options.defines[L]:`#define ${this._options.defines[L]}`;F.push(g)}for(let L=0;L<this._options.attributes.length;L++)I.push(this._options.attributes[L]);if(g&&g.isVerticesDataPresent(b.g.ColorKind)&&(-1===I.indexOf(b.g.ColorKind)&&I.push(b.g.ColorKind),F.push("#define VERTEXCOLOR")),i&&(F.push("#define INSTANCES"),(0,B.$)(I,this._materialHelperNeedsPreviousMatrices),null!==g&&void 0!==g&&g.hasThinInstances&&(F.push("#define THIN_INSTANCES"),g&&g.isVerticesDataPresent(b.g.ColorInstanceKind)&&(I.push(b.g.ColorInstanceKind),F.push("#define INSTANCESCOLOR")))),g&&g.useBones&&g.computeBonesUsingShaders&&g.skeleton){I.push(b.g.MatricesIndicesKind),I.push(b.g.MatricesWeightsKind),g.numBoneInfluencers>4&&(I.push(b.g.MatricesIndicesExtraKind),I.push(b.g.MatricesWeightsExtraKind));const i=g.skeleton;F.push("#define NUM_BONE_INFLUENCERS "+g.numBoneInfluencers),j=new N.b,j.addCPUSkinningFallback(0,g),i.isUsingTextureForMatrices?(F.push("#define BONETEXTURE"),-1===p.indexOf("boneTextureWidth")&&p.push("boneTextureWidth"),-1===this._options.samplers.indexOf("boneSampler")&&this._options.samplers.push("boneSampler")):(F.push("#define BonesPerMesh "+(i.bones.length+1)),-1===p.indexOf("mBones")&&p.push("mBones"))}else F.push("#define NUM_BONE_INFLUENCERS 0");let E=0;const X=g?g.morphTargetManager:null;if(X){const i=-1!==F.indexOf("#define UV1"),a=-1!==F.indexOf("#define UV2"),n=-1!==F.indexOf("#define TANGENT"),L=-1!==F.indexOf("#define NORMAL"),d=-1!==F.indexOf("#define VERTEXCOLOR");E=(0,B.F)(X,F,I,g,!0,L,n,i,a,d),X.isUsingTextureForTargets&&(-1===p.indexOf("morphTargetTextureIndices")&&p.push("morphTargetTextureIndices"),-1===this._options.samplers.indexOf("morphTargets")&&this._options.samplers.push("morphTargets")),E>0&&(p=p.slice(),p.push("morphTargetInfluences"),p.push("morphTargetCount"),p.push("morphTargetTextureInfo"),p.push("morphTargetTextureIndices"))}else F.push("#define NUM_MORPH_INFLUENCERS 0");if(g){const i=g.bakedVertexAnimationManager;i&&i.isEnabled&&(F.push("#define BAKED_VERTEX_ANIMATION_TEXTURE"),-1===p.indexOf("bakedVertexAnimationSettings")&&p.push("bakedVertexAnimationSettings"),-1===p.indexOf("bakedVertexAnimationTextureSizeInverted")&&p.push("bakedVertexAnimationTextureSizeInverted"),-1===p.indexOf("bakedVertexAnimationTime")&&p.push("bakedVertexAnimationTime"),-1===this._options.samplers.indexOf("bakedVertexAnimationTexture")&&this._options.samplers.push("bakedVertexAnimationTexture")),(0,B.v)(I,g,F)}for(const L in this._textures)if(!this._textures[L].isReady())return!1;g&&this.needAlphaTestingForMesh(g)&&F.push("#define ALPHATEST"),!1!==this._options.useClipPlane&&((0,y.e)(p),(0,y.n)(this,k,F)),k.fogEnabled&&null!==g&&void 0!==g&&g.applyFog&&k.fogMode!==L.e.FOGMODE_NONE&&(F.push("#define FOG"),-1===p.indexOf("view")&&p.push("view"),-1===p.indexOf("vFogInfos")&&p.push("vFogInfos"),-1===p.indexOf("vFogColor")&&p.push("vFogColor")),this._useLogarithmicDepth&&(F.push("#define LOGARITHMICDEPTH"),-1===p.indexOf("logarithmicDepthConstant")&&p.push("logarithmicDepthConstant")),this.customShaderNameResolve&&(p=p.slice(),R=R.slice(),x=x.slice(),D=this.customShaderNameResolve(this.name,p,R,x,F,I));const v=d?a._getDrawWrapper(void 0,!0):this._drawWrapper,P=(null===v||void 0===v?void 0:v.effect)??null,Y=(null===v||void 0===v?void 0:v.defines)??null,f=F.join("\n");let C=P;return Y!==f&&(C=e.createEffect(D,{attributes:I,uniformsNames:p,uniformBuffersNames:R,samplers:x,defines:f,fallbacks:j,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousMorphTargets:E},shaderLanguage:this._options.shaderLanguage,extraInitializationsAsync:this._options.extraInitializationsAsync},e),d?a.setEffect(C,f,this._materialContext):v&&v.setEffect(C,f),this._onEffectCreatedObservable&&(c.effect=C,c.subMesh=a??(null===g||void 0===g?void 0:g.Yd[0])??null,this._onEffectCreatedObservable.notifyObservers(c))),v._wasPreviouslyUsingInstances=!!i,!(null===(n=C)||void 0===n||!n.isReady())&&(P!==C&&k.resetCachedMaterial(),v._wasPreviouslyReady=!0,!0)}bindOnlyWorldMatrix(g,i){const a=i??this.getEffect();if(!a)return;const n=this._options.uniforms;-1!==n.indexOf("world")&&a.setMatrix("world",g);const L=this.Pg();-1!==n.indexOf("worldView")&&(g.multiplyToRef(L.getViewMatrix(),this._cachedWorldViewMatrix),a.setMatrix("worldView",this._cachedWorldViewMatrix)),-1!==n.indexOf("worldViewProjection")&&(g.multiplyToRef(L.getTransformMatrix(),this._cachedWorldViewProjectionMatrix),a.setMatrix("worldViewProjection",this._cachedWorldViewProjectionMatrix)),-1!==n.indexOf("view")&&a.setMatrix("view",L.getViewMatrix())}bindForSubMesh(g,i,a){var n;this.bind(g,i,null===(n=a._drawWrapperOverride)||void 0===n?void 0:n.effect,a)}bind(g,i,a,n){const L=n&&this._storeEffectOnSubMeshes,d=a??(L?n.effect:this.getEffect());if(!d)return;const b=this.Pg();this._activeEffect=d,this.bindOnlyWorldMatrix(g,a);const k=this._options.uniformBuffers;let e=!1;if(d&&k&&k.length>0&&b.getEngine().supportsUniformBuffers)for(let I=0;I<k.length;++I){switch(k[I]){case"Mesh":i&&(i.getMeshUniformBuffer().bindToEffect(d,"Mesh"),i.transferToEffect(g));break;case"Scene":(0,B.o)(d,b.getSceneUniformBuffer()),b.finalizeSceneUbo(),e=!0}}const N=i&&L?this._mustRebind(b,d,n,i.visibility):b.getCachedMaterial()!==this;if(d&&N){let g;for(g in e||-1===this._options.uniforms.indexOf("view")||d.setMatrix("view",b.getViewMatrix()),e||-1===this._options.uniforms.indexOf("projection")||d.setMatrix("projection",b.getProjectionMatrix()),e||-1===this._options.uniforms.indexOf("viewProjection")||(d.setMatrix("viewProjection",b.getTransformMatrix()),this._multiview&&d.setMatrix("viewProjectionR",b._transformMatrixR)),b.activeCamera&&-1!==this._options.uniforms.indexOf("cameraPosition")&&d.setVector3("cameraPosition",b.activeCamera.globalPosition),(0,B.c)(i,d),(0,y.i)(d,this,b),this._useLogarithmicDepth&&(0,B.j)(L?n.materialDefines:d.defines,d,b),i&&(0,B.d)(b,i,d),this._textures)d.setTexture(g,this._textures[g]);for(g in this._textureArrays)d.setTextureArray(g,this._textureArrays[g]);for(g in this._ints)d.setInt(g,this._ints[g]);for(g in this._uints)d.setUInt(g,this._uints[g]);for(g in this._floats)d.setFloat(g,this._floats[g]);for(g in this._floatsArrays)d.setArray(g,this._floatsArrays[g]);for(g in this._colors3)d.setColor3(g,this._colors3[g]);for(g in this._colors3Arrays)d.setArray3(g,this._colors3Arrays[g]);for(g in this._colors4){const i=this._colors4[g];d.setFloat4(g,i.r,i.g,i.b,i.a)}for(g in this._colors4Arrays)d.setArray4(g,this._colors4Arrays[g]);for(g in this._vectors2)d.setVector2(g,this._vectors2[g]);for(g in this._vectors3)d.setVector3(g,this._vectors3[g]);for(g in this._vectors4)d.setVector4(g,this._vectors4[g]);for(g in this._quaternions)d.setQuaternion(g,this._quaternions[g]);for(g in this._matrices)d.setMatrix(g,this._matrices[g]);for(g in this._matrixArrays)d.setMatrices(g,this._matrixArrays[g]);for(g in this._matrices3x3)d.setMatrix3x3(g,this._matrices3x3[g]);for(g in this._matrices2x2)d.setMatrix2x2(g,this._matrices2x2[g]);for(g in this._vectors2Arrays)d.setArray2(g,this._vectors2Arrays[g]);for(g in this._vectors3Arrays)d.setArray3(g,this._vectors3Arrays[g]);for(g in this._vectors4Arrays)d.setArray4(g,this._vectors4Arrays[g]);for(g in this._quaternionsArrays)d.setArray4(g,this._quaternionsArrays[g]);for(g in this._uniformBuffers){const i=this._uniformBuffers[g].getBuffer();i&&d.bindUniformBuffer(i,g)}const a=b.getEngine(),k=a.setExternalTexture;if(k)for(g in this._externalTextures)k.call(a,g,this._externalTextures[g]);const N=a.setTextureSampler;if(N)for(g in this._textureSamplers)N.call(a,g,this._textureSamplers[g]);const F=a.setStorageBuffer;if(F)for(g in this._storageBuffers)F.call(a,g,this._storageBuffers[g])}if(d&&i&&(N||!this.isFrozen)){(0,B.m)(i,d),i.morphTargetManager&&i.morphTargetManager.isUsingTextureForTargets&&i.morphTargetManager._bind(d);const g=i.bakedVertexAnimationManager;if(g&&g.isEnabled){var F;const g=L?n._drawWrapper:this._drawWrapper;null===(F=i.bakedVertexAnimationManager)||void 0===F||F.bind(d,!!g._wasPreviouslyUsingInstances)}}this._afterBind(i,d,n)}getActiveTextures(){const g=super.getActiveTextures();for(const i in this._textures)g.push(this._textures[i]);for(const i in this._textureArrays){const a=this._textureArrays[i];for(let i=0;i<a.length;i++)g.push(a[i])}return g}hasTexture(g){if(super.hasTexture(g))return!0;for(const i in this._textures)if(this._textures[i]===g)return!0;for(const i in this._textureArrays){const a=this._textureArrays[i];for(let i=0;i<a.length;i++)if(a[i]===g)return!0}return!1}clone(g){const i=n.c.Clone((()=>new D(g,this.Pg(),this._shaderPath,this._options,this._storeEffectOnSubMeshes)),this);i.name=g,i.id=g,"object"===typeof i._shaderPath&&(i._shaderPath={...i._shaderPath}),this._options={...this._options};const a=Object.keys(this._options);for(const n of a){const g=this._options[n];Array.isArray(g)&&(this._options[n]=g.slice(0))}this.bd.copyTo(i.bd);for(const n in this._textures)i.setTexture(n,this._textures[n]);for(const n in this._textureArrays)i.setTextureArray(n,this._textureArrays[n]);for(const n in this._externalTextures)i.setExternalTexture(n,this._externalTextures[n]);for(const n in this._ints)i.setInt(n,this._ints[n]);for(const n in this._uints)i.setUInt(n,this._uints[n]);for(const n in this._floats)i.setFloat(n,this._floats[n]);for(const n in this._floatsArrays)i.setFloats(n,this._floatsArrays[n]);for(const n in this._colors3)i.setColor3(n,this._colors3[n]);for(const n in this._colors3Arrays)i._colors3Arrays[n]=this._colors3Arrays[n];for(const n in this._colors4)i.setColor4(n,this._colors4[n]);for(const n in this._colors4Arrays)i._colors4Arrays[n]=this._colors4Arrays[n];for(const n in this._vectors2)i.setVector2(n,this._vectors2[n]);for(const n in this._vectors3)i.setVector3(n,this._vectors3[n]);for(const n in this._vectors4)i.setVector4(n,this._vectors4[n]);for(const n in this._quaternions)i.setQuaternion(n,this._quaternions[n]);for(const n in this._quaternionsArrays)i._quaternionsArrays[n]=this._quaternionsArrays[n];for(const n in this._matrices)i.setMatrix(n,this._matrices[n]);for(const n in this._matrixArrays)i._matrixArrays[n]=this._matrixArrays[n].slice();for(const n in this._matrices3x3)i.setMatrix3x3(n,this._matrices3x3[n]);for(const n in this._matrices2x2)i.setMatrix2x2(n,this._matrices2x2[n]);for(const n in this._vectors2Arrays)i.setArray2(n,this._vectors2Arrays[n]);for(const n in this._vectors3Arrays)i.setArray3(n,this._vectors3Arrays[n]);for(const n in this._vectors4Arrays)i.setArray4(n,this._vectors4Arrays[n]);for(const n in this._uniformBuffers)i.setUniformBuffer(n,this._uniformBuffers[n]);for(const n in this._textureSamplers)i.setTextureSampler(n,this._textureSamplers[n]);for(const n in this._storageBuffers)i.setStorageBuffer(n,this._storageBuffers[n]);return i}dispose(g,i,a){if(i){let g;for(g in this._textures)this._textures[g].dispose();for(g in this._textureArrays){const i=this._textureArrays[g];for(let g=0;g<i.length;g++)i[g].dispose()}}this._textures={},super.dispose(g,i,a)}serialize(){const g=n.c.Serialize(this);let i;for(i in g.customType="BABYLON.ShaderMaterial",g.uniqueId=this.uniqueId,g.options=this._options,g.shaderPath=this._shaderPath,g.storeEffectOnSubMeshes=this._storeEffectOnSubMeshes,g.bd=this.bd.serialize(),g.textures={},this._textures)g.textures[i]=this._textures[i].serialize();for(i in g.textureArrays={},this._textureArrays){g.textureArrays[i]=[];const a=this._textureArrays[i];for(let n=0;n<a.length;n++)g.textureArrays[i].push(a[n].serialize())}for(i in g.ints={},this._ints)g.ints[i]=this._ints[i];for(i in g.uints={},this._uints)g.uints[i]=this._uints[i];for(i in g.floats={},this._floats)g.floats[i]=this._floats[i];for(i in g.floatsArrays={},this._floatsArrays)g.floatsArrays[i]=this._floatsArrays[i];for(i in g.colors3={},this._colors3){const a=this._colors3[i];g.colors3[i]=[a.r,a.g,a.b]}for(i in g.colors3Arrays={},this._colors3Arrays)g.colors3Arrays[i]=this._colors3Arrays[i];for(i in g.colors4={},this._colors4){const a=this._colors4[i];g.colors4[i]=[a.r,a.g,a.b,a.a]}for(i in g.colors4Arrays={},this._colors4Arrays)g.colors4Arrays[i]=this._colors4Arrays[i];for(i in g.vectors2={},this._vectors2){const a=this._vectors2[i];g.vectors2[i]=[a.x,a.y]}for(i in g.vectors3={},this._vectors3){const a=this._vectors3[i];g.vectors3[i]=[a.x,a.y,a.z]}for(i in g.vectors4={},this._vectors4){const a=this._vectors4[i];g.vectors4[i]=[a.x,a.y,a.z,a.w]}for(i in g.quaternions={},this._quaternions)g.quaternions[i]=this._quaternions[i].fd();for(i in g.matrices={},this._matrices)g.matrices[i]=this._matrices[i].fd();for(i in g.matrixArray={},this._matrixArrays)g.matrixArray[i]=this._matrixArrays[i];for(i in g.matrices3x3={},this._matrices3x3)g.matrices3x3[i]=this._matrices3x3[i];for(i in g.matrices2x2={},this._matrices2x2)g.matrices2x2[i]=this._matrices2x2[i];for(i in g.vectors2Arrays={},this._vectors2Arrays)g.vectors2Arrays[i]=this._vectors2Arrays[i];for(i in g.vectors3Arrays={},this._vectors3Arrays)g.vectors3Arrays[i]=this._vectors3Arrays[i];for(i in g.vectors4Arrays={},this._vectors4Arrays)g.vectors4Arrays[i]=this._vectors4Arrays[i];for(i in g.quaternionsArrays={},this._quaternionsArrays)g.quaternionsArrays[i]=this._quaternionsArrays[i];return g}static Parse(g,i,a){const L=n.c.Parse((()=>new D(g.name,i,g.shaderPath,g.options,g.storeEffectOnSubMeshes)),g,i,a);let b;for(b in g.bd&&L.bd.parse(g.bd,i,a),g.textures)L.setTexture(b,k.c.Parse(g.textures[b],i,a));for(b in g.textureArrays){const n=g.textureArrays[b],d=[];for(let g=0;g<n.length;g++)d.push(k.c.Parse(n[g],i,a));L.setTextureArray(b,d)}for(b in g.ints)L.setInt(b,g.ints[b]);for(b in g.uints)L.setUInt(b,g.uints[b]);for(b in g.floats)L.setFloat(b,g.floats[b]);for(b in g.floatsArrays)L.setFloats(b,g.floatsArrays[b]);for(b in g.colors3){const i=g.colors3[b];L.setColor3(b,{r:i[0],g:i[1],b:i[2]})}for(b in g.colors3Arrays){const i=g.colors3Arrays[b].reduce(((g,i,a)=>(a%3===0?g.push([i]):g[g.length-1].push(i),g)),[]).map((g=>({r:g[0],g:g[1],b:g[2]})));L.setColor3Array(b,i)}for(b in g.colors4){const i=g.colors4[b];L.setColor4(b,{r:i[0],g:i[1],b:i[2],a:i[3]})}for(b in g.colors4Arrays){const i=g.colors4Arrays[b].reduce(((g,i,a)=>(a%4===0?g.push([i]):g[g.length-1].push(i),g)),[]).map((g=>({r:g[0],g:g[1],b:g[2],a:g[3]})));L.setColor4Array(b,i)}for(b in g.vectors2){const i=g.vectors2[b];L.setVector2(b,{x:i[0],y:i[1]})}for(b in g.vectors3){const i=g.vectors3[b];L.setVector3(b,{x:i[0],y:i[1],z:i[2]})}for(b in g.vectors4){const i=g.vectors4[b];L.setVector4(b,{x:i[0],y:i[1],z:i[2],w:i[3]})}for(b in g.quaternions)L.setQuaternion(b,d.Quaternion.xi(g.quaternions[b]));for(b in g.matrices)L.setMatrix(b,d.Matrix.xi(g.matrices[b]));for(b in g.matrixArray)L._matrixArrays[b]=new Float32Array(g.matrixArray[b]);for(b in g.matrices3x3)L.setMatrix3x3(b,g.matrices3x3[b]);for(b in g.matrices2x2)L.setMatrix2x2(b,g.matrices2x2[b]);for(b in g.vectors2Arrays)L.setArray2(b,g.vectors2Arrays[b]);for(b in g.vectors3Arrays)L.setArray3(b,g.vectors3Arrays[b]);for(b in g.vectors4Arrays)L.setArray4(b,g.vectors4Arrays[b]);for(b in g.quaternionsArrays)L.setArray4(b,g.quaternionsArrays[b]);return L}static async ParseFromFileAsync(g,i,a){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return await new Promise(((L,d)=>{const b=new F.d;b.addEventListener("readystatechange",(()=>{if(4==b.readyState)if(200==b.status){const i=JSON.parse(b.responseText),d=this.Parse(i,a||j.c.LastCreatedScene,n);g&&(d.name=g),L(d)}else d("Unable to load the ShaderMaterial")})),b.open("GET",i),b.send()}))}static async ParseFromSnippetAsync(g,i){let a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return await new Promise(((n,L)=>{const d=new F.d;d.addEventListener("readystatechange",(()=>{if(4==d.readyState)if(200==d.status){const L=JSON.parse(JSON.parse(d.responseText).jsonPayload),b=JSON.parse(L.shaderMaterial),k=this.Parse(b,i||j.c.LastCreatedScene,a);k.snippetId=g,n(k)}else L("Unable to load the snippet "+g)})),d.open("GET",this.SnippetUrl+"/"+g.replace(/#/g,"/")),d.send()}))}}D.SnippetUrl="https://snippet.babylonjs.com",D.CreateFromSnippetAsync=D.ParseFromSnippetAsync,(0,e.e)("BABYLON.ShaderMaterial",D)}}]);