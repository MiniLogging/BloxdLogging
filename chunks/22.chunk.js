"use strict";(self["1kjc9ee3uyt"]=self["1kjc9ee3uyt"]||[]).push([[22],{11899:(w,E,G)=>{G.r(E),G.d(E,{ShaderMaterial:()=>c});var P=G(11706),h=G(11908),B=G(11679),y=G(11748),x=G(11663),U=G(11646),l=G(11973),i=G(11540),O=G(11979),u=G(11543),V=G(12029),a=G(12020);const Q={effect:null,subMesh:null};class c extends O.d{constructor(w,E,G){let P=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(w,E,!(arguments.length>4&&void 0!==arguments[4])||arguments[4]),this._textures={},this._textureArrays={},this._externalTextures={},this._floats={},this._ints={},this._uints={},this._floatsArrays={},this._colors3={},this._colors3Arrays={},this._colors4={},this._colors4Arrays={},this._vectors2={},this._vectors3={},this._vectors4={},this._quaternions={},this._quaternionsArrays={},this._matrices={},this._matrixArrays={},this._matrices3x3={},this._matrices2x2={},this._vectors2Arrays={},this._vectors3Arrays={},this._vectors4Arrays={},this._uniformBuffers={},this._textureSamplers={},this._storageBuffers={},this._cachedWorldViewMatrix=new B.Matrix,this._cachedWorldViewProjectionMatrix=new B.Matrix,this._multiview=!1,this._materialHelperNeedsPreviousMatrices=!1,this._shaderPath=G,this._options={needAlphaBlending:!1,needAlphaTesting:!1,attributes:["position","normal","uv"],uniforms:["worldViewProjection"],uniformBuffers:[],samplers:[],externalTextures:[],samplerObjects:[],storageBuffers:[],defines:[],useClipPlane:!1,...P}}get shaderPath(){return this._shaderPath}set shaderPath(w){this._shaderPath=w}get options(){return this._options}get isMultiview(){return this._multiview}getClassName(){return"ShaderMaterial"}needAlphaBlending(){return this.alpha<1||this._options.needAlphaBlending}needAlphaTesting(){return this._options.needAlphaTesting}_checkUniform(w){-1===this._options.uniforms.indexOf(w)&&this._options.uniforms.push(w)}setTexture(w,E){return-1===this._options.samplers.indexOf(w)&&this._options.samplers.push(w),this._textures[w]=E,this}removeTexture(w){delete this._textures[w]}setTextureArray(w,E){return-1===this._options.samplers.indexOf(w)&&this._options.samplers.push(w),this._checkUniform(w),this._textureArrays[w]=E,this}setExternalTexture(w,E){return-1===this._options.externalTextures.indexOf(w)&&this._options.externalTextures.push(w),this._externalTextures[w]=E,this}setFloat(w,E){return this._checkUniform(w),this._floats[w]=E,this}setInt(w,E){return this._checkUniform(w),this._ints[w]=E,this}setUInt(w,E){return this._checkUniform(w),this._uints[w]=E,this}setFloats(w,E){return this._checkUniform(w),this._floatsArrays[w]=E,this}setColor3(w,E){return this._checkUniform(w),this._colors3[w]=E,this}setColor3Array(w,E){return this._checkUniform(w),this._colors3Arrays[w]=E.reduce(((w,E)=>(w.push(E.r,E.g,E.b),w)),[]),this}setColor4(w,E){return this._checkUniform(w),this._colors4[w]=E,this}setColor4Array(w,E){return this._checkUniform(w),this._colors4Arrays[w]=E.reduce(((w,E)=>(w.push(E.r,E.g,E.b,E.a),w)),[]),this}setVector2(w,E){return this._checkUniform(w),this._vectors2[w]=E,this}setVector3(w,E){return this._checkUniform(w),this._vectors3[w]=E,this}setVector4(w,E){return this._checkUniform(w),this._vectors4[w]=E,this}setQuaternion(w,E){return this._checkUniform(w),this._quaternions[w]=E,this}setQuaternionArray(w,E){return this._checkUniform(w),this._quaternionsArrays[w]=E.reduce(((w,E)=>(E.toArray(w,w.length),w)),[]),this}setMatrix(w,E){return this._checkUniform(w),this._matrices[w]=E,this}setMatrices(w,E){this._checkUniform(w);const G=new Float32Array(16*E.length);for(let P=0;P<E.length;P++){E[P].copyToArray(G,16*P)}return this._matrixArrays[w]=G,this}setMatrix3x3(w,E){return this._checkUniform(w),this._matrices3x3[w]=E,this}setMatrix2x2(w,E){return this._checkUniform(w),this._matrices2x2[w]=E,this}setArray2(w,E){return this._checkUniform(w),this._vectors2Arrays[w]=E,this}setArray3(w,E){return this._checkUniform(w),this._vectors3Arrays[w]=E,this}setArray4(w,E){return this._checkUniform(w),this._vectors4Arrays[w]=E,this}setUniformBuffer(w,E){return-1===this._options.uniformBuffers.indexOf(w)&&this._options.uniformBuffers.push(w),this._uniformBuffers[w]=E,this}setTextureSampler(w,E){return-1===this._options.samplerObjects.indexOf(w)&&this._options.samplerObjects.push(w),this._textureSamplers[w]=E,this}setStorageBuffer(w,E){return-1===this._options.storageBuffers.indexOf(w)&&this._options.storageBuffers.push(w),this._storageBuffers[w]=E,this}setDefine(w,E){const G=w.trimEnd()+" ",P=this.options.defines.findIndex((E=>E===w||E.startsWith(G)));return P>=0&&this.options.defines.splice(P,1),("boolean"!==typeof E||E)&&this.options.defines.push(G+E),this}isReadyForSubMesh(w,E,G){return this.isReady(w,G,E)}isReady(w,E,G){var P;const B=G&&this._storeEffectOnSubMeshes;if(this.isFrozen){const w=B?G._drawWrapper:this._drawWrapper;if(w.effect&&w._wasPreviouslyReady&&w._wasPreviouslyUsingInstances===E)return!0}const x=this.Ww(),U=x.getEngine(),i=[],O=[];let u=null,c=this._shaderPath,Z=this._options.uniforms,J=this._options.uniformBuffers,d=this._options.samplers;U.getCaps().multiview&&x.activeCamera&&x.activeCamera.outputRenderTarget&&x.activeCamera.outputRenderTarget.getViewCount()>1&&(this._multiview=!0,i.push("#define MULTIVIEW"),-1!==Z.indexOf("viewProjection")&&-1===Z.indexOf("viewProjectionR")&&Z.push("viewProjectionR"));for(let h=0;h<this._options.defines.length;h++){const w=0===this._options.defines[h].indexOf("#define")?this._options.defines[h]:`#define ${this._options.defines[h]}`;i.push(w)}for(let h=0;h<this._options.attributes.length;h++)O.push(this._options.attributes[h]);if(w&&w.isVerticesDataPresent(y.g.ColorKind)&&(-1===O.indexOf(y.g.ColorKind)&&O.push(y.g.ColorKind),i.push("#define VERTEXCOLOR")),E&&(i.push("#define INSTANCES"),(0,a.eb)(O,this._materialHelperNeedsPreviousMatrices),null!==w&&void 0!==w&&w.hasThinInstances&&(i.push("#define THIN_INSTANCES"),w&&w.isVerticesDataPresent(y.g.ColorInstanceKind)&&(O.push(y.g.ColorInstanceKind),i.push("#define INSTANCESCOLOR")))),w&&w.useBones&&w.computeBonesUsingShaders&&w.skeleton){O.push(y.g.MatricesIndicesKind),O.push(y.g.MatricesWeightsKind),w.numBoneInfluencers>4&&(O.push(y.g.MatricesIndicesExtraKind),O.push(y.g.MatricesWeightsExtraKind));const E=w.skeleton;i.push("#define NUM_BONE_INFLUENCERS "+w.numBoneInfluencers),u=new l.e,u.addCPUSkinningFallback(0,w),E.isUsingTextureForMatrices?(i.push("#define BONETEXTURE"),-1===Z.indexOf("boneTextureWidth")&&Z.push("boneTextureWidth"),-1===this._options.samplers.indexOf("boneSampler")&&this._options.samplers.push("boneSampler")):(i.push("#define BonesPerMesh "+(E.bones.length+1)),-1===Z.indexOf("mBones")&&Z.push("mBones"))}else i.push("#define NUM_BONE_INFLUENCERS 0");let K=0;const t=w?w.morphTargetManager:null;if(t){const E=-1!==i.indexOf("#define UV1"),G=-1!==i.indexOf("#define UV2"),P=-1!==i.indexOf("#define TANGENT"),h=-1!==i.indexOf("#define NORMAL"),B=-1!==i.indexOf("#define VERTEXCOLOR");K=(0,a.L)(t,i,O,w,!0,h,P,E,G,B),t.isUsingTextureForTargets&&(-1===Z.indexOf("morphTargetTextureIndices")&&Z.push("morphTargetTextureIndices"),-1===this._options.samplers.indexOf("morphTargets")&&this._options.samplers.push("morphTargets")),K>0&&(Z=Z.slice(),Z.push("morphTargetInfluences"),Z.push("morphTargetCount"),Z.push("morphTargetTextureInfo"),Z.push("morphTargetTextureIndices"))}else i.push("#define NUM_MORPH_INFLUENCERS 0");if(w){const E=w.bakedVertexAnimationManager;E&&E.isEnabled&&(i.push("#define BAKED_VERTEX_ANIMATION_TEXTURE"),-1===Z.indexOf("bakedVertexAnimationSettings")&&Z.push("bakedVertexAnimationSettings"),-1===Z.indexOf("bakedVertexAnimationTextureSizeInverted")&&Z.push("bakedVertexAnimationTextureSizeInverted"),-1===Z.indexOf("bakedVertexAnimationTime")&&Z.push("bakedVertexAnimationTime"),-1===this._options.samplers.indexOf("bakedVertexAnimationTexture")&&this._options.samplers.push("bakedVertexAnimationTexture")),(0,a.E)(O,w,i)}for(const h in this._textures)if(!this._textures[h].isReady())return!1;w&&this.needAlphaTestingForMesh(w)&&i.push("#define ALPHATEST"),!1!==this._options.useClipPlane&&((0,V.b)(Z),(0,V.g)(this,x,i)),x.fogEnabled&&null!==w&&void 0!==w&&w.applyFog&&x.fogMode!==h.d.FOGMODE_NONE&&(i.push("#define FOG"),-1===Z.indexOf("view")&&Z.push("view"),-1===Z.indexOf("vFogInfos")&&Z.push("vFogInfos"),-1===Z.indexOf("vFogColor")&&Z.push("vFogColor")),this._useLogarithmicDepth&&(i.push("#define LOGARITHMICDEPTH"),-1===Z.indexOf("logarithmicDepthConstant")&&Z.push("logarithmicDepthConstant")),this.customShaderNameResolve&&(Z=Z.slice(),J=J.slice(),d=d.slice(),c=this.customShaderNameResolve(this.name,Z,J,d,i,O));const q=B?G._getDrawWrapper(void 0,!0):this._drawWrapper,W=(null===q||void 0===q?void 0:q.effect)??null,T=(null===q||void 0===q?void 0:q.defines)??null,I=i.join("\n");let j=W;return T!==I&&(j=U.createEffect(c,{attributes:O,uniformsNames:Z,uniformBuffersNames:J,samplers:d,defines:I,fallbacks:u,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousMorphTargets:K},shaderLanguage:this._options.shaderLanguage,extraInitializationsAsync:this._options.extraInitializationsAsync},U),B?G.setEffect(j,I,this._materialContext):q&&q.setEffect(j,I),this._onEffectCreatedObservable&&(Q.effect=j,Q.subMesh=G??(null===w||void 0===w?void 0:w.Dh[0])??null,this._onEffectCreatedObservable.notifyObservers(Q))),q._wasPreviouslyUsingInstances=!!E,!(null===(P=j)||void 0===P||!P.isReady())&&(W!==j&&x.resetCachedMaterial(),q._wasPreviouslyReady=!0,!0)}bindOnlyWorldMatrix(w,E){const G=E??this.getEffect();if(!G)return;const P=this._options.uniforms;-1!==P.indexOf("world")&&G.setMatrix("world",w);const h=this.Ww();-1!==P.indexOf("worldView")&&(w.multiplyToRef(h.getViewMatrix(),this._cachedWorldViewMatrix),G.setMatrix("worldView",this._cachedWorldViewMatrix)),-1!==P.indexOf("worldViewProjection")&&(w.multiplyToRef(h.getTransformMatrix(),this._cachedWorldViewProjectionMatrix),G.setMatrix("worldViewProjection",this._cachedWorldViewProjectionMatrix)),-1!==P.indexOf("view")&&G.setMatrix("view",h.getViewMatrix())}bindForSubMesh(w,E,G){var P;this.bind(w,E,null===(P=G._drawWrapperOverride)||void 0===P?void 0:P.effect,G)}bind(w,E,G,P){const h=P&&this._storeEffectOnSubMeshes,B=G??(h?P.effect:this.getEffect());if(!B)return;const y=this.Ww();this._activeEffect=B,this.bindOnlyWorldMatrix(w,G);const x=this._options.uniformBuffers;let U=!1;if(B&&x&&x.length>0&&y.getEngine().supportsUniformBuffers)for(let O=0;O<x.length;++O){switch(x[O]){case"Mesh":E&&(E.getMeshUniformBuffer().bindToEffect(B,"Mesh"),E.transferToEffect(w));break;case"Scene":(0,a.t)(B,y.getSceneUniformBuffer()),y.finalizeSceneUbo(),U=!0}}const l=E&&h?this._mustRebind(y,B,P,E.visibility):y.getCachedMaterial()!==this;if(B&&l){let w;for(w in U||-1===this._options.uniforms.indexOf("view")||B.setMatrix("view",y.getViewMatrix()),U||-1===this._options.uniforms.indexOf("projection")||B.setMatrix("projection",y.getProjectionMatrix()),U||-1===this._options.uniforms.indexOf("viewProjection")||(B.setMatrix("viewProjection",y.getTransformMatrix()),this._multiview&&B.setMatrix("viewProjectionR",y._transformMatrixR)),y.activeCamera&&-1!==this._options.uniforms.indexOf("cameraPosition")&&B.setVector3("cameraPosition",y.activeCamera.globalPosition),(0,a.e)(E,B),(0,V.e)(B,this,y),this._useLogarithmicDepth&&(0,a.n)(h?P.materialDefines:B.defines,B,y),E&&(0,a.h)(y,E,B),this._textures)B.setTexture(w,this._textures[w]);for(w in this._textureArrays)B.setTextureArray(w,this._textureArrays[w]);for(w in this._ints)B.setInt(w,this._ints[w]);for(w in this._uints)B.setUInt(w,this._uints[w]);for(w in this._floats)B.setFloat(w,this._floats[w]);for(w in this._floatsArrays)B.setArray(w,this._floatsArrays[w]);for(w in this._colors3)B.setColor3(w,this._colors3[w]);for(w in this._colors3Arrays)B.setArray3(w,this._colors3Arrays[w]);for(w in this._colors4){const E=this._colors4[w];B.setFloat4(w,E.r,E.g,E.b,E.a)}for(w in this._colors4Arrays)B.setArray4(w,this._colors4Arrays[w]);for(w in this._vectors2)B.setVector2(w,this._vectors2[w]);for(w in this._vectors3)B.setVector3(w,this._vectors3[w]);for(w in this._vectors4)B.setVector4(w,this._vectors4[w]);for(w in this._quaternions)B.setQuaternion(w,this._quaternions[w]);for(w in this._matrices)B.setMatrix(w,this._matrices[w]);for(w in this._matrixArrays)B.setMatrices(w,this._matrixArrays[w]);for(w in this._matrices3x3)B.setMatrix3x3(w,this._matrices3x3[w]);for(w in this._matrices2x2)B.setMatrix2x2(w,this._matrices2x2[w]);for(w in this._vectors2Arrays)B.setArray2(w,this._vectors2Arrays[w]);for(w in this._vectors3Arrays)B.setArray3(w,this._vectors3Arrays[w]);for(w in this._vectors4Arrays)B.setArray4(w,this._vectors4Arrays[w]);for(w in this._quaternionsArrays)B.setArray4(w,this._quaternionsArrays[w]);for(w in this._uniformBuffers){const E=this._uniformBuffers[w].getBuffer();E&&B.bindUniformBuffer(E,w)}const G=y.getEngine(),x=G.setExternalTexture;if(x)for(w in this._externalTextures)x.call(G,w,this._externalTextures[w]);const l=G.setTextureSampler;if(l)for(w in this._textureSamplers)l.call(G,w,this._textureSamplers[w]);const i=G.setStorageBuffer;if(i)for(w in this._storageBuffers)i.call(G,w,this._storageBuffers[w])}if(B&&E&&(l||!this.isFrozen)){(0,a.p)(E,B),E.morphTargetManager&&E.morphTargetManager.isUsingTextureForTargets&&E.morphTargetManager._bind(B);const w=E.bakedVertexAnimationManager;if(w&&w.isEnabled){var i;const w=h?P._drawWrapper:this._drawWrapper;null===(i=E.bakedVertexAnimationManager)||void 0===i||i.bind(B,!!w._wasPreviouslyUsingInstances)}}this._afterBind(E,B,P)}getActiveTextures(){const w=super.getActiveTextures();for(const E in this._textures)w.push(this._textures[E]);for(const E in this._textureArrays){const G=this._textureArrays[E];for(let E=0;E<G.length;E++)w.push(G[E])}return w}hasTexture(w){if(super.hasTexture(w))return!0;for(const E in this._textures)if(this._textures[E]===w)return!0;for(const E in this._textureArrays){const G=this._textureArrays[E];for(let E=0;E<G.length;E++)if(G[E]===w)return!0}return!1}clone(w){const E=P.b.Clone((()=>new c(w,this.Ww(),this._shaderPath,this._options,this._storeEffectOnSubMeshes)),this);E.name=w,E.id=w,"object"===typeof E._shaderPath&&(E._shaderPath={...E._shaderPath}),this._options={...this._options};const G=Object.keys(this._options);for(const P of G){const w=this._options[P];Array.isArray(w)&&(this._options[P]=w.slice(0))}this.stencil.copyTo(E.stencil);for(const P in this._textures)E.setTexture(P,this._textures[P]);for(const P in this._textureArrays)E.setTextureArray(P,this._textureArrays[P]);for(const P in this._externalTextures)E.setExternalTexture(P,this._externalTextures[P]);for(const P in this._ints)E.setInt(P,this._ints[P]);for(const P in this._uints)E.setUInt(P,this._uints[P]);for(const P in this._floats)E.setFloat(P,this._floats[P]);for(const P in this._floatsArrays)E.setFloats(P,this._floatsArrays[P]);for(const P in this._colors3)E.setColor3(P,this._colors3[P]);for(const P in this._colors3Arrays)E._colors3Arrays[P]=this._colors3Arrays[P];for(const P in this._colors4)E.setColor4(P,this._colors4[P]);for(const P in this._colors4Arrays)E._colors4Arrays[P]=this._colors4Arrays[P];for(const P in this._vectors2)E.setVector2(P,this._vectors2[P]);for(const P in this._vectors3)E.setVector3(P,this._vectors3[P]);for(const P in this._vectors4)E.setVector4(P,this._vectors4[P]);for(const P in this._quaternions)E.setQuaternion(P,this._quaternions[P]);for(const P in this._quaternionsArrays)E._quaternionsArrays[P]=this._quaternionsArrays[P];for(const P in this._matrices)E.setMatrix(P,this._matrices[P]);for(const P in this._matrixArrays)E._matrixArrays[P]=this._matrixArrays[P].slice();for(const P in this._matrices3x3)E.setMatrix3x3(P,this._matrices3x3[P]);for(const P in this._matrices2x2)E.setMatrix2x2(P,this._matrices2x2[P]);for(const P in this._vectors2Arrays)E.setArray2(P,this._vectors2Arrays[P]);for(const P in this._vectors3Arrays)E.setArray3(P,this._vectors3Arrays[P]);for(const P in this._vectors4Arrays)E.setArray4(P,this._vectors4Arrays[P]);for(const P in this._uniformBuffers)E.setUniformBuffer(P,this._uniformBuffers[P]);for(const P in this._textureSamplers)E.setTextureSampler(P,this._textureSamplers[P]);for(const P in this._storageBuffers)E.setStorageBuffer(P,this._storageBuffers[P]);return E}dispose(w,E,G){if(E){let w;for(w in this._textures)this._textures[w].dispose();for(w in this._textureArrays){const E=this._textureArrays[w];for(let w=0;w<E.length;w++)E[w].dispose()}}this._textures={},super.dispose(w,E,G)}serialize(){const w=P.b.Serialize(this);let E;for(E in w.customType="BABYLON.ShaderMaterial",w.uniqueId=this.uniqueId,w.options=this._options,w.shaderPath=this._shaderPath,w.storeEffectOnSubMeshes=this._storeEffectOnSubMeshes,w.stencil=this.stencil.serialize(),w.textures={},this._textures)w.textures[E]=this._textures[E].serialize();for(E in w.textureArrays={},this._textureArrays){w.textureArrays[E]=[];const G=this._textureArrays[E];for(let P=0;P<G.length;P++)w.textureArrays[E].push(G[P].serialize())}for(E in w.ints={},this._ints)w.ints[E]=this._ints[E];for(E in w.uints={},this._uints)w.uints[E]=this._uints[E];for(E in w.floats={},this._floats)w.floats[E]=this._floats[E];for(E in w.floatsArrays={},this._floatsArrays)w.floatsArrays[E]=this._floatsArrays[E];for(E in w.colors3={},this._colors3){const G=this._colors3[E];w.colors3[E]=[G.r,G.g,G.b]}for(E in w.colors3Arrays={},this._colors3Arrays)w.colors3Arrays[E]=this._colors3Arrays[E];for(E in w.colors4={},this._colors4){const G=this._colors4[E];w.colors4[E]=[G.r,G.g,G.b,G.a]}for(E in w.colors4Arrays={},this._colors4Arrays)w.colors4Arrays[E]=this._colors4Arrays[E];for(E in w.vectors2={},this._vectors2){const G=this._vectors2[E];w.vectors2[E]=[G.x,G.y]}for(E in w.vectors3={},this._vectors3){const G=this._vectors3[E];w.vectors3[E]=[G.x,G.y,G.z]}for(E in w.vectors4={},this._vectors4){const G=this._vectors4[E];w.vectors4[E]=[G.x,G.y,G.z,G.w]}for(E in w.quaternions={},this._quaternions)w.quaternions[E]=this._quaternions[E].Lh();for(E in w.matrices={},this._matrices)w.matrices[E]=this._matrices[E].Lh();for(E in w.matrixArray={},this._matrixArrays)w.matrixArray[E]=this._matrixArrays[E];for(E in w.matrices3x3={},this._matrices3x3)w.matrices3x3[E]=this._matrices3x3[E];for(E in w.matrices2x2={},this._matrices2x2)w.matrices2x2[E]=this._matrices2x2[E];for(E in w.vectors2Arrays={},this._vectors2Arrays)w.vectors2Arrays[E]=this._vectors2Arrays[E];for(E in w.vectors3Arrays={},this._vectors3Arrays)w.vectors3Arrays[E]=this._vectors3Arrays[E];for(E in w.vectors4Arrays={},this._vectors4Arrays)w.vectors4Arrays[E]=this._vectors4Arrays[E];for(E in w.quaternionsArrays={},this._quaternionsArrays)w.quaternionsArrays[E]=this._quaternionsArrays[E];return w}static Parse(w,E,G){const h=P.b.Parse((()=>new c(w.name,E,w.shaderPath,w.options,w.storeEffectOnSubMeshes)),w,E,G);let y;for(y in w.stencil&&h.stencil.parse(w.stencil,E,G),w.textures)h.setTexture(y,x.c.Parse(w.textures[y],E,G));for(y in w.textureArrays){const P=w.textureArrays[y],B=[];for(let w=0;w<P.length;w++)B.push(x.c.Parse(P[w],E,G));h.setTextureArray(y,B)}for(y in w.ints)h.setInt(y,w.ints[y]);for(y in w.uints)h.setUInt(y,w.uints[y]);for(y in w.floats)h.setFloat(y,w.floats[y]);for(y in w.floatsArrays)h.setFloats(y,w.floatsArrays[y]);for(y in w.colors3){const E=w.colors3[y];h.setColor3(y,{r:E[0],g:E[1],b:E[2]})}for(y in w.colors3Arrays){const E=w.colors3Arrays[y].reduce(((w,E,G)=>(G%3===0?w.push([E]):w[w.length-1].push(E),w)),[]).map((w=>({r:w[0],g:w[1],b:w[2]})));h.setColor3Array(y,E)}for(y in w.colors4){const E=w.colors4[y];h.setColor4(y,{r:E[0],g:E[1],b:E[2],a:E[3]})}for(y in w.colors4Arrays){const E=w.colors4Arrays[y].reduce(((w,E,G)=>(G%4===0?w.push([E]):w[w.length-1].push(E),w)),[]).map((w=>({r:w[0],g:w[1],b:w[2],a:w[3]})));h.setColor4Array(y,E)}for(y in w.vectors2){const E=w.vectors2[y];h.setVector2(y,{x:E[0],y:E[1]})}for(y in w.vectors3){const E=w.vectors3[y];h.setVector3(y,{x:E[0],y:E[1],z:E[2]})}for(y in w.vectors4){const E=w.vectors4[y];h.setVector4(y,{x:E[0],y:E[1],z:E[2],w:E[3]})}for(y in w.quaternions)h.setQuaternion(y,B.Quaternion.KE(w.quaternions[y]));for(y in w.matrices)h.setMatrix(y,B.Matrix.KE(w.matrices[y]));for(y in w.matrixArray)h._matrixArrays[y]=new Float32Array(w.matrixArray[y]);for(y in w.matrices3x3)h.setMatrix3x3(y,w.matrices3x3[y]);for(y in w.matrices2x2)h.setMatrix2x2(y,w.matrices2x2[y]);for(y in w.vectors2Arrays)h.setArray2(y,w.vectors2Arrays[y]);for(y in w.vectors3Arrays)h.setArray3(y,w.vectors3Arrays[y]);for(y in w.vectors4Arrays)h.setArray4(y,w.vectors4Arrays[y]);for(y in w.quaternionsArrays)h.setArray4(y,w.quaternionsArrays[y]);return h}static async ParseFromFileAsync(w,E,G){let P=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return await new Promise(((h,B)=>{const y=new i.c;y.addEventListener("readystatechange",(()=>{if(4==y.readyState)if(200==y.status){const E=JSON.parse(y.responseText),B=this.Parse(E,G||u.e.LastCreatedScene,P);w&&(B.name=w),h(B)}else B("Unable to load the ShaderMaterial")})),y.open("GET",E),y.send()}))}static async ParseFromSnippetAsync(w,E){let G=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return await new Promise(((P,h)=>{const B=new i.c;B.addEventListener("readystatechange",(()=>{if(4==B.readyState)if(200==B.status){const h=JSON.parse(JSON.parse(B.responseText).jsonPayload),y=JSON.parse(h.shaderMaterial),x=this.Parse(y,E||u.e.LastCreatedScene,G);x.snippetId=w,P(x)}else h("Unable to load the snippet "+w)})),B.open("GET",this.SnippetUrl+"/"+w.replace(/#/g,"/")),B.send()}))}}c.SnippetUrl="https://snippet.babylonjs.com",c.CreateFromSnippetAsync=c.ParseFromSnippetAsync,(0,U.g)("BABYLON.ShaderMaterial",c)}}]);