"use strict";(self.v2pspxy442l=self.v2pspxy442l||[]).push([[22],{12671:(l,a,N)=>{N.r(a),N.d(a,{ShaderMaterial:()=>B});var U=N(12471),c=N(12678),K=N(12447),Z=N(12506),w=N(12422),S=N(12394),T=N(12737),J=N(12292),n=N(12746),y=N(12296),H=N(12804),u=N(12798);const W={effect:null,subMesh:null};class B extends n.e{constructor(l,a,N){let U=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(l,a,!(arguments.length>4&&void 0!==arguments[4])||arguments[4]),this._textures={},this._textureArrays={},this._externalTextures={},this._floats={},this._ints={},this._uints={},this._floatsArrays={},this._colors3={},this._colors3Arrays={},this._colors4={},this._colors4Arrays={},this._vectors2={},this._vectors3={},this._vectors4={},this._quaternions={},this._quaternionsArrays={},this._matrices={},this._matrixArrays={},this._matrices3x3={},this._matrices2x2={},this._vectors2Arrays={},this._vectors3Arrays={},this._vectors4Arrays={},this._uniformBuffers={},this._textureSamplers={},this._storageBuffers={},this._cachedWorldViewMatrix=new K.Matrix,this._cachedWorldViewProjectionMatrix=new K.Matrix,this._multiview=!1,this._materialHelperNeedsPreviousMatrices=!1,this._shaderPath=N,this._options={needAlphaBlending:!1,needAlphaTesting:!1,attributes:["position","normal","uv"],uniforms:["worldViewProjection"],uniformBuffers:[],samplers:[],externalTextures:[],samplerObjects:[],storageBuffers:[],defines:[],useClipPlane:!1,...U}}get shaderPath(){return this._shaderPath}set shaderPath(l){this._shaderPath=l}get options(){return this._options}get isMultiview(){return this._multiview}getClassName(){return"ShaderMaterial"}needAlphaBlending(){return this.alpha<1||this._options.needAlphaBlending}needAlphaTesting(){return this._options.needAlphaTesting}_checkUniform(l){-1===this._options.uniforms.indexOf(l)&&this._options.uniforms.push(l)}setTexture(l,a){return-1===this._options.samplers.indexOf(l)&&this._options.samplers.push(l),this._textures[l]=a,this}removeTexture(l){delete this._textures[l]}setTextureArray(l,a){return-1===this._options.samplers.indexOf(l)&&this._options.samplers.push(l),this._checkUniform(l),this._textureArrays[l]=a,this}setExternalTexture(l,a){return-1===this._options.externalTextures.indexOf(l)&&this._options.externalTextures.push(l),this._externalTextures[l]=a,this}setFloat(l,a){return this._checkUniform(l),this._floats[l]=a,this}setInt(l,a){return this._checkUniform(l),this._ints[l]=a,this}setUInt(l,a){return this._checkUniform(l),this._uints[l]=a,this}setFloats(l,a){return this._checkUniform(l),this._floatsArrays[l]=a,this}setColor3(l,a){return this._checkUniform(l),this._colors3[l]=a,this}setColor3Array(l,a){return this._checkUniform(l),this._colors3Arrays[l]=a.reduce(((l,a)=>(l.push(a.r,a.g,a.b),l)),[]),this}setColor4(l,a){return this._checkUniform(l),this._colors4[l]=a,this}setColor4Array(l,a){return this._checkUniform(l),this._colors4Arrays[l]=a.reduce(((l,a)=>(l.push(a.r,a.g,a.b,a.a),l)),[]),this}setVector2(l,a){return this._checkUniform(l),this._vectors2[l]=a,this}setVector3(l,a){return this._checkUniform(l),this._vectors3[l]=a,this}setVector4(l,a){return this._checkUniform(l),this._vectors4[l]=a,this}setQuaternion(l,a){return this._checkUniform(l),this._quaternions[l]=a,this}setQuaternionArray(l,a){return this._checkUniform(l),this._quaternionsArrays[l]=a.reduce(((l,a)=>(a.toArray(l,l.length),l)),[]),this}setMatrix(l,a){return this._checkUniform(l),this._matrices[l]=a,this}setMatrices(l,a){this._checkUniform(l);const N=new Float32Array(16*a.length);for(let U=0;U<a.length;U++){a[U].copyToArray(N,16*U)}return this._matrixArrays[l]=N,this}setMatrix3x3(l,a){return this._checkUniform(l),this._matrices3x3[l]=a,this}setMatrix2x2(l,a){return this._checkUniform(l),this._matrices2x2[l]=a,this}setArray2(l,a){return this._checkUniform(l),this._vectors2Arrays[l]=a,this}setArray3(l,a){return this._checkUniform(l),this._vectors3Arrays[l]=a,this}setArray4(l,a){return this._checkUniform(l),this._vectors4Arrays[l]=a,this}setUniformBuffer(l,a){return-1===this._options.uniformBuffers.indexOf(l)&&this._options.uniformBuffers.push(l),this._uniformBuffers[l]=a,this}setTextureSampler(l,a){return-1===this._options.samplerObjects.indexOf(l)&&this._options.samplerObjects.push(l),this._textureSamplers[l]=a,this}setStorageBuffer(l,a){return-1===this._options.storageBuffers.indexOf(l)&&this._options.storageBuffers.push(l),this._storageBuffers[l]=a,this}setDefine(l,a){const N=l.trimEnd()+" ",U=this.options.defines.findIndex((a=>a===l||a.startsWith(N)));return U>=0&&this.options.defines.splice(U,1),("boolean"!==typeof a||a)&&this.options.defines.push(N+a),this}isReadyForSubMesh(l,a,N){return this.isReady(l,N,a)}isReady(l,a,N){var U;const K=N&&this._storeEffectOnSubMeshes;if(this.isFrozen){const l=K?N._drawWrapper:this._drawWrapper;if(l.effect&&l._wasPreviouslyReady&&l._wasPreviouslyUsingInstances===a)return!0}const w=this.bl(),S=w.getEngine(),J=[],n=[];let y=null,B=this._shaderPath,Y=this._options.uniforms,C=this._options.uniformBuffers,M=this._options.samplers;S.getCaps().multiview&&w.activeCamera&&w.activeCamera.outputRenderTarget&&w.activeCamera.outputRenderTarget.getViewCount()>1&&(this._multiview=!0,J.push("#define MULTIVIEW"),-1!==Y.indexOf("viewProjection")&&-1===Y.indexOf("viewProjectionR")&&Y.push("viewProjectionR"));for(let c=0;c<this._options.defines.length;c++){const l=0===this._options.defines[c].indexOf("#define")?this._options.defines[c]:`#define ${this._options.defines[c]}`;J.push(l)}for(let c=0;c<this._options.attributes.length;c++)n.push(this._options.attributes[c]);if(l&&l.isVerticesDataPresent(Z.h.ColorKind)&&(-1===n.indexOf(Z.h.ColorKind)&&n.push(Z.h.ColorKind),J.push("#define VERTEXCOLOR")),a&&(J.push("#define INSTANCES"),(0,u.eb)(n,this._materialHelperNeedsPreviousMatrices),null!==l&&void 0!==l&&l.hasThinInstances&&(J.push("#define THIN_INSTANCES"),l&&l.isVerticesDataPresent(Z.h.ColorInstanceKind)&&(n.push(Z.h.ColorInstanceKind),J.push("#define INSTANCESCOLOR")))),l&&l.useBones&&l.computeBonesUsingShaders&&l.skeleton){n.push(Z.h.MatricesIndicesKind),n.push(Z.h.MatricesWeightsKind),l.numBoneInfluencers>4&&(n.push(Z.h.MatricesIndicesExtraKind),n.push(Z.h.MatricesWeightsExtraKind));const a=l.skeleton;J.push("#define NUM_BONE_INFLUENCERS "+l.numBoneInfluencers),y=new T.e,y.addCPUSkinningFallback(0,l),a.isUsingTextureForMatrices?(J.push("#define BONETEXTURE"),-1===Y.indexOf("boneTextureWidth")&&Y.push("boneTextureWidth"),-1===this._options.samplers.indexOf("boneSampler")&&this._options.samplers.push("boneSampler")):(J.push("#define BonesPerMesh "+(a.bones.length+1)),-1===Y.indexOf("mBones")&&Y.push("mBones"))}else J.push("#define NUM_BONE_INFLUENCERS 0");let A=0;const E=l?l.morphTargetManager:null;if(E){const a=-1!==J.indexOf("#define UV1"),N=-1!==J.indexOf("#define UV2"),U=-1!==J.indexOf("#define TANGENT"),c=-1!==J.indexOf("#define NORMAL"),K=-1!==J.indexOf("#define VERTEXCOLOR");A=(0,u.F)(E,J,n,l,!0,c,U,a,N,K),E.isUsingTextureForTargets&&(-1===Y.indexOf("morphTargetTextureIndices")&&Y.push("morphTargetTextureIndices"),-1===this._options.samplers.indexOf("morphTargets")&&this._options.samplers.push("morphTargets")),A>0&&(Y=Y.slice(),Y.push("morphTargetInfluences"),Y.push("morphTargetCount"),Y.push("morphTargetTextureInfo"),Y.push("morphTargetTextureIndices"))}else J.push("#define NUM_MORPH_INFLUENCERS 0");if(l){const a=l.bakedVertexAnimationManager;a&&a.isEnabled&&(J.push("#define BAKED_VERTEX_ANIMATION_TEXTURE"),-1===Y.indexOf("bakedVertexAnimationSettings")&&Y.push("bakedVertexAnimationSettings"),-1===Y.indexOf("bakedVertexAnimationTextureSizeInverted")&&Y.push("bakedVertexAnimationTextureSizeInverted"),-1===Y.indexOf("bakedVertexAnimationTime")&&Y.push("bakedVertexAnimationTime"),-1===this._options.samplers.indexOf("bakedVertexAnimationTexture")&&this._options.samplers.push("bakedVertexAnimationTexture")),(0,u.u)(n,l,J)}for(const c in this._textures)if(!this._textures[c].isReady())return!1;l&&this.needAlphaTestingForMesh(l)&&J.push("#define ALPHATEST"),!1!==this._options.useClipPlane&&((0,H.c)(Y),(0,H.g)(this,w,J)),w.fogEnabled&&null!==l&&void 0!==l&&l.applyFog&&w.fogMode!==c.d.FOGMODE_NONE&&(J.push("#define FOG"),-1===Y.indexOf("view")&&Y.push("view"),-1===Y.indexOf("vFogInfos")&&Y.push("vFogInfos"),-1===Y.indexOf("vFogColor")&&Y.push("vFogColor")),this._useLogarithmicDepth&&(J.push("#define LOGARITHMICDEPTH"),-1===Y.indexOf("logarithmicDepthConstant")&&Y.push("logarithmicDepthConstant")),this.customShaderNameResolve&&(Y=Y.slice(),C=C.slice(),M=M.slice(),B=this.customShaderNameResolve(this.name,Y,C,M,J,n));const q=K?N._getDrawWrapper(void 0,!0):this._drawWrapper,b=(null===q||void 0===q?void 0:q.effect)??null,z=(null===q||void 0===q?void 0:q.defines)??null,I=J.join("\n");let t=b;return z!==I&&(t=S.createEffect(B,{attributes:n,uniformsNames:Y,uniformBuffersNames:C,samplers:M,defines:I,fallbacks:y,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousMorphTargets:A},shaderLanguage:this._options.shaderLanguage,extraInitializationsAsync:this._options.extraInitializationsAsync},S),K?N.setEffect(t,I,this._materialContext):q&&q.setEffect(t,I),this._onEffectCreatedObservable&&(W.effect=t,W.subMesh=N??(null===l||void 0===l?void 0:l.Wc[0])??null,this._onEffectCreatedObservable.notifyObservers(W))),q._wasPreviouslyUsingInstances=!!a,!(null===(U=t)||void 0===U||!U.isReady())&&(b!==t&&w.resetCachedMaterial(),q._wasPreviouslyReady=!0,!0)}bindOnlyWorldMatrix(l,a){const N=a??this.getEffect();if(!N)return;const U=this._options.uniforms;-1!==U.indexOf("world")&&N.setMatrix("world",l);const c=this.bl();-1!==U.indexOf("worldView")&&(l.multiplyToRef(c.getViewMatrix(),this._cachedWorldViewMatrix),N.setMatrix("worldView",this._cachedWorldViewMatrix)),-1!==U.indexOf("worldViewProjection")&&(l.multiplyToRef(c.getTransformMatrix(),this._cachedWorldViewProjectionMatrix),N.setMatrix("worldViewProjection",this._cachedWorldViewProjectionMatrix)),-1!==U.indexOf("view")&&N.setMatrix("view",c.getViewMatrix())}bindForSubMesh(l,a,N){var U;this.bind(l,a,null===(U=N._drawWrapperOverride)||void 0===U?void 0:U.effect,N)}bind(l,a,N,U){const c=U&&this._storeEffectOnSubMeshes,K=N??(c?U.effect:this.getEffect());if(!K)return;const Z=this.bl();this._activeEffect=K,this.bindOnlyWorldMatrix(l,N);const w=this._options.uniformBuffers;let S=!1;if(K&&w&&w.length>0&&Z.getEngine().supportsUniformBuffers)for(let n=0;n<w.length;++n){switch(w[n]){case"Mesh":a&&(a.getMeshUniformBuffer().bindToEffect(K,"Mesh"),a.transferToEffect(l));break;case"Scene":(0,u.n)(K,Z.getSceneUniformBuffer()),Z.finalizeSceneUbo(),S=!0}}const T=a&&c?this._mustRebind(Z,K,U,a.visibility):Z.getCachedMaterial()!==this;if(K&&T){let l;for(l in S||-1===this._options.uniforms.indexOf("view")||K.setMatrix("view",Z.getViewMatrix()),S||-1===this._options.uniforms.indexOf("projection")||K.setMatrix("projection",Z.getProjectionMatrix()),S||-1===this._options.uniforms.indexOf("viewProjection")||(K.setMatrix("viewProjection",Z.getTransformMatrix()),this._multiview&&K.setMatrix("viewProjectionR",Z._transformMatrixR)),Z.activeCamera&&-1!==this._options.uniforms.indexOf("cameraPosition")&&K.setVector3("cameraPosition",Z.activeCamera.globalPosition),(0,u.d)(a,K),(0,H.d)(K,this,Z),this._useLogarithmicDepth&&(0,u.k)(c?U.materialDefines:K.defines,K,Z),a&&(0,u.h)(Z,a,K),this._textures)K.setTexture(l,this._textures[l]);for(l in this._textureArrays)K.setTextureArray(l,this._textureArrays[l]);for(l in this._ints)K.setInt(l,this._ints[l]);for(l in this._uints)K.setUInt(l,this._uints[l]);for(l in this._floats)K.setFloat(l,this._floats[l]);for(l in this._floatsArrays)K.setArray(l,this._floatsArrays[l]);for(l in this._colors3)K.setColor3(l,this._colors3[l]);for(l in this._colors3Arrays)K.setArray3(l,this._colors3Arrays[l]);for(l in this._colors4){const a=this._colors4[l];K.setFloat4(l,a.r,a.g,a.b,a.a)}for(l in this._colors4Arrays)K.setArray4(l,this._colors4Arrays[l]);for(l in this._vectors2)K.setVector2(l,this._vectors2[l]);for(l in this._vectors3)K.setVector3(l,this._vectors3[l]);for(l in this._vectors4)K.setVector4(l,this._vectors4[l]);for(l in this._quaternions)K.setQuaternion(l,this._quaternions[l]);for(l in this._matrices)K.setMatrix(l,this._matrices[l]);for(l in this._matrixArrays)K.setMatrices(l,this._matrixArrays[l]);for(l in this._matrices3x3)K.setMatrix3x3(l,this._matrices3x3[l]);for(l in this._matrices2x2)K.setMatrix2x2(l,this._matrices2x2[l]);for(l in this._vectors2Arrays)K.setArray2(l,this._vectors2Arrays[l]);for(l in this._vectors3Arrays)K.setArray3(l,this._vectors3Arrays[l]);for(l in this._vectors4Arrays)K.setArray4(l,this._vectors4Arrays[l]);for(l in this._quaternionsArrays)K.setArray4(l,this._quaternionsArrays[l]);for(l in this._uniformBuffers){const a=this._uniformBuffers[l].getBuffer();a&&K.bindUniformBuffer(a,l)}const N=Z.getEngine(),w=N.setExternalTexture;if(w)for(l in this._externalTextures)w.call(N,l,this._externalTextures[l]);const T=N.setTextureSampler;if(T)for(l in this._textureSamplers)T.call(N,l,this._textureSamplers[l]);const J=N.setStorageBuffer;if(J)for(l in this._storageBuffers)J.call(N,l,this._storageBuffers[l])}if(K&&a&&(T||!this.isFrozen)){(0,u.m)(a,K),a.morphTargetManager&&a.morphTargetManager.isUsingTextureForTargets&&a.morphTargetManager._bind(K);const l=a.bakedVertexAnimationManager;if(l&&l.isEnabled){var J;const l=c?U._drawWrapper:this._drawWrapper;null===(J=a.bakedVertexAnimationManager)||void 0===J||J.bind(K,!!l._wasPreviouslyUsingInstances)}}this._afterBind(a,K,U)}getActiveTextures(){const l=super.getActiveTextures();for(const a in this._textures)l.push(this._textures[a]);for(const a in this._textureArrays){const N=this._textureArrays[a];for(let a=0;a<N.length;a++)l.push(N[a])}return l}hasTexture(l){if(super.hasTexture(l))return!0;for(const a in this._textures)if(this._textures[a]===l)return!0;for(const a in this._textureArrays){const N=this._textureArrays[a];for(let a=0;a<N.length;a++)if(N[a]===l)return!0}return!1}clone(l){const a=U.c.Clone((()=>new B(l,this.bl(),this._shaderPath,this._options,this._storeEffectOnSubMeshes)),this);a.name=l,a.id=l,"object"===typeof a._shaderPath&&(a._shaderPath={...a._shaderPath}),this._options={...this._options};const N=Object.keys(this._options);for(const U of N){const l=this._options[U];Array.isArray(l)&&(this._options[U]=l.slice(0))}this.Jc.copyTo(a.Jc);for(const U in this._textures)a.setTexture(U,this._textures[U]);for(const U in this._textureArrays)a.setTextureArray(U,this._textureArrays[U]);for(const U in this._externalTextures)a.setExternalTexture(U,this._externalTextures[U]);for(const U in this._ints)a.setInt(U,this._ints[U]);for(const U in this._uints)a.setUInt(U,this._uints[U]);for(const U in this._floats)a.setFloat(U,this._floats[U]);for(const U in this._floatsArrays)a.setFloats(U,this._floatsArrays[U]);for(const U in this._colors3)a.setColor3(U,this._colors3[U]);for(const U in this._colors3Arrays)a._colors3Arrays[U]=this._colors3Arrays[U];for(const U in this._colors4)a.setColor4(U,this._colors4[U]);for(const U in this._colors4Arrays)a._colors4Arrays[U]=this._colors4Arrays[U];for(const U in this._vectors2)a.setVector2(U,this._vectors2[U]);for(const U in this._vectors3)a.setVector3(U,this._vectors3[U]);for(const U in this._vectors4)a.setVector4(U,this._vectors4[U]);for(const U in this._quaternions)a.setQuaternion(U,this._quaternions[U]);for(const U in this._quaternionsArrays)a._quaternionsArrays[U]=this._quaternionsArrays[U];for(const U in this._matrices)a.setMatrix(U,this._matrices[U]);for(const U in this._matrixArrays)a._matrixArrays[U]=this._matrixArrays[U].slice();for(const U in this._matrices3x3)a.setMatrix3x3(U,this._matrices3x3[U]);for(const U in this._matrices2x2)a.setMatrix2x2(U,this._matrices2x2[U]);for(const U in this._vectors2Arrays)a.setArray2(U,this._vectors2Arrays[U]);for(const U in this._vectors3Arrays)a.setArray3(U,this._vectors3Arrays[U]);for(const U in this._vectors4Arrays)a.setArray4(U,this._vectors4Arrays[U]);for(const U in this._uniformBuffers)a.setUniformBuffer(U,this._uniformBuffers[U]);for(const U in this._textureSamplers)a.setTextureSampler(U,this._textureSamplers[U]);for(const U in this._storageBuffers)a.setStorageBuffer(U,this._storageBuffers[U]);return a}dispose(l,a,N){if(a){let l;for(l in this._textures)this._textures[l].dispose();for(l in this._textureArrays){const a=this._textureArrays[l];for(let l=0;l<a.length;l++)a[l].dispose()}}this._textures={},super.dispose(l,a,N)}serialize(){const l=U.c.Serialize(this);let a;for(a in l.customType="BABYLON.ShaderMaterial",l.uniqueId=this.uniqueId,l.options=this._options,l.shaderPath=this._shaderPath,l.storeEffectOnSubMeshes=this._storeEffectOnSubMeshes,l.Jc=this.Jc.serialize(),l.textures={},this._textures)l.textures[a]=this._textures[a].serialize();for(a in l.textureArrays={},this._textureArrays){l.textureArrays[a]=[];const N=this._textureArrays[a];for(let U=0;U<N.length;U++)l.textureArrays[a].push(N[U].serialize())}for(a in l.ints={},this._ints)l.ints[a]=this._ints[a];for(a in l.uints={},this._uints)l.uints[a]=this._uints[a];for(a in l.floats={},this._floats)l.floats[a]=this._floats[a];for(a in l.floatsArrays={},this._floatsArrays)l.floatsArrays[a]=this._floatsArrays[a];for(a in l.colors3={},this._colors3){const N=this._colors3[a];l.colors3[a]=[N.r,N.g,N.b]}for(a in l.colors3Arrays={},this._colors3Arrays)l.colors3Arrays[a]=this._colors3Arrays[a];for(a in l.colors4={},this._colors4){const N=this._colors4[a];l.colors4[a]=[N.r,N.g,N.b,N.a]}for(a in l.colors4Arrays={},this._colors4Arrays)l.colors4Arrays[a]=this._colors4Arrays[a];for(a in l.vectors2={},this._vectors2){const N=this._vectors2[a];l.vectors2[a]=[N.x,N.y]}for(a in l.vectors3={},this._vectors3){const N=this._vectors3[a];l.vectors3[a]=[N.x,N.y,N.z]}for(a in l.vectors4={},this._vectors4){const N=this._vectors4[a];l.vectors4[a]=[N.x,N.y,N.z,N.w]}for(a in l.quaternions={},this._quaternions)l.quaternions[a]=this._quaternions[a].Bc();for(a in l.matrices={},this._matrices)l.matrices[a]=this._matrices[a].Bc();for(a in l.matrixArray={},this._matrixArrays)l.matrixArray[a]=this._matrixArrays[a];for(a in l.matrices3x3={},this._matrices3x3)l.matrices3x3[a]=this._matrices3x3[a];for(a in l.matrices2x2={},this._matrices2x2)l.matrices2x2[a]=this._matrices2x2[a];for(a in l.vectors2Arrays={},this._vectors2Arrays)l.vectors2Arrays[a]=this._vectors2Arrays[a];for(a in l.vectors3Arrays={},this._vectors3Arrays)l.vectors3Arrays[a]=this._vectors3Arrays[a];for(a in l.vectors4Arrays={},this._vectors4Arrays)l.vectors4Arrays[a]=this._vectors4Arrays[a];for(a in l.quaternionsArrays={},this._quaternionsArrays)l.quaternionsArrays[a]=this._quaternionsArrays[a];return l}static Parse(l,a,N){const c=U.c.Parse((()=>new B(l.name,a,l.shaderPath,l.options,l.storeEffectOnSubMeshes)),l,a,N);let Z;for(Z in l.Jc&&c.Jc.parse(l.Jc,a,N),l.textures)c.setTexture(Z,w.e.Parse(l.textures[Z],a,N));for(Z in l.textureArrays){const U=l.textureArrays[Z],K=[];for(let l=0;l<U.length;l++)K.push(w.e.Parse(U[l],a,N));c.setTextureArray(Z,K)}for(Z in l.ints)c.setInt(Z,l.ints[Z]);for(Z in l.uints)c.setUInt(Z,l.uints[Z]);for(Z in l.floats)c.setFloat(Z,l.floats[Z]);for(Z in l.floatsArrays)c.setFloats(Z,l.floatsArrays[Z]);for(Z in l.colors3){const a=l.colors3[Z];c.setColor3(Z,{r:a[0],g:a[1],b:a[2]})}for(Z in l.colors3Arrays){const a=l.colors3Arrays[Z].reduce(((l,a,N)=>(N%3===0?l.push([a]):l[l.length-1].push(a),l)),[]).map((l=>({r:l[0],g:l[1],b:l[2]})));c.setColor3Array(Z,a)}for(Z in l.colors4){const a=l.colors4[Z];c.setColor4(Z,{r:a[0],g:a[1],b:a[2],a:a[3]})}for(Z in l.colors4Arrays){const a=l.colors4Arrays[Z].reduce(((l,a,N)=>(N%4===0?l.push([a]):l[l.length-1].push(a),l)),[]).map((l=>({r:l[0],g:l[1],b:l[2],a:l[3]})));c.setColor4Array(Z,a)}for(Z in l.vectors2){const a=l.vectors2[Z];c.setVector2(Z,{x:a[0],y:a[1]})}for(Z in l.vectors3){const a=l.vectors3[Z];c.setVector3(Z,{x:a[0],y:a[1],z:a[2]})}for(Z in l.vectors4){const a=l.vectors4[Z];c.setVector4(Z,{x:a[0],y:a[1],z:a[2],w:a[3]})}for(Z in l.quaternions)c.setQuaternion(Z,K.Quaternion.Ma(l.quaternions[Z]));for(Z in l.matrices)c.setMatrix(Z,K.Matrix.Ma(l.matrices[Z]));for(Z in l.matrixArray)c._matrixArrays[Z]=new Float32Array(l.matrixArray[Z]);for(Z in l.matrices3x3)c.setMatrix3x3(Z,l.matrices3x3[Z]);for(Z in l.matrices2x2)c.setMatrix2x2(Z,l.matrices2x2[Z]);for(Z in l.vectors2Arrays)c.setArray2(Z,l.vectors2Arrays[Z]);for(Z in l.vectors3Arrays)c.setArray3(Z,l.vectors3Arrays[Z]);for(Z in l.vectors4Arrays)c.setArray4(Z,l.vectors4Arrays[Z]);for(Z in l.quaternionsArrays)c.setArray4(Z,l.quaternionsArrays[Z]);return c}static async ParseFromFileAsync(l,a,N){let U=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return await new Promise(((c,K)=>{const Z=new J.c;Z.addEventListener("readystatechange",(()=>{if(4==Z.readyState)if(200==Z.status){const a=JSON.parse(Z.responseText),K=this.Parse(a,N||y.e.LastCreatedScene,U);l&&(K.name=l),c(K)}else K("Unable to load the ShaderMaterial")})),Z.open("GET",a),Z.send()}))}static async ParseFromSnippetAsync(l,a){let N=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return await new Promise(((U,c)=>{const K=new J.c;K.addEventListener("readystatechange",(()=>{if(4==K.readyState)if(200==K.status){const c=JSON.parse(JSON.parse(K.responseText).jsonPayload),Z=JSON.parse(c.shaderMaterial),w=this.Parse(Z,a||y.e.LastCreatedScene,N);w.snippetId=l,U(w)}else c("Unable to load the snippet "+l)})),K.open("GET",this.SnippetUrl+"/"+l.replace(/#/g,"/")),K.send()}))}}B.SnippetUrl="https://snippet.babylonjs.com",B.CreateFromSnippetAsync=B.ParseFromSnippetAsync,(0,S.g)("BABYLON.ShaderMaterial",B)}}]);