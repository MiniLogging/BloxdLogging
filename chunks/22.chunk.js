"use strict";(self.n4ygn1cq9vg=self.n4ygn1cq9vg||[]).push([[22],{12646:(e,d,v)=>{v.r(d),v.d(d,{ShaderMaterial:()=>U});var P=v(12453),p=v(12653),L=v(12420),B=v(12490),X=v(12399),z=v(12381),W=v(12722),V=v(12277),k=v(12731),g=v(12281),F=v(12775),w=v(12767);const G={effect:null,subMesh:null};class U extends k.c{constructor(e,d,v){let P=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(e,d,!(arguments.length>4&&void 0!==arguments[4])||arguments[4]),this._textures={},this._textureArrays={},this._externalTextures={},this._floats={},this._ints={},this._uints={},this._floatsArrays={},this._colors3={},this._colors3Arrays={},this._colors4={},this._colors4Arrays={},this._vectors2={},this._vectors3={},this._vectors4={},this._quaternions={},this._quaternionsArrays={},this._matrices={},this._matrixArrays={},this._matrices3x3={},this._matrices2x2={},this._vectors2Arrays={},this._vectors3Arrays={},this._vectors4Arrays={},this._uniformBuffers={},this._textureSamplers={},this._storageBuffers={},this._cachedWorldViewMatrix=new L.Matrix,this._cachedWorldViewProjectionMatrix=new L.Matrix,this._multiview=!1,this._materialHelperNeedsPreviousMatrices=!1,this._shaderPath=v,this._options={needAlphaBlending:!1,needAlphaTesting:!1,attributes:["position","normal","uv"],uniforms:["worldViewProjection"],uniformBuffers:[],samplers:[],externalTextures:[],samplerObjects:[],storageBuffers:[],defines:[],useClipPlane:!1,...P}}get shaderPath(){return this._shaderPath}set shaderPath(e){this._shaderPath=e}get options(){return this._options}get isMultiview(){return this._multiview}getClassName(){return"ShaderMaterial"}needAlphaBlending(){return this.alpha<1||this._options.needAlphaBlending}needAlphaTesting(){return this._options.needAlphaTesting}_checkUniform(e){-1===this._options.uniforms.indexOf(e)&&this._options.uniforms.push(e)}setTexture(e,d){return-1===this._options.samplers.indexOf(e)&&this._options.samplers.push(e),this._textures[e]=d,this}removeTexture(e){delete this._textures[e]}setTextureArray(e,d){return-1===this._options.samplers.indexOf(e)&&this._options.samplers.push(e),this._checkUniform(e),this._textureArrays[e]=d,this}setExternalTexture(e,d){return-1===this._options.externalTextures.indexOf(e)&&this._options.externalTextures.push(e),this._externalTextures[e]=d,this}setFloat(e,d){return this._checkUniform(e),this._floats[e]=d,this}setInt(e,d){return this._checkUniform(e),this._ints[e]=d,this}setUInt(e,d){return this._checkUniform(e),this._uints[e]=d,this}setFloats(e,d){return this._checkUniform(e),this._floatsArrays[e]=d,this}setColor3(e,d){return this._checkUniform(e),this._colors3[e]=d,this}setColor3Array(e,d){return this._checkUniform(e),this._colors3Arrays[e]=d.reduce(((e,d)=>(e.push(d.r,d.g,d.b),e)),[]),this}setColor4(e,d){return this._checkUniform(e),this._colors4[e]=d,this}setColor4Array(e,d){return this._checkUniform(e),this._colors4Arrays[e]=d.reduce(((e,d)=>(e.push(d.r,d.g,d.b,d.a),e)),[]),this}setVector2(e,d){return this._checkUniform(e),this._vectors2[e]=d,this}setVector3(e,d){return this._checkUniform(e),this._vectors3[e]=d,this}setVector4(e,d){return this._checkUniform(e),this._vectors4[e]=d,this}setQuaternion(e,d){return this._checkUniform(e),this._quaternions[e]=d,this}setQuaternionArray(e,d){return this._checkUniform(e),this._quaternionsArrays[e]=d.reduce(((e,d)=>(d.toArray(e,e.length),e)),[]),this}setMatrix(e,d){return this._checkUniform(e),this._matrices[e]=d,this}setMatrices(e,d){this._checkUniform(e);const v=new Float32Array(16*d.length);for(let P=0;P<d.length;P++){d[P].copyToArray(v,16*P)}return this._matrixArrays[e]=v,this}setMatrix3x3(e,d){return this._checkUniform(e),this._matrices3x3[e]=d,this}setMatrix2x2(e,d){return this._checkUniform(e),this._matrices2x2[e]=d,this}setArray2(e,d){return this._checkUniform(e),this._vectors2Arrays[e]=d,this}setArray3(e,d){return this._checkUniform(e),this._vectors3Arrays[e]=d,this}setArray4(e,d){return this._checkUniform(e),this._vectors4Arrays[e]=d,this}setUniformBuffer(e,d){return-1===this._options.uniformBuffers.indexOf(e)&&this._options.uniformBuffers.push(e),this._uniformBuffers[e]=d,this}setTextureSampler(e,d){return-1===this._options.samplerObjects.indexOf(e)&&this._options.samplerObjects.push(e),this._textureSamplers[e]=d,this}setStorageBuffer(e,d){return-1===this._options.storageBuffers.indexOf(e)&&this._options.storageBuffers.push(e),this._storageBuffers[e]=d,this}setDefine(e,d){const v=e.trimEnd()+" ",P=this.options.defines.findIndex((d=>d===e||d.startsWith(v)));return P>=0&&this.options.defines.splice(P,1),("boolean"!==typeof d||d)&&this.options.defines.push(v+d),this}isReadyForSubMesh(e,d,v){return this.isReady(e,v,d)}isReady(e,d,v){var P;const L=v&&this._storeEffectOnSubMeshes;if(this.isFrozen){const e=L?v._drawWrapper:this._drawWrapper;if(e.effect&&e._wasPreviouslyReady&&e._wasPreviouslyUsingInstances===d)return!0}const X=this.Ae(),z=X.getEngine(),V=[],k=[];let g=null,U=this._shaderPath,D=this._options.uniforms,C=this._options.uniformBuffers,q=this._options.samplers;z.getCaps().multiview&&X.activeCamera&&X.activeCamera.outputRenderTarget&&X.activeCamera.outputRenderTarget.getViewCount()>1&&(this._multiview=!0,V.push("#define MULTIVIEW"),-1!==D.indexOf("viewProjection")&&-1===D.indexOf("viewProjectionR")&&D.push("viewProjectionR"));for(let p=0;p<this._options.defines.length;p++){const e=0===this._options.defines[p].indexOf("#define")?this._options.defines[p]:`#define ${this._options.defines[p]}`;V.push(e)}for(let p=0;p<this._options.attributes.length;p++)k.push(this._options.attributes[p]);if(e&&e.isVerticesDataPresent(B.i.ColorKind)&&(-1===k.indexOf(B.i.ColorKind)&&k.push(B.i.ColorKind),V.push("#define VERTEXCOLOR")),d&&(V.push("#define INSTANCES"),(0,w.jb)(k,this._materialHelperNeedsPreviousMatrices),null!==e&&void 0!==e&&e.hasThinInstances&&(V.push("#define THIN_INSTANCES"),e&&e.isVerticesDataPresent(B.i.ColorInstanceKind)&&(k.push(B.i.ColorInstanceKind),V.push("#define INSTANCESCOLOR")))),e&&e.useBones&&e.computeBonesUsingShaders&&e.skeleton){k.push(B.i.MatricesIndicesKind),k.push(B.i.MatricesWeightsKind),e.numBoneInfluencers>4&&(k.push(B.i.MatricesIndicesExtraKind),k.push(B.i.MatricesWeightsExtraKind));const d=e.skeleton;V.push("#define NUM_BONE_INFLUENCERS "+e.numBoneInfluencers),g=new W.d,g.addCPUSkinningFallback(0,e),d.isUsingTextureForMatrices?(V.push("#define BONETEXTURE"),-1===D.indexOf("boneTextureWidth")&&D.push("boneTextureWidth"),-1===this._options.samplers.indexOf("boneSampler")&&this._options.samplers.push("boneSampler")):(V.push("#define BonesPerMesh "+(d.bones.length+1)),-1===D.indexOf("mBones")&&D.push("mBones"))}else V.push("#define NUM_BONE_INFLUENCERS 0");let h=0;const l=e?e.morphTargetManager:null;if(l){const d=-1!==V.indexOf("#define UV1"),v=-1!==V.indexOf("#define UV2"),P=-1!==V.indexOf("#define TANGENT"),p=-1!==V.indexOf("#define NORMAL"),L=-1!==V.indexOf("#define VERTEXCOLOR");h=(0,w.L)(l,V,k,e,!0,p,P,d,v,L),l.isUsingTextureForTargets&&(-1===D.indexOf("morphTargetTextureIndices")&&D.push("morphTargetTextureIndices"),-1===this._options.samplers.indexOf("morphTargets")&&this._options.samplers.push("morphTargets")),h>0&&(D=D.slice(),D.push("morphTargetInfluences"),D.push("morphTargetCount"),D.push("morphTargetTextureInfo"),D.push("morphTargetTextureIndices"))}else V.push("#define NUM_MORPH_INFLUENCERS 0");if(e){const d=e.bakedVertexAnimationManager;d&&d.isEnabled&&(V.push("#define BAKED_VERTEX_ANIMATION_TEXTURE"),-1===D.indexOf("bakedVertexAnimationSettings")&&D.push("bakedVertexAnimationSettings"),-1===D.indexOf("bakedVertexAnimationTextureSizeInverted")&&D.push("bakedVertexAnimationTextureSizeInverted"),-1===D.indexOf("bakedVertexAnimationTime")&&D.push("bakedVertexAnimationTime"),-1===this._options.samplers.indexOf("bakedVertexAnimationTexture")&&this._options.samplers.push("bakedVertexAnimationTexture")),(0,w.z)(k,e,V)}for(const p in this._textures)if(!this._textures[p].isReady())return!1;e&&this.needAlphaTestingForMesh(e)&&V.push("#define ALPHATEST"),!1!==this._options.useClipPlane&&((0,F.c)(D),(0,F.j)(this,X,V)),X.fogEnabled&&null!==e&&void 0!==e&&e.applyFog&&X.fogMode!==p.d.FOGMODE_NONE&&(V.push("#define FOG"),-1===D.indexOf("view")&&D.push("view"),-1===D.indexOf("vFogInfos")&&D.push("vFogInfos"),-1===D.indexOf("vFogColor")&&D.push("vFogColor")),this._useLogarithmicDepth&&(V.push("#define LOGARITHMICDEPTH"),-1===D.indexOf("logarithmicDepthConstant")&&D.push("logarithmicDepthConstant")),this.customShaderNameResolve&&(D=D.slice(),C=C.slice(),q=q.slice(),U=this.customShaderNameResolve(this.name,D,C,q,V,k));const n=L?v._getDrawWrapper(void 0,!0):this._drawWrapper,A=(null===n||void 0===n?void 0:n.effect)??null,x=(null===n||void 0===n?void 0:n.defines)??null,i=V.join("\n");let me=A;return x!==i&&(me=z.createEffect(U,{attributes:k,uniformsNames:D,uniformBuffersNames:C,samplers:q,defines:i,fallbacks:g,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousMorphTargets:h},shaderLanguage:this._options.shaderLanguage,extraInitializationsAsync:this._options.extraInitializationsAsync},z),L?v.setEffect(me,i,this._materialContext):n&&n.setEffect(me,i),this._onEffectCreatedObservable&&(G.effect=me,G.subMesh=v??(null===e||void 0===e?void 0:e.Qd[0])??null,this._onEffectCreatedObservable.notifyObservers(G))),n._wasPreviouslyUsingInstances=!!d,!(null===(P=me)||void 0===P||!P.isReady())&&(A!==me&&X.resetCachedMaterial(),n._wasPreviouslyReady=!0,!0)}bindOnlyWorldMatrix(e,d){const v=d??this.getEffect();if(!v)return;const P=this._options.uniforms;-1!==P.indexOf("world")&&v.setMatrix("world",e);const p=this.Ae();-1!==P.indexOf("worldView")&&(e.multiplyToRef(p.getViewMatrix(),this._cachedWorldViewMatrix),v.setMatrix("worldView",this._cachedWorldViewMatrix)),-1!==P.indexOf("worldViewProjection")&&(e.multiplyToRef(p.getTransformMatrix(),this._cachedWorldViewProjectionMatrix),v.setMatrix("worldViewProjection",this._cachedWorldViewProjectionMatrix)),-1!==P.indexOf("view")&&v.setMatrix("view",p.getViewMatrix())}bindForSubMesh(e,d,v){var P;this.bind(e,d,null===(P=v._drawWrapperOverride)||void 0===P?void 0:P.effect,v)}bind(e,d,v,P){const p=P&&this._storeEffectOnSubMeshes,L=v??(p?P.effect:this.getEffect());if(!L)return;const B=this.Ae();this._activeEffect=L,this.bindOnlyWorldMatrix(e,v);const X=this._options.uniformBuffers;let z=!1;if(L&&X&&X.length>0&&B.getEngine().supportsUniformBuffers)for(let k=0;k<X.length;++k){switch(X[k]){case"Mesh":d&&(d.getMeshUniformBuffer().bindToEffect(L,"Mesh"),d.transferToEffect(e));break;case"Scene":(0,w.o)(L,B.getSceneUniformBuffer()),B.finalizeSceneUbo(),z=!0}}const W=d&&p?this._mustRebind(B,L,P,d.visibility):B.getCachedMaterial()!==this;if(L&&W){let e;for(e in z||-1===this._options.uniforms.indexOf("view")||L.setMatrix("view",B.getViewMatrix()),z||-1===this._options.uniforms.indexOf("projection")||L.setMatrix("projection",B.getProjectionMatrix()),z||-1===this._options.uniforms.indexOf("viewProjection")||(L.setMatrix("viewProjection",B.getTransformMatrix()),this._multiview&&L.setMatrix("viewProjectionR",B._transformMatrixR)),B.activeCamera&&-1!==this._options.uniforms.indexOf("cameraPosition")&&L.setVector3("cameraPosition",B.activeCamera.globalPosition),(0,w.b)(d,L),(0,F.d)(L,this,B),this._useLogarithmicDepth&&(0,w.i)(p?P.materialDefines:L.defines,L,B),d&&(0,w.e)(B,d,L),this._textures)L.setTexture(e,this._textures[e]);for(e in this._textureArrays)L.setTextureArray(e,this._textureArrays[e]);for(e in this._ints)L.setInt(e,this._ints[e]);for(e in this._uints)L.setUInt(e,this._uints[e]);for(e in this._floats)L.setFloat(e,this._floats[e]);for(e in this._floatsArrays)L.setArray(e,this._floatsArrays[e]);for(e in this._colors3)L.setColor3(e,this._colors3[e]);for(e in this._colors3Arrays)L.setArray3(e,this._colors3Arrays[e]);for(e in this._colors4){const d=this._colors4[e];L.setFloat4(e,d.r,d.g,d.b,d.a)}for(e in this._colors4Arrays)L.setArray4(e,this._colors4Arrays[e]);for(e in this._vectors2)L.setVector2(e,this._vectors2[e]);for(e in this._vectors3)L.setVector3(e,this._vectors3[e]);for(e in this._vectors4)L.setVector4(e,this._vectors4[e]);for(e in this._quaternions)L.setQuaternion(e,this._quaternions[e]);for(e in this._matrices)L.setMatrix(e,this._matrices[e]);for(e in this._matrixArrays)L.setMatrices(e,this._matrixArrays[e]);for(e in this._matrices3x3)L.setMatrix3x3(e,this._matrices3x3[e]);for(e in this._matrices2x2)L.setMatrix2x2(e,this._matrices2x2[e]);for(e in this._vectors2Arrays)L.setArray2(e,this._vectors2Arrays[e]);for(e in this._vectors3Arrays)L.setArray3(e,this._vectors3Arrays[e]);for(e in this._vectors4Arrays)L.setArray4(e,this._vectors4Arrays[e]);for(e in this._quaternionsArrays)L.setArray4(e,this._quaternionsArrays[e]);for(e in this._uniformBuffers){const d=this._uniformBuffers[e].getBuffer();d&&L.bindUniformBuffer(d,e)}const v=B.getEngine(),X=v.setExternalTexture;if(X)for(e in this._externalTextures)X.call(v,e,this._externalTextures[e]);const W=v.setTextureSampler;if(W)for(e in this._textureSamplers)W.call(v,e,this._textureSamplers[e]);const V=v.setStorageBuffer;if(V)for(e in this._storageBuffers)V.call(v,e,this._storageBuffers[e])}if(L&&d&&(W||!this.isFrozen)){(0,w.m)(d,L),d.morphTargetManager&&d.morphTargetManager.isUsingTextureForTargets&&d.morphTargetManager._bind(L);const e=d.bakedVertexAnimationManager;if(e&&e.isEnabled){var V;const e=p?P._drawWrapper:this._drawWrapper;null===(V=d.bakedVertexAnimationManager)||void 0===V||V.bind(L,!!e._wasPreviouslyUsingInstances)}}this._afterBind(d,L,P)}getActiveTextures(){const e=super.getActiveTextures();for(const d in this._textures)e.push(this._textures[d]);for(const d in this._textureArrays){const v=this._textureArrays[d];for(let d=0;d<v.length;d++)e.push(v[d])}return e}hasTexture(e){if(super.hasTexture(e))return!0;for(const d in this._textures)if(this._textures[d]===e)return!0;for(const d in this._textureArrays){const v=this._textureArrays[d];for(let d=0;d<v.length;d++)if(v[d]===e)return!0}return!1}clone(e){const d=P.c.Clone((()=>new U(e,this.Ae(),this._shaderPath,this._options,this._storeEffectOnSubMeshes)),this);d.name=e,d.id=e,"object"===typeof d._shaderPath&&(d._shaderPath={...d._shaderPath}),this._options={...this._options};const v=Object.keys(this._options);for(const P of v){const e=this._options[P];Array.isArray(e)&&(this._options[P]=e.slice(0))}this.hd.copyTo(d.hd);for(const P in this._textures)d.setTexture(P,this._textures[P]);for(const P in this._textureArrays)d.setTextureArray(P,this._textureArrays[P]);for(const P in this._externalTextures)d.setExternalTexture(P,this._externalTextures[P]);for(const P in this._ints)d.setInt(P,this._ints[P]);for(const P in this._uints)d.setUInt(P,this._uints[P]);for(const P in this._floats)d.setFloat(P,this._floats[P]);for(const P in this._floatsArrays)d.setFloats(P,this._floatsArrays[P]);for(const P in this._colors3)d.setColor3(P,this._colors3[P]);for(const P in this._colors3Arrays)d._colors3Arrays[P]=this._colors3Arrays[P];for(const P in this._colors4)d.setColor4(P,this._colors4[P]);for(const P in this._colors4Arrays)d._colors4Arrays[P]=this._colors4Arrays[P];for(const P in this._vectors2)d.setVector2(P,this._vectors2[P]);for(const P in this._vectors3)d.setVector3(P,this._vectors3[P]);for(const P in this._vectors4)d.setVector4(P,this._vectors4[P]);for(const P in this._quaternions)d.setQuaternion(P,this._quaternions[P]);for(const P in this._quaternionsArrays)d._quaternionsArrays[P]=this._quaternionsArrays[P];for(const P in this._matrices)d.setMatrix(P,this._matrices[P]);for(const P in this._matrixArrays)d._matrixArrays[P]=this._matrixArrays[P].slice();for(const P in this._matrices3x3)d.setMatrix3x3(P,this._matrices3x3[P]);for(const P in this._matrices2x2)d.setMatrix2x2(P,this._matrices2x2[P]);for(const P in this._vectors2Arrays)d.setArray2(P,this._vectors2Arrays[P]);for(const P in this._vectors3Arrays)d.setArray3(P,this._vectors3Arrays[P]);for(const P in this._vectors4Arrays)d.setArray4(P,this._vectors4Arrays[P]);for(const P in this._uniformBuffers)d.setUniformBuffer(P,this._uniformBuffers[P]);for(const P in this._textureSamplers)d.setTextureSampler(P,this._textureSamplers[P]);for(const P in this._storageBuffers)d.setStorageBuffer(P,this._storageBuffers[P]);return d}dispose(e,d,v){if(d){let e;for(e in this._textures)this._textures[e].dispose();for(e in this._textureArrays){const d=this._textureArrays[e];for(let e=0;e<d.length;e++)d[e].dispose()}}this._textures={},super.dispose(e,d,v)}serialize(){const e=P.c.Serialize(this);let d;for(d in e.customType="BABYLON.ShaderMaterial",e.uniqueId=this.uniqueId,e.options=this._options,e.shaderPath=this._shaderPath,e.storeEffectOnSubMeshes=this._storeEffectOnSubMeshes,e.hd=this.hd.serialize(),e.textures={},this._textures)e.textures[d]=this._textures[d].serialize();for(d in e.textureArrays={},this._textureArrays){e.textureArrays[d]=[];const v=this._textureArrays[d];for(let P=0;P<v.length;P++)e.textureArrays[d].push(v[P].serialize())}for(d in e.ints={},this._ints)e.ints[d]=this._ints[d];for(d in e.uints={},this._uints)e.uints[d]=this._uints[d];for(d in e.floats={},this._floats)e.floats[d]=this._floats[d];for(d in e.floatsArrays={},this._floatsArrays)e.floatsArrays[d]=this._floatsArrays[d];for(d in e.colors3={},this._colors3){const v=this._colors3[d];e.colors3[d]=[v.r,v.g,v.b]}for(d in e.colors3Arrays={},this._colors3Arrays)e.colors3Arrays[d]=this._colors3Arrays[d];for(d in e.colors4={},this._colors4){const v=this._colors4[d];e.colors4[d]=[v.r,v.g,v.b,v.a]}for(d in e.colors4Arrays={},this._colors4Arrays)e.colors4Arrays[d]=this._colors4Arrays[d];for(d in e.vectors2={},this._vectors2){const v=this._vectors2[d];e.vectors2[d]=[v.x,v.y]}for(d in e.vectors3={},this._vectors3){const v=this._vectors3[d];e.vectors3[d]=[v.x,v.y,v.z]}for(d in e.vectors4={},this._vectors4){const v=this._vectors4[d];e.vectors4[d]=[v.x,v.y,v.z,v.w]}for(d in e.quaternions={},this._quaternions)e.quaternions[d]=this._quaternions[d].Yd();for(d in e.matrices={},this._matrices)e.matrices[d]=this._matrices[d].Yd();for(d in e.matrixArray={},this._matrixArrays)e.matrixArray[d]=this._matrixArrays[d];for(d in e.matrices3x3={},this._matrices3x3)e.matrices3x3[d]=this._matrices3x3[d];for(d in e.matrices2x2={},this._matrices2x2)e.matrices2x2[d]=this._matrices2x2[d];for(d in e.vectors2Arrays={},this._vectors2Arrays)e.vectors2Arrays[d]=this._vectors2Arrays[d];for(d in e.vectors3Arrays={},this._vectors3Arrays)e.vectors3Arrays[d]=this._vectors3Arrays[d];for(d in e.vectors4Arrays={},this._vectors4Arrays)e.vectors4Arrays[d]=this._vectors4Arrays[d];for(d in e.quaternionsArrays={},this._quaternionsArrays)e.quaternionsArrays[d]=this._quaternionsArrays[d];return e}static Parse(e,d,v){const p=P.c.Parse((()=>new U(e.name,d,e.shaderPath,e.options,e.storeEffectOnSubMeshes)),e,d,v);let B;for(B in e.hd&&p.hd.parse(e.hd,d,v),e.textures)p.setTexture(B,X.e.Parse(e.textures[B],d,v));for(B in e.textureArrays){const P=e.textureArrays[B],L=[];for(let e=0;e<P.length;e++)L.push(X.e.Parse(P[e],d,v));p.setTextureArray(B,L)}for(B in e.ints)p.setInt(B,e.ints[B]);for(B in e.uints)p.setUInt(B,e.uints[B]);for(B in e.floats)p.setFloat(B,e.floats[B]);for(B in e.floatsArrays)p.setFloats(B,e.floatsArrays[B]);for(B in e.colors3){const d=e.colors3[B];p.setColor3(B,{r:d[0],g:d[1],b:d[2]})}for(B in e.colors3Arrays){const d=e.colors3Arrays[B].reduce(((e,d,v)=>(v%3===0?e.push([d]):e[e.length-1].push(d),e)),[]).map((e=>({r:e[0],g:e[1],b:e[2]})));p.setColor3Array(B,d)}for(B in e.colors4){const d=e.colors4[B];p.setColor4(B,{r:d[0],g:d[1],b:d[2],a:d[3]})}for(B in e.colors4Arrays){const d=e.colors4Arrays[B].reduce(((e,d,v)=>(v%4===0?e.push([d]):e[e.length-1].push(d),e)),[]).map((e=>({r:e[0],g:e[1],b:e[2],a:e[3]})));p.setColor4Array(B,d)}for(B in e.vectors2){const d=e.vectors2[B];p.setVector2(B,{x:d[0],y:d[1]})}for(B in e.vectors3){const d=e.vectors3[B];p.setVector3(B,{x:d[0],y:d[1],z:d[2]})}for(B in e.vectors4){const d=e.vectors4[B];p.setVector4(B,{x:d[0],y:d[1],z:d[2],w:d[3]})}for(B in e.quaternions)p.setQuaternion(B,L.Quaternion.Nd(e.quaternions[B]));for(B in e.matrices)p.setMatrix(B,L.Matrix.Nd(e.matrices[B]));for(B in e.matrixArray)p._matrixArrays[B]=new Float32Array(e.matrixArray[B]);for(B in e.matrices3x3)p.setMatrix3x3(B,e.matrices3x3[B]);for(B in e.matrices2x2)p.setMatrix2x2(B,e.matrices2x2[B]);for(B in e.vectors2Arrays)p.setArray2(B,e.vectors2Arrays[B]);for(B in e.vectors3Arrays)p.setArray3(B,e.vectors3Arrays[B]);for(B in e.vectors4Arrays)p.setArray4(B,e.vectors4Arrays[B]);for(B in e.quaternionsArrays)p.setArray4(B,e.quaternionsArrays[B]);return p}static async ParseFromFileAsync(e,d,v){let P=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return await new Promise(((p,L)=>{const B=new V.d;B.addEventListener("readystatechange",(()=>{if(4==B.readyState)if(200==B.status){const d=JSON.parse(B.responseText),L=this.Parse(d,v||g.c.LastCreatedScene,P);e&&(L.name=e),p(L)}else L("Unable to load the ShaderMaterial")})),B.open("GET",d),B.send()}))}static async ParseFromSnippetAsync(e,d){let v=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return await new Promise(((P,p)=>{const L=new V.d;L.addEventListener("readystatechange",(()=>{if(4==L.readyState)if(200==L.status){const p=JSON.parse(JSON.parse(L.responseText).jsonPayload),B=JSON.parse(p.shaderMaterial),X=this.Parse(B,d||g.c.LastCreatedScene,v);X.snippetId=e,P(X)}else p("Unable to load the snippet "+e)})),L.open("GET",this.SnippetUrl+"/"+e.replace(/#/g,"/")),L.send()}))}}U.SnippetUrl="https://snippet.babylonjs.com",U.CreateFromSnippetAsync=U.ParseFromSnippetAsync,(0,z.h)("BABYLON.ShaderMaterial",U)}}]);