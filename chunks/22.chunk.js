"use strict";(self["9s4i8ue3jq"]=self["9s4i8ue3jq"]||[]).push([[22],{13037:(a,c,o)=>{o.r(c),o.d(c,{ShaderMaterial:()=>N});var s=o(12845),q=o(13045),t=o(12810),i=o(12882),p=o(12796),G=o(12776),T=o(13118),C=o(12672),j=o(13123),L=o(12680),e=o(13164),g=o(13155);const M={effect:null,subMesh:null};class N extends j.c{constructor(a,c,o){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};super(a,c,!(arguments.length>4&&void 0!==arguments[4])||arguments[4]),this._textures={},this._textureArrays={},this._externalTextures={},this._floats={},this._ints={},this._uints={},this._floatsArrays={},this._colors3={},this._colors3Arrays={},this._colors4={},this._colors4Arrays={},this._vectors2={},this._vectors3={},this._vectors4={},this._quaternions={},this._quaternionsArrays={},this._matrices={},this._matrixArrays={},this._matrices3x3={},this._matrices2x2={},this._vectors2Arrays={},this._vectors3Arrays={},this._vectors4Arrays={},this._uniformBuffers={},this._textureSamplers={},this._storageBuffers={},this._cachedWorldViewMatrix=new t.Matrix,this._cachedWorldViewProjectionMatrix=new t.Matrix,this._multiview=!1,this._materialHelperNeedsPreviousMatrices=!1,this._shaderPath=o,this._options={needAlphaBlending:!1,needAlphaTesting:!1,attributes:["position","normal","uv"],uniforms:["worldViewProjection"],uniformBuffers:[],samplers:[],externalTextures:[],samplerObjects:[],storageBuffers:[],defines:[],useClipPlane:!1,...s}}get shaderPath(){return this._shaderPath}set shaderPath(a){this._shaderPath=a}get options(){return this._options}get isMultiview(){return this._multiview}getClassName(){return"ShaderMaterial"}needAlphaBlending(){return this.alpha<1||this._options.needAlphaBlending}needAlphaTesting(){return this._options.needAlphaTesting}_checkUniform(a){-1===this._options.uniforms.indexOf(a)&&this._options.uniforms.push(a)}setTexture(a,c){return-1===this._options.samplers.indexOf(a)&&this._options.samplers.push(a),this._textures[a]=c,this}removeTexture(a){delete this._textures[a]}setTextureArray(a,c){return-1===this._options.samplers.indexOf(a)&&this._options.samplers.push(a),this._checkUniform(a),this._textureArrays[a]=c,this}setExternalTexture(a,c){return-1===this._options.externalTextures.indexOf(a)&&this._options.externalTextures.push(a),this._externalTextures[a]=c,this}setFloat(a,c){return this._checkUniform(a),this._floats[a]=c,this}setInt(a,c){return this._checkUniform(a),this._ints[a]=c,this}setUInt(a,c){return this._checkUniform(a),this._uints[a]=c,this}setFloats(a,c){return this._checkUniform(a),this._floatsArrays[a]=c,this}setColor3(a,c){return this._checkUniform(a),this._colors3[a]=c,this}setColor3Array(a,c){return this._checkUniform(a),this._colors3Arrays[a]=c.reduce(((a,c)=>(a.push(c.r,c.g,c.b),a)),[]),this}setColor4(a,c){return this._checkUniform(a),this._colors4[a]=c,this}setColor4Array(a,c){return this._checkUniform(a),this._colors4Arrays[a]=c.reduce(((a,c)=>(a.push(c.r,c.g,c.b,c.a),a)),[]),this}setVector2(a,c){return this._checkUniform(a),this._vectors2[a]=c,this}setVector3(a,c){return this._checkUniform(a),this._vectors3[a]=c,this}setVector4(a,c){return this._checkUniform(a),this._vectors4[a]=c,this}setQuaternion(a,c){return this._checkUniform(a),this._quaternions[a]=c,this}setQuaternionArray(a,c){return this._checkUniform(a),this._quaternionsArrays[a]=c.reduce(((a,c)=>(c.toArray(a,a.length),a)),[]),this}setMatrix(a,c){return this._checkUniform(a),this._matrices[a]=c,this}setMatrices(a,c){this._checkUniform(a);const o=new Float32Array(16*c.length);for(let s=0;s<c.length;s++){c[s].copyToArray(o,16*s)}return this._matrixArrays[a]=o,this}setMatrix3x3(a,c){return this._checkUniform(a),this._matrices3x3[a]=c,this}setMatrix2x2(a,c){return this._checkUniform(a),this._matrices2x2[a]=c,this}setArray2(a,c){return this._checkUniform(a),this._vectors2Arrays[a]=c,this}setArray3(a,c){return this._checkUniform(a),this._vectors3Arrays[a]=c,this}setArray4(a,c){return this._checkUniform(a),this._vectors4Arrays[a]=c,this}setUniformBuffer(a,c){return-1===this._options.uniformBuffers.indexOf(a)&&this._options.uniformBuffers.push(a),this._uniformBuffers[a]=c,this}setTextureSampler(a,c){return-1===this._options.samplerObjects.indexOf(a)&&this._options.samplerObjects.push(a),this._textureSamplers[a]=c,this}setStorageBuffer(a,c){return-1===this._options.storageBuffers.indexOf(a)&&this._options.storageBuffers.push(a),this._storageBuffers[a]=c,this}setDefine(a,c){const o=a.trimEnd()+" ",s=this.options.defines.findIndex((c=>c===a||c.startsWith(o)));return s>=0&&this.options.defines.splice(s,1),("boolean"!==typeof c||c)&&this.options.defines.push(o+c),this}isReadyForSubMesh(a,c,o){return this.isReady(a,o,c)}isReady(a,c,o){var s;const t=o&&this._storeEffectOnSubMeshes;if(this.isFrozen){const a=t?o._drawWrapper:this._drawWrapper;if(a.effect&&a._wasPreviouslyReady&&a._wasPreviouslyUsingInstances===c)return!0}const p=this.Za(),G=p.getEngine(),C=[],j=[];let L=null,N=this._shaderPath,y=this._options.uniforms,k=this._options.uniformBuffers,n=this._options.samplers;G.getCaps().multiview&&p.activeCamera&&p.activeCamera.outputRenderTarget&&p.activeCamera.outputRenderTarget.getViewCount()>1&&(this._multiview=!0,C.push("#define MULTIVIEW"),-1!==y.indexOf("viewProjection")&&-1===y.indexOf("viewProjectionR")&&y.push("viewProjectionR"));for(let q=0;q<this._options.defines.length;q++){const a=0===this._options.defines[q].indexOf("#define")?this._options.defines[q]:`#define ${this._options.defines[q]}`;C.push(a)}for(let q=0;q<this._options.attributes.length;q++)j.push(this._options.attributes[q]);if(a&&a.isVerticesDataPresent(i.g.ColorKind)&&(-1===j.indexOf(i.g.ColorKind)&&j.push(i.g.ColorKind),C.push("#define VERTEXCOLOR")),c&&(C.push("#define INSTANCES"),(0,g.lb)(j,this._materialHelperNeedsPreviousMatrices),null!==a&&void 0!==a&&a.hasThinInstances&&(C.push("#define THIN_INSTANCES"),a&&a.isVerticesDataPresent(i.g.ColorInstanceKind)&&(j.push(i.g.ColorInstanceKind),C.push("#define INSTANCESCOLOR")))),a&&a.useBones&&a.computeBonesUsingShaders&&a.skeleton){j.push(i.g.MatricesIndicesKind),j.push(i.g.MatricesWeightsKind),a.numBoneInfluencers>4&&(j.push(i.g.MatricesIndicesExtraKind),j.push(i.g.MatricesWeightsExtraKind));const c=a.skeleton;C.push("#define NUM_BONE_INFLUENCERS "+a.numBoneInfluencers),L=new T.e,L.addCPUSkinningFallback(0,a),c.isUsingTextureForMatrices?(C.push("#define BONETEXTURE"),-1===y.indexOf("boneTextureWidth")&&y.push("boneTextureWidth"),-1===this._options.samplers.indexOf("boneSampler")&&this._options.samplers.push("boneSampler")):(C.push("#define BonesPerMesh "+(c.bones.length+1)),-1===y.indexOf("mBones")&&y.push("mBones"))}else C.push("#define NUM_BONE_INFLUENCERS 0");let f=0;const J=a?a.morphTargetManager:null;if(J){const c=-1!==C.indexOf("#define UV1"),o=-1!==C.indexOf("#define UV2"),s=-1!==C.indexOf("#define TANGENT"),q=-1!==C.indexOf("#define NORMAL"),t=-1!==C.indexOf("#define VERTEXCOLOR");f=(0,g.N)(J,C,j,a,!0,q,s,c,o,t),J.isUsingTextureForTargets&&(-1===y.indexOf("morphTargetTextureIndices")&&y.push("morphTargetTextureIndices"),-1===this._options.samplers.indexOf("morphTargets")&&this._options.samplers.push("morphTargets")),f>0&&(y=y.slice(),y.push("morphTargetInfluences"),y.push("morphTargetCount"),y.push("morphTargetTextureInfo"),y.push("morphTargetTextureIndices"))}else C.push("#define NUM_MORPH_INFLUENCERS 0");if(a){const c=a.bakedVertexAnimationManager;c&&c.isEnabled&&(C.push("#define BAKED_VERTEX_ANIMATION_TEXTURE"),-1===y.indexOf("bakedVertexAnimationSettings")&&y.push("bakedVertexAnimationSettings"),-1===y.indexOf("bakedVertexAnimationTextureSizeInverted")&&y.push("bakedVertexAnimationTextureSizeInverted"),-1===y.indexOf("bakedVertexAnimationTime")&&y.push("bakedVertexAnimationTime"),-1===this._options.samplers.indexOf("bakedVertexAnimationTexture")&&this._options.samplers.push("bakedVertexAnimationTexture")),(0,g.E)(j,a,C)}for(const q in this._textures)if(!this._textures[q].isReady())return!1;a&&this.needAlphaTestingForMesh(a)&&C.push("#define ALPHATEST"),!1!==this._options.useClipPlane&&((0,e.e)(y),(0,e.o)(this,p,C)),p.fogEnabled&&null!==a&&void 0!==a&&a.applyFog&&p.fogMode!==q.e.FOGMODE_NONE&&(C.push("#define FOG"),-1===y.indexOf("view")&&y.push("view"),-1===y.indexOf("vFogInfos")&&y.push("vFogInfos"),-1===y.indexOf("vFogColor")&&y.push("vFogColor")),this._useLogarithmicDepth&&(C.push("#define LOGARITHMICDEPTH"),-1===y.indexOf("logarithmicDepthConstant")&&y.push("logarithmicDepthConstant")),this.customShaderNameResolve&&(y=y.slice(),k=k.slice(),n=n.slice(),N=this.customShaderNameResolve(this.name,y,k,n,C,j));const w=t?o._getDrawWrapper(void 0,!0):this._drawWrapper,Z=(null===w||void 0===w?void 0:w.effect)??null,h=(null===w||void 0===w?void 0:w.defines)??null,U=C.join("\n");let S=Z;return h!==U&&(S=G.createEffect(N,{attributes:j,uniformsNames:y,uniformBuffersNames:k,samplers:n,defines:U,fallbacks:L,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousMorphTargets:f},shaderLanguage:this._options.shaderLanguage,extraInitializationsAsync:this._options.extraInitializationsAsync},G),t?o.setEffect(S,U,this._materialContext):w&&w.setEffect(S,U),this._onEffectCreatedObservable&&(M.effect=S,M.subMesh=o??(null===a||void 0===a?void 0:a.wc[0])??null,this._onEffectCreatedObservable.notifyObservers(M))),w._wasPreviouslyUsingInstances=!!c,!(null===(s=S)||void 0===s||!s.isReady())&&(Z!==S&&p.resetCachedMaterial(),w._wasPreviouslyReady=!0,!0)}bindOnlyWorldMatrix(a,c){const o=c??this.getEffect();if(!o)return;const s=this._options.uniforms;-1!==s.indexOf("world")&&o.setMatrix("world",a);const q=this.Za();-1!==s.indexOf("worldView")&&(a.multiplyToRef(q.getViewMatrix(),this._cachedWorldViewMatrix),o.setMatrix("worldView",this._cachedWorldViewMatrix)),-1!==s.indexOf("worldViewProjection")&&(a.multiplyToRef(q.getTransformMatrix(),this._cachedWorldViewProjectionMatrix),o.setMatrix("worldViewProjection",this._cachedWorldViewProjectionMatrix)),-1!==s.indexOf("view")&&o.setMatrix("view",q.getViewMatrix())}bindForSubMesh(a,c,o){var s;this.bind(a,c,null===(s=o._drawWrapperOverride)||void 0===s?void 0:s.effect,o)}bind(a,c,o,s){const q=s&&this._storeEffectOnSubMeshes,t=o??(q?s.effect:this.getEffect());if(!t)return;const i=this.Za();this._activeEffect=t,this.bindOnlyWorldMatrix(a,o);const p=this._options.uniformBuffers;let G=!1;if(t&&p&&p.length>0&&i.getEngine().supportsUniformBuffers)for(let j=0;j<p.length;++j){switch(p[j]){case"Mesh":c&&(c.getMeshUniformBuffer().bindToEffect(t,"Mesh"),c.transferToEffect(a));break;case"Scene":(0,g.v)(t,i.getSceneUniformBuffer()),i.finalizeSceneUbo(),G=!0}}const T=c&&q?this._mustRebind(i,t,s,c.visibility):i.getCachedMaterial()!==this;if(t&&T){let a;for(a in G||-1===this._options.uniforms.indexOf("view")||t.setMatrix("view",i.getViewMatrix()),G||-1===this._options.uniforms.indexOf("projection")||t.setMatrix("projection",i.getProjectionMatrix()),G||-1===this._options.uniforms.indexOf("viewProjection")||(t.setMatrix("viewProjection",i.getTransformMatrix()),this._multiview&&t.setMatrix("viewProjectionR",i._transformMatrixR)),i.activeCamera&&-1!==this._options.uniforms.indexOf("cameraPosition")&&t.setVector3("cameraPosition",i.activeCamera.globalPosition),(0,g.e)(c,t),(0,e.i)(t,this,i),this._useLogarithmicDepth&&(0,g.n)(q?s.materialDefines:t.defines,t,i),c&&(0,g.h)(i,c,t),this._textures)t.setTexture(a,this._textures[a]);for(a in this._textureArrays)t.setTextureArray(a,this._textureArrays[a]);for(a in this._ints)t.setInt(a,this._ints[a]);for(a in this._uints)t.setUInt(a,this._uints[a]);for(a in this._floats)t.setFloat(a,this._floats[a]);for(a in this._floatsArrays)t.setArray(a,this._floatsArrays[a]);for(a in this._colors3)t.setColor3(a,this._colors3[a]);for(a in this._colors3Arrays)t.setArray3(a,this._colors3Arrays[a]);for(a in this._colors4){const c=this._colors4[a];t.setFloat4(a,c.r,c.g,c.b,c.a)}for(a in this._colors4Arrays)t.setArray4(a,this._colors4Arrays[a]);for(a in this._vectors2)t.setVector2(a,this._vectors2[a]);for(a in this._vectors3)t.setVector3(a,this._vectors3[a]);for(a in this._vectors4)t.setVector4(a,this._vectors4[a]);for(a in this._quaternions)t.setQuaternion(a,this._quaternions[a]);for(a in this._matrices)t.setMatrix(a,this._matrices[a]);for(a in this._matrixArrays)t.setMatrices(a,this._matrixArrays[a]);for(a in this._matrices3x3)t.setMatrix3x3(a,this._matrices3x3[a]);for(a in this._matrices2x2)t.setMatrix2x2(a,this._matrices2x2[a]);for(a in this._vectors2Arrays)t.setArray2(a,this._vectors2Arrays[a]);for(a in this._vectors3Arrays)t.setArray3(a,this._vectors3Arrays[a]);for(a in this._vectors4Arrays)t.setArray4(a,this._vectors4Arrays[a]);for(a in this._quaternionsArrays)t.setArray4(a,this._quaternionsArrays[a]);for(a in this._uniformBuffers){const c=this._uniformBuffers[a].getBuffer();c&&t.bindUniformBuffer(c,a)}const o=i.getEngine(),p=o.setExternalTexture;if(p)for(a in this._externalTextures)p.call(o,a,this._externalTextures[a]);const T=o.setTextureSampler;if(T)for(a in this._textureSamplers)T.call(o,a,this._textureSamplers[a]);const C=o.setStorageBuffer;if(C)for(a in this._storageBuffers)C.call(o,a,this._storageBuffers[a])}if(t&&c&&(T||!this.isFrozen)){(0,g.r)(c,t),c.morphTargetManager&&c.morphTargetManager.isUsingTextureForTargets&&c.morphTargetManager._bind(t);const a=c.bakedVertexAnimationManager;if(a&&a.isEnabled){var C;const a=q?s._drawWrapper:this._drawWrapper;null===(C=c.bakedVertexAnimationManager)||void 0===C||C.bind(t,!!a._wasPreviouslyUsingInstances)}}this._afterBind(c,t,s)}getActiveTextures(){const a=super.getActiveTextures();for(const c in this._textures)a.push(this._textures[c]);for(const c in this._textureArrays){const o=this._textureArrays[c];for(let c=0;c<o.length;c++)a.push(o[c])}return a}hasTexture(a){if(super.hasTexture(a))return!0;for(const c in this._textures)if(this._textures[c]===a)return!0;for(const c in this._textureArrays){const o=this._textureArrays[c];for(let c=0;c<o.length;c++)if(o[c]===a)return!0}return!1}clone(a){const c=s.d.Clone((()=>new N(a,this.Za(),this._shaderPath,this._options,this._storeEffectOnSubMeshes)),this);c.name=a,c.id=a,"object"===typeof c._shaderPath&&(c._shaderPath={...c._shaderPath}),this._options={...this._options};const o=Object.keys(this._options);for(const s of o){const a=this._options[s];Array.isArray(a)&&(this._options[s]=a.slice(0))}this.Nc.copyTo(c.Nc);for(const s in this._textures)c.setTexture(s,this._textures[s]);for(const s in this._textureArrays)c.setTextureArray(s,this._textureArrays[s]);for(const s in this._externalTextures)c.setExternalTexture(s,this._externalTextures[s]);for(const s in this._ints)c.setInt(s,this._ints[s]);for(const s in this._uints)c.setUInt(s,this._uints[s]);for(const s in this._floats)c.setFloat(s,this._floats[s]);for(const s in this._floatsArrays)c.setFloats(s,this._floatsArrays[s]);for(const s in this._colors3)c.setColor3(s,this._colors3[s]);for(const s in this._colors3Arrays)c._colors3Arrays[s]=this._colors3Arrays[s];for(const s in this._colors4)c.setColor4(s,this._colors4[s]);for(const s in this._colors4Arrays)c._colors4Arrays[s]=this._colors4Arrays[s];for(const s in this._vectors2)c.setVector2(s,this._vectors2[s]);for(const s in this._vectors3)c.setVector3(s,this._vectors3[s]);for(const s in this._vectors4)c.setVector4(s,this._vectors4[s]);for(const s in this._quaternions)c.setQuaternion(s,this._quaternions[s]);for(const s in this._quaternionsArrays)c._quaternionsArrays[s]=this._quaternionsArrays[s];for(const s in this._matrices)c.setMatrix(s,this._matrices[s]);for(const s in this._matrixArrays)c._matrixArrays[s]=this._matrixArrays[s].slice();for(const s in this._matrices3x3)c.setMatrix3x3(s,this._matrices3x3[s]);for(const s in this._matrices2x2)c.setMatrix2x2(s,this._matrices2x2[s]);for(const s in this._vectors2Arrays)c.setArray2(s,this._vectors2Arrays[s]);for(const s in this._vectors3Arrays)c.setArray3(s,this._vectors3Arrays[s]);for(const s in this._vectors4Arrays)c.setArray4(s,this._vectors4Arrays[s]);for(const s in this._uniformBuffers)c.setUniformBuffer(s,this._uniformBuffers[s]);for(const s in this._textureSamplers)c.setTextureSampler(s,this._textureSamplers[s]);for(const s in this._storageBuffers)c.setStorageBuffer(s,this._storageBuffers[s]);return c}dispose(a,c,o){if(c){let a;for(a in this._textures)this._textures[a].dispose();for(a in this._textureArrays){const c=this._textureArrays[a];for(let a=0;a<c.length;a++)c[a].dispose()}}this._textures={},super.dispose(a,c,o)}serialize(){const a=s.d.Serialize(this);let c;for(c in a.customType="BABYLON.ShaderMaterial",a.uniqueId=this.uniqueId,a.options=this._options,a.shaderPath=this._shaderPath,a.storeEffectOnSubMeshes=this._storeEffectOnSubMeshes,a.Nc=this.Nc.serialize(),a.textures={},this._textures)a.textures[c]=this._textures[c].serialize();for(c in a.textureArrays={},this._textureArrays){a.textureArrays[c]=[];const o=this._textureArrays[c];for(let s=0;s<o.length;s++)a.textureArrays[c].push(o[s].serialize())}for(c in a.ints={},this._ints)a.ints[c]=this._ints[c];for(c in a.uints={},this._uints)a.uints[c]=this._uints[c];for(c in a.floats={},this._floats)a.floats[c]=this._floats[c];for(c in a.floatsArrays={},this._floatsArrays)a.floatsArrays[c]=this._floatsArrays[c];for(c in a.colors3={},this._colors3){const o=this._colors3[c];a.colors3[c]=[o.r,o.g,o.b]}for(c in a.colors3Arrays={},this._colors3Arrays)a.colors3Arrays[c]=this._colors3Arrays[c];for(c in a.colors4={},this._colors4){const o=this._colors4[c];a.colors4[c]=[o.r,o.g,o.b,o.a]}for(c in a.colors4Arrays={},this._colors4Arrays)a.colors4Arrays[c]=this._colors4Arrays[c];for(c in a.vectors2={},this._vectors2){const o=this._vectors2[c];a.vectors2[c]=[o.x,o.y]}for(c in a.vectors3={},this._vectors3){const o=this._vectors3[c];a.vectors3[c]=[o.x,o.y,o.z]}for(c in a.vectors4={},this._vectors4){const o=this._vectors4[c];a.vectors4[c]=[o.x,o.y,o.z,o.w]}for(c in a.quaternions={},this._quaternions)a.quaternions[c]=this._quaternions[c].hc();for(c in a.matrices={},this._matrices)a.matrices[c]=this._matrices[c].hc();for(c in a.matrixArray={},this._matrixArrays)a.matrixArray[c]=this._matrixArrays[c];for(c in a.matrices3x3={},this._matrices3x3)a.matrices3x3[c]=this._matrices3x3[c];for(c in a.matrices2x2={},this._matrices2x2)a.matrices2x2[c]=this._matrices2x2[c];for(c in a.vectors2Arrays={},this._vectors2Arrays)a.vectors2Arrays[c]=this._vectors2Arrays[c];for(c in a.vectors3Arrays={},this._vectors3Arrays)a.vectors3Arrays[c]=this._vectors3Arrays[c];for(c in a.vectors4Arrays={},this._vectors4Arrays)a.vectors4Arrays[c]=this._vectors4Arrays[c];for(c in a.quaternionsArrays={},this._quaternionsArrays)a.quaternionsArrays[c]=this._quaternionsArrays[c];return a}static Parse(a,c,o){const q=s.d.Parse((()=>new N(a.name,c,a.shaderPath,a.options,a.storeEffectOnSubMeshes)),a,c,o);let i;for(i in a.Nc&&q.Nc.parse(a.Nc,c,o),a.textures)q.setTexture(i,p.e.Parse(a.textures[i],c,o));for(i in a.textureArrays){const s=a.textureArrays[i],t=[];for(let a=0;a<s.length;a++)t.push(p.e.Parse(s[a],c,o));q.setTextureArray(i,t)}for(i in a.ints)q.setInt(i,a.ints[i]);for(i in a.uints)q.setUInt(i,a.uints[i]);for(i in a.floats)q.setFloat(i,a.floats[i]);for(i in a.floatsArrays)q.setFloats(i,a.floatsArrays[i]);for(i in a.colors3){const c=a.colors3[i];q.setColor3(i,{r:c[0],g:c[1],b:c[2]})}for(i in a.colors3Arrays){const c=a.colors3Arrays[i].reduce(((a,c,o)=>(o%3===0?a.push([c]):a[a.length-1].push(c),a)),[]).map((a=>({r:a[0],g:a[1],b:a[2]})));q.setColor3Array(i,c)}for(i in a.colors4){const c=a.colors4[i];q.setColor4(i,{r:c[0],g:c[1],b:c[2],a:c[3]})}for(i in a.colors4Arrays){const c=a.colors4Arrays[i].reduce(((a,c,o)=>(o%4===0?a.push([c]):a[a.length-1].push(c),a)),[]).map((a=>({r:a[0],g:a[1],b:a[2],a:a[3]})));q.setColor4Array(i,c)}for(i in a.vectors2){const c=a.vectors2[i];q.setVector2(i,{x:c[0],y:c[1]})}for(i in a.vectors3){const c=a.vectors3[i];q.setVector3(i,{x:c[0],y:c[1],z:c[2]})}for(i in a.vectors4){const c=a.vectors4[i];q.setVector4(i,{x:c[0],y:c[1],z:c[2],w:c[3]})}for(i in a.quaternions)q.setQuaternion(i,t.Quaternion.qo(a.quaternions[i]));for(i in a.matrices)q.setMatrix(i,t.Matrix.qo(a.matrices[i]));for(i in a.matrixArray)q._matrixArrays[i]=new Float32Array(a.matrixArray[i]);for(i in a.matrices3x3)q.setMatrix3x3(i,a.matrices3x3[i]);for(i in a.matrices2x2)q.setMatrix2x2(i,a.matrices2x2[i]);for(i in a.vectors2Arrays)q.setArray2(i,a.vectors2Arrays[i]);for(i in a.vectors3Arrays)q.setArray3(i,a.vectors3Arrays[i]);for(i in a.vectors4Arrays)q.setArray4(i,a.vectors4Arrays[i]);for(i in a.quaternionsArrays)q.setArray4(i,a.quaternionsArrays[i]);return q}static async ParseFromFileAsync(a,c,o){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return await new Promise(((q,t)=>{const i=new C.b;i.addEventListener("readystatechange",(()=>{if(4==i.readyState)if(200==i.status){const c=JSON.parse(i.responseText),t=this.Parse(c,o||L.b.LastCreatedScene,s);a&&(t.name=a),q(t)}else t("Unable to load the ShaderMaterial")})),i.open("GET",c),i.send()}))}static async ParseFromSnippetAsync(a,c){let o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return await new Promise(((s,q)=>{const t=new C.b;t.addEventListener("readystatechange",(()=>{if(4==t.readyState)if(200==t.status){const q=JSON.parse(JSON.parse(t.responseText).jsonPayload),i=JSON.parse(q.shaderMaterial),p=this.Parse(i,c||L.b.LastCreatedScene,o);p.snippetId=a,s(p)}else q("Unable to load the snippet "+a)})),t.open("GET",this.SnippetUrl+"/"+a.replace(/#/g,"/")),t.send()}))}}N.SnippetUrl="https://snippet.babylonjs.com",N.CreateFromSnippetAsync=N.ParseFromSnippetAsync,(0,G.d)("BABYLON.ShaderMaterial",N)}}]);