"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[18],{2279:(v,d,Q)=>{function n(v){return Math.floor(v/8)}function T(v){return 1<<v%8}Q.d(d,{OptimizeIndices:()=>e});class L{constructor(v){this.size=v,this._byteArray=new Uint8Array(Math.ceil(this.size/8))}get(v){if(v>=this.size)throw new RangeError("Bit index out of range");const d=n(v),Q=T(v);return 0!==(this._byteArray[d]&Q)}set(v,d){if(v>=this.size)throw new RangeError("Bit index out of range");const Q=n(v),L=T(v);d?this._byteArray[Q]|=L:this._byteArray[Q]&=~L}}function e(v){const d=[],Q=v.length/3;for(let L=0;L<Q;L++)d.push([v[3*L],v[3*L+1],v[3*L+2]]);const n=new Map;for(let L=0;L<d.length;L++){const v=d[L];for(const d of v){let v=n.get(d);v||n.set(d,v=[]),v.push(L)}}const T=new L(Q),e=[],F=v=>{const Q=[v];for(;Q.length>0;){const v=Q.pop();if(!T.get(v)){T.set(v,!0),e.push(d[v]);for(const L of d[v]){const v=n.get(L);if(!v)return;for(const d of v)T.get(d)||Q.push(d)}}}};for(let L=0;L<Q;L++)T.get(L)||F(L);let r=0;for(const L of e)v[r++]=L[0],v[r++]=L[1],v[r++]=L[2]}}}]);