"use strict";(self["6xhfpmwgjr5"]=self["6xhfpmwgjr5"]||[]).push([[99],{16525:(P,a,R)=>{R.r(a),R.d(a,{FlowGraphAngleBetweenBlock:()=>H,FlowGraphAxisAngleFromQuaternionBlock:()=>N,FlowGraphConjugateBlock:()=>G,FlowGraphCrossBlock:()=>t,FlowGraphDotBlock:()=>y,FlowGraphLengthBlock:()=>O,FlowGraphNormalizeBlock:()=>q,FlowGraphQuaternionFromAxisAngleBlock:()=>mP,FlowGraphQuaternionFromDirectionsBlock:()=>D,FlowGraphRotate2DBlock:()=>W,FlowGraphRotate3DBlock:()=>k,FlowGraphTransformBlock:()=>s,FlowGraphTransformCoordinatesBlock:()=>d});var S=R(14549),A=R(14524),Z=R(12376),p=R(16508),j=R(16523),U=R(12415),Q=R(14558),h=R(13788);const l="cachedOperationAxis",V="cachedOperationAngle",f="cachedExecutionId";class O extends j.e{constructor(P){super(A.c,A.p,(P=>this._polymorphicLength(P)),"FlowGraphLengthBlock",P)}_polymorphicLength(P){switch((0,Q.j)(P)){case"Vector2":case"Oa":case"Vector4":case"Quaternion":return P.length();default:throw new Error(`Cannot compute length of value ${P}`)}}}(0,Z.d)("FlowGraphLengthBlock",O);class q extends j.e{constructor(P){super(A.c,A.c,(P=>this._polymorphicNormalize(P)),"FlowGraphNormalizeBlock",P)}_polymorphicNormalize(P){var a;let R;switch((0,Q.j)(P)){case"Vector2":case"Oa":case"Vector4":case"Quaternion":if(R=P.normalizeToNew(),null!==(a=this.config)&&void 0!==a&&a.nanOnZeroLength){0===P.length()&&R.yj(NaN)}return R;default:throw new Error(`Cannot normalize value ${P}`)}}}(0,Z.d)("FlowGraphNormalizeBlock",q);class y extends p.d{constructor(P){super(A.c,A.c,A.p,((P,a)=>this._polymorphicDot(P,a)),"FlowGraphDotBlock",P)}_polymorphicDot(P,a){switch((0,Q.j)(P)){case"Vector2":case"Oa":case"Vector4":case"Quaternion":return P.dot(a);default:throw new Error(`Cannot get dot product of ${P} and ${a}`)}}}(0,Z.d)("FlowGraphDotBlock",y);class t extends p.d{constructor(P){super(A.z,A.z,A.z,((P,a)=>U.Oa.Cross(P,a)),"FlowGraphCrossBlock",P)}}(0,Z.d)("FlowGraphCrossBlock",t);class W extends p.d{constructor(P){super(A.w,A.p,A.w,((P,a)=>P.rotate(a)),"FlowGraphRotate2DBlock",P)}}(0,Z.d)("FlowGraphRotate2DBlock",W);class k extends p.d{constructor(P){super(A.z,A.r,A.z,((P,a)=>P.applyRotationQuaternion(a)),"FlowGraphRotate3DBlock",P)}}function x(P,a){switch((0,Q.j)(P)){case"Vector2":case"Oa":return a.transformVector(P);case"Vector4":return new U.Vector4(P.x*a.m[0]+P.y*a.m[1]+P.z*a.m[2]+P.w*a.m[3],P.x*a.m[4]+P.y*a.m[5]+P.z*a.m[6]+P.w*a.m[7],P.x*a.m[8]+P.y*a.m[9]+P.z*a.m[10]+P.w*a.m[11],P.x*a.m[12]+P.y*a.m[13]+P.z*a.m[14]+P.w*a.m[15]);default:throw new Error(`Cannot transform value ${P}`)}}(0,Z.d)("FlowGraphRotate3DBlock",k);class s extends p.d{constructor(P){const a=(null===P||void 0===P?void 0:P.vectorType)||"Oa",R="Vector2"===a?"Matrix2D":"Oa"===a?"Matrix3D":"Matrix";super((0,A.J)(a),(0,A.J)(R),(0,A.J)(a),x,"FlowGraphTransformVectorBlock",P)}}(0,Z.d)("FlowGraphTransformVectorBlock",s);class d extends p.d{constructor(P){super(A.z,A.i,A.z,((P,a)=>U.Oa.TransformCoordinates(P,a)),"FlowGraphTransformCoordinatesBlock",P)}}(0,Z.d)("FlowGraphTransformCoordinatesBlock",d);class G extends j.e{constructor(P){super(A.r,A.r,(P=>P.conjugate()),"FlowGraphConjugateBlock",P)}}(0,Z.d)("FlowGraphConjugateBlock",G);class H extends p.d{constructor(P){super(A.r,A.r,A.p,((P,a)=>(0,h.b)(P,a)),"FlowGraphAngleBetweenBlock",P)}}(0,Z.d)("FlowGraphAngleBetweenBlock",H);class mP extends p.d{constructor(P){super(A.z,A.p,A.r,((P,a)=>U.Quaternion.RotationAxis(P,a)),"FlowGraphQuaternionFromAxisAngleBlock",P)}}(0,Z.d)("FlowGraphQuaternionFromAxisAngleBlock",mP);class N extends S.e{constructor(P){super(P),this.a=this.registerDataInput("a",A.r),this.axis=this.registerDataOutput("axis",A.z),this.angle=this.registerDataOutput("angle",A.p),this.isValid=this.registerDataOutput("isValid",A.d)}_updateOutputs(P){const a=P._getExecutionVariable(this,f,-1),R=P._getExecutionVariable(this,l,null),S=P._getExecutionVariable(this,V,null);if(void 0!==R&&null!==R&&void 0!==S&&null!==S&&a===P.executionId)this.axis.setValue(R,P),this.angle.setValue(S,P);else try{const{axis:a,angle:R}=this.a.getValue(P).toAxisAngle();P._setExecutionVariable(this,l,a),P._setExecutionVariable(this,V,R),P._setExecutionVariable(this,f,P.executionId),this.axis.setValue(a,P),this.angle.setValue(R,P),this.isValid.setValue(!0,P)}catch(A){this.isValid.setValue(!1,P)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}(0,Z.d)("FlowGraphAxisAngleFromQuaternionBlock",N);class D extends p.d{constructor(P){super(A.z,A.z,A.r,((P,a)=>(0,h.f)(P,a)),"FlowGraphQuaternionFromDirectionsBlock",P)}}},16508:(P,a,R)=>{R.d(a,{d:()=>A});var S=R(16515);class A extends S.d{constructor(P,a,R,S,A,Z){super(R,Z),this._operation=S,this._className=A,this.a=this.registerDataInput("a",P),this.b=this.registerDataInput("b",a)}_doOperation(P){const a=this.a.getValue(P),R=this.b.getValue(P);return this._operation(a,R)}getClassName(){return this._className}}},16515:(P,a,R)=>{R.d(a,{d:()=>j});var S=R(14549),A=R(14524);const Z="cachedOperationValue",p="cachedExecutionId";class j extends S.e{constructor(P,a){super(a),this.value=this.registerDataOutput("value",P),this.isValid=this.registerDataOutput("isValid",A.d)}_updateOutputs(P){const a=P._getExecutionVariable(this,p,-1),R=P._getExecutionVariable(this,Z,null);if(void 0!==R&&null!==R&&a===P.executionId)this.isValid.setValue(!0,P),this.value.setValue(R,P);else try{const a=this._doOperation(P);if(void 0===a||null===a)return void this.isValid.setValue(!1,P);P._setExecutionVariable(this,Z,a),P._setExecutionVariable(this,p,P.executionId),this.value.setValue(a,P),this.isValid.setValue(!0,P)}catch(S){this.isValid.setValue(!1,P)}}}},16523:(P,a,R)=>{R.d(a,{e:()=>A});var S=R(16515);class A extends S.d{constructor(P,a,R,S,A){super(a,A),this._operation=R,this._className=S,this.a=this.registerDataInput("a",P)}_doOperation(P){return this._operation(this.a.getValue(P))}getClassName(){return this._className}}}}]);