"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[90],{14556:(R,x,H)=>{H.r(x),H.d(x,{FlowGraphSwitchBlock:()=>D});var k=H(13262),c=H(13246),t=H(610),A=H(13283);class D extends k.d{constructor(R){super(R),this.config=R,this.default=this._registerSignalOutput("default"),this._caseToOutputFlow=new Map,this.case=this.registerDataInput("case",c.b);const x=this.config.cases||[];for(const H of x)this._caseToOutputFlow.set(H,this._registerSignalOutput(`out_${H}`))}_execute(R,x){const H=this.case.getValue(R);let k;k=(0,A.u)(H)?this._getOutputFlowForCase((0,A.q)(H)):this._getOutputFlowForCase(H),k?k._activateSignal(R):this.default._activateSignal(R)}addCase(R){this.config.cases.includes(R)||(this.config.cases.push(R),this._caseToOutputFlow.set(R,this._registerSignalOutput(`out_${R}`)))}removeCase(R){if(!this.config.cases.includes(R))return;const x=this.config.cases.indexOf(R);this.config.cases.splice(x,1),this._caseToOutputFlow.delete(R)}_getOutputFlowForCase(R){return this._caseToOutputFlow.get(R)}getClassName(){return"FlowGraphSwitchBlock"}serialize(R){super.serialize(R),R.cases=this.config.cases}}(0,t.h)("FlowGraphSwitchBlock",D)}}]);