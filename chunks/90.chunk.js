"use strict";(self.isj1uwvwrek=self.isj1uwvwrek||[]).push([[90],{16090:(I,x,L)=>{L.r(x),L.d(x,{FlowGraphDeterminantBlock:()=>W,FlowGraphInvertMatrixBlock:()=>Q,FlowGraphMatrixComposeBlock:()=>v,FlowGraphMatrixDecomposeBlock:()=>g,FlowGraphMatrixMultiplicationBlock:()=>e,FlowGraphTransposeBlock:()=>l});var F=L(14514),X=L(14498),G=L(12983),Y=L(12938),p=L(16084),B=L(16075);class l extends p.c{constructor(I){super((0,X.S)((null===I||void 0===I?void 0:I.matrixType)||"Matrix"),(0,X.S)((null===I||void 0===I?void 0:I.matrixType)||"Matrix"),(I=>I.transpose?I.transpose():G.Matrix.Transpose(I)),"FlowGraphTransposeBlock",I)}}(0,Y.d)("FlowGraphTransposeBlock",l);class W extends p.c{constructor(I){super((0,X.S)((null===I||void 0===I?void 0:I.matrixType)||"Matrix"),X.x,(I=>I.determinant()),"FlowGraphDeterminantBlock",I)}}(0,Y.d)("FlowGraphDeterminantBlock",W);class Q extends p.c{constructor(I){super((0,X.S)((null===I||void 0===I?void 0:I.matrixType)||"Matrix"),(0,X.S)((null===I||void 0===I?void 0:I.matrixType)||"Matrix"),(I=>I.inverse?I.inverse():G.Matrix.Invert(I)),"FlowGraphInvertMatrixBlock",I)}}(0,Y.d)("FlowGraphInvertMatrixBlock",Q);class e extends B.c{constructor(I){super((0,X.S)((null===I||void 0===I?void 0:I.matrixType)||"Matrix"),(0,X.S)((null===I||void 0===I?void 0:I.matrixType)||"Matrix"),(0,X.S)((null===I||void 0===I?void 0:I.matrixType)||"Matrix"),((I,x)=>x.multiply(I)),"FlowGraphMatrixMultiplicationBlock",I)}}(0,Y.d)("FlowGraphMatrixMultiplicationBlock",e);class g extends F.e{constructor(I){super(I),this.input=this.registerDataInput("input",X.p),this.position=this.registerDataOutput("position",X.K),this.rotationQuaternion=this.registerDataOutput("rotationQuaternion",X.B),this.pB=this.registerDataOutput("pB",X.K),this.isValid=this.registerDataOutput("isValid",X.i,!1)}_updateOutputs(I){const x=I._getExecutionVariable(this,"executionId",-1),L=I._getExecutionVariable(this,"cachedPosition",null),F=I._getExecutionVariable(this,"cachedRotation",null),X=I._getExecutionVariable(this,"cachedScaling",null);if(x===I.executionId&&L&&F&&X)this.position.setValue(L,I),this.rotationQuaternion.setValue(F,I),this.pB.setValue(X,I);else{const x=this.input.getValue(I),Y=L||new G.sx,p=F||new G.Quaternion,B=X||new G.sx,l=Math.round(1e4*x.m[3])/1e4,W=Math.round(1e4*x.m[7])/1e4,Q=Math.round(1e4*x.m[11])/1e4,e=Math.round(1e4*x.m[15])/1e4;if(0!==l||0!==W||0!==Q||1!==e)return this.isValid.setValue(!1,I),this.position.setValue(G.sx.Zero(),I),this.rotationQuaternion.setValue(G.Quaternion.Identity(),I),void this.pB.setValue(G.sx.One(),I);const g=x.decompose(B,p,Y);this.isValid.setValue(g,I),this.position.setValue(Y,I),this.rotationQuaternion.setValue(p,I),this.pB.setValue(B,I),I._setExecutionVariable(this,"cachedPosition",Y),I._setExecutionVariable(this,"cachedRotation",p),I._setExecutionVariable(this,"cachedScaling",B),I._setExecutionVariable(this,"executionId",I.executionId)}}getClassName(){return"FlowGraphMatrixDecompose"}}(0,Y.d)("FlowGraphMatrixDecompose",g);class v extends F.e{constructor(I){super(I),this.position=this.registerDataInput("position",X.K),this.rotationQuaternion=this.registerDataInput("rotationQuaternion",X.B),this.pB=this.registerDataInput("pB",X.K),this.value=this.registerDataOutput("value",X.p)}_updateOutputs(I){const x=I._getExecutionVariable(this,"executionId",-1),L=I._getExecutionVariable(this,"cachedMatrix",null);if(x===I.executionId&&L)this.value.setValue(L,I);else{const x=G.Matrix.Compose(this.pB.getValue(I),this.rotationQuaternion.getValue(I),this.position.getValue(I));this.value.setValue(x,I),I._setExecutionVariable(this,"cachedMatrix",x),I._setExecutionVariable(this,"executionId",I.executionId)}}getClassName(){return"FlowGraphMatrixCompose"}}(0,Y.d)("FlowGraphMatrixCompose",v)},16075:(I,x,L)=>{L.d(x,{c:()=>X});var F=L(16077);class X extends F.c{constructor(I,x,L,F,X,G){super(L,G),this._operation=F,this._className=X,this.a=this.registerDataInput("a",I),this.b=this.registerDataInput("b",x)}_doOperation(I){const x=this.a.getValue(I),L=this.b.getValue(I);return this._operation(x,L)}getClassName(){return this._className}}},16077:(I,x,L)=>{L.d(x,{c:()=>p});var F=L(14514),X=L(14498);const G="cachedOperationValue",Y="cachedExecutionId";class p extends F.e{constructor(I,x){super(x),this.value=this.registerDataOutput("value",I),this.isValid=this.registerDataOutput("isValid",X.i)}_updateOutputs(I){const x=I._getExecutionVariable(this,Y,-1),L=I._getExecutionVariable(this,G,null);if(void 0!==L&&null!==L&&x===I.executionId)this.isValid.setValue(!0,I),this.value.setValue(L,I);else try{const x=this._doOperation(I);if(void 0===x||null===x)return void this.isValid.setValue(!1,I);I._setExecutionVariable(this,G,x),I._setExecutionVariable(this,Y,I.executionId),this.value.setValue(x,I),this.isValid.setValue(!0,I)}catch(F){this.isValid.setValue(!1,I)}}}},16084:(I,x,L)=>{L.d(x,{c:()=>X});var F=L(16077);class X extends F.c{constructor(I,x,L,F,X){super(x,X),this._operation=L,this._className=F,this.a=this.registerDataInput("a",I)}_doOperation(I){return this._operation(this.a.getValue(I))}getClassName(){return this._className}}}}]);