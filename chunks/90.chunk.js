"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[90],{14048:(U,W,l)=>{l.r(W),l.d(W,{FlowGraphSwitchBlock:()=>B});var M=l(12730),t=l(12704),L=l(655),p=l(12746);class B extends M.c{constructor(U){super(U),this.config=U,this.default=this._registerSignalOutput("default"),this._caseToOutputFlow=new Map,this.case=this.registerDataInput("case",t.d);const W=this.config.cases||[];for(const l of W)this._caseToOutputFlow.set(l,this._registerSignalOutput(`out_${l}`))}_execute(U,W){const l=this.case.getValue(U);let M;M=(0,p.p)(l)?this._getOutputFlowForCase((0,p.n)(l)):this._getOutputFlowForCase(l),M?M._activateSignal(U):this.default._activateSignal(U)}addCase(U){this.config.cases.includes(U)||(this.config.cases.push(U),this._caseToOutputFlow.set(U,this._registerSignalOutput(`out_${U}`)))}removeCase(U){if(!this.config.cases.includes(U))return;const W=this.config.cases.indexOf(U);this.config.cases.splice(W,1),this._caseToOutputFlow.delete(U)}_getOutputFlowForCase(U){return this._caseToOutputFlow.get(U)}getClassName(){return"FlowGraphSwitchBlock"}serialize(U){super.serialize(U),U.cases=this.config.cases}}(0,L.f)("FlowGraphSwitchBlock",B)}}]);