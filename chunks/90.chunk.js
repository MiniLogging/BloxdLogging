"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[90],{13844:(L,j,P)=>{P.r(j),P.d(j,{FlowGraphSwitchBlock:()=>u});var A=P(12521),R=P(12510),o=P(606),Y=P(12531);class u extends A.d{constructor(L){super(L),this.config=L,this.default=this._registerSignalOutput("default"),this._caseToOutputFlow=new Map,this.case=this.registerDataInput("case",R.d);const j=this.config.cases||[];for(const P of j)this._caseToOutputFlow.set(P,this._registerSignalOutput(`out_${P}`))}_execute(L,j){const P=this.case.getValue(L);let A;A=(0,Y.t)(P)?this._getOutputFlowForCase((0,Y.q)(P)):this._getOutputFlowForCase(P),A?A._activateSignal(L):this.default._activateSignal(L)}addCase(L){this.config.cases.includes(L)||(this.config.cases.push(L),this._caseToOutputFlow.set(L,this._registerSignalOutput(`out_${L}`)))}removeCase(L){if(!this.config.cases.includes(L))return;const j=this.config.cases.indexOf(L);this.config.cases.splice(j,1),this._caseToOutputFlow.delete(L)}_getOutputFlowForCase(L){return this._caseToOutputFlow.get(L)}getClassName(){return"FlowGraphSwitchBlock"}serialize(L){super.serialize(L),L.cases=this.config.cases}}(0,o.h)("FlowGraphSwitchBlock",u)}}]);