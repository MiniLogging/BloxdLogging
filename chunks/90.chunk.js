"use strict";(self.fkqm0epoq5=self.fkqm0epoq5||[]).push([[90],{14879:(D,l,G)=>{G.r(l),G.d(l,{FlowGraphDeterminantBlock:()=>n,FlowGraphInvertMatrixBlock:()=>g,FlowGraphMatrixComposeBlock:()=>K,FlowGraphMatrixDecomposeBlock:()=>e,FlowGraphMatrixMultiplicationBlock:()=>j,FlowGraphTransposeBlock:()=>R});var V=G(13442),N=G(13423),M=G(11710),b=G(11667),X=G(14872),t=G(14865);class R extends X.b{constructor(D){super((0,N.A)((null===D||void 0===D?void 0:D.matrixType)||"Matrix"),(0,N.A)((null===D||void 0===D?void 0:D.matrixType)||"Matrix"),(D=>D.transpose?D.transpose():M.Matrix.Transpose(D)),"FlowGraphTransposeBlock",D)}}(0,b.c)("FlowGraphTransposeBlock",R);class n extends X.b{constructor(D){super((0,N.A)((null===D||void 0===D?void 0:D.matrixType)||"Matrix"),N.o,(D=>D.determinant()),"FlowGraphDeterminantBlock",D)}}(0,b.c)("FlowGraphDeterminantBlock",n);class g extends X.b{constructor(D){super((0,N.A)((null===D||void 0===D?void 0:D.matrixType)||"Matrix"),(0,N.A)((null===D||void 0===D?void 0:D.matrixType)||"Matrix"),(D=>D.inverse?D.inverse():M.Matrix.Invert(D)),"FlowGraphInvertMatrixBlock",D)}}(0,b.c)("FlowGraphInvertMatrixBlock",g);class j extends t.c{constructor(D){super((0,N.A)((null===D||void 0===D?void 0:D.matrixType)||"Matrix"),(0,N.A)((null===D||void 0===D?void 0:D.matrixType)||"Matrix"),(0,N.A)((null===D||void 0===D?void 0:D.matrixType)||"Matrix"),((D,l)=>l.multiply(D)),"FlowGraphMatrixMultiplicationBlock",D)}}(0,b.c)("FlowGraphMatrixMultiplicationBlock",j);class e extends V.c{constructor(D){super(D),this.input=this.registerDataInput("input",N.k),this.position=this.registerDataOutput("position",N.v),this.rotationQuaternion=this.registerDataOutput("rotationQuaternion",N.p),this.ub=this.registerDataOutput("ub",N.v),this.isValid=this.registerDataOutput("isValid",N.g,!1)}_updateOutputs(D){const l=D._getExecutionVariable(this,"executionId",-1),G=D._getExecutionVariable(this,"cachedPosition",null),V=D._getExecutionVariable(this,"cachedRotation",null),N=D._getExecutionVariable(this,"cachedScaling",null);if(l===D.executionId&&G&&V&&N)this.position.setValue(G,D),this.rotationQuaternion.setValue(V,D),this.ub.setValue(N,D);else{const l=this.input.getValue(D),b=G||new M.Kl,X=V||new M.Quaternion,t=N||new M.Kl,R=Math.round(1e4*l.m[3])/1e4,n=Math.round(1e4*l.m[7])/1e4,g=Math.round(1e4*l.m[11])/1e4,j=Math.round(1e4*l.m[15])/1e4;if(0!==R||0!==n||0!==g||1!==j)return this.isValid.setValue(!1,D),this.position.setValue(M.Kl.Zero(),D),this.rotationQuaternion.setValue(M.Quaternion.Identity(),D),void this.ub.setValue(M.Kl.One(),D);const e=l.decompose(t,X,b);this.isValid.setValue(e,D),this.position.setValue(b,D),this.rotationQuaternion.setValue(X,D),this.ub.setValue(t,D),D._setExecutionVariable(this,"cachedPosition",b),D._setExecutionVariable(this,"cachedRotation",X),D._setExecutionVariable(this,"cachedScaling",t),D._setExecutionVariable(this,"executionId",D.executionId)}}getClassName(){return"FlowGraphMatrixDecompose"}}(0,b.c)("FlowGraphMatrixDecompose",e);class K extends V.c{constructor(D){super(D),this.position=this.registerDataInput("position",N.v),this.rotationQuaternion=this.registerDataInput("rotationQuaternion",N.p),this.ub=this.registerDataInput("ub",N.v),this.value=this.registerDataOutput("value",N.k)}_updateOutputs(D){const l=D._getExecutionVariable(this,"executionId",-1),G=D._getExecutionVariable(this,"cachedMatrix",null);if(l===D.executionId&&G)this.value.setValue(G,D);else{const l=M.Matrix.Compose(this.ub.getValue(D),this.rotationQuaternion.getValue(D),this.position.getValue(D));this.value.setValue(l,D),D._setExecutionVariable(this,"cachedMatrix",l),D._setExecutionVariable(this,"executionId",D.executionId)}}getClassName(){return"FlowGraphMatrixCompose"}}(0,b.c)("FlowGraphMatrixCompose",K)},14865:(D,l,G)=>{G.d(l,{c:()=>N});var V=G(14869);class N extends V.d{constructor(D,l,G,V,N,M){super(G,M),this._operation=V,this._className=N,this.a=this.registerDataInput("a",D),this.b=this.registerDataInput("b",l)}_doOperation(D){const l=this.a.getValue(D),G=this.b.getValue(D);return this._operation(l,G)}getClassName(){return this._className}}},14869:(D,l,G)=>{G.d(l,{d:()=>X});var V=G(13442),N=G(13423);const M="cachedOperationValue",b="cachedExecutionId";class X extends V.c{constructor(D,l){super(l),this.value=this.registerDataOutput("value",D),this.isValid=this.registerDataOutput("isValid",N.g)}_updateOutputs(D){const l=D._getExecutionVariable(this,b,-1),G=D._getExecutionVariable(this,M,null);if(void 0!==G&&null!==G&&l===D.executionId)this.isValid.setValue(!0,D),this.value.setValue(G,D);else try{const l=this._doOperation(D);if(void 0===l||null===l)return void this.isValid.setValue(!1,D);D._setExecutionVariable(this,M,l),D._setExecutionVariable(this,b,D.executionId),this.value.setValue(l,D),this.isValid.setValue(!0,D)}catch(V){this.isValid.setValue(!1,D)}}}},14872:(D,l,G)=>{G.d(l,{b:()=>N});var V=G(14869);class N extends V.d{constructor(D,l,G,V,N){super(l,N),this._operation=G,this._className=V,this.a=this.registerDataInput("a",D)}_doOperation(D){return this._operation(this.a.getValue(D))}getClassName(){return this._className}}}}]);