"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[90],{14411:(Q,X,C)=>{C.r(X),C.d(X,{FlowGraphSwitchBlock:()=>O});var l=C(13083),h=C(13063),M=C(620),f=C(13104);class O extends l.b{constructor(Q){super(Q),this.config=Q,this.default=this._registerSignalOutput("default"),this._caseToOutputFlow=new Map,this.case=this.registerDataInput("case",h.d);const X=this.config.cases||[];for(const C of X)this._caseToOutputFlow.set(C,this._registerSignalOutput(`out_${C}`))}_execute(Q,X){const C=this.case.getValue(Q);let l;l=(0,f.w)(C)?this._getOutputFlowForCase((0,f.s)(C)):this._getOutputFlowForCase(C),l?l._activateSignal(Q):this.default._activateSignal(Q)}addCase(Q){this.config.cases.includes(Q)||(this.config.cases.push(Q),this._caseToOutputFlow.set(Q,this._registerSignalOutput(`out_${Q}`)))}removeCase(Q){if(!this.config.cases.includes(Q))return;const X=this.config.cases.indexOf(Q);this.config.cases.splice(X,1),this._caseToOutputFlow.delete(Q)}_getOutputFlowForCase(Q){return this._caseToOutputFlow.get(Q)}getClassName(){return"FlowGraphSwitchBlock"}serialize(Q){super.serialize(Q),Q.cases=this.config.cases}}(0,M.g)("FlowGraphSwitchBlock",O)}}]);