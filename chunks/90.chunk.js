"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[90],{14243:(t,q,S)=>{S.r(q),S.d(q,{FlowGraphSwitchBlock:()=>r});var o=S(12942),B=S(12927),z=S(622),L=S(12957);class r extends o.d{constructor(t){super(t),this.config=t,this.default=this._registerSignalOutput("default"),this._caseToOutputFlow=new Map,this.case=this.registerDataInput("case",B.b);const q=this.config.cases||[];for(const S of q)this._caseToOutputFlow.set(S,this._registerSignalOutput(`out_${S}`))}_execute(t,q){const S=this.case.getValue(t);let o;o=(0,L.u)(S)?this._getOutputFlowForCase((0,L.q)(S)):this._getOutputFlowForCase(S),o?o._activateSignal(t):this.default._activateSignal(t)}addCase(t){this.config.cases.includes(t)||(this.config.cases.push(t),this._caseToOutputFlow.set(t,this._registerSignalOutput(`out_${t}`)))}removeCase(t){if(!this.config.cases.includes(t))return;const q=this.config.cases.indexOf(t);this.config.cases.splice(q,1),this._caseToOutputFlow.delete(t)}_getOutputFlowForCase(t){return this._caseToOutputFlow.get(t)}getClassName(){return"FlowGraphSwitchBlock"}serialize(t){super.serialize(t),t.cases=this.config.cases}}(0,z.c)("FlowGraphSwitchBlock",r)}}]);