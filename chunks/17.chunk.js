"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{12847:(N,q,R)=>{R.r(q),R.d(q,{_TGATextureLoader:()=>S});var z=R(10907);function v(N){let q=0;return{id_length:N[q++],colormap_type:N[q++],image_type:N[q++],colormap_index:N[q++]|N[q++]<<8,colormap_length:N[q++]|N[q++]<<8,colormap_size:N[q++],origin:[N[q++]|N[q++]<<8,N[q++]|N[q++]<<8],width:N[q++]|N[q++]<<8,height:N[q++]|N[q++]<<8,pixel_size:N[q++],flags:N[q++]}}function B(N,q){if(q.length<19)return void z.c.Error("Unable to load TGA file - Not enough data to contain header");let R=18;const B=v(q);if(B.id_length+R>q.length)return void z.c.Error("Unable to load TGA file - Not enough data");R+=B.id_length;let S,A=!1,y=!1,E=!1;switch(B.image_type){case 9:A=!0;case 1:y=!0;break;case 10:A=!0;case 2:break;case 11:A=!0;case 3:E=!0}const t=B.pixel_size>>3,x=B.width*B.height*t;let e,b,f,D,V,H,Y;if(y&&(e=q.subarray(R,R+=B.colormap_length*(B.colormap_size>>3))),A){let N,z,v;S=new Uint8Array(x);let B=0;const F=new Uint8Array(t);for(;R<x&&B<x;)if(N=q[R++],z=1+(127&N),128&N){for(v=0;v<t;++v)F[v]=q[R++];for(v=0;v<z;++v)S.set(F,B+v*t);B+=t*z}else{for(z*=t,v=0;v<z;++v)S[B+v]=q[R++];B+=z}}else S=q.subarray(R,R+=y?B.width*B.height:x);switch((48&B.flags)>>4){default:case 2:b=0,D=1,Y=B.width,f=0,V=1,H=B.height;break;case 0:b=0,D=1,Y=B.width,f=B.height-1,V=-1,H=-1;break;case 3:b=B.width-1,D=-1,Y=-1,f=0,V=1,H=B.height;break;case 1:b=B.width-1,D=-1,Y=-1,f=B.height-1,V=-1,H=-1}const T="_getImageData"+(E?"Grey":"")+B.pixel_size+"bits",L=F[T](B,e,S,f,V,H,b,D,Y);N.getEngine()._uploadDataToTextureDirectly(N,L)}const F={GetTGAHeader:v,UploadContent:B,_getImageData8bits:function(N,q,R,z,v,B,F,S,A){const y=R,E=q,t=N.width,x=N.height;let e,b,f,D=0;const V=new Uint8Array(t*x*4);for(f=z;f!==B;f+=v)for(b=F;b!==A;b+=S,D++)e=y[D],V[4*(b+t*f)+3]=255,V[4*(b+t*f)+2]=E[3*e+0],V[4*(b+t*f)+1]=E[3*e+1],V[4*(b+t*f)+0]=E[3*e+2];return V},_getImageData16bits:function(N,q,R,z,v,B,F,S,A){const y=R,E=N.width,t=N.height;let x,e,b,f=0;const D=new Uint8Array(E*t*4);for(b=z;b!==B;b+=v)for(e=F;e!==A;e+=S,f+=2){x=y[f+0]+(y[f+1]<<8);const N=255*((31744&x)>>10)/31|0,q=255*((992&x)>>5)/31|0,R=255*(31&x)/31|0;D[4*(e+E*b)+0]=N,D[4*(e+E*b)+1]=q,D[4*(e+E*b)+2]=R,D[4*(e+E*b)+3]=32768&x?0:255}return D},_getImageData24bits:function(N,q,R,z,v,B,F,S,A){const y=R,E=N.width,t=N.height;let x,e,b=0;const f=new Uint8Array(E*t*4);for(e=z;e!==B;e+=v)for(x=F;x!==A;x+=S,b+=3)f[4*(x+E*e)+3]=255,f[4*(x+E*e)+2]=y[b+0],f[4*(x+E*e)+1]=y[b+1],f[4*(x+E*e)+0]=y[b+2];return f},_getImageData32bits:function(N,q,R,z,v,B,F,S,A){const y=R,E=N.width,t=N.height;let x,e,b=0;const f=new Uint8Array(E*t*4);for(e=z;e!==B;e+=v)for(x=F;x!==A;x+=S,b+=4)f[4*(x+E*e)+2]=y[b+0],f[4*(x+E*e)+1]=y[b+1],f[4*(x+E*e)+0]=y[b+2],f[4*(x+E*e)+3]=y[b+3];return f},_getImageDataGrey8bits:function(N,q,R,z,v,B,F,S,A){const y=R,E=N.width,t=N.height;let x,e,b,f=0;const D=new Uint8Array(E*t*4);for(b=z;b!==B;b+=v)for(e=F;e!==A;e+=S,f++)x=y[f],D[4*(e+E*b)+0]=x,D[4*(e+E*b)+1]=x,D[4*(e+E*b)+2]=x,D[4*(e+E*b)+3]=255;return D},_getImageDataGrey16bits:function(N,q,R,z,v,B,F,S,A){const y=R,E=N.width,t=N.height;let x,e,b=0;const f=new Uint8Array(E*t*4);for(e=z;e!==B;e+=v)for(x=F;x!==A;x+=S,b+=2)f[4*(x+E*e)+0]=y[b+0],f[4*(x+E*e)+1]=y[b+0],f[4*(x+E*e)+2]=y[b+0],f[4*(x+E*e)+3]=y[b+1];return f}};class S{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(N,q,R){const z=new Uint8Array(N.buffer,N.byteOffset,N.byteLength),F=v(z);R(F.width,F.height,q.generateMipMaps,!1,(()=>{B(q,z)}))}}}}]);