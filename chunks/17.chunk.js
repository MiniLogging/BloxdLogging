"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{12927:(O,f,y)=>{y.r(f),y.d(f,{_TGATextureLoader:()=>v});var S=y(11017);function H(O){let f=0;return{id_length:O[f++],colormap_type:O[f++],image_type:O[f++],colormap_index:O[f++]|O[f++]<<8,colormap_length:O[f++]|O[f++]<<8,colormap_size:O[f++],origin:[O[f++]|O[f++]<<8,O[f++]|O[f++]<<8],width:O[f++]|O[f++]<<8,height:O[f++]|O[f++]<<8,pixel_size:O[f++],flags:O[f++]}}function b(O,f){if(f.length<19)return void S.e.Error("Unable to load TGA file - Not enough data to contain header");let y=18;const b=H(f);if(b.id_length+y>f.length)return void S.e.Error("Unable to load TGA file - Not enough data");y+=b.id_length;let v,N=!1,m=!1,t=!1;switch(b.image_type){case 9:N=!0;case 1:m=!0;break;case 10:N=!0;case 2:break;case 11:N=!0;case 3:t=!0}const q=b.pixel_size>>3,F=b.width*b.height*q;let I,A,J,X,w,B,j;if(m&&(I=f.subarray(y,y+=b.colormap_length*(b.colormap_size>>3))),N){let O,S,H;v=new Uint8Array(F);let b=0;const h=new Uint8Array(q);for(;y<F&&b<F;)if(O=f[y++],S=1+(127&O),128&O){for(H=0;H<q;++H)h[H]=f[y++];for(H=0;H<S;++H)v.set(h,b+H*q);b+=q*S}else{for(S*=q,H=0;H<S;++H)v[b+H]=f[y++];b+=S}}else v=f.subarray(y,y+=m?b.width*b.height:F);switch((48&b.flags)>>4){default:case 2:A=0,X=1,j=b.width,J=0,w=1,B=b.height;break;case 0:A=0,X=1,j=b.width,J=b.height-1,w=-1,B=-1;break;case 3:A=b.width-1,X=-1,j=-1,J=0,w=1,B=b.height;break;case 1:A=b.width-1,X=-1,j=-1,J=b.height-1,w=-1,B=-1}const u="_getImageData"+(t?"Grey":"")+b.pixel_size+"bits",L=h[u](b,I,v,J,w,B,A,X,j);O.getEngine()._uploadDataToTextureDirectly(O,L)}const h={GetTGAHeader:H,UploadContent:b,_getImageData8bits:function(O,f,y,S,H,b,h,v,N){const m=y,t=f,q=O.width,F=O.height;let I,A,J,X=0;const w=new Uint8Array(q*F*4);for(J=S;J!==b;J+=H)for(A=h;A!==N;A+=v,X++)I=m[X],w[4*(A+q*J)+3]=255,w[4*(A+q*J)+2]=t[3*I+0],w[4*(A+q*J)+1]=t[3*I+1],w[4*(A+q*J)+0]=t[3*I+2];return w},_getImageData16bits:function(O,f,y,S,H,b,h,v,N){const m=y,t=O.width,q=O.height;let F,I,A,J=0;const X=new Uint8Array(t*q*4);for(A=S;A!==b;A+=H)for(I=h;I!==N;I+=v,J+=2){F=m[J+0]+(m[J+1]<<8);const O=255*((31744&F)>>10)/31|0,f=255*((992&F)>>5)/31|0,y=255*(31&F)/31|0;X[4*(I+t*A)+0]=O,X[4*(I+t*A)+1]=f,X[4*(I+t*A)+2]=y,X[4*(I+t*A)+3]=32768&F?0:255}return X},_getImageData24bits:function(O,f,y,S,H,b,h,v,N){const m=y,t=O.width,q=O.height;let F,I,A=0;const J=new Uint8Array(t*q*4);for(I=S;I!==b;I+=H)for(F=h;F!==N;F+=v,A+=3)J[4*(F+t*I)+3]=255,J[4*(F+t*I)+2]=m[A+0],J[4*(F+t*I)+1]=m[A+1],J[4*(F+t*I)+0]=m[A+2];return J},_getImageData32bits:function(O,f,y,S,H,b,h,v,N){const m=y,t=O.width,q=O.height;let F,I,A=0;const J=new Uint8Array(t*q*4);for(I=S;I!==b;I+=H)for(F=h;F!==N;F+=v,A+=4)J[4*(F+t*I)+2]=m[A+0],J[4*(F+t*I)+1]=m[A+1],J[4*(F+t*I)+0]=m[A+2],J[4*(F+t*I)+3]=m[A+3];return J},_getImageDataGrey8bits:function(O,f,y,S,H,b,h,v,N){const m=y,t=O.width,q=O.height;let F,I,A,J=0;const X=new Uint8Array(t*q*4);for(A=S;A!==b;A+=H)for(I=h;I!==N;I+=v,J++)F=m[J],X[4*(I+t*A)+0]=F,X[4*(I+t*A)+1]=F,X[4*(I+t*A)+2]=F,X[4*(I+t*A)+3]=255;return X},_getImageDataGrey16bits:function(O,f,y,S,H,b,h,v,N){const m=y,t=O.width,q=O.height;let F,I,A=0;const J=new Uint8Array(t*q*4);for(I=S;I!==b;I+=H)for(F=h;F!==N;F+=v,A+=2)J[4*(F+t*I)+0]=m[A+0],J[4*(F+t*I)+1]=m[A+0],J[4*(F+t*I)+2]=m[A+0],J[4*(F+t*I)+3]=m[A+1];return J}};class v{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(O,f,y){const S=new Uint8Array(O.buffer,O.byteOffset,O.byteLength),h=H(S);y(h.width,h.height,f.generateMipMaps,!1,(()=>{b(f,S)}))}}}}]);