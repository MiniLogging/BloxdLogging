"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{12581:(u,G,s)=>{s.r(G),s.d(G,{_TGATextureLoader:()=>f});var T=s(10584);function z(u){let G=0;return{id_length:u[G++],colormap_type:u[G++],image_type:u[G++],colormap_index:u[G++]|u[G++]<<8,colormap_length:u[G++]|u[G++]<<8,colormap_size:u[G++],origin:[u[G++]|u[G++]<<8,u[G++]|u[G++]<<8],width:u[G++]|u[G++]<<8,height:u[G++]|u[G++]<<8,pixel_size:u[G++],flags:u[G++]}}function O(u,G){if(G.length<19)return void T.d.Error("Unable to load TGA file - Not enough data to contain header");let s=18;const O=z(G);if(O.id_length+s>G.length)return void T.d.Error("Unable to load TGA file - Not enough data");s+=O.id_length;let f,C=!1,x=!1,g=!1;switch(O.image_type){case 9:C=!0;case 1:x=!0;break;case 10:C=!0;case 2:break;case 11:C=!0;case 3:g=!0}const b=O.pixel_size>>3,Q=O.width*O.height*b;let Y,n,V,F,r,c,j;if(x&&(Y=G.subarray(s,s+=O.colormap_length*(O.colormap_size>>3))),C){let u,T,z;f=new Uint8Array(Q);let O=0;const m=new Uint8Array(b);for(;s<Q&&O<Q;)if(u=G[s++],T=1+(127&u),128&u){for(z=0;z<b;++z)m[z]=G[s++];for(z=0;z<T;++z)f.set(m,O+z*b);O+=b*T}else{for(T*=b,z=0;z<T;++z)f[O+z]=G[s++];O+=T}}else f=G.subarray(s,s+=x?O.width*O.height:Q);switch((48&O.flags)>>4){default:case 2:n=0,F=1,j=O.width,V=0,r=1,c=O.height;break;case 0:n=0,F=1,j=O.width,V=O.height-1,r=-1,c=-1;break;case 3:n=O.width-1,F=-1,j=-1,V=0,r=1,c=O.height;break;case 1:n=O.width-1,F=-1,j=-1,V=O.height-1,r=-1,c=-1}const l="_getImageData"+(g?"Grey":"")+O.pixel_size+"bits",P=m[l](O,Y,f,V,r,c,n,F,j);u.getEngine()._uploadDataToTextureDirectly(u,P)}const m={GetTGAHeader:z,UploadContent:O,_getImageData8bits:function(u,G,s,T,z,O,m,f,C){const x=s,g=G,b=u.width,Q=u.height;let Y,n,V,F=0;const r=new Uint8Array(b*Q*4);for(V=T;V!==O;V+=z)for(n=m;n!==C;n+=f,F++)Y=x[F],r[4*(n+b*V)+3]=255,r[4*(n+b*V)+2]=g[3*Y+0],r[4*(n+b*V)+1]=g[3*Y+1],r[4*(n+b*V)+0]=g[3*Y+2];return r},_getImageData16bits:function(u,G,s,T,z,O,m,f,C){const x=s,g=u.width,b=u.height;let Q,Y,n,V=0;const F=new Uint8Array(g*b*4);for(n=T;n!==O;n+=z)for(Y=m;Y!==C;Y+=f,V+=2){Q=x[V+0]+(x[V+1]<<8);const u=255*((31744&Q)>>10)/31|0,G=255*((992&Q)>>5)/31|0,s=255*(31&Q)/31|0;F[4*(Y+g*n)+0]=u,F[4*(Y+g*n)+1]=G,F[4*(Y+g*n)+2]=s,F[4*(Y+g*n)+3]=32768&Q?0:255}return F},_getImageData24bits:function(u,G,s,T,z,O,m,f,C){const x=s,g=u.width,b=u.height;let Q,Y,n=0;const V=new Uint8Array(g*b*4);for(Y=T;Y!==O;Y+=z)for(Q=m;Q!==C;Q+=f,n+=3)V[4*(Q+g*Y)+3]=255,V[4*(Q+g*Y)+2]=x[n+0],V[4*(Q+g*Y)+1]=x[n+1],V[4*(Q+g*Y)+0]=x[n+2];return V},_getImageData32bits:function(u,G,s,T,z,O,m,f,C){const x=s,g=u.width,b=u.height;let Q,Y,n=0;const V=new Uint8Array(g*b*4);for(Y=T;Y!==O;Y+=z)for(Q=m;Q!==C;Q+=f,n+=4)V[4*(Q+g*Y)+2]=x[n+0],V[4*(Q+g*Y)+1]=x[n+1],V[4*(Q+g*Y)+0]=x[n+2],V[4*(Q+g*Y)+3]=x[n+3];return V},_getImageDataGrey8bits:function(u,G,s,T,z,O,m,f,C){const x=s,g=u.width,b=u.height;let Q,Y,n,V=0;const F=new Uint8Array(g*b*4);for(n=T;n!==O;n+=z)for(Y=m;Y!==C;Y+=f,V++)Q=x[V],F[4*(Y+g*n)+0]=Q,F[4*(Y+g*n)+1]=Q,F[4*(Y+g*n)+2]=Q,F[4*(Y+g*n)+3]=255;return F},_getImageDataGrey16bits:function(u,G,s,T,z,O,m,f,C){const x=s,g=u.width,b=u.height;let Q,Y,n=0;const V=new Uint8Array(g*b*4);for(Y=T;Y!==O;Y+=z)for(Q=m;Q!==C;Q+=f,n+=2)V[4*(Q+g*Y)+0]=x[n+0],V[4*(Q+g*Y)+1]=x[n+0],V[4*(Q+g*Y)+2]=x[n+0],V[4*(Q+g*Y)+3]=x[n+1];return V}};class f{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(u,G,s){const T=new Uint8Array(u.buffer,u.byteOffset,u.byteLength),m=z(T);s(m.width,m.height,G.generateMipMaps,!1,(()=>{O(G,T)}))}}}}]);