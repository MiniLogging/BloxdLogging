"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{12757:(E,Y,C)=>{C.r(Y),C.d(Y,{_TGATextureLoader:()=>T});var P=C(10750);function K(E){let Y=0;return{id_length:E[Y++],colormap_type:E[Y++],image_type:E[Y++],colormap_index:E[Y++]|E[Y++]<<8,colormap_length:E[Y++]|E[Y++]<<8,colormap_size:E[Y++],origin:[E[Y++]|E[Y++]<<8,E[Y++]|E[Y++]<<8],width:E[Y++]|E[Y++]<<8,height:E[Y++]|E[Y++]<<8,pixel_size:E[Y++],flags:E[Y++]}}function m(E,Y){if(Y.length<19)return void P.d.Error("Unable to load TGA file - Not enough data to contain header");let C=18;const m=K(Y);if(m.id_length+C>Y.length)return void P.d.Error("Unable to load TGA file - Not enough data");C+=m.id_length;let T,a=!1,J=!1,t=!1;switch(m.image_type){case 9:a=!0;case 1:J=!0;break;case 10:a=!0;case 2:break;case 11:a=!0;case 3:t=!0}const p=m.pixel_size>>3,W=m.width*m.height*p;let k,y,v,V,Z,M,h;if(J&&(k=Y.subarray(C,C+=m.colormap_length*(m.colormap_size>>3))),a){let E,P,K;T=new Uint8Array(W);let m=0;const u=new Uint8Array(p);for(;C<W&&m<W;)if(E=Y[C++],P=1+(127&E),128&E){for(K=0;K<p;++K)u[K]=Y[C++];for(K=0;K<P;++K)T.set(u,m+K*p);m+=p*P}else{for(P*=p,K=0;K<P;++K)T[m+K]=Y[C++];m+=P}}else T=Y.subarray(C,C+=J?m.width*m.height:W);switch((48&m.flags)>>4){default:case 2:y=0,V=1,h=m.width,v=0,Z=1,M=m.height;break;case 0:y=0,V=1,h=m.width,v=m.height-1,Z=-1,M=-1;break;case 3:y=m.width-1,V=-1,h=-1,v=0,Z=1,M=m.height;break;case 1:y=m.width-1,V=-1,h=-1,v=m.height-1,Z=-1,M=-1}const f="_getImageData"+(t?"Grey":"")+m.pixel_size+"bits",G=u[f](m,k,T,v,Z,M,y,V,h);E.getEngine()._uploadDataToTextureDirectly(E,G)}const u={GetTGAHeader:K,UploadContent:m,_getImageData8bits:function(E,Y,C,P,K,m,u,T,a){const J=C,t=Y,p=E.width,W=E.height;let k,y,v,V=0;const Z=new Uint8Array(p*W*4);for(v=P;v!==m;v+=K)for(y=u;y!==a;y+=T,V++)k=J[V],Z[4*(y+p*v)+3]=255,Z[4*(y+p*v)+2]=t[3*k+0],Z[4*(y+p*v)+1]=t[3*k+1],Z[4*(y+p*v)+0]=t[3*k+2];return Z},_getImageData16bits:function(E,Y,C,P,K,m,u,T,a){const J=C,t=E.width,p=E.height;let W,k,y,v=0;const V=new Uint8Array(t*p*4);for(y=P;y!==m;y+=K)for(k=u;k!==a;k+=T,v+=2){W=J[v+0]+(J[v+1]<<8);const E=255*((31744&W)>>10)/31|0,Y=255*((992&W)>>5)/31|0,C=255*(31&W)/31|0;V[4*(k+t*y)+0]=E,V[4*(k+t*y)+1]=Y,V[4*(k+t*y)+2]=C,V[4*(k+t*y)+3]=32768&W?0:255}return V},_getImageData24bits:function(E,Y,C,P,K,m,u,T,a){const J=C,t=E.width,p=E.height;let W,k,y=0;const v=new Uint8Array(t*p*4);for(k=P;k!==m;k+=K)for(W=u;W!==a;W+=T,y+=3)v[4*(W+t*k)+3]=255,v[4*(W+t*k)+2]=J[y+0],v[4*(W+t*k)+1]=J[y+1],v[4*(W+t*k)+0]=J[y+2];return v},_getImageData32bits:function(E,Y,C,P,K,m,u,T,a){const J=C,t=E.width,p=E.height;let W,k,y=0;const v=new Uint8Array(t*p*4);for(k=P;k!==m;k+=K)for(W=u;W!==a;W+=T,y+=4)v[4*(W+t*k)+2]=J[y+0],v[4*(W+t*k)+1]=J[y+1],v[4*(W+t*k)+0]=J[y+2],v[4*(W+t*k)+3]=J[y+3];return v},_getImageDataGrey8bits:function(E,Y,C,P,K,m,u,T,a){const J=C,t=E.width,p=E.height;let W,k,y,v=0;const V=new Uint8Array(t*p*4);for(y=P;y!==m;y+=K)for(k=u;k!==a;k+=T,v++)W=J[v],V[4*(k+t*y)+0]=W,V[4*(k+t*y)+1]=W,V[4*(k+t*y)+2]=W,V[4*(k+t*y)+3]=255;return V},_getImageDataGrey16bits:function(E,Y,C,P,K,m,u,T,a){const J=C,t=E.width,p=E.height;let W,k,y=0;const v=new Uint8Array(t*p*4);for(k=P;k!==m;k+=K)for(W=u;W!==a;W+=T,y+=2)v[4*(W+t*k)+0]=J[y+0],v[4*(W+t*k)+1]=J[y+0],v[4*(W+t*k)+2]=J[y+0],v[4*(W+t*k)+3]=J[y+1];return v}};class T{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(E,Y,C){const P=new Uint8Array(E.buffer,E.byteOffset,E.byteLength),u=K(P);C(u.width,u.height,Y.generateMipMaps,!1,(()=>{m(Y,P)}))}}}}]);