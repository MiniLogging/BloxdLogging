"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{12715:(A,e,E)=>{E.r(e),E.d(e,{_TGATextureLoader:()=>h});var Q=E(10729);function x(A){let e=0;return{id_length:A[e++],colormap_type:A[e++],image_type:A[e++],colormap_index:A[e++]|A[e++]<<8,colormap_length:A[e++]|A[e++]<<8,colormap_size:A[e++],origin:[A[e++]|A[e++]<<8,A[e++]|A[e++]<<8],width:A[e++]|A[e++]<<8,height:A[e++]|A[e++]<<8,pixel_size:A[e++],flags:A[e++]}}function t(A,e){if(e.length<19)return void Q.d.Error("Unable to load TGA file - Not enough data to contain header");let E=18;const t=x(e);if(t.id_length+E>e.length)return void Q.d.Error("Unable to load TGA file - Not enough data");E+=t.id_length;let h,Y=!1,F=!1,w=!1;switch(t.image_type){case 9:Y=!0;case 1:F=!0;break;case 10:Y=!0;case 2:break;case 11:Y=!0;case 3:w=!0}const r=t.pixel_size>>3,S=t.width*t.height*r;let v,c,D,a,z,I,J;if(F&&(v=e.subarray(E,E+=t.colormap_length*(t.colormap_size>>3))),Y){let A,Q,x;h=new Uint8Array(S);let t=0;const H=new Uint8Array(r);for(;E<S&&t<S;)if(A=e[E++],Q=1+(127&A),128&A){for(x=0;x<r;++x)H[x]=e[E++];for(x=0;x<Q;++x)h.set(H,t+x*r);t+=r*Q}else{for(Q*=r,x=0;x<Q;++x)h[t+x]=e[E++];t+=Q}}else h=e.subarray(E,E+=F?t.width*t.height:S);switch((48&t.flags)>>4){default:case 2:c=0,a=1,J=t.width,D=0,z=1,I=t.height;break;case 0:c=0,a=1,J=t.width,D=t.height-1,z=-1,I=-1;break;case 3:c=t.width-1,a=-1,J=-1,D=0,z=1,I=t.height;break;case 1:c=t.width-1,a=-1,J=-1,D=t.height-1,z=-1,I=-1}const K="_getImageData"+(w?"Grey":"")+t.pixel_size+"bits",P=H[K](t,v,h,D,z,I,c,a,J);A.getEngine()._uploadDataToTextureDirectly(A,P)}const H={GetTGAHeader:x,UploadContent:t,_getImageData8bits:function(A,e,E,Q,x,t,H,h,Y){const F=E,w=e,r=A.width,S=A.height;let v,c,D,a=0;const z=new Uint8Array(r*S*4);for(D=Q;D!==t;D+=x)for(c=H;c!==Y;c+=h,a++)v=F[a],z[4*(c+r*D)+3]=255,z[4*(c+r*D)+2]=w[3*v+0],z[4*(c+r*D)+1]=w[3*v+1],z[4*(c+r*D)+0]=w[3*v+2];return z},_getImageData16bits:function(A,e,E,Q,x,t,H,h,Y){const F=E,w=A.width,r=A.height;let S,v,c,D=0;const a=new Uint8Array(w*r*4);for(c=Q;c!==t;c+=x)for(v=H;v!==Y;v+=h,D+=2){S=F[D+0]+(F[D+1]<<8);const A=255*((31744&S)>>10)/31|0,e=255*((992&S)>>5)/31|0,E=255*(31&S)/31|0;a[4*(v+w*c)+0]=A,a[4*(v+w*c)+1]=e,a[4*(v+w*c)+2]=E,a[4*(v+w*c)+3]=32768&S?0:255}return a},_getImageData24bits:function(A,e,E,Q,x,t,H,h,Y){const F=E,w=A.width,r=A.height;let S,v,c=0;const D=new Uint8Array(w*r*4);for(v=Q;v!==t;v+=x)for(S=H;S!==Y;S+=h,c+=3)D[4*(S+w*v)+3]=255,D[4*(S+w*v)+2]=F[c+0],D[4*(S+w*v)+1]=F[c+1],D[4*(S+w*v)+0]=F[c+2];return D},_getImageData32bits:function(A,e,E,Q,x,t,H,h,Y){const F=E,w=A.width,r=A.height;let S,v,c=0;const D=new Uint8Array(w*r*4);for(v=Q;v!==t;v+=x)for(S=H;S!==Y;S+=h,c+=4)D[4*(S+w*v)+2]=F[c+0],D[4*(S+w*v)+1]=F[c+1],D[4*(S+w*v)+0]=F[c+2],D[4*(S+w*v)+3]=F[c+3];return D},_getImageDataGrey8bits:function(A,e,E,Q,x,t,H,h,Y){const F=E,w=A.width,r=A.height;let S,v,c,D=0;const a=new Uint8Array(w*r*4);for(c=Q;c!==t;c+=x)for(v=H;v!==Y;v+=h,D++)S=F[D],a[4*(v+w*c)+0]=S,a[4*(v+w*c)+1]=S,a[4*(v+w*c)+2]=S,a[4*(v+w*c)+3]=255;return a},_getImageDataGrey16bits:function(A,e,E,Q,x,t,H,h,Y){const F=E,w=A.width,r=A.height;let S,v,c=0;const D=new Uint8Array(w*r*4);for(v=Q;v!==t;v+=x)for(S=H;S!==Y;S+=h,c+=2)D[4*(S+w*v)+0]=F[c+0],D[4*(S+w*v)+1]=F[c+0],D[4*(S+w*v)+2]=F[c+0],D[4*(S+w*v)+3]=F[c+1];return D}};class h{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(A,e,E){const Q=new Uint8Array(A.buffer,A.byteOffset,A.byteLength),H=x(Q);E(H.width,H.height,e.generateMipMaps,!1,(()=>{t(e,Q)}))}}}}]);