"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{12783:(d,t,A)=>{A.r(t),A.d(t,{_TGATextureLoader:()=>X});var w=A(10740);function N(d){let t=0;return{id_length:d[t++],colormap_type:d[t++],image_type:d[t++],colormap_index:d[t++]|d[t++]<<8,colormap_length:d[t++]|d[t++]<<8,colormap_size:d[t++],origin:[d[t++]|d[t++]<<8,d[t++]|d[t++]<<8],width:d[t++]|d[t++]<<8,height:d[t++]|d[t++]<<8,pixel_size:d[t++],flags:d[t++]}}function p(d,t){if(t.length<19)return void w.e.Error("Unable to load TGA file - Not enough data to contain header");let A=18;const p=N(t);if(p.id_length+A>t.length)return void w.e.Error("Unable to load TGA file - Not enough data");A+=p.id_length;let X,W=!1,a=!1,D=!1;switch(p.image_type){case 9:W=!0;case 1:a=!0;break;case 10:W=!0;case 2:break;case 11:W=!0;case 3:D=!0}const i=p.pixel_size>>3,k=p.width*p.height*i;let b,Q,P,J,U,T,F;if(a&&(b=t.subarray(A,A+=p.colormap_length*(p.colormap_size>>3))),W){let d,w,N;X=new Uint8Array(k);let p=0;const B=new Uint8Array(i);for(;A<k&&p<k;)if(d=t[A++],w=1+(127&d),128&d){for(N=0;N<i;++N)B[N]=t[A++];for(N=0;N<w;++N)X.set(B,p+N*i);p+=i*w}else{for(w*=i,N=0;N<w;++N)X[p+N]=t[A++];p+=w}}else X=t.subarray(A,A+=a?p.width*p.height:k);switch((48&p.flags)>>4){default:case 2:Q=0,J=1,F=p.width,P=0,U=1,T=p.height;break;case 0:Q=0,J=1,F=p.width,P=p.height-1,U=-1,T=-1;break;case 3:Q=p.width-1,J=-1,F=-1,P=0,U=1,T=p.height;break;case 1:Q=p.width-1,J=-1,F=-1,P=p.height-1,U=-1,T=-1}const q="_getImageData"+(D?"Grey":"")+p.pixel_size+"bits",H=B[q](p,b,X,P,U,T,Q,J,F);d.getEngine()._uploadDataToTextureDirectly(d,H)}const B={GetTGAHeader:N,UploadContent:p,_getImageData8bits:function(d,t,A,w,N,p,B,X,W){const a=A,D=t,i=d.width,k=d.height;let b,Q,P,J=0;const U=new Uint8Array(i*k*4);for(P=w;P!==p;P+=N)for(Q=B;Q!==W;Q+=X,J++)b=a[J],U[4*(Q+i*P)+3]=255,U[4*(Q+i*P)+2]=D[3*b+0],U[4*(Q+i*P)+1]=D[3*b+1],U[4*(Q+i*P)+0]=D[3*b+2];return U},_getImageData16bits:function(d,t,A,w,N,p,B,X,W){const a=A,D=d.width,i=d.height;let k,b,Q,P=0;const J=new Uint8Array(D*i*4);for(Q=w;Q!==p;Q+=N)for(b=B;b!==W;b+=X,P+=2){k=a[P+0]+(a[P+1]<<8);const d=255*((31744&k)>>10)/31|0,t=255*((992&k)>>5)/31|0,A=255*(31&k)/31|0;J[4*(b+D*Q)+0]=d,J[4*(b+D*Q)+1]=t,J[4*(b+D*Q)+2]=A,J[4*(b+D*Q)+3]=32768&k?0:255}return J},_getImageData24bits:function(d,t,A,w,N,p,B,X,W){const a=A,D=d.width,i=d.height;let k,b,Q=0;const P=new Uint8Array(D*i*4);for(b=w;b!==p;b+=N)for(k=B;k!==W;k+=X,Q+=3)P[4*(k+D*b)+3]=255,P[4*(k+D*b)+2]=a[Q+0],P[4*(k+D*b)+1]=a[Q+1],P[4*(k+D*b)+0]=a[Q+2];return P},_getImageData32bits:function(d,t,A,w,N,p,B,X,W){const a=A,D=d.width,i=d.height;let k,b,Q=0;const P=new Uint8Array(D*i*4);for(b=w;b!==p;b+=N)for(k=B;k!==W;k+=X,Q+=4)P[4*(k+D*b)+2]=a[Q+0],P[4*(k+D*b)+1]=a[Q+1],P[4*(k+D*b)+0]=a[Q+2],P[4*(k+D*b)+3]=a[Q+3];return P},_getImageDataGrey8bits:function(d,t,A,w,N,p,B,X,W){const a=A,D=d.width,i=d.height;let k,b,Q,P=0;const J=new Uint8Array(D*i*4);for(Q=w;Q!==p;Q+=N)for(b=B;b!==W;b+=X,P++)k=a[P],J[4*(b+D*Q)+0]=k,J[4*(b+D*Q)+1]=k,J[4*(b+D*Q)+2]=k,J[4*(b+D*Q)+3]=255;return J},_getImageDataGrey16bits:function(d,t,A,w,N,p,B,X,W){const a=A,D=d.width,i=d.height;let k,b,Q=0;const P=new Uint8Array(D*i*4);for(b=w;b!==p;b+=N)for(k=B;k!==W;k+=X,Q+=2)P[4*(k+D*b)+0]=a[Q+0],P[4*(k+D*b)+1]=a[Q+0],P[4*(k+D*b)+2]=a[Q+0],P[4*(k+D*b)+3]=a[Q+1];return P}};class X{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(d,t,A){const w=new Uint8Array(d.buffer,d.byteOffset,d.byteLength),B=N(w);A(B.width,B.height,t.generateMipMaps,!1,(()=>{p(t,w)}))}}}}]);