"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{12751:(a,R,Y)=>{Y.r(R),Y.d(R,{_TGATextureLoader:()=>t});var T=Y(10753);function c(a){let R=0;return{id_length:a[R++],colormap_type:a[R++],image_type:a[R++],colormap_index:a[R++]|a[R++]<<8,colormap_length:a[R++]|a[R++]<<8,colormap_size:a[R++],origin:[a[R++]|a[R++]<<8,a[R++]|a[R++]<<8],width:a[R++]|a[R++]<<8,height:a[R++]|a[R++]<<8,pixel_size:a[R++],flags:a[R++]}}function K(a,R){if(R.length<19)return void T.d.Error("Unable to load TGA file - Not enough data to contain header");let Y=18;const K=c(R);if(K.id_length+Y>R.length)return void T.d.Error("Unable to load TGA file - Not enough data");Y+=K.id_length;let t,U=!1,b=!1,C=!1;switch(K.image_type){case 9:U=!0;case 1:b=!0;break;case 10:U=!0;case 2:break;case 11:U=!0;case 3:C=!0}const e=K.pixel_size>>3,Z=K.width*K.height*e;let W,o,i,d,v,A,r;if(b&&(W=R.subarray(Y,Y+=K.colormap_length*(K.colormap_size>>3))),U){let a,T,c;t=new Uint8Array(Z);let K=0;const g=new Uint8Array(e);for(;Y<Z&&K<Z;)if(a=R[Y++],T=1+(127&a),128&a){for(c=0;c<e;++c)g[c]=R[Y++];for(c=0;c<T;++c)t.set(g,K+c*e);K+=e*T}else{for(T*=e,c=0;c<T;++c)t[K+c]=R[Y++];K+=T}}else t=R.subarray(Y,Y+=b?K.width*K.height:Z);switch((48&K.flags)>>4){default:case 2:o=0,d=1,r=K.width,i=0,v=1,A=K.height;break;case 0:o=0,d=1,r=K.width,i=K.height-1,v=-1,A=-1;break;case 3:o=K.width-1,d=-1,r=-1,i=0,v=1,A=K.height;break;case 1:o=K.width-1,d=-1,r=-1,i=K.height-1,v=-1,A=-1}const m="_getImageData"+(C?"Grey":"")+K.pixel_size+"bits",H=g[m](K,W,t,i,v,A,o,d,r);a.getEngine()._uploadDataToTextureDirectly(a,H)}const g={GetTGAHeader:c,UploadContent:K,_getImageData8bits:function(a,R,Y,T,c,K,g,t,U){const b=Y,C=R,e=a.width,Z=a.height;let W,o,i,d=0;const v=new Uint8Array(e*Z*4);for(i=T;i!==K;i+=c)for(o=g;o!==U;o+=t,d++)W=b[d],v[4*(o+e*i)+3]=255,v[4*(o+e*i)+2]=C[3*W+0],v[4*(o+e*i)+1]=C[3*W+1],v[4*(o+e*i)+0]=C[3*W+2];return v},_getImageData16bits:function(a,R,Y,T,c,K,g,t,U){const b=Y,C=a.width,e=a.height;let Z,W,o,i=0;const d=new Uint8Array(C*e*4);for(o=T;o!==K;o+=c)for(W=g;W!==U;W+=t,i+=2){Z=b[i+0]+(b[i+1]<<8);const a=255*((31744&Z)>>10)/31|0,R=255*((992&Z)>>5)/31|0,Y=255*(31&Z)/31|0;d[4*(W+C*o)+0]=a,d[4*(W+C*o)+1]=R,d[4*(W+C*o)+2]=Y,d[4*(W+C*o)+3]=32768&Z?0:255}return d},_getImageData24bits:function(a,R,Y,T,c,K,g,t,U){const b=Y,C=a.width,e=a.height;let Z,W,o=0;const i=new Uint8Array(C*e*4);for(W=T;W!==K;W+=c)for(Z=g;Z!==U;Z+=t,o+=3)i[4*(Z+C*W)+3]=255,i[4*(Z+C*W)+2]=b[o+0],i[4*(Z+C*W)+1]=b[o+1],i[4*(Z+C*W)+0]=b[o+2];return i},_getImageData32bits:function(a,R,Y,T,c,K,g,t,U){const b=Y,C=a.width,e=a.height;let Z,W,o=0;const i=new Uint8Array(C*e*4);for(W=T;W!==K;W+=c)for(Z=g;Z!==U;Z+=t,o+=4)i[4*(Z+C*W)+2]=b[o+0],i[4*(Z+C*W)+1]=b[o+1],i[4*(Z+C*W)+0]=b[o+2],i[4*(Z+C*W)+3]=b[o+3];return i},_getImageDataGrey8bits:function(a,R,Y,T,c,K,g,t,U){const b=Y,C=a.width,e=a.height;let Z,W,o,i=0;const d=new Uint8Array(C*e*4);for(o=T;o!==K;o+=c)for(W=g;W!==U;W+=t,i++)Z=b[i],d[4*(W+C*o)+0]=Z,d[4*(W+C*o)+1]=Z,d[4*(W+C*o)+2]=Z,d[4*(W+C*o)+3]=255;return d},_getImageDataGrey16bits:function(a,R,Y,T,c,K,g,t,U){const b=Y,C=a.width,e=a.height;let Z,W,o=0;const i=new Uint8Array(C*e*4);for(W=T;W!==K;W+=c)for(Z=g;Z!==U;Z+=t,o+=2)i[4*(Z+C*W)+0]=b[o+0],i[4*(Z+C*W)+1]=b[o+0],i[4*(Z+C*W)+2]=b[o+0],i[4*(Z+C*W)+3]=b[o+1];return i}};class t{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(a,R,Y){const T=new Uint8Array(a.buffer,a.byteOffset,a.byteLength),g=c(T);Y(g.width,g.height,R.generateMipMaps,!1,(()=>{K(R,T)}))}}}}]);