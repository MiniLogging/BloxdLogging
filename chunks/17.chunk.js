"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{13057:(v,y,n)=>{n.r(y),n.d(y,{_TGATextureLoader:()=>Y});var B=n(10801);function J(v){let y=0;return{id_length:v[y++],colormap_type:v[y++],image_type:v[y++],colormap_index:v[y++]|v[y++]<<8,colormap_length:v[y++]|v[y++]<<8,colormap_size:v[y++],origin:[v[y++]|v[y++]<<8,v[y++]|v[y++]<<8],width:v[y++]|v[y++]<<8,height:v[y++]|v[y++]<<8,pixel_size:v[y++],flags:v[y++]}}function P(v,y){if(y.length<19)return void B.e.Error("Unable to load TGA file - Not enough data to contain header");let n=18;const P=J(y);if(P.id_length+n>y.length)return void B.e.Error("Unable to load TGA file - Not enough data");n+=P.id_length;let Y,l=!1,a=!1,Z=!1;switch(P.image_type){case 9:l=!0;case 1:a=!0;break;case 10:l=!0;case 2:break;case 11:l=!0;case 3:Z=!0}const x=P.pixel_size>>3,f=P.width*P.height*x;let N,i,g,c,h,E,W;if(a&&(N=y.subarray(n,n+=P.colormap_length*(P.colormap_size>>3))),l){let v,B,J;Y=new Uint8Array(f);let P=0;const b=new Uint8Array(x);for(;n<f&&P<f;)if(v=y[n++],B=1+(127&v),128&v){for(J=0;J<x;++J)b[J]=y[n++];for(J=0;J<B;++J)Y.set(b,P+J*x);P+=x*B}else{for(B*=x,J=0;J<B;++J)Y[P+J]=y[n++];P+=B}}else Y=y.subarray(n,n+=a?P.width*P.height:f);switch((48&P.flags)>>4){default:case 2:i=0,c=1,W=P.width,g=0,h=1,E=P.height;break;case 0:i=0,c=1,W=P.width,g=P.height-1,h=-1,E=-1;break;case 3:i=P.width-1,c=-1,W=-1,g=0,h=1,E=P.height;break;case 1:i=P.width-1,c=-1,W=-1,g=P.height-1,h=-1,E=-1}const s="_getImageData"+(Z?"Grey":"")+P.pixel_size+"bits",C=b[s](P,N,Y,g,h,E,i,c,W);v.getEngine()._uploadDataToTextureDirectly(v,C)}const b={GetTGAHeader:J,UploadContent:P,_getImageData8bits:function(v,y,n,B,J,P,b,Y,l){const a=n,Z=y,x=v.width,f=v.height;let N,i,g,c=0;const h=new Uint8Array(x*f*4);for(g=B;g!==P;g+=J)for(i=b;i!==l;i+=Y,c++)N=a[c],h[4*(i+x*g)+3]=255,h[4*(i+x*g)+2]=Z[3*N+0],h[4*(i+x*g)+1]=Z[3*N+1],h[4*(i+x*g)+0]=Z[3*N+2];return h},_getImageData16bits:function(v,y,n,B,J,P,b,Y,l){const a=n,Z=v.width,x=v.height;let f,N,i,g=0;const c=new Uint8Array(Z*x*4);for(i=B;i!==P;i+=J)for(N=b;N!==l;N+=Y,g+=2){f=a[g+0]+(a[g+1]<<8);const v=255*((31744&f)>>10)/31|0,y=255*((992&f)>>5)/31|0,n=255*(31&f)/31|0;c[4*(N+Z*i)+0]=v,c[4*(N+Z*i)+1]=y,c[4*(N+Z*i)+2]=n,c[4*(N+Z*i)+3]=32768&f?0:255}return c},_getImageData24bits:function(v,y,n,B,J,P,b,Y,l){const a=n,Z=v.width,x=v.height;let f,N,i=0;const g=new Uint8Array(Z*x*4);for(N=B;N!==P;N+=J)for(f=b;f!==l;f+=Y,i+=3)g[4*(f+Z*N)+3]=255,g[4*(f+Z*N)+2]=a[i+0],g[4*(f+Z*N)+1]=a[i+1],g[4*(f+Z*N)+0]=a[i+2];return g},_getImageData32bits:function(v,y,n,B,J,P,b,Y,l){const a=n,Z=v.width,x=v.height;let f,N,i=0;const g=new Uint8Array(Z*x*4);for(N=B;N!==P;N+=J)for(f=b;f!==l;f+=Y,i+=4)g[4*(f+Z*N)+2]=a[i+0],g[4*(f+Z*N)+1]=a[i+1],g[4*(f+Z*N)+0]=a[i+2],g[4*(f+Z*N)+3]=a[i+3];return g},_getImageDataGrey8bits:function(v,y,n,B,J,P,b,Y,l){const a=n,Z=v.width,x=v.height;let f,N,i,g=0;const c=new Uint8Array(Z*x*4);for(i=B;i!==P;i+=J)for(N=b;N!==l;N+=Y,g++)f=a[g],c[4*(N+Z*i)+0]=f,c[4*(N+Z*i)+1]=f,c[4*(N+Z*i)+2]=f,c[4*(N+Z*i)+3]=255;return c},_getImageDataGrey16bits:function(v,y,n,B,J,P,b,Y,l){const a=n,Z=v.width,x=v.height;let f,N,i=0;const g=new Uint8Array(Z*x*4);for(N=B;N!==P;N+=J)for(f=b;f!==l;f+=Y,i+=2)g[4*(f+Z*N)+0]=a[i+0],g[4*(f+Z*N)+1]=a[i+0],g[4*(f+Z*N)+2]=a[i+0],g[4*(f+Z*N)+3]=a[i+1];return g}};class Y{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(v,y,n){const B=new Uint8Array(v.buffer,v.byteOffset,v.byteLength),b=J(B);n(b.width,b.height,y.generateMipMaps,!1,(()=>{P(y,B)}))}}}}]);