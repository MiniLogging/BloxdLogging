"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{12857:(E,b,h)=>{h.r(b),h.d(b,{_TGATextureLoader:()=>l});var a=h(10834);function k(E){let b=0;return{id_length:E[b++],colormap_type:E[b++],image_type:E[b++],colormap_index:E[b++]|E[b++]<<8,colormap_length:E[b++]|E[b++]<<8,colormap_size:E[b++],origin:[E[b++]|E[b++]<<8,E[b++]|E[b++]<<8],width:E[b++]|E[b++]<<8,height:E[b++]|E[b++]<<8,pixel_size:E[b++],flags:E[b++]}}function G(E,b){if(b.length<19)return void a.c.Error("Unable to load TGA file - Not enough data to contain header");let h=18;const G=k(b);if(G.id_length+h>b.length)return void a.c.Error("Unable to load TGA file - Not enough data");h+=G.id_length;let l,O=!1,v=!1,s=!1;switch(G.image_type){case 9:O=!0;case 1:v=!0;break;case 10:O=!0;case 2:break;case 11:O=!0;case 3:s=!0}const U=G.pixel_size>>3,B=G.width*G.height*U;let o,u,D,g,S,M,I;if(v&&(o=b.subarray(h,h+=G.colormap_length*(G.colormap_size>>3))),O){let E,a,k;l=new Uint8Array(B);let G=0;const V=new Uint8Array(U);for(;h<B&&G<B;)if(E=b[h++],a=1+(127&E),128&E){for(k=0;k<U;++k)V[k]=b[h++];for(k=0;k<a;++k)l.set(V,G+k*U);G+=U*a}else{for(a*=U,k=0;k<a;++k)l[G+k]=b[h++];G+=a}}else l=b.subarray(h,h+=v?G.width*G.height:B);switch((48&G.flags)>>4){default:case 2:u=0,g=1,I=G.width,D=0,S=1,M=G.height;break;case 0:u=0,g=1,I=G.width,D=G.height-1,S=-1,M=-1;break;case 3:u=G.width-1,g=-1,I=-1,D=0,S=1,M=G.height;break;case 1:u=G.width-1,g=-1,I=-1,D=G.height-1,S=-1,M=-1}const j="_getImageData"+(s?"Grey":"")+G.pixel_size+"bits",P=V[j](G,o,l,D,S,M,u,g,I);E.getEngine()._uploadDataToTextureDirectly(E,P)}const V={GetTGAHeader:k,UploadContent:G,_getImageData8bits:function(E,b,h,a,k,G,V,l,O){const v=h,s=b,U=E.width,B=E.height;let o,u,D,g=0;const S=new Uint8Array(U*B*4);for(D=a;D!==G;D+=k)for(u=V;u!==O;u+=l,g++)o=v[g],S[4*(u+U*D)+3]=255,S[4*(u+U*D)+2]=s[3*o+0],S[4*(u+U*D)+1]=s[3*o+1],S[4*(u+U*D)+0]=s[3*o+2];return S},_getImageData16bits:function(E,b,h,a,k,G,V,l,O){const v=h,s=E.width,U=E.height;let B,o,u,D=0;const g=new Uint8Array(s*U*4);for(u=a;u!==G;u+=k)for(o=V;o!==O;o+=l,D+=2){B=v[D+0]+(v[D+1]<<8);const E=255*((31744&B)>>10)/31|0,b=255*((992&B)>>5)/31|0,h=255*(31&B)/31|0;g[4*(o+s*u)+0]=E,g[4*(o+s*u)+1]=b,g[4*(o+s*u)+2]=h,g[4*(o+s*u)+3]=32768&B?0:255}return g},_getImageData24bits:function(E,b,h,a,k,G,V,l,O){const v=h,s=E.width,U=E.height;let B,o,u=0;const D=new Uint8Array(s*U*4);for(o=a;o!==G;o+=k)for(B=V;B!==O;B+=l,u+=3)D[4*(B+s*o)+3]=255,D[4*(B+s*o)+2]=v[u+0],D[4*(B+s*o)+1]=v[u+1],D[4*(B+s*o)+0]=v[u+2];return D},_getImageData32bits:function(E,b,h,a,k,G,V,l,O){const v=h,s=E.width,U=E.height;let B,o,u=0;const D=new Uint8Array(s*U*4);for(o=a;o!==G;o+=k)for(B=V;B!==O;B+=l,u+=4)D[4*(B+s*o)+2]=v[u+0],D[4*(B+s*o)+1]=v[u+1],D[4*(B+s*o)+0]=v[u+2],D[4*(B+s*o)+3]=v[u+3];return D},_getImageDataGrey8bits:function(E,b,h,a,k,G,V,l,O){const v=h,s=E.width,U=E.height;let B,o,u,D=0;const g=new Uint8Array(s*U*4);for(u=a;u!==G;u+=k)for(o=V;o!==O;o+=l,D++)B=v[D],g[4*(o+s*u)+0]=B,g[4*(o+s*u)+1]=B,g[4*(o+s*u)+2]=B,g[4*(o+s*u)+3]=255;return g},_getImageDataGrey16bits:function(E,b,h,a,k,G,V,l,O){const v=h,s=E.width,U=E.height;let B,o,u=0;const D=new Uint8Array(s*U*4);for(o=a;o!==G;o+=k)for(B=V;B!==O;B+=l,u+=2)D[4*(B+s*o)+0]=v[u+0],D[4*(B+s*o)+1]=v[u+0],D[4*(B+s*o)+2]=v[u+0],D[4*(B+s*o)+3]=v[u+1];return D}};class l{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(E,b,h){const a=new Uint8Array(E.buffer,E.byteOffset,E.byteLength),V=k(a);h(V.width,V.height,b.generateMipMaps,!1,(()=>{G(b,a)}))}}}}]);