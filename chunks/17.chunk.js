"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{13035:(H,p,V)=>{V.r(p),V.d(p,{_TGATextureLoader:()=>w});var c=V(10786);function C(H){let p=0;return{id_length:H[p++],colormap_type:H[p++],image_type:H[p++],colormap_index:H[p++]|H[p++]<<8,colormap_length:H[p++]|H[p++]<<8,colormap_size:H[p++],origin:[H[p++]|H[p++]<<8,H[p++]|H[p++]<<8],width:H[p++]|H[p++]<<8,height:H[p++]|H[p++]<<8,pixel_size:H[p++],flags:H[p++]}}function E(H,p){if(p.length<19)return void c.e.Error("Unable to load TGA file - Not enough data to contain header");let V=18;const E=C(p);if(E.id_length+V>p.length)return void c.e.Error("Unable to load TGA file - Not enough data");V+=E.id_length;let w,t=!1,Q=!1,P=!1;switch(E.image_type){case 9:t=!0;case 1:Q=!0;break;case 10:t=!0;case 2:break;case 11:t=!0;case 3:P=!0}const U=E.pixel_size>>3,J=E.width*E.height*U;let l,N,Z,Y,y,M,q;if(Q&&(l=p.subarray(V,V+=E.colormap_length*(E.colormap_size>>3))),t){let H,c,C;w=new Uint8Array(J);let E=0;const z=new Uint8Array(U);for(;V<J&&E<J;)if(H=p[V++],c=1+(127&H),128&H){for(C=0;C<U;++C)z[C]=p[V++];for(C=0;C<c;++C)w.set(z,E+C*U);E+=U*c}else{for(c*=U,C=0;C<c;++C)w[E+C]=p[V++];E+=c}}else w=p.subarray(V,V+=Q?E.width*E.height:J);switch((48&E.flags)>>4){default:case 2:N=0,Y=1,q=E.width,Z=0,y=1,M=E.height;break;case 0:N=0,Y=1,q=E.width,Z=E.height-1,y=-1,M=-1;break;case 3:N=E.width-1,Y=-1,q=-1,Z=0,y=1,M=E.height;break;case 1:N=E.width-1,Y=-1,q=-1,Z=E.height-1,y=-1,M=-1}const j="_getImageData"+(P?"Grey":"")+E.pixel_size+"bits",a=z[j](E,l,w,Z,y,M,N,Y,q);H.getEngine()._uploadDataToTextureDirectly(H,a)}const z={GetTGAHeader:C,UploadContent:E,_getImageData8bits:function(H,p,V,c,C,E,z,w,t){const Q=V,P=p,U=H.width,J=H.height;let l,N,Z,Y=0;const y=new Uint8Array(U*J*4);for(Z=c;Z!==E;Z+=C)for(N=z;N!==t;N+=w,Y++)l=Q[Y],y[4*(N+U*Z)+3]=255,y[4*(N+U*Z)+2]=P[3*l+0],y[4*(N+U*Z)+1]=P[3*l+1],y[4*(N+U*Z)+0]=P[3*l+2];return y},_getImageData16bits:function(H,p,V,c,C,E,z,w,t){const Q=V,P=H.width,U=H.height;let J,l,N,Z=0;const Y=new Uint8Array(P*U*4);for(N=c;N!==E;N+=C)for(l=z;l!==t;l+=w,Z+=2){J=Q[Z+0]+(Q[Z+1]<<8);const H=255*((31744&J)>>10)/31|0,p=255*((992&J)>>5)/31|0,V=255*(31&J)/31|0;Y[4*(l+P*N)+0]=H,Y[4*(l+P*N)+1]=p,Y[4*(l+P*N)+2]=V,Y[4*(l+P*N)+3]=32768&J?0:255}return Y},_getImageData24bits:function(H,p,V,c,C,E,z,w,t){const Q=V,P=H.width,U=H.height;let J,l,N=0;const Z=new Uint8Array(P*U*4);for(l=c;l!==E;l+=C)for(J=z;J!==t;J+=w,N+=3)Z[4*(J+P*l)+3]=255,Z[4*(J+P*l)+2]=Q[N+0],Z[4*(J+P*l)+1]=Q[N+1],Z[4*(J+P*l)+0]=Q[N+2];return Z},_getImageData32bits:function(H,p,V,c,C,E,z,w,t){const Q=V,P=H.width,U=H.height;let J,l,N=0;const Z=new Uint8Array(P*U*4);for(l=c;l!==E;l+=C)for(J=z;J!==t;J+=w,N+=4)Z[4*(J+P*l)+2]=Q[N+0],Z[4*(J+P*l)+1]=Q[N+1],Z[4*(J+P*l)+0]=Q[N+2],Z[4*(J+P*l)+3]=Q[N+3];return Z},_getImageDataGrey8bits:function(H,p,V,c,C,E,z,w,t){const Q=V,P=H.width,U=H.height;let J,l,N,Z=0;const Y=new Uint8Array(P*U*4);for(N=c;N!==E;N+=C)for(l=z;l!==t;l+=w,Z++)J=Q[Z],Y[4*(l+P*N)+0]=J,Y[4*(l+P*N)+1]=J,Y[4*(l+P*N)+2]=J,Y[4*(l+P*N)+3]=255;return Y},_getImageDataGrey16bits:function(H,p,V,c,C,E,z,w,t){const Q=V,P=H.width,U=H.height;let J,l,N=0;const Z=new Uint8Array(P*U*4);for(l=c;l!==E;l+=C)for(J=z;J!==t;J+=w,N+=2)Z[4*(J+P*l)+0]=Q[N+0],Z[4*(J+P*l)+1]=Q[N+0],Z[4*(J+P*l)+2]=Q[N+0],Z[4*(J+P*l)+3]=Q[N+1];return Z}};class w{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(H,p,V){const c=new Uint8Array(H.buffer,H.byteOffset,H.byteLength),z=C(c);V(z.width,z.height,p.generateMipMaps,!1,(()=>{E(p,c)}))}}}}]);