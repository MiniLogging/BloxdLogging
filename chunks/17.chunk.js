"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{12673:(K,q,p)=>{p.r(q),p.d(q,{_TGATextureLoader:()=>y});var Z=p(10716);function z(K){let q=0;return{id_length:K[q++],colormap_type:K[q++],image_type:K[q++],colormap_index:K[q++]|K[q++]<<8,colormap_length:K[q++]|K[q++]<<8,colormap_size:K[q++],origin:[K[q++]|K[q++]<<8,K[q++]|K[q++]<<8],width:K[q++]|K[q++]<<8,height:K[q++]|K[q++]<<8,pixel_size:K[q++],flags:K[q++]}}function S(K,q){if(q.length<19)return void Z.c.Error("Unable to load TGA file - Not enough data to contain header");let p=18;const S=z(q);if(S.id_length+p>q.length)return void Z.c.Error("Unable to load TGA file - Not enough data");p+=S.id_length;let y,V=!1,C=!1,h=!1;switch(S.image_type){case 9:V=!0;case 1:C=!0;break;case 10:V=!0;case 2:break;case 11:V=!0;case 3:h=!0}const U=S.pixel_size>>3,Y=S.width*S.height*U;let k,F,x,t,f,E,m;if(C&&(k=q.subarray(p,p+=S.colormap_length*(S.colormap_size>>3))),V){let K,Z,z;y=new Uint8Array(Y);let S=0;const X=new Uint8Array(U);for(;p<Y&&S<Y;)if(K=q[p++],Z=1+(127&K),128&K){for(z=0;z<U;++z)X[z]=q[p++];for(z=0;z<Z;++z)y.set(X,S+z*U);S+=U*Z}else{for(Z*=U,z=0;z<Z;++z)y[S+z]=q[p++];S+=Z}}else y=q.subarray(p,p+=C?S.width*S.height:Y);switch((48&S.flags)>>4){default:case 2:F=0,t=1,m=S.width,x=0,f=1,E=S.height;break;case 0:F=0,t=1,m=S.width,x=S.height-1,f=-1,E=-1;break;case 3:F=S.width-1,t=-1,m=-1,x=0,f=1,E=S.height;break;case 1:F=S.width-1,t=-1,m=-1,x=S.height-1,f=-1,E=-1}const c="_getImageData"+(h?"Grey":"")+S.pixel_size+"bits",l=X[c](S,k,y,x,f,E,F,t,m);K.getEngine()._uploadDataToTextureDirectly(K,l)}const X={GetTGAHeader:z,UploadContent:S,_getImageData8bits:function(K,q,p,Z,z,S,X,y,V){const C=p,h=q,U=K.width,Y=K.height;let k,F,x,t=0;const f=new Uint8Array(U*Y*4);for(x=Z;x!==S;x+=z)for(F=X;F!==V;F+=y,t++)k=C[t],f[4*(F+U*x)+3]=255,f[4*(F+U*x)+2]=h[3*k+0],f[4*(F+U*x)+1]=h[3*k+1],f[4*(F+U*x)+0]=h[3*k+2];return f},_getImageData16bits:function(K,q,p,Z,z,S,X,y,V){const C=p,h=K.width,U=K.height;let Y,k,F,x=0;const t=new Uint8Array(h*U*4);for(F=Z;F!==S;F+=z)for(k=X;k!==V;k+=y,x+=2){Y=C[x+0]+(C[x+1]<<8);const K=255*((31744&Y)>>10)/31|0,q=255*((992&Y)>>5)/31|0,p=255*(31&Y)/31|0;t[4*(k+h*F)+0]=K,t[4*(k+h*F)+1]=q,t[4*(k+h*F)+2]=p,t[4*(k+h*F)+3]=32768&Y?0:255}return t},_getImageData24bits:function(K,q,p,Z,z,S,X,y,V){const C=p,h=K.width,U=K.height;let Y,k,F=0;const x=new Uint8Array(h*U*4);for(k=Z;k!==S;k+=z)for(Y=X;Y!==V;Y+=y,F+=3)x[4*(Y+h*k)+3]=255,x[4*(Y+h*k)+2]=C[F+0],x[4*(Y+h*k)+1]=C[F+1],x[4*(Y+h*k)+0]=C[F+2];return x},_getImageData32bits:function(K,q,p,Z,z,S,X,y,V){const C=p,h=K.width,U=K.height;let Y,k,F=0;const x=new Uint8Array(h*U*4);for(k=Z;k!==S;k+=z)for(Y=X;Y!==V;Y+=y,F+=4)x[4*(Y+h*k)+2]=C[F+0],x[4*(Y+h*k)+1]=C[F+1],x[4*(Y+h*k)+0]=C[F+2],x[4*(Y+h*k)+3]=C[F+3];return x},_getImageDataGrey8bits:function(K,q,p,Z,z,S,X,y,V){const C=p,h=K.width,U=K.height;let Y,k,F,x=0;const t=new Uint8Array(h*U*4);for(F=Z;F!==S;F+=z)for(k=X;k!==V;k+=y,x++)Y=C[x],t[4*(k+h*F)+0]=Y,t[4*(k+h*F)+1]=Y,t[4*(k+h*F)+2]=Y,t[4*(k+h*F)+3]=255;return t},_getImageDataGrey16bits:function(K,q,p,Z,z,S,X,y,V){const C=p,h=K.width,U=K.height;let Y,k,F=0;const x=new Uint8Array(h*U*4);for(k=Z;k!==S;k+=z)for(Y=X;Y!==V;Y+=y,F+=2)x[4*(Y+h*k)+0]=C[F+0],x[4*(Y+h*k)+1]=C[F+0],x[4*(Y+h*k)+2]=C[F+0],x[4*(Y+h*k)+3]=C[F+1];return x}};class y{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(K,q,p){const Z=new Uint8Array(K.buffer,K.byteOffset,K.byteLength),X=z(Z);p(X.width,X.height,q.generateMipMaps,!1,(()=>{S(q,Z)}))}}}}]);