"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{13132:(a,v,p)=>{p.r(v),p.d(v,{_TGATextureLoader:()=>V});var P=p(10905);function b(a){let v=0;return{id_length:a[v++],colormap_type:a[v++],image_type:a[v++],colormap_index:a[v++]|a[v++]<<8,colormap_length:a[v++]|a[v++]<<8,colormap_size:a[v++],origin:[a[v++]|a[v++]<<8,a[v++]|a[v++]<<8],width:a[v++]|a[v++]<<8,height:a[v++]|a[v++]<<8,pixel_size:a[v++],flags:a[v++]}}function L(a,v){if(v.length<19)return void P.d.Error("Unable to load TGA file - Not enough data to contain header");let p=18;const L=b(v);if(L.id_length+p>v.length)return void P.d.Error("Unable to load TGA file - Not enough data");p+=L.id_length;let V,K=!1,C=!1,F=!1;switch(L.image_type){case 9:K=!0;case 1:C=!0;break;case 10:K=!0;case 2:break;case 11:K=!0;case 3:F=!0}const u=L.pixel_size>>3,c=L.width*L.height*u;let f,H,A,h,R,X,Q;if(C&&(f=v.subarray(p,p+=L.colormap_length*(L.colormap_size>>3))),K){let a,P,b;V=new Uint8Array(c);let L=0;const t=new Uint8Array(u);for(;p<c&&L<c;)if(a=v[p++],P=1+(127&a),128&a){for(b=0;b<u;++b)t[b]=v[p++];for(b=0;b<P;++b)V.set(t,L+b*u);L+=u*P}else{for(P*=u,b=0;b<P;++b)V[L+b]=v[p++];L+=P}}else V=v.subarray(p,p+=C?L.width*L.height:c);switch((48&L.flags)>>4){default:case 2:H=0,h=1,Q=L.width,A=0,R=1,X=L.height;break;case 0:H=0,h=1,Q=L.width,A=L.height-1,R=-1,X=-1;break;case 3:H=L.width-1,h=-1,Q=-1,A=0,R=1,X=L.height;break;case 1:H=L.width-1,h=-1,Q=-1,A=L.height-1,R=-1,X=-1}const s="_getImageData"+(F?"Grey":"")+L.pixel_size+"bits",D=t[s](L,f,V,A,R,X,H,h,Q);a.getEngine()._uploadDataToTextureDirectly(a,D)}const t={GetTGAHeader:b,UploadContent:L,_getImageData8bits:function(a,v,p,P,b,L,t,V,K){const C=p,F=v,u=a.width,c=a.height;let f,H,A,h=0;const R=new Uint8Array(u*c*4);for(A=P;A!==L;A+=b)for(H=t;H!==K;H+=V,h++)f=C[h],R[4*(H+u*A)+3]=255,R[4*(H+u*A)+2]=F[3*f+0],R[4*(H+u*A)+1]=F[3*f+1],R[4*(H+u*A)+0]=F[3*f+2];return R},_getImageData16bits:function(a,v,p,P,b,L,t,V,K){const C=p,F=a.width,u=a.height;let c,f,H,A=0;const h=new Uint8Array(F*u*4);for(H=P;H!==L;H+=b)for(f=t;f!==K;f+=V,A+=2){c=C[A+0]+(C[A+1]<<8);const a=255*((31744&c)>>10)/31|0,v=255*((992&c)>>5)/31|0,p=255*(31&c)/31|0;h[4*(f+F*H)+0]=a,h[4*(f+F*H)+1]=v,h[4*(f+F*H)+2]=p,h[4*(f+F*H)+3]=32768&c?0:255}return h},_getImageData24bits:function(a,v,p,P,b,L,t,V,K){const C=p,F=a.width,u=a.height;let c,f,H=0;const A=new Uint8Array(F*u*4);for(f=P;f!==L;f+=b)for(c=t;c!==K;c+=V,H+=3)A[4*(c+F*f)+3]=255,A[4*(c+F*f)+2]=C[H+0],A[4*(c+F*f)+1]=C[H+1],A[4*(c+F*f)+0]=C[H+2];return A},_getImageData32bits:function(a,v,p,P,b,L,t,V,K){const C=p,F=a.width,u=a.height;let c,f,H=0;const A=new Uint8Array(F*u*4);for(f=P;f!==L;f+=b)for(c=t;c!==K;c+=V,H+=4)A[4*(c+F*f)+2]=C[H+0],A[4*(c+F*f)+1]=C[H+1],A[4*(c+F*f)+0]=C[H+2],A[4*(c+F*f)+3]=C[H+3];return A},_getImageDataGrey8bits:function(a,v,p,P,b,L,t,V,K){const C=p,F=a.width,u=a.height;let c,f,H,A=0;const h=new Uint8Array(F*u*4);for(H=P;H!==L;H+=b)for(f=t;f!==K;f+=V,A++)c=C[A],h[4*(f+F*H)+0]=c,h[4*(f+F*H)+1]=c,h[4*(f+F*H)+2]=c,h[4*(f+F*H)+3]=255;return h},_getImageDataGrey16bits:function(a,v,p,P,b,L,t,V,K){const C=p,F=a.width,u=a.height;let c,f,H=0;const A=new Uint8Array(F*u*4);for(f=P;f!==L;f+=b)for(c=t;c!==K;c+=V,H+=2)A[4*(c+F*f)+0]=C[H+0],A[4*(c+F*f)+1]=C[H+0],A[4*(c+F*f)+2]=C[H+0],A[4*(c+F*f)+3]=C[H+1];return A}};class V{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(a,v,p){const P=new Uint8Array(a.buffer,a.byteOffset,a.byteLength),t=b(P);p(t.width,t.height,v.generateMipMaps,!1,(()=>{L(v,P)}))}}}}]);