"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{12622:(z,a,K)=>{K.r(a),K.d(a,{_TGATextureLoader:()=>j});var v=K(10648);function T(z){let a=0;return{id_length:z[a++],colormap_type:z[a++],image_type:z[a++],colormap_index:z[a++]|z[a++]<<8,colormap_length:z[a++]|z[a++]<<8,colormap_size:z[a++],origin:[z[a++]|z[a++]<<8,z[a++]|z[a++]<<8],width:z[a++]|z[a++]<<8,height:z[a++]|z[a++]<<8,pixel_size:z[a++],flags:z[a++]}}function m(z,a){if(a.length<19)return void v.c.Error("Unable to load TGA file - Not enough data to contain header");let K=18;const m=T(a);if(m.id_length+K>a.length)return void v.c.Error("Unable to load TGA file - Not enough data");K+=m.id_length;let j,s=!1,M=!1,r=!1;switch(m.image_type){case 9:s=!0;case 1:M=!0;break;case 10:s=!0;case 2:break;case 11:s=!0;case 3:r=!0}const W=m.pixel_size>>3,F=m.width*m.height*W;let G,l,V,c,C,w,H;if(M&&(G=a.subarray(K,K+=m.colormap_length*(m.colormap_size>>3))),s){let z,v,T;j=new Uint8Array(F);let m=0;const p=new Uint8Array(W);for(;K<F&&m<F;)if(z=a[K++],v=1+(127&z),128&z){for(T=0;T<W;++T)p[T]=a[K++];for(T=0;T<v;++T)j.set(p,m+T*W);m+=W*v}else{for(v*=W,T=0;T<v;++T)j[m+T]=a[K++];m+=v}}else j=a.subarray(K,K+=M?m.width*m.height:F);switch((48&m.flags)>>4){default:case 2:l=0,c=1,H=m.width,V=0,C=1,w=m.height;break;case 0:l=0,c=1,H=m.width,V=m.height-1,C=-1,w=-1;break;case 3:l=m.width-1,c=-1,H=-1,V=0,C=1,w=m.height;break;case 1:l=m.width-1,c=-1,H=-1,V=m.height-1,C=-1,w=-1}const f="_getImageData"+(r?"Grey":"")+m.pixel_size+"bits",Y=p[f](m,G,j,V,C,w,l,c,H);z.getEngine()._uploadDataToTextureDirectly(z,Y)}const p={GetTGAHeader:T,UploadContent:m,_getImageData8bits:function(z,a,K,v,T,m,p,j,s){const M=K,r=a,W=z.width,F=z.height;let G,l,V,c=0;const C=new Uint8Array(W*F*4);for(V=v;V!==m;V+=T)for(l=p;l!==s;l+=j,c++)G=M[c],C[4*(l+W*V)+3]=255,C[4*(l+W*V)+2]=r[3*G+0],C[4*(l+W*V)+1]=r[3*G+1],C[4*(l+W*V)+0]=r[3*G+2];return C},_getImageData16bits:function(z,a,K,v,T,m,p,j,s){const M=K,r=z.width,W=z.height;let F,G,l,V=0;const c=new Uint8Array(r*W*4);for(l=v;l!==m;l+=T)for(G=p;G!==s;G+=j,V+=2){F=M[V+0]+(M[V+1]<<8);const z=255*((31744&F)>>10)/31|0,a=255*((992&F)>>5)/31|0,K=255*(31&F)/31|0;c[4*(G+r*l)+0]=z,c[4*(G+r*l)+1]=a,c[4*(G+r*l)+2]=K,c[4*(G+r*l)+3]=32768&F?0:255}return c},_getImageData24bits:function(z,a,K,v,T,m,p,j,s){const M=K,r=z.width,W=z.height;let F,G,l=0;const V=new Uint8Array(r*W*4);for(G=v;G!==m;G+=T)for(F=p;F!==s;F+=j,l+=3)V[4*(F+r*G)+3]=255,V[4*(F+r*G)+2]=M[l+0],V[4*(F+r*G)+1]=M[l+1],V[4*(F+r*G)+0]=M[l+2];return V},_getImageData32bits:function(z,a,K,v,T,m,p,j,s){const M=K,r=z.width,W=z.height;let F,G,l=0;const V=new Uint8Array(r*W*4);for(G=v;G!==m;G+=T)for(F=p;F!==s;F+=j,l+=4)V[4*(F+r*G)+2]=M[l+0],V[4*(F+r*G)+1]=M[l+1],V[4*(F+r*G)+0]=M[l+2],V[4*(F+r*G)+3]=M[l+3];return V},_getImageDataGrey8bits:function(z,a,K,v,T,m,p,j,s){const M=K,r=z.width,W=z.height;let F,G,l,V=0;const c=new Uint8Array(r*W*4);for(l=v;l!==m;l+=T)for(G=p;G!==s;G+=j,V++)F=M[V],c[4*(G+r*l)+0]=F,c[4*(G+r*l)+1]=F,c[4*(G+r*l)+2]=F,c[4*(G+r*l)+3]=255;return c},_getImageDataGrey16bits:function(z,a,K,v,T,m,p,j,s){const M=K,r=z.width,W=z.height;let F,G,l=0;const V=new Uint8Array(r*W*4);for(G=v;G!==m;G+=T)for(F=p;F!==s;F+=j,l+=2)V[4*(F+r*G)+0]=M[l+0],V[4*(F+r*G)+1]=M[l+0],V[4*(F+r*G)+2]=M[l+0],V[4*(F+r*G)+3]=M[l+1];return V}};class j{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(z,a,K){const v=new Uint8Array(z.buffer,z.byteOffset,z.byteLength),p=T(v);K(p.width,p.height,a.generateMipMaps,!1,(()=>{m(a,v)}))}}}}]);