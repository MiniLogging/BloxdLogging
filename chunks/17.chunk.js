"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{13112:(H,c,y)=>{y.r(c),y.d(c,{_TGATextureLoader:()=>n});var Z=y(10773);function F(H){let c=0;return{id_length:H[c++],colormap_type:H[c++],image_type:H[c++],colormap_index:H[c++]|H[c++]<<8,colormap_length:H[c++]|H[c++]<<8,colormap_size:H[c++],origin:[H[c++]|H[c++]<<8,H[c++]|H[c++]<<8],width:H[c++]|H[c++]<<8,height:H[c++]|H[c++]<<8,pixel_size:H[c++],flags:H[c++]}}function P(H,c){if(c.length<19)return void Z.d.Error("Unable to load TGA file - Not enough data to contain header");let y=18;const P=F(c);if(P.id_length+y>c.length)return void Z.d.Error("Unable to load TGA file - Not enough data");y+=P.id_length;let n,O=!1,a=!1,i=!1;switch(P.image_type){case 9:O=!0;case 1:a=!0;break;case 10:O=!0;case 2:break;case 11:O=!0;case 3:i=!0}const C=P.pixel_size>>3,g=P.width*P.height*C;let v,m,z,V,h,Q,D;if(a&&(v=c.subarray(y,y+=P.colormap_length*(P.colormap_size>>3))),O){let H,Z,F;n=new Uint8Array(g);let P=0;const S=new Uint8Array(C);for(;y<g&&P<g;)if(H=c[y++],Z=1+(127&H),128&H){for(F=0;F<C;++F)S[F]=c[y++];for(F=0;F<Z;++F)n.set(S,P+F*C);P+=C*Z}else{for(Z*=C,F=0;F<Z;++F)n[P+F]=c[y++];P+=Z}}else n=c.subarray(y,y+=a?P.width*P.height:g);switch((48&P.flags)>>4){default:case 2:m=0,V=1,D=P.width,z=0,h=1,Q=P.height;break;case 0:m=0,V=1,D=P.width,z=P.height-1,h=-1,Q=-1;break;case 3:m=P.width-1,V=-1,D=-1,z=0,h=1,Q=P.height;break;case 1:m=P.width-1,V=-1,D=-1,z=P.height-1,h=-1,Q=-1}const f="_getImageData"+(i?"Grey":"")+P.pixel_size+"bits",J=S[f](P,v,n,z,h,Q,m,V,D);H.getEngine()._uploadDataToTextureDirectly(H,J)}const S={GetTGAHeader:F,UploadContent:P,_getImageData8bits:function(H,c,y,Z,F,P,S,n,O){const a=y,i=c,C=H.width,g=H.height;let v,m,z,V=0;const h=new Uint8Array(C*g*4);for(z=Z;z!==P;z+=F)for(m=S;m!==O;m+=n,V++)v=a[V],h[4*(m+C*z)+3]=255,h[4*(m+C*z)+2]=i[3*v+0],h[4*(m+C*z)+1]=i[3*v+1],h[4*(m+C*z)+0]=i[3*v+2];return h},_getImageData16bits:function(H,c,y,Z,F,P,S,n,O){const a=y,i=H.width,C=H.height;let g,v,m,z=0;const V=new Uint8Array(i*C*4);for(m=Z;m!==P;m+=F)for(v=S;v!==O;v+=n,z+=2){g=a[z+0]+(a[z+1]<<8);const H=255*((31744&g)>>10)/31|0,c=255*((992&g)>>5)/31|0,y=255*(31&g)/31|0;V[4*(v+i*m)+0]=H,V[4*(v+i*m)+1]=c,V[4*(v+i*m)+2]=y,V[4*(v+i*m)+3]=32768&g?0:255}return V},_getImageData24bits:function(H,c,y,Z,F,P,S,n,O){const a=y,i=H.width,C=H.height;let g,v,m=0;const z=new Uint8Array(i*C*4);for(v=Z;v!==P;v+=F)for(g=S;g!==O;g+=n,m+=3)z[4*(g+i*v)+3]=255,z[4*(g+i*v)+2]=a[m+0],z[4*(g+i*v)+1]=a[m+1],z[4*(g+i*v)+0]=a[m+2];return z},_getImageData32bits:function(H,c,y,Z,F,P,S,n,O){const a=y,i=H.width,C=H.height;let g,v,m=0;const z=new Uint8Array(i*C*4);for(v=Z;v!==P;v+=F)for(g=S;g!==O;g+=n,m+=4)z[4*(g+i*v)+2]=a[m+0],z[4*(g+i*v)+1]=a[m+1],z[4*(g+i*v)+0]=a[m+2],z[4*(g+i*v)+3]=a[m+3];return z},_getImageDataGrey8bits:function(H,c,y,Z,F,P,S,n,O){const a=y,i=H.width,C=H.height;let g,v,m,z=0;const V=new Uint8Array(i*C*4);for(m=Z;m!==P;m+=F)for(v=S;v!==O;v+=n,z++)g=a[z],V[4*(v+i*m)+0]=g,V[4*(v+i*m)+1]=g,V[4*(v+i*m)+2]=g,V[4*(v+i*m)+3]=255;return V},_getImageDataGrey16bits:function(H,c,y,Z,F,P,S,n,O){const a=y,i=H.width,C=H.height;let g,v,m=0;const z=new Uint8Array(i*C*4);for(v=Z;v!==P;v+=F)for(g=S;g!==O;g+=n,m+=2)z[4*(g+i*v)+0]=a[m+0],z[4*(g+i*v)+1]=a[m+0],z[4*(g+i*v)+2]=a[m+0],z[4*(g+i*v)+3]=a[m+1];return z}};class n{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(H,c,y){const Z=new Uint8Array(H.buffer,H.byteOffset,H.byteLength),S=F(Z);y(S.width,S.height,c.generateMipMaps,!1,(()=>{P(c,Z)}))}}}}]);