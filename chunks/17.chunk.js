"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{12785:(Z,J,E)=>{E.r(J),E.d(J,{_TGATextureLoader:()=>d});var O=E(10913);function i(Z){let J=0;return{id_length:Z[J++],colormap_type:Z[J++],image_type:Z[J++],colormap_index:Z[J++]|Z[J++]<<8,colormap_length:Z[J++]|Z[J++]<<8,colormap_size:Z[J++],origin:[Z[J++]|Z[J++]<<8,Z[J++]|Z[J++]<<8],width:Z[J++]|Z[J++]<<8,height:Z[J++]|Z[J++]<<8,pixel_size:Z[J++],flags:Z[J++]}}function Y(Z,J){if(J.length<19)return void O.b.Error("Unable to load TGA file - Not enough data to contain header");let E=18;const Y=i(J);if(Y.id_length+E>J.length)return void O.b.Error("Unable to load TGA file - Not enough data");E+=Y.id_length;let d,z=!1,g=!1,A=!1;switch(Y.image_type){case 9:z=!0;case 1:g=!0;break;case 10:z=!0;case 2:break;case 11:z=!0;case 3:A=!0}const R=Y.pixel_size>>3,h=Y.width*Y.height*R;let L,v,X,l,K,T,W;if(g&&(L=J.subarray(E,E+=Y.colormap_length*(Y.colormap_size>>3))),z){let Z,O,i;d=new Uint8Array(h);let Y=0;const C=new Uint8Array(R);for(;E<h&&Y<h;)if(Z=J[E++],O=1+(127&Z),128&Z){for(i=0;i<R;++i)C[i]=J[E++];for(i=0;i<O;++i)d.set(C,Y+i*R);Y+=R*O}else{for(O*=R,i=0;i<O;++i)d[Y+i]=J[E++];Y+=O}}else d=J.subarray(E,E+=g?Y.width*Y.height:h);switch((48&Y.flags)>>4){default:case 2:v=0,l=1,W=Y.width,X=0,K=1,T=Y.height;break;case 0:v=0,l=1,W=Y.width,X=Y.height-1,K=-1,T=-1;break;case 3:v=Y.width-1,l=-1,W=-1,X=0,K=1,T=Y.height;break;case 1:v=Y.width-1,l=-1,W=-1,X=Y.height-1,K=-1,T=-1}const n="_getImageData"+(A?"Grey":"")+Y.pixel_size+"bits",B=C[n](Y,L,d,X,K,T,v,l,W);Z.getEngine()._uploadDataToTextureDirectly(Z,B)}const C={GetTGAHeader:i,UploadContent:Y,_getImageData8bits:function(Z,J,E,O,i,Y,C,d,z){const g=E,A=J,R=Z.width,h=Z.height;let L,v,X,l=0;const K=new Uint8Array(R*h*4);for(X=O;X!==Y;X+=i)for(v=C;v!==z;v+=d,l++)L=g[l],K[4*(v+R*X)+3]=255,K[4*(v+R*X)+2]=A[3*L+0],K[4*(v+R*X)+1]=A[3*L+1],K[4*(v+R*X)+0]=A[3*L+2];return K},_getImageData16bits:function(Z,J,E,O,i,Y,C,d,z){const g=E,A=Z.width,R=Z.height;let h,L,v,X=0;const l=new Uint8Array(A*R*4);for(v=O;v!==Y;v+=i)for(L=C;L!==z;L+=d,X+=2){h=g[X+0]+(g[X+1]<<8);const Z=255*((31744&h)>>10)/31|0,J=255*((992&h)>>5)/31|0,E=255*(31&h)/31|0;l[4*(L+A*v)+0]=Z,l[4*(L+A*v)+1]=J,l[4*(L+A*v)+2]=E,l[4*(L+A*v)+3]=32768&h?0:255}return l},_getImageData24bits:function(Z,J,E,O,i,Y,C,d,z){const g=E,A=Z.width,R=Z.height;let h,L,v=0;const X=new Uint8Array(A*R*4);for(L=O;L!==Y;L+=i)for(h=C;h!==z;h+=d,v+=3)X[4*(h+A*L)+3]=255,X[4*(h+A*L)+2]=g[v+0],X[4*(h+A*L)+1]=g[v+1],X[4*(h+A*L)+0]=g[v+2];return X},_getImageData32bits:function(Z,J,E,O,i,Y,C,d,z){const g=E,A=Z.width,R=Z.height;let h,L,v=0;const X=new Uint8Array(A*R*4);for(L=O;L!==Y;L+=i)for(h=C;h!==z;h+=d,v+=4)X[4*(h+A*L)+2]=g[v+0],X[4*(h+A*L)+1]=g[v+1],X[4*(h+A*L)+0]=g[v+2],X[4*(h+A*L)+3]=g[v+3];return X},_getImageDataGrey8bits:function(Z,J,E,O,i,Y,C,d,z){const g=E,A=Z.width,R=Z.height;let h,L,v,X=0;const l=new Uint8Array(A*R*4);for(v=O;v!==Y;v+=i)for(L=C;L!==z;L+=d,X++)h=g[X],l[4*(L+A*v)+0]=h,l[4*(L+A*v)+1]=h,l[4*(L+A*v)+2]=h,l[4*(L+A*v)+3]=255;return l},_getImageDataGrey16bits:function(Z,J,E,O,i,Y,C,d,z){const g=E,A=Z.width,R=Z.height;let h,L,v=0;const X=new Uint8Array(A*R*4);for(L=O;L!==Y;L+=i)for(h=C;h!==z;h+=d,v+=2)X[4*(h+A*L)+0]=g[v+0],X[4*(h+A*L)+1]=g[v+0],X[4*(h+A*L)+2]=g[v+0],X[4*(h+A*L)+3]=g[v+1];return X}};class d{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(Z,J,E){const O=new Uint8Array(Z.buffer,Z.byteOffset,Z.byteLength),C=i(O);E(C.width,C.height,J.generateMipMaps,!1,(()=>{Y(J,O)}))}}}}]);