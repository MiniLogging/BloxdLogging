"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{12761:(R,q,L)=>{L.r(q),L.d(q,{_TGATextureLoader:()=>z});var B=L(10767);function N(R){let q=0;return{id_length:R[q++],colormap_type:R[q++],image_type:R[q++],colormap_index:R[q++]|R[q++]<<8,colormap_length:R[q++]|R[q++]<<8,colormap_size:R[q++],origin:[R[q++]|R[q++]<<8,R[q++]|R[q++]<<8],width:R[q++]|R[q++]<<8,height:R[q++]|R[q++]<<8,pixel_size:R[q++],flags:R[q++]}}function h(R,q){if(q.length<19)return void B.d.Error("Unable to load TGA file - Not enough data to contain header");let L=18;const h=N(q);if(h.id_length+L>q.length)return void B.d.Error("Unable to load TGA file - Not enough data");L+=h.id_length;let z,Y=!1,F=!1,C=!1;switch(h.image_type){case 9:Y=!0;case 1:F=!0;break;case 10:Y=!0;case 2:break;case 11:Y=!0;case 3:C=!0}const e=h.pixel_size>>3,y=h.width*h.height*e;let U,n,r,p,c,d,f;if(F&&(U=q.subarray(L,L+=h.colormap_length*(h.colormap_size>>3))),Y){let R,B,N;z=new Uint8Array(y);let h=0;const Z=new Uint8Array(e);for(;L<y&&h<y;)if(R=q[L++],B=1+(127&R),128&R){for(N=0;N<e;++N)Z[N]=q[L++];for(N=0;N<B;++N)z.set(Z,h+N*e);h+=e*B}else{for(B*=e,N=0;N<B;++N)z[h+N]=q[L++];h+=B}}else z=q.subarray(L,L+=F?h.width*h.height:y);switch((48&h.flags)>>4){default:case 2:n=0,p=1,f=h.width,r=0,c=1,d=h.height;break;case 0:n=0,p=1,f=h.width,r=h.height-1,c=-1,d=-1;break;case 3:n=h.width-1,p=-1,f=-1,r=0,c=1,d=h.height;break;case 1:n=h.width-1,p=-1,f=-1,r=h.height-1,c=-1,d=-1}const v="_getImageData"+(C?"Grey":"")+h.pixel_size+"bits",T=Z[v](h,U,z,r,c,d,n,p,f);R.getEngine()._uploadDataToTextureDirectly(R,T)}const Z={GetTGAHeader:N,UploadContent:h,_getImageData8bits:function(R,q,L,B,N,h,Z,z,Y){const F=L,C=q,e=R.width,y=R.height;let U,n,r,p=0;const c=new Uint8Array(e*y*4);for(r=B;r!==h;r+=N)for(n=Z;n!==Y;n+=z,p++)U=F[p],c[4*(n+e*r)+3]=255,c[4*(n+e*r)+2]=C[3*U+0],c[4*(n+e*r)+1]=C[3*U+1],c[4*(n+e*r)+0]=C[3*U+2];return c},_getImageData16bits:function(R,q,L,B,N,h,Z,z,Y){const F=L,C=R.width,e=R.height;let y,U,n,r=0;const p=new Uint8Array(C*e*4);for(n=B;n!==h;n+=N)for(U=Z;U!==Y;U+=z,r+=2){y=F[r+0]+(F[r+1]<<8);const R=255*((31744&y)>>10)/31|0,q=255*((992&y)>>5)/31|0,L=255*(31&y)/31|0;p[4*(U+C*n)+0]=R,p[4*(U+C*n)+1]=q,p[4*(U+C*n)+2]=L,p[4*(U+C*n)+3]=32768&y?0:255}return p},_getImageData24bits:function(R,q,L,B,N,h,Z,z,Y){const F=L,C=R.width,e=R.height;let y,U,n=0;const r=new Uint8Array(C*e*4);for(U=B;U!==h;U+=N)for(y=Z;y!==Y;y+=z,n+=3)r[4*(y+C*U)+3]=255,r[4*(y+C*U)+2]=F[n+0],r[4*(y+C*U)+1]=F[n+1],r[4*(y+C*U)+0]=F[n+2];return r},_getImageData32bits:function(R,q,L,B,N,h,Z,z,Y){const F=L,C=R.width,e=R.height;let y,U,n=0;const r=new Uint8Array(C*e*4);for(U=B;U!==h;U+=N)for(y=Z;y!==Y;y+=z,n+=4)r[4*(y+C*U)+2]=F[n+0],r[4*(y+C*U)+1]=F[n+1],r[4*(y+C*U)+0]=F[n+2],r[4*(y+C*U)+3]=F[n+3];return r},_getImageDataGrey8bits:function(R,q,L,B,N,h,Z,z,Y){const F=L,C=R.width,e=R.height;let y,U,n,r=0;const p=new Uint8Array(C*e*4);for(n=B;n!==h;n+=N)for(U=Z;U!==Y;U+=z,r++)y=F[r],p[4*(U+C*n)+0]=y,p[4*(U+C*n)+1]=y,p[4*(U+C*n)+2]=y,p[4*(U+C*n)+3]=255;return p},_getImageDataGrey16bits:function(R,q,L,B,N,h,Z,z,Y){const F=L,C=R.width,e=R.height;let y,U,n=0;const r=new Uint8Array(C*e*4);for(U=B;U!==h;U+=N)for(y=Z;y!==Y;y+=z,n+=2)r[4*(y+C*U)+0]=F[n+0],r[4*(y+C*U)+1]=F[n+0],r[4*(y+C*U)+2]=F[n+0],r[4*(y+C*U)+3]=F[n+1];return r}};class z{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(R,q,L){const B=new Uint8Array(R.buffer,R.byteOffset,R.byteLength),Z=N(B);L(Z.width,Z.height,q.generateMipMaps,!1,(()=>{h(q,B)}))}}}}]);