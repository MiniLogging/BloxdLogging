"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{13245:(V,p,W)=>{W.r(p),W.d(p,{_TGATextureLoader:()=>S});var N=W(10870);function d(V){let p=0;return{id_length:V[p++],colormap_type:V[p++],image_type:V[p++],colormap_index:V[p++]|V[p++]<<8,colormap_length:V[p++]|V[p++]<<8,colormap_size:V[p++],origin:[V[p++]|V[p++]<<8,V[p++]|V[p++]<<8],width:V[p++]|V[p++]<<8,height:V[p++]|V[p++]<<8,pixel_size:V[p++],flags:V[p++]}}function E(V,p){if(p.length<19)return void N.e.Error("Unable to load TGA file - Not enough data to contain header");let W=18;const E=d(p);if(E.id_length+W>p.length)return void N.e.Error("Unable to load TGA file - Not enough data");W+=E.id_length;let S,Q=!1,J=!1,i=!1;switch(E.image_type){case 9:Q=!0;case 1:J=!0;break;case 10:Q=!0;case 2:break;case 11:Q=!0;case 3:i=!0}const l=E.pixel_size>>3,j=E.width*E.height*l;let k,u,f,O,U,F,C;if(J&&(k=p.subarray(W,W+=E.colormap_length*(E.colormap_size>>3))),Q){let V,N,d;S=new Uint8Array(j);let E=0;const z=new Uint8Array(l);for(;W<j&&E<j;)if(V=p[W++],N=1+(127&V),128&V){for(d=0;d<l;++d)z[d]=p[W++];for(d=0;d<N;++d)S.set(z,E+d*l);E+=l*N}else{for(N*=l,d=0;d<N;++d)S[E+d]=p[W++];E+=N}}else S=p.subarray(W,W+=J?E.width*E.height:j);switch((48&E.flags)>>4){default:case 2:u=0,O=1,C=E.width,f=0,U=1,F=E.height;break;case 0:u=0,O=1,C=E.width,f=E.height-1,U=-1,F=-1;break;case 3:u=E.width-1,O=-1,C=-1,f=0,U=1,F=E.height;break;case 1:u=E.width-1,O=-1,C=-1,f=E.height-1,U=-1,F=-1}const A="_getImageData"+(i?"Grey":"")+E.pixel_size+"bits",v=z[A](E,k,S,f,U,F,u,O,C);V.getEngine()._uploadDataToTextureDirectly(V,v)}const z={GetTGAHeader:d,UploadContent:E,_getImageData8bits:function(V,p,W,N,d,E,z,S,Q){const J=W,i=p,l=V.width,j=V.height;let k,u,f,O=0;const U=new Uint8Array(l*j*4);for(f=N;f!==E;f+=d)for(u=z;u!==Q;u+=S,O++)k=J[O],U[4*(u+l*f)+3]=255,U[4*(u+l*f)+2]=i[3*k+0],U[4*(u+l*f)+1]=i[3*k+1],U[4*(u+l*f)+0]=i[3*k+2];return U},_getImageData16bits:function(V,p,W,N,d,E,z,S,Q){const J=W,i=V.width,l=V.height;let j,k,u,f=0;const O=new Uint8Array(i*l*4);for(u=N;u!==E;u+=d)for(k=z;k!==Q;k+=S,f+=2){j=J[f+0]+(J[f+1]<<8);const V=255*((31744&j)>>10)/31|0,p=255*((992&j)>>5)/31|0,W=255*(31&j)/31|0;O[4*(k+i*u)+0]=V,O[4*(k+i*u)+1]=p,O[4*(k+i*u)+2]=W,O[4*(k+i*u)+3]=32768&j?0:255}return O},_getImageData24bits:function(V,p,W,N,d,E,z,S,Q){const J=W,i=V.width,l=V.height;let j,k,u=0;const f=new Uint8Array(i*l*4);for(k=N;k!==E;k+=d)for(j=z;j!==Q;j+=S,u+=3)f[4*(j+i*k)+3]=255,f[4*(j+i*k)+2]=J[u+0],f[4*(j+i*k)+1]=J[u+1],f[4*(j+i*k)+0]=J[u+2];return f},_getImageData32bits:function(V,p,W,N,d,E,z,S,Q){const J=W,i=V.width,l=V.height;let j,k,u=0;const f=new Uint8Array(i*l*4);for(k=N;k!==E;k+=d)for(j=z;j!==Q;j+=S,u+=4)f[4*(j+i*k)+2]=J[u+0],f[4*(j+i*k)+1]=J[u+1],f[4*(j+i*k)+0]=J[u+2],f[4*(j+i*k)+3]=J[u+3];return f},_getImageDataGrey8bits:function(V,p,W,N,d,E,z,S,Q){const J=W,i=V.width,l=V.height;let j,k,u,f=0;const O=new Uint8Array(i*l*4);for(u=N;u!==E;u+=d)for(k=z;k!==Q;k+=S,f++)j=J[f],O[4*(k+i*u)+0]=j,O[4*(k+i*u)+1]=j,O[4*(k+i*u)+2]=j,O[4*(k+i*u)+3]=255;return O},_getImageDataGrey16bits:function(V,p,W,N,d,E,z,S,Q){const J=W,i=V.width,l=V.height;let j,k,u=0;const f=new Uint8Array(i*l*4);for(k=N;k!==E;k+=d)for(j=z;j!==Q;j+=S,u+=2)f[4*(j+i*k)+0]=J[u+0],f[4*(j+i*k)+1]=J[u+0],f[4*(j+i*k)+2]=J[u+0],f[4*(j+i*k)+3]=J[u+1];return f}};class S{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(V,p,W){const N=new Uint8Array(V.buffer,V.byteOffset,V.byteLength),z=d(N);W(z.width,z.height,p.generateMipMaps,!1,(()=>{E(p,N)}))}}}}]);