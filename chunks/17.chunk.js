"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{12753:(h,b,I)=>{I.r(b),I.d(b,{_TGATextureLoader:()=>V});var g=I(10841);function O(h){let b=0;return{id_length:h[b++],colormap_type:h[b++],image_type:h[b++],colormap_index:h[b++]|h[b++]<<8,colormap_length:h[b++]|h[b++]<<8,colormap_size:h[b++],origin:[h[b++]|h[b++]<<8,h[b++]|h[b++]<<8],width:h[b++]|h[b++]<<8,height:h[b++]|h[b++]<<8,pixel_size:h[b++],flags:h[b++]}}function T(h,b){if(b.length<19)return void g.e.Error("Unable to load TGA file - Not enough data to contain header");let I=18;const T=O(b);if(T.id_length+I>b.length)return void g.e.Error("Unable to load TGA file - Not enough data");I+=T.id_length;let V,M=!1,y=!1,q=!1;switch(T.image_type){case 9:M=!0;case 1:y=!0;break;case 10:M=!0;case 2:break;case 11:M=!0;case 3:q=!0}const e=T.pixel_size>>3,P=T.width*T.height*e;let K,o,R,L,i,w,z;if(y&&(K=b.subarray(I,I+=T.colormap_length*(T.colormap_size>>3))),M){let h,g,O;V=new Uint8Array(P);let T=0;const N=new Uint8Array(e);for(;I<P&&T<P;)if(h=b[I++],g=1+(127&h),128&h){for(O=0;O<e;++O)N[O]=b[I++];for(O=0;O<g;++O)V.set(N,T+O*e);T+=e*g}else{for(g*=e,O=0;O<g;++O)V[T+O]=b[I++];T+=g}}else V=b.subarray(I,I+=y?T.width*T.height:P);switch((48&T.flags)>>4){default:case 2:o=0,L=1,z=T.width,R=0,i=1,w=T.height;break;case 0:o=0,L=1,z=T.width,R=T.height-1,i=-1,w=-1;break;case 3:o=T.width-1,L=-1,z=-1,R=0,i=1,w=T.height;break;case 1:o=T.width-1,L=-1,z=-1,R=T.height-1,i=-1,w=-1}const F="_getImageData"+(q?"Grey":"")+T.pixel_size+"bits",v=N[F](T,K,V,R,i,w,o,L,z);h.getEngine()._uploadDataToTextureDirectly(h,v)}const N={GetTGAHeader:O,UploadContent:T,_getImageData8bits:function(h,b,I,g,O,T,N,V,M){const y=I,q=b,e=h.width,P=h.height;let K,o,R,L=0;const i=new Uint8Array(e*P*4);for(R=g;R!==T;R+=O)for(o=N;o!==M;o+=V,L++)K=y[L],i[4*(o+e*R)+3]=255,i[4*(o+e*R)+2]=q[3*K+0],i[4*(o+e*R)+1]=q[3*K+1],i[4*(o+e*R)+0]=q[3*K+2];return i},_getImageData16bits:function(h,b,I,g,O,T,N,V,M){const y=I,q=h.width,e=h.height;let P,K,o,R=0;const L=new Uint8Array(q*e*4);for(o=g;o!==T;o+=O)for(K=N;K!==M;K+=V,R+=2){P=y[R+0]+(y[R+1]<<8);const h=255*((31744&P)>>10)/31|0,b=255*((992&P)>>5)/31|0,I=255*(31&P)/31|0;L[4*(K+q*o)+0]=h,L[4*(K+q*o)+1]=b,L[4*(K+q*o)+2]=I,L[4*(K+q*o)+3]=32768&P?0:255}return L},_getImageData24bits:function(h,b,I,g,O,T,N,V,M){const y=I,q=h.width,e=h.height;let P,K,o=0;const R=new Uint8Array(q*e*4);for(K=g;K!==T;K+=O)for(P=N;P!==M;P+=V,o+=3)R[4*(P+q*K)+3]=255,R[4*(P+q*K)+2]=y[o+0],R[4*(P+q*K)+1]=y[o+1],R[4*(P+q*K)+0]=y[o+2];return R},_getImageData32bits:function(h,b,I,g,O,T,N,V,M){const y=I,q=h.width,e=h.height;let P,K,o=0;const R=new Uint8Array(q*e*4);for(K=g;K!==T;K+=O)for(P=N;P!==M;P+=V,o+=4)R[4*(P+q*K)+2]=y[o+0],R[4*(P+q*K)+1]=y[o+1],R[4*(P+q*K)+0]=y[o+2],R[4*(P+q*K)+3]=y[o+3];return R},_getImageDataGrey8bits:function(h,b,I,g,O,T,N,V,M){const y=I,q=h.width,e=h.height;let P,K,o,R=0;const L=new Uint8Array(q*e*4);for(o=g;o!==T;o+=O)for(K=N;K!==M;K+=V,R++)P=y[R],L[4*(K+q*o)+0]=P,L[4*(K+q*o)+1]=P,L[4*(K+q*o)+2]=P,L[4*(K+q*o)+3]=255;return L},_getImageDataGrey16bits:function(h,b,I,g,O,T,N,V,M){const y=I,q=h.width,e=h.height;let P,K,o=0;const R=new Uint8Array(q*e*4);for(K=g;K!==T;K+=O)for(P=N;P!==M;P+=V,o+=2)R[4*(P+q*K)+0]=y[o+0],R[4*(P+q*K)+1]=y[o+0],R[4*(P+q*K)+2]=y[o+0],R[4*(P+q*K)+3]=y[o+1];return R}};class V{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(h,b,I){const g=new Uint8Array(h.buffer,h.byteOffset,h.byteLength),N=O(g);I(N.width,N.height,b.generateMipMaps,!1,(()=>{T(b,g)}))}}}}]);