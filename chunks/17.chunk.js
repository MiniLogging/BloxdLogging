"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[17],{12878:(V,O,Z)=>{Z.r(O),Z.d(O,{_TGATextureLoader:()=>m});var d=Z(10914);function p(V){let O=0;return{id_length:V[O++],colormap_type:V[O++],image_type:V[O++],colormap_index:V[O++]|V[O++]<<8,colormap_length:V[O++]|V[O++]<<8,colormap_size:V[O++],origin:[V[O++]|V[O++]<<8,V[O++]|V[O++]<<8],width:V[O++]|V[O++]<<8,height:V[O++]|V[O++]<<8,pixel_size:V[O++],flags:V[O++]}}function r(V,O){if(O.length<19)return void d.b.Error("Unable to load TGA file - Not enough data to contain header");let Z=18;const r=p(O);if(r.id_length+Z>O.length)return void d.b.Error("Unable to load TGA file - Not enough data");Z+=r.id_length;let m,a=!1,R=!1,i=!1;switch(r.image_type){case 9:a=!0;case 1:R=!0;break;case 10:a=!0;case 2:break;case 11:a=!0;case 3:i=!0}const M=r.pixel_size>>3,c=r.width*r.height*M;let W,F,Q,b,U,H,S;if(R&&(W=O.subarray(Z,Z+=r.colormap_length*(r.colormap_size>>3))),a){let V,d,p;m=new Uint8Array(c);let r=0;const Y=new Uint8Array(M);for(;Z<c&&r<c;)if(V=O[Z++],d=1+(127&V),128&V){for(p=0;p<M;++p)Y[p]=O[Z++];for(p=0;p<d;++p)m.set(Y,r+p*M);r+=M*d}else{for(d*=M,p=0;p<d;++p)m[r+p]=O[Z++];r+=d}}else m=O.subarray(Z,Z+=R?r.width*r.height:c);switch((48&r.flags)>>4){default:case 2:F=0,b=1,S=r.width,Q=0,U=1,H=r.height;break;case 0:F=0,b=1,S=r.width,Q=r.height-1,U=-1,H=-1;break;case 3:F=r.width-1,b=-1,S=-1,Q=0,U=1,H=r.height;break;case 1:F=r.width-1,b=-1,S=-1,Q=r.height-1,U=-1,H=-1}const z="_getImageData"+(i?"Grey":"")+r.pixel_size+"bits",G=Y[z](r,W,m,Q,U,H,F,b,S);V.getEngine()._uploadDataToTextureDirectly(V,G)}const Y={GetTGAHeader:p,UploadContent:r,_getImageData8bits:function(V,O,Z,d,p,r,Y,m,a){const R=Z,i=O,M=V.width,c=V.height;let W,F,Q,b=0;const U=new Uint8Array(M*c*4);for(Q=d;Q!==r;Q+=p)for(F=Y;F!==a;F+=m,b++)W=R[b],U[4*(F+M*Q)+3]=255,U[4*(F+M*Q)+2]=i[3*W+0],U[4*(F+M*Q)+1]=i[3*W+1],U[4*(F+M*Q)+0]=i[3*W+2];return U},_getImageData16bits:function(V,O,Z,d,p,r,Y,m,a){const R=Z,i=V.width,M=V.height;let c,W,F,Q=0;const b=new Uint8Array(i*M*4);for(F=d;F!==r;F+=p)for(W=Y;W!==a;W+=m,Q+=2){c=R[Q+0]+(R[Q+1]<<8);const V=255*((31744&c)>>10)/31|0,O=255*((992&c)>>5)/31|0,Z=255*(31&c)/31|0;b[4*(W+i*F)+0]=V,b[4*(W+i*F)+1]=O,b[4*(W+i*F)+2]=Z,b[4*(W+i*F)+3]=32768&c?0:255}return b},_getImageData24bits:function(V,O,Z,d,p,r,Y,m,a){const R=Z,i=V.width,M=V.height;let c,W,F=0;const Q=new Uint8Array(i*M*4);for(W=d;W!==r;W+=p)for(c=Y;c!==a;c+=m,F+=3)Q[4*(c+i*W)+3]=255,Q[4*(c+i*W)+2]=R[F+0],Q[4*(c+i*W)+1]=R[F+1],Q[4*(c+i*W)+0]=R[F+2];return Q},_getImageData32bits:function(V,O,Z,d,p,r,Y,m,a){const R=Z,i=V.width,M=V.height;let c,W,F=0;const Q=new Uint8Array(i*M*4);for(W=d;W!==r;W+=p)for(c=Y;c!==a;c+=m,F+=4)Q[4*(c+i*W)+2]=R[F+0],Q[4*(c+i*W)+1]=R[F+1],Q[4*(c+i*W)+0]=R[F+2],Q[4*(c+i*W)+3]=R[F+3];return Q},_getImageDataGrey8bits:function(V,O,Z,d,p,r,Y,m,a){const R=Z,i=V.width,M=V.height;let c,W,F,Q=0;const b=new Uint8Array(i*M*4);for(F=d;F!==r;F+=p)for(W=Y;W!==a;W+=m,Q++)c=R[Q],b[4*(W+i*F)+0]=c,b[4*(W+i*F)+1]=c,b[4*(W+i*F)+2]=c,b[4*(W+i*F)+3]=255;return b},_getImageDataGrey16bits:function(V,O,Z,d,p,r,Y,m,a){const R=Z,i=V.width,M=V.height;let c,W,F=0;const Q=new Uint8Array(i*M*4);for(W=d;W!==r;W+=p)for(c=Y;c!==a;c+=m,F+=2)Q[4*(c+i*W)+0]=R[F+0],Q[4*(c+i*W)+1]=R[F+0],Q[4*(c+i*W)+2]=R[F+0],Q[4*(c+i*W)+3]=R[F+1];return Q}};class m{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(V,O,Z){const d=new Uint8Array(V.buffer,V.byteOffset,V.byteLength),Y=p(d);Z(Y.width,Y.height,O.generateMipMaps,!1,(()=>{r(O,d)}))}}}}]);