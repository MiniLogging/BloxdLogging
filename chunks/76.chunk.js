"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[76],{14289:(s,Z,o)=>{o.r(Z),o.d(Z,{FlowGraphSetDelayBlock:()=>Q});var t,j=o(12828),S=o(12775),a=o(10932);!function(s){s[s.INIT=0]="INIT",s[s.STARTED=1]="STARTED",s[s.ENDED=2]="ENDED"}(t||(t={}));class O{constructor(s){this.onEachCountObservable=new a.b,this.onTimerAbortedObservable=new a.b,this.onTimerEndedObservable=new a.b,this.onStateChangedObservable=new a.b,this._observer=null,this._breakOnNextTick=!1,this._tick=s=>{const Z=Date.now();this._timer=Z-this._startTime;const o={startTime:this._startTime,currentTime:Z,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:s},t=this._breakOnNextTick||this._breakCondition(o);t||this._timer>=this._timeToEnd?this._stop(o,t):this.onEachCountObservable.notifyObservers(o)},this._setState(0),this._contextObservable=s.contextObservable,this._observableParameters=s.observableParameters??{},this._breakCondition=s.breakCondition??(()=>!1),this._timeToEnd=s.timeout,s.onEnded&&this.onTimerEndedObservable.add(s.onEnded),s.AB&&this.onEachCountObservable.add(s.AB),s.onAborted&&this.onTimerAbortedObservable.add(s.onAborted)}set breakCondition(s){this._breakCondition=s}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=s,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(s){this._state=s,this.onStateChangedObservable.notifyObservers(this._state)}_stop(s){let Z=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),Z?this.onTimerAbortedObservable.notifyObservers(s):this.onTimerEndedObservable.notifyObservers(s)}}var v=o(10955),G=o(10916),B=o(12771);class Q extends j.c{constructor(s){super(s),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",S.w),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",S.j,new B.b(-1))}_preparePendingTasks(s){const Z=this.duration.getValue(s);if(Z<0||isNaN(Z)||!isFinite(Z))return this._reportError(s,"Invalid duration in SetDelay block");if(s._getGlobalContextVariable("activeDelays",0)>=Q.MaxParallelDelayCount)return this._reportError(s,"Max parallel delays reached");const o=s._getGlobalContextVariable("lastDelayIndex",-1),t=s._getExecutionVariable(this,"pendingDelays",[]),j=s.configuration.fZ,S=new O({timeout:1e3*Z,contextObservable:j.onBeforeRenderObservable,onEnded:()=>this._onEnded(S,s)});S.start();const a=o+1;this.lastDelayIndex.setValue(new B.b(a),s),s._setGlobalContextVariable("lastDelayIndex",a),t[a]=S,s._setExecutionVariable(this,"pendingDelays",t),this._updateGlobalTimers(s)}_cancelPendingTasks(s){const Z=s._getExecutionVariable(this,"pendingDelays",[]);for(const o of Z)null===o||void 0===o||o.dispose();s._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new B.b(-1),s),this._updateGlobalTimers(s)}_execute(s,Z){Z!==this.cancel?(this._preparePendingTasks(s),this.out._activateSignal(s)):this._cancelPendingTasks(s)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(s,Z){const o=Z._getExecutionVariable(this,"pendingDelays",[]),t=o.indexOf(s);-1!==t?o.splice(t,1):v.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),Z._removePendingBlock(this),this.done._activateSignal(Z),this._updateGlobalTimers(Z)}_updateGlobalTimers(s){const Z=s._getExecutionVariable(this,"pendingDelays",[]),o=s._getGlobalContextVariable("pendingDelays",[]);for(let t=0;t<Z.length;t++){if(!Z[t])continue;const s=Z[t];o[t]&&o[t]!==s?v.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):o[t]=s}s._setGlobalContextVariable("pendingDelays",o)}}Q.MaxParallelDelayCount=100,(0,G.f)("FlowGraphSetDelayBlock",Q)}}]);