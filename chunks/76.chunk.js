"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[76],{14229:(x,O,Q)=>{Q.r(O),Q.d(O,{FlowGraphSetDelayBlock:()=>L});var X,Z=Q(12741),n=Q(12707),V=Q(10882);!function(x){x[x.INIT=0]="INIT",x[x.STARTED=1]="STARTED",x[x.ENDED=2]="ENDED"}(X||(X={}));class o{constructor(x){this.onEachCountObservable=new V.b,this.onTimerAbortedObservable=new V.b,this.onTimerEndedObservable=new V.b,this.onStateChangedObservable=new V.b,this._observer=null,this._breakOnNextTick=!1,this._tick=x=>{const O=Date.now();this._timer=O-this._startTime;const Q={startTime:this._startTime,currentTime:O,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:x},X=this._breakOnNextTick||this._breakCondition(Q);X||this._timer>=this._timeToEnd?this._stop(Q,X):this.onEachCountObservable.notifyObservers(Q)},this._setState(0),this._contextObservable=x.contextObservable,this._observableParameters=x.observableParameters??{},this._breakCondition=x.breakCondition??(()=>!1),this._timeToEnd=x.timeout,x.onEnded&&this.onTimerEndedObservable.add(x.onEnded),x.RU&&this.onEachCountObservable.add(x.RU),x.onAborted&&this.onTimerAbortedObservable.add(x.onAborted)}set breakCondition(x){this._breakCondition=x}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let x=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=x,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(x){this._state=x,this.onStateChangedObservable.notifyObservers(this._state)}_stop(x){let O=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),O?this.onTimerAbortedObservable.notifyObservers(x):this.onTimerEndedObservable.notifyObservers(x)}}var l=Q(10905),C=Q(10866),U=Q(12703);class L extends Z.c{constructor(x){super(x),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",n.q),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",n.i,new U.b(-1))}_preparePendingTasks(x){const O=this.duration.getValue(x);if(O<0||isNaN(O)||!isFinite(O))return this._reportError(x,"Invalid duration in SetDelay block");if(x._getGlobalContextVariable("activeDelays",0)>=L.MaxParallelDelayCount)return this._reportError(x,"Max parallel delays reached");const Q=x._getGlobalContextVariable("lastDelayIndex",-1),X=x._getExecutionVariable(this,"pendingDelays",[]),Z=x.configuration.RO,n=new o({timeout:1e3*O,contextObservable:Z.onBeforeRenderObservable,onEnded:()=>this._onEnded(n,x)});n.start();const V=Q+1;this.lastDelayIndex.setValue(new U.b(V),x),x._setGlobalContextVariable("lastDelayIndex",V),X[V]=n,x._setExecutionVariable(this,"pendingDelays",X),this._updateGlobalTimers(x)}_cancelPendingTasks(x){const O=x._getExecutionVariable(this,"pendingDelays",[]);for(const Q of O)null===Q||void 0===Q||Q.dispose();x._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new U.b(-1),x),this._updateGlobalTimers(x)}_execute(x,O){O!==this.cancel?(this._preparePendingTasks(x),this.out._activateSignal(x)):this._cancelPendingTasks(x)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(x,O){const Q=O._getExecutionVariable(this,"pendingDelays",[]),X=Q.indexOf(x);-1!==X?Q.splice(X,1):l.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),O._removePendingBlock(this),this.done._activateSignal(O),this._updateGlobalTimers(O)}_updateGlobalTimers(x){const O=x._getExecutionVariable(this,"pendingDelays",[]),Q=x._getGlobalContextVariable("pendingDelays",[]);for(let X=0;X<O.length;X++){if(!O[X])continue;const x=O[X];Q[X]&&Q[X]!==x?l.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):Q[X]=x}x._setGlobalContextVariable("pendingDelays",Q)}}L.MaxParallelDelayCount=100,(0,C.d)("FlowGraphSetDelayBlock",L)}}]);