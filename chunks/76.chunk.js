"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[76],{14016:(z,u,Y)=>{Y.r(u),Y.d(u,{FlowGraphSetDelayBlock:()=>g});var H,E=Y(12577),J=Y(12531),l=Y(10932);!function(z){z[z.INIT=0]="INIT",z[z.STARTED=1]="STARTED",z[z.ENDED=2]="ENDED"}(H||(H={}));class T{constructor(z){this.onEachCountObservable=new l.e,this.onTimerAbortedObservable=new l.e,this.onTimerEndedObservable=new l.e,this.onStateChangedObservable=new l.e,this._observer=null,this._breakOnNextTick=!1,this._tick=z=>{const u=Date.now();this._timer=u-this._startTime;const Y={startTime:this._startTime,currentTime:u,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:z},H=this._breakOnNextTick||this._breakCondition(Y);H||this._timer>=this._timeToEnd?this._stop(Y,H):this.onEachCountObservable.notifyObservers(Y)},this._setState(0),this._contextObservable=z.contextObservable,this._observableParameters=z.observableParameters??{},this._breakCondition=z.breakCondition??(()=>!1),this._timeToEnd=z.timeout,z.onEnded&&this.onTimerEndedObservable.add(z.onEnded),z.rD&&this.onEachCountObservable.add(z.rD),z.onAborted&&this.onTimerAbortedObservable.add(z.onAborted)}set breakCondition(z){this._breakCondition=z}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let z=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=z,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(z){this._state=z,this.onStateChangedObservable.notifyObservers(this._state)}_stop(z){let u=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),u?this.onTimerAbortedObservable.notifyObservers(z):this.onTimerEndedObservable.notifyObservers(z)}}var b=Y(10953),L=Y(10918),D=Y(12523);class g extends E.c{constructor(z){super(z),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",J.p),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",J.g,new D.b(-1))}_preparePendingTasks(z){const u=this.duration.getValue(z);if(u<0||isNaN(u)||!isFinite(u))return this._reportError(z,"Invalid duration in SetDelay block");if(z._getGlobalContextVariable("activeDelays",0)>=g.MaxParallelDelayCount)return this._reportError(z,"Max parallel delays reached");const Y=z._getGlobalContextVariable("lastDelayIndex",-1),H=z._getExecutionVariable(this,"pendingDelays",[]),E=z.configuration.Cu,J=new T({timeout:1e3*u,contextObservable:E.onBeforeRenderObservable,onEnded:()=>this._onEnded(J,z)});J.start();const l=Y+1;this.lastDelayIndex.setValue(new D.b(l),z),z._setGlobalContextVariable("lastDelayIndex",l),H[l]=J,z._setExecutionVariable(this,"pendingDelays",H),this._updateGlobalTimers(z)}_cancelPendingTasks(z){const u=z._getExecutionVariable(this,"pendingDelays",[]);for(const Y of u)null===Y||void 0===Y||Y.dispose();z._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new D.b(-1),z),this._updateGlobalTimers(z)}_execute(z,u){u!==this.cancel?(this._preparePendingTasks(z),this.out._activateSignal(z)):this._cancelPendingTasks(z)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(z,u){const Y=u._getExecutionVariable(this,"pendingDelays",[]),H=Y.indexOf(z);-1!==H?Y.splice(H,1):b.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),u._removePendingBlock(this),this.done._activateSignal(u),this._updateGlobalTimers(u)}_updateGlobalTimers(z){const u=z._getExecutionVariable(this,"pendingDelays",[]),Y=z._getGlobalContextVariable("pendingDelays",[]);for(let H=0;H<u.length;H++){if(!u[H])continue;const z=u[H];Y[H]&&Y[H]!==z?b.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):Y[H]=z}z._setGlobalContextVariable("pendingDelays",Y)}}g.MaxParallelDelayCount=100,(0,L.d)("FlowGraphSetDelayBlock",g)}}]);