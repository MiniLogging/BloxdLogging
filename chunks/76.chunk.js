"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[76],{14397:(Z,c,L)=>{L.r(c),L.d(c,{FlowGraphSetDelayBlock:()=>i});var k,N=L(12870),R=L(12825),G=L(11027);!function(Z){Z[Z.INIT=0]="INIT",Z[Z.STARTED=1]="STARTED",Z[Z.ENDED=2]="ENDED"}(k||(k={}));class V{constructor(Z){this.onEachCountObservable=new G.b,this.onTimerAbortedObservable=new G.b,this.onTimerEndedObservable=new G.b,this.onStateChangedObservable=new G.b,this._observer=null,this._breakOnNextTick=!1,this._tick=Z=>{const c=Date.now();this._timer=c-this._startTime;const L={startTime:this._startTime,currentTime:c,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:Z},k=this._breakOnNextTick||this._breakCondition(L);k||this._timer>=this._timeToEnd?this._stop(L,k):this.onEachCountObservable.notifyObservers(L)},this._setState(0),this._contextObservable=Z.contextObservable,this._observableParameters=Z.observableParameters??{},this._breakCondition=Z.breakCondition??(()=>!1),this._timeToEnd=Z.timeout,Z.onEnded&&this.onTimerEndedObservable.add(Z.onEnded),Z.Bz&&this.onEachCountObservable.add(Z.Bz),Z.onAborted&&this.onTimerAbortedObservable.add(Z.onAborted)}set breakCondition(Z){this._breakCondition=Z}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let Z=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=Z,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(Z){this._state=Z,this.onStateChangedObservable.notifyObservers(this._state)}_stop(Z){let c=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),c?this.onTimerAbortedObservable.notifyObservers(Z):this.onTimerEndedObservable.notifyObservers(Z)}}var p=L(11052),J=L(11012),z=L(12817);class i extends N.d{constructor(Z){super(Z),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",R.t),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",R.i,new z.b(-1))}_preparePendingTasks(Z){const c=this.duration.getValue(Z);if(c<0||isNaN(c)||!isFinite(c))return this._reportError(Z,"Invalid duration in SetDelay block");if(Z._getGlobalContextVariable("activeDelays",0)>=i.MaxParallelDelayCount)return this._reportError(Z,"Max parallel delays reached");const L=Z._getGlobalContextVariable("lastDelayIndex",-1),k=Z._getExecutionVariable(this,"pendingDelays",[]),N=Z.configuration.LL,R=new V({timeout:1e3*c,contextObservable:N.onBeforeRenderObservable,onEnded:()=>this._onEnded(R,Z)});R.start();const G=L+1;this.lastDelayIndex.setValue(new z.b(G),Z),Z._setGlobalContextVariable("lastDelayIndex",G),k[G]=R,Z._setExecutionVariable(this,"pendingDelays",k),this._updateGlobalTimers(Z)}_cancelPendingTasks(Z){const c=Z._getExecutionVariable(this,"pendingDelays",[]);for(const L of c)null===L||void 0===L||L.dispose();Z._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new z.b(-1),Z),this._updateGlobalTimers(Z)}_execute(Z,c){c!==this.cancel?(this._preparePendingTasks(Z),this.out._activateSignal(Z)):this._cancelPendingTasks(Z)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(Z,c){const L=c._getExecutionVariable(this,"pendingDelays",[]),k=L.indexOf(Z);-1!==k?L.splice(k,1):p.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),c._removePendingBlock(this),this.done._activateSignal(c),this._updateGlobalTimers(c)}_updateGlobalTimers(Z){const c=Z._getExecutionVariable(this,"pendingDelays",[]),L=Z._getGlobalContextVariable("pendingDelays",[]);for(let k=0;k<c.length;k++){if(!c[k])continue;const Z=c[k];L[k]&&L[k]!==Z?p.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):L[k]=Z}Z._setGlobalContextVariable("pendingDelays",L)}}i.MaxParallelDelayCount=100,(0,J.g)("FlowGraphSetDelayBlock",i)}}]);