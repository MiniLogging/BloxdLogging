"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[76],{14201:(q,f,j)=>{j.r(f),j.d(f,{FlowGraphSetDelayBlock:()=>X});var d,g=j(12749),h=j(12709),L=j(10982);!function(q){q[q.INIT=0]="INIT",q[q.STARTED=1]="STARTED",q[q.ENDED=2]="ENDED"}(d||(d={}));class Q{constructor(q){this.onEachCountObservable=new L.d,this.onTimerAbortedObservable=new L.d,this.onTimerEndedObservable=new L.d,this.onStateChangedObservable=new L.d,this._observer=null,this._breakOnNextTick=!1,this._tick=q=>{const f=Date.now();this._timer=f-this._startTime;const j={startTime:this._startTime,currentTime:f,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:q},d=this._breakOnNextTick||this._breakCondition(j);d||this._timer>=this._timeToEnd?this._stop(j,d):this.onEachCountObservable.notifyObservers(j)},this._setState(0),this._contextObservable=q.contextObservable,this._observableParameters=q.observableParameters??{},this._breakCondition=q.breakCondition??(()=>!1),this._timeToEnd=q.timeout,q.onEnded&&this.onTimerEndedObservable.add(q.onEnded),q.XX&&this.onEachCountObservable.add(q.XX),q.onAborted&&this.onTimerAbortedObservable.add(q.onAborted)}set breakCondition(q){this._breakCondition=q}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let q=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=q,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(q){this._state=q,this.onStateChangedObservable.notifyObservers(this._state)}_stop(q){let f=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),f?this.onTimerAbortedObservable.notifyObservers(q):this.onTimerEndedObservable.notifyObservers(q)}}var H=j(11005),r=j(10965),u=j(12704);class X extends g.d{constructor(q){super(q),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",h.o),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",h.e,new u.c(-1))}_preparePendingTasks(q){const f=this.duration.getValue(q);if(f<0||isNaN(f)||!isFinite(f))return this._reportError(q,"Invalid duration in SetDelay block");if(q._getGlobalContextVariable("activeDelays",0)>=X.MaxParallelDelayCount)return this._reportError(q,"Max parallel delays reached");const j=q._getGlobalContextVariable("lastDelayIndex",-1),d=q._getExecutionVariable(this,"pendingDelays",[]),g=q.configuration.Sf,h=new Q({timeout:1e3*f,contextObservable:g.onBeforeRenderObservable,onEnded:()=>this._onEnded(h,q)});h.start();const L=j+1;this.lastDelayIndex.setValue(new u.c(L),q),q._setGlobalContextVariable("lastDelayIndex",L),d[L]=h,q._setExecutionVariable(this,"pendingDelays",d),this._updateGlobalTimers(q)}_cancelPendingTasks(q){const f=q._getExecutionVariable(this,"pendingDelays",[]);for(const j of f)null===j||void 0===j||j.dispose();q._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new u.c(-1),q),this._updateGlobalTimers(q)}_execute(q,f){f!==this.cancel?(this._preparePendingTasks(q),this.out._activateSignal(q)):this._cancelPendingTasks(q)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(q,f){const j=f._getExecutionVariable(this,"pendingDelays",[]),d=j.indexOf(q);-1!==d?j.splice(d,1):H.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),f._removePendingBlock(this),this.done._activateSignal(f),this._updateGlobalTimers(f)}_updateGlobalTimers(q){const f=q._getExecutionVariable(this,"pendingDelays",[]),j=q._getGlobalContextVariable("pendingDelays",[]);for(let d=0;d<f.length;d++){if(!f[d])continue;const q=f[d];j[d]&&j[d]!==q?H.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):j[d]=q}q._setGlobalContextVariable("pendingDelays",j)}}X.MaxParallelDelayCount=100,(0,r.f)("FlowGraphSetDelayBlock",X)}}]);