"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[76],{14425:(w,p,e)=>{e.r(p),e.d(p,{FlowGraphSetDelayBlock:()=>k});var r,I=e(12912),d=e(12872),f=e(11056);!function(w){w[w.INIT=0]="INIT",w[w.STARTED=1]="STARTED",w[w.ENDED=2]="ENDED"}(r||(r={}));class q{constructor(w){this.onEachCountObservable=new f.d,this.onTimerAbortedObservable=new f.d,this.onTimerEndedObservable=new f.d,this.onStateChangedObservable=new f.d,this._observer=null,this._breakOnNextTick=!1,this._tick=w=>{const p=Date.now();this._timer=p-this._startTime;const e={startTime:this._startTime,currentTime:p,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:w},r=this._breakOnNextTick||this._breakCondition(e);r||this._timer>=this._timeToEnd?this._stop(e,r):this.onEachCountObservable.notifyObservers(e)},this._setState(0),this._contextObservable=w.contextObservable,this._observableParameters=w.observableParameters??{},this._breakCondition=w.breakCondition??(()=>!1),this._timeToEnd=w.timeout,w.onEnded&&this.onTimerEndedObservable.add(w.onEnded),w.jk&&this.onEachCountObservable.add(w.jk),w.onAborted&&this.onTimerAbortedObservable.add(w.onAborted)}set breakCondition(w){this._breakCondition=w}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let w=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=w,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(w){this._state=w,this.onStateChangedObservable.notifyObservers(this._state)}_stop(w){let p=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),p?this.onTimerAbortedObservable.notifyObservers(w):this.onTimerEndedObservable.notifyObservers(w)}}var E=e(11081),j=e(11038),X=e(12867);class k extends I.d{constructor(w){super(w),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",d.o),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",d.h,new X.b(-1))}_preparePendingTasks(w){const p=this.duration.getValue(w);if(p<0||isNaN(p)||!isFinite(p))return this._reportError(w,"Invalid duration in SetDelay block");if(w._getGlobalContextVariable("activeDelays",0)>=k.MaxParallelDelayCount)return this._reportError(w,"Max parallel delays reached");const e=w._getGlobalContextVariable("lastDelayIndex",-1),r=w._getExecutionVariable(this,"pendingDelays",[]),I=w.configuration.yp,d=new q({timeout:1e3*p,contextObservable:I.onBeforeRenderObservable,onEnded:()=>this._onEnded(d,w)});d.start();const f=e+1;this.lastDelayIndex.setValue(new X.b(f),w),w._setGlobalContextVariable("lastDelayIndex",f),r[f]=d,w._setExecutionVariable(this,"pendingDelays",r),this._updateGlobalTimers(w)}_cancelPendingTasks(w){const p=w._getExecutionVariable(this,"pendingDelays",[]);for(const e of p)null===e||void 0===e||e.dispose();w._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new X.b(-1),w),this._updateGlobalTimers(w)}_execute(w,p){p!==this.cancel?(this._preparePendingTasks(w),this.out._activateSignal(w)):this._cancelPendingTasks(w)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(w,p){const e=p._getExecutionVariable(this,"pendingDelays",[]),r=e.indexOf(w);-1!==r?e.splice(r,1):E.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),p._removePendingBlock(this),this.done._activateSignal(p),this._updateGlobalTimers(p)}_updateGlobalTimers(w){const p=w._getExecutionVariable(this,"pendingDelays",[]),e=w._getGlobalContextVariable("pendingDelays",[]);for(let r=0;r<p.length;r++){if(!p[r])continue;const w=p[r];e[r]&&e[r]!==w?E.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):e[r]=w}w._setGlobalContextVariable("pendingDelays",e)}}k.MaxParallelDelayCount=100,(0,j.d)("FlowGraphSetDelayBlock",k)}}]);