"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[76],{14147:(h,d,m)=>{m.r(d),m.d(d,{FlowGraphSetDelayBlock:()=>q});var j,A=m(12708),b=m(12671),w=m(11097);!function(h){h[h.INIT=0]="INIT",h[h.STARTED=1]="STARTED",h[h.ENDED=2]="ENDED"}(j||(j={}));class a{constructor(h){this.onEachCountObservable=new w.e,this.onTimerAbortedObservable=new w.e,this.onTimerEndedObservable=new w.e,this.onStateChangedObservable=new w.e,this._observer=null,this._breakOnNextTick=!1,this._tick=h=>{const d=Date.now();this._timer=d-this._startTime;const m={startTime:this._startTime,currentTime:d,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:h},j=this._breakOnNextTick||this._breakCondition(m);j||this._timer>=this._timeToEnd?this._stop(m,j):this.onEachCountObservable.notifyObservers(m)},this._setState(0),this._contextObservable=h.contextObservable,this._observableParameters=h.observableParameters??{},this._breakCondition=h.breakCondition??(()=>!1),this._timeToEnd=h.timeout,h.onEnded&&this.onTimerEndedObservable.add(h.onEnded),h.zM&&this.onEachCountObservable.add(h.zM),h.onAborted&&this.onTimerAbortedObservable.add(h.onAborted)}set breakCondition(h){this._breakCondition=h}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let h=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=h,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(h){this._state=h,this.onStateChangedObservable.notifyObservers(this._state)}_stop(h){let d=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),d?this.onTimerAbortedObservable.notifyObservers(h):this.onTimerEndedObservable.notifyObservers(h)}}var D=m(11121),S=m(11080),M=m(12668);class q extends A.d{constructor(h){super(h),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",b.y),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",b.i,new M.b(-1))}_preparePendingTasks(h){const d=this.duration.getValue(h);if(d<0||isNaN(d)||!isFinite(d))return this._reportError(h,"Invalid duration in SetDelay block");if(h._getGlobalContextVariable("activeDelays",0)>=q.MaxParallelDelayCount)return this._reportError(h,"Max parallel delays reached");const m=h._getGlobalContextVariable("lastDelayIndex",-1),j=h._getExecutionVariable(this,"pendingDelays",[]),A=h.configuration.Fd,b=new a({timeout:1e3*d,contextObservable:A.onBeforeRenderObservable,onEnded:()=>this._onEnded(b,h)});b.start();const w=m+1;this.lastDelayIndex.setValue(new M.b(w),h),h._setGlobalContextVariable("lastDelayIndex",w),j[w]=b,h._setExecutionVariable(this,"pendingDelays",j),this._updateGlobalTimers(h)}_cancelPendingTasks(h){const d=h._getExecutionVariable(this,"pendingDelays",[]);for(const m of d)null===m||void 0===m||m.dispose();h._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new M.b(-1),h),this._updateGlobalTimers(h)}_execute(h,d){d!==this.cancel?(this._preparePendingTasks(h),this.out._activateSignal(h)):this._cancelPendingTasks(h)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(h,d){const m=d._getExecutionVariable(this,"pendingDelays",[]),j=m.indexOf(h);-1!==j?m.splice(j,1):D.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),d._removePendingBlock(this),this.done._activateSignal(d),this._updateGlobalTimers(d)}_updateGlobalTimers(h){const d=h._getExecutionVariable(this,"pendingDelays",[]),m=h._getGlobalContextVariable("pendingDelays",[]);for(let j=0;j<d.length;j++){if(!d[j])continue;const h=d[j];m[j]&&m[j]!==h?D.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):m[j]=h}h._setGlobalContextVariable("pendingDelays",m)}}q.MaxParallelDelayCount=100,(0,S.i)("FlowGraphSetDelayBlock",q)}}]);