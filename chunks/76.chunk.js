"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[76],{14450:(V,I,m)=>{m.r(I),m.d(I,{FlowGraphSetDelayBlock:()=>Y});var C,l=m(12932),s=m(12899),F=m(11067);!function(V){V[V.INIT=0]="INIT",V[V.STARTED=1]="STARTED",V[V.ENDED=2]="ENDED"}(C||(C={}));class k{constructor(V){this.onEachCountObservable=new F.e,this.onTimerAbortedObservable=new F.e,this.onTimerEndedObservable=new F.e,this.onStateChangedObservable=new F.e,this._observer=null,this._breakOnNextTick=!1,this._tick=V=>{const I=Date.now();this._timer=I-this._startTime;const m={startTime:this._startTime,currentTime:I,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:V},C=this._breakOnNextTick||this._breakCondition(m);C||this._timer>=this._timeToEnd?this._stop(m,C):this.onEachCountObservable.notifyObservers(m)},this._setState(0),this._contextObservable=V.contextObservable,this._observableParameters=V.observableParameters??{},this._breakCondition=V.breakCondition??(()=>!1),this._timeToEnd=V.timeout,V.onEnded&&this.onTimerEndedObservable.add(V.onEnded),V.DK&&this.onEachCountObservable.add(V.DK),V.onAborted&&this.onTimerAbortedObservable.add(V.onAborted)}set breakCondition(V){this._breakCondition=V}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let V=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=V,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(V){this._state=V,this.onStateChangedObservable.notifyObservers(this._state)}_stop(V){let I=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),I?this.onTimerAbortedObservable.notifyObservers(V):this.onTimerEndedObservable.notifyObservers(V)}}var j=m(11085),E=m(11048),K=m(12896);class Y extends l.c{constructor(V){super(V),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",s.r),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",s.h,new K.b(-1))}_preparePendingTasks(V){const I=this.duration.getValue(V);if(I<0||isNaN(I)||!isFinite(I))return this._reportError(V,"Invalid duration in SetDelay block");if(V._getGlobalContextVariable("activeDelays",0)>=Y.MaxParallelDelayCount)return this._reportError(V,"Max parallel delays reached");const m=V._getGlobalContextVariable("lastDelayIndex",-1),C=V._getExecutionVariable(this,"pendingDelays",[]),l=V.configuration.OI,s=new k({timeout:1e3*I,contextObservable:l.onBeforeRenderObservable,onEnded:()=>this._onEnded(s,V)});s.start();const F=m+1;this.lastDelayIndex.setValue(new K.b(F),V),V._setGlobalContextVariable("lastDelayIndex",F),C[F]=s,V._setExecutionVariable(this,"pendingDelays",C),this._updateGlobalTimers(V)}_cancelPendingTasks(V){const I=V._getExecutionVariable(this,"pendingDelays",[]);for(const m of I)null===m||void 0===m||m.dispose();V._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new K.b(-1),V),this._updateGlobalTimers(V)}_execute(V,I){I!==this.cancel?(this._preparePendingTasks(V),this.out._activateSignal(V)):this._cancelPendingTasks(V)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(V,I){const m=I._getExecutionVariable(this,"pendingDelays",[]),C=m.indexOf(V);-1!==C?m.splice(C,1):j.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),I._removePendingBlock(this),this.done._activateSignal(I),this._updateGlobalTimers(I)}_updateGlobalTimers(V){const I=V._getExecutionVariable(this,"pendingDelays",[]),m=V._getGlobalContextVariable("pendingDelays",[]);for(let C=0;C<I.length;C++){if(!I[C])continue;const V=I[C];m[C]&&m[C]!==V?j.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):m[C]=V}V._setGlobalContextVariable("pendingDelays",m)}}Y.MaxParallelDelayCount=100,(0,E.h)("FlowGraphSetDelayBlock",Y)}}]);