"use strict";(self.fjf2z1c8il8=self.fjf2z1c8il8||[]).push([[88],{15766:(g,i,a)=>{a.r(i),a.d(i,{FlowGraphAbsBlock:()=>Y,FlowGraphAcosBlock:()=>dg,FlowGraphAcoshBlock:()=>jg,FlowGraphAddBlock:()=>B,FlowGraphAsinBlock:()=>Lg,FlowGraphAsinhBlock:()=>Ig,FlowGraphAtan2Block:()=>kg,FlowGraphAtanBlock:()=>bg,FlowGraphAtanhBlock:()=>yg,FlowGraphBitwiseAndBlock:()=>vg,FlowGraphBitwiseLeftShiftBlock:()=>fg,FlowGraphBitwiseNotBlock:()=>Xg,FlowGraphBitwiseOrBlock:()=>Pg,FlowGraphBitwiseRightShiftBlock:()=>Cg,FlowGraphBitwiseXorBlock:()=>Yg,FlowGraphCeilBlock:()=>S,FlowGraphClampBlock:()=>O,FlowGraphCosBlock:()=>ag,FlowGraphCoshBlock:()=>Ng,FlowGraphCubeRootBlock:()=>xg,FlowGraphDegToRadBlock:()=>J,FlowGraphDivideBlock:()=>p,FlowGraphEBlock:()=>x,FlowGraphEqualityBlock:()=>Q,FlowGraphExpBlock:()=>Bg,FlowGraphFloorBlock:()=>U,FlowGraphFractionBlock:()=>K,FlowGraphGreaterThanBlock:()=>M,FlowGraphGreaterThanOrEqualBlock:()=>q,FlowGraphInfBlock:()=>X,FlowGraphIsInfinityBlock:()=>G,FlowGraphIsNanBlock:()=>W,FlowGraphLeadingZerosBlock:()=>Ug,FlowGraphLessThanBlock:()=>u,FlowGraphLessThanOrEqualBlock:()=>H,FlowGraphLog10Block:()=>pg,FlowGraphLog2Block:()=>Dg,FlowGraphLogBlock:()=>cg,FlowGraphMathInterpolationBlock:()=>r,FlowGraphMaxBlock:()=>w,FlowGraphMinBlock:()=>h,FlowGraphModuloBlock:()=>Z,FlowGraphMultiplyBlock:()=>D,FlowGraphNaNBlock:()=>v,FlowGraphNegationBlock:()=>T,FlowGraphOneBitsCounterBlock:()=>Vg,FlowGraphPiBlock:()=>E,FlowGraphPowerBlock:()=>Eg,FlowGraphRadToDegBlock:()=>gg,FlowGraphRandomBlock:()=>R,FlowGraphRoundBlock:()=>V,FlowGraphSaturateBlock:()=>s,FlowGraphSignBlock:()=>f,FlowGraphSinBlock:()=>ig,FlowGraphSinhBlock:()=>eg,FlowGraphSquareRootBlock:()=>Rg,FlowGraphSubtractBlock:()=>c,FlowGraphTanBlock:()=>ng,FlowGraphTanhBlock:()=>Fg,FlowGraphTrailingZerosBlock:()=>Sg,FlowGraphTruncBlock:()=>C});var n=a(12415),L=a(14214),d=a(15774),b=a(15780);class k extends b.d{constructor(g,i,a,n){super(g,n),this._operation=i,this._className=a}_doOperation(g){return this._operation(g)}getClassName(){return this._className}}var e=a(12452),N=a(15786);class F extends b.d{constructor(g,i,a,n,L,d,b){super(n,b),this._operation=L,this._className=d,this.a=this.registerDataInput("a",g),this.b=this.registerDataInput("b",i),this.c=this.registerDataInput("c",a)}_doOperation(g){return this._operation(this.a.getValue(g),this.b.getValue(g),this.c.getValue(g))}getClassName(){return this._className}}var I=a(14209),j=a(14221),y=a(14249);class B extends d.e{constructor(g){super((0,L.I)(null===g||void 0===g?void 0:g.type),(0,L.I)(null===g||void 0===g?void 0:g.type),(0,L.I)(null===g||void 0===g?void 0:g.type),((g,i)=>this._polymorphicAdd(g,i)),"FlowGraphAddBlock",g)}_polymorphicAdd(g,i){const a=(0,y.l)(g),n=(0,y.l)(i);if((0,y.j)(a,n)||(0,y.g)(a,n)||(0,y.d)(a,n))return g.add(i);if("Quaternion"===a||"Vector4"===n)return new e.Vector4(g.x,g.y,g.z,g.w).addInPlace(i);if("Vector4"===a||"Quaternion"===n)return g.add(i);var L;if(null!==(L=this.config)&&void 0!==L&&L.preventIntegerFloatArithmetic&&typeof g!==typeof i)throw new Error("Cannot add different types of numbers.");return(0,y.p)(g)+(0,y.p)(i)}}(0,n.e)("FlowGraphAddBlock",B);class c extends d.e{constructor(g){super((0,L.I)(null===g||void 0===g?void 0:g.type),(0,L.I)(null===g||void 0===g?void 0:g.type),(0,L.I)(null===g||void 0===g?void 0:g.type),((g,i)=>this._polymorphicSubtract(g,i)),"FlowGraphSubtractBlock",g)}_polymorphicSubtract(g,i){const a=(0,y.l)(g),n=(0,y.l)(i);if((0,y.j)(a,n)||(0,y.d)(a,n)||(0,y.g)(a,n))return g.ci(i);if("Quaternion"===a||"Vector4"===n)return new e.Vector4(g.x,g.y,g.z,g.w).ij(i);if("Vector4"===a||"Quaternion"===n)return g.ci(i);var L;if(null!==(L=this.config)&&void 0!==L&&L.preventIntegerFloatArithmetic&&typeof g!==typeof i)throw new Error("Cannot add different types of numbers.");return(0,y.p)(g)-(0,y.p)(i)}}(0,n.e)("FlowGraphSubtractBlock",c);class D extends d.e{constructor(g){super((0,L.I)(null===g||void 0===g?void 0:g.type),(0,L.I)(null===g||void 0===g?void 0:g.type),(0,L.I)(null===g||void 0===g?void 0:g.type),((g,i)=>this._polymorphicMultiply(g,i)),"FlowGraphMultiplyBlock",g)}_polymorphicMultiply(g,i){const a=(0,y.l)(g),n=(0,y.l)(i);if((0,y.j)(a,n)||(0,y.d)(a,n))return g.multiply(i);if("Quaternion"===a||"Vector4"===n)return new e.Vector4(g.x,g.y,g.z,g.w).multiplyInPlace(i);if("Vector4"===a||"Quaternion"===n)return g.multiply(i);if((0,y.g)(a,n)){var L;if(null!==(L=this.config)&&void 0!==L&&L.useMatrixPerComponent){const n=g.m;for(let g=0;g<n.length;g++)n[g]*=i.m[g];return"Matrix2D"===a?new j.d(n):"Matrix3D"===a?new j.h(n):e.Matrix.xi(n)}return i.multiply(g)}var d;if(null!==(d=this.config)&&void 0!==d&&d.preventIntegerFloatArithmetic&&typeof g!==typeof i)throw new Error("Cannot add different types of numbers.");return(0,y.p)(g)*(0,y.p)(i)}}(0,n.e)("FlowGraphMultiplyBlock",D);class p extends d.e{constructor(g){super((0,L.I)(null===g||void 0===g?void 0:g.type),(0,L.I)(null===g||void 0===g?void 0:g.type),(0,L.I)(null===g||void 0===g?void 0:g.type),((g,i)=>this._polymorphicDivide(g,i)),"FlowGraphDivideBlock",g)}_polymorphicDivide(g,i){const a=(0,y.l)(g),n=(0,y.l)(i);if((0,y.j)(a,n)||(0,y.d)(a,n))return g.divide(i);if("Quaternion"===a||"Quaternion"===n){const a=g.clone();return a.x/=i.x,a.y/=i.y,a.z/=i.z,a.w/=i.w,a}if("Quaternion"===a||"Vector4"===n)return new e.Vector4(g.x,g.y,g.z,g.w).divideInPlace(i);if("Vector4"===a||"Quaternion"===n)return g.divide(i);if((0,y.g)(a,n)){var L;if(null!==(L=this.config)&&void 0!==L&&L.useMatrixPerComponent){const n=g.m;for(let g=0;g<n.length;g++)n[g]/=i.m[g];return"Matrix2D"===a?new j.d(n):"Matrix3D"===a?new j.h(n):e.Matrix.xi(n)}return g.divide(i)}var d;if(null!==(d=this.config)&&void 0!==d&&d.preventIntegerFloatArithmetic&&typeof g!==typeof i)throw new Error("Cannot add different types of numbers.");return(0,y.p)(g)/(0,y.p)(i)}}(0,n.e)("FlowGraphDivideBlock",p);class R extends k{constructor(g){super(L.q,(g=>this._random(g)),"FlowGraphRandomBlock",g),this.min=this.registerDataInput("min",L.q,(null===g||void 0===g?void 0:g.min)??0),this.max=this.registerDataInput("max",L.q,(null===g||void 0===g?void 0:g.max)??1),null!==g&&void 0!==g&&g.seed&&(this._seed=g.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const g=1e4*Math.sin(this._seed++);return g-Math.floor(g)}return Math.random()}_random(g){const i=this.min.getValue(g),a=this.max.getValue(g);return this._getRandomValue()*(a-i)+i}}(0,n.e)("FlowGraphRandomBlock",R);class x extends k{constructor(g){super(L.q,(()=>Math.E),"FlowGraphEBlock",g)}}(0,n.e)("FlowGraphEBlock",x);class E extends k{constructor(g){super(L.q,(()=>Math.PI),"FlowGraphPIBlock",g)}}(0,n.e)("FlowGraphPIBlock",E);class X extends k{constructor(g){super(L.q,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",g)}}(0,n.e)("FlowGraphInfBlock",X);class v extends k{constructor(g){super(L.q,(()=>Number.NaN),"FlowGraphNaNBlock",g)}}function P(g,i){switch((0,y.l)(g)){case"FlowGraphInteger":return new I.e(i(g.value));case"Vector2":return new e.Vector2(i(g.x),i(g.y));case"Bi":return new e.Bi(i(g.x),i(g.y),i(g.z));case"Vector4":return new e.Vector4(i(g.x),i(g.y),i(g.z),i(g.w));case"Quaternion":return new e.Quaternion(i(g.x),i(g.y),i(g.z),i(g.w));case"Matrix":return e.Matrix.xi(g.m.map(i));case"Matrix2D":return new j.d(g.m.map(i));case"Matrix3D":return new j.h(g.m.map(i));default:return i(g)}}(0,n.e)("FlowGraphNaNBlock",v);class Y extends N.d{constructor(g){super(L.q,L.q,(g=>this._polymorphicAbs(g)),"FlowGraphAbsBlock",g)}_polymorphicAbs(g){return P(g,Math.abs)}}(0,n.e)("FlowGraphAbsBlock",Y);class f extends N.d{constructor(g){super(L.q,L.q,(g=>this._polymorphicSign(g)),"FlowGraphSignBlock",g)}_polymorphicSign(g){return P(g,Math.sign)}}(0,n.e)("FlowGraphSignBlock",f);class C extends N.d{constructor(g){super(L.q,L.q,(g=>this._polymorphicTrunc(g)),"FlowGraphTruncBlock",g)}_polymorphicTrunc(g){return P(g,Math.trunc)}}(0,n.e)("FlowGraphTruncBlock",C);class U extends N.d{constructor(g){super(L.q,L.q,(g=>this._polymorphicFloor(g)),"FlowGraphFloorBlock",g)}_polymorphicFloor(g){return P(g,Math.floor)}}(0,n.e)("FlowGraphFloorBlock",U);class S extends N.d{constructor(g){super(L.d,L.d,(g=>this._polymorphicCeiling(g)),"FlowGraphCeilBlock",g)}_polymorphicCeiling(g){return P(g,Math.ceil)}}(0,n.e)("FlowGraphCeilBlock",S);class V extends N.d{constructor(g){super(L.d,L.d,(g=>this._polymorphicRound(g)),"FlowGraphRoundBlock",g)}_polymorphicRound(g){return P(g,(g=>{var i;return g<0&&null!==(i=this.config)&&void 0!==i&&i.roundHalfAwayFromZero?-Math.round(-g):Math.round(g)}))}}(0,n.e)("FlowGraphRoundBlock",V);class K extends N.d{constructor(g){super(L.d,L.d,(g=>this._polymorphicFraction(g)),"FlowGraphFractBlock",g)}_polymorphicFraction(g){return P(g,(g=>g-Math.floor(g)))}}(0,n.e)("FlowGraphFractBlock",K);class T extends N.d{constructor(g){super(L.d,L.d,(g=>this._polymorphicNeg(g)),"FlowGraphNegationBlock",g)}_polymorphicNeg(g){return P(g,(g=>-g))}}function l(g,i,a){switch((0,y.l)(g)){case"FlowGraphInteger":return new I.e(a(g.value,i.value));case"Vector2":return new e.Vector2(a(g.x,i.x),a(g.y,i.y));case"Bi":return new e.Bi(a(g.x,i.x),a(g.y,i.y),a(g.z,i.z));case"Vector4":return new e.Vector4(a(g.x,i.x),a(g.y,i.y),a(g.z,i.z),a(g.w,i.w));case"Quaternion":return new e.Quaternion(a(g.x,i.x),a(g.y,i.y),a(g.z,i.z),a(g.w,i.w));case"Matrix":return e.Matrix.xi(g.m.map(((g,n)=>a(g,i.m[n]))));case"Matrix2D":return new j.d(g.m.map(((g,n)=>a(g,i.m[n]))));case"Matrix3D":return new j.h(g.m.map(((g,n)=>a(g,i.m[n]))));default:return a((0,y.p)(g),(0,y.p)(i))}}(0,n.e)("FlowGraphNegationBlock",T);class Z extends d.e{constructor(g){super(L.d,L.d,L.d,((g,i)=>this._polymorphicRemainder(g,i)),"FlowGraphModuloBlock",g)}_polymorphicRemainder(g,i){return l(g,i,((g,i)=>g%i))}}(0,n.e)("FlowGraphModuloBlock",Z);class h extends d.e{constructor(g){super(L.d,L.d,L.d,((g,i)=>this._polymorphicMin(g,i)),"FlowGraphMinBlock",g)}_polymorphicMin(g,i){return l(g,i,Math.min)}}(0,n.e)("FlowGraphMinBlock",h);class w extends d.e{constructor(g){super(L.d,L.d,L.d,((g,i)=>this._polymorphicMax(g,i)),"FlowGraphMaxBlock",g)}_polymorphicMax(g,i){return l(g,i,Math.max)}}function t(g,i,a){return Math.min(Math.max(g,Math.min(i,a)),Math.max(i,a))}function A(g,i,a,n){switch((0,y.l)(g)){case"FlowGraphInteger":return new I.e(n(g.value,i.value,a.value));case"Vector2":return new e.Vector2(n(g.x,i.x,a.x),n(g.y,i.y,a.y));case"Bi":return new e.Bi(n(g.x,i.x,a.x),n(g.y,i.y,a.y),n(g.z,i.z,a.z));case"Vector4":return new e.Vector4(n(g.x,i.x,a.x),n(g.y,i.y,a.y),n(g.z,i.z,a.z),n(g.w,i.w,a.w));case"Quaternion":return new e.Quaternion(n(g.x,i.x,a.x),n(g.y,i.y,a.y),n(g.z,i.z,a.z),n(g.w,i.w,a.w));case"Matrix":return e.Matrix.xi(g.m.map(((g,L)=>n(g,i.m[L],a.m[L]))));case"Matrix2D":return new j.d(g.m.map(((g,L)=>n(g,i.m[L],a.m[L]))));case"Matrix3D":return new j.h(g.m.map(((g,L)=>n(g,i.m[L],a.m[L]))));default:return n((0,y.p)(g),(0,y.p)(i),(0,y.p)(a))}}(0,n.e)("FlowGraphMaxBlock",w);class O extends F{constructor(g){super(L.d,L.d,L.d,L.d,((g,i,a)=>this._polymorphicClamp(g,i,a)),"FlowGraphClampBlock",g)}_polymorphicClamp(g,i,a){return A(g,i,a,t)}}function z(g){return Math.min(Math.max(g,0),1)}(0,n.e)("FlowGraphClampBlock",O);class s extends N.d{constructor(g){super(L.d,L.d,(g=>this._polymorphicSaturate(g)),"FlowGraphSaturateBlock",g)}_polymorphicSaturate(g){return P(g,z)}}function mg(g,i,a){return(1-a)*g+a*i}(0,n.e)("FlowGraphSaturateBlock",s);class r extends F{constructor(g){super(L.d,L.d,L.d,L.d,((g,i,a)=>this._polymorphicInterpolate(g,i,a)),"FlowGraphMathInterpolationBlock",g)}_polymorphicInterpolate(g,i,a){return A(g,i,a,mg)}}(0,n.e)("FlowGraphMathInterpolationBlock",r);class Q extends d.e{constructor(g){super(L.d,L.d,L.e,((g,i)=>this._polymorphicEq(g,i)),"FlowGraphEqualityBlock",g)}_polymorphicEq(g,i){const a=(0,y.l)(g),n=(0,y.l)(i);return typeof g===typeof i&&((0,y.j)(a,n)||(0,y.g)(a,n)||(0,y.d)(a,n)?g.equals(i):g===i)}}function o(g,i,a){if((0,y.r)(g)&&(0,y.r)(i))return a((0,y.p)(g),(0,y.p)(i));throw new Error(`Cannot compare ${g} and ${i}`)}(0,n.e)("FlowGraphEqualityBlock",Q);class u extends d.e{constructor(g){super(L.d,L.d,L.e,((g,i)=>this._polymorphicLessThan(g,i)),"FlowGraphLessThanBlock",g)}_polymorphicLessThan(g,i){return o(g,i,((g,i)=>g<i))}}(0,n.e)("FlowGraphLessThanBlock",u);class H extends d.e{constructor(g){super(L.d,L.d,L.e,((g,i)=>this._polymorphicLessThanOrEqual(g,i)),"FlowGraphLessThanOrEqualBlock",g)}_polymorphicLessThanOrEqual(g,i){return o(g,i,((g,i)=>g<=i))}}(0,n.e)("FlowGraphLessThanOrEqualBlock",H);class M extends d.e{constructor(g){super(L.d,L.d,L.e,((g,i)=>this._polymorphicGreaterThan(g,i)),"FlowGraphGreaterThanBlock",g)}_polymorphicGreaterThan(g,i){return o(g,i,((g,i)=>g>i))}}(0,n.e)("FlowGraphGreaterThanBlock",M);class q extends d.e{constructor(g){super(L.d,L.d,L.e,((g,i)=>this._polymorphicGreaterThanOrEqual(g,i)),"FlowGraphGreaterThanOrEqualBlock",g)}_polymorphicGreaterThanOrEqual(g,i){return o(g,i,((g,i)=>g>=i))}}(0,n.e)("FlowGraphGreaterThanOrEqualBlock",q);class W extends N.d{constructor(g){super(L.d,L.e,(g=>this._polymorphicIsNan(g)),"FlowGraphIsNaNBlock",g)}_polymorphicIsNan(g){if((0,y.r)(g,!0))return isNaN((0,y.p)(g));throw new Error(`Cannot get NaN of ${g}`)}}(0,n.e)("FlowGraphIsNaNBlock",W);class G extends N.d{constructor(g){super(L.d,L.e,(g=>this._polymorphicIsInf(g)),"FlowGraphIsInfBlock",g)}_polymorphicIsInf(g){if((0,y.r)(g))return!isFinite((0,y.p)(g));throw new Error(`Cannot get isInf of ${g}`)}}(0,n.e)("FlowGraphIsInfBlock",G);class J extends N.d{constructor(g){super(L.d,L.d,(g=>this._polymorphicDegToRad(g)),"FlowGraphDegToRadBlock",g)}_degToRad(g){return g*Math.PI/180}_polymorphicDegToRad(g){return P(g,this._degToRad)}}(0,n.e)("FlowGraphDegToRadBlock",J);class gg extends N.d{constructor(g){super(L.d,L.d,(g=>this._polymorphicRadToDeg(g)),"FlowGraphRadToDegBlock",g)}_radToDeg(g){return 180*g/Math.PI}_polymorphicRadToDeg(g){return P(g,this._radToDeg)}}(0,n.e)("FlowGraphRadToDegBlock",gg);class ig extends N.d{constructor(g){super(L.q,L.q,(g=>this._polymorphicSin(g)),"FlowGraphSinBlock",g)}_polymorphicSin(g){return P(g,Math.sin)}}class ag extends N.d{constructor(g){super(L.q,L.q,(g=>this._polymorphicCos(g)),"FlowGraphCosBlock",g)}_polymorphicCos(g){return P(g,Math.cos)}}class ng extends N.d{constructor(g){super(L.q,L.q,(g=>this._polymorphicTan(g)),"FlowGraphTanBlock",g)}_polymorphicTan(g){return P(g,Math.tan)}}class Lg extends N.d{constructor(g){super(L.q,L.q,(g=>this._polymorphicAsin(g)),"FlowGraphASinBlock",g)}_polymorphicAsin(g){return P(g,Math.asin)}}(0,n.e)("FlowGraphASinBlock",Lg);class dg extends N.d{constructor(g){super(L.q,L.q,(g=>this._polymorphicAcos(g)),"FlowGraphACosBlock",g)}_polymorphicAcos(g){return P(g,Math.acos)}}(0,n.e)("FlowGraphACosBlock",dg);class bg extends N.d{constructor(g){super(L.q,L.q,(g=>this._polymorphicAtan(g)),"FlowGraphATanBlock",g)}_polymorphicAtan(g){return P(g,Math.atan)}}(0,n.e)("FlowGraphATanBlock",bg);class kg extends d.e{constructor(g){super(L.d,L.d,L.d,((g,i)=>this._polymorphicAtan2(g,i)),"FlowGraphATan2Block",g)}_polymorphicAtan2(g,i){return l(g,i,Math.atan2)}}(0,n.e)("FlowGraphATan2Block",kg);class eg extends N.d{constructor(g){super(L.d,L.d,(g=>this._polymorphicSinh(g)),"FlowGraphSinhBlock",g)}_polymorphicSinh(g){return P(g,Math.sinh)}}(0,n.e)("FlowGraphSinhBlock",eg);class Ng extends N.d{constructor(g){super(L.d,L.d,(g=>this._polymorphicCosh(g)),"FlowGraphCoshBlock",g)}_polymorphicCosh(g){return P(g,Math.cosh)}}(0,n.e)("FlowGraphCoshBlock",Ng);class Fg extends N.d{constructor(g){super(L.d,L.d,(g=>this._polymorphicTanh(g)),"FlowGraphTanhBlock",g)}_polymorphicTanh(g){return P(g,Math.tanh)}}(0,n.e)("FlowGraphTanhBlock",Fg);class Ig extends N.d{constructor(g){super(L.d,L.q,(g=>this._polymorphicAsinh(g)),"FlowGraphASinhBlock",g)}_polymorphicAsinh(g){return P(g,Math.asinh)}}(0,n.e)("FlowGraphASinhBlock",Ig);class jg extends N.d{constructor(g){super(L.d,L.q,(g=>this._polymorphicAcosh(g)),"FlowGraphACoshBlock",g)}_polymorphicAcosh(g){return P(g,Math.acosh)}}(0,n.e)("FlowGraphACoshBlock",jg);class yg extends N.d{constructor(g){super(L.d,L.q,(g=>this._polymorphicAtanh(g)),"FlowGraphATanhBlock",g)}_polymorphicAtanh(g){return P(g,Math.atanh)}}(0,n.e)("FlowGraphATanhBlock",yg);class Bg extends N.d{constructor(g){super(L.d,L.q,(g=>this._polymorphicExp(g)),"FlowGraphExponentialBlock",g)}_polymorphicExp(g){return P(g,Math.exp)}}(0,n.e)("FlowGraphExponentialBlock",Bg);class cg extends N.d{constructor(g){super(L.d,L.q,(g=>this._polymorphicLog(g)),"FlowGraphLogBlock",g)}_polymorphicLog(g){return P(g,Math.log)}}(0,n.e)("FlowGraphLogBlock",cg);class Dg extends N.d{constructor(g){super(L.d,L.q,(g=>this._polymorphicLog2(g)),"FlowGraphLog2Block",g)}_polymorphicLog2(g){return P(g,Math.log2)}}(0,n.e)("FlowGraphLog2Block",Dg);class pg extends N.d{constructor(g){super(L.d,L.q,(g=>this._polymorphicLog10(g)),"FlowGraphLog10Block",g)}_polymorphicLog10(g){return P(g,Math.log10)}}(0,n.e)("FlowGraphLog10Block",pg);class Rg extends N.d{constructor(g){super(L.d,L.q,(g=>this._polymorphicSqrt(g)),"FlowGraphSquareRootBlock",g)}_polymorphicSqrt(g){return P(g,Math.sqrt)}}(0,n.e)("FlowGraphSquareRootBlock",Rg);class xg extends N.d{constructor(g){super(L.d,L.q,(g=>this._polymorphicCubeRoot(g)),"FlowGraphCubeRootBlock",g)}_polymorphicCubeRoot(g){return P(g,Math.cbrt)}}(0,n.e)("FlowGraphCubeRootBlock",xg);class Eg extends d.e{constructor(g){super(L.d,L.q,L.q,((g,i)=>this._polymorphicPow(g,i)),"FlowGraphPowerBlock",g)}_polymorphicPow(g,i){return l(g,i,Math.pow)}}(0,n.e)("FlowGraphPowerBlock",Eg);class Xg extends N.d{constructor(g){super((0,L.I)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),(0,L.I)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),(g=>"boolean"===typeof g?!g:"number"===typeof g?~g:new I.e(~g.value)),"FlowGraphBitwiseNotBlock",g)}}(0,n.e)("FlowGraphBitwiseNotBlock",Xg);class vg extends d.e{constructor(g){super((0,L.I)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),(0,L.I)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),(0,L.I)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),((g,i)=>{if("boolean"===typeof g&&"boolean"===typeof i)return g&&i;if("number"===typeof g&&"number"===typeof i)return g&i;if("object"===typeof g&&"object"===typeof i)return new I.e(g.value&i.value);throw new Error(`Cannot perform bitwise AND on ${g} and ${i}`)}),"FlowGraphBitwiseAndBlock",g)}}(0,n.e)("FlowGraphBitwiseAndBlock",vg);class Pg extends d.e{constructor(g){super((0,L.I)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),(0,L.I)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),(0,L.I)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),((g,i)=>{if("boolean"===typeof g&&"boolean"===typeof i)return g||i;if("number"===typeof g&&"number"===typeof i)return g|i;if("object"===typeof g&&"object"===typeof i)return new I.e(g.value|i.value);throw new Error(`Cannot perform bitwise OR on ${g} and ${i}`)}),"FlowGraphBitwiseOrBlock",g)}}(0,n.e)("FlowGraphBitwiseOrBlock",Pg);class Yg extends d.e{constructor(g){super((0,L.I)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),(0,L.I)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),(0,L.I)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),((g,i)=>{if("boolean"===typeof g&&"boolean"===typeof i)return g!==i;if("number"===typeof g&&"number"===typeof i)return g^i;if("object"===typeof g&&"object"===typeof i)return new I.e(g.value^i.value);throw new Error(`Cannot perform bitwise XOR on ${g} and ${i}`)}),"FlowGraphBitwiseXorBlock",g)}}(0,n.e)("FlowGraphBitwiseXorBlock",Yg);class fg extends d.e{constructor(g){super(L.f,L.f,L.f,((g,i)=>new I.e(g.value<<i.value)),"FlowGraphBitwiseLeftShiftBlock",g)}}(0,n.e)("FlowGraphBitwiseLeftShiftBlock",fg);class Cg extends d.e{constructor(g){super(L.f,L.f,L.f,((g,i)=>new I.e(g.value>>i.value)),"FlowGraphBitwiseRightShiftBlock",g)}}(0,n.e)("FlowGraphBitwiseRightShiftBlock",Cg);class Ug extends N.d{constructor(g){super(L.f,L.f,(g=>new I.e(Math.clz32(g.value))),"FlowGraphLeadingZerosBlock",g)}}(0,n.e)("FlowGraphLeadingZerosBlock",Ug);class Sg extends N.d{constructor(g){super(L.f,L.f,(g=>new I.e(g.value?31-Math.clz32(g.value&-g.value):32)),"FlowGraphTrailingZerosBlock",g)}}(0,n.e)("FlowGraphTrailingZerosBlock",Sg);class Vg extends N.d{constructor(g){super(L.f,L.f,(g=>new I.e(function(g){let i=0;for(;g;)i+=1&g,g>>=1;return i}(g.value))),"FlowGraphOneBitsCounterBlock",g)}}(0,n.e)("FlowGraphOneBitsCounterBlock",Vg)},15774:(g,i,a)=>{a.d(i,{e:()=>L});var n=a(15780);class L extends n.d{constructor(g,i,a,n,L,d){super(a,d),this._operation=n,this._className=L,this.a=this.registerDataInput("a",g),this.b=this.registerDataInput("b",i)}_doOperation(g){const i=this.a.getValue(g),a=this.b.getValue(g);return this._operation(i,a)}getClassName(){return this._className}}},15780:(g,i,a)=>{a.d(i,{d:()=>k});var n=a(14234),L=a(14214);const d="cachedOperationValue",b="cachedExecutionId";class k extends n.c{constructor(g,i){super(i),this.value=this.registerDataOutput("value",g),this.isValid=this.registerDataOutput("isValid",L.e)}_updateOutputs(g){const i=g._getExecutionVariable(this,b,-1),a=g._getExecutionVariable(this,d,null);if(void 0!==a&&null!==a&&i===g.executionId)this.isValid.setValue(!0,g),this.value.setValue(a,g);else try{const i=this._doOperation(g);if(void 0===i||null===i)return void this.isValid.setValue(!1,g);g._setExecutionVariable(this,d,i),g._setExecutionVariable(this,b,g.executionId),this.value.setValue(i,g),this.isValid.setValue(!0,g)}catch(n){this.isValid.setValue(!1,g)}}}},15786:(g,i,a)=>{a.d(i,{d:()=>L});var n=a(15780);class L extends n.d{constructor(g,i,a,n,L){super(i,L),this._operation=a,this._className=n,this.a=this.registerDataInput("a",g)}_doOperation(g){return this._operation(this.a.getValue(g))}getClassName(){return this._className}}}}]);