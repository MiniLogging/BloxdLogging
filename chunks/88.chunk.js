"use strict";(self.hbnkweqmycf=self.hbnkweqmycf||[]).push([[88],{14835:(F,P,f)=>{f.r(P),f.d(P,{FlowGraphAbsBlock:()=>d,FlowGraphAcosBlock:()=>qF,FlowGraphAcoshBlock:()=>TF,FlowGraphAddBlock:()=>t,FlowGraphAsinBlock:()=>NF,FlowGraphAsinhBlock:()=>uF,FlowGraphAtan2Block:()=>AF,FlowGraphAtanBlock:()=>HF,FlowGraphAtanhBlock:()=>YF,FlowGraphBitwiseAndBlock:()=>yF,FlowGraphBitwiseLeftShiftBlock:()=>MF,FlowGraphBitwiseNotBlock:()=>RF,FlowGraphBitwiseOrBlock:()=>OF,FlowGraphBitwiseRightShiftBlock:()=>VF,FlowGraphBitwiseXorBlock:()=>dF,FlowGraphCeilBlock:()=>K,FlowGraphClampBlock:()=>D,FlowGraphCosBlock:()=>fF,FlowGraphCoshBlock:()=>jF,FlowGraphCubeRootBlock:()=>zF,FlowGraphDegToRadBlock:()=>S,FlowGraphDivideBlock:()=>J,FlowGraphEBlock:()=>z,FlowGraphEqualityBlock:()=>s,FlowGraphExpBlock:()=>tF,FlowGraphFloorBlock:()=>Q,FlowGraphFractionBlock:()=>k,FlowGraphGreaterThanBlock:()=>w,FlowGraphGreaterThanOrEqualBlock:()=>g,FlowGraphInfBlock:()=>R,FlowGraphIsInfinityBlock:()=>h,FlowGraphIsNanBlock:()=>G,FlowGraphLeadingZerosBlock:()=>QF,FlowGraphLessThanBlock:()=>m,FlowGraphLessThanOrEqualBlock:()=>a,FlowGraphLog10Block:()=>JF,FlowGraphLog2Block:()=>LF,FlowGraphLogBlock:()=>CF,FlowGraphMathInterpolationBlock:()=>v,FlowGraphMaxBlock:()=>p,FlowGraphMinBlock:()=>n,FlowGraphModuloBlock:()=>r,FlowGraphMultiplyBlock:()=>L,FlowGraphNaNBlock:()=>y,FlowGraphNegationBlock:()=>I,FlowGraphOneBitsCounterBlock:()=>xF,FlowGraphPiBlock:()=>Z,FlowGraphPowerBlock:()=>ZF,FlowGraphRadToDegBlock:()=>FF,FlowGraphRandomBlock:()=>B,FlowGraphRoundBlock:()=>x,FlowGraphSaturateBlock:()=>W,FlowGraphSignBlock:()=>M,FlowGraphSinBlock:()=>PF,FlowGraphSinhBlock:()=>oF,FlowGraphSquareRootBlock:()=>BF,FlowGraphSubtractBlock:()=>C,FlowGraphTanBlock:()=>cF,FlowGraphTanhBlock:()=>iF,FlowGraphTrailingZerosBlock:()=>KF,FlowGraphTruncBlock:()=>V});var c=f(11587),N=f(13265),q=f(14841),H=f(14843);class A extends H.c{constructor(F,P,f,c){super(F,c),this._operation=P,this._className=f}_doOperation(F){return this._operation(F)}getClassName(){return this._className}}var o=f(11639),j=f(14848);class i extends H.c{constructor(F,P,f,c,N,q,H){super(c,H),this._operation=N,this._className=q,this.a=this.registerDataInput("a",F),this.b=this.registerDataInput("b",P),this.c=this.registerDataInput("c",f)}_doOperation(F){return this._operation(this.a.getValue(F),this.b.getValue(F),this.c.getValue(F))}getClassName(){return this._className}}var u=f(13258),T=f(13269),Y=f(13296);class t extends q.d{constructor(F){super((0,N.F)(null===F||void 0===F?void 0:F.type),(0,N.F)(null===F||void 0===F?void 0:F.type),(0,N.F)(null===F||void 0===F?void 0:F.type),((F,P)=>this._polymorphicAdd(F,P)),"FlowGraphAddBlock",F)}_polymorphicAdd(F,P){const f=(0,Y.i)(F),c=(0,Y.i)(P);if((0,Y.h)(f,c)||(0,Y.f)(f,c)||(0,Y.b)(f,c))return F.add(P);if("Quaternion"===f||"Vector4"===c)return new o.Vector4(F.x,F.y,F.z,F.w).addInPlace(P);if("Vector4"===f||"Quaternion"===c)return F.add(P);var N;if(null!==(N=this.config)&&void 0!==N&&N.preventIntegerFloatArithmetic&&typeof F!==typeof P)throw new Error("Cannot add different types of numbers.");return(0,Y.m)(F)+(0,Y.m)(P)}}(0,c.f)("FlowGraphAddBlock",t);class C extends q.d{constructor(F){super((0,N.F)(null===F||void 0===F?void 0:F.type),(0,N.F)(null===F||void 0===F?void 0:F.type),(0,N.F)(null===F||void 0===F?void 0:F.type),((F,P)=>this._polymorphicSubtract(F,P)),"FlowGraphSubtractBlock",F)}_polymorphicSubtract(F,P){const f=(0,Y.i)(F),c=(0,Y.i)(P);if((0,Y.h)(f,c)||(0,Y.b)(f,c)||(0,Y.f)(f,c))return F.CP(P);if("Quaternion"===f||"Vector4"===c)return new o.Vector4(F.x,F.y,F.z,F.w).Ou(P);if("Vector4"===f||"Quaternion"===c)return F.CP(P);var N;if(null!==(N=this.config)&&void 0!==N&&N.preventIntegerFloatArithmetic&&typeof F!==typeof P)throw new Error("Cannot add different types of numbers.");return(0,Y.m)(F)-(0,Y.m)(P)}}(0,c.f)("FlowGraphSubtractBlock",C);class L extends q.d{constructor(F){super((0,N.F)(null===F||void 0===F?void 0:F.type),(0,N.F)(null===F||void 0===F?void 0:F.type),(0,N.F)(null===F||void 0===F?void 0:F.type),((F,P)=>this._polymorphicMultiply(F,P)),"FlowGraphMultiplyBlock",F)}_polymorphicMultiply(F,P){const f=(0,Y.i)(F),c=(0,Y.i)(P);if((0,Y.h)(f,c)||(0,Y.b)(f,c))return F.multiply(P);if("Quaternion"===f||"Vector4"===c)return new o.Vector4(F.x,F.y,F.z,F.w).multiplyInPlace(P);if("Vector4"===f||"Quaternion"===c)return F.multiply(P);if((0,Y.f)(f,c)){var N;if(null!==(N=this.config)&&void 0!==N&&N.useMatrixPerComponent){const c=F.m;for(let F=0;F<c.length;F++)c[F]*=P.m[F];return"Matrix2D"===f?new T.e(c):"Matrix3D"===f?new T.g(c):o.Matrix.zP(c)}return P.multiply(F)}var q;if(null!==(q=this.config)&&void 0!==q&&q.preventIntegerFloatArithmetic&&typeof F!==typeof P)throw new Error("Cannot add different types of numbers.");return(0,Y.m)(F)*(0,Y.m)(P)}}(0,c.f)("FlowGraphMultiplyBlock",L);class J extends q.d{constructor(F){super((0,N.F)(null===F||void 0===F?void 0:F.type),(0,N.F)(null===F||void 0===F?void 0:F.type),(0,N.F)(null===F||void 0===F?void 0:F.type),((F,P)=>this._polymorphicDivide(F,P)),"FlowGraphDivideBlock",F)}_polymorphicDivide(F,P){const f=(0,Y.i)(F),c=(0,Y.i)(P);if((0,Y.h)(f,c)||(0,Y.b)(f,c))return F.divide(P);if("Quaternion"===f||"Quaternion"===c){const f=F.clone();return f.x/=P.x,f.y/=P.y,f.z/=P.z,f.w/=P.w,f}if("Quaternion"===f||"Vector4"===c)return new o.Vector4(F.x,F.y,F.z,F.w).divideInPlace(P);if("Vector4"===f||"Quaternion"===c)return F.divide(P);if((0,Y.f)(f,c)){var N;if(null!==(N=this.config)&&void 0!==N&&N.useMatrixPerComponent){const c=F.m;for(let F=0;F<c.length;F++)c[F]/=P.m[F];return"Matrix2D"===f?new T.e(c):"Matrix3D"===f?new T.g(c):o.Matrix.zP(c)}return F.divide(P)}var q;if(null!==(q=this.config)&&void 0!==q&&q.preventIntegerFloatArithmetic&&typeof F!==typeof P)throw new Error("Cannot add different types of numbers.");return(0,Y.m)(F)/(0,Y.m)(P)}}(0,c.f)("FlowGraphDivideBlock",J);class B extends A{constructor(F){super(N.o,(F=>this._random(F)),"FlowGraphRandomBlock",F),this.min=this.registerDataInput("min",N.o,(null===F||void 0===F?void 0:F.min)??0),this.max=this.registerDataInput("max",N.o,(null===F||void 0===F?void 0:F.max)??1),null!==F&&void 0!==F&&F.seed&&(this._seed=F.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const F=1e4*Math.sin(this._seed++);return F-Math.floor(F)}return Math.random()}_random(F){const P=this.min.getValue(F),f=this.max.getValue(F);return this._getRandomValue()*(f-P)+P}}(0,c.f)("FlowGraphRandomBlock",B);class z extends A{constructor(F){super(N.o,(()=>Math.E),"FlowGraphEBlock",F)}}(0,c.f)("FlowGraphEBlock",z);class Z extends A{constructor(F){super(N.o,(()=>Math.PI),"FlowGraphPIBlock",F)}}(0,c.f)("FlowGraphPIBlock",Z);class R extends A{constructor(F){super(N.o,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",F)}}(0,c.f)("FlowGraphInfBlock",R);class y extends A{constructor(F){super(N.o,(()=>Number.NaN),"FlowGraphNaNBlock",F)}}function O(F,P){switch((0,Y.i)(F)){case"FlowGraphInteger":return new u.b(P(F.value));case"Vector2":return new o.Vector2(P(F.x),P(F.y));case"tP":return new o.tP(P(F.x),P(F.y),P(F.z));case"Vector4":return new o.Vector4(P(F.x),P(F.y),P(F.z),P(F.w));case"Quaternion":return new o.Quaternion(P(F.x),P(F.y),P(F.z),P(F.w));case"Matrix":return o.Matrix.zP(F.m.map(P));case"Matrix2D":return new T.e(F.m.map(P));case"Matrix3D":return new T.g(F.m.map(P));default:return P(F)}}(0,c.f)("FlowGraphNaNBlock",y);class d extends j.e{constructor(F){super(N.o,N.o,(F=>this._polymorphicAbs(F)),"FlowGraphAbsBlock",F)}_polymorphicAbs(F){return O(F,Math.abs)}}(0,c.f)("FlowGraphAbsBlock",d);class M extends j.e{constructor(F){super(N.o,N.o,(F=>this._polymorphicSign(F)),"FlowGraphSignBlock",F)}_polymorphicSign(F){return O(F,Math.sign)}}(0,c.f)("FlowGraphSignBlock",M);class V extends j.e{constructor(F){super(N.o,N.o,(F=>this._polymorphicTrunc(F)),"FlowGraphTruncBlock",F)}_polymorphicTrunc(F){return O(F,Math.trunc)}}(0,c.f)("FlowGraphTruncBlock",V);class Q extends j.e{constructor(F){super(N.o,N.o,(F=>this._polymorphicFloor(F)),"FlowGraphFloorBlock",F)}_polymorphicFloor(F){return O(F,Math.floor)}}(0,c.f)("FlowGraphFloorBlock",Q);class K extends j.e{constructor(F){super(N.c,N.c,(F=>this._polymorphicCeiling(F)),"FlowGraphCeilBlock",F)}_polymorphicCeiling(F){return O(F,Math.ceil)}}(0,c.f)("FlowGraphCeilBlock",K);class x extends j.e{constructor(F){super(N.c,N.c,(F=>this._polymorphicRound(F)),"FlowGraphRoundBlock",F)}_polymorphicRound(F){return O(F,(F=>{var P;return F<0&&null!==(P=this.config)&&void 0!==P&&P.roundHalfAwayFromZero?-Math.round(-F):Math.round(F)}))}}(0,c.f)("FlowGraphRoundBlock",x);class k extends j.e{constructor(F){super(N.c,N.c,(F=>this._polymorphicFraction(F)),"FlowGraphFractBlock",F)}_polymorphicFraction(F){return O(F,(F=>F-Math.floor(F)))}}(0,c.f)("FlowGraphFractBlock",k);class I extends j.e{constructor(F){super(N.c,N.c,(F=>this._polymorphicNeg(F)),"FlowGraphNegationBlock",F)}_polymorphicNeg(F){return O(F,(F=>-F))}}function E(F,P,f){switch((0,Y.i)(F)){case"FlowGraphInteger":return new u.b(f(F.value,P.value));case"Vector2":return new o.Vector2(f(F.x,P.x),f(F.y,P.y));case"tP":return new o.tP(f(F.x,P.x),f(F.y,P.y),f(F.z,P.z));case"Vector4":return new o.Vector4(f(F.x,P.x),f(F.y,P.y),f(F.z,P.z),f(F.w,P.w));case"Quaternion":return new o.Quaternion(f(F.x,P.x),f(F.y,P.y),f(F.z,P.z),f(F.w,P.w));case"Matrix":return o.Matrix.zP(F.m.map(((F,c)=>f(F,P.m[c]))));case"Matrix2D":return new T.e(F.m.map(((F,c)=>f(F,P.m[c]))));case"Matrix3D":return new T.g(F.m.map(((F,c)=>f(F,P.m[c]))));default:return f((0,Y.m)(F),(0,Y.m)(P))}}(0,c.f)("FlowGraphNegationBlock",I);class r extends q.d{constructor(F){super(N.c,N.c,N.c,((F,P)=>this._polymorphicRemainder(F,P)),"FlowGraphModuloBlock",F)}_polymorphicRemainder(F,P){return E(F,P,((F,P)=>F%P))}}(0,c.f)("FlowGraphModuloBlock",r);class n extends q.d{constructor(F){super(N.c,N.c,N.c,((F,P)=>this._polymorphicMin(F,P)),"FlowGraphMinBlock",F)}_polymorphicMin(F,P){return E(F,P,Math.min)}}(0,c.f)("FlowGraphMinBlock",n);class p extends q.d{constructor(F){super(N.c,N.c,N.c,((F,P)=>this._polymorphicMax(F,P)),"FlowGraphMaxBlock",F)}_polymorphicMax(F,P){return E(F,P,Math.max)}}function U(F,P,f){return Math.min(Math.max(F,Math.min(P,f)),Math.max(P,f))}function e(F,P,f,c){switch((0,Y.i)(F)){case"FlowGraphInteger":return new u.b(c(F.value,P.value,f.value));case"Vector2":return new o.Vector2(c(F.x,P.x,f.x),c(F.y,P.y,f.y));case"tP":return new o.tP(c(F.x,P.x,f.x),c(F.y,P.y,f.y),c(F.z,P.z,f.z));case"Vector4":return new o.Vector4(c(F.x,P.x,f.x),c(F.y,P.y,f.y),c(F.z,P.z,f.z),c(F.w,P.w,f.w));case"Quaternion":return new o.Quaternion(c(F.x,P.x,f.x),c(F.y,P.y,f.y),c(F.z,P.z,f.z),c(F.w,P.w,f.w));case"Matrix":return o.Matrix.zP(F.m.map(((F,N)=>c(F,P.m[N],f.m[N]))));case"Matrix2D":return new T.e(F.m.map(((F,N)=>c(F,P.m[N],f.m[N]))));case"Matrix3D":return new T.g(F.m.map(((F,N)=>c(F,P.m[N],f.m[N]))));default:return c((0,Y.m)(F),(0,Y.m)(P),(0,Y.m)(f))}}(0,c.f)("FlowGraphMaxBlock",p);class D extends i{constructor(F){super(N.c,N.c,N.c,N.c,((F,P,f)=>this._polymorphicClamp(F,P,f)),"FlowGraphClampBlock",F)}_polymorphicClamp(F,P,f){return e(F,P,f,U)}}function l(F){return Math.min(Math.max(F,0),1)}(0,c.f)("FlowGraphClampBlock",D);class W extends j.e{constructor(F){super(N.c,N.c,(F=>this._polymorphicSaturate(F)),"FlowGraphSaturateBlock",F)}_polymorphicSaturate(F){return O(F,l)}}function b(F,P,f){return(1-f)*F+f*P}(0,c.f)("FlowGraphSaturateBlock",W);class v extends i{constructor(F){super(N.c,N.c,N.c,N.c,((F,P,f)=>this._polymorphicInterpolate(F,P,f)),"FlowGraphMathInterpolationBlock",F)}_polymorphicInterpolate(F,P,f){return e(F,P,f,b)}}(0,c.f)("FlowGraphMathInterpolationBlock",v);class s extends q.d{constructor(F){super(N.c,N.c,N.g,((F,P)=>this._polymorphicEq(F,P)),"FlowGraphEqualityBlock",F)}_polymorphicEq(F,P){const f=(0,Y.i)(F),c=(0,Y.i)(P);return typeof F===typeof P&&((0,Y.h)(f,c)||(0,Y.f)(f,c)||(0,Y.b)(f,c)?F.equals(P):F===P)}}function X(F,P,f){if((0,Y.n)(F)&&(0,Y.n)(P))return f((0,Y.m)(F),(0,Y.m)(P));throw new Error(`Cannot compare ${F} and ${P}`)}(0,c.f)("FlowGraphEqualityBlock",s);class m extends q.d{constructor(F){super(N.c,N.c,N.g,((F,P)=>this._polymorphicLessThan(F,P)),"FlowGraphLessThanBlock",F)}_polymorphicLessThan(F,P){return X(F,P,((F,P)=>F<P))}}(0,c.f)("FlowGraphLessThanBlock",m);class a extends q.d{constructor(F){super(N.c,N.c,N.g,((F,P)=>this._polymorphicLessThanOrEqual(F,P)),"FlowGraphLessThanOrEqualBlock",F)}_polymorphicLessThanOrEqual(F,P){return X(F,P,((F,P)=>F<=P))}}(0,c.f)("FlowGraphLessThanOrEqualBlock",a);class w extends q.d{constructor(F){super(N.c,N.c,N.g,((F,P)=>this._polymorphicGreaterThan(F,P)),"FlowGraphGreaterThanBlock",F)}_polymorphicGreaterThan(F,P){return X(F,P,((F,P)=>F>P))}}(0,c.f)("FlowGraphGreaterThanBlock",w);class g extends q.d{constructor(F){super(N.c,N.c,N.g,((F,P)=>this._polymorphicGreaterThanOrEqual(F,P)),"FlowGraphGreaterThanOrEqualBlock",F)}_polymorphicGreaterThanOrEqual(F,P){return X(F,P,((F,P)=>F>=P))}}(0,c.f)("FlowGraphGreaterThanOrEqualBlock",g);class G extends j.e{constructor(F){super(N.c,N.g,(F=>this._polymorphicIsNan(F)),"FlowGraphIsNaNBlock",F)}_polymorphicIsNan(F){if((0,Y.n)(F,!0))return isNaN((0,Y.m)(F));throw new Error(`Cannot get NaN of ${F}`)}}(0,c.f)("FlowGraphIsNaNBlock",G);class h extends j.e{constructor(F){super(N.c,N.g,(F=>this._polymorphicIsInf(F)),"FlowGraphIsInfBlock",F)}_polymorphicIsInf(F){if((0,Y.n)(F))return!isFinite((0,Y.m)(F));throw new Error(`Cannot get isInf of ${F}`)}}(0,c.f)("FlowGraphIsInfBlock",h);class S extends j.e{constructor(F){super(N.c,N.c,(F=>this._polymorphicDegToRad(F)),"FlowGraphDegToRadBlock",F)}_degToRad(F){return F*Math.PI/180}_polymorphicDegToRad(F){return O(F,this._degToRad)}}(0,c.f)("FlowGraphDegToRadBlock",S);class FF extends j.e{constructor(F){super(N.c,N.c,(F=>this._polymorphicRadToDeg(F)),"FlowGraphRadToDegBlock",F)}_radToDeg(F){return 180*F/Math.PI}_polymorphicRadToDeg(F){return O(F,this._radToDeg)}}(0,c.f)("FlowGraphRadToDegBlock",FF);class PF extends j.e{constructor(F){super(N.o,N.o,(F=>this._polymorphicSin(F)),"FlowGraphSinBlock",F)}_polymorphicSin(F){return O(F,Math.sin)}}class fF extends j.e{constructor(F){super(N.o,N.o,(F=>this._polymorphicCos(F)),"FlowGraphCosBlock",F)}_polymorphicCos(F){return O(F,Math.cos)}}class cF extends j.e{constructor(F){super(N.o,N.o,(F=>this._polymorphicTan(F)),"FlowGraphTanBlock",F)}_polymorphicTan(F){return O(F,Math.tan)}}class NF extends j.e{constructor(F){super(N.o,N.o,(F=>this._polymorphicAsin(F)),"FlowGraphASinBlock",F)}_polymorphicAsin(F){return O(F,Math.asin)}}(0,c.f)("FlowGraphASinBlock",NF);class qF extends j.e{constructor(F){super(N.o,N.o,(F=>this._polymorphicAcos(F)),"FlowGraphACosBlock",F)}_polymorphicAcos(F){return O(F,Math.acos)}}(0,c.f)("FlowGraphACosBlock",qF);class HF extends j.e{constructor(F){super(N.o,N.o,(F=>this._polymorphicAtan(F)),"FlowGraphATanBlock",F)}_polymorphicAtan(F){return O(F,Math.atan)}}(0,c.f)("FlowGraphATanBlock",HF);class AF extends q.d{constructor(F){super(N.c,N.c,N.c,((F,P)=>this._polymorphicAtan2(F,P)),"FlowGraphATan2Block",F)}_polymorphicAtan2(F,P){return E(F,P,Math.atan2)}}(0,c.f)("FlowGraphATan2Block",AF);class oF extends j.e{constructor(F){super(N.c,N.c,(F=>this._polymorphicSinh(F)),"FlowGraphSinhBlock",F)}_polymorphicSinh(F){return O(F,Math.sinh)}}(0,c.f)("FlowGraphSinhBlock",oF);class jF extends j.e{constructor(F){super(N.c,N.c,(F=>this._polymorphicCosh(F)),"FlowGraphCoshBlock",F)}_polymorphicCosh(F){return O(F,Math.cosh)}}(0,c.f)("FlowGraphCoshBlock",jF);class iF extends j.e{constructor(F){super(N.c,N.c,(F=>this._polymorphicTanh(F)),"FlowGraphTanhBlock",F)}_polymorphicTanh(F){return O(F,Math.tanh)}}(0,c.f)("FlowGraphTanhBlock",iF);class uF extends j.e{constructor(F){super(N.c,N.o,(F=>this._polymorphicAsinh(F)),"FlowGraphASinhBlock",F)}_polymorphicAsinh(F){return O(F,Math.asinh)}}(0,c.f)("FlowGraphASinhBlock",uF);class TF extends j.e{constructor(F){super(N.c,N.o,(F=>this._polymorphicAcosh(F)),"FlowGraphACoshBlock",F)}_polymorphicAcosh(F){return O(F,Math.acosh)}}(0,c.f)("FlowGraphACoshBlock",TF);class YF extends j.e{constructor(F){super(N.c,N.o,(F=>this._polymorphicAtanh(F)),"FlowGraphATanhBlock",F)}_polymorphicAtanh(F){return O(F,Math.atanh)}}(0,c.f)("FlowGraphATanhBlock",YF);class tF extends j.e{constructor(F){super(N.c,N.o,(F=>this._polymorphicExp(F)),"FlowGraphExponentialBlock",F)}_polymorphicExp(F){return O(F,Math.exp)}}(0,c.f)("FlowGraphExponentialBlock",tF);class CF extends j.e{constructor(F){super(N.c,N.o,(F=>this._polymorphicLog(F)),"FlowGraphLogBlock",F)}_polymorphicLog(F){return O(F,Math.log)}}(0,c.f)("FlowGraphLogBlock",CF);class LF extends j.e{constructor(F){super(N.c,N.o,(F=>this._polymorphicLog2(F)),"FlowGraphLog2Block",F)}_polymorphicLog2(F){return O(F,Math.log2)}}(0,c.f)("FlowGraphLog2Block",LF);class JF extends j.e{constructor(F){super(N.c,N.o,(F=>this._polymorphicLog10(F)),"FlowGraphLog10Block",F)}_polymorphicLog10(F){return O(F,Math.log10)}}(0,c.f)("FlowGraphLog10Block",JF);class BF extends j.e{constructor(F){super(N.c,N.o,(F=>this._polymorphicSqrt(F)),"FlowGraphSquareRootBlock",F)}_polymorphicSqrt(F){return O(F,Math.sqrt)}}(0,c.f)("FlowGraphSquareRootBlock",BF);class zF extends j.e{constructor(F){super(N.c,N.o,(F=>this._polymorphicCubeRoot(F)),"FlowGraphCubeRootBlock",F)}_polymorphicCubeRoot(F){return O(F,Math.cbrt)}}(0,c.f)("FlowGraphCubeRootBlock",zF);class ZF extends q.d{constructor(F){super(N.c,N.o,N.o,((F,P)=>this._polymorphicPow(F,P)),"FlowGraphPowerBlock",F)}_polymorphicPow(F,P){return E(F,P,Math.pow)}}(0,c.f)("FlowGraphPowerBlock",ZF);class RF extends j.e{constructor(F){super((0,N.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),(0,N.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),(F=>"boolean"===typeof F?!F:"number"===typeof F?~F:new u.b(~F.value)),"FlowGraphBitwiseNotBlock",F)}}(0,c.f)("FlowGraphBitwiseNotBlock",RF);class yF extends q.d{constructor(F){super((0,N.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),(0,N.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),(0,N.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),((F,P)=>{if("boolean"===typeof F&&"boolean"===typeof P)return F&&P;if("number"===typeof F&&"number"===typeof P)return F&P;if("object"===typeof F&&"object"===typeof P)return new u.b(F.value&P.value);throw new Error(`Cannot perform bitwise AND on ${F} and ${P}`)}),"FlowGraphBitwiseAndBlock",F)}}(0,c.f)("FlowGraphBitwiseAndBlock",yF);class OF extends q.d{constructor(F){super((0,N.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),(0,N.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),(0,N.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),((F,P)=>{if("boolean"===typeof F&&"boolean"===typeof P)return F||P;if("number"===typeof F&&"number"===typeof P)return F|P;if("object"===typeof F&&"object"===typeof P)return new u.b(F.value|P.value);throw new Error(`Cannot perform bitwise OR on ${F} and ${P}`)}),"FlowGraphBitwiseOrBlock",F)}}(0,c.f)("FlowGraphBitwiseOrBlock",OF);class dF extends q.d{constructor(F){super((0,N.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),(0,N.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),(0,N.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),((F,P)=>{if("boolean"===typeof F&&"boolean"===typeof P)return F!==P;if("number"===typeof F&&"number"===typeof P)return F^P;if("object"===typeof F&&"object"===typeof P)return new u.b(F.value^P.value);throw new Error(`Cannot perform bitwise XOR on ${F} and ${P}`)}),"FlowGraphBitwiseXorBlock",F)}}(0,c.f)("FlowGraphBitwiseXorBlock",dF);class MF extends q.d{constructor(F){super(N.h,N.h,N.h,((F,P)=>new u.b(F.value<<P.value)),"FlowGraphBitwiseLeftShiftBlock",F)}}(0,c.f)("FlowGraphBitwiseLeftShiftBlock",MF);class VF extends q.d{constructor(F){super(N.h,N.h,N.h,((F,P)=>new u.b(F.value>>P.value)),"FlowGraphBitwiseRightShiftBlock",F)}}(0,c.f)("FlowGraphBitwiseRightShiftBlock",VF);class QF extends j.e{constructor(F){super(N.h,N.h,(F=>new u.b(Math.clz32(F.value))),"FlowGraphLeadingZerosBlock",F)}}(0,c.f)("FlowGraphLeadingZerosBlock",QF);class KF extends j.e{constructor(F){super(N.h,N.h,(F=>new u.b(F.value?31-Math.clz32(F.value&-F.value):32)),"FlowGraphTrailingZerosBlock",F)}}(0,c.f)("FlowGraphTrailingZerosBlock",KF);class xF extends j.e{constructor(F){super(N.h,N.h,(F=>new u.b(function(F){let P=0;for(;F;)P+=1&F,F>>=1;return P}(F.value))),"FlowGraphOneBitsCounterBlock",F)}}(0,c.f)("FlowGraphOneBitsCounterBlock",xF)},14841:(F,P,f)=>{f.d(P,{d:()=>N});var c=f(14843);class N extends c.c{constructor(F,P,f,c,N,q){super(f,q),this._operation=c,this._className=N,this.a=this.registerDataInput("a",F),this.b=this.registerDataInput("b",P)}_doOperation(F){const P=this.a.getValue(F),f=this.b.getValue(F);return this._operation(P,f)}getClassName(){return this._className}}},14843:(F,P,f)=>{f.d(P,{c:()=>A});var c=f(13287),N=f(13265);const q="cachedOperationValue",H="cachedExecutionId";class A extends c.c{constructor(F,P){super(P),this.value=this.registerDataOutput("value",F),this.isValid=this.registerDataOutput("isValid",N.g)}_updateOutputs(F){const P=F._getExecutionVariable(this,H,-1),f=F._getExecutionVariable(this,q,null);if(void 0!==f&&null!==f&&P===F.executionId)this.isValid.setValue(!0,F),this.value.setValue(f,F);else try{const P=this._doOperation(F);if(void 0===P||null===P)return void this.isValid.setValue(!1,F);F._setExecutionVariable(this,q,P),F._setExecutionVariable(this,H,F.executionId),this.value.setValue(P,F),this.isValid.setValue(!0,F)}catch(c){this.isValid.setValue(!1,F)}}}},14848:(F,P,f)=>{f.d(P,{e:()=>N});var c=f(14843);class N extends c.c{constructor(F,P,f,c,N){super(P,N),this._operation=f,this._className=c,this.a=this.registerDataInput("a",F)}_doOperation(F){return this._operation(this.a.getValue(F))}getClassName(){return this._className}}}}]);