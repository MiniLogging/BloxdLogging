"use strict";(self.ozi0exxand9=self.ozi0exxand9||[]).push([[88],{14563:(f,v,Z)=>{Z.r(v),Z.d(v,{FlowGraphAbsBlock:()=>y,FlowGraphAcosBlock:()=>Jf,FlowGraphAcoshBlock:()=>Wf,FlowGraphAddBlock:()=>b,FlowGraphAsinBlock:()=>hf,FlowGraphAsinhBlock:()=>uf,FlowGraphAtan2Block:()=>ef,FlowGraphAtanBlock:()=>lf,FlowGraphAtanhBlock:()=>af,FlowGraphBitwiseAndBlock:()=>zf,FlowGraphBitwiseLeftShiftBlock:()=>Nf,FlowGraphBitwiseNotBlock:()=>sf,FlowGraphBitwiseOrBlock:()=>Yf,FlowGraphBitwiseRightShiftBlock:()=>If,FlowGraphBitwiseXorBlock:()=>yf,FlowGraphCeilBlock:()=>T,FlowGraphClampBlock:()=>c,FlowGraphCosBlock:()=>Zf,FlowGraphCoshBlock:()=>Hf,FlowGraphCubeRootBlock:()=>Mf,FlowGraphDegToRadBlock:()=>D,FlowGraphDivideBlock:()=>U,FlowGraphEBlock:()=>M,FlowGraphEqualityBlock:()=>o,FlowGraphExpBlock:()=>bf,FlowGraphFloorBlock:()=>I,FlowGraphFractionBlock:()=>P,FlowGraphGreaterThanBlock:()=>x,FlowGraphGreaterThanOrEqualBlock:()=>R,FlowGraphInfBlock:()=>s,FlowGraphIsInfinityBlock:()=>S,FlowGraphIsNanBlock:()=>n,FlowGraphLeadingZerosBlock:()=>Tf,FlowGraphLessThanBlock:()=>Q,FlowGraphLessThanOrEqualBlock:()=>d,FlowGraphLog10Block:()=>Uf,FlowGraphLog2Block:()=>Ff,FlowGraphLogBlock:()=>Xf,FlowGraphMathInterpolationBlock:()=>r,FlowGraphMaxBlock:()=>E,FlowGraphMinBlock:()=>L,FlowGraphModuloBlock:()=>t,FlowGraphMultiplyBlock:()=>F,FlowGraphNaNBlock:()=>z,FlowGraphNegationBlock:()=>g,FlowGraphOneBitsCounterBlock:()=>Pf,FlowGraphPiBlock:()=>A,FlowGraphPowerBlock:()=>Af,FlowGraphRadToDegBlock:()=>ff,FlowGraphRandomBlock:()=>K,FlowGraphRoundBlock:()=>B,FlowGraphSaturateBlock:()=>p,FlowGraphSignBlock:()=>N,FlowGraphSinBlock:()=>vf,FlowGraphSinhBlock:()=>Cf,FlowGraphSquareRootBlock:()=>Kf,FlowGraphSubtractBlock:()=>X,FlowGraphTanBlock:()=>Vf,FlowGraphTanhBlock:()=>Of,FlowGraphTrailingZerosBlock:()=>Bf,FlowGraphTruncBlock:()=>i});var V=Z(11372),h=Z(13123),J=Z(14568),l=Z(14573);class e extends l.b{constructor(f,v,Z,V){super(f,V),this._operation=v,this._className=Z}_doOperation(f){return this._operation(f)}getClassName(){return this._className}}var C=Z(11421),H=Z(14576);class O extends l.b{constructor(f,v,Z,V,h,J,l){super(V,l),this._operation=h,this._className=J,this.a=this.registerDataInput("a",f),this.b=this.registerDataInput("b",v),this.c=this.registerDataInput("c",Z)}_doOperation(f){return this._operation(this.a.getValue(f),this.b.getValue(f),this.c.getValue(f))}getClassName(){return this._className}}var u=Z(13115),W=Z(13130),a=Z(13163);class b extends J.c{constructor(f){super((0,h.S)(null===f||void 0===f?void 0:f.type),(0,h.S)(null===f||void 0===f?void 0:f.type),(0,h.S)(null===f||void 0===f?void 0:f.type),((f,v)=>this._polymorphicAdd(f,v)),"FlowGraphAddBlock",f)}_polymorphicAdd(f,v){const Z=(0,a.j)(f),V=(0,a.j)(v);if((0,a.i)(Z,V)||(0,a.f)(Z,V)||(0,a.d)(Z,V))return f.add(v);if("Quaternion"===Z||"Vector4"===V)return new C.Vector4(f.x,f.y,f.z,f.w).addInPlace(v);if("Vector4"===Z||"Quaternion"===V)return f.add(v);var h;if(null!==(h=this.config)&&void 0!==h&&h.preventIntegerFloatArithmetic&&typeof f!==typeof v)throw new Error("Cannot add different types of numbers.");return(0,a.n)(f)+(0,a.n)(v)}}(0,V.h)("FlowGraphAddBlock",b);class X extends J.c{constructor(f){super((0,h.S)(null===f||void 0===f?void 0:f.type),(0,h.S)(null===f||void 0===f?void 0:f.type),(0,h.S)(null===f||void 0===f?void 0:f.type),((f,v)=>this._polymorphicSubtract(f,v)),"FlowGraphSubtractBlock",f)}_polymorphicSubtract(f,v){const Z=(0,a.j)(f),V=(0,a.j)(v);if((0,a.i)(Z,V)||(0,a.d)(Z,V)||(0,a.f)(Z,V))return f.Fv(v);if("Quaternion"===Z||"Vector4"===V)return new C.Vector4(f.x,f.y,f.z,f.w).hu(v);if("Vector4"===Z||"Quaternion"===V)return f.Fv(v);var h;if(null!==(h=this.config)&&void 0!==h&&h.preventIntegerFloatArithmetic&&typeof f!==typeof v)throw new Error("Cannot add different types of numbers.");return(0,a.n)(f)-(0,a.n)(v)}}(0,V.h)("FlowGraphSubtractBlock",X);class F extends J.c{constructor(f){super((0,h.S)(null===f||void 0===f?void 0:f.type),(0,h.S)(null===f||void 0===f?void 0:f.type),(0,h.S)(null===f||void 0===f?void 0:f.type),((f,v)=>this._polymorphicMultiply(f,v)),"FlowGraphMultiplyBlock",f)}_polymorphicMultiply(f,v){const Z=(0,a.j)(f),V=(0,a.j)(v);if((0,a.i)(Z,V)||(0,a.d)(Z,V))return f.multiply(v);if("Quaternion"===Z||"Vector4"===V)return new C.Vector4(f.x,f.y,f.z,f.w).multiplyInPlace(v);if("Vector4"===Z||"Quaternion"===V)return f.multiply(v);if((0,a.f)(Z,V)){var h;if(null!==(h=this.config)&&void 0!==h&&h.useMatrixPerComponent){const V=f.m;for(let f=0;f<V.length;f++)V[f]*=v.m[f];return"Matrix2D"===Z?new W.e(V):"Matrix3D"===Z?new W.h(V):C.Matrix.Av(V)}return v.multiply(f)}var J;if(null!==(J=this.config)&&void 0!==J&&J.preventIntegerFloatArithmetic&&typeof f!==typeof v)throw new Error("Cannot add different types of numbers.");return(0,a.n)(f)*(0,a.n)(v)}}(0,V.h)("FlowGraphMultiplyBlock",F);class U extends J.c{constructor(f){super((0,h.S)(null===f||void 0===f?void 0:f.type),(0,h.S)(null===f||void 0===f?void 0:f.type),(0,h.S)(null===f||void 0===f?void 0:f.type),((f,v)=>this._polymorphicDivide(f,v)),"FlowGraphDivideBlock",f)}_polymorphicDivide(f,v){const Z=(0,a.j)(f),V=(0,a.j)(v);if((0,a.i)(Z,V)||(0,a.d)(Z,V))return f.divide(v);if("Quaternion"===Z||"Quaternion"===V){const Z=f.clone();return Z.x/=v.x,Z.y/=v.y,Z.z/=v.z,Z.w/=v.w,Z}if("Quaternion"===Z||"Vector4"===V)return new C.Vector4(f.x,f.y,f.z,f.w).divideInPlace(v);if("Vector4"===Z||"Quaternion"===V)return f.divide(v);if((0,a.f)(Z,V)){var h;if(null!==(h=this.config)&&void 0!==h&&h.useMatrixPerComponent){const V=f.m;for(let f=0;f<V.length;f++)V[f]/=v.m[f];return"Matrix2D"===Z?new W.e(V):"Matrix3D"===Z?new W.h(V):C.Matrix.Av(V)}return f.divide(v)}var J;if(null!==(J=this.config)&&void 0!==J&&J.preventIntegerFloatArithmetic&&typeof f!==typeof v)throw new Error("Cannot add different types of numbers.");return(0,a.n)(f)/(0,a.n)(v)}}(0,V.h)("FlowGraphDivideBlock",U);class K extends e{constructor(f){super(h.v,(f=>this._random(f)),"FlowGraphRandomBlock",f),this.min=this.registerDataInput("min",h.v,(null===f||void 0===f?void 0:f.min)??0),this.max=this.registerDataInput("max",h.v,(null===f||void 0===f?void 0:f.max)??1),null!==f&&void 0!==f&&f.seed&&(this._seed=f.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const f=1e4*Math.sin(this._seed++);return f-Math.floor(f)}return Math.random()}_random(f){const v=this.min.getValue(f),Z=this.max.getValue(f);return this._getRandomValue()*(Z-v)+v}}(0,V.h)("FlowGraphRandomBlock",K);class M extends e{constructor(f){super(h.v,(()=>Math.E),"FlowGraphEBlock",f)}}(0,V.h)("FlowGraphEBlock",M);class A extends e{constructor(f){super(h.v,(()=>Math.PI),"FlowGraphPIBlock",f)}}(0,V.h)("FlowGraphPIBlock",A);class s extends e{constructor(f){super(h.v,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",f)}}(0,V.h)("FlowGraphInfBlock",s);class z extends e{constructor(f){super(h.v,(()=>Number.NaN),"FlowGraphNaNBlock",f)}}function Y(f,v){switch((0,a.j)(f)){case"FlowGraphInteger":return new u.b(v(f.value));case"Vector2":return new C.Vector2(v(f.x),v(f.y));case"Xv":return new C.Xv(v(f.x),v(f.y),v(f.z));case"Vector4":return new C.Vector4(v(f.x),v(f.y),v(f.z),v(f.w));case"Quaternion":return new C.Quaternion(v(f.x),v(f.y),v(f.z),v(f.w));case"Matrix":return C.Matrix.Av(f.m.map(v));case"Matrix2D":return new W.e(f.m.map(v));case"Matrix3D":return new W.h(f.m.map(v));default:return v(f)}}(0,V.h)("FlowGraphNaNBlock",z);class y extends H.b{constructor(f){super(h.v,h.v,(f=>this._polymorphicAbs(f)),"FlowGraphAbsBlock",f)}_polymorphicAbs(f){return Y(f,Math.abs)}}(0,V.h)("FlowGraphAbsBlock",y);class N extends H.b{constructor(f){super(h.v,h.v,(f=>this._polymorphicSign(f)),"FlowGraphSignBlock",f)}_polymorphicSign(f){return Y(f,Math.sign)}}(0,V.h)("FlowGraphSignBlock",N);class i extends H.b{constructor(f){super(h.v,h.v,(f=>this._polymorphicTrunc(f)),"FlowGraphTruncBlock",f)}_polymorphicTrunc(f){return Y(f,Math.trunc)}}(0,V.h)("FlowGraphTruncBlock",i);class I extends H.b{constructor(f){super(h.v,h.v,(f=>this._polymorphicFloor(f)),"FlowGraphFloorBlock",f)}_polymorphicFloor(f){return Y(f,Math.floor)}}(0,V.h)("FlowGraphFloorBlock",I);class T extends H.b{constructor(f){super(h.d,h.d,(f=>this._polymorphicCeiling(f)),"FlowGraphCeilBlock",f)}_polymorphicCeiling(f){return Y(f,Math.ceil)}}(0,V.h)("FlowGraphCeilBlock",T);class B extends H.b{constructor(f){super(h.d,h.d,(f=>this._polymorphicRound(f)),"FlowGraphRoundBlock",f)}_polymorphicRound(f){return Y(f,(f=>{var v;return f<0&&null!==(v=this.config)&&void 0!==v&&v.roundHalfAwayFromZero?-Math.round(-f):Math.round(f)}))}}(0,V.h)("FlowGraphRoundBlock",B);class P extends H.b{constructor(f){super(h.d,h.d,(f=>this._polymorphicFraction(f)),"FlowGraphFractBlock",f)}_polymorphicFraction(f){return Y(f,(f=>f-Math.floor(f)))}}(0,V.h)("FlowGraphFractBlock",P);class g extends H.b{constructor(f){super(h.d,h.d,(f=>this._polymorphicNeg(f)),"FlowGraphNegationBlock",f)}_polymorphicNeg(f){return Y(f,(f=>-f))}}function w(f,v,Z){switch((0,a.j)(f)){case"FlowGraphInteger":return new u.b(Z(f.value,v.value));case"Vector2":return new C.Vector2(Z(f.x,v.x),Z(f.y,v.y));case"Xv":return new C.Xv(Z(f.x,v.x),Z(f.y,v.y),Z(f.z,v.z));case"Vector4":return new C.Vector4(Z(f.x,v.x),Z(f.y,v.y),Z(f.z,v.z),Z(f.w,v.w));case"Quaternion":return new C.Quaternion(Z(f.x,v.x),Z(f.y,v.y),Z(f.z,v.z),Z(f.w,v.w));case"Matrix":return C.Matrix.Av(f.m.map(((f,V)=>Z(f,v.m[V]))));case"Matrix2D":return new W.e(f.m.map(((f,V)=>Z(f,v.m[V]))));case"Matrix3D":return new W.h(f.m.map(((f,V)=>Z(f,v.m[V]))));default:return Z((0,a.n)(f),(0,a.n)(v))}}(0,V.h)("FlowGraphNegationBlock",g);class t extends J.c{constructor(f){super(h.d,h.d,h.d,((f,v)=>this._polymorphicRemainder(f,v)),"FlowGraphModuloBlock",f)}_polymorphicRemainder(f,v){return w(f,v,((f,v)=>f%v))}}(0,V.h)("FlowGraphModuloBlock",t);class L extends J.c{constructor(f){super(h.d,h.d,h.d,((f,v)=>this._polymorphicMin(f,v)),"FlowGraphMinBlock",f)}_polymorphicMin(f,v){return w(f,v,Math.min)}}(0,V.h)("FlowGraphMinBlock",L);class E extends J.c{constructor(f){super(h.d,h.d,h.d,((f,v)=>this._polymorphicMax(f,v)),"FlowGraphMaxBlock",f)}_polymorphicMax(f,v){return w(f,v,Math.max)}}function j(f,v,Z){return Math.min(Math.max(f,Math.min(v,Z)),Math.max(v,Z))}function q(f,v,Z,V){switch((0,a.j)(f)){case"FlowGraphInteger":return new u.b(V(f.value,v.value,Z.value));case"Vector2":return new C.Vector2(V(f.x,v.x,Z.x),V(f.y,v.y,Z.y));case"Xv":return new C.Xv(V(f.x,v.x,Z.x),V(f.y,v.y,Z.y),V(f.z,v.z,Z.z));case"Vector4":return new C.Vector4(V(f.x,v.x,Z.x),V(f.y,v.y,Z.y),V(f.z,v.z,Z.z),V(f.w,v.w,Z.w));case"Quaternion":return new C.Quaternion(V(f.x,v.x,Z.x),V(f.y,v.y,Z.y),V(f.z,v.z,Z.z),V(f.w,v.w,Z.w));case"Matrix":return C.Matrix.Av(f.m.map(((f,h)=>V(f,v.m[h],Z.m[h]))));case"Matrix2D":return new W.e(f.m.map(((f,h)=>V(f,v.m[h],Z.m[h]))));case"Matrix3D":return new W.h(f.m.map(((f,h)=>V(f,v.m[h],Z.m[h]))));default:return V((0,a.n)(f),(0,a.n)(v),(0,a.n)(Z))}}(0,V.h)("FlowGraphMaxBlock",E);class c extends O{constructor(f){super(h.d,h.d,h.d,h.d,((f,v,Z)=>this._polymorphicClamp(f,v,Z)),"FlowGraphClampBlock",f)}_polymorphicClamp(f,v,Z){return q(f,v,Z,j)}}function m(f){return Math.min(Math.max(f,0),1)}(0,V.h)("FlowGraphClampBlock",c);class p extends H.b{constructor(f){super(h.d,h.d,(f=>this._polymorphicSaturate(f)),"FlowGraphSaturateBlock",f)}_polymorphicSaturate(f){return Y(f,m)}}function k(f,v,Z){return(1-Z)*f+Z*v}(0,V.h)("FlowGraphSaturateBlock",p);class r extends O{constructor(f){super(h.d,h.d,h.d,h.d,((f,v,Z)=>this._polymorphicInterpolate(f,v,Z)),"FlowGraphMathInterpolationBlock",f)}_polymorphicInterpolate(f,v,Z){return q(f,v,Z,k)}}(0,V.h)("FlowGraphMathInterpolationBlock",r);class o extends J.c{constructor(f){super(h.d,h.d,h.g,((f,v)=>this._polymorphicEq(f,v)),"FlowGraphEqualityBlock",f)}_polymorphicEq(f,v){const Z=(0,a.j)(f),V=(0,a.j)(v);return typeof f===typeof v&&((0,a.i)(Z,V)||(0,a.f)(Z,V)||(0,a.d)(Z,V)?f.equals(v):f===v)}}function G(f,v,Z){if((0,a.p)(f)&&(0,a.p)(v))return Z((0,a.n)(f),(0,a.n)(v));throw new Error(`Cannot compare ${f} and ${v}`)}(0,V.h)("FlowGraphEqualityBlock",o);class Q extends J.c{constructor(f){super(h.d,h.d,h.g,((f,v)=>this._polymorphicLessThan(f,v)),"FlowGraphLessThanBlock",f)}_polymorphicLessThan(f,v){return G(f,v,((f,v)=>f<v))}}(0,V.h)("FlowGraphLessThanBlock",Q);class d extends J.c{constructor(f){super(h.d,h.d,h.g,((f,v)=>this._polymorphicLessThanOrEqual(f,v)),"FlowGraphLessThanOrEqualBlock",f)}_polymorphicLessThanOrEqual(f,v){return G(f,v,((f,v)=>f<=v))}}(0,V.h)("FlowGraphLessThanOrEqualBlock",d);class x extends J.c{constructor(f){super(h.d,h.d,h.g,((f,v)=>this._polymorphicGreaterThan(f,v)),"FlowGraphGreaterThanBlock",f)}_polymorphicGreaterThan(f,v){return G(f,v,((f,v)=>f>v))}}(0,V.h)("FlowGraphGreaterThanBlock",x);class R extends J.c{constructor(f){super(h.d,h.d,h.g,((f,v)=>this._polymorphicGreaterThanOrEqual(f,v)),"FlowGraphGreaterThanOrEqualBlock",f)}_polymorphicGreaterThanOrEqual(f,v){return G(f,v,((f,v)=>f>=v))}}(0,V.h)("FlowGraphGreaterThanOrEqualBlock",R);class n extends H.b{constructor(f){super(h.d,h.g,(f=>this._polymorphicIsNan(f)),"FlowGraphIsNaNBlock",f)}_polymorphicIsNan(f){if((0,a.p)(f,!0))return isNaN((0,a.n)(f));throw new Error(`Cannot get NaN of ${f}`)}}(0,V.h)("FlowGraphIsNaNBlock",n);class S extends H.b{constructor(f){super(h.d,h.g,(f=>this._polymorphicIsInf(f)),"FlowGraphIsInfBlock",f)}_polymorphicIsInf(f){if((0,a.p)(f))return!isFinite((0,a.n)(f));throw new Error(`Cannot get isInf of ${f}`)}}(0,V.h)("FlowGraphIsInfBlock",S);class D extends H.b{constructor(f){super(h.d,h.d,(f=>this._polymorphicDegToRad(f)),"FlowGraphDegToRadBlock",f)}_degToRad(f){return f*Math.PI/180}_polymorphicDegToRad(f){return Y(f,this._degToRad)}}(0,V.h)("FlowGraphDegToRadBlock",D);class ff extends H.b{constructor(f){super(h.d,h.d,(f=>this._polymorphicRadToDeg(f)),"FlowGraphRadToDegBlock",f)}_radToDeg(f){return 180*f/Math.PI}_polymorphicRadToDeg(f){return Y(f,this._radToDeg)}}(0,V.h)("FlowGraphRadToDegBlock",ff);class vf extends H.b{constructor(f){super(h.v,h.v,(f=>this._polymorphicSin(f)),"FlowGraphSinBlock",f)}_polymorphicSin(f){return Y(f,Math.sin)}}class Zf extends H.b{constructor(f){super(h.v,h.v,(f=>this._polymorphicCos(f)),"FlowGraphCosBlock",f)}_polymorphicCos(f){return Y(f,Math.cos)}}class Vf extends H.b{constructor(f){super(h.v,h.v,(f=>this._polymorphicTan(f)),"FlowGraphTanBlock",f)}_polymorphicTan(f){return Y(f,Math.tan)}}class hf extends H.b{constructor(f){super(h.v,h.v,(f=>this._polymorphicAsin(f)),"FlowGraphASinBlock",f)}_polymorphicAsin(f){return Y(f,Math.asin)}}(0,V.h)("FlowGraphASinBlock",hf);class Jf extends H.b{constructor(f){super(h.v,h.v,(f=>this._polymorphicAcos(f)),"FlowGraphACosBlock",f)}_polymorphicAcos(f){return Y(f,Math.acos)}}(0,V.h)("FlowGraphACosBlock",Jf);class lf extends H.b{constructor(f){super(h.v,h.v,(f=>this._polymorphicAtan(f)),"FlowGraphATanBlock",f)}_polymorphicAtan(f){return Y(f,Math.atan)}}(0,V.h)("FlowGraphATanBlock",lf);class ef extends J.c{constructor(f){super(h.d,h.d,h.d,((f,v)=>this._polymorphicAtan2(f,v)),"FlowGraphATan2Block",f)}_polymorphicAtan2(f,v){return w(f,v,Math.atan2)}}(0,V.h)("FlowGraphATan2Block",ef);class Cf extends H.b{constructor(f){super(h.d,h.d,(f=>this._polymorphicSinh(f)),"FlowGraphSinhBlock",f)}_polymorphicSinh(f){return Y(f,Math.sinh)}}(0,V.h)("FlowGraphSinhBlock",Cf);class Hf extends H.b{constructor(f){super(h.d,h.d,(f=>this._polymorphicCosh(f)),"FlowGraphCoshBlock",f)}_polymorphicCosh(f){return Y(f,Math.cosh)}}(0,V.h)("FlowGraphCoshBlock",Hf);class Of extends H.b{constructor(f){super(h.d,h.d,(f=>this._polymorphicTanh(f)),"FlowGraphTanhBlock",f)}_polymorphicTanh(f){return Y(f,Math.tanh)}}(0,V.h)("FlowGraphTanhBlock",Of);class uf extends H.b{constructor(f){super(h.d,h.v,(f=>this._polymorphicAsinh(f)),"FlowGraphASinhBlock",f)}_polymorphicAsinh(f){return Y(f,Math.asinh)}}(0,V.h)("FlowGraphASinhBlock",uf);class Wf extends H.b{constructor(f){super(h.d,h.v,(f=>this._polymorphicAcosh(f)),"FlowGraphACoshBlock",f)}_polymorphicAcosh(f){return Y(f,Math.acosh)}}(0,V.h)("FlowGraphACoshBlock",Wf);class af extends H.b{constructor(f){super(h.d,h.v,(f=>this._polymorphicAtanh(f)),"FlowGraphATanhBlock",f)}_polymorphicAtanh(f){return Y(f,Math.atanh)}}(0,V.h)("FlowGraphATanhBlock",af);class bf extends H.b{constructor(f){super(h.d,h.v,(f=>this._polymorphicExp(f)),"FlowGraphExponentialBlock",f)}_polymorphicExp(f){return Y(f,Math.exp)}}(0,V.h)("FlowGraphExponentialBlock",bf);class Xf extends H.b{constructor(f){super(h.d,h.v,(f=>this._polymorphicLog(f)),"FlowGraphLogBlock",f)}_polymorphicLog(f){return Y(f,Math.log)}}(0,V.h)("FlowGraphLogBlock",Xf);class Ff extends H.b{constructor(f){super(h.d,h.v,(f=>this._polymorphicLog2(f)),"FlowGraphLog2Block",f)}_polymorphicLog2(f){return Y(f,Math.log2)}}(0,V.h)("FlowGraphLog2Block",Ff);class Uf extends H.b{constructor(f){super(h.d,h.v,(f=>this._polymorphicLog10(f)),"FlowGraphLog10Block",f)}_polymorphicLog10(f){return Y(f,Math.log10)}}(0,V.h)("FlowGraphLog10Block",Uf);class Kf extends H.b{constructor(f){super(h.d,h.v,(f=>this._polymorphicSqrt(f)),"FlowGraphSquareRootBlock",f)}_polymorphicSqrt(f){return Y(f,Math.sqrt)}}(0,V.h)("FlowGraphSquareRootBlock",Kf);class Mf extends H.b{constructor(f){super(h.d,h.v,(f=>this._polymorphicCubeRoot(f)),"FlowGraphCubeRootBlock",f)}_polymorphicCubeRoot(f){return Y(f,Math.cbrt)}}(0,V.h)("FlowGraphCubeRootBlock",Mf);class Af extends J.c{constructor(f){super(h.d,h.v,h.v,((f,v)=>this._polymorphicPow(f,v)),"FlowGraphPowerBlock",f)}_polymorphicPow(f,v){return w(f,v,Math.pow)}}(0,V.h)("FlowGraphPowerBlock",Af);class sf extends H.b{constructor(f){super((0,h.S)((null===f||void 0===f?void 0:f.valueType)||"FlowGraphInteger"),(0,h.S)((null===f||void 0===f?void 0:f.valueType)||"FlowGraphInteger"),(f=>"boolean"===typeof f?!f:"number"===typeof f?~f:new u.b(~f.value)),"FlowGraphBitwiseNotBlock",f)}}(0,V.h)("FlowGraphBitwiseNotBlock",sf);class zf extends J.c{constructor(f){super((0,h.S)((null===f||void 0===f?void 0:f.valueType)||"FlowGraphInteger"),(0,h.S)((null===f||void 0===f?void 0:f.valueType)||"FlowGraphInteger"),(0,h.S)((null===f||void 0===f?void 0:f.valueType)||"FlowGraphInteger"),((f,v)=>{if("boolean"===typeof f&&"boolean"===typeof v)return f&&v;if("number"===typeof f&&"number"===typeof v)return f&v;if("object"===typeof f&&"object"===typeof v)return new u.b(f.value&v.value);throw new Error(`Cannot perform bitwise AND on ${f} and ${v}`)}),"FlowGraphBitwiseAndBlock",f)}}(0,V.h)("FlowGraphBitwiseAndBlock",zf);class Yf extends J.c{constructor(f){super((0,h.S)((null===f||void 0===f?void 0:f.valueType)||"FlowGraphInteger"),(0,h.S)((null===f||void 0===f?void 0:f.valueType)||"FlowGraphInteger"),(0,h.S)((null===f||void 0===f?void 0:f.valueType)||"FlowGraphInteger"),((f,v)=>{if("boolean"===typeof f&&"boolean"===typeof v)return f||v;if("number"===typeof f&&"number"===typeof v)return f|v;if("object"===typeof f&&"object"===typeof v)return new u.b(f.value|v.value);throw new Error(`Cannot perform bitwise OR on ${f} and ${v}`)}),"FlowGraphBitwiseOrBlock",f)}}(0,V.h)("FlowGraphBitwiseOrBlock",Yf);class yf extends J.c{constructor(f){super((0,h.S)((null===f||void 0===f?void 0:f.valueType)||"FlowGraphInteger"),(0,h.S)((null===f||void 0===f?void 0:f.valueType)||"FlowGraphInteger"),(0,h.S)((null===f||void 0===f?void 0:f.valueType)||"FlowGraphInteger"),((f,v)=>{if("boolean"===typeof f&&"boolean"===typeof v)return f!==v;if("number"===typeof f&&"number"===typeof v)return f^v;if("object"===typeof f&&"object"===typeof v)return new u.b(f.value^v.value);throw new Error(`Cannot perform bitwise XOR on ${f} and ${v}`)}),"FlowGraphBitwiseXorBlock",f)}}(0,V.h)("FlowGraphBitwiseXorBlock",yf);class Nf extends J.c{constructor(f){super(h.k,h.k,h.k,((f,v)=>new u.b(f.value<<v.value)),"FlowGraphBitwiseLeftShiftBlock",f)}}(0,V.h)("FlowGraphBitwiseLeftShiftBlock",Nf);class If extends J.c{constructor(f){super(h.k,h.k,h.k,((f,v)=>new u.b(f.value>>v.value)),"FlowGraphBitwiseRightShiftBlock",f)}}(0,V.h)("FlowGraphBitwiseRightShiftBlock",If);class Tf extends H.b{constructor(f){super(h.k,h.k,(f=>new u.b(Math.clz32(f.value))),"FlowGraphLeadingZerosBlock",f)}}(0,V.h)("FlowGraphLeadingZerosBlock",Tf);class Bf extends H.b{constructor(f){super(h.k,h.k,(f=>new u.b(f.value?31-Math.clz32(f.value&-f.value):32)),"FlowGraphTrailingZerosBlock",f)}}(0,V.h)("FlowGraphTrailingZerosBlock",Bf);class Pf extends H.b{constructor(f){super(h.k,h.k,(f=>new u.b(function(f){let v=0;for(;f;)v+=1&f,f>>=1;return v}(f.value))),"FlowGraphOneBitsCounterBlock",f)}}(0,V.h)("FlowGraphOneBitsCounterBlock",Pf)},14568:(f,v,Z)=>{Z.d(v,{c:()=>h});var V=Z(14573);class h extends V.b{constructor(f,v,Z,V,h,J){super(Z,J),this._operation=V,this._className=h,this.a=this.registerDataInput("a",f),this.b=this.registerDataInput("b",v)}_doOperation(f){const v=this.a.getValue(f),Z=this.b.getValue(f);return this._operation(v,Z)}getClassName(){return this._className}}},14573:(f,v,Z)=>{Z.d(v,{b:()=>e});var V=Z(13149),h=Z(13123);const J="cachedOperationValue",l="cachedExecutionId";class e extends V.c{constructor(f,v){super(v),this.value=this.registerDataOutput("value",f),this.isValid=this.registerDataOutput("isValid",h.g)}_updateOutputs(f){const v=f._getExecutionVariable(this,l,-1),Z=f._getExecutionVariable(this,J,null);if(void 0!==Z&&null!==Z&&v===f.executionId)this.isValid.setValue(!0,f),this.value.setValue(Z,f);else try{const v=this._doOperation(f);if(void 0===v||null===v)return void this.isValid.setValue(!1,f);f._setExecutionVariable(this,J,v),f._setExecutionVariable(this,l,f.executionId),this.value.setValue(v,f),this.isValid.setValue(!0,f)}catch(V){this.isValid.setValue(!1,f)}}}},14576:(f,v,Z)=>{Z.d(v,{b:()=>h});var V=Z(14573);class h extends V.b{constructor(f,v,Z,V,h){super(v,h),this._operation=Z,this._className=V,this.a=this.registerDataInput("a",f)}_doOperation(f){return this._operation(this.a.getValue(f))}getClassName(){return this._className}}}}]);