"use strict";(self.pp3k1ov3ibi=self.pp3k1ov3ibi||[]).push([[88],{15598:(M,Z,P)=>{P.r(Z),P.d(Z,{FlowGraphAbsBlock:()=>l,FlowGraphAcosBlock:()=>wM,FlowGraphAcoshBlock:()=>HM,FlowGraphAddBlock:()=>B,FlowGraphAsinBlock:()=>cM,FlowGraphAsinhBlock:()=>OM,FlowGraphAtan2Block:()=>GM,FlowGraphAtanBlock:()=>vM,FlowGraphAtanhBlock:()=>jM,FlowGraphBitwiseAndBlock:()=>FM,FlowGraphBitwiseLeftShiftBlock:()=>hM,FlowGraphBitwiseNotBlock:()=>tM,FlowGraphBitwiseOrBlock:()=>DM,FlowGraphBitwiseRightShiftBlock:()=>QM,FlowGraphBitwiseXorBlock:()=>lM,FlowGraphCeilBlock:()=>s,FlowGraphClampBlock:()=>e,FlowGraphCosBlock:()=>PM,FlowGraphCoshBlock:()=>KM,FlowGraphCubeRootBlock:()=>NM,FlowGraphDegToRadBlock:()=>g,FlowGraphDivideBlock:()=>L,FlowGraphEBlock:()=>N,FlowGraphEqualityBlock:()=>Y,FlowGraphExpBlock:()=>BM,FlowGraphFloorBlock:()=>I,FlowGraphFractionBlock:()=>R,FlowGraphGreaterThanBlock:()=>p,FlowGraphGreaterThanOrEqualBlock:()=>S,FlowGraphInfBlock:()=>t,FlowGraphIsInfinityBlock:()=>V,FlowGraphIsNanBlock:()=>X,FlowGraphLeadingZerosBlock:()=>IM,FlowGraphLessThanBlock:()=>i,FlowGraphLessThanOrEqualBlock:()=>T,FlowGraphLog10Block:()=>LM,FlowGraphLog2Block:()=>nM,FlowGraphLogBlock:()=>UM,FlowGraphMathInterpolationBlock:()=>f,FlowGraphMaxBlock:()=>E,FlowGraphMinBlock:()=>o,FlowGraphModuloBlock:()=>A,FlowGraphMultiplyBlock:()=>n,FlowGraphNaNBlock:()=>F,FlowGraphNegationBlock:()=>W,FlowGraphOneBitsCounterBlock:()=>CM,FlowGraphPiBlock:()=>J,FlowGraphPowerBlock:()=>JM,FlowGraphRadToDegBlock:()=>MM,FlowGraphRandomBlock:()=>u,FlowGraphRoundBlock:()=>C,FlowGraphSaturateBlock:()=>a,FlowGraphSignBlock:()=>h,FlowGraphSinBlock:()=>ZM,FlowGraphSinhBlock:()=>mZ,FlowGraphSquareRootBlock:()=>uM,FlowGraphSubtractBlock:()=>U,FlowGraphTanBlock:()=>xM,FlowGraphTanhBlock:()=>dM,FlowGraphTrailingZerosBlock:()=>sM,FlowGraphTruncBlock:()=>Q});var x=P(12317),c=P(14073),w=P(15602),v=P(15610);class G extends v.e{constructor(M,Z,P,x){super(M,x),this._operation=Z,this._className=P}_doOperation(M){return this._operation(M)}getClassName(){return this._className}}var mM=P(12373),K=P(15612);class d extends v.e{constructor(M,Z,P,x,c,w,v){super(x,v),this._operation=c,this._className=w,this.a=this.registerDataInput("a",M),this.b=this.registerDataInput("b",Z),this.c=this.registerDataInput("c",P)}_doOperation(M){return this._operation(this.a.getValue(M),this.b.getValue(M),this.c.getValue(M))}getClassName(){return this._className}}var O=P(14067),H=P(14078),j=P(14105);class B extends w.c{constructor(M){super((0,c.R)(null===M||void 0===M?void 0:M.type),(0,c.R)(null===M||void 0===M?void 0:M.type),(0,c.R)(null===M||void 0===M?void 0:M.type),((M,Z)=>this._polymorphicAdd(M,Z)),"FlowGraphAddBlock",M)}_polymorphicAdd(M,Z){const P=(0,j.l)(M),x=(0,j.l)(Z);if((0,j.k)(P,x)||(0,j.g)(P,x)||(0,j.d)(P,x))return M.add(Z);if("Quaternion"===P||"Vector4"===x)return new mM.Vector4(M.x,M.y,M.z,M.w).addInPlace(Z);if("Vector4"===P||"Quaternion"===x)return M.add(Z);var c;if(null!==(c=this.config)&&void 0!==c&&c.preventIntegerFloatArithmetic&&typeof M!==typeof Z)throw new Error("Cannot add different types of numbers.");return(0,j.q)(M)+(0,j.q)(Z)}}(0,x.g)("FlowGraphAddBlock",B);class U extends w.c{constructor(M){super((0,c.R)(null===M||void 0===M?void 0:M.type),(0,c.R)(null===M||void 0===M?void 0:M.type),(0,c.R)(null===M||void 0===M?void 0:M.type),((M,Z)=>this._polymorphicSubtract(M,Z)),"FlowGraphSubtractBlock",M)}_polymorphicSubtract(M,Z){const P=(0,j.l)(M),x=(0,j.l)(Z);if((0,j.k)(P,x)||(0,j.d)(P,x)||(0,j.g)(P,x))return M.UZ(Z);if("Quaternion"===P||"Vector4"===x)return new mM.Vector4(M.x,M.y,M.z,M.w).MH(Z);if("Vector4"===P||"Quaternion"===x)return M.UZ(Z);var c;if(null!==(c=this.config)&&void 0!==c&&c.preventIntegerFloatArithmetic&&typeof M!==typeof Z)throw new Error("Cannot add different types of numbers.");return(0,j.q)(M)-(0,j.q)(Z)}}(0,x.g)("FlowGraphSubtractBlock",U);class n extends w.c{constructor(M){super((0,c.R)(null===M||void 0===M?void 0:M.type),(0,c.R)(null===M||void 0===M?void 0:M.type),(0,c.R)(null===M||void 0===M?void 0:M.type),((M,Z)=>this._polymorphicMultiply(M,Z)),"FlowGraphMultiplyBlock",M)}_polymorphicMultiply(M,Z){const P=(0,j.l)(M),x=(0,j.l)(Z);if((0,j.k)(P,x)||(0,j.d)(P,x))return M.multiply(Z);if("Quaternion"===P||"Vector4"===x)return new mM.Vector4(M.x,M.y,M.z,M.w).multiplyInPlace(Z);if("Vector4"===P||"Quaternion"===x)return M.multiply(Z);if((0,j.g)(P,x)){var c;if(null!==(c=this.config)&&void 0!==c&&c.useMatrixPerComponent){const x=M.m;for(let M=0;M<x.length;M++)x[M]*=Z.m[M];return"Matrix2D"===P?new H.d(x):"Matrix3D"===P?new H.h(x):mM.Matrix.NZ(x)}return Z.multiply(M)}var w;if(null!==(w=this.config)&&void 0!==w&&w.preventIntegerFloatArithmetic&&typeof M!==typeof Z)throw new Error("Cannot add different types of numbers.");return(0,j.q)(M)*(0,j.q)(Z)}}(0,x.g)("FlowGraphMultiplyBlock",n);class L extends w.c{constructor(M){super((0,c.R)(null===M||void 0===M?void 0:M.type),(0,c.R)(null===M||void 0===M?void 0:M.type),(0,c.R)(null===M||void 0===M?void 0:M.type),((M,Z)=>this._polymorphicDivide(M,Z)),"FlowGraphDivideBlock",M)}_polymorphicDivide(M,Z){const P=(0,j.l)(M),x=(0,j.l)(Z);if((0,j.k)(P,x)||(0,j.d)(P,x))return M.divide(Z);if("Quaternion"===P||"Quaternion"===x){const P=M.clone();return P.x/=Z.x,P.y/=Z.y,P.z/=Z.z,P.w/=Z.w,P}if("Quaternion"===P||"Vector4"===x)return new mM.Vector4(M.x,M.y,M.z,M.w).divideInPlace(Z);if("Vector4"===P||"Quaternion"===x)return M.divide(Z);if((0,j.g)(P,x)){var c;if(null!==(c=this.config)&&void 0!==c&&c.useMatrixPerComponent){const x=M.m;for(let M=0;M<x.length;M++)x[M]/=Z.m[M];return"Matrix2D"===P?new H.d(x):"Matrix3D"===P?new H.h(x):mM.Matrix.NZ(x)}return M.divide(Z)}var w;if(null!==(w=this.config)&&void 0!==w&&w.preventIntegerFloatArithmetic&&typeof M!==typeof Z)throw new Error("Cannot add different types of numbers.");return(0,j.q)(M)/(0,j.q)(Z)}}(0,x.g)("FlowGraphDivideBlock",L);class u extends G{constructor(M){super(c.u,(M=>this._random(M)),"FlowGraphRandomBlock",M),this.min=this.registerDataInput("min",c.u,(null===M||void 0===M?void 0:M.min)??0),this.max=this.registerDataInput("max",c.u,(null===M||void 0===M?void 0:M.max)??1),null!==M&&void 0!==M&&M.seed&&(this._seed=M.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const M=1e4*Math.sin(this._seed++);return M-Math.floor(M)}return Math.random()}_random(M){const Z=this.min.getValue(M),P=this.max.getValue(M);return this._getRandomValue()*(P-Z)+Z}}(0,x.g)("FlowGraphRandomBlock",u);class N extends G{constructor(M){super(c.u,(()=>Math.E),"FlowGraphEBlock",M)}}(0,x.g)("FlowGraphEBlock",N);class J extends G{constructor(M){super(c.u,(()=>Math.PI),"FlowGraphPIBlock",M)}}(0,x.g)("FlowGraphPIBlock",J);class t extends G{constructor(M){super(c.u,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",M)}}(0,x.g)("FlowGraphInfBlock",t);class F extends G{constructor(M){super(c.u,(()=>Number.NaN),"FlowGraphNaNBlock",M)}}function D(M,Z){switch((0,j.l)(M)){case"FlowGraphInteger":return new O.e(Z(M.value));case"Vector2":return new mM.Vector2(Z(M.x),Z(M.y));case"BZ":return new mM.BZ(Z(M.x),Z(M.y),Z(M.z));case"Vector4":return new mM.Vector4(Z(M.x),Z(M.y),Z(M.z),Z(M.w));case"Quaternion":return new mM.Quaternion(Z(M.x),Z(M.y),Z(M.z),Z(M.w));case"Matrix":return mM.Matrix.NZ(M.m.map(Z));case"Matrix2D":return new H.d(M.m.map(Z));case"Matrix3D":return new H.h(M.m.map(Z));default:return Z(M)}}(0,x.g)("FlowGraphNaNBlock",F);class l extends K.d{constructor(M){super(c.u,c.u,(M=>this._polymorphicAbs(M)),"FlowGraphAbsBlock",M)}_polymorphicAbs(M){return D(M,Math.abs)}}(0,x.g)("FlowGraphAbsBlock",l);class h extends K.d{constructor(M){super(c.u,c.u,(M=>this._polymorphicSign(M)),"FlowGraphSignBlock",M)}_polymorphicSign(M){return D(M,Math.sign)}}(0,x.g)("FlowGraphSignBlock",h);class Q extends K.d{constructor(M){super(c.u,c.u,(M=>this._polymorphicTrunc(M)),"FlowGraphTruncBlock",M)}_polymorphicTrunc(M){return D(M,Math.trunc)}}(0,x.g)("FlowGraphTruncBlock",Q);class I extends K.d{constructor(M){super(c.u,c.u,(M=>this._polymorphicFloor(M)),"FlowGraphFloorBlock",M)}_polymorphicFloor(M){return D(M,Math.floor)}}(0,x.g)("FlowGraphFloorBlock",I);class s extends K.d{constructor(M){super(c.e,c.e,(M=>this._polymorphicCeiling(M)),"FlowGraphCeilBlock",M)}_polymorphicCeiling(M){return D(M,Math.ceil)}}(0,x.g)("FlowGraphCeilBlock",s);class C extends K.d{constructor(M){super(c.e,c.e,(M=>this._polymorphicRound(M)),"FlowGraphRoundBlock",M)}_polymorphicRound(M){return D(M,(M=>{var Z;return M<0&&null!==(Z=this.config)&&void 0!==Z&&Z.roundHalfAwayFromZero?-Math.round(-M):Math.round(M)}))}}(0,x.g)("FlowGraphRoundBlock",C);class R extends K.d{constructor(M){super(c.e,c.e,(M=>this._polymorphicFraction(M)),"FlowGraphFractBlock",M)}_polymorphicFraction(M){return D(M,(M=>M-Math.floor(M)))}}(0,x.g)("FlowGraphFractBlock",R);class W extends K.d{constructor(M){super(c.e,c.e,(M=>this._polymorphicNeg(M)),"FlowGraphNegationBlock",M)}_polymorphicNeg(M){return D(M,(M=>-M))}}function k(M,Z,P){switch((0,j.l)(M)){case"FlowGraphInteger":return new O.e(P(M.value,Z.value));case"Vector2":return new mM.Vector2(P(M.x,Z.x),P(M.y,Z.y));case"BZ":return new mM.BZ(P(M.x,Z.x),P(M.y,Z.y),P(M.z,Z.z));case"Vector4":return new mM.Vector4(P(M.x,Z.x),P(M.y,Z.y),P(M.z,Z.z),P(M.w,Z.w));case"Quaternion":return new mM.Quaternion(P(M.x,Z.x),P(M.y,Z.y),P(M.z,Z.z),P(M.w,Z.w));case"Matrix":return mM.Matrix.NZ(M.m.map(((M,x)=>P(M,Z.m[x]))));case"Matrix2D":return new H.d(M.m.map(((M,x)=>P(M,Z.m[x]))));case"Matrix3D":return new H.h(M.m.map(((M,x)=>P(M,Z.m[x]))));default:return P((0,j.q)(M),(0,j.q)(Z))}}(0,x.g)("FlowGraphNegationBlock",W);class A extends w.c{constructor(M){super(c.e,c.e,c.e,((M,Z)=>this._polymorphicRemainder(M,Z)),"FlowGraphModuloBlock",M)}_polymorphicRemainder(M,Z){return k(M,Z,((M,Z)=>M%Z))}}(0,x.g)("FlowGraphModuloBlock",A);class o extends w.c{constructor(M){super(c.e,c.e,c.e,((M,Z)=>this._polymorphicMin(M,Z)),"FlowGraphMinBlock",M)}_polymorphicMin(M,Z){return k(M,Z,Math.min)}}(0,x.g)("FlowGraphMinBlock",o);class E extends w.c{constructor(M){super(c.e,c.e,c.e,((M,Z)=>this._polymorphicMax(M,Z)),"FlowGraphMaxBlock",M)}_polymorphicMax(M,Z){return k(M,Z,Math.max)}}function r(M,Z,P){return Math.min(Math.max(M,Math.min(Z,P)),Math.max(Z,P))}function q(M,Z,P,x){switch((0,j.l)(M)){case"FlowGraphInteger":return new O.e(x(M.value,Z.value,P.value));case"Vector2":return new mM.Vector2(x(M.x,Z.x,P.x),x(M.y,Z.y,P.y));case"BZ":return new mM.BZ(x(M.x,Z.x,P.x),x(M.y,Z.y,P.y),x(M.z,Z.z,P.z));case"Vector4":return new mM.Vector4(x(M.x,Z.x,P.x),x(M.y,Z.y,P.y),x(M.z,Z.z,P.z),x(M.w,Z.w,P.w));case"Quaternion":return new mM.Quaternion(x(M.x,Z.x,P.x),x(M.y,Z.y,P.y),x(M.z,Z.z,P.z),x(M.w,Z.w,P.w));case"Matrix":return mM.Matrix.NZ(M.m.map(((M,c)=>x(M,Z.m[c],P.m[c]))));case"Matrix2D":return new H.d(M.m.map(((M,c)=>x(M,Z.m[c],P.m[c]))));case"Matrix3D":return new H.h(M.m.map(((M,c)=>x(M,Z.m[c],P.m[c]))));default:return x((0,j.q)(M),(0,j.q)(Z),(0,j.q)(P))}}(0,x.g)("FlowGraphMaxBlock",E);class e extends d{constructor(M){super(c.e,c.e,c.e,c.e,((M,Z,P)=>this._polymorphicClamp(M,Z,P)),"FlowGraphClampBlock",M)}_polymorphicClamp(M,Z,P){return q(M,Z,P,r)}}function b(M){return Math.min(Math.max(M,0),1)}(0,x.g)("FlowGraphClampBlock",e);class a extends K.d{constructor(M){super(c.e,c.e,(M=>this._polymorphicSaturate(M)),"FlowGraphSaturateBlock",M)}_polymorphicSaturate(M){return D(M,b)}}function y(M,Z,P){return(1-P)*M+P*Z}(0,x.g)("FlowGraphSaturateBlock",a);class f extends d{constructor(M){super(c.e,c.e,c.e,c.e,((M,Z,P)=>this._polymorphicInterpolate(M,Z,P)),"FlowGraphMathInterpolationBlock",M)}_polymorphicInterpolate(M,Z,P){return q(M,Z,P,y)}}(0,x.g)("FlowGraphMathInterpolationBlock",f);class Y extends w.c{constructor(M){super(c.e,c.e,c.g,((M,Z)=>this._polymorphicEq(M,Z)),"FlowGraphEqualityBlock",M)}_polymorphicEq(M,Z){const P=(0,j.l)(M),x=(0,j.l)(Z);return typeof M===typeof Z&&((0,j.k)(P,x)||(0,j.g)(P,x)||(0,j.d)(P,x)?M.equals(Z):M===Z)}}function z(M,Z,P){if((0,j.s)(M)&&(0,j.s)(Z))return P((0,j.q)(M),(0,j.q)(Z));throw new Error(`Cannot compare ${M} and ${Z}`)}(0,x.g)("FlowGraphEqualityBlock",Y);class i extends w.c{constructor(M){super(c.e,c.e,c.g,((M,Z)=>this._polymorphicLessThan(M,Z)),"FlowGraphLessThanBlock",M)}_polymorphicLessThan(M,Z){return z(M,Z,((M,Z)=>M<Z))}}(0,x.g)("FlowGraphLessThanBlock",i);class T extends w.c{constructor(M){super(c.e,c.e,c.g,((M,Z)=>this._polymorphicLessThanOrEqual(M,Z)),"FlowGraphLessThanOrEqualBlock",M)}_polymorphicLessThanOrEqual(M,Z){return z(M,Z,((M,Z)=>M<=Z))}}(0,x.g)("FlowGraphLessThanOrEqualBlock",T);class p extends w.c{constructor(M){super(c.e,c.e,c.g,((M,Z)=>this._polymorphicGreaterThan(M,Z)),"FlowGraphGreaterThanBlock",M)}_polymorphicGreaterThan(M,Z){return z(M,Z,((M,Z)=>M>Z))}}(0,x.g)("FlowGraphGreaterThanBlock",p);class S extends w.c{constructor(M){super(c.e,c.e,c.g,((M,Z)=>this._polymorphicGreaterThanOrEqual(M,Z)),"FlowGraphGreaterThanOrEqualBlock",M)}_polymorphicGreaterThanOrEqual(M,Z){return z(M,Z,((M,Z)=>M>=Z))}}(0,x.g)("FlowGraphGreaterThanOrEqualBlock",S);class X extends K.d{constructor(M){super(c.e,c.g,(M=>this._polymorphicIsNan(M)),"FlowGraphIsNaNBlock",M)}_polymorphicIsNan(M){if((0,j.s)(M,!0))return isNaN((0,j.q)(M));throw new Error(`Cannot get NaN of ${M}`)}}(0,x.g)("FlowGraphIsNaNBlock",X);class V extends K.d{constructor(M){super(c.e,c.g,(M=>this._polymorphicIsInf(M)),"FlowGraphIsInfBlock",M)}_polymorphicIsInf(M){if((0,j.s)(M))return!isFinite((0,j.q)(M));throw new Error(`Cannot get isInf of ${M}`)}}(0,x.g)("FlowGraphIsInfBlock",V);class g extends K.d{constructor(M){super(c.e,c.e,(M=>this._polymorphicDegToRad(M)),"FlowGraphDegToRadBlock",M)}_degToRad(M){return M*Math.PI/180}_polymorphicDegToRad(M){return D(M,this._degToRad)}}(0,x.g)("FlowGraphDegToRadBlock",g);class MM extends K.d{constructor(M){super(c.e,c.e,(M=>this._polymorphicRadToDeg(M)),"FlowGraphRadToDegBlock",M)}_radToDeg(M){return 180*M/Math.PI}_polymorphicRadToDeg(M){return D(M,this._radToDeg)}}(0,x.g)("FlowGraphRadToDegBlock",MM);class ZM extends K.d{constructor(M){super(c.u,c.u,(M=>this._polymorphicSin(M)),"FlowGraphSinBlock",M)}_polymorphicSin(M){return D(M,Math.sin)}}class PM extends K.d{constructor(M){super(c.u,c.u,(M=>this._polymorphicCos(M)),"FlowGraphCosBlock",M)}_polymorphicCos(M){return D(M,Math.cos)}}class xM extends K.d{constructor(M){super(c.u,c.u,(M=>this._polymorphicTan(M)),"FlowGraphTanBlock",M)}_polymorphicTan(M){return D(M,Math.tan)}}class cM extends K.d{constructor(M){super(c.u,c.u,(M=>this._polymorphicAsin(M)),"FlowGraphASinBlock",M)}_polymorphicAsin(M){return D(M,Math.asin)}}(0,x.g)("FlowGraphASinBlock",cM);class wM extends K.d{constructor(M){super(c.u,c.u,(M=>this._polymorphicAcos(M)),"FlowGraphACosBlock",M)}_polymorphicAcos(M){return D(M,Math.acos)}}(0,x.g)("FlowGraphACosBlock",wM);class vM extends K.d{constructor(M){super(c.u,c.u,(M=>this._polymorphicAtan(M)),"FlowGraphATanBlock",M)}_polymorphicAtan(M){return D(M,Math.atan)}}(0,x.g)("FlowGraphATanBlock",vM);class GM extends w.c{constructor(M){super(c.e,c.e,c.e,((M,Z)=>this._polymorphicAtan2(M,Z)),"FlowGraphATan2Block",M)}_polymorphicAtan2(M,Z){return k(M,Z,Math.atan2)}}(0,x.g)("FlowGraphATan2Block",GM);class mZ extends K.d{constructor(M){super(c.e,c.e,(M=>this._polymorphicSinh(M)),"FlowGraphSinhBlock",M)}_polymorphicSinh(M){return D(M,Math.sinh)}}(0,x.g)("FlowGraphSinhBlock",mZ);class KM extends K.d{constructor(M){super(c.e,c.e,(M=>this._polymorphicCosh(M)),"FlowGraphCoshBlock",M)}_polymorphicCosh(M){return D(M,Math.cosh)}}(0,x.g)("FlowGraphCoshBlock",KM);class dM extends K.d{constructor(M){super(c.e,c.e,(M=>this._polymorphicTanh(M)),"FlowGraphTanhBlock",M)}_polymorphicTanh(M){return D(M,Math.tanh)}}(0,x.g)("FlowGraphTanhBlock",dM);class OM extends K.d{constructor(M){super(c.e,c.u,(M=>this._polymorphicAsinh(M)),"FlowGraphASinhBlock",M)}_polymorphicAsinh(M){return D(M,Math.asinh)}}(0,x.g)("FlowGraphASinhBlock",OM);class HM extends K.d{constructor(M){super(c.e,c.u,(M=>this._polymorphicAcosh(M)),"FlowGraphACoshBlock",M)}_polymorphicAcosh(M){return D(M,Math.acosh)}}(0,x.g)("FlowGraphACoshBlock",HM);class jM extends K.d{constructor(M){super(c.e,c.u,(M=>this._polymorphicAtanh(M)),"FlowGraphATanhBlock",M)}_polymorphicAtanh(M){return D(M,Math.atanh)}}(0,x.g)("FlowGraphATanhBlock",jM);class BM extends K.d{constructor(M){super(c.e,c.u,(M=>this._polymorphicExp(M)),"FlowGraphExponentialBlock",M)}_polymorphicExp(M){return D(M,Math.exp)}}(0,x.g)("FlowGraphExponentialBlock",BM);class UM extends K.d{constructor(M){super(c.e,c.u,(M=>this._polymorphicLog(M)),"FlowGraphLogBlock",M)}_polymorphicLog(M){return D(M,Math.log)}}(0,x.g)("FlowGraphLogBlock",UM);class nM extends K.d{constructor(M){super(c.e,c.u,(M=>this._polymorphicLog2(M)),"FlowGraphLog2Block",M)}_polymorphicLog2(M){return D(M,Math.log2)}}(0,x.g)("FlowGraphLog2Block",nM);class LM extends K.d{constructor(M){super(c.e,c.u,(M=>this._polymorphicLog10(M)),"FlowGraphLog10Block",M)}_polymorphicLog10(M){return D(M,Math.log10)}}(0,x.g)("FlowGraphLog10Block",LM);class uM extends K.d{constructor(M){super(c.e,c.u,(M=>this._polymorphicSqrt(M)),"FlowGraphSquareRootBlock",M)}_polymorphicSqrt(M){return D(M,Math.sqrt)}}(0,x.g)("FlowGraphSquareRootBlock",uM);class NM extends K.d{constructor(M){super(c.e,c.u,(M=>this._polymorphicCubeRoot(M)),"FlowGraphCubeRootBlock",M)}_polymorphicCubeRoot(M){return D(M,Math.cbrt)}}(0,x.g)("FlowGraphCubeRootBlock",NM);class JM extends w.c{constructor(M){super(c.e,c.u,c.u,((M,Z)=>this._polymorphicPow(M,Z)),"FlowGraphPowerBlock",M)}_polymorphicPow(M,Z){return k(M,Z,Math.pow)}}(0,x.g)("FlowGraphPowerBlock",JM);class tM extends K.d{constructor(M){super((0,c.R)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,c.R)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(M=>"boolean"===typeof M?!M:"number"===typeof M?~M:new O.e(~M.value)),"FlowGraphBitwiseNotBlock",M)}}(0,x.g)("FlowGraphBitwiseNotBlock",tM);class FM extends w.c{constructor(M){super((0,c.R)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,c.R)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,c.R)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),((M,Z)=>{if("boolean"===typeof M&&"boolean"===typeof Z)return M&&Z;if("number"===typeof M&&"number"===typeof Z)return M&Z;if("object"===typeof M&&"object"===typeof Z)return new O.e(M.value&Z.value);throw new Error(`Cannot perform bitwise AND on ${M} and ${Z}`)}),"FlowGraphBitwiseAndBlock",M)}}(0,x.g)("FlowGraphBitwiseAndBlock",FM);class DM extends w.c{constructor(M){super((0,c.R)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,c.R)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,c.R)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),((M,Z)=>{if("boolean"===typeof M&&"boolean"===typeof Z)return M||Z;if("number"===typeof M&&"number"===typeof Z)return M|Z;if("object"===typeof M&&"object"===typeof Z)return new O.e(M.value|Z.value);throw new Error(`Cannot perform bitwise OR on ${M} and ${Z}`)}),"FlowGraphBitwiseOrBlock",M)}}(0,x.g)("FlowGraphBitwiseOrBlock",DM);class lM extends w.c{constructor(M){super((0,c.R)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,c.R)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,c.R)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),((M,Z)=>{if("boolean"===typeof M&&"boolean"===typeof Z)return M!==Z;if("number"===typeof M&&"number"===typeof Z)return M^Z;if("object"===typeof M&&"object"===typeof Z)return new O.e(M.value^Z.value);throw new Error(`Cannot perform bitwise XOR on ${M} and ${Z}`)}),"FlowGraphBitwiseXorBlock",M)}}(0,x.g)("FlowGraphBitwiseXorBlock",lM);class hM extends w.c{constructor(M){super(c.j,c.j,c.j,((M,Z)=>new O.e(M.value<<Z.value)),"FlowGraphBitwiseLeftShiftBlock",M)}}(0,x.g)("FlowGraphBitwiseLeftShiftBlock",hM);class QM extends w.c{constructor(M){super(c.j,c.j,c.j,((M,Z)=>new O.e(M.value>>Z.value)),"FlowGraphBitwiseRightShiftBlock",M)}}(0,x.g)("FlowGraphBitwiseRightShiftBlock",QM);class IM extends K.d{constructor(M){super(c.j,c.j,(M=>new O.e(Math.clz32(M.value))),"FlowGraphLeadingZerosBlock",M)}}(0,x.g)("FlowGraphLeadingZerosBlock",IM);class sM extends K.d{constructor(M){super(c.j,c.j,(M=>new O.e(M.value?31-Math.clz32(M.value&-M.value):32)),"FlowGraphTrailingZerosBlock",M)}}(0,x.g)("FlowGraphTrailingZerosBlock",sM);class CM extends K.d{constructor(M){super(c.j,c.j,(M=>new O.e(function(M){let Z=0;for(;M;)Z+=1&M,M>>=1;return Z}(M.value))),"FlowGraphOneBitsCounterBlock",M)}}(0,x.g)("FlowGraphOneBitsCounterBlock",CM)},15602:(M,Z,P)=>{P.d(Z,{c:()=>c});var x=P(15610);class c extends x.e{constructor(M,Z,P,x,c,w){super(P,w),this._operation=x,this._className=c,this.a=this.registerDataInput("a",M),this.b=this.registerDataInput("b",Z)}_doOperation(M){const Z=this.a.getValue(M),P=this.b.getValue(M);return this._operation(Z,P)}getClassName(){return this._className}}},15610:(M,Z,P)=>{P.d(Z,{e:()=>G});var x=P(14093),c=P(14073);const w="cachedOperationValue",v="cachedExecutionId";class G extends x.c{constructor(M,Z){super(Z),this.value=this.registerDataOutput("value",M),this.isValid=this.registerDataOutput("isValid",c.g)}_updateOutputs(M){const Z=M._getExecutionVariable(this,v,-1),P=M._getExecutionVariable(this,w,null);if(void 0!==P&&null!==P&&Z===M.executionId)this.isValid.setValue(!0,M),this.value.setValue(P,M);else try{const Z=this._doOperation(M);if(void 0===Z||null===Z)return void this.isValid.setValue(!1,M);M._setExecutionVariable(this,w,Z),M._setExecutionVariable(this,v,M.executionId),this.value.setValue(Z,M),this.isValid.setValue(!0,M)}catch(x){this.isValid.setValue(!1,M)}}}},15612:(M,Z,P)=>{P.d(Z,{d:()=>c});var x=P(15610);class c extends x.e{constructor(M,Z,P,x,c){super(Z,c),this._operation=P,this._className=x,this.a=this.registerDataInput("a",M)}_doOperation(M){return this._operation(this.a.getValue(M))}getClassName(){return this._className}}}}]);