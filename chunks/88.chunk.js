"use strict";(self.qbp2s7qydk=self.qbp2s7qydk||[]).push([[88],{15837:(M,A,O)=>{O.r(A),O.d(A,{FlowGraphAbsBlock:()=>C,FlowGraphAcosBlock:()=>QM,FlowGraphAcoshBlock:()=>TM,FlowGraphAddBlock:()=>K,FlowGraphAsinBlock:()=>zM,FlowGraphAsinhBlock:()=>eM,FlowGraphAtan2Block:()=>cM,FlowGraphAtanBlock:()=>XM,FlowGraphAtanhBlock:()=>JM,FlowGraphBitwiseAndBlock:()=>EM,FlowGraphBitwiseLeftShiftBlock:()=>fM,FlowGraphBitwiseNotBlock:()=>YM,FlowGraphBitwiseOrBlock:()=>HM,FlowGraphBitwiseRightShiftBlock:()=>DM,FlowGraphBitwiseXorBlock:()=>CM,FlowGraphCeilBlock:()=>N,FlowGraphClampBlock:()=>p,FlowGraphCosBlock:()=>OM,FlowGraphCoshBlock:()=>BM,FlowGraphCubeRootBlock:()=>bM,FlowGraphDegToRadBlock:()=>l,FlowGraphDivideBlock:()=>w,FlowGraphEBlock:()=>b,FlowGraphEqualityBlock:()=>a,FlowGraphExpBlock:()=>KM,FlowGraphFloorBlock:()=>F,FlowGraphFractionBlock:()=>h,FlowGraphGreaterThanBlock:()=>mM,FlowGraphGreaterThanOrEqualBlock:()=>R,FlowGraphInfBlock:()=>Y,FlowGraphIsInfinityBlock:()=>W,FlowGraphIsNanBlock:()=>k,FlowGraphLeadingZerosBlock:()=>FM,FlowGraphLessThanBlock:()=>Z,FlowGraphLessThanOrEqualBlock:()=>P,FlowGraphLog10Block:()=>wM,FlowGraphLog2Block:()=>dM,FlowGraphLogBlock:()=>GM,FlowGraphMathInterpolationBlock:()=>n,FlowGraphMaxBlock:()=>t,FlowGraphMinBlock:()=>L,FlowGraphModuloBlock:()=>U,FlowGraphMultiplyBlock:()=>d,FlowGraphNaNBlock:()=>E,FlowGraphNegationBlock:()=>u,FlowGraphOneBitsCounterBlock:()=>yM,FlowGraphPiBlock:()=>s,FlowGraphPowerBlock:()=>sM,FlowGraphRadToDegBlock:()=>MM,FlowGraphRandomBlock:()=>I,FlowGraphRoundBlock:()=>y,FlowGraphSaturateBlock:()=>q,FlowGraphSignBlock:()=>f,FlowGraphSinBlock:()=>AM,FlowGraphSinhBlock:()=>jM,FlowGraphSquareRootBlock:()=>IM,FlowGraphSubtractBlock:()=>G,FlowGraphTanBlock:()=>SM,FlowGraphTanhBlock:()=>gM,FlowGraphTrailingZerosBlock:()=>NM,FlowGraphTruncBlock:()=>D});var S=O(12919),z=O(14238),Q=O(15842),X=O(15851);class c extends X.c{constructor(M,A,O,S){super(M,S),this._operation=A,this._className=O}_doOperation(M){return this._operation(M)}getClassName(){return this._className}}var j=O(12970),B=O(15858);class g extends X.c{constructor(M,A,O,S,z,Q,X){super(S,X),this._operation=z,this._className=Q,this.a=this.registerDataInput("a",M),this.b=this.registerDataInput("b",A),this.c=this.registerDataInput("c",O)}_doOperation(M){return this._operation(this.a.getValue(M),this.b.getValue(M),this.c.getValue(M))}getClassName(){return this._className}}var e=O(14236),T=O(14241),J=O(14273);class K extends Q.b{constructor(M){super((0,z.P)(null===M||void 0===M?void 0:M.type),(0,z.P)(null===M||void 0===M?void 0:M.type),(0,z.P)(null===M||void 0===M?void 0:M.type),((M,A)=>this._polymorphicAdd(M,A)),"FlowGraphAddBlock",M)}_polymorphicAdd(M,A){const O=(0,J.g)(M),S=(0,J.g)(A);if((0,J.e)(O,S)||(0,J.c)(O,S)||(0,J.b)(O,S))return M.add(A);if("Quaternion"===O||"Vector4"===S)return new j.Vector4(M.x,M.y,M.z,M.w).addInPlace(A);if("Vector4"===O||"Quaternion"===S)return M.add(A);var z;if(null!==(z=this.config)&&void 0!==z&&z.preventIntegerFloatArithmetic&&typeof M!==typeof A)throw new Error("Cannot add different types of numbers.");return(0,J.n)(M)+(0,J.n)(A)}}(0,S.g)("FlowGraphAddBlock",K);class G extends Q.b{constructor(M){super((0,z.P)(null===M||void 0===M?void 0:M.type),(0,z.P)(null===M||void 0===M?void 0:M.type),(0,z.P)(null===M||void 0===M?void 0:M.type),((M,A)=>this._polymorphicSubtract(M,A)),"FlowGraphSubtractBlock",M)}_polymorphicSubtract(M,A){const O=(0,J.g)(M),S=(0,J.g)(A);if((0,J.e)(O,S)||(0,J.b)(O,S)||(0,J.c)(O,S))return M.dA(A);if("Quaternion"===O||"Vector4"===S)return new j.Vector4(M.x,M.y,M.z,M.w).KT(A);if("Vector4"===O||"Quaternion"===S)return M.dA(A);var z;if(null!==(z=this.config)&&void 0!==z&&z.preventIntegerFloatArithmetic&&typeof M!==typeof A)throw new Error("Cannot add different types of numbers.");return(0,J.n)(M)-(0,J.n)(A)}}(0,S.g)("FlowGraphSubtractBlock",G);class d extends Q.b{constructor(M){super((0,z.P)(null===M||void 0===M?void 0:M.type),(0,z.P)(null===M||void 0===M?void 0:M.type),(0,z.P)(null===M||void 0===M?void 0:M.type),((M,A)=>this._polymorphicMultiply(M,A)),"FlowGraphMultiplyBlock",M)}_polymorphicMultiply(M,A){const O=(0,J.g)(M),S=(0,J.g)(A);if((0,J.e)(O,S)||(0,J.b)(O,S))return M.multiply(A);if("Quaternion"===O||"Vector4"===S)return new j.Vector4(M.x,M.y,M.z,M.w).multiplyInPlace(A);if("Vector4"===O||"Quaternion"===S)return M.multiply(A);if((0,J.c)(O,S)){var z;if(null!==(z=this.config)&&void 0!==z&&z.useMatrixPerComponent){const S=M.m;for(let M=0;M<S.length;M++)S[M]*=A.m[M];return"Matrix2D"===O?new T.d(S):"Matrix3D"===O?new T.h(S):j.Matrix.sA(S)}return A.multiply(M)}var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.preventIntegerFloatArithmetic&&typeof M!==typeof A)throw new Error("Cannot add different types of numbers.");return(0,J.n)(M)*(0,J.n)(A)}}(0,S.g)("FlowGraphMultiplyBlock",d);class w extends Q.b{constructor(M){super((0,z.P)(null===M||void 0===M?void 0:M.type),(0,z.P)(null===M||void 0===M?void 0:M.type),(0,z.P)(null===M||void 0===M?void 0:M.type),((M,A)=>this._polymorphicDivide(M,A)),"FlowGraphDivideBlock",M)}_polymorphicDivide(M,A){const O=(0,J.g)(M),S=(0,J.g)(A);if((0,J.e)(O,S)||(0,J.b)(O,S))return M.divide(A);if("Quaternion"===O||"Quaternion"===S){const O=M.clone();return O.x/=A.x,O.y/=A.y,O.z/=A.z,O.w/=A.w,O}if("Quaternion"===O||"Vector4"===S)return new j.Vector4(M.x,M.y,M.z,M.w).divideInPlace(A);if("Vector4"===O||"Quaternion"===S)return M.divide(A);if((0,J.c)(O,S)){var z;if(null!==(z=this.config)&&void 0!==z&&z.useMatrixPerComponent){const S=M.m;for(let M=0;M<S.length;M++)S[M]/=A.m[M];return"Matrix2D"===O?new T.d(S):"Matrix3D"===O?new T.h(S):j.Matrix.sA(S)}return M.divide(A)}var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.preventIntegerFloatArithmetic&&typeof M!==typeof A)throw new Error("Cannot add different types of numbers.");return(0,J.n)(M)/(0,J.n)(A)}}(0,S.g)("FlowGraphDivideBlock",w);class I extends c{constructor(M){var A,O;super(z.t,(M=>this._random(M)),"FlowGraphRandomBlock",M),this.min=this.registerDataInput("min",z.t,null!==(A=null===M||void 0===M?void 0:M.min)&&void 0!==A?A:0),this.max=this.registerDataInput("max",z.t,null!==(O=null===M||void 0===M?void 0:M.max)&&void 0!==O?O:1),null!==M&&void 0!==M&&M.seed&&(this._seed=M.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const M=1e4*Math.sin(this._seed++);return M-Math.floor(M)}return Math.random()}_random(M){const A=this.min.getValue(M),O=this.max.getValue(M);return this._getRandomValue()*(O-A)+A}}(0,S.g)("FlowGraphRandomBlock",I);class b extends c{constructor(M){super(z.t,(()=>Math.E),"FlowGraphEBlock",M)}}(0,S.g)("FlowGraphEBlock",b);class s extends c{constructor(M){super(z.t,(()=>Math.PI),"FlowGraphPIBlock",M)}}(0,S.g)("FlowGraphPIBlock",s);class Y extends c{constructor(M){super(z.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",M)}}(0,S.g)("FlowGraphInfBlock",Y);class E extends c{constructor(M){super(z.t,(()=>Number.NaN),"FlowGraphNaNBlock",M)}}function H(M,A){switch((0,J.g)(M)){case"FlowGraphInteger":return new e.b(A(M.value));case"Vector2":return new j.Vector2(A(M.x),A(M.y));case"GA":return new j.GA(A(M.x),A(M.y),A(M.z));case"Vector4":return new j.Vector4(A(M.x),A(M.y),A(M.z),A(M.w));case"Quaternion":return new j.Quaternion(A(M.x),A(M.y),A(M.z),A(M.w));case"Matrix":return j.Matrix.sA(M.m.map(A));case"Matrix2D":return new T.d(M.m.map(A));case"Matrix3D":return new T.h(M.m.map(A));default:return A(M)}}(0,S.g)("FlowGraphNaNBlock",E);class C extends B.e{constructor(M){super(z.t,z.t,(M=>this._polymorphicAbs(M)),"FlowGraphAbsBlock",M)}_polymorphicAbs(M){return H(M,Math.abs)}}(0,S.g)("FlowGraphAbsBlock",C);class f extends B.e{constructor(M){super(z.t,z.t,(M=>this._polymorphicSign(M)),"FlowGraphSignBlock",M)}_polymorphicSign(M){return H(M,Math.sign)}}(0,S.g)("FlowGraphSignBlock",f);class D extends B.e{constructor(M){super(z.t,z.t,(M=>this._polymorphicTrunc(M)),"FlowGraphTruncBlock",M)}_polymorphicTrunc(M){return H(M,Math.trunc)}}(0,S.g)("FlowGraphTruncBlock",D);class F extends B.e{constructor(M){super(z.t,z.t,(M=>this._polymorphicFloor(M)),"FlowGraphFloorBlock",M)}_polymorphicFloor(M){return H(M,Math.floor)}}(0,S.g)("FlowGraphFloorBlock",F);class N extends B.e{constructor(M){super(z.b,z.b,(M=>this._polymorphicCeiling(M)),"FlowGraphCeilBlock",M)}_polymorphicCeiling(M){return H(M,Math.ceil)}}(0,S.g)("FlowGraphCeilBlock",N);class y extends B.e{constructor(M){super(z.b,z.b,(M=>this._polymorphicRound(M)),"FlowGraphRoundBlock",M)}_polymorphicRound(M){return H(M,(M=>{var A;return M<0&&null!==(A=this.config)&&void 0!==A&&A.roundHalfAwayFromZero?-Math.round(-M):Math.round(M)}))}}(0,S.g)("FlowGraphRoundBlock",y);class h extends B.e{constructor(M){super(z.b,z.b,(M=>this._polymorphicFraction(M)),"FlowGraphFractBlock",M)}_polymorphicFraction(M){return H(M,(M=>M-Math.floor(M)))}}(0,S.g)("FlowGraphFractBlock",h);class u extends B.e{constructor(M){super(z.b,z.b,(M=>this._polymorphicNeg(M)),"FlowGraphNegationBlock",M)}_polymorphicNeg(M){return H(M,(M=>-M))}}function i(M,A,O){switch((0,J.g)(M)){case"FlowGraphInteger":return new e.b(O(M.value,A.value));case"Vector2":return new j.Vector2(O(M.x,A.x),O(M.y,A.y));case"GA":return new j.GA(O(M.x,A.x),O(M.y,A.y),O(M.z,A.z));case"Vector4":return new j.Vector4(O(M.x,A.x),O(M.y,A.y),O(M.z,A.z),O(M.w,A.w));case"Quaternion":return new j.Quaternion(O(M.x,A.x),O(M.y,A.y),O(M.z,A.z),O(M.w,A.w));case"Matrix":return j.Matrix.sA(M.m.map(((M,S)=>O(M,A.m[S]))));case"Matrix2D":return new T.d(M.m.map(((M,S)=>O(M,A.m[S]))));case"Matrix3D":return new T.h(M.m.map(((M,S)=>O(M,A.m[S]))));default:return O((0,J.n)(M),(0,J.n)(A))}}(0,S.g)("FlowGraphNegationBlock",u);class U extends Q.b{constructor(M){super(z.b,z.b,z.b,((M,A)=>this._polymorphicRemainder(M,A)),"FlowGraphModuloBlock",M)}_polymorphicRemainder(M,A){return i(M,A,((M,A)=>M%A))}}(0,S.g)("FlowGraphModuloBlock",U);class L extends Q.b{constructor(M){super(z.b,z.b,z.b,((M,A)=>this._polymorphicMin(M,A)),"FlowGraphMinBlock",M)}_polymorphicMin(M,A){return i(M,A,Math.min)}}(0,S.g)("FlowGraphMinBlock",L);class t extends Q.b{constructor(M){super(z.b,z.b,z.b,((M,A)=>this._polymorphicMax(M,A)),"FlowGraphMaxBlock",M)}_polymorphicMax(M,A){return i(M,A,Math.max)}}function x(M,A,O){return Math.min(Math.max(M,Math.min(A,O)),Math.max(A,O))}function o(M,A,O,S){switch((0,J.g)(M)){case"FlowGraphInteger":return new e.b(S(M.value,A.value,O.value));case"Vector2":return new j.Vector2(S(M.x,A.x,O.x),S(M.y,A.y,O.y));case"GA":return new j.GA(S(M.x,A.x,O.x),S(M.y,A.y,O.y),S(M.z,A.z,O.z));case"Vector4":return new j.Vector4(S(M.x,A.x,O.x),S(M.y,A.y,O.y),S(M.z,A.z,O.z),S(M.w,A.w,O.w));case"Quaternion":return new j.Quaternion(S(M.x,A.x,O.x),S(M.y,A.y,O.y),S(M.z,A.z,O.z),S(M.w,A.w,O.w));case"Matrix":return j.Matrix.sA(M.m.map(((M,z)=>S(M,A.m[z],O.m[z]))));case"Matrix2D":return new T.d(M.m.map(((M,z)=>S(M,A.m[z],O.m[z]))));case"Matrix3D":return new T.h(M.m.map(((M,z)=>S(M,A.m[z],O.m[z]))));default:return S((0,J.n)(M),(0,J.n)(A),(0,J.n)(O))}}(0,S.g)("FlowGraphMaxBlock",t);class p extends g{constructor(M){super(z.b,z.b,z.b,z.b,((M,A,O)=>this._polymorphicClamp(M,A,O)),"FlowGraphClampBlock",M)}_polymorphicClamp(M,A,O){return o(M,A,O,x)}}function v(M){return Math.min(Math.max(M,0),1)}(0,S.g)("FlowGraphClampBlock",p);class q extends B.e{constructor(M){super(z.b,z.b,(M=>this._polymorphicSaturate(M)),"FlowGraphSaturateBlock",M)}_polymorphicSaturate(M){return H(M,v)}}function r(M,A,O){return(1-O)*M+O*A}(0,S.g)("FlowGraphSaturateBlock",q);class n extends g{constructor(M){super(z.b,z.b,z.b,z.b,((M,A,O)=>this._polymorphicInterpolate(M,A,O)),"FlowGraphMathInterpolationBlock",M)}_polymorphicInterpolate(M,A,O){return o(M,A,O,r)}}(0,S.g)("FlowGraphMathInterpolationBlock",n);class a extends Q.b{constructor(M){super(z.b,z.b,z.f,((M,A)=>this._polymorphicEq(M,A)),"FlowGraphEqualityBlock",M)}_polymorphicEq(M,A){const O=(0,J.g)(M),S=(0,J.g)(A);return typeof M===typeof A&&((0,J.e)(O,S)||(0,J.c)(O,S)||(0,J.b)(O,S)?M.equals(A):M===A)}}function V(M,A,O){if((0,J.p)(M)&&(0,J.p)(A))return O((0,J.n)(M),(0,J.n)(A));throw new Error("Cannot compare ".concat(M," and ").concat(A))}(0,S.g)("FlowGraphEqualityBlock",a);class Z extends Q.b{constructor(M){super(z.b,z.b,z.f,((M,A)=>this._polymorphicLessThan(M,A)),"FlowGraphLessThanBlock",M)}_polymorphicLessThan(M,A){return V(M,A,((M,A)=>M<A))}}(0,S.g)("FlowGraphLessThanBlock",Z);class P extends Q.b{constructor(M){super(z.b,z.b,z.f,((M,A)=>this._polymorphicLessThanOrEqual(M,A)),"FlowGraphLessThanOrEqualBlock",M)}_polymorphicLessThanOrEqual(M,A){return V(M,A,((M,A)=>M<=A))}}(0,S.g)("FlowGraphLessThanOrEqualBlock",P);class mM extends Q.b{constructor(M){super(z.b,z.b,z.f,((M,A)=>this._polymorphicGreaterThan(M,A)),"FlowGraphGreaterThanBlock",M)}_polymorphicGreaterThan(M,A){return V(M,A,((M,A)=>M>A))}}(0,S.g)("FlowGraphGreaterThanBlock",mM);class R extends Q.b{constructor(M){super(z.b,z.b,z.f,((M,A)=>this._polymorphicGreaterThanOrEqual(M,A)),"FlowGraphGreaterThanOrEqualBlock",M)}_polymorphicGreaterThanOrEqual(M,A){return V(M,A,((M,A)=>M>=A))}}(0,S.g)("FlowGraphGreaterThanOrEqualBlock",R);class k extends B.e{constructor(M){super(z.b,z.f,(M=>this._polymorphicIsNan(M)),"FlowGraphIsNaNBlock",M)}_polymorphicIsNan(M){if((0,J.p)(M,!0))return isNaN((0,J.n)(M));throw new Error("Cannot get NaN of ".concat(M))}}(0,S.g)("FlowGraphIsNaNBlock",k);class W extends B.e{constructor(M){super(z.b,z.f,(M=>this._polymorphicIsInf(M)),"FlowGraphIsInfBlock",M)}_polymorphicIsInf(M){if((0,J.p)(M))return!isFinite((0,J.n)(M));throw new Error("Cannot get isInf of ".concat(M))}}(0,S.g)("FlowGraphIsInfBlock",W);class l extends B.e{constructor(M){super(z.b,z.b,(M=>this._polymorphicDegToRad(M)),"FlowGraphDegToRadBlock",M)}_degToRad(M){return M*Math.PI/180}_polymorphicDegToRad(M){return H(M,this._degToRad)}}(0,S.g)("FlowGraphDegToRadBlock",l);class MM extends B.e{constructor(M){super(z.b,z.b,(M=>this._polymorphicRadToDeg(M)),"FlowGraphRadToDegBlock",M)}_radToDeg(M){return 180*M/Math.PI}_polymorphicRadToDeg(M){return H(M,this._radToDeg)}}(0,S.g)("FlowGraphRadToDegBlock",MM);class AM extends B.e{constructor(M){super(z.t,z.t,(M=>this._polymorphicSin(M)),"FlowGraphSinBlock",M)}_polymorphicSin(M){return H(M,Math.sin)}}class OM extends B.e{constructor(M){super(z.t,z.t,(M=>this._polymorphicCos(M)),"FlowGraphCosBlock",M)}_polymorphicCos(M){return H(M,Math.cos)}}class SM extends B.e{constructor(M){super(z.t,z.t,(M=>this._polymorphicTan(M)),"FlowGraphTanBlock",M)}_polymorphicTan(M){return H(M,Math.tan)}}class zM extends B.e{constructor(M){super(z.t,z.t,(M=>this._polymorphicAsin(M)),"FlowGraphASinBlock",M)}_polymorphicAsin(M){return H(M,Math.asin)}}(0,S.g)("FlowGraphASinBlock",zM);class QM extends B.e{constructor(M){super(z.t,z.t,(M=>this._polymorphicAcos(M)),"FlowGraphACosBlock",M)}_polymorphicAcos(M){return H(M,Math.acos)}}(0,S.g)("FlowGraphACosBlock",QM);class XM extends B.e{constructor(M){super(z.t,z.t,(M=>this._polymorphicAtan(M)),"FlowGraphATanBlock",M)}_polymorphicAtan(M){return H(M,Math.atan)}}(0,S.g)("FlowGraphATanBlock",XM);class cM extends Q.b{constructor(M){super(z.b,z.b,z.b,((M,A)=>this._polymorphicAtan2(M,A)),"FlowGraphATan2Block",M)}_polymorphicAtan2(M,A){return i(M,A,Math.atan2)}}(0,S.g)("FlowGraphATan2Block",cM);class jM extends B.e{constructor(M){super(z.b,z.b,(M=>this._polymorphicSinh(M)),"FlowGraphSinhBlock",M)}_polymorphicSinh(M){return H(M,Math.sinh)}}(0,S.g)("FlowGraphSinhBlock",jM);class BM extends B.e{constructor(M){super(z.b,z.b,(M=>this._polymorphicCosh(M)),"FlowGraphCoshBlock",M)}_polymorphicCosh(M){return H(M,Math.cosh)}}(0,S.g)("FlowGraphCoshBlock",BM);class gM extends B.e{constructor(M){super(z.b,z.b,(M=>this._polymorphicTanh(M)),"FlowGraphTanhBlock",M)}_polymorphicTanh(M){return H(M,Math.tanh)}}(0,S.g)("FlowGraphTanhBlock",gM);class eM extends B.e{constructor(M){super(z.b,z.t,(M=>this._polymorphicAsinh(M)),"FlowGraphASinhBlock",M)}_polymorphicAsinh(M){return H(M,Math.asinh)}}(0,S.g)("FlowGraphASinhBlock",eM);class TM extends B.e{constructor(M){super(z.b,z.t,(M=>this._polymorphicAcosh(M)),"FlowGraphACoshBlock",M)}_polymorphicAcosh(M){return H(M,Math.acosh)}}(0,S.g)("FlowGraphACoshBlock",TM);class JM extends B.e{constructor(M){super(z.b,z.t,(M=>this._polymorphicAtanh(M)),"FlowGraphATanhBlock",M)}_polymorphicAtanh(M){return H(M,Math.atanh)}}(0,S.g)("FlowGraphATanhBlock",JM);class KM extends B.e{constructor(M){super(z.b,z.t,(M=>this._polymorphicExp(M)),"FlowGraphExponentialBlock",M)}_polymorphicExp(M){return H(M,Math.exp)}}(0,S.g)("FlowGraphExponentialBlock",KM);class GM extends B.e{constructor(M){super(z.b,z.t,(M=>this._polymorphicLog(M)),"FlowGraphLogBlock",M)}_polymorphicLog(M){return H(M,Math.log)}}(0,S.g)("FlowGraphLogBlock",GM);class dM extends B.e{constructor(M){super(z.b,z.t,(M=>this._polymorphicLog2(M)),"FlowGraphLog2Block",M)}_polymorphicLog2(M){return H(M,Math.log2)}}(0,S.g)("FlowGraphLog2Block",dM);class wM extends B.e{constructor(M){super(z.b,z.t,(M=>this._polymorphicLog10(M)),"FlowGraphLog10Block",M)}_polymorphicLog10(M){return H(M,Math.log10)}}(0,S.g)("FlowGraphLog10Block",wM);class IM extends B.e{constructor(M){super(z.b,z.t,(M=>this._polymorphicSqrt(M)),"FlowGraphSquareRootBlock",M)}_polymorphicSqrt(M){return H(M,Math.sqrt)}}(0,S.g)("FlowGraphSquareRootBlock",IM);class bM extends B.e{constructor(M){super(z.b,z.t,(M=>this._polymorphicCubeRoot(M)),"FlowGraphCubeRootBlock",M)}_polymorphicCubeRoot(M){return H(M,Math.cbrt)}}(0,S.g)("FlowGraphCubeRootBlock",bM);class sM extends Q.b{constructor(M){super(z.b,z.t,z.t,((M,A)=>this._polymorphicPow(M,A)),"FlowGraphPowerBlock",M)}_polymorphicPow(M,A){return i(M,A,Math.pow)}}(0,S.g)("FlowGraphPowerBlock",sM);class YM extends B.e{constructor(M){super((0,z.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,z.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(M=>"boolean"===typeof M?!M:"number"===typeof M?~M:new e.b(~M.value)),"FlowGraphBitwiseNotBlock",M)}}(0,S.g)("FlowGraphBitwiseNotBlock",YM);class EM extends Q.b{constructor(M){super((0,z.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,z.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,z.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),((M,A)=>{if("boolean"===typeof M&&"boolean"===typeof A)return M&&A;if("number"===typeof M&&"number"===typeof A)return M&A;if("object"===typeof M&&"object"===typeof A)return new e.b(M.value&A.value);throw new Error("Cannot perform bitwise AND on ".concat(M," and ").concat(A))}),"FlowGraphBitwiseAndBlock",M)}}(0,S.g)("FlowGraphBitwiseAndBlock",EM);class HM extends Q.b{constructor(M){super((0,z.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,z.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,z.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),((M,A)=>{if("boolean"===typeof M&&"boolean"===typeof A)return M||A;if("number"===typeof M&&"number"===typeof A)return M|A;if("object"===typeof M&&"object"===typeof A)return new e.b(M.value|A.value);throw new Error("Cannot perform bitwise OR on ".concat(M," and ").concat(A))}),"FlowGraphBitwiseOrBlock",M)}}(0,S.g)("FlowGraphBitwiseOrBlock",HM);class CM extends Q.b{constructor(M){super((0,z.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,z.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,z.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),((M,A)=>{if("boolean"===typeof M&&"boolean"===typeof A)return M!==A;if("number"===typeof M&&"number"===typeof A)return M^A;if("object"===typeof M&&"object"===typeof A)return new e.b(M.value^A.value);throw new Error("Cannot perform bitwise XOR on ".concat(M," and ").concat(A))}),"FlowGraphBitwiseXorBlock",M)}}(0,S.g)("FlowGraphBitwiseXorBlock",CM);class fM extends Q.b{constructor(M){super(z.h,z.h,z.h,((M,A)=>new e.b(M.value<<A.value)),"FlowGraphBitwiseLeftShiftBlock",M)}}(0,S.g)("FlowGraphBitwiseLeftShiftBlock",fM);class DM extends Q.b{constructor(M){super(z.h,z.h,z.h,((M,A)=>new e.b(M.value>>A.value)),"FlowGraphBitwiseRightShiftBlock",M)}}(0,S.g)("FlowGraphBitwiseRightShiftBlock",DM);class FM extends B.e{constructor(M){super(z.h,z.h,(M=>new e.b(Math.clz32(M.value))),"FlowGraphLeadingZerosBlock",M)}}(0,S.g)("FlowGraphLeadingZerosBlock",FM);class NM extends B.e{constructor(M){super(z.h,z.h,(M=>new e.b(M.value?31-Math.clz32(M.value&-M.value):32)),"FlowGraphTrailingZerosBlock",M)}}(0,S.g)("FlowGraphTrailingZerosBlock",NM);class yM extends B.e{constructor(M){super(z.h,z.h,(M=>new e.b(function(M){let A=0;for(;M;)A+=1&M,M>>=1;return A}(M.value))),"FlowGraphOneBitsCounterBlock",M)}}(0,S.g)("FlowGraphOneBitsCounterBlock",yM)},15842:(M,A,O)=>{O.d(A,{b:()=>z});var S=O(15851);class z extends S.c{constructor(M,A,O,S,z,Q){super(O,Q),this._operation=S,this._className=z,this.a=this.registerDataInput("a",M),this.b=this.registerDataInput("b",A)}_doOperation(M){const A=this.a.getValue(M),O=this.b.getValue(M);return this._operation(A,O)}getClassName(){return this._className}}},15851:(M,A,O)=>{O.d(A,{c:()=>c});var S=O(14255),z=O(14238);const Q="cachedOperationValue",X="cachedExecutionId";class c extends S.c{constructor(M,A){super(A),this.value=this.registerDataOutput("value",M),this.isValid=this.registerDataOutput("isValid",z.f)}_updateOutputs(M){const A=M._getExecutionVariable(this,X,-1),O=M._getExecutionVariable(this,Q,null);if(void 0!==O&&null!==O&&A===M.executionId)this.isValid.setValue(!0,M),this.value.setValue(O,M);else try{const A=this._doOperation(M);if(void 0===A||null===A)return void this.isValid.setValue(!1,M);M._setExecutionVariable(this,Q,A),M._setExecutionVariable(this,X,M.executionId),this.value.setValue(A,M),this.isValid.setValue(!0,M)}catch(S){this.isValid.setValue(!1,M)}}}},15858:(M,A,O)=>{O.d(A,{e:()=>z});var S=O(15851);class z extends S.c{constructor(M,A,O,S,z){super(A,z),this._operation=O,this._className=S,this.a=this.registerDataInput("a",M)}_doOperation(M){return this._operation(this.a.getValue(M))}getClassName(){return this._className}}}}]);