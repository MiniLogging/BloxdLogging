"use strict";(self.wy695la1oic=self.wy695la1oic||[]).push([[88],{14636:(S,v,D)=>{D.r(v),D.d(v,{FlowGraphAbsBlock:()=>W,FlowGraphAcosBlock:()=>NS,FlowGraphAcoshBlock:()=>wS,FlowGraphAddBlock:()=>R,FlowGraphAsinBlock:()=>eS,FlowGraphAsinhBlock:()=>AS,FlowGraphAtan2Block:()=>BS,FlowGraphAtanBlock:()=>mS,FlowGraphAtanhBlock:()=>nS,FlowGraphBitwiseAndBlock:()=>dS,FlowGraphBitwiseLeftShiftBlock:()=>pS,FlowGraphBitwiseNotBlock:()=>rS,FlowGraphBitwiseOrBlock:()=>xS,FlowGraphBitwiseRightShiftBlock:()=>bS,FlowGraphBitwiseXorBlock:()=>WS,FlowGraphCeilBlock:()=>Z,FlowGraphClampBlock:()=>T,FlowGraphCosBlock:()=>DS,FlowGraphCoshBlock:()=>ES,FlowGraphCubeRootBlock:()=>uS,FlowGraphDegToRadBlock:()=>L,FlowGraphDivideBlock:()=>K,FlowGraphEBlock:()=>u,FlowGraphEqualityBlock:()=>U,FlowGraphExpBlock:()=>RS,FlowGraphFloorBlock:()=>k,FlowGraphFractionBlock:()=>t,FlowGraphGreaterThanBlock:()=>F,FlowGraphGreaterThanOrEqualBlock:()=>l,FlowGraphInfBlock:()=>r,FlowGraphIsInfinityBlock:()=>Q,FlowGraphIsNanBlock:()=>P,FlowGraphLeadingZerosBlock:()=>kS,FlowGraphLessThanBlock:()=>f,FlowGraphLessThanOrEqualBlock:()=>C,FlowGraphLog10Block:()=>KS,FlowGraphLog2Block:()=>IS,FlowGraphLogBlock:()=>OS,FlowGraphMathInterpolationBlock:()=>V,FlowGraphMaxBlock:()=>c,FlowGraphMinBlock:()=>M,FlowGraphModuloBlock:()=>o,FlowGraphMultiplyBlock:()=>I,FlowGraphNaNBlock:()=>d,FlowGraphNegationBlock:()=>X,FlowGraphOneBitsCounterBlock:()=>iS,FlowGraphPiBlock:()=>s,FlowGraphPowerBlock:()=>sS,FlowGraphRadToDegBlock:()=>SS,FlowGraphRandomBlock:()=>q,FlowGraphRoundBlock:()=>i,FlowGraphSaturateBlock:()=>Y,FlowGraphSignBlock:()=>p,FlowGraphSinBlock:()=>vS,FlowGraphSinhBlock:()=>gS,FlowGraphSquareRootBlock:()=>qS,FlowGraphSubtractBlock:()=>O,FlowGraphTanBlock:()=>zS,FlowGraphTanhBlock:()=>hS,FlowGraphTrailingZerosBlock:()=>ZS,FlowGraphTruncBlock:()=>b});var z=D(11329),e=D(13108),N=D(14644),m=D(14647);class B extends m.e{constructor(S,v,D,z){super(S,z),this._operation=v,this._className=D}_doOperation(S){return this._operation(S)}getClassName(){return this._className}}var g=D(11371),E=D(14651);class h extends m.e{constructor(S,v,D,z,e,N,m){super(z,m),this._operation=e,this._className=N,this.a=this.registerDataInput("a",S),this.b=this.registerDataInput("b",v),this.c=this.registerDataInput("c",D)}_doOperation(S){return this._operation(this.a.getValue(S),this.b.getValue(S),this.c.getValue(S))}getClassName(){return this._className}}var A=D(13103),w=D(13112),n=D(13139);class R extends N.d{constructor(S){super((0,e.L)(null===S||void 0===S?void 0:S.type),(0,e.L)(null===S||void 0===S?void 0:S.type),(0,e.L)(null===S||void 0===S?void 0:S.type),((S,v)=>this._polymorphicAdd(S,v)),"FlowGraphAddBlock",S)}_polymorphicAdd(S,v){const D=(0,n.k)(S),z=(0,n.k)(v);if((0,n.g)(D,z)||(0,n.d)(D,z)||(0,n.c)(D,z))return S.add(v);if("Quaternion"===D||"Vector4"===z)return new g.Vector4(S.x,S.y,S.z,S.w).addInPlace(v);if("Vector4"===D||"Quaternion"===z)return S.add(v);var e;if(null!==(e=this.config)&&void 0!==e&&e.preventIntegerFloatArithmetic&&typeof S!==typeof v)throw new Error("Cannot add different types of numbers.");return(0,n.q)(S)+(0,n.q)(v)}}(0,z.f)("FlowGraphAddBlock",R);class O extends N.d{constructor(S){super((0,e.L)(null===S||void 0===S?void 0:S.type),(0,e.L)(null===S||void 0===S?void 0:S.type),(0,e.L)(null===S||void 0===S?void 0:S.type),((S,v)=>this._polymorphicSubtract(S,v)),"FlowGraphSubtractBlock",S)}_polymorphicSubtract(S,v){const D=(0,n.k)(S),z=(0,n.k)(v);if((0,n.g)(D,z)||(0,n.c)(D,z)||(0,n.d)(D,z))return S.Ov(v);if("Quaternion"===D||"Vector4"===z)return new g.Vector4(S.x,S.y,S.z,S.w).tA(v);if("Vector4"===D||"Quaternion"===z)return S.Ov(v);var e;if(null!==(e=this.config)&&void 0!==e&&e.preventIntegerFloatArithmetic&&typeof S!==typeof v)throw new Error("Cannot add different types of numbers.");return(0,n.q)(S)-(0,n.q)(v)}}(0,z.f)("FlowGraphSubtractBlock",O);class I extends N.d{constructor(S){super((0,e.L)(null===S||void 0===S?void 0:S.type),(0,e.L)(null===S||void 0===S?void 0:S.type),(0,e.L)(null===S||void 0===S?void 0:S.type),((S,v)=>this._polymorphicMultiply(S,v)),"FlowGraphMultiplyBlock",S)}_polymorphicMultiply(S,v){const D=(0,n.k)(S),z=(0,n.k)(v);if((0,n.g)(D,z)||(0,n.c)(D,z))return S.multiply(v);if("Quaternion"===D||"Vector4"===z)return new g.Vector4(S.x,S.y,S.z,S.w).multiplyInPlace(v);if("Vector4"===D||"Quaternion"===z)return S.multiply(v);if((0,n.d)(D,z)){var e;if(null!==(e=this.config)&&void 0!==e&&e.useMatrixPerComponent){const z=S.m;for(let S=0;S<z.length;S++)z[S]*=v.m[S];return"Matrix2D"===D?new w.d(z):"Matrix3D"===D?new w.f(z):g.Matrix.uv(z)}return v.multiply(S)}var N;if(null!==(N=this.config)&&void 0!==N&&N.preventIntegerFloatArithmetic&&typeof S!==typeof v)throw new Error("Cannot add different types of numbers.");return(0,n.q)(S)*(0,n.q)(v)}}(0,z.f)("FlowGraphMultiplyBlock",I);class K extends N.d{constructor(S){super((0,e.L)(null===S||void 0===S?void 0:S.type),(0,e.L)(null===S||void 0===S?void 0:S.type),(0,e.L)(null===S||void 0===S?void 0:S.type),((S,v)=>this._polymorphicDivide(S,v)),"FlowGraphDivideBlock",S)}_polymorphicDivide(S,v){const D=(0,n.k)(S),z=(0,n.k)(v);if((0,n.g)(D,z)||(0,n.c)(D,z))return S.divide(v);if("Quaternion"===D||"Quaternion"===z){const D=S.clone();return D.x/=v.x,D.y/=v.y,D.z/=v.z,D.w/=v.w,D}if("Quaternion"===D||"Vector4"===z)return new g.Vector4(S.x,S.y,S.z,S.w).divideInPlace(v);if("Vector4"===D||"Quaternion"===z)return S.divide(v);if((0,n.d)(D,z)){var e;if(null!==(e=this.config)&&void 0!==e&&e.useMatrixPerComponent){const z=S.m;for(let S=0;S<z.length;S++)z[S]/=v.m[S];return"Matrix2D"===D?new w.d(z):"Matrix3D"===D?new w.f(z):g.Matrix.uv(z)}return S.divide(v)}var N;if(null!==(N=this.config)&&void 0!==N&&N.preventIntegerFloatArithmetic&&typeof S!==typeof v)throw new Error("Cannot add different types of numbers.");return(0,n.q)(S)/(0,n.q)(v)}}(0,z.f)("FlowGraphDivideBlock",K);class q extends B{constructor(S){super(e.q,(S=>this._random(S)),"FlowGraphRandomBlock",S),this.min=this.registerDataInput("min",e.q,(null===S||void 0===S?void 0:S.min)??0),this.max=this.registerDataInput("max",e.q,(null===S||void 0===S?void 0:S.max)??1),null!==S&&void 0!==S&&S.seed&&(this._seed=S.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const S=1e4*Math.sin(this._seed++);return S-Math.floor(S)}return Math.random()}_random(S){const v=this.min.getValue(S),D=this.max.getValue(S);return this._getRandomValue()*(D-v)+v}}(0,z.f)("FlowGraphRandomBlock",q);class u extends B{constructor(S){super(e.q,(()=>Math.E),"FlowGraphEBlock",S)}}(0,z.f)("FlowGraphEBlock",u);class s extends B{constructor(S){super(e.q,(()=>Math.PI),"FlowGraphPIBlock",S)}}(0,z.f)("FlowGraphPIBlock",s);class r extends B{constructor(S){super(e.q,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",S)}}(0,z.f)("FlowGraphInfBlock",r);class d extends B{constructor(S){super(e.q,(()=>Number.NaN),"FlowGraphNaNBlock",S)}}function x(S,v){switch((0,n.k)(S)){case"FlowGraphInteger":return new A.b(v(S.value));case"Vector2":return new g.Vector2(v(S.x),v(S.y));case"Rv":return new g.Rv(v(S.x),v(S.y),v(S.z));case"Vector4":return new g.Vector4(v(S.x),v(S.y),v(S.z),v(S.w));case"Quaternion":return new g.Quaternion(v(S.x),v(S.y),v(S.z),v(S.w));case"Matrix":return g.Matrix.uv(S.m.map(v));case"Matrix2D":return new w.d(S.m.map(v));case"Matrix3D":return new w.f(S.m.map(v));default:return v(S)}}(0,z.f)("FlowGraphNaNBlock",d);class W extends E.e{constructor(S){super(e.q,e.q,(S=>this._polymorphicAbs(S)),"FlowGraphAbsBlock",S)}_polymorphicAbs(S){return x(S,Math.abs)}}(0,z.f)("FlowGraphAbsBlock",W);class p extends E.e{constructor(S){super(e.q,e.q,(S=>this._polymorphicSign(S)),"FlowGraphSignBlock",S)}_polymorphicSign(S){return x(S,Math.sign)}}(0,z.f)("FlowGraphSignBlock",p);class b extends E.e{constructor(S){super(e.q,e.q,(S=>this._polymorphicTrunc(S)),"FlowGraphTruncBlock",S)}_polymorphicTrunc(S){return x(S,Math.trunc)}}(0,z.f)("FlowGraphTruncBlock",b);class k extends E.e{constructor(S){super(e.q,e.q,(S=>this._polymorphicFloor(S)),"FlowGraphFloorBlock",S)}_polymorphicFloor(S){return x(S,Math.floor)}}(0,z.f)("FlowGraphFloorBlock",k);class Z extends E.e{constructor(S){super(e.d,e.d,(S=>this._polymorphicCeiling(S)),"FlowGraphCeilBlock",S)}_polymorphicCeiling(S){return x(S,Math.ceil)}}(0,z.f)("FlowGraphCeilBlock",Z);class i extends E.e{constructor(S){super(e.d,e.d,(S=>this._polymorphicRound(S)),"FlowGraphRoundBlock",S)}_polymorphicRound(S){return x(S,(S=>{var v;return S<0&&null!==(v=this.config)&&void 0!==v&&v.roundHalfAwayFromZero?-Math.round(-S):Math.round(S)}))}}(0,z.f)("FlowGraphRoundBlock",i);class t extends E.e{constructor(S){super(e.d,e.d,(S=>this._polymorphicFraction(S)),"FlowGraphFractBlock",S)}_polymorphicFraction(S){return x(S,(S=>S-Math.floor(S)))}}(0,z.f)("FlowGraphFractBlock",t);class X extends E.e{constructor(S){super(e.d,e.d,(S=>this._polymorphicNeg(S)),"FlowGraphNegationBlock",S)}_polymorphicNeg(S){return x(S,(S=>-S))}}function a(S,v,D){switch((0,n.k)(S)){case"FlowGraphInteger":return new A.b(D(S.value,v.value));case"Vector2":return new g.Vector2(D(S.x,v.x),D(S.y,v.y));case"Rv":return new g.Rv(D(S.x,v.x),D(S.y,v.y),D(S.z,v.z));case"Vector4":return new g.Vector4(D(S.x,v.x),D(S.y,v.y),D(S.z,v.z),D(S.w,v.w));case"Quaternion":return new g.Quaternion(D(S.x,v.x),D(S.y,v.y),D(S.z,v.z),D(S.w,v.w));case"Matrix":return g.Matrix.uv(S.m.map(((S,z)=>D(S,v.m[z]))));case"Matrix2D":return new w.d(S.m.map(((S,z)=>D(S,v.m[z]))));case"Matrix3D":return new w.f(S.m.map(((S,z)=>D(S,v.m[z]))));default:return D((0,n.q)(S),(0,n.q)(v))}}(0,z.f)("FlowGraphNegationBlock",X);class o extends N.d{constructor(S){super(e.d,e.d,e.d,((S,v)=>this._polymorphicRemainder(S,v)),"FlowGraphModuloBlock",S)}_polymorphicRemainder(S,v){return a(S,v,((S,v)=>S%v))}}(0,z.f)("FlowGraphModuloBlock",o);class M extends N.d{constructor(S){super(e.d,e.d,e.d,((S,v)=>this._polymorphicMin(S,v)),"FlowGraphMinBlock",S)}_polymorphicMin(S,v){return a(S,v,Math.min)}}(0,z.f)("FlowGraphMinBlock",M);class c extends N.d{constructor(S){super(e.d,e.d,e.d,((S,v)=>this._polymorphicMax(S,v)),"FlowGraphMaxBlock",S)}_polymorphicMax(S,v){return a(S,v,Math.max)}}function J(S,v,D){return Math.min(Math.max(S,Math.min(v,D)),Math.max(v,D))}function H(S,v,D,z){switch((0,n.k)(S)){case"FlowGraphInteger":return new A.b(z(S.value,v.value,D.value));case"Vector2":return new g.Vector2(z(S.x,v.x,D.x),z(S.y,v.y,D.y));case"Rv":return new g.Rv(z(S.x,v.x,D.x),z(S.y,v.y,D.y),z(S.z,v.z,D.z));case"Vector4":return new g.Vector4(z(S.x,v.x,D.x),z(S.y,v.y,D.y),z(S.z,v.z,D.z),z(S.w,v.w,D.w));case"Quaternion":return new g.Quaternion(z(S.x,v.x,D.x),z(S.y,v.y,D.y),z(S.z,v.z,D.z),z(S.w,v.w,D.w));case"Matrix":return g.Matrix.uv(S.m.map(((S,e)=>z(S,v.m[e],D.m[e]))));case"Matrix2D":return new w.d(S.m.map(((S,e)=>z(S,v.m[e],D.m[e]))));case"Matrix3D":return new w.f(S.m.map(((S,e)=>z(S,v.m[e],D.m[e]))));default:return z((0,n.q)(S),(0,n.q)(v),(0,n.q)(D))}}(0,z.f)("FlowGraphMaxBlock",c);class T extends h{constructor(S){super(e.d,e.d,e.d,e.d,((S,v,D)=>this._polymorphicClamp(S,v,D)),"FlowGraphClampBlock",S)}_polymorphicClamp(S,v,D){return H(S,v,D,J)}}function G(S){return Math.min(Math.max(S,0),1)}(0,z.f)("FlowGraphClampBlock",T);class Y extends E.e{constructor(S){super(e.d,e.d,(S=>this._polymorphicSaturate(S)),"FlowGraphSaturateBlock",S)}_polymorphicSaturate(S){return x(S,G)}}function j(S,v,D){return(1-D)*S+D*v}(0,z.f)("FlowGraphSaturateBlock",Y);class V extends h{constructor(S){super(e.d,e.d,e.d,e.d,((S,v,D)=>this._polymorphicInterpolate(S,v,D)),"FlowGraphMathInterpolationBlock",S)}_polymorphicInterpolate(S,v,D){return H(S,v,D,j)}}(0,z.f)("FlowGraphMathInterpolationBlock",V);class U extends N.d{constructor(S){super(e.d,e.d,e.e,((S,v)=>this._polymorphicEq(S,v)),"FlowGraphEqualityBlock",S)}_polymorphicEq(S,v){const D=(0,n.k)(S),z=(0,n.k)(v);return typeof S===typeof v&&((0,n.g)(D,z)||(0,n.d)(D,z)||(0,n.c)(D,z)?S.equals(v):S===v)}}function y(S,v,D){if((0,n.u)(S)&&(0,n.u)(v))return D((0,n.q)(S),(0,n.q)(v));throw new Error(`Cannot compare ${S} and ${v}`)}(0,z.f)("FlowGraphEqualityBlock",U);class f extends N.d{constructor(S){super(e.d,e.d,e.e,((S,v)=>this._polymorphicLessThan(S,v)),"FlowGraphLessThanBlock",S)}_polymorphicLessThan(S,v){return y(S,v,((S,v)=>S<v))}}(0,z.f)("FlowGraphLessThanBlock",f);class C extends N.d{constructor(S){super(e.d,e.d,e.e,((S,v)=>this._polymorphicLessThanOrEqual(S,v)),"FlowGraphLessThanOrEqualBlock",S)}_polymorphicLessThanOrEqual(S,v){return y(S,v,((S,v)=>S<=v))}}(0,z.f)("FlowGraphLessThanOrEqualBlock",C);class F extends N.d{constructor(S){super(e.d,e.d,e.e,((S,v)=>this._polymorphicGreaterThan(S,v)),"FlowGraphGreaterThanBlock",S)}_polymorphicGreaterThan(S,v){return y(S,v,((S,v)=>S>v))}}(0,z.f)("FlowGraphGreaterThanBlock",F);class l extends N.d{constructor(S){super(e.d,e.d,e.e,((S,v)=>this._polymorphicGreaterThanOrEqual(S,v)),"FlowGraphGreaterThanOrEqualBlock",S)}_polymorphicGreaterThanOrEqual(S,v){return y(S,v,((S,v)=>S>=v))}}(0,z.f)("FlowGraphGreaterThanOrEqualBlock",l);class P extends E.e{constructor(S){super(e.d,e.e,(S=>this._polymorphicIsNan(S)),"FlowGraphIsNaNBlock",S)}_polymorphicIsNan(S){if((0,n.u)(S,!0))return isNaN((0,n.q)(S));throw new Error(`Cannot get NaN of ${S}`)}}(0,z.f)("FlowGraphIsNaNBlock",P);class Q extends E.e{constructor(S){super(e.d,e.e,(S=>this._polymorphicIsInf(S)),"FlowGraphIsInfBlock",S)}_polymorphicIsInf(S){if((0,n.u)(S))return!isFinite((0,n.q)(S));throw new Error(`Cannot get isInf of ${S}`)}}(0,z.f)("FlowGraphIsInfBlock",Q);class L extends E.e{constructor(S){super(e.d,e.d,(S=>this._polymorphicDegToRad(S)),"FlowGraphDegToRadBlock",S)}_degToRad(S){return S*Math.PI/180}_polymorphicDegToRad(S){return x(S,this._degToRad)}}(0,z.f)("FlowGraphDegToRadBlock",L);class SS extends E.e{constructor(S){super(e.d,e.d,(S=>this._polymorphicRadToDeg(S)),"FlowGraphRadToDegBlock",S)}_radToDeg(S){return 180*S/Math.PI}_polymorphicRadToDeg(S){return x(S,this._radToDeg)}}(0,z.f)("FlowGraphRadToDegBlock",SS);class vS extends E.e{constructor(S){super(e.q,e.q,(S=>this._polymorphicSin(S)),"FlowGraphSinBlock",S)}_polymorphicSin(S){return x(S,Math.sin)}}class DS extends E.e{constructor(S){super(e.q,e.q,(S=>this._polymorphicCos(S)),"FlowGraphCosBlock",S)}_polymorphicCos(S){return x(S,Math.cos)}}class zS extends E.e{constructor(S){super(e.q,e.q,(S=>this._polymorphicTan(S)),"FlowGraphTanBlock",S)}_polymorphicTan(S){return x(S,Math.tan)}}class eS extends E.e{constructor(S){super(e.q,e.q,(S=>this._polymorphicAsin(S)),"FlowGraphASinBlock",S)}_polymorphicAsin(S){return x(S,Math.asin)}}(0,z.f)("FlowGraphASinBlock",eS);class NS extends E.e{constructor(S){super(e.q,e.q,(S=>this._polymorphicAcos(S)),"FlowGraphACosBlock",S)}_polymorphicAcos(S){return x(S,Math.acos)}}(0,z.f)("FlowGraphACosBlock",NS);class mS extends E.e{constructor(S){super(e.q,e.q,(S=>this._polymorphicAtan(S)),"FlowGraphATanBlock",S)}_polymorphicAtan(S){return x(S,Math.atan)}}(0,z.f)("FlowGraphATanBlock",mS);class BS extends N.d{constructor(S){super(e.d,e.d,e.d,((S,v)=>this._polymorphicAtan2(S,v)),"FlowGraphATan2Block",S)}_polymorphicAtan2(S,v){return a(S,v,Math.atan2)}}(0,z.f)("FlowGraphATan2Block",BS);class gS extends E.e{constructor(S){super(e.d,e.d,(S=>this._polymorphicSinh(S)),"FlowGraphSinhBlock",S)}_polymorphicSinh(S){return x(S,Math.sinh)}}(0,z.f)("FlowGraphSinhBlock",gS);class ES extends E.e{constructor(S){super(e.d,e.d,(S=>this._polymorphicCosh(S)),"FlowGraphCoshBlock",S)}_polymorphicCosh(S){return x(S,Math.cosh)}}(0,z.f)("FlowGraphCoshBlock",ES);class hS extends E.e{constructor(S){super(e.d,e.d,(S=>this._polymorphicTanh(S)),"FlowGraphTanhBlock",S)}_polymorphicTanh(S){return x(S,Math.tanh)}}(0,z.f)("FlowGraphTanhBlock",hS);class AS extends E.e{constructor(S){super(e.d,e.q,(S=>this._polymorphicAsinh(S)),"FlowGraphASinhBlock",S)}_polymorphicAsinh(S){return x(S,Math.asinh)}}(0,z.f)("FlowGraphASinhBlock",AS);class wS extends E.e{constructor(S){super(e.d,e.q,(S=>this._polymorphicAcosh(S)),"FlowGraphACoshBlock",S)}_polymorphicAcosh(S){return x(S,Math.acosh)}}(0,z.f)("FlowGraphACoshBlock",wS);class nS extends E.e{constructor(S){super(e.d,e.q,(S=>this._polymorphicAtanh(S)),"FlowGraphATanhBlock",S)}_polymorphicAtanh(S){return x(S,Math.atanh)}}(0,z.f)("FlowGraphATanhBlock",nS);class RS extends E.e{constructor(S){super(e.d,e.q,(S=>this._polymorphicExp(S)),"FlowGraphExponentialBlock",S)}_polymorphicExp(S){return x(S,Math.exp)}}(0,z.f)("FlowGraphExponentialBlock",RS);class OS extends E.e{constructor(S){super(e.d,e.q,(S=>this._polymorphicLog(S)),"FlowGraphLogBlock",S)}_polymorphicLog(S){return x(S,Math.log)}}(0,z.f)("FlowGraphLogBlock",OS);class IS extends E.e{constructor(S){super(e.d,e.q,(S=>this._polymorphicLog2(S)),"FlowGraphLog2Block",S)}_polymorphicLog2(S){return x(S,Math.log2)}}(0,z.f)("FlowGraphLog2Block",IS);class KS extends E.e{constructor(S){super(e.d,e.q,(S=>this._polymorphicLog10(S)),"FlowGraphLog10Block",S)}_polymorphicLog10(S){return x(S,Math.log10)}}(0,z.f)("FlowGraphLog10Block",KS);class qS extends E.e{constructor(S){super(e.d,e.q,(S=>this._polymorphicSqrt(S)),"FlowGraphSquareRootBlock",S)}_polymorphicSqrt(S){return x(S,Math.sqrt)}}(0,z.f)("FlowGraphSquareRootBlock",qS);class uS extends E.e{constructor(S){super(e.d,e.q,(S=>this._polymorphicCubeRoot(S)),"FlowGraphCubeRootBlock",S)}_polymorphicCubeRoot(S){return x(S,Math.cbrt)}}(0,z.f)("FlowGraphCubeRootBlock",uS);class sS extends N.d{constructor(S){super(e.d,e.q,e.q,((S,v)=>this._polymorphicPow(S,v)),"FlowGraphPowerBlock",S)}_polymorphicPow(S,v){return a(S,v,Math.pow)}}(0,z.f)("FlowGraphPowerBlock",sS);class rS extends E.e{constructor(S){super((0,e.L)((null===S||void 0===S?void 0:S.valueType)||"FlowGraphInteger"),(0,e.L)((null===S||void 0===S?void 0:S.valueType)||"FlowGraphInteger"),(S=>"boolean"===typeof S?!S:"number"===typeof S?~S:new A.b(~S.value)),"FlowGraphBitwiseNotBlock",S)}}(0,z.f)("FlowGraphBitwiseNotBlock",rS);class dS extends N.d{constructor(S){super((0,e.L)((null===S||void 0===S?void 0:S.valueType)||"FlowGraphInteger"),(0,e.L)((null===S||void 0===S?void 0:S.valueType)||"FlowGraphInteger"),(0,e.L)((null===S||void 0===S?void 0:S.valueType)||"FlowGraphInteger"),((S,v)=>{if("boolean"===typeof S&&"boolean"===typeof v)return S&&v;if("number"===typeof S&&"number"===typeof v)return S&v;if("object"===typeof S&&"object"===typeof v)return new A.b(S.value&v.value);throw new Error(`Cannot perform bitwise AND on ${S} and ${v}`)}),"FlowGraphBitwiseAndBlock",S)}}(0,z.f)("FlowGraphBitwiseAndBlock",dS);class xS extends N.d{constructor(S){super((0,e.L)((null===S||void 0===S?void 0:S.valueType)||"FlowGraphInteger"),(0,e.L)((null===S||void 0===S?void 0:S.valueType)||"FlowGraphInteger"),(0,e.L)((null===S||void 0===S?void 0:S.valueType)||"FlowGraphInteger"),((S,v)=>{if("boolean"===typeof S&&"boolean"===typeof v)return S||v;if("number"===typeof S&&"number"===typeof v)return S|v;if("object"===typeof S&&"object"===typeof v)return new A.b(S.value|v.value);throw new Error(`Cannot perform bitwise OR on ${S} and ${v}`)}),"FlowGraphBitwiseOrBlock",S)}}(0,z.f)("FlowGraphBitwiseOrBlock",xS);class WS extends N.d{constructor(S){super((0,e.L)((null===S||void 0===S?void 0:S.valueType)||"FlowGraphInteger"),(0,e.L)((null===S||void 0===S?void 0:S.valueType)||"FlowGraphInteger"),(0,e.L)((null===S||void 0===S?void 0:S.valueType)||"FlowGraphInteger"),((S,v)=>{if("boolean"===typeof S&&"boolean"===typeof v)return S!==v;if("number"===typeof S&&"number"===typeof v)return S^v;if("object"===typeof S&&"object"===typeof v)return new A.b(S.value^v.value);throw new Error(`Cannot perform bitwise XOR on ${S} and ${v}`)}),"FlowGraphBitwiseXorBlock",S)}}(0,z.f)("FlowGraphBitwiseXorBlock",WS);class pS extends N.d{constructor(S){super(e.i,e.i,e.i,((S,v)=>new A.b(S.value<<v.value)),"FlowGraphBitwiseLeftShiftBlock",S)}}(0,z.f)("FlowGraphBitwiseLeftShiftBlock",pS);class bS extends N.d{constructor(S){super(e.i,e.i,e.i,((S,v)=>new A.b(S.value>>v.value)),"FlowGraphBitwiseRightShiftBlock",S)}}(0,z.f)("FlowGraphBitwiseRightShiftBlock",bS);class kS extends E.e{constructor(S){super(e.i,e.i,(S=>new A.b(Math.clz32(S.value))),"FlowGraphLeadingZerosBlock",S)}}(0,z.f)("FlowGraphLeadingZerosBlock",kS);class ZS extends E.e{constructor(S){super(e.i,e.i,(S=>new A.b(S.value?31-Math.clz32(S.value&-S.value):32)),"FlowGraphTrailingZerosBlock",S)}}(0,z.f)("FlowGraphTrailingZerosBlock",ZS);class iS extends E.e{constructor(S){super(e.i,e.i,(S=>new A.b(function(S){let v=0;for(;S;)v+=1&S,S>>=1;return v}(S.value))),"FlowGraphOneBitsCounterBlock",S)}}(0,z.f)("FlowGraphOneBitsCounterBlock",iS)},14644:(S,v,D)=>{D.d(v,{d:()=>e});var z=D(14647);class e extends z.e{constructor(S,v,D,z,e,N){super(D,N),this._operation=z,this._className=e,this.a=this.registerDataInput("a",S),this.b=this.registerDataInput("b",v)}_doOperation(S){const v=this.a.getValue(S),D=this.b.getValue(S);return this._operation(v,D)}getClassName(){return this._className}}},14647:(S,v,D)=>{D.d(v,{e:()=>B});var z=D(13123),e=D(13108);const N="cachedOperationValue",m="cachedExecutionId";class B extends z.d{constructor(S,v){super(v),this.value=this.registerDataOutput("value",S),this.isValid=this.registerDataOutput("isValid",e.e)}_updateOutputs(S){const v=S._getExecutionVariable(this,m,-1),D=S._getExecutionVariable(this,N,null);if(void 0!==D&&null!==D&&v===S.executionId)this.isValid.setValue(!0,S),this.value.setValue(D,S);else try{const v=this._doOperation(S);if(void 0===v||null===v)return void this.isValid.setValue(!1,S);S._setExecutionVariable(this,N,v),S._setExecutionVariable(this,m,S.executionId),this.value.setValue(v,S),this.isValid.setValue(!0,S)}catch(z){this.isValid.setValue(!1,S)}}}},14651:(S,v,D)=>{D.d(v,{e:()=>e});var z=D(14647);class e extends z.e{constructor(S,v,D,z,e){super(v,e),this._operation=D,this._className=z,this.a=this.registerDataInput("a",S)}_doOperation(S){return this._operation(this.a.getValue(S))}getClassName(){return this._className}}}}]);