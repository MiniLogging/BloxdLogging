"use strict";(self.a14qw1h7fq=self.a14qw1h7fq||[]).push([[88],{14376:(R,J,B)=>{B.r(J),B.d(J,{FlowGraphAbsBlock:()=>V,FlowGraphAcosBlock:()=>yR,FlowGraphAcoshBlock:()=>ER,FlowGraphAddBlock:()=>n,FlowGraphAsinBlock:()=>hR,FlowGraphAsinhBlock:()=>lR,FlowGraphAtan2Block:()=>rR,FlowGraphAtanBlock:()=>NR,FlowGraphAtanhBlock:()=>OR,FlowGraphBitwiseAndBlock:()=>xR,FlowGraphBitwiseLeftShiftBlock:()=>MR,FlowGraphBitwiseNotBlock:()=>sR,FlowGraphBitwiseOrBlock:()=>IR,FlowGraphBitwiseRightShiftBlock:()=>HR,FlowGraphBitwiseXorBlock:()=>VR,FlowGraphCeilBlock:()=>X,FlowGraphClampBlock:()=>L,FlowGraphCosBlock:()=>BR,FlowGraphCoshBlock:()=>eR,FlowGraphCubeRootBlock:()=>fR,FlowGraphDegToRadBlock:()=>U,FlowGraphDivideBlock:()=>u,FlowGraphEBlock:()=>f,FlowGraphEqualityBlock:()=>b,FlowGraphExpBlock:()=>nR,FlowGraphFloorBlock:()=>d,FlowGraphFractionBlock:()=>z,FlowGraphGreaterThanBlock:()=>m,FlowGraphGreaterThanOrEqualBlock:()=>o,FlowGraphInfBlock:()=>s,FlowGraphIsInfinityBlock:()=>Z,FlowGraphIsNanBlock:()=>t,FlowGraphLeadingZerosBlock:()=>dR,FlowGraphLessThanBlock:()=>K,FlowGraphLessThanOrEqualBlock:()=>v,FlowGraphLog10Block:()=>uR,FlowGraphLog2Block:()=>AR,FlowGraphLogBlock:()=>PR,FlowGraphMathInterpolationBlock:()=>C,FlowGraphMaxBlock:()=>Y,FlowGraphMinBlock:()=>k,FlowGraphModuloBlock:()=>W,FlowGraphMultiplyBlock:()=>A,FlowGraphNaNBlock:()=>x,FlowGraphNegationBlock:()=>p,FlowGraphOneBitsCounterBlock:()=>cR,FlowGraphPiBlock:()=>a,FlowGraphPowerBlock:()=>aR,FlowGraphRadToDegBlock:()=>RR,FlowGraphRandomBlock:()=>S,FlowGraphRoundBlock:()=>c,FlowGraphSaturateBlock:()=>T,FlowGraphSignBlock:()=>M,FlowGraphSinBlock:()=>JR,FlowGraphSinhBlock:()=>qR,FlowGraphSquareRootBlock:()=>SR,FlowGraphSubtractBlock:()=>P,FlowGraphTanBlock:()=>QR,FlowGraphTanhBlock:()=>DR,FlowGraphTrailingZerosBlock:()=>XR,FlowGraphTruncBlock:()=>H});var Q=B(11142),h=B(12894),y=B(14384),N=B(14390);class r extends N.d{constructor(R,J,B,Q){super(R,Q),this._operation=J,this._className=B}_doOperation(R){return this._operation(R)}getClassName(){return this._className}}var q=B(11186),e=B(14394);class D extends N.d{constructor(R,J,B,Q,h,y,N){super(Q,N),this._operation=h,this._className=y,this.a=this.registerDataInput("a",R),this.b=this.registerDataInput("b",J),this.c=this.registerDataInput("c",B)}_doOperation(R){return this._operation(this.a.getValue(R),this.b.getValue(R),this.c.getValue(R))}getClassName(){return this._className}}var l=B(12892),E=B(12903),O=B(12934);class n extends y.b{constructor(R){super((0,h.O)(null===R||void 0===R?void 0:R.type),(0,h.O)(null===R||void 0===R?void 0:R.type),(0,h.O)(null===R||void 0===R?void 0:R.type),((R,J)=>this._polymorphicAdd(R,J)),"FlowGraphAddBlock",R)}_polymorphicAdd(R,J){const B=(0,O.i)(R),Q=(0,O.i)(J);if((0,O.g)(B,Q)||(0,O.d)(B,Q)||(0,O.c)(B,Q))return R.add(J);if("Quaternion"===B||"Vector4"===Q)return new q.Vector4(R.x,R.y,R.z,R.w).addInPlace(J);if("Vector4"===B||"Quaternion"===Q)return R.add(J);var h;if(null!==(h=this.config)&&void 0!==h&&h.preventIntegerFloatArithmetic&&typeof R!==typeof J)throw new Error("Cannot add different types of numbers.");return(0,O.m)(R)+(0,O.m)(J)}}(0,Q.h)("FlowGraphAddBlock",n);class P extends y.b{constructor(R){super((0,h.O)(null===R||void 0===R?void 0:R.type),(0,h.O)(null===R||void 0===R?void 0:R.type),(0,h.O)(null===R||void 0===R?void 0:R.type),((R,J)=>this._polymorphicSubtract(R,J)),"FlowGraphSubtractBlock",R)}_polymorphicSubtract(R,J){const B=(0,O.i)(R),Q=(0,O.i)(J);if((0,O.g)(B,Q)||(0,O.c)(B,Q)||(0,O.d)(B,Q))return R.PJ(J);if("Quaternion"===B||"Vector4"===Q)return new q.Vector4(R.x,R.y,R.z,R.w).ul(J);if("Vector4"===B||"Quaternion"===Q)return R.PJ(J);var h;if(null!==(h=this.config)&&void 0!==h&&h.preventIntegerFloatArithmetic&&typeof R!==typeof J)throw new Error("Cannot add different types of numbers.");return(0,O.m)(R)-(0,O.m)(J)}}(0,Q.h)("FlowGraphSubtractBlock",P);class A extends y.b{constructor(R){super((0,h.O)(null===R||void 0===R?void 0:R.type),(0,h.O)(null===R||void 0===R?void 0:R.type),(0,h.O)(null===R||void 0===R?void 0:R.type),((R,J)=>this._polymorphicMultiply(R,J)),"FlowGraphMultiplyBlock",R)}_polymorphicMultiply(R,J){const B=(0,O.i)(R),Q=(0,O.i)(J);if((0,O.g)(B,Q)||(0,O.c)(B,Q))return R.multiply(J);if("Quaternion"===B||"Vector4"===Q)return new q.Vector4(R.x,R.y,R.z,R.w).multiplyInPlace(J);if("Vector4"===B||"Quaternion"===Q)return R.multiply(J);if((0,O.d)(B,Q)){var h;if(null!==(h=this.config)&&void 0!==h&&h.useMatrixPerComponent){const Q=R.m;for(let R=0;R<Q.length;R++)Q[R]*=J.m[R];return"Matrix2D"===B?new E.e(Q):"Matrix3D"===B?new E.h(Q):q.Matrix.fJ(Q)}return J.multiply(R)}var y;if(null!==(y=this.config)&&void 0!==y&&y.preventIntegerFloatArithmetic&&typeof R!==typeof J)throw new Error("Cannot add different types of numbers.");return(0,O.m)(R)*(0,O.m)(J)}}(0,Q.h)("FlowGraphMultiplyBlock",A);class u extends y.b{constructor(R){super((0,h.O)(null===R||void 0===R?void 0:R.type),(0,h.O)(null===R||void 0===R?void 0:R.type),(0,h.O)(null===R||void 0===R?void 0:R.type),((R,J)=>this._polymorphicDivide(R,J)),"FlowGraphDivideBlock",R)}_polymorphicDivide(R,J){const B=(0,O.i)(R),Q=(0,O.i)(J);if((0,O.g)(B,Q)||(0,O.c)(B,Q))return R.divide(J);if("Quaternion"===B||"Quaternion"===Q){const B=R.clone();return B.x/=J.x,B.y/=J.y,B.z/=J.z,B.w/=J.w,B}if("Quaternion"===B||"Vector4"===Q)return new q.Vector4(R.x,R.y,R.z,R.w).divideInPlace(J);if("Vector4"===B||"Quaternion"===Q)return R.divide(J);if((0,O.d)(B,Q)){var h;if(null!==(h=this.config)&&void 0!==h&&h.useMatrixPerComponent){const Q=R.m;for(let R=0;R<Q.length;R++)Q[R]/=J.m[R];return"Matrix2D"===B?new E.e(Q):"Matrix3D"===B?new E.h(Q):q.Matrix.fJ(Q)}return R.divide(J)}var y;if(null!==(y=this.config)&&void 0!==y&&y.preventIntegerFloatArithmetic&&typeof R!==typeof J)throw new Error("Cannot add different types of numbers.");return(0,O.m)(R)/(0,O.m)(J)}}(0,Q.h)("FlowGraphDivideBlock",u);class S extends r{constructor(R){super(h.t,(R=>this._random(R)),"FlowGraphRandomBlock",R),this.min=this.registerDataInput("min",h.t,(null===R||void 0===R?void 0:R.min)??0),this.max=this.registerDataInput("max",h.t,(null===R||void 0===R?void 0:R.max)??1),null!==R&&void 0!==R&&R.seed&&(this._seed=R.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const R=1e4*Math.sin(this._seed++);return R-Math.floor(R)}return Math.random()}_random(R){const J=this.min.getValue(R),B=this.max.getValue(R);return this._getRandomValue()*(B-J)+J}}(0,Q.h)("FlowGraphRandomBlock",S);class f extends r{constructor(R){super(h.t,(()=>Math.E),"FlowGraphEBlock",R)}}(0,Q.h)("FlowGraphEBlock",f);class a extends r{constructor(R){super(h.t,(()=>Math.PI),"FlowGraphPIBlock",R)}}(0,Q.h)("FlowGraphPIBlock",a);class s extends r{constructor(R){super(h.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",R)}}(0,Q.h)("FlowGraphInfBlock",s);class x extends r{constructor(R){super(h.t,(()=>Number.NaN),"FlowGraphNaNBlock",R)}}function I(R,J){switch((0,O.i)(R)){case"FlowGraphInteger":return new l.d(J(R.value));case"Vector2":return new q.Vector2(J(R.x),J(R.y));case"nJ":return new q.nJ(J(R.x),J(R.y),J(R.z));case"Vector4":return new q.Vector4(J(R.x),J(R.y),J(R.z),J(R.w));case"Quaternion":return new q.Quaternion(J(R.x),J(R.y),J(R.z),J(R.w));case"Matrix":return q.Matrix.fJ(R.m.map(J));case"Matrix2D":return new E.e(R.m.map(J));case"Matrix3D":return new E.h(R.m.map(J));default:return J(R)}}(0,Q.h)("FlowGraphNaNBlock",x);class V extends e.d{constructor(R){super(h.t,h.t,(R=>this._polymorphicAbs(R)),"FlowGraphAbsBlock",R)}_polymorphicAbs(R){return I(R,Math.abs)}}(0,Q.h)("FlowGraphAbsBlock",V);class M extends e.d{constructor(R){super(h.t,h.t,(R=>this._polymorphicSign(R)),"FlowGraphSignBlock",R)}_polymorphicSign(R){return I(R,Math.sign)}}(0,Q.h)("FlowGraphSignBlock",M);class H extends e.d{constructor(R){super(h.t,h.t,(R=>this._polymorphicTrunc(R)),"FlowGraphTruncBlock",R)}_polymorphicTrunc(R){return I(R,Math.trunc)}}(0,Q.h)("FlowGraphTruncBlock",H);class d extends e.d{constructor(R){super(h.t,h.t,(R=>this._polymorphicFloor(R)),"FlowGraphFloorBlock",R)}_polymorphicFloor(R){return I(R,Math.floor)}}(0,Q.h)("FlowGraphFloorBlock",d);class X extends e.d{constructor(R){super(h.e,h.e,(R=>this._polymorphicCeiling(R)),"FlowGraphCeilBlock",R)}_polymorphicCeiling(R){return I(R,Math.ceil)}}(0,Q.h)("FlowGraphCeilBlock",X);class c extends e.d{constructor(R){super(h.e,h.e,(R=>this._polymorphicRound(R)),"FlowGraphRoundBlock",R)}_polymorphicRound(R){return I(R,(R=>{var J;return R<0&&null!==(J=this.config)&&void 0!==J&&J.roundHalfAwayFromZero?-Math.round(-R):Math.round(R)}))}}(0,Q.h)("FlowGraphRoundBlock",c);class z extends e.d{constructor(R){super(h.e,h.e,(R=>this._polymorphicFraction(R)),"FlowGraphFractBlock",R)}_polymorphicFraction(R){return I(R,(R=>R-Math.floor(R)))}}(0,Q.h)("FlowGraphFractBlock",z);class p extends e.d{constructor(R){super(h.e,h.e,(R=>this._polymorphicNeg(R)),"FlowGraphNegationBlock",R)}_polymorphicNeg(R){return I(R,(R=>-R))}}function i(R,J,B){switch((0,O.i)(R)){case"FlowGraphInteger":return new l.d(B(R.value,J.value));case"Vector2":return new q.Vector2(B(R.x,J.x),B(R.y,J.y));case"nJ":return new q.nJ(B(R.x,J.x),B(R.y,J.y),B(R.z,J.z));case"Vector4":return new q.Vector4(B(R.x,J.x),B(R.y,J.y),B(R.z,J.z),B(R.w,J.w));case"Quaternion":return new q.Quaternion(B(R.x,J.x),B(R.y,J.y),B(R.z,J.z),B(R.w,J.w));case"Matrix":return q.Matrix.fJ(R.m.map(((R,Q)=>B(R,J.m[Q]))));case"Matrix2D":return new E.e(R.m.map(((R,Q)=>B(R,J.m[Q]))));case"Matrix3D":return new E.h(R.m.map(((R,Q)=>B(R,J.m[Q]))));default:return B((0,O.m)(R),(0,O.m)(J))}}(0,Q.h)("FlowGraphNegationBlock",p);class W extends y.b{constructor(R){super(h.e,h.e,h.e,((R,J)=>this._polymorphicRemainder(R,J)),"FlowGraphModuloBlock",R)}_polymorphicRemainder(R,J){return i(R,J,((R,J)=>R%J))}}(0,Q.h)("FlowGraphModuloBlock",W);class k extends y.b{constructor(R){super(h.e,h.e,h.e,((R,J)=>this._polymorphicMin(R,J)),"FlowGraphMinBlock",R)}_polymorphicMin(R,J){return i(R,J,Math.min)}}(0,Q.h)("FlowGraphMinBlock",k);class Y extends y.b{constructor(R){super(h.e,h.e,h.e,((R,J)=>this._polymorphicMax(R,J)),"FlowGraphMaxBlock",R)}_polymorphicMax(R,J){return i(R,J,Math.max)}}function G(R,J,B){return Math.min(Math.max(R,Math.min(J,B)),Math.max(J,B))}function g(R,J,B,Q){switch((0,O.i)(R)){case"FlowGraphInteger":return new l.d(Q(R.value,J.value,B.value));case"Vector2":return new q.Vector2(Q(R.x,J.x,B.x),Q(R.y,J.y,B.y));case"nJ":return new q.nJ(Q(R.x,J.x,B.x),Q(R.y,J.y,B.y),Q(R.z,J.z,B.z));case"Vector4":return new q.Vector4(Q(R.x,J.x,B.x),Q(R.y,J.y,B.y),Q(R.z,J.z,B.z),Q(R.w,J.w,B.w));case"Quaternion":return new q.Quaternion(Q(R.x,J.x,B.x),Q(R.y,J.y,B.y),Q(R.z,J.z,B.z),Q(R.w,J.w,B.w));case"Matrix":return q.Matrix.fJ(R.m.map(((R,h)=>Q(R,J.m[h],B.m[h]))));case"Matrix2D":return new E.e(R.m.map(((R,h)=>Q(R,J.m[h],B.m[h]))));case"Matrix3D":return new E.h(R.m.map(((R,h)=>Q(R,J.m[h],B.m[h]))));default:return Q((0,O.m)(R),(0,O.m)(J),(0,O.m)(B))}}(0,Q.h)("FlowGraphMaxBlock",Y);class L extends D{constructor(R){super(h.e,h.e,h.e,h.e,((R,J,B)=>this._polymorphicClamp(R,J,B)),"FlowGraphClampBlock",R)}_polymorphicClamp(R,J,B){return g(R,J,B,G)}}function j(R){return Math.min(Math.max(R,0),1)}(0,Q.h)("FlowGraphClampBlock",L);class T extends e.d{constructor(R){super(h.e,h.e,(R=>this._polymorphicSaturate(R)),"FlowGraphSaturateBlock",R)}_polymorphicSaturate(R){return I(R,j)}}function F(R,J,B){return(1-B)*R+B*J}(0,Q.h)("FlowGraphSaturateBlock",T);class C extends D{constructor(R){super(h.e,h.e,h.e,h.e,((R,J,B)=>this._polymorphicInterpolate(R,J,B)),"FlowGraphMathInterpolationBlock",R)}_polymorphicInterpolate(R,J,B){return g(R,J,B,F)}}(0,Q.h)("FlowGraphMathInterpolationBlock",C);class b extends y.b{constructor(R){super(h.e,h.e,h.g,((R,J)=>this._polymorphicEq(R,J)),"FlowGraphEqualityBlock",R)}_polymorphicEq(R,J){const B=(0,O.i)(R),Q=(0,O.i)(J);return typeof R===typeof J&&((0,O.g)(B,Q)||(0,O.d)(B,Q)||(0,O.c)(B,Q)?R.equals(J):R===J)}}function w(R,J,B){if((0,O.o)(R)&&(0,O.o)(J))return B((0,O.m)(R),(0,O.m)(J));throw new Error(`Cannot compare ${R} and ${J}`)}(0,Q.h)("FlowGraphEqualityBlock",b);class K extends y.b{constructor(R){super(h.e,h.e,h.g,((R,J)=>this._polymorphicLessThan(R,J)),"FlowGraphLessThanBlock",R)}_polymorphicLessThan(R,J){return w(R,J,((R,J)=>R<J))}}(0,Q.h)("FlowGraphLessThanBlock",K);class v extends y.b{constructor(R){super(h.e,h.e,h.g,((R,J)=>this._polymorphicLessThanOrEqual(R,J)),"FlowGraphLessThanOrEqualBlock",R)}_polymorphicLessThanOrEqual(R,J){return w(R,J,((R,J)=>R<=J))}}(0,Q.h)("FlowGraphLessThanOrEqualBlock",v);class m extends y.b{constructor(R){super(h.e,h.e,h.g,((R,J)=>this._polymorphicGreaterThan(R,J)),"FlowGraphGreaterThanBlock",R)}_polymorphicGreaterThan(R,J){return w(R,J,((R,J)=>R>J))}}(0,Q.h)("FlowGraphGreaterThanBlock",m);class o extends y.b{constructor(R){super(h.e,h.e,h.g,((R,J)=>this._polymorphicGreaterThanOrEqual(R,J)),"FlowGraphGreaterThanOrEqualBlock",R)}_polymorphicGreaterThanOrEqual(R,J){return w(R,J,((R,J)=>R>=J))}}(0,Q.h)("FlowGraphGreaterThanOrEqualBlock",o);class t extends e.d{constructor(R){super(h.e,h.g,(R=>this._polymorphicIsNan(R)),"FlowGraphIsNaNBlock",R)}_polymorphicIsNan(R){if((0,O.o)(R,!0))return isNaN((0,O.m)(R));throw new Error(`Cannot get NaN of ${R}`)}}(0,Q.h)("FlowGraphIsNaNBlock",t);class Z extends e.d{constructor(R){super(h.e,h.g,(R=>this._polymorphicIsInf(R)),"FlowGraphIsInfBlock",R)}_polymorphicIsInf(R){if((0,O.o)(R))return!isFinite((0,O.m)(R));throw new Error(`Cannot get isInf of ${R}`)}}(0,Q.h)("FlowGraphIsInfBlock",Z);class U extends e.d{constructor(R){super(h.e,h.e,(R=>this._polymorphicDegToRad(R)),"FlowGraphDegToRadBlock",R)}_degToRad(R){return R*Math.PI/180}_polymorphicDegToRad(R){return I(R,this._degToRad)}}(0,Q.h)("FlowGraphDegToRadBlock",U);class RR extends e.d{constructor(R){super(h.e,h.e,(R=>this._polymorphicRadToDeg(R)),"FlowGraphRadToDegBlock",R)}_radToDeg(R){return 180*R/Math.PI}_polymorphicRadToDeg(R){return I(R,this._radToDeg)}}(0,Q.h)("FlowGraphRadToDegBlock",RR);class JR extends e.d{constructor(R){super(h.t,h.t,(R=>this._polymorphicSin(R)),"FlowGraphSinBlock",R)}_polymorphicSin(R){return I(R,Math.sin)}}class BR extends e.d{constructor(R){super(h.t,h.t,(R=>this._polymorphicCos(R)),"FlowGraphCosBlock",R)}_polymorphicCos(R){return I(R,Math.cos)}}class QR extends e.d{constructor(R){super(h.t,h.t,(R=>this._polymorphicTan(R)),"FlowGraphTanBlock",R)}_polymorphicTan(R){return I(R,Math.tan)}}class hR extends e.d{constructor(R){super(h.t,h.t,(R=>this._polymorphicAsin(R)),"FlowGraphASinBlock",R)}_polymorphicAsin(R){return I(R,Math.asin)}}(0,Q.h)("FlowGraphASinBlock",hR);class yR extends e.d{constructor(R){super(h.t,h.t,(R=>this._polymorphicAcos(R)),"FlowGraphACosBlock",R)}_polymorphicAcos(R){return I(R,Math.acos)}}(0,Q.h)("FlowGraphACosBlock",yR);class NR extends e.d{constructor(R){super(h.t,h.t,(R=>this._polymorphicAtan(R)),"FlowGraphATanBlock",R)}_polymorphicAtan(R){return I(R,Math.atan)}}(0,Q.h)("FlowGraphATanBlock",NR);class rR extends y.b{constructor(R){super(h.e,h.e,h.e,((R,J)=>this._polymorphicAtan2(R,J)),"FlowGraphATan2Block",R)}_polymorphicAtan2(R,J){return i(R,J,Math.atan2)}}(0,Q.h)("FlowGraphATan2Block",rR);class qR extends e.d{constructor(R){super(h.e,h.e,(R=>this._polymorphicSinh(R)),"FlowGraphSinhBlock",R)}_polymorphicSinh(R){return I(R,Math.sinh)}}(0,Q.h)("FlowGraphSinhBlock",qR);class eR extends e.d{constructor(R){super(h.e,h.e,(R=>this._polymorphicCosh(R)),"FlowGraphCoshBlock",R)}_polymorphicCosh(R){return I(R,Math.cosh)}}(0,Q.h)("FlowGraphCoshBlock",eR);class DR extends e.d{constructor(R){super(h.e,h.e,(R=>this._polymorphicTanh(R)),"FlowGraphTanhBlock",R)}_polymorphicTanh(R){return I(R,Math.tanh)}}(0,Q.h)("FlowGraphTanhBlock",DR);class lR extends e.d{constructor(R){super(h.e,h.t,(R=>this._polymorphicAsinh(R)),"FlowGraphASinhBlock",R)}_polymorphicAsinh(R){return I(R,Math.asinh)}}(0,Q.h)("FlowGraphASinhBlock",lR);class ER extends e.d{constructor(R){super(h.e,h.t,(R=>this._polymorphicAcosh(R)),"FlowGraphACoshBlock",R)}_polymorphicAcosh(R){return I(R,Math.acosh)}}(0,Q.h)("FlowGraphACoshBlock",ER);class OR extends e.d{constructor(R){super(h.e,h.t,(R=>this._polymorphicAtanh(R)),"FlowGraphATanhBlock",R)}_polymorphicAtanh(R){return I(R,Math.atanh)}}(0,Q.h)("FlowGraphATanhBlock",OR);class nR extends e.d{constructor(R){super(h.e,h.t,(R=>this._polymorphicExp(R)),"FlowGraphExponentialBlock",R)}_polymorphicExp(R){return I(R,Math.exp)}}(0,Q.h)("FlowGraphExponentialBlock",nR);class PR extends e.d{constructor(R){super(h.e,h.t,(R=>this._polymorphicLog(R)),"FlowGraphLogBlock",R)}_polymorphicLog(R){return I(R,Math.log)}}(0,Q.h)("FlowGraphLogBlock",PR);class AR extends e.d{constructor(R){super(h.e,h.t,(R=>this._polymorphicLog2(R)),"FlowGraphLog2Block",R)}_polymorphicLog2(R){return I(R,Math.log2)}}(0,Q.h)("FlowGraphLog2Block",AR);class uR extends e.d{constructor(R){super(h.e,h.t,(R=>this._polymorphicLog10(R)),"FlowGraphLog10Block",R)}_polymorphicLog10(R){return I(R,Math.log10)}}(0,Q.h)("FlowGraphLog10Block",uR);class SR extends e.d{constructor(R){super(h.e,h.t,(R=>this._polymorphicSqrt(R)),"FlowGraphSquareRootBlock",R)}_polymorphicSqrt(R){return I(R,Math.sqrt)}}(0,Q.h)("FlowGraphSquareRootBlock",SR);class fR extends e.d{constructor(R){super(h.e,h.t,(R=>this._polymorphicCubeRoot(R)),"FlowGraphCubeRootBlock",R)}_polymorphicCubeRoot(R){return I(R,Math.cbrt)}}(0,Q.h)("FlowGraphCubeRootBlock",fR);class aR extends y.b{constructor(R){super(h.e,h.t,h.t,((R,J)=>this._polymorphicPow(R,J)),"FlowGraphPowerBlock",R)}_polymorphicPow(R,J){return i(R,J,Math.pow)}}(0,Q.h)("FlowGraphPowerBlock",aR);class sR extends e.d{constructor(R){super((0,h.O)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),(0,h.O)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),(R=>"boolean"===typeof R?!R:"number"===typeof R?~R:new l.d(~R.value)),"FlowGraphBitwiseNotBlock",R)}}(0,Q.h)("FlowGraphBitwiseNotBlock",sR);class xR extends y.b{constructor(R){super((0,h.O)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),(0,h.O)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),(0,h.O)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),((R,J)=>{if("boolean"===typeof R&&"boolean"===typeof J)return R&&J;if("number"===typeof R&&"number"===typeof J)return R&J;if("object"===typeof R&&"object"===typeof J)return new l.d(R.value&J.value);throw new Error(`Cannot perform bitwise AND on ${R} and ${J}`)}),"FlowGraphBitwiseAndBlock",R)}}(0,Q.h)("FlowGraphBitwiseAndBlock",xR);class IR extends y.b{constructor(R){super((0,h.O)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),(0,h.O)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),(0,h.O)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),((R,J)=>{if("boolean"===typeof R&&"boolean"===typeof J)return R||J;if("number"===typeof R&&"number"===typeof J)return R|J;if("object"===typeof R&&"object"===typeof J)return new l.d(R.value|J.value);throw new Error(`Cannot perform bitwise OR on ${R} and ${J}`)}),"FlowGraphBitwiseOrBlock",R)}}(0,Q.h)("FlowGraphBitwiseOrBlock",IR);class VR extends y.b{constructor(R){super((0,h.O)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),(0,h.O)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),(0,h.O)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),((R,J)=>{if("boolean"===typeof R&&"boolean"===typeof J)return R!==J;if("number"===typeof R&&"number"===typeof J)return R^J;if("object"===typeof R&&"object"===typeof J)return new l.d(R.value^J.value);throw new Error(`Cannot perform bitwise XOR on ${R} and ${J}`)}),"FlowGraphBitwiseXorBlock",R)}}(0,Q.h)("FlowGraphBitwiseXorBlock",VR);class MR extends y.b{constructor(R){super(h.k,h.k,h.k,((R,J)=>new l.d(R.value<<J.value)),"FlowGraphBitwiseLeftShiftBlock",R)}}(0,Q.h)("FlowGraphBitwiseLeftShiftBlock",MR);class HR extends y.b{constructor(R){super(h.k,h.k,h.k,((R,J)=>new l.d(R.value>>J.value)),"FlowGraphBitwiseRightShiftBlock",R)}}(0,Q.h)("FlowGraphBitwiseRightShiftBlock",HR);class dR extends e.d{constructor(R){super(h.k,h.k,(R=>new l.d(Math.clz32(R.value))),"FlowGraphLeadingZerosBlock",R)}}(0,Q.h)("FlowGraphLeadingZerosBlock",dR);class XR extends e.d{constructor(R){super(h.k,h.k,(R=>new l.d(R.value?31-Math.clz32(R.value&-R.value):32)),"FlowGraphTrailingZerosBlock",R)}}(0,Q.h)("FlowGraphTrailingZerosBlock",XR);class cR extends e.d{constructor(R){super(h.k,h.k,(R=>new l.d(function(R){let J=0;for(;R;)J+=1&R,R>>=1;return J}(R.value))),"FlowGraphOneBitsCounterBlock",R)}}(0,Q.h)("FlowGraphOneBitsCounterBlock",cR)},14384:(R,J,B)=>{B.d(J,{b:()=>h});var Q=B(14390);class h extends Q.d{constructor(R,J,B,Q,h,y){super(B,y),this._operation=Q,this._className=h,this.a=this.registerDataInput("a",R),this.b=this.registerDataInput("b",J)}_doOperation(R){const J=this.a.getValue(R),B=this.b.getValue(R);return this._operation(J,B)}getClassName(){return this._className}}},14390:(R,J,B)=>{B.d(J,{d:()=>r});var Q=B(12922),h=B(12894);const y="cachedOperationValue",N="cachedExecutionId";class r extends Q.c{constructor(R,J){super(J),this.value=this.registerDataOutput("value",R),this.isValid=this.registerDataOutput("isValid",h.g)}_updateOutputs(R){const J=R._getExecutionVariable(this,N,-1),B=R._getExecutionVariable(this,y,null);if(void 0!==B&&null!==B&&J===R.executionId)this.isValid.setValue(!0,R),this.value.setValue(B,R);else try{const J=this._doOperation(R);if(void 0===J||null===J)return void this.isValid.setValue(!1,R);R._setExecutionVariable(this,y,J),R._setExecutionVariable(this,N,R.executionId),this.value.setValue(J,R),this.isValid.setValue(!0,R)}catch(Q){this.isValid.setValue(!1,R)}}}},14394:(R,J,B)=>{B.d(J,{d:()=>h});var Q=B(14390);class h extends Q.d{constructor(R,J,B,Q,h){super(J,h),this._operation=B,this._className=Q,this.a=this.registerDataInput("a",R)}_doOperation(R){return this._operation(this.a.getValue(R))}getClassName(){return this._className}}}}]);