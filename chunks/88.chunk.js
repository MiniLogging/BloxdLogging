"use strict";(self["9d4d30r2sf"]=self["9d4d30r2sf"]||[]).push([[88],{15719:(o,v,V)=>{V.r(v),V.d(v,{FlowGraphAbsBlock:()=>mo,FlowGraphAcosBlock:()=>Io,FlowGraphAcoshBlock:()=>fo,FlowGraphAddBlock:()=>S,FlowGraphAsinBlock:()=>Eo,FlowGraphAsinhBlock:()=>xo,FlowGraphAtan2Block:()=>Uo,FlowGraphAtanBlock:()=>Qo,FlowGraphAtanhBlock:()=>lo,FlowGraphBitwiseAndBlock:()=>bo,FlowGraphBitwiseLeftShiftBlock:()=>ao,FlowGraphBitwiseNotBlock:()=>Lo,FlowGraphBitwiseOrBlock:()=>uo,FlowGraphBitwiseRightShiftBlock:()=>Fo,FlowGraphBitwiseXorBlock:()=>mv,FlowGraphCeilBlock:()=>J,FlowGraphClampBlock:()=>y,FlowGraphCosBlock:()=>Vo,FlowGraphCoshBlock:()=>Oo,FlowGraphCubeRootBlock:()=>to,FlowGraphDegToRadBlock:()=>k,FlowGraphDivideBlock:()=>R,FlowGraphEBlock:()=>t,FlowGraphEqualityBlock:()=>K,FlowGraphExpBlock:()=>So,FlowGraphFloorBlock:()=>i,FlowGraphFractionBlock:()=>N,FlowGraphGreaterThanBlock:()=>A,FlowGraphGreaterThanOrEqualBlock:()=>C,FlowGraphInfBlock:()=>L,FlowGraphIsInfinityBlock:()=>G,FlowGraphIsNanBlock:()=>p,FlowGraphLeadingZerosBlock:()=>io,FlowGraphLessThanBlock:()=>r,FlowGraphLessThanOrEqualBlock:()=>B,FlowGraphLog10Block:()=>Ro,FlowGraphLog2Block:()=>co,FlowGraphLogBlock:()=>To,FlowGraphMathInterpolationBlock:()=>Z,FlowGraphMaxBlock:()=>W,FlowGraphMinBlock:()=>M,FlowGraphModuloBlock:()=>P,FlowGraphMultiplyBlock:()=>c,FlowGraphNaNBlock:()=>b,FlowGraphNegationBlock:()=>Y,FlowGraphOneBitsCounterBlock:()=>No,FlowGraphPiBlock:()=>s,FlowGraphPowerBlock:()=>so,FlowGraphRadToDegBlock:()=>oo,FlowGraphRandomBlock:()=>j,FlowGraphRoundBlock:()=>d,FlowGraphSaturateBlock:()=>e,FlowGraphSignBlock:()=>a,FlowGraphSinBlock:()=>vo,FlowGraphSinhBlock:()=>no,FlowGraphSquareRootBlock:()=>jo,FlowGraphSubtractBlock:()=>T,FlowGraphTanBlock:()=>go,FlowGraphTanhBlock:()=>ho,FlowGraphTrailingZerosBlock:()=>Jo,FlowGraphTruncBlock:()=>F});var g=V(12449),E=V(14241),I=V(15723),Q=V(15726);class U extends Q.b{constructor(o,v,V,g){super(o,g),this._operation=v,this._className=V}_doOperation(o){return this._operation(o)}getClassName(){return this._className}}var n=V(12488),O=V(15732);class h extends Q.b{constructor(o,v,V,g,E,I,Q){super(g,Q),this._operation=E,this._className=I,this.a=this.registerDataInput("a",o),this.b=this.registerDataInput("b",v),this.c=this.registerDataInput("c",V)}_doOperation(o){return this._operation(this.a.getValue(o),this.b.getValue(o),this.c.getValue(o))}getClassName(){return this._className}}var x=V(14236),f=V(14243),l=V(14267);class S extends I.b{constructor(o){super((0,E.M)(null===o||void 0===o?void 0:o.type),(0,E.M)(null===o||void 0===o?void 0:o.type),(0,E.M)(null===o||void 0===o?void 0:o.type),((o,v)=>this._polymorphicAdd(o,v)),"FlowGraphAddBlock",o)}_polymorphicAdd(o,v){const V=(0,l.i)(o),g=(0,l.i)(v);if((0,l.h)(V,g)||(0,l.e)(V,g)||(0,l.c)(V,g))return o.add(v);if("Quaternion"===V||"Vector4"===g)return new n.Vector4(o.x,o.y,o.z,o.w).addInPlace(v);if("Vector4"===V||"Quaternion"===g)return o.add(v);var E;if(null!==(E=this.config)&&void 0!==E&&E.preventIntegerFloatArithmetic&&typeof o!==typeof v)throw new Error("Cannot add different types of numbers.");return(0,l.p)(o)+(0,l.p)(v)}}(0,g.h)("FlowGraphAddBlock",S);class T extends I.b{constructor(o){super((0,E.M)(null===o||void 0===o?void 0:o.type),(0,E.M)(null===o||void 0===o?void 0:o.type),(0,E.M)(null===o||void 0===o?void 0:o.type),((o,v)=>this._polymorphicSubtract(o,v)),"FlowGraphSubtractBlock",o)}_polymorphicSubtract(o,v){const V=(0,l.i)(o),g=(0,l.i)(v);if((0,l.h)(V,g)||(0,l.c)(V,g)||(0,l.e)(V,g))return o.Rv(v);if("Quaternion"===V||"Vector4"===g)return new n.Vector4(o.x,o.y,o.z,o.w).Lx(v);if("Vector4"===V||"Quaternion"===g)return o.Rv(v);var E;if(null!==(E=this.config)&&void 0!==E&&E.preventIntegerFloatArithmetic&&typeof o!==typeof v)throw new Error("Cannot add different types of numbers.");return(0,l.p)(o)-(0,l.p)(v)}}(0,g.h)("FlowGraphSubtractBlock",T);class c extends I.b{constructor(o){super((0,E.M)(null===o||void 0===o?void 0:o.type),(0,E.M)(null===o||void 0===o?void 0:o.type),(0,E.M)(null===o||void 0===o?void 0:o.type),((o,v)=>this._polymorphicMultiply(o,v)),"FlowGraphMultiplyBlock",o)}_polymorphicMultiply(o,v){const V=(0,l.i)(o),g=(0,l.i)(v);if((0,l.h)(V,g)||(0,l.c)(V,g))return o.multiply(v);if("Quaternion"===V||"Vector4"===g)return new n.Vector4(o.x,o.y,o.z,o.w).multiplyInPlace(v);if("Vector4"===V||"Quaternion"===g)return o.multiply(v);if((0,l.e)(V,g)){var E;if(null!==(E=this.config)&&void 0!==E&&E.useMatrixPerComponent){const g=o.m;for(let o=0;o<g.length;o++)g[o]*=v.m[o];return"Matrix2D"===V?new f.c(g):"Matrix3D"===V?new f.e(g):n.Matrix.bv(g)}return v.multiply(o)}var I;if(null!==(I=this.config)&&void 0!==I&&I.preventIntegerFloatArithmetic&&typeof o!==typeof v)throw new Error("Cannot add different types of numbers.");return(0,l.p)(o)*(0,l.p)(v)}}(0,g.h)("FlowGraphMultiplyBlock",c);class R extends I.b{constructor(o){super((0,E.M)(null===o||void 0===o?void 0:o.type),(0,E.M)(null===o||void 0===o?void 0:o.type),(0,E.M)(null===o||void 0===o?void 0:o.type),((o,v)=>this._polymorphicDivide(o,v)),"FlowGraphDivideBlock",o)}_polymorphicDivide(o,v){const V=(0,l.i)(o),g=(0,l.i)(v);if((0,l.h)(V,g)||(0,l.c)(V,g))return o.divide(v);if("Quaternion"===V||"Quaternion"===g){const V=o.clone();return V.x/=v.x,V.y/=v.y,V.z/=v.z,V.w/=v.w,V}if("Quaternion"===V||"Vector4"===g)return new n.Vector4(o.x,o.y,o.z,o.w).divideInPlace(v);if("Vector4"===V||"Quaternion"===g)return o.divide(v);if((0,l.e)(V,g)){var E;if(null!==(E=this.config)&&void 0!==E&&E.useMatrixPerComponent){const g=o.m;for(let o=0;o<g.length;o++)g[o]/=v.m[o];return"Matrix2D"===V?new f.c(g):"Matrix3D"===V?new f.e(g):n.Matrix.bv(g)}return o.divide(v)}var I;if(null!==(I=this.config)&&void 0!==I&&I.preventIntegerFloatArithmetic&&typeof o!==typeof v)throw new Error("Cannot add different types of numbers.");return(0,l.p)(o)/(0,l.p)(v)}}(0,g.h)("FlowGraphDivideBlock",R);class j extends U{constructor(o){super(E.t,(o=>this._random(o)),"FlowGraphRandomBlock",o),this.min=this.registerDataInput("min",E.t,(null===o||void 0===o?void 0:o.min)??0),this.max=this.registerDataInput("max",E.t,(null===o||void 0===o?void 0:o.max)??1),null!==o&&void 0!==o&&o.seed&&(this._seed=o.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const o=1e4*Math.sin(this._seed++);return o-Math.floor(o)}return Math.random()}_random(o){const v=this.min.getValue(o),V=this.max.getValue(o);return this._getRandomValue()*(V-v)+v}}(0,g.h)("FlowGraphRandomBlock",j);class t extends U{constructor(o){super(E.t,(()=>Math.E),"FlowGraphEBlock",o)}}(0,g.h)("FlowGraphEBlock",t);class s extends U{constructor(o){super(E.t,(()=>Math.PI),"FlowGraphPIBlock",o)}}(0,g.h)("FlowGraphPIBlock",s);class L extends U{constructor(o){super(E.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",o)}}(0,g.h)("FlowGraphInfBlock",L);class b extends U{constructor(o){super(E.t,(()=>Number.NaN),"FlowGraphNaNBlock",o)}}function u(o,v){switch((0,l.i)(o)){case"FlowGraphInteger":return new x.c(v(o.value));case"Vector2":return new n.Vector2(v(o.x),v(o.y));case"cv":return new n.cv(v(o.x),v(o.y),v(o.z));case"Vector4":return new n.Vector4(v(o.x),v(o.y),v(o.z),v(o.w));case"Quaternion":return new n.Quaternion(v(o.x),v(o.y),v(o.z),v(o.w));case"Matrix":return n.Matrix.bv(o.m.map(v));case"Matrix2D":return new f.c(o.m.map(v));case"Matrix3D":return new f.e(o.m.map(v));default:return v(o)}}(0,g.h)("FlowGraphNaNBlock",b);class mo extends O.b{constructor(o){super(E.t,E.t,(o=>this._polymorphicAbs(o)),"FlowGraphAbsBlock",o)}_polymorphicAbs(o){return u(o,Math.abs)}}(0,g.h)("FlowGraphAbsBlock",mo);class a extends O.b{constructor(o){super(E.t,E.t,(o=>this._polymorphicSign(o)),"FlowGraphSignBlock",o)}_polymorphicSign(o){return u(o,Math.sign)}}(0,g.h)("FlowGraphSignBlock",a);class F extends O.b{constructor(o){super(E.t,E.t,(o=>this._polymorphicTrunc(o)),"FlowGraphTruncBlock",o)}_polymorphicTrunc(o){return u(o,Math.trunc)}}(0,g.h)("FlowGraphTruncBlock",F);class i extends O.b{constructor(o){super(E.t,E.t,(o=>this._polymorphicFloor(o)),"FlowGraphFloorBlock",o)}_polymorphicFloor(o){return u(o,Math.floor)}}(0,g.h)("FlowGraphFloorBlock",i);class J extends O.b{constructor(o){super(E.e,E.e,(o=>this._polymorphicCeiling(o)),"FlowGraphCeilBlock",o)}_polymorphicCeiling(o){return u(o,Math.ceil)}}(0,g.h)("FlowGraphCeilBlock",J);class d extends O.b{constructor(o){super(E.e,E.e,(o=>this._polymorphicRound(o)),"FlowGraphRoundBlock",o)}_polymorphicRound(o){return u(o,(o=>{var v;return o<0&&null!==(v=this.config)&&void 0!==v&&v.roundHalfAwayFromZero?-Math.round(-o):Math.round(o)}))}}(0,g.h)("FlowGraphRoundBlock",d);class N extends O.b{constructor(o){super(E.e,E.e,(o=>this._polymorphicFraction(o)),"FlowGraphFractBlock",o)}_polymorphicFraction(o){return u(o,(o=>o-Math.floor(o)))}}(0,g.h)("FlowGraphFractBlock",N);class Y extends O.b{constructor(o){super(E.e,E.e,(o=>this._polymorphicNeg(o)),"FlowGraphNegationBlock",o)}_polymorphicNeg(o){return u(o,(o=>-o))}}function q(o,v,V){switch((0,l.i)(o)){case"FlowGraphInteger":return new x.c(V(o.value,v.value));case"Vector2":return new n.Vector2(V(o.x,v.x),V(o.y,v.y));case"cv":return new n.cv(V(o.x,v.x),V(o.y,v.y),V(o.z,v.z));case"Vector4":return new n.Vector4(V(o.x,v.x),V(o.y,v.y),V(o.z,v.z),V(o.w,v.w));case"Quaternion":return new n.Quaternion(V(o.x,v.x),V(o.y,v.y),V(o.z,v.z),V(o.w,v.w));case"Matrix":return n.Matrix.bv(o.m.map(((o,g)=>V(o,v.m[g]))));case"Matrix2D":return new f.c(o.m.map(((o,g)=>V(o,v.m[g]))));case"Matrix3D":return new f.e(o.m.map(((o,g)=>V(o,v.m[g]))));default:return V((0,l.p)(o),(0,l.p)(v))}}(0,g.h)("FlowGraphNegationBlock",Y);class P extends I.b{constructor(o){super(E.e,E.e,E.e,((o,v)=>this._polymorphicRemainder(o,v)),"FlowGraphModuloBlock",o)}_polymorphicRemainder(o,v){return q(o,v,((o,v)=>o%v))}}(0,g.h)("FlowGraphModuloBlock",P);class M extends I.b{constructor(o){super(E.e,E.e,E.e,((o,v)=>this._polymorphicMin(o,v)),"FlowGraphMinBlock",o)}_polymorphicMin(o,v){return q(o,v,Math.min)}}(0,g.h)("FlowGraphMinBlock",M);class W extends I.b{constructor(o){super(E.e,E.e,E.e,((o,v)=>this._polymorphicMax(o,v)),"FlowGraphMaxBlock",o)}_polymorphicMax(o,v){return q(o,v,Math.max)}}function w(o,v,V){return Math.min(Math.max(o,Math.min(v,V)),Math.max(v,V))}function z(o,v,V,g){switch((0,l.i)(o)){case"FlowGraphInteger":return new x.c(g(o.value,v.value,V.value));case"Vector2":return new n.Vector2(g(o.x,v.x,V.x),g(o.y,v.y,V.y));case"cv":return new n.cv(g(o.x,v.x,V.x),g(o.y,v.y,V.y),g(o.z,v.z,V.z));case"Vector4":return new n.Vector4(g(o.x,v.x,V.x),g(o.y,v.y,V.y),g(o.z,v.z,V.z),g(o.w,v.w,V.w));case"Quaternion":return new n.Quaternion(g(o.x,v.x,V.x),g(o.y,v.y,V.y),g(o.z,v.z,V.z),g(o.w,v.w,V.w));case"Matrix":return n.Matrix.bv(o.m.map(((o,E)=>g(o,v.m[E],V.m[E]))));case"Matrix2D":return new f.c(o.m.map(((o,E)=>g(o,v.m[E],V.m[E]))));case"Matrix3D":return new f.e(o.m.map(((o,E)=>g(o,v.m[E],V.m[E]))));default:return g((0,l.p)(o),(0,l.p)(v),(0,l.p)(V))}}(0,g.h)("FlowGraphMaxBlock",W);class y extends h{constructor(o){super(E.e,E.e,E.e,E.e,((o,v,V)=>this._polymorphicClamp(o,v,V)),"FlowGraphClampBlock",o)}_polymorphicClamp(o,v,V){return z(o,v,V,w)}}function H(o){return Math.min(Math.max(o,0),1)}(0,g.h)("FlowGraphClampBlock",y);class e extends O.b{constructor(o){super(E.e,E.e,(o=>this._polymorphicSaturate(o)),"FlowGraphSaturateBlock",o)}_polymorphicSaturate(o){return u(o,H)}}function D(o,v,V){return(1-V)*o+V*v}(0,g.h)("FlowGraphSaturateBlock",e);class Z extends h{constructor(o){super(E.e,E.e,E.e,E.e,((o,v,V)=>this._polymorphicInterpolate(o,v,V)),"FlowGraphMathInterpolationBlock",o)}_polymorphicInterpolate(o,v,V){return z(o,v,V,D)}}(0,g.h)("FlowGraphMathInterpolationBlock",Z);class K extends I.b{constructor(o){super(E.e,E.e,E.f,((o,v)=>this._polymorphicEq(o,v)),"FlowGraphEqualityBlock",o)}_polymorphicEq(o,v){const V=(0,l.i)(o),g=(0,l.i)(v);return typeof o===typeof v&&((0,l.h)(V,g)||(0,l.e)(V,g)||(0,l.c)(V,g)?o.equals(v):o===v)}}function X(o,v,V){if((0,l.t)(o)&&(0,l.t)(v))return V((0,l.p)(o),(0,l.p)(v));throw new Error(`Cannot compare ${o} and ${v}`)}(0,g.h)("FlowGraphEqualityBlock",K);class r extends I.b{constructor(o){super(E.e,E.e,E.f,((o,v)=>this._polymorphicLessThan(o,v)),"FlowGraphLessThanBlock",o)}_polymorphicLessThan(o,v){return X(o,v,((o,v)=>o<v))}}(0,g.h)("FlowGraphLessThanBlock",r);class B extends I.b{constructor(o){super(E.e,E.e,E.f,((o,v)=>this._polymorphicLessThanOrEqual(o,v)),"FlowGraphLessThanOrEqualBlock",o)}_polymorphicLessThanOrEqual(o,v){return X(o,v,((o,v)=>o<=v))}}(0,g.h)("FlowGraphLessThanOrEqualBlock",B);class A extends I.b{constructor(o){super(E.e,E.e,E.f,((o,v)=>this._polymorphicGreaterThan(o,v)),"FlowGraphGreaterThanBlock",o)}_polymorphicGreaterThan(o,v){return X(o,v,((o,v)=>o>v))}}(0,g.h)("FlowGraphGreaterThanBlock",A);class C extends I.b{constructor(o){super(E.e,E.e,E.f,((o,v)=>this._polymorphicGreaterThanOrEqual(o,v)),"FlowGraphGreaterThanOrEqualBlock",o)}_polymorphicGreaterThanOrEqual(o,v){return X(o,v,((o,v)=>o>=v))}}(0,g.h)("FlowGraphGreaterThanOrEqualBlock",C);class p extends O.b{constructor(o){super(E.e,E.f,(o=>this._polymorphicIsNan(o)),"FlowGraphIsNaNBlock",o)}_polymorphicIsNan(o){if((0,l.t)(o,!0))return isNaN((0,l.p)(o));throw new Error(`Cannot get NaN of ${o}`)}}(0,g.h)("FlowGraphIsNaNBlock",p);class G extends O.b{constructor(o){super(E.e,E.f,(o=>this._polymorphicIsInf(o)),"FlowGraphIsInfBlock",o)}_polymorphicIsInf(o){if((0,l.t)(o))return!isFinite((0,l.p)(o));throw new Error(`Cannot get isInf of ${o}`)}}(0,g.h)("FlowGraphIsInfBlock",G);class k extends O.b{constructor(o){super(E.e,E.e,(o=>this._polymorphicDegToRad(o)),"FlowGraphDegToRadBlock",o)}_degToRad(o){return o*Math.PI/180}_polymorphicDegToRad(o){return u(o,this._degToRad)}}(0,g.h)("FlowGraphDegToRadBlock",k);class oo extends O.b{constructor(o){super(E.e,E.e,(o=>this._polymorphicRadToDeg(o)),"FlowGraphRadToDegBlock",o)}_radToDeg(o){return 180*o/Math.PI}_polymorphicRadToDeg(o){return u(o,this._radToDeg)}}(0,g.h)("FlowGraphRadToDegBlock",oo);class vo extends O.b{constructor(o){super(E.t,E.t,(o=>this._polymorphicSin(o)),"FlowGraphSinBlock",o)}_polymorphicSin(o){return u(o,Math.sin)}}class Vo extends O.b{constructor(o){super(E.t,E.t,(o=>this._polymorphicCos(o)),"FlowGraphCosBlock",o)}_polymorphicCos(o){return u(o,Math.cos)}}class go extends O.b{constructor(o){super(E.t,E.t,(o=>this._polymorphicTan(o)),"FlowGraphTanBlock",o)}_polymorphicTan(o){return u(o,Math.tan)}}class Eo extends O.b{constructor(o){super(E.t,E.t,(o=>this._polymorphicAsin(o)),"FlowGraphASinBlock",o)}_polymorphicAsin(o){return u(o,Math.asin)}}(0,g.h)("FlowGraphASinBlock",Eo);class Io extends O.b{constructor(o){super(E.t,E.t,(o=>this._polymorphicAcos(o)),"FlowGraphACosBlock",o)}_polymorphicAcos(o){return u(o,Math.acos)}}(0,g.h)("FlowGraphACosBlock",Io);class Qo extends O.b{constructor(o){super(E.t,E.t,(o=>this._polymorphicAtan(o)),"FlowGraphATanBlock",o)}_polymorphicAtan(o){return u(o,Math.atan)}}(0,g.h)("FlowGraphATanBlock",Qo);class Uo extends I.b{constructor(o){super(E.e,E.e,E.e,((o,v)=>this._polymorphicAtan2(o,v)),"FlowGraphATan2Block",o)}_polymorphicAtan2(o,v){return q(o,v,Math.atan2)}}(0,g.h)("FlowGraphATan2Block",Uo);class no extends O.b{constructor(o){super(E.e,E.e,(o=>this._polymorphicSinh(o)),"FlowGraphSinhBlock",o)}_polymorphicSinh(o){return u(o,Math.sinh)}}(0,g.h)("FlowGraphSinhBlock",no);class Oo extends O.b{constructor(o){super(E.e,E.e,(o=>this._polymorphicCosh(o)),"FlowGraphCoshBlock",o)}_polymorphicCosh(o){return u(o,Math.cosh)}}(0,g.h)("FlowGraphCoshBlock",Oo);class ho extends O.b{constructor(o){super(E.e,E.e,(o=>this._polymorphicTanh(o)),"FlowGraphTanhBlock",o)}_polymorphicTanh(o){return u(o,Math.tanh)}}(0,g.h)("FlowGraphTanhBlock",ho);class xo extends O.b{constructor(o){super(E.e,E.t,(o=>this._polymorphicAsinh(o)),"FlowGraphASinhBlock",o)}_polymorphicAsinh(o){return u(o,Math.asinh)}}(0,g.h)("FlowGraphASinhBlock",xo);class fo extends O.b{constructor(o){super(E.e,E.t,(o=>this._polymorphicAcosh(o)),"FlowGraphACoshBlock",o)}_polymorphicAcosh(o){return u(o,Math.acosh)}}(0,g.h)("FlowGraphACoshBlock",fo);class lo extends O.b{constructor(o){super(E.e,E.t,(o=>this._polymorphicAtanh(o)),"FlowGraphATanhBlock",o)}_polymorphicAtanh(o){return u(o,Math.atanh)}}(0,g.h)("FlowGraphATanhBlock",lo);class So extends O.b{constructor(o){super(E.e,E.t,(o=>this._polymorphicExp(o)),"FlowGraphExponentialBlock",o)}_polymorphicExp(o){return u(o,Math.exp)}}(0,g.h)("FlowGraphExponentialBlock",So);class To extends O.b{constructor(o){super(E.e,E.t,(o=>this._polymorphicLog(o)),"FlowGraphLogBlock",o)}_polymorphicLog(o){return u(o,Math.log)}}(0,g.h)("FlowGraphLogBlock",To);class co extends O.b{constructor(o){super(E.e,E.t,(o=>this._polymorphicLog2(o)),"FlowGraphLog2Block",o)}_polymorphicLog2(o){return u(o,Math.log2)}}(0,g.h)("FlowGraphLog2Block",co);class Ro extends O.b{constructor(o){super(E.e,E.t,(o=>this._polymorphicLog10(o)),"FlowGraphLog10Block",o)}_polymorphicLog10(o){return u(o,Math.log10)}}(0,g.h)("FlowGraphLog10Block",Ro);class jo extends O.b{constructor(o){super(E.e,E.t,(o=>this._polymorphicSqrt(o)),"FlowGraphSquareRootBlock",o)}_polymorphicSqrt(o){return u(o,Math.sqrt)}}(0,g.h)("FlowGraphSquareRootBlock",jo);class to extends O.b{constructor(o){super(E.e,E.t,(o=>this._polymorphicCubeRoot(o)),"FlowGraphCubeRootBlock",o)}_polymorphicCubeRoot(o){return u(o,Math.cbrt)}}(0,g.h)("FlowGraphCubeRootBlock",to);class so extends I.b{constructor(o){super(E.e,E.t,E.t,((o,v)=>this._polymorphicPow(o,v)),"FlowGraphPowerBlock",o)}_polymorphicPow(o,v){return q(o,v,Math.pow)}}(0,g.h)("FlowGraphPowerBlock",so);class Lo extends O.b{constructor(o){super((0,E.M)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),(0,E.M)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),(o=>"boolean"===typeof o?!o:"number"===typeof o?~o:new x.c(~o.value)),"FlowGraphBitwiseNotBlock",o)}}(0,g.h)("FlowGraphBitwiseNotBlock",Lo);class bo extends I.b{constructor(o){super((0,E.M)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),(0,E.M)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),(0,E.M)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),((o,v)=>{if("boolean"===typeof o&&"boolean"===typeof v)return o&&v;if("number"===typeof o&&"number"===typeof v)return o&v;if("object"===typeof o&&"object"===typeof v)return new x.c(o.value&v.value);throw new Error(`Cannot perform bitwise AND on ${o} and ${v}`)}),"FlowGraphBitwiseAndBlock",o)}}(0,g.h)("FlowGraphBitwiseAndBlock",bo);class uo extends I.b{constructor(o){super((0,E.M)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),(0,E.M)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),(0,E.M)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),((o,v)=>{if("boolean"===typeof o&&"boolean"===typeof v)return o||v;if("number"===typeof o&&"number"===typeof v)return o|v;if("object"===typeof o&&"object"===typeof v)return new x.c(o.value|v.value);throw new Error(`Cannot perform bitwise OR on ${o} and ${v}`)}),"FlowGraphBitwiseOrBlock",o)}}(0,g.h)("FlowGraphBitwiseOrBlock",uo);class mv extends I.b{constructor(o){super((0,E.M)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),(0,E.M)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),(0,E.M)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),((o,v)=>{if("boolean"===typeof o&&"boolean"===typeof v)return o!==v;if("number"===typeof o&&"number"===typeof v)return o^v;if("object"===typeof o&&"object"===typeof v)return new x.c(o.value^v.value);throw new Error(`Cannot perform bitwise XOR on ${o} and ${v}`)}),"FlowGraphBitwiseXorBlock",o)}}(0,g.h)("FlowGraphBitwiseXorBlock",mv);class ao extends I.b{constructor(o){super(E.i,E.i,E.i,((o,v)=>new x.c(o.value<<v.value)),"FlowGraphBitwiseLeftShiftBlock",o)}}(0,g.h)("FlowGraphBitwiseLeftShiftBlock",ao);class Fo extends I.b{constructor(o){super(E.i,E.i,E.i,((o,v)=>new x.c(o.value>>v.value)),"FlowGraphBitwiseRightShiftBlock",o)}}(0,g.h)("FlowGraphBitwiseRightShiftBlock",Fo);class io extends O.b{constructor(o){super(E.i,E.i,(o=>new x.c(Math.clz32(o.value))),"FlowGraphLeadingZerosBlock",o)}}(0,g.h)("FlowGraphLeadingZerosBlock",io);class Jo extends O.b{constructor(o){super(E.i,E.i,(o=>new x.c(o.value?31-Math.clz32(o.value&-o.value):32)),"FlowGraphTrailingZerosBlock",o)}}(0,g.h)("FlowGraphTrailingZerosBlock",Jo);class No extends O.b{constructor(o){super(E.i,E.i,(o=>new x.c(function(o){let v=0;for(;o;)v+=1&o,o>>=1;return v}(o.value))),"FlowGraphOneBitsCounterBlock",o)}}(0,g.h)("FlowGraphOneBitsCounterBlock",No)},15723:(o,v,V)=>{V.d(v,{b:()=>E});var g=V(15726);class E extends g.b{constructor(o,v,V,g,E,I){super(V,I),this._operation=g,this._className=E,this.a=this.registerDataInput("a",o),this.b=this.registerDataInput("b",v)}_doOperation(o){const v=this.a.getValue(o),V=this.b.getValue(o);return this._operation(v,V)}getClassName(){return this._className}}},15726:(o,v,V)=>{V.d(v,{b:()=>U});var g=V(14259),E=V(14241);const I="cachedOperationValue",Q="cachedExecutionId";class U extends g.b{constructor(o,v){super(v),this.value=this.registerDataOutput("value",o),this.isValid=this.registerDataOutput("isValid",E.f)}_updateOutputs(o){const v=o._getExecutionVariable(this,Q,-1),V=o._getExecutionVariable(this,I,null);if(void 0!==V&&null!==V&&v===o.executionId)this.isValid.setValue(!0,o),this.value.setValue(V,o);else try{const v=this._doOperation(o);if(void 0===v||null===v)return void this.isValid.setValue(!1,o);o._setExecutionVariable(this,I,v),o._setExecutionVariable(this,Q,o.executionId),this.value.setValue(v,o),this.isValid.setValue(!0,o)}catch(g){this.isValid.setValue(!1,o)}}}},15732:(o,v,V)=>{V.d(v,{b:()=>E});var g=V(15726);class E extends g.b{constructor(o,v,V,g,E){super(v,E),this._operation=V,this._className=g,this.a=this.registerDataInput("a",o)}_doOperation(o){return this._operation(this.a.getValue(o))}getClassName(){return this._className}}}}]);