"use strict";(self["2fwzcez286e"]=self["2fwzcez286e"]||[]).push([[88],{16232:(B,u,F)=>{F.r(u),F.d(u,{FlowGraphAbsBlock:()=>O,FlowGraphAcosBlock:()=>pB,FlowGraphAcoshBlock:()=>tB,FlowGraphAddBlock:()=>D,FlowGraphAsinBlock:()=>VB,FlowGraphAsinhBlock:()=>QB,FlowGraphAtan2Block:()=>RB,FlowGraphAtanBlock:()=>GB,FlowGraphAtanhBlock:()=>vB,FlowGraphBitwiseAndBlock:()=>UB,FlowGraphBitwiseLeftShiftBlock:()=>gB,FlowGraphBitwiseNotBlock:()=>xB,FlowGraphBitwiseOrBlock:()=>yB,FlowGraphBitwiseRightShiftBlock:()=>JB,FlowGraphBitwiseXorBlock:()=>OB,FlowGraphCeilBlock:()=>T,FlowGraphClampBlock:()=>n,FlowGraphCosBlock:()=>FB,FlowGraphCoshBlock:()=>sB,FlowGraphCubeRootBlock:()=>fB,FlowGraphDegToRadBlock:()=>S,FlowGraphDivideBlock:()=>W,FlowGraphEBlock:()=>f,FlowGraphEqualityBlock:()=>h,FlowGraphExpBlock:()=>DB,FlowGraphFloorBlock:()=>a,FlowGraphFractionBlock:()=>M,FlowGraphGreaterThanBlock:()=>N,FlowGraphGreaterThanOrEqualBlock:()=>A,FlowGraphInfBlock:()=>x,FlowGraphIsInfinityBlock:()=>k,FlowGraphIsNanBlock:()=>b,FlowGraphLeadingZerosBlock:()=>aB,FlowGraphLessThanBlock:()=>r,FlowGraphLessThanOrEqualBlock:()=>K,FlowGraphLog10Block:()=>WB,FlowGraphLog2Block:()=>qB,FlowGraphLogBlock:()=>LB,FlowGraphMathInterpolationBlock:()=>c,FlowGraphMaxBlock:()=>E,FlowGraphMinBlock:()=>mB,FlowGraphModuloBlock:()=>I,FlowGraphMultiplyBlock:()=>q,FlowGraphNaNBlock:()=>U,FlowGraphNegationBlock:()=>j,FlowGraphOneBitsCounterBlock:()=>zB,FlowGraphPiBlock:()=>C,FlowGraphPowerBlock:()=>CB,FlowGraphRadToDegBlock:()=>BB,FlowGraphRandomBlock:()=>X,FlowGraphRoundBlock:()=>z,FlowGraphSaturateBlock:()=>l,FlowGraphSignBlock:()=>g,FlowGraphSinBlock:()=>uB,FlowGraphSinhBlock:()=>eB,FlowGraphSquareRootBlock:()=>XB,FlowGraphSubtractBlock:()=>L,FlowGraphTanBlock:()=>ZB,FlowGraphTanhBlock:()=>YB,FlowGraphTrailingZerosBlock:()=>TB,FlowGraphTruncBlock:()=>J});var Z=F(12949),V=F(14701),p=F(16241),G=F(16250);class R extends G.c{constructor(B,u,F,Z){super(B,Z),this._operation=u,this._className=F}_doOperation(B){return this._operation(B)}getClassName(){return this._className}}var e=F(12979),s=F(16255);class Y extends G.c{constructor(B,u,F,Z,V,p,G){super(Z,G),this._operation=V,this._className=p,this.a=this.registerDataInput("a",B),this.b=this.registerDataInput("b",u),this.c=this.registerDataInput("c",F)}_doOperation(B){return this._operation(this.a.getValue(B),this.b.getValue(B),this.c.getValue(B))}getClassName(){return this._className}}var Q=F(14694),t=F(14707),v=F(14725);class D extends p.c{constructor(B){super((0,V.M)(null===B||void 0===B?void 0:B.type),(0,V.M)(null===B||void 0===B?void 0:B.type),(0,V.M)(null===B||void 0===B?void 0:B.type),((B,u)=>this._polymorphicAdd(B,u)),"FlowGraphAddBlock",B)}_polymorphicAdd(B,u){const F=(0,v.h)(B),Z=(0,v.h)(u);if((0,v.g)(F,Z)||(0,v.e)(F,Z)||(0,v.b)(F,Z))return B.add(u);if("Quaternion"===F||"Vector4"===Z)return new e.Vector4(B.x,B.y,B.z,B.w).addInPlace(u);if("Vector4"===F||"Quaternion"===Z)return B.add(u);var V;if(null!==(V=this.config)&&void 0!==V&&V.preventIntegerFloatArithmetic&&typeof B!==typeof u)throw new Error("Cannot add different types of numbers.");return(0,v.m)(B)+(0,v.m)(u)}}(0,Z.f)("FlowGraphAddBlock",D);class L extends p.c{constructor(B){super((0,V.M)(null===B||void 0===B?void 0:B.type),(0,V.M)(null===B||void 0===B?void 0:B.type),(0,V.M)(null===B||void 0===B?void 0:B.type),((B,u)=>this._polymorphicSubtract(B,u)),"FlowGraphSubtractBlock",B)}_polymorphicSubtract(B,u){const F=(0,v.h)(B),Z=(0,v.h)(u);if((0,v.g)(F,Z)||(0,v.b)(F,Z)||(0,v.e)(F,Z))return B.Lu(u);if("Quaternion"===F||"Vector4"===Z)return new e.Vector4(B.x,B.y,B.z,B.w).yQ(u);if("Vector4"===F||"Quaternion"===Z)return B.Lu(u);var V;if(null!==(V=this.config)&&void 0!==V&&V.preventIntegerFloatArithmetic&&typeof B!==typeof u)throw new Error("Cannot add different types of numbers.");return(0,v.m)(B)-(0,v.m)(u)}}(0,Z.f)("FlowGraphSubtractBlock",L);class q extends p.c{constructor(B){super((0,V.M)(null===B||void 0===B?void 0:B.type),(0,V.M)(null===B||void 0===B?void 0:B.type),(0,V.M)(null===B||void 0===B?void 0:B.type),((B,u)=>this._polymorphicMultiply(B,u)),"FlowGraphMultiplyBlock",B)}_polymorphicMultiply(B,u){const F=(0,v.h)(B),Z=(0,v.h)(u);if((0,v.g)(F,Z)||(0,v.b)(F,Z))return B.multiply(u);if("Quaternion"===F||"Vector4"===Z)return new e.Vector4(B.x,B.y,B.z,B.w).multiplyInPlace(u);if("Vector4"===F||"Quaternion"===Z)return B.multiply(u);if((0,v.e)(F,Z)){var V;if(null!==(V=this.config)&&void 0!==V&&V.useMatrixPerComponent){const Z=B.m;for(let B=0;B<Z.length;B++)Z[B]*=u.m[B];return"Matrix2D"===F?new t.e(Z):"Matrix3D"===F?new t.f(Z):e.Matrix.fu(Z)}return u.multiply(B)}var p;if(null!==(p=this.config)&&void 0!==p&&p.preventIntegerFloatArithmetic&&typeof B!==typeof u)throw new Error("Cannot add different types of numbers.");return(0,v.m)(B)*(0,v.m)(u)}}(0,Z.f)("FlowGraphMultiplyBlock",q);class W extends p.c{constructor(B){super((0,V.M)(null===B||void 0===B?void 0:B.type),(0,V.M)(null===B||void 0===B?void 0:B.type),(0,V.M)(null===B||void 0===B?void 0:B.type),((B,u)=>this._polymorphicDivide(B,u)),"FlowGraphDivideBlock",B)}_polymorphicDivide(B,u){const F=(0,v.h)(B),Z=(0,v.h)(u);if((0,v.g)(F,Z)||(0,v.b)(F,Z))return B.divide(u);if("Quaternion"===F||"Quaternion"===Z){const F=B.clone();return F.x/=u.x,F.y/=u.y,F.z/=u.z,F.w/=u.w,F}if("Quaternion"===F||"Vector4"===Z)return new e.Vector4(B.x,B.y,B.z,B.w).divideInPlace(u);if("Vector4"===F||"Quaternion"===Z)return B.divide(u);if((0,v.e)(F,Z)){var V;if(null!==(V=this.config)&&void 0!==V&&V.useMatrixPerComponent){const Z=B.m;for(let B=0;B<Z.length;B++)Z[B]/=u.m[B];return"Matrix2D"===F?new t.e(Z):"Matrix3D"===F?new t.f(Z):e.Matrix.fu(Z)}return B.divide(u)}var p;if(null!==(p=this.config)&&void 0!==p&&p.preventIntegerFloatArithmetic&&typeof B!==typeof u)throw new Error("Cannot add different types of numbers.");return(0,v.m)(B)/(0,v.m)(u)}}(0,Z.f)("FlowGraphDivideBlock",W);class X extends R{constructor(B){super(V.u,(B=>this._random(B)),"FlowGraphRandomBlock",B),this.min=this.registerDataInput("min",V.u,(null===B||void 0===B?void 0:B.min)??0),this.max=this.registerDataInput("max",V.u,(null===B||void 0===B?void 0:B.max)??1),null!==B&&void 0!==B&&B.seed&&(this._seed=B.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const B=1e4*Math.sin(this._seed++);return B-Math.floor(B)}return Math.random()}_random(B){const u=this.min.getValue(B),F=this.max.getValue(B);return this._getRandomValue()*(F-u)+u}}(0,Z.f)("FlowGraphRandomBlock",X);class f extends R{constructor(B){super(V.u,(()=>Math.E),"FlowGraphEBlock",B)}}(0,Z.f)("FlowGraphEBlock",f);class C extends R{constructor(B){super(V.u,(()=>Math.PI),"FlowGraphPIBlock",B)}}(0,Z.f)("FlowGraphPIBlock",C);class x extends R{constructor(B){super(V.u,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",B)}}(0,Z.f)("FlowGraphInfBlock",x);class U extends R{constructor(B){super(V.u,(()=>Number.NaN),"FlowGraphNaNBlock",B)}}function y(B,u){switch((0,v.h)(B)){case"FlowGraphInteger":return new Q.d(u(B.value));case"Vector2":return new e.Vector2(u(B.x),u(B.y));case"Du":return new e.Du(u(B.x),u(B.y),u(B.z));case"Vector4":return new e.Vector4(u(B.x),u(B.y),u(B.z),u(B.w));case"Quaternion":return new e.Quaternion(u(B.x),u(B.y),u(B.z),u(B.w));case"Matrix":return e.Matrix.fu(B.m.map(u));case"Matrix2D":return new t.e(B.m.map(u));case"Matrix3D":return new t.f(B.m.map(u));default:return u(B)}}(0,Z.f)("FlowGraphNaNBlock",U);class O extends s.d{constructor(B){super(V.u,V.u,(B=>this._polymorphicAbs(B)),"FlowGraphAbsBlock",B)}_polymorphicAbs(B){return y(B,Math.abs)}}(0,Z.f)("FlowGraphAbsBlock",O);class g extends s.d{constructor(B){super(V.u,V.u,(B=>this._polymorphicSign(B)),"FlowGraphSignBlock",B)}_polymorphicSign(B){return y(B,Math.sign)}}(0,Z.f)("FlowGraphSignBlock",g);class J extends s.d{constructor(B){super(V.u,V.u,(B=>this._polymorphicTrunc(B)),"FlowGraphTruncBlock",B)}_polymorphicTrunc(B){return y(B,Math.trunc)}}(0,Z.f)("FlowGraphTruncBlock",J);class a extends s.d{constructor(B){super(V.u,V.u,(B=>this._polymorphicFloor(B)),"FlowGraphFloorBlock",B)}_polymorphicFloor(B){return y(B,Math.floor)}}(0,Z.f)("FlowGraphFloorBlock",a);class T extends s.d{constructor(B){super(V.c,V.c,(B=>this._polymorphicCeiling(B)),"FlowGraphCeilBlock",B)}_polymorphicCeiling(B){return y(B,Math.ceil)}}(0,Z.f)("FlowGraphCeilBlock",T);class z extends s.d{constructor(B){super(V.c,V.c,(B=>this._polymorphicRound(B)),"FlowGraphRoundBlock",B)}_polymorphicRound(B){return y(B,(B=>{var u;return B<0&&null!==(u=this.config)&&void 0!==u&&u.roundHalfAwayFromZero?-Math.round(-B):Math.round(B)}))}}(0,Z.f)("FlowGraphRoundBlock",z);class M extends s.d{constructor(B){super(V.c,V.c,(B=>this._polymorphicFraction(B)),"FlowGraphFractBlock",B)}_polymorphicFraction(B){return y(B,(B=>B-Math.floor(B)))}}(0,Z.f)("FlowGraphFractBlock",M);class j extends s.d{constructor(B){super(V.c,V.c,(B=>this._polymorphicNeg(B)),"FlowGraphNegationBlock",B)}_polymorphicNeg(B){return y(B,(B=>-B))}}function o(B,u,F){switch((0,v.h)(B)){case"FlowGraphInteger":return new Q.d(F(B.value,u.value));case"Vector2":return new e.Vector2(F(B.x,u.x),F(B.y,u.y));case"Du":return new e.Du(F(B.x,u.x),F(B.y,u.y),F(B.z,u.z));case"Vector4":return new e.Vector4(F(B.x,u.x),F(B.y,u.y),F(B.z,u.z),F(B.w,u.w));case"Quaternion":return new e.Quaternion(F(B.x,u.x),F(B.y,u.y),F(B.z,u.z),F(B.w,u.w));case"Matrix":return e.Matrix.fu(B.m.map(((B,Z)=>F(B,u.m[Z]))));case"Matrix2D":return new t.e(B.m.map(((B,Z)=>F(B,u.m[Z]))));case"Matrix3D":return new t.f(B.m.map(((B,Z)=>F(B,u.m[Z]))));default:return F((0,v.m)(B),(0,v.m)(u))}}(0,Z.f)("FlowGraphNegationBlock",j);class I extends p.c{constructor(B){super(V.c,V.c,V.c,((B,u)=>this._polymorphicRemainder(B,u)),"FlowGraphModuloBlock",B)}_polymorphicRemainder(B,u){return o(B,u,((B,u)=>B%u))}}(0,Z.f)("FlowGraphModuloBlock",I);class mB extends p.c{constructor(B){super(V.c,V.c,V.c,((B,u)=>this._polymorphicMin(B,u)),"FlowGraphMinBlock",B)}_polymorphicMin(B,u){return o(B,u,Math.min)}}(0,Z.f)("FlowGraphMinBlock",mB);class E extends p.c{constructor(B){super(V.c,V.c,V.c,((B,u)=>this._polymorphicMax(B,u)),"FlowGraphMaxBlock",B)}_polymorphicMax(B,u){return o(B,u,Math.max)}}function w(B,u,F){return Math.min(Math.max(B,Math.min(u,F)),Math.max(u,F))}function H(B,u,F,Z){switch((0,v.h)(B)){case"FlowGraphInteger":return new Q.d(Z(B.value,u.value,F.value));case"Vector2":return new e.Vector2(Z(B.x,u.x,F.x),Z(B.y,u.y,F.y));case"Du":return new e.Du(Z(B.x,u.x,F.x),Z(B.y,u.y,F.y),Z(B.z,u.z,F.z));case"Vector4":return new e.Vector4(Z(B.x,u.x,F.x),Z(B.y,u.y,F.y),Z(B.z,u.z,F.z),Z(B.w,u.w,F.w));case"Quaternion":return new e.Quaternion(Z(B.x,u.x,F.x),Z(B.y,u.y,F.y),Z(B.z,u.z,F.z),Z(B.w,u.w,F.w));case"Matrix":return e.Matrix.fu(B.m.map(((B,V)=>Z(B,u.m[V],F.m[V]))));case"Matrix2D":return new t.e(B.m.map(((B,V)=>Z(B,u.m[V],F.m[V]))));case"Matrix3D":return new t.f(B.m.map(((B,V)=>Z(B,u.m[V],F.m[V]))));default:return Z((0,v.m)(B),(0,v.m)(u),(0,v.m)(F))}}(0,Z.f)("FlowGraphMaxBlock",E);class n extends Y{constructor(B){super(V.c,V.c,V.c,V.c,((B,u,F)=>this._polymorphicClamp(B,u,F)),"FlowGraphClampBlock",B)}_polymorphicClamp(B,u,F){return H(B,u,F,w)}}function d(B){return Math.min(Math.max(B,0),1)}(0,Z.f)("FlowGraphClampBlock",n);class l extends s.d{constructor(B){super(V.c,V.c,(B=>this._polymorphicSaturate(B)),"FlowGraphSaturateBlock",B)}_polymorphicSaturate(B){return y(B,d)}}function P(B,u,F){return(1-F)*B+F*u}(0,Z.f)("FlowGraphSaturateBlock",l);class c extends Y{constructor(B){super(V.c,V.c,V.c,V.c,((B,u,F)=>this._polymorphicInterpolate(B,u,F)),"FlowGraphMathInterpolationBlock",B)}_polymorphicInterpolate(B,u,F){return H(B,u,F,P)}}(0,Z.f)("FlowGraphMathInterpolationBlock",c);class h extends p.c{constructor(B){super(V.c,V.c,V.f,((B,u)=>this._polymorphicEq(B,u)),"FlowGraphEqualityBlock",B)}_polymorphicEq(B,u){const F=(0,v.h)(B),Z=(0,v.h)(u);return typeof B===typeof u&&((0,v.g)(F,Z)||(0,v.e)(F,Z)||(0,v.b)(F,Z)?B.equals(u):B===u)}}function i(B,u,F){if((0,v.p)(B)&&(0,v.p)(u))return F((0,v.m)(B),(0,v.m)(u));throw new Error(`Cannot compare ${B} and ${u}`)}(0,Z.f)("FlowGraphEqualityBlock",h);class r extends p.c{constructor(B){super(V.c,V.c,V.f,((B,u)=>this._polymorphicLessThan(B,u)),"FlowGraphLessThanBlock",B)}_polymorphicLessThan(B,u){return i(B,u,((B,u)=>B<u))}}(0,Z.f)("FlowGraphLessThanBlock",r);class K extends p.c{constructor(B){super(V.c,V.c,V.f,((B,u)=>this._polymorphicLessThanOrEqual(B,u)),"FlowGraphLessThanOrEqualBlock",B)}_polymorphicLessThanOrEqual(B,u){return i(B,u,((B,u)=>B<=u))}}(0,Z.f)("FlowGraphLessThanOrEqualBlock",K);class N extends p.c{constructor(B){super(V.c,V.c,V.f,((B,u)=>this._polymorphicGreaterThan(B,u)),"FlowGraphGreaterThanBlock",B)}_polymorphicGreaterThan(B,u){return i(B,u,((B,u)=>B>u))}}(0,Z.f)("FlowGraphGreaterThanBlock",N);class A extends p.c{constructor(B){super(V.c,V.c,V.f,((B,u)=>this._polymorphicGreaterThanOrEqual(B,u)),"FlowGraphGreaterThanOrEqualBlock",B)}_polymorphicGreaterThanOrEqual(B,u){return i(B,u,((B,u)=>B>=u))}}(0,Z.f)("FlowGraphGreaterThanOrEqualBlock",A);class b extends s.d{constructor(B){super(V.c,V.f,(B=>this._polymorphicIsNan(B)),"FlowGraphIsNaNBlock",B)}_polymorphicIsNan(B){if((0,v.p)(B,!0))return isNaN((0,v.m)(B));throw new Error(`Cannot get NaN of ${B}`)}}(0,Z.f)("FlowGraphIsNaNBlock",b);class k extends s.d{constructor(B){super(V.c,V.f,(B=>this._polymorphicIsInf(B)),"FlowGraphIsInfBlock",B)}_polymorphicIsInf(B){if((0,v.p)(B))return!isFinite((0,v.m)(B));throw new Error(`Cannot get isInf of ${B}`)}}(0,Z.f)("FlowGraphIsInfBlock",k);class S extends s.d{constructor(B){super(V.c,V.c,(B=>this._polymorphicDegToRad(B)),"FlowGraphDegToRadBlock",B)}_degToRad(B){return B*Math.PI/180}_polymorphicDegToRad(B){return y(B,this._degToRad)}}(0,Z.f)("FlowGraphDegToRadBlock",S);class BB extends s.d{constructor(B){super(V.c,V.c,(B=>this._polymorphicRadToDeg(B)),"FlowGraphRadToDegBlock",B)}_radToDeg(B){return 180*B/Math.PI}_polymorphicRadToDeg(B){return y(B,this._radToDeg)}}(0,Z.f)("FlowGraphRadToDegBlock",BB);class uB extends s.d{constructor(B){super(V.u,V.u,(B=>this._polymorphicSin(B)),"FlowGraphSinBlock",B)}_polymorphicSin(B){return y(B,Math.sin)}}class FB extends s.d{constructor(B){super(V.u,V.u,(B=>this._polymorphicCos(B)),"FlowGraphCosBlock",B)}_polymorphicCos(B){return y(B,Math.cos)}}class ZB extends s.d{constructor(B){super(V.u,V.u,(B=>this._polymorphicTan(B)),"FlowGraphTanBlock",B)}_polymorphicTan(B){return y(B,Math.tan)}}class VB extends s.d{constructor(B){super(V.u,V.u,(B=>this._polymorphicAsin(B)),"FlowGraphASinBlock",B)}_polymorphicAsin(B){return y(B,Math.asin)}}(0,Z.f)("FlowGraphASinBlock",VB);class pB extends s.d{constructor(B){super(V.u,V.u,(B=>this._polymorphicAcos(B)),"FlowGraphACosBlock",B)}_polymorphicAcos(B){return y(B,Math.acos)}}(0,Z.f)("FlowGraphACosBlock",pB);class GB extends s.d{constructor(B){super(V.u,V.u,(B=>this._polymorphicAtan(B)),"FlowGraphATanBlock",B)}_polymorphicAtan(B){return y(B,Math.atan)}}(0,Z.f)("FlowGraphATanBlock",GB);class RB extends p.c{constructor(B){super(V.c,V.c,V.c,((B,u)=>this._polymorphicAtan2(B,u)),"FlowGraphATan2Block",B)}_polymorphicAtan2(B,u){return o(B,u,Math.atan2)}}(0,Z.f)("FlowGraphATan2Block",RB);class eB extends s.d{constructor(B){super(V.c,V.c,(B=>this._polymorphicSinh(B)),"FlowGraphSinhBlock",B)}_polymorphicSinh(B){return y(B,Math.sinh)}}(0,Z.f)("FlowGraphSinhBlock",eB);class sB extends s.d{constructor(B){super(V.c,V.c,(B=>this._polymorphicCosh(B)),"FlowGraphCoshBlock",B)}_polymorphicCosh(B){return y(B,Math.cosh)}}(0,Z.f)("FlowGraphCoshBlock",sB);class YB extends s.d{constructor(B){super(V.c,V.c,(B=>this._polymorphicTanh(B)),"FlowGraphTanhBlock",B)}_polymorphicTanh(B){return y(B,Math.tanh)}}(0,Z.f)("FlowGraphTanhBlock",YB);class QB extends s.d{constructor(B){super(V.c,V.u,(B=>this._polymorphicAsinh(B)),"FlowGraphASinhBlock",B)}_polymorphicAsinh(B){return y(B,Math.asinh)}}(0,Z.f)("FlowGraphASinhBlock",QB);class tB extends s.d{constructor(B){super(V.c,V.u,(B=>this._polymorphicAcosh(B)),"FlowGraphACoshBlock",B)}_polymorphicAcosh(B){return y(B,Math.acosh)}}(0,Z.f)("FlowGraphACoshBlock",tB);class vB extends s.d{constructor(B){super(V.c,V.u,(B=>this._polymorphicAtanh(B)),"FlowGraphATanhBlock",B)}_polymorphicAtanh(B){return y(B,Math.atanh)}}(0,Z.f)("FlowGraphATanhBlock",vB);class DB extends s.d{constructor(B){super(V.c,V.u,(B=>this._polymorphicExp(B)),"FlowGraphExponentialBlock",B)}_polymorphicExp(B){return y(B,Math.exp)}}(0,Z.f)("FlowGraphExponentialBlock",DB);class LB extends s.d{constructor(B){super(V.c,V.u,(B=>this._polymorphicLog(B)),"FlowGraphLogBlock",B)}_polymorphicLog(B){return y(B,Math.log)}}(0,Z.f)("FlowGraphLogBlock",LB);class qB extends s.d{constructor(B){super(V.c,V.u,(B=>this._polymorphicLog2(B)),"FlowGraphLog2Block",B)}_polymorphicLog2(B){return y(B,Math.log2)}}(0,Z.f)("FlowGraphLog2Block",qB);class WB extends s.d{constructor(B){super(V.c,V.u,(B=>this._polymorphicLog10(B)),"FlowGraphLog10Block",B)}_polymorphicLog10(B){return y(B,Math.log10)}}(0,Z.f)("FlowGraphLog10Block",WB);class XB extends s.d{constructor(B){super(V.c,V.u,(B=>this._polymorphicSqrt(B)),"FlowGraphSquareRootBlock",B)}_polymorphicSqrt(B){return y(B,Math.sqrt)}}(0,Z.f)("FlowGraphSquareRootBlock",XB);class fB extends s.d{constructor(B){super(V.c,V.u,(B=>this._polymorphicCubeRoot(B)),"FlowGraphCubeRootBlock",B)}_polymorphicCubeRoot(B){return y(B,Math.cbrt)}}(0,Z.f)("FlowGraphCubeRootBlock",fB);class CB extends p.c{constructor(B){super(V.c,V.u,V.u,((B,u)=>this._polymorphicPow(B,u)),"FlowGraphPowerBlock",B)}_polymorphicPow(B,u){return o(B,u,Math.pow)}}(0,Z.f)("FlowGraphPowerBlock",CB);class xB extends s.d{constructor(B){super((0,V.M)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),(0,V.M)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),(B=>"boolean"===typeof B?!B:"number"===typeof B?~B:new Q.d(~B.value)),"FlowGraphBitwiseNotBlock",B)}}(0,Z.f)("FlowGraphBitwiseNotBlock",xB);class UB extends p.c{constructor(B){super((0,V.M)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),(0,V.M)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),(0,V.M)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),((B,u)=>{if("boolean"===typeof B&&"boolean"===typeof u)return B&&u;if("number"===typeof B&&"number"===typeof u)return B&u;if("object"===typeof B&&"object"===typeof u)return new Q.d(B.value&u.value);throw new Error(`Cannot perform bitwise AND on ${B} and ${u}`)}),"FlowGraphBitwiseAndBlock",B)}}(0,Z.f)("FlowGraphBitwiseAndBlock",UB);class yB extends p.c{constructor(B){super((0,V.M)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),(0,V.M)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),(0,V.M)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),((B,u)=>{if("boolean"===typeof B&&"boolean"===typeof u)return B||u;if("number"===typeof B&&"number"===typeof u)return B|u;if("object"===typeof B&&"object"===typeof u)return new Q.d(B.value|u.value);throw new Error(`Cannot perform bitwise OR on ${B} and ${u}`)}),"FlowGraphBitwiseOrBlock",B)}}(0,Z.f)("FlowGraphBitwiseOrBlock",yB);class OB extends p.c{constructor(B){super((0,V.M)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),(0,V.M)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),(0,V.M)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),((B,u)=>{if("boolean"===typeof B&&"boolean"===typeof u)return B!==u;if("number"===typeof B&&"number"===typeof u)return B^u;if("object"===typeof B&&"object"===typeof u)return new Q.d(B.value^u.value);throw new Error(`Cannot perform bitwise XOR on ${B} and ${u}`)}),"FlowGraphBitwiseXorBlock",B)}}(0,Z.f)("FlowGraphBitwiseXorBlock",OB);class gB extends p.c{constructor(B){super(V.h,V.h,V.h,((B,u)=>new Q.d(B.value<<u.value)),"FlowGraphBitwiseLeftShiftBlock",B)}}(0,Z.f)("FlowGraphBitwiseLeftShiftBlock",gB);class JB extends p.c{constructor(B){super(V.h,V.h,V.h,((B,u)=>new Q.d(B.value>>u.value)),"FlowGraphBitwiseRightShiftBlock",B)}}(0,Z.f)("FlowGraphBitwiseRightShiftBlock",JB);class aB extends s.d{constructor(B){super(V.h,V.h,(B=>new Q.d(Math.clz32(B.value))),"FlowGraphLeadingZerosBlock",B)}}(0,Z.f)("FlowGraphLeadingZerosBlock",aB);class TB extends s.d{constructor(B){super(V.h,V.h,(B=>new Q.d(B.value?31-Math.clz32(B.value&-B.value):32)),"FlowGraphTrailingZerosBlock",B)}}(0,Z.f)("FlowGraphTrailingZerosBlock",TB);class zB extends s.d{constructor(B){super(V.h,V.h,(B=>new Q.d(function(B){let u=0;for(;B;)u+=1&B,B>>=1;return u}(B.value))),"FlowGraphOneBitsCounterBlock",B)}}(0,Z.f)("FlowGraphOneBitsCounterBlock",zB)},16241:(B,u,F)=>{F.d(u,{c:()=>V});var Z=F(16250);class V extends Z.c{constructor(B,u,F,Z,V,p){super(F,p),this._operation=Z,this._className=V,this.a=this.registerDataInput("a",B),this.b=this.registerDataInput("b",u)}_doOperation(B){const u=this.a.getValue(B),F=this.b.getValue(B);return this._operation(u,F)}getClassName(){return this._className}}},16250:(B,u,F)=>{F.d(u,{c:()=>R});var Z=F(14720),V=F(14701);const p="cachedOperationValue",G="cachedExecutionId";class R extends Z.e{constructor(B,u){super(u),this.value=this.registerDataOutput("value",B),this.isValid=this.registerDataOutput("isValid",V.f)}_updateOutputs(B){const u=B._getExecutionVariable(this,G,-1),F=B._getExecutionVariable(this,p,null);if(void 0!==F&&null!==F&&u===B.executionId)this.isValid.setValue(!0,B),this.value.setValue(F,B);else try{const u=this._doOperation(B);if(void 0===u||null===u)return void this.isValid.setValue(!1,B);B._setExecutionVariable(this,p,u),B._setExecutionVariable(this,G,B.executionId),this.value.setValue(u,B),this.isValid.setValue(!0,B)}catch(Z){this.isValid.setValue(!1,B)}}}},16255:(B,u,F)=>{F.d(u,{d:()=>V});var Z=F(16250);class V extends Z.c{constructor(B,u,F,Z,V){super(u,V),this._operation=F,this._className=Z,this.a=this.registerDataInput("a",B)}_doOperation(B){return this._operation(this.a.getValue(B))}getClassName(){return this._className}}}}]);