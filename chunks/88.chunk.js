"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[88],{14037:(U,W,l)=>{l.r(W),l.d(W,{FlowGraphMultiGateBlock:()=>B});var M=l(655),t=l(12730),L=l(12704),p=l(12699);class B extends t.c{constructor(U){super(U),this.config=U,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",L.k,new p.d(-1)),this.setNumberOfOutputSignals(null===U||void 0===U?void 0:U.outputSignalCount)}_getNextIndex(U){if(U.includes(!1)||this.config.isLoop&&U.fill(!1),this.config.isRandom){const W=U.map(((U,W)=>U?-1:W)).filter((U=>-1!==U));return W.length?W[Math.floor(Math.random()*W.length)]:-1}return U.indexOf(!1)}setNumberOfOutputSignals(){let U=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>U;){const U=this.outputSignals.pop();U&&(U.disconnectFromAll(),this._unregisterSignalOutput(U.name))}for(;this.outputSignals.length<U;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(U,W){if(U._hasExecutionVariable(this,"indexesUsed")||U._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),W===this.reset)return U._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new p.d(-1),U);const l=U._getExecutionVariable(this,"indexesUsed",[]),M=this._getNextIndex(l);M>-1&&(this.lastIndex.setValue(new p.d(M),U),l[M]=!0,U._setExecutionVariable(this,"indexesUsed",l),this.outputSignals[M]._activateSignal(U))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(U){super.serialize(U),U.config.outputSignalCount=this.config.outputSignalCount,U.config.isRandom=this.config.isRandom,U.config.loop=this.config.isLoop,U.config.startIndex=this.config.startIndex}}(0,M.f)("FlowGraphMultiGateBlock",B)}}]);