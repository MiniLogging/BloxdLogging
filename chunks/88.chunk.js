"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[88],{14322:(g,w,q)=>{q.r(w),q.d(w,{FlowGraphAbsBlock:()=>a,FlowGraphAcosBlock:()=>rg,FlowGraphAcoshBlock:()=>eg,FlowGraphAddBlock:()=>L,FlowGraphAsinBlock:()=>og,FlowGraphAsinhBlock:()=>mg,FlowGraphAtan2Block:()=>ig,FlowGraphAtanBlock:()=>Sg,FlowGraphAtanhBlock:()=>yg,FlowGraphBitwiseAndBlock:()=>Ug,FlowGraphBitwiseLeftShiftBlock:()=>Hg,FlowGraphBitwiseNotBlock:()=>Dg,FlowGraphBitwiseOrBlock:()=>Ng,FlowGraphBitwiseRightShiftBlock:()=>Cg,FlowGraphBitwiseXorBlock:()=>ag,FlowGraphCeilBlock:()=>P,FlowGraphClampBlock:()=>O,FlowGraphCosBlock:()=>qg,FlowGraphCoshBlock:()=>zg,FlowGraphCubeRootBlock:()=>Gg,FlowGraphDegToRadBlock:()=>k,FlowGraphDivideBlock:()=>J,FlowGraphEBlock:()=>G,FlowGraphEqualityBlock:()=>Y,FlowGraphExpBlock:()=>Lg,FlowGraphFloorBlock:()=>c,FlowGraphFractionBlock:()=>M,FlowGraphGreaterThanBlock:()=>W,FlowGraphGreaterThanOrEqualBlock:()=>p,FlowGraphInfBlock:()=>D,FlowGraphIsInfinityBlock:()=>I,FlowGraphIsNanBlock:()=>Z,FlowGraphLeadingZerosBlock:()=>cg,FlowGraphLessThanBlock:()=>u,FlowGraphLessThanOrEqualBlock:()=>n,FlowGraphLog10Block:()=>Jg,FlowGraphLog2Block:()=>lg,FlowGraphLogBlock:()=>Ag,FlowGraphMathInterpolationBlock:()=>K,FlowGraphMaxBlock:()=>b,FlowGraphMinBlock:()=>v,FlowGraphModuloBlock:()=>h,FlowGraphMultiplyBlock:()=>l,FlowGraphNaNBlock:()=>U,FlowGraphNegationBlock:()=>V,FlowGraphOneBitsCounterBlock:()=>jg,FlowGraphPiBlock:()=>d,FlowGraphPowerBlock:()=>dg,FlowGraphRadToDegBlock:()=>gg,FlowGraphRandomBlock:()=>x,FlowGraphRoundBlock:()=>j,FlowGraphSaturateBlock:()=>Q,FlowGraphSignBlock:()=>H,FlowGraphSinBlock:()=>wg,FlowGraphSinhBlock:()=>Tg,FlowGraphSquareRootBlock:()=>xg,FlowGraphSubtractBlock:()=>A,FlowGraphTanBlock:()=>Rg,FlowGraphTanhBlock:()=>tg,FlowGraphTrailingZerosBlock:()=>Pg,FlowGraphTruncBlock:()=>C});var R=q(11128),o=q(12836),r=q(14324),S=q(14333);class i extends S.d{constructor(g,w,q,R){super(g,R),this._operation=w,this._className=q}_doOperation(g){return this._operation(g)}getClassName(){return this._className}}var T=q(11180),z=q(14337);class t extends S.d{constructor(g,w,q,R,o,r,S){super(R,S),this._operation=o,this._className=r,this.a=this.registerDataInput("a",g),this.b=this.registerDataInput("b",w),this.c=this.registerDataInput("c",q)}_doOperation(g){return this._operation(this.a.getValue(g),this.b.getValue(g),this.c.getValue(g))}getClassName(){return this._className}}var m=q(12828),e=q(12842),y=q(12872);class L extends r.b{constructor(g){super((0,o.S)(null===g||void 0===g?void 0:g.type),(0,o.S)(null===g||void 0===g?void 0:g.type),(0,o.S)(null===g||void 0===g?void 0:g.type),((g,w)=>this._polymorphicAdd(g,w)),"FlowGraphAddBlock",g)}_polymorphicAdd(g,w){const q=(0,y.i)(g),R=(0,y.i)(w);if((0,y.f)(q,R)||(0,y.d)(q,R)||(0,y.b)(q,R))return g.add(w);if("Quaternion"===q||"Vector4"===R)return new T.Vector4(g.x,g.y,g.z,g.w).addInPlace(w);if("Vector4"===q||"Quaternion"===R)return g.add(w);var o;if(null!==(o=this.config)&&void 0!==o&&o.preventIntegerFloatArithmetic&&typeof g!==typeof w)throw new Error("Cannot add different types of numbers.");return(0,y.o)(g)+(0,y.o)(w)}}(0,R.g)("FlowGraphAddBlock",L);class A extends r.b{constructor(g){super((0,o.S)(null===g||void 0===g?void 0:g.type),(0,o.S)(null===g||void 0===g?void 0:g.type),(0,o.S)(null===g||void 0===g?void 0:g.type),((g,w)=>this._polymorphicSubtract(g,w)),"FlowGraphSubtractBlock",g)}_polymorphicSubtract(g,w){const q=(0,y.i)(g),R=(0,y.i)(w);if((0,y.f)(q,R)||(0,y.b)(q,R)||(0,y.d)(q,R))return g.yw(w);if("Quaternion"===q||"Vector4"===R)return new T.Vector4(g.x,g.y,g.z,g.w).Yt(w);if("Vector4"===q||"Quaternion"===R)return g.yw(w);var o;if(null!==(o=this.config)&&void 0!==o&&o.preventIntegerFloatArithmetic&&typeof g!==typeof w)throw new Error("Cannot add different types of numbers.");return(0,y.o)(g)-(0,y.o)(w)}}(0,R.g)("FlowGraphSubtractBlock",A);class l extends r.b{constructor(g){super((0,o.S)(null===g||void 0===g?void 0:g.type),(0,o.S)(null===g||void 0===g?void 0:g.type),(0,o.S)(null===g||void 0===g?void 0:g.type),((g,w)=>this._polymorphicMultiply(g,w)),"FlowGraphMultiplyBlock",g)}_polymorphicMultiply(g,w){const q=(0,y.i)(g),R=(0,y.i)(w);if((0,y.f)(q,R)||(0,y.b)(q,R))return g.multiply(w);if("Quaternion"===q||"Vector4"===R)return new T.Vector4(g.x,g.y,g.z,g.w).multiplyInPlace(w);if("Vector4"===q||"Quaternion"===R)return g.multiply(w);if((0,y.d)(q,R)){var o;if(null!==(o=this.config)&&void 0!==o&&o.useMatrixPerComponent){const R=g.m;for(let g=0;g<R.length;g++)R[g]*=w.m[g];return"Matrix2D"===q?new e.d(R):"Matrix3D"===q?new e.e(R):T.Matrix.Ri(R)}return w.multiply(g)}var r;if(null!==(r=this.config)&&void 0!==r&&r.preventIntegerFloatArithmetic&&typeof g!==typeof w)throw new Error("Cannot add different types of numbers.");return(0,y.o)(g)*(0,y.o)(w)}}(0,R.g)("FlowGraphMultiplyBlock",l);class J extends r.b{constructor(g){super((0,o.S)(null===g||void 0===g?void 0:g.type),(0,o.S)(null===g||void 0===g?void 0:g.type),(0,o.S)(null===g||void 0===g?void 0:g.type),((g,w)=>this._polymorphicDivide(g,w)),"FlowGraphDivideBlock",g)}_polymorphicDivide(g,w){const q=(0,y.i)(g),R=(0,y.i)(w);if((0,y.f)(q,R)||(0,y.b)(q,R))return g.divide(w);if("Quaternion"===q||"Quaternion"===R){const q=g.clone();return q.x/=w.x,q.y/=w.y,q.z/=w.z,q.w/=w.w,q}if("Quaternion"===q||"Vector4"===R)return new T.Vector4(g.x,g.y,g.z,g.w).divideInPlace(w);if("Vector4"===q||"Quaternion"===R)return g.divide(w);if((0,y.d)(q,R)){var o;if(null!==(o=this.config)&&void 0!==o&&o.useMatrixPerComponent){const R=g.m;for(let g=0;g<R.length;g++)R[g]/=w.m[g];return"Matrix2D"===q?new e.d(R):"Matrix3D"===q?new e.e(R):T.Matrix.Ri(R)}return g.divide(w)}var r;if(null!==(r=this.config)&&void 0!==r&&r.preventIntegerFloatArithmetic&&typeof g!==typeof w)throw new Error("Cannot add different types of numbers.");return(0,y.o)(g)/(0,y.o)(w)}}(0,R.g)("FlowGraphDivideBlock",J);class x extends i{constructor(g){super(o.w,(g=>this._random(g)),"FlowGraphRandomBlock",g),this.min=this.registerDataInput("min",o.w,(null===g||void 0===g?void 0:g.min)??0),this.max=this.registerDataInput("max",o.w,(null===g||void 0===g?void 0:g.max)??1),null!==g&&void 0!==g&&g.seed&&(this._seed=g.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const g=1e4*Math.sin(this._seed++);return g-Math.floor(g)}return Math.random()}_random(g){const w=this.min.getValue(g),q=this.max.getValue(g);return this._getRandomValue()*(q-w)+w}}(0,R.g)("FlowGraphRandomBlock",x);class G extends i{constructor(g){super(o.w,(()=>Math.E),"FlowGraphEBlock",g)}}(0,R.g)("FlowGraphEBlock",G);class d extends i{constructor(g){super(o.w,(()=>Math.PI),"FlowGraphPIBlock",g)}}(0,R.g)("FlowGraphPIBlock",d);class D extends i{constructor(g){super(o.w,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",g)}}(0,R.g)("FlowGraphInfBlock",D);class U extends i{constructor(g){super(o.w,(()=>Number.NaN),"FlowGraphNaNBlock",g)}}function N(g,w){switch((0,y.i)(g)){case"FlowGraphInteger":return new m.b(w(g.value));case"Vector2":return new T.Vector2(w(g.x),w(g.y));case"ew":return new T.ew(w(g.x),w(g.y),w(g.z));case"Vector4":return new T.Vector4(w(g.x),w(g.y),w(g.z),w(g.w));case"Quaternion":return new T.Quaternion(w(g.x),w(g.y),w(g.z),w(g.w));case"Matrix":return T.Matrix.Ri(g.m.map(w));case"Matrix2D":return new e.d(g.m.map(w));case"Matrix3D":return new e.e(g.m.map(w));default:return w(g)}}(0,R.g)("FlowGraphNaNBlock",U);class a extends z.c{constructor(g){super(o.w,o.w,(g=>this._polymorphicAbs(g)),"FlowGraphAbsBlock",g)}_polymorphicAbs(g){return N(g,Math.abs)}}(0,R.g)("FlowGraphAbsBlock",a);class H extends z.c{constructor(g){super(o.w,o.w,(g=>this._polymorphicSign(g)),"FlowGraphSignBlock",g)}_polymorphicSign(g){return N(g,Math.sign)}}(0,R.g)("FlowGraphSignBlock",H);class C extends z.c{constructor(g){super(o.w,o.w,(g=>this._polymorphicTrunc(g)),"FlowGraphTruncBlock",g)}_polymorphicTrunc(g){return N(g,Math.trunc)}}(0,R.g)("FlowGraphTruncBlock",C);class c extends z.c{constructor(g){super(o.w,o.w,(g=>this._polymorphicFloor(g)),"FlowGraphFloorBlock",g)}_polymorphicFloor(g){return N(g,Math.floor)}}(0,R.g)("FlowGraphFloorBlock",c);class P extends z.c{constructor(g){super(o.d,o.d,(g=>this._polymorphicCeiling(g)),"FlowGraphCeilBlock",g)}_polymorphicCeiling(g){return N(g,Math.ceil)}}(0,R.g)("FlowGraphCeilBlock",P);class j extends z.c{constructor(g){super(o.d,o.d,(g=>this._polymorphicRound(g)),"FlowGraphRoundBlock",g)}_polymorphicRound(g){return N(g,(g=>{var w;return g<0&&null!==(w=this.config)&&void 0!==w&&w.roundHalfAwayFromZero?-Math.round(-g):Math.round(g)}))}}(0,R.g)("FlowGraphRoundBlock",j);class M extends z.c{constructor(g){super(o.d,o.d,(g=>this._polymorphicFraction(g)),"FlowGraphFractBlock",g)}_polymorphicFraction(g){return N(g,(g=>g-Math.floor(g)))}}(0,R.g)("FlowGraphFractBlock",M);class V extends z.c{constructor(g){super(o.d,o.d,(g=>this._polymorphicNeg(g)),"FlowGraphNegationBlock",g)}_polymorphicNeg(g){return N(g,(g=>-g))}}function s(g,w,q){switch((0,y.i)(g)){case"FlowGraphInteger":return new m.b(q(g.value,w.value));case"Vector2":return new T.Vector2(q(g.x,w.x),q(g.y,w.y));case"ew":return new T.ew(q(g.x,w.x),q(g.y,w.y),q(g.z,w.z));case"Vector4":return new T.Vector4(q(g.x,w.x),q(g.y,w.y),q(g.z,w.z),q(g.w,w.w));case"Quaternion":return new T.Quaternion(q(g.x,w.x),q(g.y,w.y),q(g.z,w.z),q(g.w,w.w));case"Matrix":return T.Matrix.Ri(g.m.map(((g,R)=>q(g,w.m[R]))));case"Matrix2D":return new e.d(g.m.map(((g,R)=>q(g,w.m[R]))));case"Matrix3D":return new e.e(g.m.map(((g,R)=>q(g,w.m[R]))));default:return q((0,y.o)(g),(0,y.o)(w))}}(0,R.g)("FlowGraphNegationBlock",V);class h extends r.b{constructor(g){super(o.d,o.d,o.d,((g,w)=>this._polymorphicRemainder(g,w)),"FlowGraphModuloBlock",g)}_polymorphicRemainder(g,w){return s(g,w,((g,w)=>g%w))}}(0,R.g)("FlowGraphModuloBlock",h);class v extends r.b{constructor(g){super(o.d,o.d,o.d,((g,w)=>this._polymorphicMin(g,w)),"FlowGraphMinBlock",g)}_polymorphicMin(g,w){return s(g,w,Math.min)}}(0,R.g)("FlowGraphMinBlock",v);class b extends r.b{constructor(g){super(o.d,o.d,o.d,((g,w)=>this._polymorphicMax(g,w)),"FlowGraphMaxBlock",g)}_polymorphicMax(g,w){return s(g,w,Math.max)}}function B(g,w,q){return Math.min(Math.max(g,Math.min(w,q)),Math.max(w,q))}function f(g,w,q,R){switch((0,y.i)(g)){case"FlowGraphInteger":return new m.b(R(g.value,w.value,q.value));case"Vector2":return new T.Vector2(R(g.x,w.x,q.x),R(g.y,w.y,q.y));case"ew":return new T.ew(R(g.x,w.x,q.x),R(g.y,w.y,q.y),R(g.z,w.z,q.z));case"Vector4":return new T.Vector4(R(g.x,w.x,q.x),R(g.y,w.y,q.y),R(g.z,w.z,q.z),R(g.w,w.w,q.w));case"Quaternion":return new T.Quaternion(R(g.x,w.x,q.x),R(g.y,w.y,q.y),R(g.z,w.z,q.z),R(g.w,w.w,q.w));case"Matrix":return T.Matrix.Ri(g.m.map(((g,o)=>R(g,w.m[o],q.m[o]))));case"Matrix2D":return new e.d(g.m.map(((g,o)=>R(g,w.m[o],q.m[o]))));case"Matrix3D":return new e.e(g.m.map(((g,o)=>R(g,w.m[o],q.m[o]))));default:return R((0,y.o)(g),(0,y.o)(w),(0,y.o)(q))}}(0,R.g)("FlowGraphMaxBlock",b);class O extends t{constructor(g){super(o.d,o.d,o.d,o.d,((g,w,q)=>this._polymorphicClamp(g,w,q)),"FlowGraphClampBlock",g)}_polymorphicClamp(g,w,q){return f(g,w,q,B)}}function E(g){return Math.min(Math.max(g,0),1)}(0,R.g)("FlowGraphClampBlock",O);class Q extends z.c{constructor(g){super(o.d,o.d,(g=>this._polymorphicSaturate(g)),"FlowGraphSaturateBlock",g)}_polymorphicSaturate(g){return N(g,E)}}function X(g,w,q){return(1-q)*g+q*w}(0,R.g)("FlowGraphSaturateBlock",Q);class K extends t{constructor(g){super(o.d,o.d,o.d,o.d,((g,w,q)=>this._polymorphicInterpolate(g,w,q)),"FlowGraphMathInterpolationBlock",g)}_polymorphicInterpolate(g,w,q){return f(g,w,q,X)}}(0,R.g)("FlowGraphMathInterpolationBlock",K);class Y extends r.b{constructor(g){super(o.d,o.d,o.h,((g,w)=>this._polymorphicEq(g,w)),"FlowGraphEqualityBlock",g)}_polymorphicEq(g,w){const q=(0,y.i)(g),R=(0,y.i)(w);return typeof g===typeof w&&((0,y.f)(q,R)||(0,y.d)(q,R)||(0,y.b)(q,R)?g.equals(w):g===w)}}function F(g,w,q){if((0,y.r)(g)&&(0,y.r)(w))return q((0,y.o)(g),(0,y.o)(w));throw new Error(`Cannot compare ${g} and ${w}`)}(0,R.g)("FlowGraphEqualityBlock",Y);class u extends r.b{constructor(g){super(o.d,o.d,o.h,((g,w)=>this._polymorphicLessThan(g,w)),"FlowGraphLessThanBlock",g)}_polymorphicLessThan(g,w){return F(g,w,((g,w)=>g<w))}}(0,R.g)("FlowGraphLessThanBlock",u);class n extends r.b{constructor(g){super(o.d,o.d,o.h,((g,w)=>this._polymorphicLessThanOrEqual(g,w)),"FlowGraphLessThanOrEqualBlock",g)}_polymorphicLessThanOrEqual(g,w){return F(g,w,((g,w)=>g<=w))}}(0,R.g)("FlowGraphLessThanOrEqualBlock",n);class W extends r.b{constructor(g){super(o.d,o.d,o.h,((g,w)=>this._polymorphicGreaterThan(g,w)),"FlowGraphGreaterThanBlock",g)}_polymorphicGreaterThan(g,w){return F(g,w,((g,w)=>g>w))}}(0,R.g)("FlowGraphGreaterThanBlock",W);class p extends r.b{constructor(g){super(o.d,o.d,o.h,((g,w)=>this._polymorphicGreaterThanOrEqual(g,w)),"FlowGraphGreaterThanOrEqualBlock",g)}_polymorphicGreaterThanOrEqual(g,w){return F(g,w,((g,w)=>g>=w))}}(0,R.g)("FlowGraphGreaterThanOrEqualBlock",p);class Z extends z.c{constructor(g){super(o.d,o.h,(g=>this._polymorphicIsNan(g)),"FlowGraphIsNaNBlock",g)}_polymorphicIsNan(g){if((0,y.r)(g,!0))return isNaN((0,y.o)(g));throw new Error(`Cannot get NaN of ${g}`)}}(0,R.g)("FlowGraphIsNaNBlock",Z);class I extends z.c{constructor(g){super(o.d,o.h,(g=>this._polymorphicIsInf(g)),"FlowGraphIsInfBlock",g)}_polymorphicIsInf(g){if((0,y.r)(g))return!isFinite((0,y.o)(g));throw new Error(`Cannot get isInf of ${g}`)}}(0,R.g)("FlowGraphIsInfBlock",I);class k extends z.c{constructor(g){super(o.d,o.d,(g=>this._polymorphicDegToRad(g)),"FlowGraphDegToRadBlock",g)}_degToRad(g){return g*Math.PI/180}_polymorphicDegToRad(g){return N(g,this._degToRad)}}(0,R.g)("FlowGraphDegToRadBlock",k);class gg extends z.c{constructor(g){super(o.d,o.d,(g=>this._polymorphicRadToDeg(g)),"FlowGraphRadToDegBlock",g)}_radToDeg(g){return 180*g/Math.PI}_polymorphicRadToDeg(g){return N(g,this._radToDeg)}}(0,R.g)("FlowGraphRadToDegBlock",gg);class wg extends z.c{constructor(g){super(o.w,o.w,(g=>this._polymorphicSin(g)),"FlowGraphSinBlock",g)}_polymorphicSin(g){return N(g,Math.sin)}}class qg extends z.c{constructor(g){super(o.w,o.w,(g=>this._polymorphicCos(g)),"FlowGraphCosBlock",g)}_polymorphicCos(g){return N(g,Math.cos)}}class Rg extends z.c{constructor(g){super(o.w,o.w,(g=>this._polymorphicTan(g)),"FlowGraphTanBlock",g)}_polymorphicTan(g){return N(g,Math.tan)}}class og extends z.c{constructor(g){super(o.w,o.w,(g=>this._polymorphicAsin(g)),"FlowGraphASinBlock",g)}_polymorphicAsin(g){return N(g,Math.asin)}}(0,R.g)("FlowGraphASinBlock",og);class rg extends z.c{constructor(g){super(o.w,o.w,(g=>this._polymorphicAcos(g)),"FlowGraphACosBlock",g)}_polymorphicAcos(g){return N(g,Math.acos)}}(0,R.g)("FlowGraphACosBlock",rg);class Sg extends z.c{constructor(g){super(o.w,o.w,(g=>this._polymorphicAtan(g)),"FlowGraphATanBlock",g)}_polymorphicAtan(g){return N(g,Math.atan)}}(0,R.g)("FlowGraphATanBlock",Sg);class ig extends r.b{constructor(g){super(o.d,o.d,o.d,((g,w)=>this._polymorphicAtan2(g,w)),"FlowGraphATan2Block",g)}_polymorphicAtan2(g,w){return s(g,w,Math.atan2)}}(0,R.g)("FlowGraphATan2Block",ig);class Tg extends z.c{constructor(g){super(o.d,o.d,(g=>this._polymorphicSinh(g)),"FlowGraphSinhBlock",g)}_polymorphicSinh(g){return N(g,Math.sinh)}}(0,R.g)("FlowGraphSinhBlock",Tg);class zg extends z.c{constructor(g){super(o.d,o.d,(g=>this._polymorphicCosh(g)),"FlowGraphCoshBlock",g)}_polymorphicCosh(g){return N(g,Math.cosh)}}(0,R.g)("FlowGraphCoshBlock",zg);class tg extends z.c{constructor(g){super(o.d,o.d,(g=>this._polymorphicTanh(g)),"FlowGraphTanhBlock",g)}_polymorphicTanh(g){return N(g,Math.tanh)}}(0,R.g)("FlowGraphTanhBlock",tg);class mg extends z.c{constructor(g){super(o.d,o.w,(g=>this._polymorphicAsinh(g)),"FlowGraphASinhBlock",g)}_polymorphicAsinh(g){return N(g,Math.asinh)}}(0,R.g)("FlowGraphASinhBlock",mg);class eg extends z.c{constructor(g){super(o.d,o.w,(g=>this._polymorphicAcosh(g)),"FlowGraphACoshBlock",g)}_polymorphicAcosh(g){return N(g,Math.acosh)}}(0,R.g)("FlowGraphACoshBlock",eg);class yg extends z.c{constructor(g){super(o.d,o.w,(g=>this._polymorphicAtanh(g)),"FlowGraphATanhBlock",g)}_polymorphicAtanh(g){return N(g,Math.atanh)}}(0,R.g)("FlowGraphATanhBlock",yg);class Lg extends z.c{constructor(g){super(o.d,o.w,(g=>this._polymorphicExp(g)),"FlowGraphExponentialBlock",g)}_polymorphicExp(g){return N(g,Math.exp)}}(0,R.g)("FlowGraphExponentialBlock",Lg);class Ag extends z.c{constructor(g){super(o.d,o.w,(g=>this._polymorphicLog(g)),"FlowGraphLogBlock",g)}_polymorphicLog(g){return N(g,Math.log)}}(0,R.g)("FlowGraphLogBlock",Ag);class lg extends z.c{constructor(g){super(o.d,o.w,(g=>this._polymorphicLog2(g)),"FlowGraphLog2Block",g)}_polymorphicLog2(g){return N(g,Math.log2)}}(0,R.g)("FlowGraphLog2Block",lg);class Jg extends z.c{constructor(g){super(o.d,o.w,(g=>this._polymorphicLog10(g)),"FlowGraphLog10Block",g)}_polymorphicLog10(g){return N(g,Math.log10)}}(0,R.g)("FlowGraphLog10Block",Jg);class xg extends z.c{constructor(g){super(o.d,o.w,(g=>this._polymorphicSqrt(g)),"FlowGraphSquareRootBlock",g)}_polymorphicSqrt(g){return N(g,Math.sqrt)}}(0,R.g)("FlowGraphSquareRootBlock",xg);class Gg extends z.c{constructor(g){super(o.d,o.w,(g=>this._polymorphicCubeRoot(g)),"FlowGraphCubeRootBlock",g)}_polymorphicCubeRoot(g){return N(g,Math.cbrt)}}(0,R.g)("FlowGraphCubeRootBlock",Gg);class dg extends r.b{constructor(g){super(o.d,o.w,o.w,((g,w)=>this._polymorphicPow(g,w)),"FlowGraphPowerBlock",g)}_polymorphicPow(g,w){return s(g,w,Math.pow)}}(0,R.g)("FlowGraphPowerBlock",dg);class Dg extends z.c{constructor(g){super((0,o.S)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),(0,o.S)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),(g=>"boolean"===typeof g?!g:"number"===typeof g?~g:new m.b(~g.value)),"FlowGraphBitwiseNotBlock",g)}}(0,R.g)("FlowGraphBitwiseNotBlock",Dg);class Ug extends r.b{constructor(g){super((0,o.S)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),(0,o.S)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),(0,o.S)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),((g,w)=>{if("boolean"===typeof g&&"boolean"===typeof w)return g&&w;if("number"===typeof g&&"number"===typeof w)return g&w;if("object"===typeof g&&"object"===typeof w)return new m.b(g.value&w.value);throw new Error(`Cannot perform bitwise AND on ${g} and ${w}`)}),"FlowGraphBitwiseAndBlock",g)}}(0,R.g)("FlowGraphBitwiseAndBlock",Ug);class Ng extends r.b{constructor(g){super((0,o.S)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),(0,o.S)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),(0,o.S)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),((g,w)=>{if("boolean"===typeof g&&"boolean"===typeof w)return g||w;if("number"===typeof g&&"number"===typeof w)return g|w;if("object"===typeof g&&"object"===typeof w)return new m.b(g.value|w.value);throw new Error(`Cannot perform bitwise OR on ${g} and ${w}`)}),"FlowGraphBitwiseOrBlock",g)}}(0,R.g)("FlowGraphBitwiseOrBlock",Ng);class ag extends r.b{constructor(g){super((0,o.S)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),(0,o.S)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),(0,o.S)((null===g||void 0===g?void 0:g.valueType)||"FlowGraphInteger"),((g,w)=>{if("boolean"===typeof g&&"boolean"===typeof w)return g!==w;if("number"===typeof g&&"number"===typeof w)return g^w;if("object"===typeof g&&"object"===typeof w)return new m.b(g.value^w.value);throw new Error(`Cannot perform bitwise XOR on ${g} and ${w}`)}),"FlowGraphBitwiseXorBlock",g)}}(0,R.g)("FlowGraphBitwiseXorBlock",ag);class Hg extends r.b{constructor(g){super(o.l,o.l,o.l,((g,w)=>new m.b(g.value<<w.value)),"FlowGraphBitwiseLeftShiftBlock",g)}}(0,R.g)("FlowGraphBitwiseLeftShiftBlock",Hg);class Cg extends r.b{constructor(g){super(o.l,o.l,o.l,((g,w)=>new m.b(g.value>>w.value)),"FlowGraphBitwiseRightShiftBlock",g)}}(0,R.g)("FlowGraphBitwiseRightShiftBlock",Cg);class cg extends z.c{constructor(g){super(o.l,o.l,(g=>new m.b(Math.clz32(g.value))),"FlowGraphLeadingZerosBlock",g)}}(0,R.g)("FlowGraphLeadingZerosBlock",cg);class Pg extends z.c{constructor(g){super(o.l,o.l,(g=>new m.b(g.value?31-Math.clz32(g.value&-g.value):32)),"FlowGraphTrailingZerosBlock",g)}}(0,R.g)("FlowGraphTrailingZerosBlock",Pg);class jg extends z.c{constructor(g){super(o.l,o.l,(g=>new m.b(function(g){let w=0;for(;g;)w+=1&g,g>>=1;return w}(g.value))),"FlowGraphOneBitsCounterBlock",g)}}(0,R.g)("FlowGraphOneBitsCounterBlock",jg)},14324:(g,w,q)=>{q.d(w,{b:()=>o});var R=q(14333);class o extends R.d{constructor(g,w,q,R,o,r){super(q,r),this._operation=R,this._className=o,this.a=this.registerDataInput("a",g),this.b=this.registerDataInput("b",w)}_doOperation(g){const w=this.a.getValue(g),q=this.b.getValue(g);return this._operation(w,q)}getClassName(){return this._className}}},14333:(g,w,q)=>{q.d(w,{d:()=>i});var R=q(12863),o=q(12836);const r="cachedOperationValue",S="cachedExecutionId";class i extends R.e{constructor(g,w){super(w),this.value=this.registerDataOutput("value",g),this.isValid=this.registerDataOutput("isValid",o.h)}_updateOutputs(g){const w=g._getExecutionVariable(this,S,-1),q=g._getExecutionVariable(this,r,null);if(void 0!==q&&null!==q&&w===g.executionId)this.isValid.setValue(!0,g),this.value.setValue(q,g);else try{const w=this._doOperation(g);if(void 0===w||null===w)return void this.isValid.setValue(!1,g);g._setExecutionVariable(this,r,w),g._setExecutionVariable(this,S,g.executionId),this.value.setValue(w,g),this.isValid.setValue(!0,g)}catch(R){this.isValid.setValue(!1,g)}}}},14337:(g,w,q)=>{q.d(w,{c:()=>o});var R=q(14333);class o extends R.d{constructor(g,w,q,R,o){super(w,o),this._operation=q,this._className=R,this.a=this.registerDataInput("a",g)}_doOperation(g){return this._operation(this.a.getValue(g))}getClassName(){return this._className}}}}]);