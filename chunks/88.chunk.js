"use strict";(self.hwpa2z1pqte=self.hwpa2z1pqte||[]).push([[88],{16154:(h,R,l)=>{l.r(R),l.d(R,{FlowGraphAbsBlock:()=>O,FlowGraphAcosBlock:()=>Dh,FlowGraphAcoshBlock:()=>Jh,FlowGraphAddBlock:()=>Q,FlowGraphAsinBlock:()=>ah,FlowGraphAsinhBlock:()=>ch,FlowGraphAtan2Block:()=>Fh,FlowGraphAtanBlock:()=>Uh,FlowGraphAtanhBlock:()=>qh,FlowGraphBitwiseAndBlock:()=>Gh,FlowGraphBitwiseLeftShiftBlock:()=>yh,FlowGraphBitwiseNotBlock:()=>xh,FlowGraphBitwiseOrBlock:()=>ph,FlowGraphBitwiseRightShiftBlock:()=>vh,FlowGraphBitwiseXorBlock:()=>Oh,FlowGraphCeilBlock:()=>I,FlowGraphClampBlock:()=>H,FlowGraphCosBlock:()=>lh,FlowGraphCoshBlock:()=>mR,FlowGraphCubeRootBlock:()=>Th,FlowGraphDegToRadBlock:()=>N,FlowGraphDivideBlock:()=>t,FlowGraphEBlock:()=>T,FlowGraphEqualityBlock:()=>S,FlowGraphExpBlock:()=>Qh,FlowGraphFloorBlock:()=>b,FlowGraphFractionBlock:()=>n,FlowGraphGreaterThanBlock:()=>d,FlowGraphGreaterThanOrEqualBlock:()=>X,FlowGraphInfBlock:()=>x,FlowGraphIsInfinityBlock:()=>B,FlowGraphIsNanBlock:()=>V,FlowGraphLeadingZerosBlock:()=>bh,FlowGraphLessThanBlock:()=>M,FlowGraphLessThanOrEqualBlock:()=>i,FlowGraphLog10Block:()=>th,FlowGraphLog2Block:()=>sh,FlowGraphLogBlock:()=>Yh,FlowGraphMathInterpolationBlock:()=>e,FlowGraphMaxBlock:()=>K,FlowGraphMinBlock:()=>o,FlowGraphModuloBlock:()=>z,FlowGraphMultiplyBlock:()=>s,FlowGraphNaNBlock:()=>G,FlowGraphNegationBlock:()=>r,FlowGraphOneBitsCounterBlock:()=>Lh,FlowGraphPiBlock:()=>E,FlowGraphPowerBlock:()=>Eh,FlowGraphRadToDegBlock:()=>hh,FlowGraphRandomBlock:()=>f,FlowGraphRoundBlock:()=>L,FlowGraphSaturateBlock:()=>C,FlowGraphSignBlock:()=>y,FlowGraphSinBlock:()=>Rh,FlowGraphSinhBlock:()=>wh,FlowGraphSquareRootBlock:()=>fh,FlowGraphSubtractBlock:()=>Y,FlowGraphTanBlock:()=>jh,FlowGraphTanhBlock:()=>uh,FlowGraphTrailingZerosBlock:()=>Ih,FlowGraphTruncBlock:()=>v});var j=l(12852),a=l(14597),D=l(16157),U=l(16163);class F extends U.d{constructor(h,R,l,j){super(h,j),this._operation=R,this._className=l}_doOperation(h){return this._operation(h)}getClassName(){return this._className}}var w=l(12900),mh=l(16166);class u extends U.d{constructor(h,R,l,j,a,D,U){super(j,U),this._operation=a,this._className=D,this.a=this.registerDataInput("a",h),this.b=this.registerDataInput("b",R),this.c=this.registerDataInput("c",l)}_doOperation(h){return this._operation(this.a.getValue(h),this.b.getValue(h),this.c.getValue(h))}getClassName(){return this._className}}var c=l(14591),J=l(14605),q=l(14629);class Q extends D.d{constructor(h){super((0,a.L)(null===h||void 0===h?void 0:h.type),(0,a.L)(null===h||void 0===h?void 0:h.type),(0,a.L)(null===h||void 0===h?void 0:h.type),((h,R)=>this._polymorphicAdd(h,R)),"FlowGraphAddBlock",h)}_polymorphicAdd(h,R){const l=(0,q.k)(h),j=(0,q.k)(R);if((0,q.j)(l,j)||(0,q.f)(l,j)||(0,q.e)(l,j))return h.add(R);if("Quaternion"===l||"Vector4"===j)return new w.Vector4(h.x,h.y,h.z,h.w).addInPlace(R);if("Vector4"===l||"Quaternion"===j)return h.add(R);var a;if(null!==(a=this.config)&&void 0!==a&&a.preventIntegerFloatArithmetic&&typeof h!==typeof R)throw new Error("Cannot add different types of numbers.");return(0,q.s)(h)+(0,q.s)(R)}}(0,j.f)("FlowGraphAddBlock",Q);class Y extends D.d{constructor(h){super((0,a.L)(null===h||void 0===h?void 0:h.type),(0,a.L)(null===h||void 0===h?void 0:h.type),(0,a.L)(null===h||void 0===h?void 0:h.type),((h,R)=>this._polymorphicSubtract(h,R)),"FlowGraphSubtractBlock",h)}_polymorphicSubtract(h,R){const l=(0,q.k)(h),j=(0,q.k)(R);if((0,q.j)(l,j)||(0,q.e)(l,j)||(0,q.f)(l,j))return h.fR(R);if("Quaternion"===l||"Vector4"===j)return new w.Vector4(h.x,h.y,h.z,h.w).Pc(R);if("Vector4"===l||"Quaternion"===j)return h.fR(R);var a;if(null!==(a=this.config)&&void 0!==a&&a.preventIntegerFloatArithmetic&&typeof h!==typeof R)throw new Error("Cannot add different types of numbers.");return(0,q.s)(h)-(0,q.s)(R)}}(0,j.f)("FlowGraphSubtractBlock",Y);class s extends D.d{constructor(h){super((0,a.L)(null===h||void 0===h?void 0:h.type),(0,a.L)(null===h||void 0===h?void 0:h.type),(0,a.L)(null===h||void 0===h?void 0:h.type),((h,R)=>this._polymorphicMultiply(h,R)),"FlowGraphMultiplyBlock",h)}_polymorphicMultiply(h,R){const l=(0,q.k)(h),j=(0,q.k)(R);if((0,q.j)(l,j)||(0,q.e)(l,j))return h.multiply(R);if("Quaternion"===l||"Vector4"===j)return new w.Vector4(h.x,h.y,h.z,h.w).multiplyInPlace(R);if("Vector4"===l||"Quaternion"===j)return h.multiply(R);if((0,q.f)(l,j)){var a;if(null!==(a=this.config)&&void 0!==a&&a.useMatrixPerComponent){const j=h.m;for(let h=0;h<j.length;h++)j[h]*=R.m[h];return"Matrix2D"===l?new J.d(j):"Matrix3D"===l?new J.h(j):w.Matrix.GR(j)}return R.multiply(h)}var D;if(null!==(D=this.config)&&void 0!==D&&D.preventIntegerFloatArithmetic&&typeof h!==typeof R)throw new Error("Cannot add different types of numbers.");return(0,q.s)(h)*(0,q.s)(R)}}(0,j.f)("FlowGraphMultiplyBlock",s);class t extends D.d{constructor(h){super((0,a.L)(null===h||void 0===h?void 0:h.type),(0,a.L)(null===h||void 0===h?void 0:h.type),(0,a.L)(null===h||void 0===h?void 0:h.type),((h,R)=>this._polymorphicDivide(h,R)),"FlowGraphDivideBlock",h)}_polymorphicDivide(h,R){const l=(0,q.k)(h),j=(0,q.k)(R);if((0,q.j)(l,j)||(0,q.e)(l,j))return h.divide(R);if("Quaternion"===l||"Quaternion"===j){const l=h.clone();return l.x/=R.x,l.y/=R.y,l.z/=R.z,l.w/=R.w,l}if("Quaternion"===l||"Vector4"===j)return new w.Vector4(h.x,h.y,h.z,h.w).divideInPlace(R);if("Vector4"===l||"Quaternion"===j)return h.divide(R);if((0,q.f)(l,j)){var a;if(null!==(a=this.config)&&void 0!==a&&a.useMatrixPerComponent){const j=h.m;for(let h=0;h<j.length;h++)j[h]/=R.m[h];return"Matrix2D"===l?new J.d(j):"Matrix3D"===l?new J.h(j):w.Matrix.GR(j)}return h.divide(R)}var D;if(null!==(D=this.config)&&void 0!==D&&D.preventIntegerFloatArithmetic&&typeof h!==typeof R)throw new Error("Cannot add different types of numbers.");return(0,q.s)(h)/(0,q.s)(R)}}(0,j.f)("FlowGraphDivideBlock",t);class f extends F{constructor(h){super(a.r,(h=>this._random(h)),"FlowGraphRandomBlock",h),this.min=this.registerDataInput("min",a.r,(null===h||void 0===h?void 0:h.min)??0),this.max=this.registerDataInput("max",a.r,(null===h||void 0===h?void 0:h.max)??1),null!==h&&void 0!==h&&h.seed&&(this._seed=h.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const h=1e4*Math.sin(this._seed++);return h-Math.floor(h)}return Math.random()}_random(h){const R=this.min.getValue(h),l=this.max.getValue(h);return this._getRandomValue()*(l-R)+R}}(0,j.f)("FlowGraphRandomBlock",f);class T extends F{constructor(h){super(a.r,(()=>Math.E),"FlowGraphEBlock",h)}}(0,j.f)("FlowGraphEBlock",T);class E extends F{constructor(h){super(a.r,(()=>Math.PI),"FlowGraphPIBlock",h)}}(0,j.f)("FlowGraphPIBlock",E);class x extends F{constructor(h){super(a.r,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",h)}}(0,j.f)("FlowGraphInfBlock",x);class G extends F{constructor(h){super(a.r,(()=>Number.NaN),"FlowGraphNaNBlock",h)}}function p(h,R){switch((0,q.k)(h)){case"FlowGraphInteger":return new c.c(R(h.value));case"Vector2":return new w.Vector2(R(h.x),R(h.y));case"tR":return new w.tR(R(h.x),R(h.y),R(h.z));case"Vector4":return new w.Vector4(R(h.x),R(h.y),R(h.z),R(h.w));case"Quaternion":return new w.Quaternion(R(h.x),R(h.y),R(h.z),R(h.w));case"Matrix":return w.Matrix.GR(h.m.map(R));case"Matrix2D":return new J.d(h.m.map(R));case"Matrix3D":return new J.h(h.m.map(R));default:return R(h)}}(0,j.f)("FlowGraphNaNBlock",G);class O extends mh.d{constructor(h){super(a.r,a.r,(h=>this._polymorphicAbs(h)),"FlowGraphAbsBlock",h)}_polymorphicAbs(h){return p(h,Math.abs)}}(0,j.f)("FlowGraphAbsBlock",O);class y extends mh.d{constructor(h){super(a.r,a.r,(h=>this._polymorphicSign(h)),"FlowGraphSignBlock",h)}_polymorphicSign(h){return p(h,Math.sign)}}(0,j.f)("FlowGraphSignBlock",y);class v extends mh.d{constructor(h){super(a.r,a.r,(h=>this._polymorphicTrunc(h)),"FlowGraphTruncBlock",h)}_polymorphicTrunc(h){return p(h,Math.trunc)}}(0,j.f)("FlowGraphTruncBlock",v);class b extends mh.d{constructor(h){super(a.r,a.r,(h=>this._polymorphicFloor(h)),"FlowGraphFloorBlock",h)}_polymorphicFloor(h){return p(h,Math.floor)}}(0,j.f)("FlowGraphFloorBlock",b);class I extends mh.d{constructor(h){super(a.c,a.c,(h=>this._polymorphicCeiling(h)),"FlowGraphCeilBlock",h)}_polymorphicCeiling(h){return p(h,Math.ceil)}}(0,j.f)("FlowGraphCeilBlock",I);class L extends mh.d{constructor(h){super(a.c,a.c,(h=>this._polymorphicRound(h)),"FlowGraphRoundBlock",h)}_polymorphicRound(h){return p(h,(h=>{var R;return h<0&&null!==(R=this.config)&&void 0!==R&&R.roundHalfAwayFromZero?-Math.round(-h):Math.round(h)}))}}(0,j.f)("FlowGraphRoundBlock",L);class n extends mh.d{constructor(h){super(a.c,a.c,(h=>this._polymorphicFraction(h)),"FlowGraphFractBlock",h)}_polymorphicFraction(h){return p(h,(h=>h-Math.floor(h)))}}(0,j.f)("FlowGraphFractBlock",n);class r extends mh.d{constructor(h){super(a.c,a.c,(h=>this._polymorphicNeg(h)),"FlowGraphNegationBlock",h)}_polymorphicNeg(h){return p(h,(h=>-h))}}function P(h,R,l){switch((0,q.k)(h)){case"FlowGraphInteger":return new c.c(l(h.value,R.value));case"Vector2":return new w.Vector2(l(h.x,R.x),l(h.y,R.y));case"tR":return new w.tR(l(h.x,R.x),l(h.y,R.y),l(h.z,R.z));case"Vector4":return new w.Vector4(l(h.x,R.x),l(h.y,R.y),l(h.z,R.z),l(h.w,R.w));case"Quaternion":return new w.Quaternion(l(h.x,R.x),l(h.y,R.y),l(h.z,R.z),l(h.w,R.w));case"Matrix":return w.Matrix.GR(h.m.map(((h,j)=>l(h,R.m[j]))));case"Matrix2D":return new J.d(h.m.map(((h,j)=>l(h,R.m[j]))));case"Matrix3D":return new J.h(h.m.map(((h,j)=>l(h,R.m[j]))));default:return l((0,q.s)(h),(0,q.s)(R))}}(0,j.f)("FlowGraphNegationBlock",r);class z extends D.d{constructor(h){super(a.c,a.c,a.c,((h,R)=>this._polymorphicRemainder(h,R)),"FlowGraphModuloBlock",h)}_polymorphicRemainder(h,R){return P(h,R,((h,R)=>h%R))}}(0,j.f)("FlowGraphModuloBlock",z);class o extends D.d{constructor(h){super(a.c,a.c,a.c,((h,R)=>this._polymorphicMin(h,R)),"FlowGraphMinBlock",h)}_polymorphicMin(h,R){return P(h,R,Math.min)}}(0,j.f)("FlowGraphMinBlock",o);class K extends D.d{constructor(h){super(a.c,a.c,a.c,((h,R)=>this._polymorphicMax(h,R)),"FlowGraphMaxBlock",h)}_polymorphicMax(h,R){return P(h,R,Math.max)}}function W(h,R,l){return Math.min(Math.max(h,Math.min(R,l)),Math.max(R,l))}function g(h,R,l,j){switch((0,q.k)(h)){case"FlowGraphInteger":return new c.c(j(h.value,R.value,l.value));case"Vector2":return new w.Vector2(j(h.x,R.x,l.x),j(h.y,R.y,l.y));case"tR":return new w.tR(j(h.x,R.x,l.x),j(h.y,R.y,l.y),j(h.z,R.z,l.z));case"Vector4":return new w.Vector4(j(h.x,R.x,l.x),j(h.y,R.y,l.y),j(h.z,R.z,l.z),j(h.w,R.w,l.w));case"Quaternion":return new w.Quaternion(j(h.x,R.x,l.x),j(h.y,R.y,l.y),j(h.z,R.z,l.z),j(h.w,R.w,l.w));case"Matrix":return w.Matrix.GR(h.m.map(((h,a)=>j(h,R.m[a],l.m[a]))));case"Matrix2D":return new J.d(h.m.map(((h,a)=>j(h,R.m[a],l.m[a]))));case"Matrix3D":return new J.h(h.m.map(((h,a)=>j(h,R.m[a],l.m[a]))));default:return j((0,q.s)(h),(0,q.s)(R),(0,q.s)(l))}}(0,j.f)("FlowGraphMaxBlock",K);class H extends u{constructor(h){super(a.c,a.c,a.c,a.c,((h,R,l)=>this._polymorphicClamp(h,R,l)),"FlowGraphClampBlock",h)}_polymorphicClamp(h,R,l){return g(h,R,l,W)}}function k(h){return Math.min(Math.max(h,0),1)}(0,j.f)("FlowGraphClampBlock",H);class C extends mh.d{constructor(h){super(a.c,a.c,(h=>this._polymorphicSaturate(h)),"FlowGraphSaturateBlock",h)}_polymorphicSaturate(h){return p(h,k)}}function A(h,R,l){return(1-l)*h+l*R}(0,j.f)("FlowGraphSaturateBlock",C);class e extends u{constructor(h){super(a.c,a.c,a.c,a.c,((h,R,l)=>this._polymorphicInterpolate(h,R,l)),"FlowGraphMathInterpolationBlock",h)}_polymorphicInterpolate(h,R,l){return g(h,R,l,A)}}(0,j.f)("FlowGraphMathInterpolationBlock",e);class S extends D.d{constructor(h){super(a.c,a.c,a.g,((h,R)=>this._polymorphicEq(h,R)),"FlowGraphEqualityBlock",h)}_polymorphicEq(h,R){const l=(0,q.k)(h),j=(0,q.k)(R);return typeof h===typeof R&&((0,q.j)(l,j)||(0,q.f)(l,j)||(0,q.e)(l,j)?h.equals(R):h===R)}}function Z(h,R,l){if((0,q.t)(h)&&(0,q.t)(R))return l((0,q.s)(h),(0,q.s)(R));throw new Error(`Cannot compare ${h} and ${R}`)}(0,j.f)("FlowGraphEqualityBlock",S);class M extends D.d{constructor(h){super(a.c,a.c,a.g,((h,R)=>this._polymorphicLessThan(h,R)),"FlowGraphLessThanBlock",h)}_polymorphicLessThan(h,R){return Z(h,R,((h,R)=>h<R))}}(0,j.f)("FlowGraphLessThanBlock",M);class i extends D.d{constructor(h){super(a.c,a.c,a.g,((h,R)=>this._polymorphicLessThanOrEqual(h,R)),"FlowGraphLessThanOrEqualBlock",h)}_polymorphicLessThanOrEqual(h,R){return Z(h,R,((h,R)=>h<=R))}}(0,j.f)("FlowGraphLessThanOrEqualBlock",i);class d extends D.d{constructor(h){super(a.c,a.c,a.g,((h,R)=>this._polymorphicGreaterThan(h,R)),"FlowGraphGreaterThanBlock",h)}_polymorphicGreaterThan(h,R){return Z(h,R,((h,R)=>h>R))}}(0,j.f)("FlowGraphGreaterThanBlock",d);class X extends D.d{constructor(h){super(a.c,a.c,a.g,((h,R)=>this._polymorphicGreaterThanOrEqual(h,R)),"FlowGraphGreaterThanOrEqualBlock",h)}_polymorphicGreaterThanOrEqual(h,R){return Z(h,R,((h,R)=>h>=R))}}(0,j.f)("FlowGraphGreaterThanOrEqualBlock",X);class V extends mh.d{constructor(h){super(a.c,a.g,(h=>this._polymorphicIsNan(h)),"FlowGraphIsNaNBlock",h)}_polymorphicIsNan(h){if((0,q.t)(h,!0))return isNaN((0,q.s)(h));throw new Error(`Cannot get NaN of ${h}`)}}(0,j.f)("FlowGraphIsNaNBlock",V);class B extends mh.d{constructor(h){super(a.c,a.g,(h=>this._polymorphicIsInf(h)),"FlowGraphIsInfBlock",h)}_polymorphicIsInf(h){if((0,q.t)(h))return!isFinite((0,q.s)(h));throw new Error(`Cannot get isInf of ${h}`)}}(0,j.f)("FlowGraphIsInfBlock",B);class N extends mh.d{constructor(h){super(a.c,a.c,(h=>this._polymorphicDegToRad(h)),"FlowGraphDegToRadBlock",h)}_degToRad(h){return h*Math.PI/180}_polymorphicDegToRad(h){return p(h,this._degToRad)}}(0,j.f)("FlowGraphDegToRadBlock",N);class hh extends mh.d{constructor(h){super(a.c,a.c,(h=>this._polymorphicRadToDeg(h)),"FlowGraphRadToDegBlock",h)}_radToDeg(h){return 180*h/Math.PI}_polymorphicRadToDeg(h){return p(h,this._radToDeg)}}(0,j.f)("FlowGraphRadToDegBlock",hh);class Rh extends mh.d{constructor(h){super(a.r,a.r,(h=>this._polymorphicSin(h)),"FlowGraphSinBlock",h)}_polymorphicSin(h){return p(h,Math.sin)}}class lh extends mh.d{constructor(h){super(a.r,a.r,(h=>this._polymorphicCos(h)),"FlowGraphCosBlock",h)}_polymorphicCos(h){return p(h,Math.cos)}}class jh extends mh.d{constructor(h){super(a.r,a.r,(h=>this._polymorphicTan(h)),"FlowGraphTanBlock",h)}_polymorphicTan(h){return p(h,Math.tan)}}class ah extends mh.d{constructor(h){super(a.r,a.r,(h=>this._polymorphicAsin(h)),"FlowGraphASinBlock",h)}_polymorphicAsin(h){return p(h,Math.asin)}}(0,j.f)("FlowGraphASinBlock",ah);class Dh extends mh.d{constructor(h){super(a.r,a.r,(h=>this._polymorphicAcos(h)),"FlowGraphACosBlock",h)}_polymorphicAcos(h){return p(h,Math.acos)}}(0,j.f)("FlowGraphACosBlock",Dh);class Uh extends mh.d{constructor(h){super(a.r,a.r,(h=>this._polymorphicAtan(h)),"FlowGraphATanBlock",h)}_polymorphicAtan(h){return p(h,Math.atan)}}(0,j.f)("FlowGraphATanBlock",Uh);class Fh extends D.d{constructor(h){super(a.c,a.c,a.c,((h,R)=>this._polymorphicAtan2(h,R)),"FlowGraphATan2Block",h)}_polymorphicAtan2(h,R){return P(h,R,Math.atan2)}}(0,j.f)("FlowGraphATan2Block",Fh);class wh extends mh.d{constructor(h){super(a.c,a.c,(h=>this._polymorphicSinh(h)),"FlowGraphSinhBlock",h)}_polymorphicSinh(h){return p(h,Math.sinh)}}(0,j.f)("FlowGraphSinhBlock",wh);class mR extends mh.d{constructor(h){super(a.c,a.c,(h=>this._polymorphicCosh(h)),"FlowGraphCoshBlock",h)}_polymorphicCosh(h){return p(h,Math.cosh)}}(0,j.f)("FlowGraphCoshBlock",mR);class uh extends mh.d{constructor(h){super(a.c,a.c,(h=>this._polymorphicTanh(h)),"FlowGraphTanhBlock",h)}_polymorphicTanh(h){return p(h,Math.tanh)}}(0,j.f)("FlowGraphTanhBlock",uh);class ch extends mh.d{constructor(h){super(a.c,a.r,(h=>this._polymorphicAsinh(h)),"FlowGraphASinhBlock",h)}_polymorphicAsinh(h){return p(h,Math.asinh)}}(0,j.f)("FlowGraphASinhBlock",ch);class Jh extends mh.d{constructor(h){super(a.c,a.r,(h=>this._polymorphicAcosh(h)),"FlowGraphACoshBlock",h)}_polymorphicAcosh(h){return p(h,Math.acosh)}}(0,j.f)("FlowGraphACoshBlock",Jh);class qh extends mh.d{constructor(h){super(a.c,a.r,(h=>this._polymorphicAtanh(h)),"FlowGraphATanhBlock",h)}_polymorphicAtanh(h){return p(h,Math.atanh)}}(0,j.f)("FlowGraphATanhBlock",qh);class Qh extends mh.d{constructor(h){super(a.c,a.r,(h=>this._polymorphicExp(h)),"FlowGraphExponentialBlock",h)}_polymorphicExp(h){return p(h,Math.exp)}}(0,j.f)("FlowGraphExponentialBlock",Qh);class Yh extends mh.d{constructor(h){super(a.c,a.r,(h=>this._polymorphicLog(h)),"FlowGraphLogBlock",h)}_polymorphicLog(h){return p(h,Math.log)}}(0,j.f)("FlowGraphLogBlock",Yh);class sh extends mh.d{constructor(h){super(a.c,a.r,(h=>this._polymorphicLog2(h)),"FlowGraphLog2Block",h)}_polymorphicLog2(h){return p(h,Math.log2)}}(0,j.f)("FlowGraphLog2Block",sh);class th extends mh.d{constructor(h){super(a.c,a.r,(h=>this._polymorphicLog10(h)),"FlowGraphLog10Block",h)}_polymorphicLog10(h){return p(h,Math.log10)}}(0,j.f)("FlowGraphLog10Block",th);class fh extends mh.d{constructor(h){super(a.c,a.r,(h=>this._polymorphicSqrt(h)),"FlowGraphSquareRootBlock",h)}_polymorphicSqrt(h){return p(h,Math.sqrt)}}(0,j.f)("FlowGraphSquareRootBlock",fh);class Th extends mh.d{constructor(h){super(a.c,a.r,(h=>this._polymorphicCubeRoot(h)),"FlowGraphCubeRootBlock",h)}_polymorphicCubeRoot(h){return p(h,Math.cbrt)}}(0,j.f)("FlowGraphCubeRootBlock",Th);class Eh extends D.d{constructor(h){super(a.c,a.r,a.r,((h,R)=>this._polymorphicPow(h,R)),"FlowGraphPowerBlock",h)}_polymorphicPow(h,R){return P(h,R,Math.pow)}}(0,j.f)("FlowGraphPowerBlock",Eh);class xh extends mh.d{constructor(h){super((0,a.L)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,a.L)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(h=>"boolean"===typeof h?!h:"number"===typeof h?~h:new c.c(~h.value)),"FlowGraphBitwiseNotBlock",h)}}(0,j.f)("FlowGraphBitwiseNotBlock",xh);class Gh extends D.d{constructor(h){super((0,a.L)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,a.L)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,a.L)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),((h,R)=>{if("boolean"===typeof h&&"boolean"===typeof R)return h&&R;if("number"===typeof h&&"number"===typeof R)return h&R;if("object"===typeof h&&"object"===typeof R)return new c.c(h.value&R.value);throw new Error(`Cannot perform bitwise AND on ${h} and ${R}`)}),"FlowGraphBitwiseAndBlock",h)}}(0,j.f)("FlowGraphBitwiseAndBlock",Gh);class ph extends D.d{constructor(h){super((0,a.L)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,a.L)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,a.L)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),((h,R)=>{if("boolean"===typeof h&&"boolean"===typeof R)return h||R;if("number"===typeof h&&"number"===typeof R)return h|R;if("object"===typeof h&&"object"===typeof R)return new c.c(h.value|R.value);throw new Error(`Cannot perform bitwise OR on ${h} and ${R}`)}),"FlowGraphBitwiseOrBlock",h)}}(0,j.f)("FlowGraphBitwiseOrBlock",ph);class Oh extends D.d{constructor(h){super((0,a.L)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,a.L)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,a.L)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),((h,R)=>{if("boolean"===typeof h&&"boolean"===typeof R)return h!==R;if("number"===typeof h&&"number"===typeof R)return h^R;if("object"===typeof h&&"object"===typeof R)return new c.c(h.value^R.value);throw new Error(`Cannot perform bitwise XOR on ${h} and ${R}`)}),"FlowGraphBitwiseXorBlock",h)}}(0,j.f)("FlowGraphBitwiseXorBlock",Oh);class yh extends D.d{constructor(h){super(a.i,a.i,a.i,((h,R)=>new c.c(h.value<<R.value)),"FlowGraphBitwiseLeftShiftBlock",h)}}(0,j.f)("FlowGraphBitwiseLeftShiftBlock",yh);class vh extends D.d{constructor(h){super(a.i,a.i,a.i,((h,R)=>new c.c(h.value>>R.value)),"FlowGraphBitwiseRightShiftBlock",h)}}(0,j.f)("FlowGraphBitwiseRightShiftBlock",vh);class bh extends mh.d{constructor(h){super(a.i,a.i,(h=>new c.c(Math.clz32(h.value))),"FlowGraphLeadingZerosBlock",h)}}(0,j.f)("FlowGraphLeadingZerosBlock",bh);class Ih extends mh.d{constructor(h){super(a.i,a.i,(h=>new c.c(h.value?31-Math.clz32(h.value&-h.value):32)),"FlowGraphTrailingZerosBlock",h)}}(0,j.f)("FlowGraphTrailingZerosBlock",Ih);class Lh extends mh.d{constructor(h){super(a.i,a.i,(h=>new c.c(function(h){let R=0;for(;h;)R+=1&h,h>>=1;return R}(h.value))),"FlowGraphOneBitsCounterBlock",h)}}(0,j.f)("FlowGraphOneBitsCounterBlock",Lh)},16157:(h,R,l)=>{l.d(R,{d:()=>a});var j=l(16163);class a extends j.d{constructor(h,R,l,j,a,D){super(l,D),this._operation=j,this._className=a,this.a=this.registerDataInput("a",h),this.b=this.registerDataInput("b",R)}_doOperation(h){const R=this.a.getValue(h),l=this.b.getValue(h);return this._operation(R,l)}getClassName(){return this._className}}},16163:(h,R,l)=>{l.d(R,{d:()=>F});var j=l(14620),a=l(14597);const D="cachedOperationValue",U="cachedExecutionId";class F extends j.e{constructor(h,R){super(R),this.value=this.registerDataOutput("value",h),this.isValid=this.registerDataOutput("isValid",a.g)}_updateOutputs(h){const R=h._getExecutionVariable(this,U,-1),l=h._getExecutionVariable(this,D,null);if(void 0!==l&&null!==l&&R===h.executionId)this.isValid.setValue(!0,h),this.value.setValue(l,h);else try{const R=this._doOperation(h);if(void 0===R||null===R)return void this.isValid.setValue(!1,h);h._setExecutionVariable(this,D,R),h._setExecutionVariable(this,U,h.executionId),this.value.setValue(R,h),this.isValid.setValue(!0,h)}catch(j){this.isValid.setValue(!1,h)}}}},16166:(h,R,l)=>{l.d(R,{d:()=>a});var j=l(16163);class a extends j.d{constructor(h,R,l,j,a){super(R,a),this._operation=l,this._className=j,this.a=this.registerDataInput("a",h)}_doOperation(h){return this._operation(this.a.getValue(h))}getClassName(){return this._className}}}}]);