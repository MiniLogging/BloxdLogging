"use strict";(self.u4k1rqylno=self.u4k1rqylno||[]).push([[88],{14887:(e,E,H)=>{H.r(E),H.d(E,{FlowGraphAbsBlock:()=>w,FlowGraphAcosBlock:()=>ze,FlowGraphAcoshBlock:()=>Ve,FlowGraphAddBlock:()=>j,FlowGraphAsinBlock:()=>ue,FlowGraphAsinhBlock:()=>ie,FlowGraphAtan2Block:()=>Me,FlowGraphAtanBlock:()=>Pe,FlowGraphAtanhBlock:()=>Ue,FlowGraphBitwiseAndBlock:()=>Ye,FlowGraphBitwiseLeftShiftBlock:()=>se,FlowGraphBitwiseNotBlock:()=>re,FlowGraphBitwiseOrBlock:()=>fe,FlowGraphBitwiseRightShiftBlock:()=>pe,FlowGraphBitwiseXorBlock:()=>we,FlowGraphCeilBlock:()=>y,FlowGraphClampBlock:()=>G,FlowGraphCosBlock:()=>He,FlowGraphCoshBlock:()=>Ae,FlowGraphCubeRootBlock:()=>ae,FlowGraphDegToRadBlock:()=>x,FlowGraphDivideBlock:()=>S,FlowGraphEBlock:()=>a,FlowGraphEqualityBlock:()=>J,FlowGraphExpBlock:()=>je,FlowGraphFloorBlock:()=>o,FlowGraphFractionBlock:()=>K,FlowGraphGreaterThanBlock:()=>q,FlowGraphGreaterThanOrEqualBlock:()=>c,FlowGraphInfBlock:()=>r,FlowGraphIsInfinityBlock:()=>g,FlowGraphIsNanBlock:()=>n,FlowGraphLeadingZerosBlock:()=>oe,FlowGraphLessThanBlock:()=>I,FlowGraphLessThanOrEqualBlock:()=>t,FlowGraphLog10Block:()=>Se,FlowGraphLog2Block:()=>he,FlowGraphLogBlock:()=>Fe,FlowGraphMathInterpolationBlock:()=>k,FlowGraphMaxBlock:()=>T,FlowGraphMinBlock:()=>R,FlowGraphModuloBlock:()=>v,FlowGraphMultiplyBlock:()=>h,FlowGraphNaNBlock:()=>Y,FlowGraphNegationBlock:()=>l,FlowGraphOneBitsCounterBlock:()=>be,FlowGraphPiBlock:()=>W,FlowGraphPowerBlock:()=>We,FlowGraphRadToDegBlock:()=>ee,FlowGraphRandomBlock:()=>X,FlowGraphRoundBlock:()=>b,FlowGraphSaturateBlock:()=>Q,FlowGraphSignBlock:()=>s,FlowGraphSinBlock:()=>Ee,FlowGraphSinhBlock:()=>De,FlowGraphSquareRootBlock:()=>Xe,FlowGraphSubtractBlock:()=>F,FlowGraphTanBlock:()=>Ne,FlowGraphTanhBlock:()=>Ce,FlowGraphTrailingZerosBlock:()=>ye,FlowGraphTruncBlock:()=>p});var N=H(11690),u=H(13415),z=H(14889),P=H(14894);class M extends P.c{constructor(e,E,H,N){super(e,N),this._operation=E,this._className=H}_doOperation(e){return this._operation(e)}getClassName(){return this._className}}var D=H(11738),A=H(14898);class C extends P.c{constructor(e,E,H,N,u,z,P){super(N,P),this._operation=u,this._className=z,this.a=this.registerDataInput("a",e),this.b=this.registerDataInput("b",E),this.c=this.registerDataInput("c",H)}_doOperation(e){return this._operation(this.a.getValue(e),this.b.getValue(e),this.c.getValue(e))}getClassName(){return this._className}}var i=H(13407),V=H(13421),U=H(13457);class j extends z.b{constructor(e){super((0,u.N)(null===e||void 0===e?void 0:e.type),(0,u.N)(null===e||void 0===e?void 0:e.type),(0,u.N)(null===e||void 0===e?void 0:e.type),((e,E)=>this._polymorphicAdd(e,E)),"FlowGraphAddBlock",e)}_polymorphicAdd(e,E){const H=(0,U.l)(e),N=(0,U.l)(E);if((0,U.h)(H,N)||(0,U.f)(H,N)||(0,U.b)(H,N))return e.add(E);if("Quaternion"===H||"Vector4"===N)return new D.Vector4(e.x,e.y,e.z,e.w).addInPlace(E);if("Vector4"===H||"Quaternion"===N)return e.add(E);var u;if(null!==(u=this.config)&&void 0!==u&&u.preventIntegerFloatArithmetic&&typeof e!==typeof E)throw new Error("Cannot add different types of numbers.");return(0,U.s)(e)+(0,U.s)(E)}}(0,N.g)("FlowGraphAddBlock",j);class F extends z.b{constructor(e){super((0,u.N)(null===e||void 0===e?void 0:e.type),(0,u.N)(null===e||void 0===e?void 0:e.type),(0,u.N)(null===e||void 0===e?void 0:e.type),((e,E)=>this._polymorphicSubtract(e,E)),"FlowGraphSubtractBlock",e)}_polymorphicSubtract(e,E){const H=(0,U.l)(e),N=(0,U.l)(E);if((0,U.h)(H,N)||(0,U.b)(H,N)||(0,U.f)(H,N))return e.FE(E);if("Quaternion"===H||"Vector4"===N)return new D.Vector4(e.x,e.y,e.z,e.w).JC(E);if("Vector4"===H||"Quaternion"===N)return e.FE(E);var u;if(null!==(u=this.config)&&void 0!==u&&u.preventIntegerFloatArithmetic&&typeof e!==typeof E)throw new Error("Cannot add different types of numbers.");return(0,U.s)(e)-(0,U.s)(E)}}(0,N.g)("FlowGraphSubtractBlock",F);class h extends z.b{constructor(e){super((0,u.N)(null===e||void 0===e?void 0:e.type),(0,u.N)(null===e||void 0===e?void 0:e.type),(0,u.N)(null===e||void 0===e?void 0:e.type),((e,E)=>this._polymorphicMultiply(e,E)),"FlowGraphMultiplyBlock",e)}_polymorphicMultiply(e,E){const H=(0,U.l)(e),N=(0,U.l)(E);if((0,U.h)(H,N)||(0,U.b)(H,N))return e.multiply(E);if("Quaternion"===H||"Vector4"===N)return new D.Vector4(e.x,e.y,e.z,e.w).multiplyInPlace(E);if("Vector4"===H||"Quaternion"===N)return e.multiply(E);if((0,U.f)(H,N)){var u;if(null!==(u=this.config)&&void 0!==u&&u.useMatrixPerComponent){const N=e.m;for(let e=0;e<N.length;e++)N[e]*=E.m[e];return"Matrix2D"===H?new V.b(N):"Matrix3D"===H?new V.d(N):D.Matrix.aE(N)}return E.multiply(e)}var z;if(null!==(z=this.config)&&void 0!==z&&z.preventIntegerFloatArithmetic&&typeof e!==typeof E)throw new Error("Cannot add different types of numbers.");return(0,U.s)(e)*(0,U.s)(E)}}(0,N.g)("FlowGraphMultiplyBlock",h);class S extends z.b{constructor(e){super((0,u.N)(null===e||void 0===e?void 0:e.type),(0,u.N)(null===e||void 0===e?void 0:e.type),(0,u.N)(null===e||void 0===e?void 0:e.type),((e,E)=>this._polymorphicDivide(e,E)),"FlowGraphDivideBlock",e)}_polymorphicDivide(e,E){const H=(0,U.l)(e),N=(0,U.l)(E);if((0,U.h)(H,N)||(0,U.b)(H,N))return e.divide(E);if("Quaternion"===H||"Quaternion"===N){const H=e.clone();return H.x/=E.x,H.y/=E.y,H.z/=E.z,H.w/=E.w,H}if("Quaternion"===H||"Vector4"===N)return new D.Vector4(e.x,e.y,e.z,e.w).divideInPlace(E);if("Vector4"===H||"Quaternion"===N)return e.divide(E);if((0,U.f)(H,N)){var u;if(null!==(u=this.config)&&void 0!==u&&u.useMatrixPerComponent){const N=e.m;for(let e=0;e<N.length;e++)N[e]/=E.m[e];return"Matrix2D"===H?new V.b(N):"Matrix3D"===H?new V.d(N):D.Matrix.aE(N)}return e.divide(E)}var z;if(null!==(z=this.config)&&void 0!==z&&z.preventIntegerFloatArithmetic&&typeof e!==typeof E)throw new Error("Cannot add different types of numbers.");return(0,U.s)(e)/(0,U.s)(E)}}(0,N.g)("FlowGraphDivideBlock",S);class X extends M{constructor(e){super(u.t,(e=>this._random(e)),"FlowGraphRandomBlock",e),this.min=this.registerDataInput("min",u.t,(null===e||void 0===e?void 0:e.min)??0),this.max=this.registerDataInput("max",u.t,(null===e||void 0===e?void 0:e.max)??1),null!==e&&void 0!==e&&e.seed&&(this._seed=e.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const e=1e4*Math.sin(this._seed++);return e-Math.floor(e)}return Math.random()}_random(e){const E=this.min.getValue(e),H=this.max.getValue(e);return this._getRandomValue()*(H-E)+E}}(0,N.g)("FlowGraphRandomBlock",X);class a extends M{constructor(e){super(u.t,(()=>Math.E),"FlowGraphEBlock",e)}}(0,N.g)("FlowGraphEBlock",a);class W extends M{constructor(e){super(u.t,(()=>Math.PI),"FlowGraphPIBlock",e)}}(0,N.g)("FlowGraphPIBlock",W);class r extends M{constructor(e){super(u.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",e)}}(0,N.g)("FlowGraphInfBlock",r);class Y extends M{constructor(e){super(u.t,(()=>Number.NaN),"FlowGraphNaNBlock",e)}}function f(e,E){switch((0,U.l)(e)){case"FlowGraphInteger":return new i.b(E(e.value));case"Vector2":return new D.Vector2(E(e.x),E(e.y));case"jE":return new D.jE(E(e.x),E(e.y),E(e.z));case"Vector4":return new D.Vector4(E(e.x),E(e.y),E(e.z),E(e.w));case"Quaternion":return new D.Quaternion(E(e.x),E(e.y),E(e.z),E(e.w));case"Matrix":return D.Matrix.aE(e.m.map(E));case"Matrix2D":return new V.b(e.m.map(E));case"Matrix3D":return new V.d(e.m.map(E));default:return E(e)}}(0,N.g)("FlowGraphNaNBlock",Y);class w extends A.b{constructor(e){super(u.t,u.t,(e=>this._polymorphicAbs(e)),"FlowGraphAbsBlock",e)}_polymorphicAbs(e){return f(e,Math.abs)}}(0,N.g)("FlowGraphAbsBlock",w);class s extends A.b{constructor(e){super(u.t,u.t,(e=>this._polymorphicSign(e)),"FlowGraphSignBlock",e)}_polymorphicSign(e){return f(e,Math.sign)}}(0,N.g)("FlowGraphSignBlock",s);class p extends A.b{constructor(e){super(u.t,u.t,(e=>this._polymorphicTrunc(e)),"FlowGraphTruncBlock",e)}_polymorphicTrunc(e){return f(e,Math.trunc)}}(0,N.g)("FlowGraphTruncBlock",p);class o extends A.b{constructor(e){super(u.t,u.t,(e=>this._polymorphicFloor(e)),"FlowGraphFloorBlock",e)}_polymorphicFloor(e){return f(e,Math.floor)}}(0,N.g)("FlowGraphFloorBlock",o);class y extends A.b{constructor(e){super(u.b,u.b,(e=>this._polymorphicCeiling(e)),"FlowGraphCeilBlock",e)}_polymorphicCeiling(e){return f(e,Math.ceil)}}(0,N.g)("FlowGraphCeilBlock",y);class b extends A.b{constructor(e){super(u.b,u.b,(e=>this._polymorphicRound(e)),"FlowGraphRoundBlock",e)}_polymorphicRound(e){return f(e,(e=>{var E;return e<0&&null!==(E=this.config)&&void 0!==E&&E.roundHalfAwayFromZero?-Math.round(-e):Math.round(e)}))}}(0,N.g)("FlowGraphRoundBlock",b);class K extends A.b{constructor(e){super(u.b,u.b,(e=>this._polymorphicFraction(e)),"FlowGraphFractBlock",e)}_polymorphicFraction(e){return f(e,(e=>e-Math.floor(e)))}}(0,N.g)("FlowGraphFractBlock",K);class l extends A.b{constructor(e){super(u.b,u.b,(e=>this._polymorphicNeg(e)),"FlowGraphNegationBlock",e)}_polymorphicNeg(e){return f(e,(e=>-e))}}function O(e,E,H){switch((0,U.l)(e)){case"FlowGraphInteger":return new i.b(H(e.value,E.value));case"Vector2":return new D.Vector2(H(e.x,E.x),H(e.y,E.y));case"jE":return new D.jE(H(e.x,E.x),H(e.y,E.y),H(e.z,E.z));case"Vector4":return new D.Vector4(H(e.x,E.x),H(e.y,E.y),H(e.z,E.z),H(e.w,E.w));case"Quaternion":return new D.Quaternion(H(e.x,E.x),H(e.y,E.y),H(e.z,E.z),H(e.w,E.w));case"Matrix":return D.Matrix.aE(e.m.map(((e,N)=>H(e,E.m[N]))));case"Matrix2D":return new V.b(e.m.map(((e,N)=>H(e,E.m[N]))));case"Matrix3D":return new V.d(e.m.map(((e,N)=>H(e,E.m[N]))));default:return H((0,U.s)(e),(0,U.s)(E))}}(0,N.g)("FlowGraphNegationBlock",l);class v extends z.b{constructor(e){super(u.b,u.b,u.b,((e,E)=>this._polymorphicRemainder(e,E)),"FlowGraphModuloBlock",e)}_polymorphicRemainder(e,E){return O(e,E,((e,E)=>e%E))}}(0,N.g)("FlowGraphModuloBlock",v);class R extends z.b{constructor(e){super(u.b,u.b,u.b,((e,E)=>this._polymorphicMin(e,E)),"FlowGraphMinBlock",e)}_polymorphicMin(e,E){return O(e,E,Math.min)}}(0,N.g)("FlowGraphMinBlock",R);class T extends z.b{constructor(e){super(u.b,u.b,u.b,((e,E)=>this._polymorphicMax(e,E)),"FlowGraphMaxBlock",e)}_polymorphicMax(e,E){return O(e,E,Math.max)}}function L(e,E,H){return Math.min(Math.max(e,Math.min(E,H)),Math.max(E,H))}function d(e,E,H,N){switch((0,U.l)(e)){case"FlowGraphInteger":return new i.b(N(e.value,E.value,H.value));case"Vector2":return new D.Vector2(N(e.x,E.x,H.x),N(e.y,E.y,H.y));case"jE":return new D.jE(N(e.x,E.x,H.x),N(e.y,E.y,H.y),N(e.z,E.z,H.z));case"Vector4":return new D.Vector4(N(e.x,E.x,H.x),N(e.y,E.y,H.y),N(e.z,E.z,H.z),N(e.w,E.w,H.w));case"Quaternion":return new D.Quaternion(N(e.x,E.x,H.x),N(e.y,E.y,H.y),N(e.z,E.z,H.z),N(e.w,E.w,H.w));case"Matrix":return D.Matrix.aE(e.m.map(((e,u)=>N(e,E.m[u],H.m[u]))));case"Matrix2D":return new V.b(e.m.map(((e,u)=>N(e,E.m[u],H.m[u]))));case"Matrix3D":return new V.d(e.m.map(((e,u)=>N(e,E.m[u],H.m[u]))));default:return N((0,U.s)(e),(0,U.s)(E),(0,U.s)(H))}}(0,N.g)("FlowGraphMaxBlock",T);class G extends C{constructor(e){super(u.b,u.b,u.b,u.b,((e,E,H)=>this._polymorphicClamp(e,E,H)),"FlowGraphClampBlock",e)}_polymorphicClamp(e,E,H){return d(e,E,H,L)}}function me(e){return Math.min(Math.max(e,0),1)}(0,N.g)("FlowGraphClampBlock",G);class Q extends A.b{constructor(e){super(u.b,u.b,(e=>this._polymorphicSaturate(e)),"FlowGraphSaturateBlock",e)}_polymorphicSaturate(e){return f(e,me)}}function Z(e,E,H){return(1-H)*e+H*E}(0,N.g)("FlowGraphSaturateBlock",Q);class k extends C{constructor(e){super(u.b,u.b,u.b,u.b,((e,E,H)=>this._polymorphicInterpolate(e,E,H)),"FlowGraphMathInterpolationBlock",e)}_polymorphicInterpolate(e,E,H){return d(e,E,H,Z)}}(0,N.g)("FlowGraphMathInterpolationBlock",k);class J extends z.b{constructor(e){super(u.b,u.b,u.f,((e,E)=>this._polymorphicEq(e,E)),"FlowGraphEqualityBlock",e)}_polymorphicEq(e,E){const H=(0,U.l)(e),N=(0,U.l)(E);return typeof e===typeof E&&((0,U.h)(H,N)||(0,U.f)(H,N)||(0,U.b)(H,N)?e.equals(E):e===E)}}function B(e,E,H){if((0,U.v)(e)&&(0,U.v)(E))return H((0,U.s)(e),(0,U.s)(E));throw new Error(`Cannot compare ${e} and ${E}`)}(0,N.g)("FlowGraphEqualityBlock",J);class I extends z.b{constructor(e){super(u.b,u.b,u.f,((e,E)=>this._polymorphicLessThan(e,E)),"FlowGraphLessThanBlock",e)}_polymorphicLessThan(e,E){return B(e,E,((e,E)=>e<E))}}(0,N.g)("FlowGraphLessThanBlock",I);class t extends z.b{constructor(e){super(u.b,u.b,u.f,((e,E)=>this._polymorphicLessThanOrEqual(e,E)),"FlowGraphLessThanOrEqualBlock",e)}_polymorphicLessThanOrEqual(e,E){return B(e,E,((e,E)=>e<=E))}}(0,N.g)("FlowGraphLessThanOrEqualBlock",t);class q extends z.b{constructor(e){super(u.b,u.b,u.f,((e,E)=>this._polymorphicGreaterThan(e,E)),"FlowGraphGreaterThanBlock",e)}_polymorphicGreaterThan(e,E){return B(e,E,((e,E)=>e>E))}}(0,N.g)("FlowGraphGreaterThanBlock",q);class c extends z.b{constructor(e){super(u.b,u.b,u.f,((e,E)=>this._polymorphicGreaterThanOrEqual(e,E)),"FlowGraphGreaterThanOrEqualBlock",e)}_polymorphicGreaterThanOrEqual(e,E){return B(e,E,((e,E)=>e>=E))}}(0,N.g)("FlowGraphGreaterThanOrEqualBlock",c);class n extends A.b{constructor(e){super(u.b,u.f,(e=>this._polymorphicIsNan(e)),"FlowGraphIsNaNBlock",e)}_polymorphicIsNan(e){if((0,U.v)(e,!0))return isNaN((0,U.s)(e));throw new Error(`Cannot get NaN of ${e}`)}}(0,N.g)("FlowGraphIsNaNBlock",n);class g extends A.b{constructor(e){super(u.b,u.f,(e=>this._polymorphicIsInf(e)),"FlowGraphIsInfBlock",e)}_polymorphicIsInf(e){if((0,U.v)(e))return!isFinite((0,U.s)(e));throw new Error(`Cannot get isInf of ${e}`)}}(0,N.g)("FlowGraphIsInfBlock",g);class x extends A.b{constructor(e){super(u.b,u.b,(e=>this._polymorphicDegToRad(e)),"FlowGraphDegToRadBlock",e)}_degToRad(e){return e*Math.PI/180}_polymorphicDegToRad(e){return f(e,this._degToRad)}}(0,N.g)("FlowGraphDegToRadBlock",x);class ee extends A.b{constructor(e){super(u.b,u.b,(e=>this._polymorphicRadToDeg(e)),"FlowGraphRadToDegBlock",e)}_radToDeg(e){return 180*e/Math.PI}_polymorphicRadToDeg(e){return f(e,this._radToDeg)}}(0,N.g)("FlowGraphRadToDegBlock",ee);class Ee extends A.b{constructor(e){super(u.t,u.t,(e=>this._polymorphicSin(e)),"FlowGraphSinBlock",e)}_polymorphicSin(e){return f(e,Math.sin)}}class He extends A.b{constructor(e){super(u.t,u.t,(e=>this._polymorphicCos(e)),"FlowGraphCosBlock",e)}_polymorphicCos(e){return f(e,Math.cos)}}class Ne extends A.b{constructor(e){super(u.t,u.t,(e=>this._polymorphicTan(e)),"FlowGraphTanBlock",e)}_polymorphicTan(e){return f(e,Math.tan)}}class ue extends A.b{constructor(e){super(u.t,u.t,(e=>this._polymorphicAsin(e)),"FlowGraphASinBlock",e)}_polymorphicAsin(e){return f(e,Math.asin)}}(0,N.g)("FlowGraphASinBlock",ue);class ze extends A.b{constructor(e){super(u.t,u.t,(e=>this._polymorphicAcos(e)),"FlowGraphACosBlock",e)}_polymorphicAcos(e){return f(e,Math.acos)}}(0,N.g)("FlowGraphACosBlock",ze);class Pe extends A.b{constructor(e){super(u.t,u.t,(e=>this._polymorphicAtan(e)),"FlowGraphATanBlock",e)}_polymorphicAtan(e){return f(e,Math.atan)}}(0,N.g)("FlowGraphATanBlock",Pe);class Me extends z.b{constructor(e){super(u.b,u.b,u.b,((e,E)=>this._polymorphicAtan2(e,E)),"FlowGraphATan2Block",e)}_polymorphicAtan2(e,E){return O(e,E,Math.atan2)}}(0,N.g)("FlowGraphATan2Block",Me);class De extends A.b{constructor(e){super(u.b,u.b,(e=>this._polymorphicSinh(e)),"FlowGraphSinhBlock",e)}_polymorphicSinh(e){return f(e,Math.sinh)}}(0,N.g)("FlowGraphSinhBlock",De);class Ae extends A.b{constructor(e){super(u.b,u.b,(e=>this._polymorphicCosh(e)),"FlowGraphCoshBlock",e)}_polymorphicCosh(e){return f(e,Math.cosh)}}(0,N.g)("FlowGraphCoshBlock",Ae);class Ce extends A.b{constructor(e){super(u.b,u.b,(e=>this._polymorphicTanh(e)),"FlowGraphTanhBlock",e)}_polymorphicTanh(e){return f(e,Math.tanh)}}(0,N.g)("FlowGraphTanhBlock",Ce);class ie extends A.b{constructor(e){super(u.b,u.t,(e=>this._polymorphicAsinh(e)),"FlowGraphASinhBlock",e)}_polymorphicAsinh(e){return f(e,Math.asinh)}}(0,N.g)("FlowGraphASinhBlock",ie);class Ve extends A.b{constructor(e){super(u.b,u.t,(e=>this._polymorphicAcosh(e)),"FlowGraphACoshBlock",e)}_polymorphicAcosh(e){return f(e,Math.acosh)}}(0,N.g)("FlowGraphACoshBlock",Ve);class Ue extends A.b{constructor(e){super(u.b,u.t,(e=>this._polymorphicAtanh(e)),"FlowGraphATanhBlock",e)}_polymorphicAtanh(e){return f(e,Math.atanh)}}(0,N.g)("FlowGraphATanhBlock",Ue);class je extends A.b{constructor(e){super(u.b,u.t,(e=>this._polymorphicExp(e)),"FlowGraphExponentialBlock",e)}_polymorphicExp(e){return f(e,Math.exp)}}(0,N.g)("FlowGraphExponentialBlock",je);class Fe extends A.b{constructor(e){super(u.b,u.t,(e=>this._polymorphicLog(e)),"FlowGraphLogBlock",e)}_polymorphicLog(e){return f(e,Math.log)}}(0,N.g)("FlowGraphLogBlock",Fe);class he extends A.b{constructor(e){super(u.b,u.t,(e=>this._polymorphicLog2(e)),"FlowGraphLog2Block",e)}_polymorphicLog2(e){return f(e,Math.log2)}}(0,N.g)("FlowGraphLog2Block",he);class Se extends A.b{constructor(e){super(u.b,u.t,(e=>this._polymorphicLog10(e)),"FlowGraphLog10Block",e)}_polymorphicLog10(e){return f(e,Math.log10)}}(0,N.g)("FlowGraphLog10Block",Se);class Xe extends A.b{constructor(e){super(u.b,u.t,(e=>this._polymorphicSqrt(e)),"FlowGraphSquareRootBlock",e)}_polymorphicSqrt(e){return f(e,Math.sqrt)}}(0,N.g)("FlowGraphSquareRootBlock",Xe);class ae extends A.b{constructor(e){super(u.b,u.t,(e=>this._polymorphicCubeRoot(e)),"FlowGraphCubeRootBlock",e)}_polymorphicCubeRoot(e){return f(e,Math.cbrt)}}(0,N.g)("FlowGraphCubeRootBlock",ae);class We extends z.b{constructor(e){super(u.b,u.t,u.t,((e,E)=>this._polymorphicPow(e,E)),"FlowGraphPowerBlock",e)}_polymorphicPow(e,E){return O(e,E,Math.pow)}}(0,N.g)("FlowGraphPowerBlock",We);class re extends A.b{constructor(e){super((0,u.N)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),(0,u.N)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),(e=>"boolean"===typeof e?!e:"number"===typeof e?~e:new i.b(~e.value)),"FlowGraphBitwiseNotBlock",e)}}(0,N.g)("FlowGraphBitwiseNotBlock",re);class Ye extends z.b{constructor(e){super((0,u.N)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),(0,u.N)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),(0,u.N)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),((e,E)=>{if("boolean"===typeof e&&"boolean"===typeof E)return e&&E;if("number"===typeof e&&"number"===typeof E)return e&E;if("object"===typeof e&&"object"===typeof E)return new i.b(e.value&E.value);throw new Error(`Cannot perform bitwise AND on ${e} and ${E}`)}),"FlowGraphBitwiseAndBlock",e)}}(0,N.g)("FlowGraphBitwiseAndBlock",Ye);class fe extends z.b{constructor(e){super((0,u.N)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),(0,u.N)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),(0,u.N)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),((e,E)=>{if("boolean"===typeof e&&"boolean"===typeof E)return e||E;if("number"===typeof e&&"number"===typeof E)return e|E;if("object"===typeof e&&"object"===typeof E)return new i.b(e.value|E.value);throw new Error(`Cannot perform bitwise OR on ${e} and ${E}`)}),"FlowGraphBitwiseOrBlock",e)}}(0,N.g)("FlowGraphBitwiseOrBlock",fe);class we extends z.b{constructor(e){super((0,u.N)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),(0,u.N)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),(0,u.N)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),((e,E)=>{if("boolean"===typeof e&&"boolean"===typeof E)return e!==E;if("number"===typeof e&&"number"===typeof E)return e^E;if("object"===typeof e&&"object"===typeof E)return new i.b(e.value^E.value);throw new Error(`Cannot perform bitwise XOR on ${e} and ${E}`)}),"FlowGraphBitwiseXorBlock",e)}}(0,N.g)("FlowGraphBitwiseXorBlock",we);class se extends z.b{constructor(e){super(u.h,u.h,u.h,((e,E)=>new i.b(e.value<<E.value)),"FlowGraphBitwiseLeftShiftBlock",e)}}(0,N.g)("FlowGraphBitwiseLeftShiftBlock",se);class pe extends z.b{constructor(e){super(u.h,u.h,u.h,((e,E)=>new i.b(e.value>>E.value)),"FlowGraphBitwiseRightShiftBlock",e)}}(0,N.g)("FlowGraphBitwiseRightShiftBlock",pe);class oe extends A.b{constructor(e){super(u.h,u.h,(e=>new i.b(Math.clz32(e.value))),"FlowGraphLeadingZerosBlock",e)}}(0,N.g)("FlowGraphLeadingZerosBlock",oe);class ye extends A.b{constructor(e){super(u.h,u.h,(e=>new i.b(e.value?31-Math.clz32(e.value&-e.value):32)),"FlowGraphTrailingZerosBlock",e)}}(0,N.g)("FlowGraphTrailingZerosBlock",ye);class be extends A.b{constructor(e){super(u.h,u.h,(e=>new i.b(function(e){let E=0;for(;e;)E+=1&e,e>>=1;return E}(e.value))),"FlowGraphOneBitsCounterBlock",e)}}(0,N.g)("FlowGraphOneBitsCounterBlock",be)},14889:(e,E,H)=>{H.d(E,{b:()=>u});var N=H(14894);class u extends N.c{constructor(e,E,H,N,u,z){super(H,z),this._operation=N,this._className=u,this.a=this.registerDataInput("a",e),this.b=this.registerDataInput("b",E)}_doOperation(e){const E=this.a.getValue(e),H=this.b.getValue(e);return this._operation(E,H)}getClassName(){return this._className}}},14894:(e,E,H)=>{H.d(E,{c:()=>M});var N=H(13441),u=H(13415);const z="cachedOperationValue",P="cachedExecutionId";class M extends N.b{constructor(e,E){super(E),this.value=this.registerDataOutput("value",e),this.isValid=this.registerDataOutput("isValid",u.f)}_updateOutputs(e){const E=e._getExecutionVariable(this,P,-1),H=e._getExecutionVariable(this,z,null);if(void 0!==H&&null!==H&&E===e.executionId)this.isValid.setValue(!0,e),this.value.setValue(H,e);else try{const E=this._doOperation(e);if(void 0===E||null===E)return void this.isValid.setValue(!1,e);e._setExecutionVariable(this,z,E),e._setExecutionVariable(this,P,e.executionId),this.value.setValue(E,e),this.isValid.setValue(!0,e)}catch(N){this.isValid.setValue(!1,e)}}}},14898:(e,E,H)=>{H.d(E,{b:()=>u});var N=H(14894);class u extends N.c{constructor(e,E,H,N,u){super(E,u),this._operation=H,this._className=N,this.a=this.registerDataInput("a",e)}_doOperation(e){return this._operation(this.a.getValue(e))}getClassName(){return this._className}}}}]);