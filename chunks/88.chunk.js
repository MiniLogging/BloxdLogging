"use strict";(self.k9ivgwsw3f=self.k9ivgwsw3f||[]).push([[88],{16099:(Y,b,C)=>{C.r(b),C.d(b,{FlowGraphAbsBlock:()=>c,FlowGraphAcosBlock:()=>AY,FlowGraphAcoshBlock:()=>yY,FlowGraphAddBlock:()=>n,FlowGraphAsinBlock:()=>qY,FlowGraphAsinhBlock:()=>FY,FlowGraphAtan2Block:()=>BY,FlowGraphAtanBlock:()=>EY,FlowGraphAtanhBlock:()=>SY,FlowGraphBitwiseAndBlock:()=>LY,FlowGraphBitwiseLeftShiftBlock:()=>lY,FlowGraphBitwiseNotBlock:()=>mb,FlowGraphBitwiseOrBlock:()=>uY,FlowGraphBitwiseRightShiftBlock:()=>XY,FlowGraphBitwiseXorBlock:()=>cY,FlowGraphCeilBlock:()=>T,FlowGraphClampBlock:()=>H,FlowGraphCosBlock:()=>CY,FlowGraphCoshBlock:()=>rY,FlowGraphCubeRootBlock:()=>NY,FlowGraphDegToRadBlock:()=>Z,FlowGraphDivideBlock:()=>w,FlowGraphEBlock:()=>N,FlowGraphEqualityBlock:()=>d,FlowGraphExpBlock:()=>nY,FlowGraphFloorBlock:()=>j,FlowGraphFractionBlock:()=>v,FlowGraphGreaterThanBlock:()=>a,FlowGraphGreaterThanOrEqualBlock:()=>M,FlowGraphInfBlock:()=>mY,FlowGraphIsInfinityBlock:()=>f,FlowGraphIsNanBlock:()=>K,FlowGraphLeadingZerosBlock:()=>jY,FlowGraphLessThanBlock:()=>k,FlowGraphLessThanOrEqualBlock:()=>x,FlowGraphLog10Block:()=>wY,FlowGraphLog2Block:()=>IY,FlowGraphLogBlock:()=>tY,FlowGraphMathInterpolationBlock:()=>D,FlowGraphMaxBlock:()=>G,FlowGraphMinBlock:()=>o,FlowGraphModuloBlock:()=>U,FlowGraphMultiplyBlock:()=>I,FlowGraphNaNBlock:()=>L,FlowGraphNegationBlock:()=>z,FlowGraphOneBitsCounterBlock:()=>PY,FlowGraphPiBlock:()=>p,FlowGraphPowerBlock:()=>pY,FlowGraphRadToDegBlock:()=>YY,FlowGraphRandomBlock:()=>Q,FlowGraphRoundBlock:()=>P,FlowGraphSaturateBlock:()=>W,FlowGraphSignBlock:()=>l,FlowGraphSinBlock:()=>bY,FlowGraphSinhBlock:()=>gY,FlowGraphSquareRootBlock:()=>QY,FlowGraphSubtractBlock:()=>t,FlowGraphTanBlock:()=>RY,FlowGraphTanhBlock:()=>OY,FlowGraphTrailingZerosBlock:()=>TY,FlowGraphTruncBlock:()=>X});var R=C(12790),q=C(14424),A=C(16103),E=C(16111);class B extends E.d{constructor(Y,b,C,R){super(Y,R),this._operation=b,this._className=C}_doOperation(Y){return this._operation(Y)}getClassName(){return this._className}}var g=C(12831),r=C(16116);class O extends E.d{constructor(Y,b,C,R,q,A,E){super(R,E),this._operation=q,this._className=A,this.a=this.registerDataInput("a",Y),this.b=this.registerDataInput("b",b),this.c=this.registerDataInput("c",C)}_doOperation(Y){return this._operation(this.a.getValue(Y),this.b.getValue(Y),this.c.getValue(Y))}getClassName(){return this._className}}var F=C(14420),y=C(14426),S=C(14448);class n extends A.e{constructor(Y){super((0,q.J)(null===Y||void 0===Y?void 0:Y.type),(0,q.J)(null===Y||void 0===Y?void 0:Y.type),(0,q.J)(null===Y||void 0===Y?void 0:Y.type),((Y,b)=>this._polymorphicAdd(Y,b)),"FlowGraphAddBlock",Y)}_polymorphicAdd(Y,b){const C=(0,S.f)(Y),R=(0,S.f)(b);if((0,S.d)(C,R)||(0,S.c)(C,R)||(0,S.b)(C,R))return Y.add(b);if("Quaternion"===C||"Vector4"===R)return new g.Vector4(Y.x,Y.y,Y.z,Y.w).addInPlace(b);if("Vector4"===C||"Quaternion"===R)return Y.add(b);var q;if(null!==(q=this.config)&&void 0!==q&&q.preventIntegerFloatArithmetic&&typeof Y!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,S.j)(Y)+(0,S.j)(b)}}(0,R.g)("FlowGraphAddBlock",n);class t extends A.e{constructor(Y){super((0,q.J)(null===Y||void 0===Y?void 0:Y.type),(0,q.J)(null===Y||void 0===Y?void 0:Y.type),(0,q.J)(null===Y||void 0===Y?void 0:Y.type),((Y,b)=>this._polymorphicSubtract(Y,b)),"FlowGraphSubtractBlock",Y)}_polymorphicSubtract(Y,b){const C=(0,S.f)(Y),R=(0,S.f)(b);if((0,S.d)(C,R)||(0,S.b)(C,R)||(0,S.c)(C,R))return Y.EC(b);if("Quaternion"===C||"Vector4"===R)return new g.Vector4(Y.x,Y.y,Y.z,Y.w).dF(b);if("Vector4"===C||"Quaternion"===R)return Y.EC(b);var q;if(null!==(q=this.config)&&void 0!==q&&q.preventIntegerFloatArithmetic&&typeof Y!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,S.j)(Y)-(0,S.j)(b)}}(0,R.g)("FlowGraphSubtractBlock",t);class I extends A.e{constructor(Y){super((0,q.J)(null===Y||void 0===Y?void 0:Y.type),(0,q.J)(null===Y||void 0===Y?void 0:Y.type),(0,q.J)(null===Y||void 0===Y?void 0:Y.type),((Y,b)=>this._polymorphicMultiply(Y,b)),"FlowGraphMultiplyBlock",Y)}_polymorphicMultiply(Y,b){const C=(0,S.f)(Y),R=(0,S.f)(b);if((0,S.d)(C,R)||(0,S.b)(C,R))return Y.multiply(b);if("Quaternion"===C||"Vector4"===R)return new g.Vector4(Y.x,Y.y,Y.z,Y.w).multiplyInPlace(b);if("Vector4"===C||"Quaternion"===R)return Y.multiply(b);if((0,S.c)(C,R)){var q;if(null!==(q=this.config)&&void 0!==q&&q.useMatrixPerComponent){const R=Y.m;for(let Y=0;Y<R.length;Y++)R[Y]*=b.m[Y];return"Matrix2D"===C?new y.b(R):"Matrix3D"===C?new y.f(R):g.Matrix.OC(R)}return b.multiply(Y)}var A;if(null!==(A=this.config)&&void 0!==A&&A.preventIntegerFloatArithmetic&&typeof Y!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,S.j)(Y)*(0,S.j)(b)}}(0,R.g)("FlowGraphMultiplyBlock",I);class w extends A.e{constructor(Y){super((0,q.J)(null===Y||void 0===Y?void 0:Y.type),(0,q.J)(null===Y||void 0===Y?void 0:Y.type),(0,q.J)(null===Y||void 0===Y?void 0:Y.type),((Y,b)=>this._polymorphicDivide(Y,b)),"FlowGraphDivideBlock",Y)}_polymorphicDivide(Y,b){const C=(0,S.f)(Y),R=(0,S.f)(b);if((0,S.d)(C,R)||(0,S.b)(C,R))return Y.divide(b);if("Quaternion"===C||"Quaternion"===R){const C=Y.clone();return C.x/=b.x,C.y/=b.y,C.z/=b.z,C.w/=b.w,C}if("Quaternion"===C||"Vector4"===R)return new g.Vector4(Y.x,Y.y,Y.z,Y.w).divideInPlace(b);if("Vector4"===C||"Quaternion"===R)return Y.divide(b);if((0,S.c)(C,R)){var q;if(null!==(q=this.config)&&void 0!==q&&q.useMatrixPerComponent){const R=Y.m;for(let Y=0;Y<R.length;Y++)R[Y]/=b.m[Y];return"Matrix2D"===C?new y.b(R):"Matrix3D"===C?new y.f(R):g.Matrix.OC(R)}return Y.divide(b)}var A;if(null!==(A=this.config)&&void 0!==A&&A.preventIntegerFloatArithmetic&&typeof Y!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,S.j)(Y)/(0,S.j)(b)}}(0,R.g)("FlowGraphDivideBlock",w);class Q extends B{constructor(Y){super(q.q,(Y=>this._random(Y)),"FlowGraphRandomBlock",Y),this.min=this.registerDataInput("min",q.q,(null===Y||void 0===Y?void 0:Y.min)??0),this.max=this.registerDataInput("max",q.q,(null===Y||void 0===Y?void 0:Y.max)??1),null!==Y&&void 0!==Y&&Y.seed&&(this._seed=Y.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const Y=1e4*Math.sin(this._seed++);return Y-Math.floor(Y)}return Math.random()}_random(Y){const b=this.min.getValue(Y),C=this.max.getValue(Y);return this._getRandomValue()*(C-b)+b}}(0,R.g)("FlowGraphRandomBlock",Q);class N extends B{constructor(Y){super(q.q,(()=>Math.E),"FlowGraphEBlock",Y)}}(0,R.g)("FlowGraphEBlock",N);class p extends B{constructor(Y){super(q.q,(()=>Math.PI),"FlowGraphPIBlock",Y)}}(0,R.g)("FlowGraphPIBlock",p);class mY extends B{constructor(Y){super(q.q,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",Y)}}(0,R.g)("FlowGraphInfBlock",mY);class L extends B{constructor(Y){super(q.q,(()=>Number.NaN),"FlowGraphNaNBlock",Y)}}function u(Y,b){switch((0,S.f)(Y)){case"FlowGraphInteger":return new F.d(b(Y.value));case"Vector2":return new g.Vector2(b(Y.x),b(Y.y));case"AC":return new g.AC(b(Y.x),b(Y.y),b(Y.z));case"Vector4":return new g.Vector4(b(Y.x),b(Y.y),b(Y.z),b(Y.w));case"Quaternion":return new g.Quaternion(b(Y.x),b(Y.y),b(Y.z),b(Y.w));case"Matrix":return g.Matrix.OC(Y.m.map(b));case"Matrix2D":return new y.b(Y.m.map(b));case"Matrix3D":return new y.f(Y.m.map(b));default:return b(Y)}}(0,R.g)("FlowGraphNaNBlock",L);class c extends r.e{constructor(Y){super(q.q,q.q,(Y=>this._polymorphicAbs(Y)),"FlowGraphAbsBlock",Y)}_polymorphicAbs(Y){return u(Y,Math.abs)}}(0,R.g)("FlowGraphAbsBlock",c);class l extends r.e{constructor(Y){super(q.q,q.q,(Y=>this._polymorphicSign(Y)),"FlowGraphSignBlock",Y)}_polymorphicSign(Y){return u(Y,Math.sign)}}(0,R.g)("FlowGraphSignBlock",l);class X extends r.e{constructor(Y){super(q.q,q.q,(Y=>this._polymorphicTrunc(Y)),"FlowGraphTruncBlock",Y)}_polymorphicTrunc(Y){return u(Y,Math.trunc)}}(0,R.g)("FlowGraphTruncBlock",X);class j extends r.e{constructor(Y){super(q.q,q.q,(Y=>this._polymorphicFloor(Y)),"FlowGraphFloorBlock",Y)}_polymorphicFloor(Y){return u(Y,Math.floor)}}(0,R.g)("FlowGraphFloorBlock",j);class T extends r.e{constructor(Y){super(q.b,q.b,(Y=>this._polymorphicCeiling(Y)),"FlowGraphCeilBlock",Y)}_polymorphicCeiling(Y){return u(Y,Math.ceil)}}(0,R.g)("FlowGraphCeilBlock",T);class P extends r.e{constructor(Y){super(q.b,q.b,(Y=>this._polymorphicRound(Y)),"FlowGraphRoundBlock",Y)}_polymorphicRound(Y){return u(Y,(Y=>{var b;return Y<0&&null!==(b=this.config)&&void 0!==b&&b.roundHalfAwayFromZero?-Math.round(-Y):Math.round(Y)}))}}(0,R.g)("FlowGraphRoundBlock",P);class v extends r.e{constructor(Y){super(q.b,q.b,(Y=>this._polymorphicFraction(Y)),"FlowGraphFractBlock",Y)}_polymorphicFraction(Y){return u(Y,(Y=>Y-Math.floor(Y)))}}(0,R.g)("FlowGraphFractBlock",v);class z extends r.e{constructor(Y){super(q.b,q.b,(Y=>this._polymorphicNeg(Y)),"FlowGraphNegationBlock",Y)}_polymorphicNeg(Y){return u(Y,(Y=>-Y))}}function J(Y,b,C){switch((0,S.f)(Y)){case"FlowGraphInteger":return new F.d(C(Y.value,b.value));case"Vector2":return new g.Vector2(C(Y.x,b.x),C(Y.y,b.y));case"AC":return new g.AC(C(Y.x,b.x),C(Y.y,b.y),C(Y.z,b.z));case"Vector4":return new g.Vector4(C(Y.x,b.x),C(Y.y,b.y),C(Y.z,b.z),C(Y.w,b.w));case"Quaternion":return new g.Quaternion(C(Y.x,b.x),C(Y.y,b.y),C(Y.z,b.z),C(Y.w,b.w));case"Matrix":return g.Matrix.OC(Y.m.map(((Y,R)=>C(Y,b.m[R]))));case"Matrix2D":return new y.b(Y.m.map(((Y,R)=>C(Y,b.m[R]))));case"Matrix3D":return new y.f(Y.m.map(((Y,R)=>C(Y,b.m[R]))));default:return C((0,S.j)(Y),(0,S.j)(b))}}(0,R.g)("FlowGraphNegationBlock",z);class U extends A.e{constructor(Y){super(q.b,q.b,q.b,((Y,b)=>this._polymorphicRemainder(Y,b)),"FlowGraphModuloBlock",Y)}_polymorphicRemainder(Y,b){return J(Y,b,((Y,b)=>Y%b))}}(0,R.g)("FlowGraphModuloBlock",U);class o extends A.e{constructor(Y){super(q.b,q.b,q.b,((Y,b)=>this._polymorphicMin(Y,b)),"FlowGraphMinBlock",Y)}_polymorphicMin(Y,b){return J(Y,b,Math.min)}}(0,R.g)("FlowGraphMinBlock",o);class G extends A.e{constructor(Y){super(q.b,q.b,q.b,((Y,b)=>this._polymorphicMax(Y,b)),"FlowGraphMaxBlock",Y)}_polymorphicMax(Y,b){return J(Y,b,Math.max)}}function h(Y,b,C){return Math.min(Math.max(Y,Math.min(b,C)),Math.max(b,C))}function e(Y,b,C,R){switch((0,S.f)(Y)){case"FlowGraphInteger":return new F.d(R(Y.value,b.value,C.value));case"Vector2":return new g.Vector2(R(Y.x,b.x,C.x),R(Y.y,b.y,C.y));case"AC":return new g.AC(R(Y.x,b.x,C.x),R(Y.y,b.y,C.y),R(Y.z,b.z,C.z));case"Vector4":return new g.Vector4(R(Y.x,b.x,C.x),R(Y.y,b.y,C.y),R(Y.z,b.z,C.z),R(Y.w,b.w,C.w));case"Quaternion":return new g.Quaternion(R(Y.x,b.x,C.x),R(Y.y,b.y,C.y),R(Y.z,b.z,C.z),R(Y.w,b.w,C.w));case"Matrix":return g.Matrix.OC(Y.m.map(((Y,q)=>R(Y,b.m[q],C.m[q]))));case"Matrix2D":return new y.b(Y.m.map(((Y,q)=>R(Y,b.m[q],C.m[q]))));case"Matrix3D":return new y.f(Y.m.map(((Y,q)=>R(Y,b.m[q],C.m[q]))));default:return R((0,S.j)(Y),(0,S.j)(b),(0,S.j)(C))}}(0,R.g)("FlowGraphMaxBlock",G);class H extends O{constructor(Y){super(q.b,q.b,q.b,q.b,((Y,b,C)=>this._polymorphicClamp(Y,b,C)),"FlowGraphClampBlock",Y)}_polymorphicClamp(Y,b,C){return e(Y,b,C,h)}}function i(Y){return Math.min(Math.max(Y,0),1)}(0,R.g)("FlowGraphClampBlock",H);class W extends r.e{constructor(Y){super(q.b,q.b,(Y=>this._polymorphicSaturate(Y)),"FlowGraphSaturateBlock",Y)}_polymorphicSaturate(Y){return u(Y,i)}}function s(Y,b,C){return(1-C)*Y+C*b}(0,R.g)("FlowGraphSaturateBlock",W);class D extends O{constructor(Y){super(q.b,q.b,q.b,q.b,((Y,b,C)=>this._polymorphicInterpolate(Y,b,C)),"FlowGraphMathInterpolationBlock",Y)}_polymorphicInterpolate(Y,b,C){return e(Y,b,C,s)}}(0,R.g)("FlowGraphMathInterpolationBlock",D);class d extends A.e{constructor(Y){super(q.b,q.b,q.f,((Y,b)=>this._polymorphicEq(Y,b)),"FlowGraphEqualityBlock",Y)}_polymorphicEq(Y,b){const C=(0,S.f)(Y),R=(0,S.f)(b);return typeof Y===typeof b&&((0,S.d)(C,R)||(0,S.c)(C,R)||(0,S.b)(C,R)?Y.equals(b):Y===b)}}function V(Y,b,C){if((0,S.m)(Y)&&(0,S.m)(b))return C((0,S.j)(Y),(0,S.j)(b));throw new Error(`Cannot compare ${Y} and ${b}`)}(0,R.g)("FlowGraphEqualityBlock",d);class k extends A.e{constructor(Y){super(q.b,q.b,q.f,((Y,b)=>this._polymorphicLessThan(Y,b)),"FlowGraphLessThanBlock",Y)}_polymorphicLessThan(Y,b){return V(Y,b,((Y,b)=>Y<b))}}(0,R.g)("FlowGraphLessThanBlock",k);class x extends A.e{constructor(Y){super(q.b,q.b,q.f,((Y,b)=>this._polymorphicLessThanOrEqual(Y,b)),"FlowGraphLessThanOrEqualBlock",Y)}_polymorphicLessThanOrEqual(Y,b){return V(Y,b,((Y,b)=>Y<=b))}}(0,R.g)("FlowGraphLessThanOrEqualBlock",x);class a extends A.e{constructor(Y){super(q.b,q.b,q.f,((Y,b)=>this._polymorphicGreaterThan(Y,b)),"FlowGraphGreaterThanBlock",Y)}_polymorphicGreaterThan(Y,b){return V(Y,b,((Y,b)=>Y>b))}}(0,R.g)("FlowGraphGreaterThanBlock",a);class M extends A.e{constructor(Y){super(q.b,q.b,q.f,((Y,b)=>this._polymorphicGreaterThanOrEqual(Y,b)),"FlowGraphGreaterThanOrEqualBlock",Y)}_polymorphicGreaterThanOrEqual(Y,b){return V(Y,b,((Y,b)=>Y>=b))}}(0,R.g)("FlowGraphGreaterThanOrEqualBlock",M);class K extends r.e{constructor(Y){super(q.b,q.f,(Y=>this._polymorphicIsNan(Y)),"FlowGraphIsNaNBlock",Y)}_polymorphicIsNan(Y){if((0,S.m)(Y,!0))return isNaN((0,S.j)(Y));throw new Error(`Cannot get NaN of ${Y}`)}}(0,R.g)("FlowGraphIsNaNBlock",K);class f extends r.e{constructor(Y){super(q.b,q.f,(Y=>this._polymorphicIsInf(Y)),"FlowGraphIsInfBlock",Y)}_polymorphicIsInf(Y){if((0,S.m)(Y))return!isFinite((0,S.j)(Y));throw new Error(`Cannot get isInf of ${Y}`)}}(0,R.g)("FlowGraphIsInfBlock",f);class Z extends r.e{constructor(Y){super(q.b,q.b,(Y=>this._polymorphicDegToRad(Y)),"FlowGraphDegToRadBlock",Y)}_degToRad(Y){return Y*Math.PI/180}_polymorphicDegToRad(Y){return u(Y,this._degToRad)}}(0,R.g)("FlowGraphDegToRadBlock",Z);class YY extends r.e{constructor(Y){super(q.b,q.b,(Y=>this._polymorphicRadToDeg(Y)),"FlowGraphRadToDegBlock",Y)}_radToDeg(Y){return 180*Y/Math.PI}_polymorphicRadToDeg(Y){return u(Y,this._radToDeg)}}(0,R.g)("FlowGraphRadToDegBlock",YY);class bY extends r.e{constructor(Y){super(q.q,q.q,(Y=>this._polymorphicSin(Y)),"FlowGraphSinBlock",Y)}_polymorphicSin(Y){return u(Y,Math.sin)}}class CY extends r.e{constructor(Y){super(q.q,q.q,(Y=>this._polymorphicCos(Y)),"FlowGraphCosBlock",Y)}_polymorphicCos(Y){return u(Y,Math.cos)}}class RY extends r.e{constructor(Y){super(q.q,q.q,(Y=>this._polymorphicTan(Y)),"FlowGraphTanBlock",Y)}_polymorphicTan(Y){return u(Y,Math.tan)}}class qY extends r.e{constructor(Y){super(q.q,q.q,(Y=>this._polymorphicAsin(Y)),"FlowGraphASinBlock",Y)}_polymorphicAsin(Y){return u(Y,Math.asin)}}(0,R.g)("FlowGraphASinBlock",qY);class AY extends r.e{constructor(Y){super(q.q,q.q,(Y=>this._polymorphicAcos(Y)),"FlowGraphACosBlock",Y)}_polymorphicAcos(Y){return u(Y,Math.acos)}}(0,R.g)("FlowGraphACosBlock",AY);class EY extends r.e{constructor(Y){super(q.q,q.q,(Y=>this._polymorphicAtan(Y)),"FlowGraphATanBlock",Y)}_polymorphicAtan(Y){return u(Y,Math.atan)}}(0,R.g)("FlowGraphATanBlock",EY);class BY extends A.e{constructor(Y){super(q.b,q.b,q.b,((Y,b)=>this._polymorphicAtan2(Y,b)),"FlowGraphATan2Block",Y)}_polymorphicAtan2(Y,b){return J(Y,b,Math.atan2)}}(0,R.g)("FlowGraphATan2Block",BY);class gY extends r.e{constructor(Y){super(q.b,q.b,(Y=>this._polymorphicSinh(Y)),"FlowGraphSinhBlock",Y)}_polymorphicSinh(Y){return u(Y,Math.sinh)}}(0,R.g)("FlowGraphSinhBlock",gY);class rY extends r.e{constructor(Y){super(q.b,q.b,(Y=>this._polymorphicCosh(Y)),"FlowGraphCoshBlock",Y)}_polymorphicCosh(Y){return u(Y,Math.cosh)}}(0,R.g)("FlowGraphCoshBlock",rY);class OY extends r.e{constructor(Y){super(q.b,q.b,(Y=>this._polymorphicTanh(Y)),"FlowGraphTanhBlock",Y)}_polymorphicTanh(Y){return u(Y,Math.tanh)}}(0,R.g)("FlowGraphTanhBlock",OY);class FY extends r.e{constructor(Y){super(q.b,q.q,(Y=>this._polymorphicAsinh(Y)),"FlowGraphASinhBlock",Y)}_polymorphicAsinh(Y){return u(Y,Math.asinh)}}(0,R.g)("FlowGraphASinhBlock",FY);class yY extends r.e{constructor(Y){super(q.b,q.q,(Y=>this._polymorphicAcosh(Y)),"FlowGraphACoshBlock",Y)}_polymorphicAcosh(Y){return u(Y,Math.acosh)}}(0,R.g)("FlowGraphACoshBlock",yY);class SY extends r.e{constructor(Y){super(q.b,q.q,(Y=>this._polymorphicAtanh(Y)),"FlowGraphATanhBlock",Y)}_polymorphicAtanh(Y){return u(Y,Math.atanh)}}(0,R.g)("FlowGraphATanhBlock",SY);class nY extends r.e{constructor(Y){super(q.b,q.q,(Y=>this._polymorphicExp(Y)),"FlowGraphExponentialBlock",Y)}_polymorphicExp(Y){return u(Y,Math.exp)}}(0,R.g)("FlowGraphExponentialBlock",nY);class tY extends r.e{constructor(Y){super(q.b,q.q,(Y=>this._polymorphicLog(Y)),"FlowGraphLogBlock",Y)}_polymorphicLog(Y){return u(Y,Math.log)}}(0,R.g)("FlowGraphLogBlock",tY);class IY extends r.e{constructor(Y){super(q.b,q.q,(Y=>this._polymorphicLog2(Y)),"FlowGraphLog2Block",Y)}_polymorphicLog2(Y){return u(Y,Math.log2)}}(0,R.g)("FlowGraphLog2Block",IY);class wY extends r.e{constructor(Y){super(q.b,q.q,(Y=>this._polymorphicLog10(Y)),"FlowGraphLog10Block",Y)}_polymorphicLog10(Y){return u(Y,Math.log10)}}(0,R.g)("FlowGraphLog10Block",wY);class QY extends r.e{constructor(Y){super(q.b,q.q,(Y=>this._polymorphicSqrt(Y)),"FlowGraphSquareRootBlock",Y)}_polymorphicSqrt(Y){return u(Y,Math.sqrt)}}(0,R.g)("FlowGraphSquareRootBlock",QY);class NY extends r.e{constructor(Y){super(q.b,q.q,(Y=>this._polymorphicCubeRoot(Y)),"FlowGraphCubeRootBlock",Y)}_polymorphicCubeRoot(Y){return u(Y,Math.cbrt)}}(0,R.g)("FlowGraphCubeRootBlock",NY);class pY extends A.e{constructor(Y){super(q.b,q.q,q.q,((Y,b)=>this._polymorphicPow(Y,b)),"FlowGraphPowerBlock",Y)}_polymorphicPow(Y,b){return J(Y,b,Math.pow)}}(0,R.g)("FlowGraphPowerBlock",pY);class mb extends r.e{constructor(Y){super((0,q.J)((null===Y||void 0===Y?void 0:Y.valueType)||"FlowGraphInteger"),(0,q.J)((null===Y||void 0===Y?void 0:Y.valueType)||"FlowGraphInteger"),(Y=>"boolean"===typeof Y?!Y:"number"===typeof Y?~Y:new F.d(~Y.value)),"FlowGraphBitwiseNotBlock",Y)}}(0,R.g)("FlowGraphBitwiseNotBlock",mb);class LY extends A.e{constructor(Y){super((0,q.J)((null===Y||void 0===Y?void 0:Y.valueType)||"FlowGraphInteger"),(0,q.J)((null===Y||void 0===Y?void 0:Y.valueType)||"FlowGraphInteger"),(0,q.J)((null===Y||void 0===Y?void 0:Y.valueType)||"FlowGraphInteger"),((Y,b)=>{if("boolean"===typeof Y&&"boolean"===typeof b)return Y&&b;if("number"===typeof Y&&"number"===typeof b)return Y&b;if("object"===typeof Y&&"object"===typeof b)return new F.d(Y.value&b.value);throw new Error(`Cannot perform bitwise AND on ${Y} and ${b}`)}),"FlowGraphBitwiseAndBlock",Y)}}(0,R.g)("FlowGraphBitwiseAndBlock",LY);class uY extends A.e{constructor(Y){super((0,q.J)((null===Y||void 0===Y?void 0:Y.valueType)||"FlowGraphInteger"),(0,q.J)((null===Y||void 0===Y?void 0:Y.valueType)||"FlowGraphInteger"),(0,q.J)((null===Y||void 0===Y?void 0:Y.valueType)||"FlowGraphInteger"),((Y,b)=>{if("boolean"===typeof Y&&"boolean"===typeof b)return Y||b;if("number"===typeof Y&&"number"===typeof b)return Y|b;if("object"===typeof Y&&"object"===typeof b)return new F.d(Y.value|b.value);throw new Error(`Cannot perform bitwise OR on ${Y} and ${b}`)}),"FlowGraphBitwiseOrBlock",Y)}}(0,R.g)("FlowGraphBitwiseOrBlock",uY);class cY extends A.e{constructor(Y){super((0,q.J)((null===Y||void 0===Y?void 0:Y.valueType)||"FlowGraphInteger"),(0,q.J)((null===Y||void 0===Y?void 0:Y.valueType)||"FlowGraphInteger"),(0,q.J)((null===Y||void 0===Y?void 0:Y.valueType)||"FlowGraphInteger"),((Y,b)=>{if("boolean"===typeof Y&&"boolean"===typeof b)return Y!==b;if("number"===typeof Y&&"number"===typeof b)return Y^b;if("object"===typeof Y&&"object"===typeof b)return new F.d(Y.value^b.value);throw new Error(`Cannot perform bitwise XOR on ${Y} and ${b}`)}),"FlowGraphBitwiseXorBlock",Y)}}(0,R.g)("FlowGraphBitwiseXorBlock",cY);class lY extends A.e{constructor(Y){super(q.i,q.i,q.i,((Y,b)=>new F.d(Y.value<<b.value)),"FlowGraphBitwiseLeftShiftBlock",Y)}}(0,R.g)("FlowGraphBitwiseLeftShiftBlock",lY);class XY extends A.e{constructor(Y){super(q.i,q.i,q.i,((Y,b)=>new F.d(Y.value>>b.value)),"FlowGraphBitwiseRightShiftBlock",Y)}}(0,R.g)("FlowGraphBitwiseRightShiftBlock",XY);class jY extends r.e{constructor(Y){super(q.i,q.i,(Y=>new F.d(Math.clz32(Y.value))),"FlowGraphLeadingZerosBlock",Y)}}(0,R.g)("FlowGraphLeadingZerosBlock",jY);class TY extends r.e{constructor(Y){super(q.i,q.i,(Y=>new F.d(Y.value?31-Math.clz32(Y.value&-Y.value):32)),"FlowGraphTrailingZerosBlock",Y)}}(0,R.g)("FlowGraphTrailingZerosBlock",TY);class PY extends r.e{constructor(Y){super(q.i,q.i,(Y=>new F.d(function(Y){let b=0;for(;Y;)b+=1&Y,Y>>=1;return b}(Y.value))),"FlowGraphOneBitsCounterBlock",Y)}}(0,R.g)("FlowGraphOneBitsCounterBlock",PY)},16103:(Y,b,C)=>{C.d(b,{e:()=>q});var R=C(16111);class q extends R.d{constructor(Y,b,C,R,q,A){super(C,A),this._operation=R,this._className=q,this.a=this.registerDataInput("a",Y),this.b=this.registerDataInput("b",b)}_doOperation(Y){const b=this.a.getValue(Y),C=this.b.getValue(Y);return this._operation(b,C)}getClassName(){return this._className}}},16111:(Y,b,C)=>{C.d(b,{d:()=>B});var R=C(14437),q=C(14424);const A="cachedOperationValue",E="cachedExecutionId";class B extends R.e{constructor(Y,b){super(b),this.value=this.registerDataOutput("value",Y),this.isValid=this.registerDataOutput("isValid",q.f)}_updateOutputs(Y){const b=Y._getExecutionVariable(this,E,-1),C=Y._getExecutionVariable(this,A,null);if(void 0!==C&&null!==C&&b===Y.executionId)this.isValid.setValue(!0,Y),this.value.setValue(C,Y);else try{const b=this._doOperation(Y);if(void 0===b||null===b)return void this.isValid.setValue(!1,Y);Y._setExecutionVariable(this,A,b),Y._setExecutionVariable(this,E,Y.executionId),this.value.setValue(b,Y),this.isValid.setValue(!0,Y)}catch(R){this.isValid.setValue(!1,Y)}}}},16116:(Y,b,C)=>{C.d(b,{e:()=>q});var R=C(16111);class q extends R.d{constructor(Y,b,C,R,q){super(b,q),this._operation=C,this._className=R,this.a=this.registerDataInput("a",Y)}_doOperation(Y){return this._operation(this.a.getValue(Y))}getClassName(){return this._className}}}}]);