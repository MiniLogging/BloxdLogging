"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[88],{14404:(P,f,Y)=>{Y.r(f),Y.d(f,{FlowGraphAbsBlock:()=>c,FlowGraphAcosBlock:()=>mP,FlowGraphAcoshBlock:()=>rP,FlowGraphAddBlock:()=>u,FlowGraphAsinBlock:()=>qP,FlowGraphAsinhBlock:()=>yP,FlowGraphAtan2Block:()=>oP,FlowGraphAtanBlock:()=>LP,FlowGraphAtanhBlock:()=>iP,FlowGraphBitwiseAndBlock:()=>lP,FlowGraphBitwiseLeftShiftBlock:()=>TP,FlowGraphBitwiseNotBlock:()=>nP,FlowGraphBitwiseOrBlock:()=>vP,FlowGraphBitwiseRightShiftBlock:()=>UP,FlowGraphBitwiseXorBlock:()=>cP,FlowGraphCeilBlock:()=>j,FlowGraphClampBlock:()=>k,FlowGraphCosBlock:()=>YP,FlowGraphCoshBlock:()=>dP,FlowGraphCubeRootBlock:()=>VP,FlowGraphDegToRadBlock:()=>F,FlowGraphDivideBlock:()=>K,FlowGraphEBlock:()=>V,FlowGraphEqualityBlock:()=>G,FlowGraphExpBlock:()=>uP,FlowGraphFloorBlock:()=>D,FlowGraphFractionBlock:()=>s,FlowGraphGreaterThanBlock:()=>H,FlowGraphGreaterThanOrEqualBlock:()=>W,FlowGraphInfBlock:()=>n,FlowGraphIsInfinityBlock:()=>h,FlowGraphIsNanBlock:()=>p,FlowGraphLeadingZerosBlock:()=>DP,FlowGraphLessThanBlock:()=>B,FlowGraphLessThanOrEqualBlock:()=>b,FlowGraphLog10Block:()=>KP,FlowGraphLog2Block:()=>SP,FlowGraphLogBlock:()=>gP,FlowGraphMathInterpolationBlock:()=>t,FlowGraphMaxBlock:()=>I,FlowGraphMinBlock:()=>N,FlowGraphModuloBlock:()=>J,FlowGraphMultiplyBlock:()=>S,FlowGraphNaNBlock:()=>l,FlowGraphNegationBlock:()=>a,FlowGraphOneBitsCounterBlock:()=>eP,FlowGraphPiBlock:()=>O,FlowGraphPowerBlock:()=>OP,FlowGraphRadToDegBlock:()=>PP,FlowGraphRandomBlock:()=>M,FlowGraphRoundBlock:()=>e,FlowGraphSaturateBlock:()=>A,FlowGraphSignBlock:()=>T,FlowGraphSinBlock:()=>fP,FlowGraphSinhBlock:()=>wP,FlowGraphSquareRootBlock:()=>MP,FlowGraphSubtractBlock:()=>g,FlowGraphTanBlock:()=>CP,FlowGraphTanhBlock:()=>RP,FlowGraphTrailingZerosBlock:()=>jP,FlowGraphTruncBlock:()=>U});var C=Y(11134),q=Y(12917),m=Y(14408),L=Y(14410);class o extends L.c{constructor(P,f,Y,C){super(P,C),this._operation=f,this._className=Y}_doOperation(P){return this._operation(P)}getClassName(){return this._className}}var w=Y(11179),d=Y(14414);class R extends L.c{constructor(P,f,Y,C,q,m,L){super(C,L),this._operation=q,this._className=m,this.a=this.registerDataInput("a",P),this.b=this.registerDataInput("b",f),this.c=this.registerDataInput("c",Y)}_doOperation(P){return this._operation(this.a.getValue(P),this.b.getValue(P),this.c.getValue(P))}getClassName(){return this._className}}var y=Y(12908),r=Y(12923),i=Y(12960);class u extends m.b{constructor(P){super((0,q.D)(null===P||void 0===P?void 0:P.type),(0,q.D)(null===P||void 0===P?void 0:P.type),(0,q.D)(null===P||void 0===P?void 0:P.type),((P,f)=>this._polymorphicAdd(P,f)),"FlowGraphAddBlock",P)}_polymorphicAdd(P,f){const Y=(0,i.j)(P),C=(0,i.j)(f);if((0,i.i)(Y,C)||(0,i.g)(Y,C)||(0,i.d)(Y,C))return P.add(f);if("Quaternion"===Y||"Vector4"===C)return new w.Vector4(P.x,P.y,P.z,P.w).addInPlace(f);if("Vector4"===Y||"Quaternion"===C)return P.add(f);var q;if(null!==(q=this.config)&&void 0!==q&&q.preventIntegerFloatArithmetic&&typeof P!==typeof f)throw new Error("Cannot add different types of numbers.");return(0,i.o)(P)+(0,i.o)(f)}}(0,C.d)("FlowGraphAddBlock",u);class g extends m.b{constructor(P){super((0,q.D)(null===P||void 0===P?void 0:P.type),(0,q.D)(null===P||void 0===P?void 0:P.type),(0,q.D)(null===P||void 0===P?void 0:P.type),((P,f)=>this._polymorphicSubtract(P,f)),"FlowGraphSubtractBlock",P)}_polymorphicSubtract(P,f){const Y=(0,i.j)(P),C=(0,i.j)(f);if((0,i.i)(Y,C)||(0,i.d)(Y,C)||(0,i.g)(Y,C))return P.nf(f);if("Quaternion"===Y||"Vector4"===C)return new w.Vector4(P.x,P.y,P.z,P.w).Ly(f);if("Vector4"===Y||"Quaternion"===C)return P.nf(f);var q;if(null!==(q=this.config)&&void 0!==q&&q.preventIntegerFloatArithmetic&&typeof P!==typeof f)throw new Error("Cannot add different types of numbers.");return(0,i.o)(P)-(0,i.o)(f)}}(0,C.d)("FlowGraphSubtractBlock",g);class S extends m.b{constructor(P){super((0,q.D)(null===P||void 0===P?void 0:P.type),(0,q.D)(null===P||void 0===P?void 0:P.type),(0,q.D)(null===P||void 0===P?void 0:P.type),((P,f)=>this._polymorphicMultiply(P,f)),"FlowGraphMultiplyBlock",P)}_polymorphicMultiply(P,f){const Y=(0,i.j)(P),C=(0,i.j)(f);if((0,i.i)(Y,C)||(0,i.d)(Y,C))return P.multiply(f);if("Quaternion"===Y||"Vector4"===C)return new w.Vector4(P.x,P.y,P.z,P.w).multiplyInPlace(f);if("Vector4"===Y||"Quaternion"===C)return P.multiply(f);if((0,i.g)(Y,C)){var q;if(null!==(q=this.config)&&void 0!==q&&q.useMatrixPerComponent){const C=P.m;for(let P=0;P<C.length;P++)C[P]*=f.m[P];return"Matrix2D"===Y?new r.c(C):"Matrix3D"===Y?new r.e(C):w.Matrix.ef(C)}return f.multiply(P)}var m;if(null!==(m=this.config)&&void 0!==m&&m.preventIntegerFloatArithmetic&&typeof P!==typeof f)throw new Error("Cannot add different types of numbers.");return(0,i.o)(P)*(0,i.o)(f)}}(0,C.d)("FlowGraphMultiplyBlock",S);class K extends m.b{constructor(P){super((0,q.D)(null===P||void 0===P?void 0:P.type),(0,q.D)(null===P||void 0===P?void 0:P.type),(0,q.D)(null===P||void 0===P?void 0:P.type),((P,f)=>this._polymorphicDivide(P,f)),"FlowGraphDivideBlock",P)}_polymorphicDivide(P,f){const Y=(0,i.j)(P),C=(0,i.j)(f);if((0,i.i)(Y,C)||(0,i.d)(Y,C))return P.divide(f);if("Quaternion"===Y||"Quaternion"===C){const Y=P.clone();return Y.x/=f.x,Y.y/=f.y,Y.z/=f.z,Y.w/=f.w,Y}if("Quaternion"===Y||"Vector4"===C)return new w.Vector4(P.x,P.y,P.z,P.w).divideInPlace(f);if("Vector4"===Y||"Quaternion"===C)return P.divide(f);if((0,i.g)(Y,C)){var q;if(null!==(q=this.config)&&void 0!==q&&q.useMatrixPerComponent){const C=P.m;for(let P=0;P<C.length;P++)C[P]/=f.m[P];return"Matrix2D"===Y?new r.c(C):"Matrix3D"===Y?new r.e(C):w.Matrix.ef(C)}return P.divide(f)}var m;if(null!==(m=this.config)&&void 0!==m&&m.preventIntegerFloatArithmetic&&typeof P!==typeof f)throw new Error("Cannot add different types of numbers.");return(0,i.o)(P)/(0,i.o)(f)}}(0,C.d)("FlowGraphDivideBlock",K);class M extends o{constructor(P){super(q.o,(P=>this._random(P)),"FlowGraphRandomBlock",P),this.min=this.registerDataInput("min",q.o,(null===P||void 0===P?void 0:P.min)??0),this.max=this.registerDataInput("max",q.o,(null===P||void 0===P?void 0:P.max)??1),null!==P&&void 0!==P&&P.seed&&(this._seed=P.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const P=1e4*Math.sin(this._seed++);return P-Math.floor(P)}return Math.random()}_random(P){const f=this.min.getValue(P),Y=this.max.getValue(P);return this._getRandomValue()*(Y-f)+f}}(0,C.d)("FlowGraphRandomBlock",M);class V extends o{constructor(P){super(q.o,(()=>Math.E),"FlowGraphEBlock",P)}}(0,C.d)("FlowGraphEBlock",V);class O extends o{constructor(P){super(q.o,(()=>Math.PI),"FlowGraphPIBlock",P)}}(0,C.d)("FlowGraphPIBlock",O);class n extends o{constructor(P){super(q.o,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",P)}}(0,C.d)("FlowGraphInfBlock",n);class l extends o{constructor(P){super(q.o,(()=>Number.NaN),"FlowGraphNaNBlock",P)}}function v(P,f){switch((0,i.j)(P)){case"FlowGraphInteger":return new y.c(f(P.value));case"Vector2":return new w.Vector2(f(P.x),f(P.y));case"Of":return new w.Of(f(P.x),f(P.y),f(P.z));case"Vector4":return new w.Vector4(f(P.x),f(P.y),f(P.z),f(P.w));case"Quaternion":return new w.Quaternion(f(P.x),f(P.y),f(P.z),f(P.w));case"Matrix":return w.Matrix.ef(P.m.map(f));case"Matrix2D":return new r.c(P.m.map(f));case"Matrix3D":return new r.e(P.m.map(f));default:return f(P)}}(0,C.d)("FlowGraphNaNBlock",l);class c extends d.d{constructor(P){super(q.o,q.o,(P=>this._polymorphicAbs(P)),"FlowGraphAbsBlock",P)}_polymorphicAbs(P){return v(P,Math.abs)}}(0,C.d)("FlowGraphAbsBlock",c);class T extends d.d{constructor(P){super(q.o,q.o,(P=>this._polymorphicSign(P)),"FlowGraphSignBlock",P)}_polymorphicSign(P){return v(P,Math.sign)}}(0,C.d)("FlowGraphSignBlock",T);class U extends d.d{constructor(P){super(q.o,q.o,(P=>this._polymorphicTrunc(P)),"FlowGraphTruncBlock",P)}_polymorphicTrunc(P){return v(P,Math.trunc)}}(0,C.d)("FlowGraphTruncBlock",U);class D extends d.d{constructor(P){super(q.o,q.o,(P=>this._polymorphicFloor(P)),"FlowGraphFloorBlock",P)}_polymorphicFloor(P){return v(P,Math.floor)}}(0,C.d)("FlowGraphFloorBlock",D);class j extends d.d{constructor(P){super(q.d,q.d,(P=>this._polymorphicCeiling(P)),"FlowGraphCeilBlock",P)}_polymorphicCeiling(P){return v(P,Math.ceil)}}(0,C.d)("FlowGraphCeilBlock",j);class e extends d.d{constructor(P){super(q.d,q.d,(P=>this._polymorphicRound(P)),"FlowGraphRoundBlock",P)}_polymorphicRound(P){return v(P,(P=>{var f;return P<0&&null!==(f=this.config)&&void 0!==f&&f.roundHalfAwayFromZero?-Math.round(-P):Math.round(P)}))}}(0,C.d)("FlowGraphRoundBlock",e);class s extends d.d{constructor(P){super(q.d,q.d,(P=>this._polymorphicFraction(P)),"FlowGraphFractBlock",P)}_polymorphicFraction(P){return v(P,(P=>P-Math.floor(P)))}}(0,C.d)("FlowGraphFractBlock",s);class a extends d.d{constructor(P){super(q.d,q.d,(P=>this._polymorphicNeg(P)),"FlowGraphNegationBlock",P)}_polymorphicNeg(P){return v(P,(P=>-P))}}function Q(P,f,Y){switch((0,i.j)(P)){case"FlowGraphInteger":return new y.c(Y(P.value,f.value));case"Vector2":return new w.Vector2(Y(P.x,f.x),Y(P.y,f.y));case"Of":return new w.Of(Y(P.x,f.x),Y(P.y,f.y),Y(P.z,f.z));case"Vector4":return new w.Vector4(Y(P.x,f.x),Y(P.y,f.y),Y(P.z,f.z),Y(P.w,f.w));case"Quaternion":return new w.Quaternion(Y(P.x,f.x),Y(P.y,f.y),Y(P.z,f.z),Y(P.w,f.w));case"Matrix":return w.Matrix.ef(P.m.map(((P,C)=>Y(P,f.m[C]))));case"Matrix2D":return new r.c(P.m.map(((P,C)=>Y(P,f.m[C]))));case"Matrix3D":return new r.e(P.m.map(((P,C)=>Y(P,f.m[C]))));default:return Y((0,i.o)(P),(0,i.o)(f))}}(0,C.d)("FlowGraphNegationBlock",a);class J extends m.b{constructor(P){super(q.d,q.d,q.d,((P,f)=>this._polymorphicRemainder(P,f)),"FlowGraphModuloBlock",P)}_polymorphicRemainder(P,f){return Q(P,f,((P,f)=>P%f))}}(0,C.d)("FlowGraphModuloBlock",J);class N extends m.b{constructor(P){super(q.d,q.d,q.d,((P,f)=>this._polymorphicMin(P,f)),"FlowGraphMinBlock",P)}_polymorphicMin(P,f){return Q(P,f,Math.min)}}(0,C.d)("FlowGraphMinBlock",N);class I extends m.b{constructor(P){super(q.d,q.d,q.d,((P,f)=>this._polymorphicMax(P,f)),"FlowGraphMaxBlock",P)}_polymorphicMax(P,f){return Q(P,f,Math.max)}}function X(P,f,Y){return Math.min(Math.max(P,Math.min(f,Y)),Math.max(f,Y))}function x(P,f,Y,C){switch((0,i.j)(P)){case"FlowGraphInteger":return new y.c(C(P.value,f.value,Y.value));case"Vector2":return new w.Vector2(C(P.x,f.x,Y.x),C(P.y,f.y,Y.y));case"Of":return new w.Of(C(P.x,f.x,Y.x),C(P.y,f.y,Y.y),C(P.z,f.z,Y.z));case"Vector4":return new w.Vector4(C(P.x,f.x,Y.x),C(P.y,f.y,Y.y),C(P.z,f.z,Y.z),C(P.w,f.w,Y.w));case"Quaternion":return new w.Quaternion(C(P.x,f.x,Y.x),C(P.y,f.y,Y.y),C(P.z,f.z,Y.z),C(P.w,f.w,Y.w));case"Matrix":return w.Matrix.ef(P.m.map(((P,q)=>C(P,f.m[q],Y.m[q]))));case"Matrix2D":return new r.c(P.m.map(((P,q)=>C(P,f.m[q],Y.m[q]))));case"Matrix3D":return new r.e(P.m.map(((P,q)=>C(P,f.m[q],Y.m[q]))));default:return C((0,i.o)(P),(0,i.o)(f),(0,i.o)(Y))}}(0,C.d)("FlowGraphMaxBlock",I);class k extends R{constructor(P){super(q.d,q.d,q.d,q.d,((P,f,Y)=>this._polymorphicClamp(P,f,Y)),"FlowGraphClampBlock",P)}_polymorphicClamp(P,f,Y){return x(P,f,Y,X)}}function Z(P){return Math.min(Math.max(P,0),1)}(0,C.d)("FlowGraphClampBlock",k);class A extends d.d{constructor(P){super(q.d,q.d,(P=>this._polymorphicSaturate(P)),"FlowGraphSaturateBlock",P)}_polymorphicSaturate(P){return v(P,Z)}}function E(P,f,Y){return(1-Y)*P+Y*f}(0,C.d)("FlowGraphSaturateBlock",A);class t extends R{constructor(P){super(q.d,q.d,q.d,q.d,((P,f,Y)=>this._polymorphicInterpolate(P,f,Y)),"FlowGraphMathInterpolationBlock",P)}_polymorphicInterpolate(P,f,Y){return x(P,f,Y,E)}}(0,C.d)("FlowGraphMathInterpolationBlock",t);class G extends m.b{constructor(P){super(q.d,q.d,q.e,((P,f)=>this._polymorphicEq(P,f)),"FlowGraphEqualityBlock",P)}_polymorphicEq(P,f){const Y=(0,i.j)(P),C=(0,i.j)(f);return typeof P===typeof f&&((0,i.i)(Y,C)||(0,i.g)(Y,C)||(0,i.d)(Y,C)?P.equals(f):P===f)}}function z(P,f,Y){if((0,i.p)(P)&&(0,i.p)(f))return Y((0,i.o)(P),(0,i.o)(f));throw new Error(`Cannot compare ${P} and ${f}`)}(0,C.d)("FlowGraphEqualityBlock",G);class B extends m.b{constructor(P){super(q.d,q.d,q.e,((P,f)=>this._polymorphicLessThan(P,f)),"FlowGraphLessThanBlock",P)}_polymorphicLessThan(P,f){return z(P,f,((P,f)=>P<f))}}(0,C.d)("FlowGraphLessThanBlock",B);class b extends m.b{constructor(P){super(q.d,q.d,q.e,((P,f)=>this._polymorphicLessThanOrEqual(P,f)),"FlowGraphLessThanOrEqualBlock",P)}_polymorphicLessThanOrEqual(P,f){return z(P,f,((P,f)=>P<=f))}}(0,C.d)("FlowGraphLessThanOrEqualBlock",b);class H extends m.b{constructor(P){super(q.d,q.d,q.e,((P,f)=>this._polymorphicGreaterThan(P,f)),"FlowGraphGreaterThanBlock",P)}_polymorphicGreaterThan(P,f){return z(P,f,((P,f)=>P>f))}}(0,C.d)("FlowGraphGreaterThanBlock",H);class W extends m.b{constructor(P){super(q.d,q.d,q.e,((P,f)=>this._polymorphicGreaterThanOrEqual(P,f)),"FlowGraphGreaterThanOrEqualBlock",P)}_polymorphicGreaterThanOrEqual(P,f){return z(P,f,((P,f)=>P>=f))}}(0,C.d)("FlowGraphGreaterThanOrEqualBlock",W);class p extends d.d{constructor(P){super(q.d,q.e,(P=>this._polymorphicIsNan(P)),"FlowGraphIsNaNBlock",P)}_polymorphicIsNan(P){if((0,i.p)(P,!0))return isNaN((0,i.o)(P));throw new Error(`Cannot get NaN of ${P}`)}}(0,C.d)("FlowGraphIsNaNBlock",p);class h extends d.d{constructor(P){super(q.d,q.e,(P=>this._polymorphicIsInf(P)),"FlowGraphIsInfBlock",P)}_polymorphicIsInf(P){if((0,i.p)(P))return!isFinite((0,i.o)(P));throw new Error(`Cannot get isInf of ${P}`)}}(0,C.d)("FlowGraphIsInfBlock",h);class F extends d.d{constructor(P){super(q.d,q.d,(P=>this._polymorphicDegToRad(P)),"FlowGraphDegToRadBlock",P)}_degToRad(P){return P*Math.PI/180}_polymorphicDegToRad(P){return v(P,this._degToRad)}}(0,C.d)("FlowGraphDegToRadBlock",F);class PP extends d.d{constructor(P){super(q.d,q.d,(P=>this._polymorphicRadToDeg(P)),"FlowGraphRadToDegBlock",P)}_radToDeg(P){return 180*P/Math.PI}_polymorphicRadToDeg(P){return v(P,this._radToDeg)}}(0,C.d)("FlowGraphRadToDegBlock",PP);class fP extends d.d{constructor(P){super(q.o,q.o,(P=>this._polymorphicSin(P)),"FlowGraphSinBlock",P)}_polymorphicSin(P){return v(P,Math.sin)}}class YP extends d.d{constructor(P){super(q.o,q.o,(P=>this._polymorphicCos(P)),"FlowGraphCosBlock",P)}_polymorphicCos(P){return v(P,Math.cos)}}class CP extends d.d{constructor(P){super(q.o,q.o,(P=>this._polymorphicTan(P)),"FlowGraphTanBlock",P)}_polymorphicTan(P){return v(P,Math.tan)}}class qP extends d.d{constructor(P){super(q.o,q.o,(P=>this._polymorphicAsin(P)),"FlowGraphASinBlock",P)}_polymorphicAsin(P){return v(P,Math.asin)}}(0,C.d)("FlowGraphASinBlock",qP);class mP extends d.d{constructor(P){super(q.o,q.o,(P=>this._polymorphicAcos(P)),"FlowGraphACosBlock",P)}_polymorphicAcos(P){return v(P,Math.acos)}}(0,C.d)("FlowGraphACosBlock",mP);class LP extends d.d{constructor(P){super(q.o,q.o,(P=>this._polymorphicAtan(P)),"FlowGraphATanBlock",P)}_polymorphicAtan(P){return v(P,Math.atan)}}(0,C.d)("FlowGraphATanBlock",LP);class oP extends m.b{constructor(P){super(q.d,q.d,q.d,((P,f)=>this._polymorphicAtan2(P,f)),"FlowGraphATan2Block",P)}_polymorphicAtan2(P,f){return Q(P,f,Math.atan2)}}(0,C.d)("FlowGraphATan2Block",oP);class wP extends d.d{constructor(P){super(q.d,q.d,(P=>this._polymorphicSinh(P)),"FlowGraphSinhBlock",P)}_polymorphicSinh(P){return v(P,Math.sinh)}}(0,C.d)("FlowGraphSinhBlock",wP);class dP extends d.d{constructor(P){super(q.d,q.d,(P=>this._polymorphicCosh(P)),"FlowGraphCoshBlock",P)}_polymorphicCosh(P){return v(P,Math.cosh)}}(0,C.d)("FlowGraphCoshBlock",dP);class RP extends d.d{constructor(P){super(q.d,q.d,(P=>this._polymorphicTanh(P)),"FlowGraphTanhBlock",P)}_polymorphicTanh(P){return v(P,Math.tanh)}}(0,C.d)("FlowGraphTanhBlock",RP);class yP extends d.d{constructor(P){super(q.d,q.o,(P=>this._polymorphicAsinh(P)),"FlowGraphASinhBlock",P)}_polymorphicAsinh(P){return v(P,Math.asinh)}}(0,C.d)("FlowGraphASinhBlock",yP);class rP extends d.d{constructor(P){super(q.d,q.o,(P=>this._polymorphicAcosh(P)),"FlowGraphACoshBlock",P)}_polymorphicAcosh(P){return v(P,Math.acosh)}}(0,C.d)("FlowGraphACoshBlock",rP);class iP extends d.d{constructor(P){super(q.d,q.o,(P=>this._polymorphicAtanh(P)),"FlowGraphATanhBlock",P)}_polymorphicAtanh(P){return v(P,Math.atanh)}}(0,C.d)("FlowGraphATanhBlock",iP);class uP extends d.d{constructor(P){super(q.d,q.o,(P=>this._polymorphicExp(P)),"FlowGraphExponentialBlock",P)}_polymorphicExp(P){return v(P,Math.exp)}}(0,C.d)("FlowGraphExponentialBlock",uP);class gP extends d.d{constructor(P){super(q.d,q.o,(P=>this._polymorphicLog(P)),"FlowGraphLogBlock",P)}_polymorphicLog(P){return v(P,Math.log)}}(0,C.d)("FlowGraphLogBlock",gP);class SP extends d.d{constructor(P){super(q.d,q.o,(P=>this._polymorphicLog2(P)),"FlowGraphLog2Block",P)}_polymorphicLog2(P){return v(P,Math.log2)}}(0,C.d)("FlowGraphLog2Block",SP);class KP extends d.d{constructor(P){super(q.d,q.o,(P=>this._polymorphicLog10(P)),"FlowGraphLog10Block",P)}_polymorphicLog10(P){return v(P,Math.log10)}}(0,C.d)("FlowGraphLog10Block",KP);class MP extends d.d{constructor(P){super(q.d,q.o,(P=>this._polymorphicSqrt(P)),"FlowGraphSquareRootBlock",P)}_polymorphicSqrt(P){return v(P,Math.sqrt)}}(0,C.d)("FlowGraphSquareRootBlock",MP);class VP extends d.d{constructor(P){super(q.d,q.o,(P=>this._polymorphicCubeRoot(P)),"FlowGraphCubeRootBlock",P)}_polymorphicCubeRoot(P){return v(P,Math.cbrt)}}(0,C.d)("FlowGraphCubeRootBlock",VP);class OP extends m.b{constructor(P){super(q.d,q.o,q.o,((P,f)=>this._polymorphicPow(P,f)),"FlowGraphPowerBlock",P)}_polymorphicPow(P,f){return Q(P,f,Math.pow)}}(0,C.d)("FlowGraphPowerBlock",OP);class nP extends d.d{constructor(P){super((0,q.D)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,q.D)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(P=>"boolean"===typeof P?!P:"number"===typeof P?~P:new y.c(~P.value)),"FlowGraphBitwiseNotBlock",P)}}(0,C.d)("FlowGraphBitwiseNotBlock",nP);class lP extends m.b{constructor(P){super((0,q.D)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,q.D)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,q.D)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),((P,f)=>{if("boolean"===typeof P&&"boolean"===typeof f)return P&&f;if("number"===typeof P&&"number"===typeof f)return P&f;if("object"===typeof P&&"object"===typeof f)return new y.c(P.value&f.value);throw new Error(`Cannot perform bitwise AND on ${P} and ${f}`)}),"FlowGraphBitwiseAndBlock",P)}}(0,C.d)("FlowGraphBitwiseAndBlock",lP);class vP extends m.b{constructor(P){super((0,q.D)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,q.D)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,q.D)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),((P,f)=>{if("boolean"===typeof P&&"boolean"===typeof f)return P||f;if("number"===typeof P&&"number"===typeof f)return P|f;if("object"===typeof P&&"object"===typeof f)return new y.c(P.value|f.value);throw new Error(`Cannot perform bitwise OR on ${P} and ${f}`)}),"FlowGraphBitwiseOrBlock",P)}}(0,C.d)("FlowGraphBitwiseOrBlock",vP);class cP extends m.b{constructor(P){super((0,q.D)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,q.D)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,q.D)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),((P,f)=>{if("boolean"===typeof P&&"boolean"===typeof f)return P!==f;if("number"===typeof P&&"number"===typeof f)return P^f;if("object"===typeof P&&"object"===typeof f)return new y.c(P.value^f.value);throw new Error(`Cannot perform bitwise XOR on ${P} and ${f}`)}),"FlowGraphBitwiseXorBlock",P)}}(0,C.d)("FlowGraphBitwiseXorBlock",cP);class TP extends m.b{constructor(P){super(q.f,q.f,q.f,((P,f)=>new y.c(P.value<<f.value)),"FlowGraphBitwiseLeftShiftBlock",P)}}(0,C.d)("FlowGraphBitwiseLeftShiftBlock",TP);class UP extends m.b{constructor(P){super(q.f,q.f,q.f,((P,f)=>new y.c(P.value>>f.value)),"FlowGraphBitwiseRightShiftBlock",P)}}(0,C.d)("FlowGraphBitwiseRightShiftBlock",UP);class DP extends d.d{constructor(P){super(q.f,q.f,(P=>new y.c(Math.clz32(P.value))),"FlowGraphLeadingZerosBlock",P)}}(0,C.d)("FlowGraphLeadingZerosBlock",DP);class jP extends d.d{constructor(P){super(q.f,q.f,(P=>new y.c(P.value?31-Math.clz32(P.value&-P.value):32)),"FlowGraphTrailingZerosBlock",P)}}(0,C.d)("FlowGraphTrailingZerosBlock",jP);class eP extends d.d{constructor(P){super(q.f,q.f,(P=>new y.c(function(P){let f=0;for(;P;)f+=1&P,P>>=1;return f}(P.value))),"FlowGraphOneBitsCounterBlock",P)}}(0,C.d)("FlowGraphOneBitsCounterBlock",eP)},14408:(P,f,Y)=>{Y.d(f,{b:()=>q});var C=Y(14410);class q extends C.c{constructor(P,f,Y,C,q,m){super(Y,m),this._operation=C,this._className=q,this.a=this.registerDataInput("a",P),this.b=this.registerDataInput("b",f)}_doOperation(P){const f=this.a.getValue(P),Y=this.b.getValue(P);return this._operation(f,Y)}getClassName(){return this._className}}},14410:(P,f,Y)=>{Y.d(f,{c:()=>o});var C=Y(12947),q=Y(12917);const m="cachedOperationValue",L="cachedExecutionId";class o extends C.b{constructor(P,f){super(f),this.value=this.registerDataOutput("value",P),this.isValid=this.registerDataOutput("isValid",q.e)}_updateOutputs(P){const f=P._getExecutionVariable(this,L,-1),Y=P._getExecutionVariable(this,m,null);if(void 0!==Y&&null!==Y&&f===P.executionId)this.isValid.setValue(!0,P),this.value.setValue(Y,P);else try{const f=this._doOperation(P);if(void 0===f||null===f)return void this.isValid.setValue(!1,P);P._setExecutionVariable(this,m,f),P._setExecutionVariable(this,L,P.executionId),this.value.setValue(f,P),this.isValid.setValue(!0,P)}catch(C){this.isValid.setValue(!1,P)}}}},14414:(P,f,Y)=>{Y.d(f,{d:()=>q});var C=Y(14410);class q extends C.c{constructor(P,f,Y,C,q){super(f,q),this._operation=Y,this._className=C,this.a=this.registerDataInput("a",P)}_doOperation(P){return this._operation(this.a.getValue(P))}getClassName(){return this._className}}}}]);