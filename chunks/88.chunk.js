"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[88],{14103:(c,b,A)=>{A.r(b),A.d(b,{FlowGraphMultiGateBlock:()=>s});var o=A(633),t=A(12780),n=A(12763),h=A(12760);class s extends t.e{constructor(c){super(c),this.config=c,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",n.g,new h.d(-1)),this.setNumberOfOutputSignals(null===c||void 0===c?void 0:c.outputSignalCount)}_getNextIndex(c){if(c.includes(!1)||this.config.isLoop&&c.fill(!1),this.config.isRandom){const b=c.map(((c,b)=>c?-1:b)).filter((c=>-1!==c));return b.length?b[Math.floor(Math.random()*b.length)]:-1}return c.indexOf(!1)}setNumberOfOutputSignals(){let c=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>c;){const c=this.outputSignals.pop();c&&(c.disconnectFromAll(),this._unregisterSignalOutput(c.name))}for(;this.outputSignals.length<c;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(c,b){if(c._hasExecutionVariable(this,"indexesUsed")||c._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),b===this.reset)return c._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new h.d(-1),c);const A=c._getExecutionVariable(this,"indexesUsed",[]),o=this._getNextIndex(A);o>-1&&(this.lastIndex.setValue(new h.d(o),c),A[o]=!0,c._setExecutionVariable(this,"indexesUsed",A),this.outputSignals[o]._activateSignal(c))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(c){super.serialize(c),c.config.outputSignalCount=this.config.outputSignalCount,c.config.isRandom=this.config.isRandom,c.config.loop=this.config.isLoop,c.config.startIndex=this.config.startIndex}}(0,o.d)("FlowGraphMultiGateBlock",s)}}]);