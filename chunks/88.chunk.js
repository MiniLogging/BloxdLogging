"use strict";(self.g111kvdsqxc=self.g111kvdsqxc||[]).push([[88],{14474:(K,H,M)=>{M.r(H),M.d(H,{FlowGraphAbsBlock:()=>s,FlowGraphAcosBlock:()=>uK,FlowGraphAcoshBlock:()=>GK,FlowGraphAddBlock:()=>v,FlowGraphAsinBlock:()=>wK,FlowGraphAsinhBlock:()=>zK,FlowGraphAtan2Block:()=>hK,FlowGraphAtanBlock:()=>yK,FlowGraphAtanhBlock:()=>aK,FlowGraphBitwiseAndBlock:()=>EK,FlowGraphBitwiseLeftShiftBlock:()=>DK,FlowGraphBitwiseNotBlock:()=>ZK,FlowGraphBitwiseOrBlock:()=>lK,FlowGraphBitwiseRightShiftBlock:()=>VK,FlowGraphBitwiseXorBlock:()=>sK,FlowGraphCeilBlock:()=>c,FlowGraphClampBlock:()=>R,FlowGraphCosBlock:()=>MK,FlowGraphCoshBlock:()=>IK,FlowGraphCubeRootBlock:()=>CK,FlowGraphDegToRadBlock:()=>A,FlowGraphDivideBlock:()=>S,FlowGraphEBlock:()=>C,FlowGraphEqualityBlock:()=>F,FlowGraphExpBlock:()=>vK,FlowGraphFloorBlock:()=>n,FlowGraphFractionBlock:()=>T,FlowGraphGreaterThanBlock:()=>b,FlowGraphGreaterThanOrEqualBlock:()=>P,FlowGraphInfBlock:()=>Z,FlowGraphIsInfinityBlock:()=>X,FlowGraphIsNanBlock:()=>g,FlowGraphLeadingZerosBlock:()=>nK,FlowGraphLessThanBlock:()=>r,FlowGraphLessThanOrEqualBlock:()=>e,FlowGraphLog10Block:()=>SK,FlowGraphLog2Block:()=>LK,FlowGraphLogBlock:()=>OK,FlowGraphMathInterpolationBlock:()=>m,FlowGraphMaxBlock:()=>N,FlowGraphMinBlock:()=>J,FlowGraphModuloBlock:()=>Q,FlowGraphMultiplyBlock:()=>L,FlowGraphNaNBlock:()=>E,FlowGraphNegationBlock:()=>d,FlowGraphOneBitsCounterBlock:()=>kK,FlowGraphPiBlock:()=>i,FlowGraphPowerBlock:()=>iK,FlowGraphRadToDegBlock:()=>KK,FlowGraphRandomBlock:()=>B,FlowGraphRoundBlock:()=>k,FlowGraphSaturateBlock:()=>U,FlowGraphSignBlock:()=>D,FlowGraphSinBlock:()=>HK,FlowGraphSinhBlock:()=>WK,FlowGraphSquareRootBlock:()=>BK,FlowGraphSubtractBlock:()=>O,FlowGraphTanBlock:()=>qK,FlowGraphTanhBlock:()=>fK,FlowGraphTrailingZerosBlock:()=>cK,FlowGraphTruncBlock:()=>V});var q=M(11242),w=M(13004),u=M(14480),y=M(14485);class h extends y.b{constructor(K,H,M,q){super(K,q),this._operation=H,this._className=M}_doOperation(K){return this._operation(K)}getClassName(){return this._className}}var W=M(11290),I=M(14492);class f extends y.b{constructor(K,H,M,q,w,u,y){super(q,y),this._operation=w,this._className=u,this.a=this.registerDataInput("a",K),this.b=this.registerDataInput("b",H),this.c=this.registerDataInput("c",M)}_doOperation(K){return this._operation(this.a.getValue(K),this.b.getValue(K),this.c.getValue(K))}getClassName(){return this._className}}var z=M(12996),G=M(13012),a=M(13030);class v extends u.d{constructor(K){super((0,w.L)(null===K||void 0===K?void 0:K.type),(0,w.L)(null===K||void 0===K?void 0:K.type),(0,w.L)(null===K||void 0===K?void 0:K.type),((K,H)=>this._polymorphicAdd(K,H)),"FlowGraphAddBlock",K)}_polymorphicAdd(K,H){const M=(0,a.m)(K),q=(0,a.m)(H);if((0,a.j)(M,q)||(0,a.f)(M,q)||(0,a.b)(M,q))return K.add(H);if("Quaternion"===M||"Vector4"===q)return new W.Vector4(K.x,K.y,K.z,K.w).addInPlace(H);if("Vector4"===M||"Quaternion"===q)return K.add(H);var w;if(null!==(w=this.config)&&void 0!==w&&w.preventIntegerFloatArithmetic&&typeof K!==typeof H)throw new Error("Cannot add different types of numbers.");return(0,a.r)(K)+(0,a.r)(H)}}(0,q.f)("FlowGraphAddBlock",v);class O extends u.d{constructor(K){super((0,w.L)(null===K||void 0===K?void 0:K.type),(0,w.L)(null===K||void 0===K?void 0:K.type),(0,w.L)(null===K||void 0===K?void 0:K.type),((K,H)=>this._polymorphicSubtract(K,H)),"FlowGraphSubtractBlock",K)}_polymorphicSubtract(K,H){const M=(0,a.m)(K),q=(0,a.m)(H);if((0,a.j)(M,q)||(0,a.b)(M,q)||(0,a.f)(M,q))return K.LH(H);if("Quaternion"===M||"Vector4"===q)return new W.Vector4(K.x,K.y,K.z,K.w).Zz(H);if("Vector4"===M||"Quaternion"===q)return K.LH(H);var w;if(null!==(w=this.config)&&void 0!==w&&w.preventIntegerFloatArithmetic&&typeof K!==typeof H)throw new Error("Cannot add different types of numbers.");return(0,a.r)(K)-(0,a.r)(H)}}(0,q.f)("FlowGraphSubtractBlock",O);class L extends u.d{constructor(K){super((0,w.L)(null===K||void 0===K?void 0:K.type),(0,w.L)(null===K||void 0===K?void 0:K.type),(0,w.L)(null===K||void 0===K?void 0:K.type),((K,H)=>this._polymorphicMultiply(K,H)),"FlowGraphMultiplyBlock",K)}_polymorphicMultiply(K,H){const M=(0,a.m)(K),q=(0,a.m)(H);if((0,a.j)(M,q)||(0,a.b)(M,q))return K.multiply(H);if("Quaternion"===M||"Vector4"===q)return new W.Vector4(K.x,K.y,K.z,K.w).multiplyInPlace(H);if("Vector4"===M||"Quaternion"===q)return K.multiply(H);if((0,a.f)(M,q)){var w;if(null!==(w=this.config)&&void 0!==w&&w.useMatrixPerComponent){const q=K.m;for(let K=0;K<q.length;K++)q[K]*=H.m[K];return"Matrix2D"===M?new G.c(q):"Matrix3D"===M?new G.d(q):W.Matrix.iH(q)}return H.multiply(K)}var u;if(null!==(u=this.config)&&void 0!==u&&u.preventIntegerFloatArithmetic&&typeof K!==typeof H)throw new Error("Cannot add different types of numbers.");return(0,a.r)(K)*(0,a.r)(H)}}(0,q.f)("FlowGraphMultiplyBlock",L);class S extends u.d{constructor(K){super((0,w.L)(null===K||void 0===K?void 0:K.type),(0,w.L)(null===K||void 0===K?void 0:K.type),(0,w.L)(null===K||void 0===K?void 0:K.type),((K,H)=>this._polymorphicDivide(K,H)),"FlowGraphDivideBlock",K)}_polymorphicDivide(K,H){const M=(0,a.m)(K),q=(0,a.m)(H);if((0,a.j)(M,q)||(0,a.b)(M,q))return K.divide(H);if("Quaternion"===M||"Quaternion"===q){const M=K.clone();return M.x/=H.x,M.y/=H.y,M.z/=H.z,M.w/=H.w,M}if("Quaternion"===M||"Vector4"===q)return new W.Vector4(K.x,K.y,K.z,K.w).divideInPlace(H);if("Vector4"===M||"Quaternion"===q)return K.divide(H);if((0,a.f)(M,q)){var w;if(null!==(w=this.config)&&void 0!==w&&w.useMatrixPerComponent){const q=K.m;for(let K=0;K<q.length;K++)q[K]/=H.m[K];return"Matrix2D"===M?new G.c(q):"Matrix3D"===M?new G.d(q):W.Matrix.iH(q)}return K.divide(H)}var u;if(null!==(u=this.config)&&void 0!==u&&u.preventIntegerFloatArithmetic&&typeof K!==typeof H)throw new Error("Cannot add different types of numbers.");return(0,a.r)(K)/(0,a.r)(H)}}(0,q.f)("FlowGraphDivideBlock",S);class B extends h{constructor(K){super(w.x,(K=>this._random(K)),"FlowGraphRandomBlock",K),this.min=this.registerDataInput("min",w.x,(null===K||void 0===K?void 0:K.min)??0),this.max=this.registerDataInput("max",w.x,(null===K||void 0===K?void 0:K.max)??1),null!==K&&void 0!==K&&K.seed&&(this._seed=K.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const K=1e4*Math.sin(this._seed++);return K-Math.floor(K)}return Math.random()}_random(K){const H=this.min.getValue(K),M=this.max.getValue(K);return this._getRandomValue()*(M-H)+H}}(0,q.f)("FlowGraphRandomBlock",B);class C extends h{constructor(K){super(w.x,(()=>Math.E),"FlowGraphEBlock",K)}}(0,q.f)("FlowGraphEBlock",C);class i extends h{constructor(K){super(w.x,(()=>Math.PI),"FlowGraphPIBlock",K)}}(0,q.f)("FlowGraphPIBlock",i);class Z extends h{constructor(K){super(w.x,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",K)}}(0,q.f)("FlowGraphInfBlock",Z);class E extends h{constructor(K){super(w.x,(()=>Number.NaN),"FlowGraphNaNBlock",K)}}function l(K,H){switch((0,a.m)(K)){case"FlowGraphInteger":return new z.e(H(K.value));case"Vector2":return new W.Vector2(H(K.x),H(K.y));case"OH":return new W.OH(H(K.x),H(K.y),H(K.z));case"Vector4":return new W.Vector4(H(K.x),H(K.y),H(K.z),H(K.w));case"Quaternion":return new W.Quaternion(H(K.x),H(K.y),H(K.z),H(K.w));case"Matrix":return W.Matrix.iH(K.m.map(H));case"Matrix2D":return new G.c(K.m.map(H));case"Matrix3D":return new G.d(K.m.map(H));default:return H(K)}}(0,q.f)("FlowGraphNaNBlock",E);class s extends I.b{constructor(K){super(w.x,w.x,(K=>this._polymorphicAbs(K)),"FlowGraphAbsBlock",K)}_polymorphicAbs(K){return l(K,Math.abs)}}(0,q.f)("FlowGraphAbsBlock",s);class D extends I.b{constructor(K){super(w.x,w.x,(K=>this._polymorphicSign(K)),"FlowGraphSignBlock",K)}_polymorphicSign(K){return l(K,Math.sign)}}(0,q.f)("FlowGraphSignBlock",D);class V extends I.b{constructor(K){super(w.x,w.x,(K=>this._polymorphicTrunc(K)),"FlowGraphTruncBlock",K)}_polymorphicTrunc(K){return l(K,Math.trunc)}}(0,q.f)("FlowGraphTruncBlock",V);class n extends I.b{constructor(K){super(w.x,w.x,(K=>this._polymorphicFloor(K)),"FlowGraphFloorBlock",K)}_polymorphicFloor(K){return l(K,Math.floor)}}(0,q.f)("FlowGraphFloorBlock",n);class c extends I.b{constructor(K){super(w.d,w.d,(K=>this._polymorphicCeiling(K)),"FlowGraphCeilBlock",K)}_polymorphicCeiling(K){return l(K,Math.ceil)}}(0,q.f)("FlowGraphCeilBlock",c);class k extends I.b{constructor(K){super(w.d,w.d,(K=>this._polymorphicRound(K)),"FlowGraphRoundBlock",K)}_polymorphicRound(K){return l(K,(K=>{var H;return K<0&&null!==(H=this.config)&&void 0!==H&&H.roundHalfAwayFromZero?-Math.round(-K):Math.round(K)}))}}(0,q.f)("FlowGraphRoundBlock",k);class T extends I.b{constructor(K){super(w.d,w.d,(K=>this._polymorphicFraction(K)),"FlowGraphFractBlock",K)}_polymorphicFraction(K){return l(K,(K=>K-Math.floor(K)))}}(0,q.f)("FlowGraphFractBlock",T);class d extends I.b{constructor(K){super(w.d,w.d,(K=>this._polymorphicNeg(K)),"FlowGraphNegationBlock",K)}_polymorphicNeg(K){return l(K,(K=>-K))}}function x(K,H,M){switch((0,a.m)(K)){case"FlowGraphInteger":return new z.e(M(K.value,H.value));case"Vector2":return new W.Vector2(M(K.x,H.x),M(K.y,H.y));case"OH":return new W.OH(M(K.x,H.x),M(K.y,H.y),M(K.z,H.z));case"Vector4":return new W.Vector4(M(K.x,H.x),M(K.y,H.y),M(K.z,H.z),M(K.w,H.w));case"Quaternion":return new W.Quaternion(M(K.x,H.x),M(K.y,H.y),M(K.z,H.z),M(K.w,H.w));case"Matrix":return W.Matrix.iH(K.m.map(((K,q)=>M(K,H.m[q]))));case"Matrix2D":return new G.c(K.m.map(((K,q)=>M(K,H.m[q]))));case"Matrix3D":return new G.d(K.m.map(((K,q)=>M(K,H.m[q]))));default:return M((0,a.r)(K),(0,a.r)(H))}}(0,q.f)("FlowGraphNegationBlock",d);class Q extends u.d{constructor(K){super(w.d,w.d,w.d,((K,H)=>this._polymorphicRemainder(K,H)),"FlowGraphModuloBlock",K)}_polymorphicRemainder(K,H){return x(K,H,((K,H)=>K%H))}}(0,q.f)("FlowGraphModuloBlock",Q);class J extends u.d{constructor(K){super(w.d,w.d,w.d,((K,H)=>this._polymorphicMin(K,H)),"FlowGraphMinBlock",K)}_polymorphicMin(K,H){return x(K,H,Math.min)}}(0,q.f)("FlowGraphMinBlock",J);class N extends u.d{constructor(K){super(w.d,w.d,w.d,((K,H)=>this._polymorphicMax(K,H)),"FlowGraphMaxBlock",K)}_polymorphicMax(K,H){return x(K,H,Math.max)}}function p(K,H,M){return Math.min(Math.max(K,Math.min(H,M)),Math.max(H,M))}function o(K,H,M,q){switch((0,a.m)(K)){case"FlowGraphInteger":return new z.e(q(K.value,H.value,M.value));case"Vector2":return new W.Vector2(q(K.x,H.x,M.x),q(K.y,H.y,M.y));case"OH":return new W.OH(q(K.x,H.x,M.x),q(K.y,H.y,M.y),q(K.z,H.z,M.z));case"Vector4":return new W.Vector4(q(K.x,H.x,M.x),q(K.y,H.y,M.y),q(K.z,H.z,M.z),q(K.w,H.w,M.w));case"Quaternion":return new W.Quaternion(q(K.x,H.x,M.x),q(K.y,H.y,M.y),q(K.z,H.z,M.z),q(K.w,H.w,M.w));case"Matrix":return W.Matrix.iH(K.m.map(((K,w)=>q(K,H.m[w],M.m[w]))));case"Matrix2D":return new G.c(K.m.map(((K,w)=>q(K,H.m[w],M.m[w]))));case"Matrix3D":return new G.d(K.m.map(((K,w)=>q(K,H.m[w],M.m[w]))));default:return q((0,a.r)(K),(0,a.r)(H),(0,a.r)(M))}}(0,q.f)("FlowGraphMaxBlock",N);class R extends f{constructor(K){super(w.d,w.d,w.d,w.d,((K,H,M)=>this._polymorphicClamp(K,H,M)),"FlowGraphClampBlock",K)}_polymorphicClamp(K,H,M){return o(K,H,M,p)}}function t(K){return Math.min(Math.max(K,0),1)}(0,q.f)("FlowGraphClampBlock",R);class U extends I.b{constructor(K){super(w.d,w.d,(K=>this._polymorphicSaturate(K)),"FlowGraphSaturateBlock",K)}_polymorphicSaturate(K){return l(K,t)}}function j(K,H,M){return(1-M)*K+M*H}(0,q.f)("FlowGraphSaturateBlock",U);class m extends f{constructor(K){super(w.d,w.d,w.d,w.d,((K,H,M)=>this._polymorphicInterpolate(K,H,M)),"FlowGraphMathInterpolationBlock",K)}_polymorphicInterpolate(K,H,M){return o(K,H,M,j)}}(0,q.f)("FlowGraphMathInterpolationBlock",m);class F extends u.d{constructor(K){super(w.d,w.d,w.h,((K,H)=>this._polymorphicEq(K,H)),"FlowGraphEqualityBlock",K)}_polymorphicEq(K,H){const M=(0,a.m)(K),q=(0,a.m)(H);return typeof K===typeof H&&((0,a.j)(M,q)||(0,a.f)(M,q)||(0,a.b)(M,q)?K.equals(H):K===H)}}function Y(K,H,M){if((0,a.t)(K)&&(0,a.t)(H))return M((0,a.r)(K),(0,a.r)(H));throw new Error(`Cannot compare ${K} and ${H}`)}(0,q.f)("FlowGraphEqualityBlock",F);class r extends u.d{constructor(K){super(w.d,w.d,w.h,((K,H)=>this._polymorphicLessThan(K,H)),"FlowGraphLessThanBlock",K)}_polymorphicLessThan(K,H){return Y(K,H,((K,H)=>K<H))}}(0,q.f)("FlowGraphLessThanBlock",r);class e extends u.d{constructor(K){super(w.d,w.d,w.h,((K,H)=>this._polymorphicLessThanOrEqual(K,H)),"FlowGraphLessThanOrEqualBlock",K)}_polymorphicLessThanOrEqual(K,H){return Y(K,H,((K,H)=>K<=H))}}(0,q.f)("FlowGraphLessThanOrEqualBlock",e);class b extends u.d{constructor(K){super(w.d,w.d,w.h,((K,H)=>this._polymorphicGreaterThan(K,H)),"FlowGraphGreaterThanBlock",K)}_polymorphicGreaterThan(K,H){return Y(K,H,((K,H)=>K>H))}}(0,q.f)("FlowGraphGreaterThanBlock",b);class P extends u.d{constructor(K){super(w.d,w.d,w.h,((K,H)=>this._polymorphicGreaterThanOrEqual(K,H)),"FlowGraphGreaterThanOrEqualBlock",K)}_polymorphicGreaterThanOrEqual(K,H){return Y(K,H,((K,H)=>K>=H))}}(0,q.f)("FlowGraphGreaterThanOrEqualBlock",P);class g extends I.b{constructor(K){super(w.d,w.h,(K=>this._polymorphicIsNan(K)),"FlowGraphIsNaNBlock",K)}_polymorphicIsNan(K){if((0,a.t)(K,!0))return isNaN((0,a.r)(K));throw new Error(`Cannot get NaN of ${K}`)}}(0,q.f)("FlowGraphIsNaNBlock",g);class X extends I.b{constructor(K){super(w.d,w.h,(K=>this._polymorphicIsInf(K)),"FlowGraphIsInfBlock",K)}_polymorphicIsInf(K){if((0,a.t)(K))return!isFinite((0,a.r)(K));throw new Error(`Cannot get isInf of ${K}`)}}(0,q.f)("FlowGraphIsInfBlock",X);class A extends I.b{constructor(K){super(w.d,w.d,(K=>this._polymorphicDegToRad(K)),"FlowGraphDegToRadBlock",K)}_degToRad(K){return K*Math.PI/180}_polymorphicDegToRad(K){return l(K,this._degToRad)}}(0,q.f)("FlowGraphDegToRadBlock",A);class KK extends I.b{constructor(K){super(w.d,w.d,(K=>this._polymorphicRadToDeg(K)),"FlowGraphRadToDegBlock",K)}_radToDeg(K){return 180*K/Math.PI}_polymorphicRadToDeg(K){return l(K,this._radToDeg)}}(0,q.f)("FlowGraphRadToDegBlock",KK);class HK extends I.b{constructor(K){super(w.x,w.x,(K=>this._polymorphicSin(K)),"FlowGraphSinBlock",K)}_polymorphicSin(K){return l(K,Math.sin)}}class MK extends I.b{constructor(K){super(w.x,w.x,(K=>this._polymorphicCos(K)),"FlowGraphCosBlock",K)}_polymorphicCos(K){return l(K,Math.cos)}}class qK extends I.b{constructor(K){super(w.x,w.x,(K=>this._polymorphicTan(K)),"FlowGraphTanBlock",K)}_polymorphicTan(K){return l(K,Math.tan)}}class wK extends I.b{constructor(K){super(w.x,w.x,(K=>this._polymorphicAsin(K)),"FlowGraphASinBlock",K)}_polymorphicAsin(K){return l(K,Math.asin)}}(0,q.f)("FlowGraphASinBlock",wK);class uK extends I.b{constructor(K){super(w.x,w.x,(K=>this._polymorphicAcos(K)),"FlowGraphACosBlock",K)}_polymorphicAcos(K){return l(K,Math.acos)}}(0,q.f)("FlowGraphACosBlock",uK);class yK extends I.b{constructor(K){super(w.x,w.x,(K=>this._polymorphicAtan(K)),"FlowGraphATanBlock",K)}_polymorphicAtan(K){return l(K,Math.atan)}}(0,q.f)("FlowGraphATanBlock",yK);class hK extends u.d{constructor(K){super(w.d,w.d,w.d,((K,H)=>this._polymorphicAtan2(K,H)),"FlowGraphATan2Block",K)}_polymorphicAtan2(K,H){return x(K,H,Math.atan2)}}(0,q.f)("FlowGraphATan2Block",hK);class WK extends I.b{constructor(K){super(w.d,w.d,(K=>this._polymorphicSinh(K)),"FlowGraphSinhBlock",K)}_polymorphicSinh(K){return l(K,Math.sinh)}}(0,q.f)("FlowGraphSinhBlock",WK);class IK extends I.b{constructor(K){super(w.d,w.d,(K=>this._polymorphicCosh(K)),"FlowGraphCoshBlock",K)}_polymorphicCosh(K){return l(K,Math.cosh)}}(0,q.f)("FlowGraphCoshBlock",IK);class fK extends I.b{constructor(K){super(w.d,w.d,(K=>this._polymorphicTanh(K)),"FlowGraphTanhBlock",K)}_polymorphicTanh(K){return l(K,Math.tanh)}}(0,q.f)("FlowGraphTanhBlock",fK);class zK extends I.b{constructor(K){super(w.d,w.x,(K=>this._polymorphicAsinh(K)),"FlowGraphASinhBlock",K)}_polymorphicAsinh(K){return l(K,Math.asinh)}}(0,q.f)("FlowGraphASinhBlock",zK);class GK extends I.b{constructor(K){super(w.d,w.x,(K=>this._polymorphicAcosh(K)),"FlowGraphACoshBlock",K)}_polymorphicAcosh(K){return l(K,Math.acosh)}}(0,q.f)("FlowGraphACoshBlock",GK);class aK extends I.b{constructor(K){super(w.d,w.x,(K=>this._polymorphicAtanh(K)),"FlowGraphATanhBlock",K)}_polymorphicAtanh(K){return l(K,Math.atanh)}}(0,q.f)("FlowGraphATanhBlock",aK);class vK extends I.b{constructor(K){super(w.d,w.x,(K=>this._polymorphicExp(K)),"FlowGraphExponentialBlock",K)}_polymorphicExp(K){return l(K,Math.exp)}}(0,q.f)("FlowGraphExponentialBlock",vK);class OK extends I.b{constructor(K){super(w.d,w.x,(K=>this._polymorphicLog(K)),"FlowGraphLogBlock",K)}_polymorphicLog(K){return l(K,Math.log)}}(0,q.f)("FlowGraphLogBlock",OK);class LK extends I.b{constructor(K){super(w.d,w.x,(K=>this._polymorphicLog2(K)),"FlowGraphLog2Block",K)}_polymorphicLog2(K){return l(K,Math.log2)}}(0,q.f)("FlowGraphLog2Block",LK);class SK extends I.b{constructor(K){super(w.d,w.x,(K=>this._polymorphicLog10(K)),"FlowGraphLog10Block",K)}_polymorphicLog10(K){return l(K,Math.log10)}}(0,q.f)("FlowGraphLog10Block",SK);class BK extends I.b{constructor(K){super(w.d,w.x,(K=>this._polymorphicSqrt(K)),"FlowGraphSquareRootBlock",K)}_polymorphicSqrt(K){return l(K,Math.sqrt)}}(0,q.f)("FlowGraphSquareRootBlock",BK);class CK extends I.b{constructor(K){super(w.d,w.x,(K=>this._polymorphicCubeRoot(K)),"FlowGraphCubeRootBlock",K)}_polymorphicCubeRoot(K){return l(K,Math.cbrt)}}(0,q.f)("FlowGraphCubeRootBlock",CK);class iK extends u.d{constructor(K){super(w.d,w.x,w.x,((K,H)=>this._polymorphicPow(K,H)),"FlowGraphPowerBlock",K)}_polymorphicPow(K,H){return x(K,H,Math.pow)}}(0,q.f)("FlowGraphPowerBlock",iK);class ZK extends I.b{constructor(K){super((0,w.L)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,w.L)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(K=>"boolean"===typeof K?!K:"number"===typeof K?~K:new z.e(~K.value)),"FlowGraphBitwiseNotBlock",K)}}(0,q.f)("FlowGraphBitwiseNotBlock",ZK);class EK extends u.d{constructor(K){super((0,w.L)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,w.L)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,w.L)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),((K,H)=>{if("boolean"===typeof K&&"boolean"===typeof H)return K&&H;if("number"===typeof K&&"number"===typeof H)return K&H;if("object"===typeof K&&"object"===typeof H)return new z.e(K.value&H.value);throw new Error(`Cannot perform bitwise AND on ${K} and ${H}`)}),"FlowGraphBitwiseAndBlock",K)}}(0,q.f)("FlowGraphBitwiseAndBlock",EK);class lK extends u.d{constructor(K){super((0,w.L)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,w.L)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,w.L)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),((K,H)=>{if("boolean"===typeof K&&"boolean"===typeof H)return K||H;if("number"===typeof K&&"number"===typeof H)return K|H;if("object"===typeof K&&"object"===typeof H)return new z.e(K.value|H.value);throw new Error(`Cannot perform bitwise OR on ${K} and ${H}`)}),"FlowGraphBitwiseOrBlock",K)}}(0,q.f)("FlowGraphBitwiseOrBlock",lK);class sK extends u.d{constructor(K){super((0,w.L)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,w.L)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,w.L)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),((K,H)=>{if("boolean"===typeof K&&"boolean"===typeof H)return K!==H;if("number"===typeof K&&"number"===typeof H)return K^H;if("object"===typeof K&&"object"===typeof H)return new z.e(K.value^H.value);throw new Error(`Cannot perform bitwise XOR on ${K} and ${H}`)}),"FlowGraphBitwiseXorBlock",K)}}(0,q.f)("FlowGraphBitwiseXorBlock",sK);class DK extends u.d{constructor(K){super(w.l,w.l,w.l,((K,H)=>new z.e(K.value<<H.value)),"FlowGraphBitwiseLeftShiftBlock",K)}}(0,q.f)("FlowGraphBitwiseLeftShiftBlock",DK);class VK extends u.d{constructor(K){super(w.l,w.l,w.l,((K,H)=>new z.e(K.value>>H.value)),"FlowGraphBitwiseRightShiftBlock",K)}}(0,q.f)("FlowGraphBitwiseRightShiftBlock",VK);class nK extends I.b{constructor(K){super(w.l,w.l,(K=>new z.e(Math.clz32(K.value))),"FlowGraphLeadingZerosBlock",K)}}(0,q.f)("FlowGraphLeadingZerosBlock",nK);class cK extends I.b{constructor(K){super(w.l,w.l,(K=>new z.e(K.value?31-Math.clz32(K.value&-K.value):32)),"FlowGraphTrailingZerosBlock",K)}}(0,q.f)("FlowGraphTrailingZerosBlock",cK);class kK extends I.b{constructor(K){super(w.l,w.l,(K=>new z.e(function(K){let H=0;for(;K;)H+=1&K,K>>=1;return H}(K.value))),"FlowGraphOneBitsCounterBlock",K)}}(0,q.f)("FlowGraphOneBitsCounterBlock",kK)},14480:(K,H,M)=>{M.d(H,{d:()=>w});var q=M(14485);class w extends q.b{constructor(K,H,M,q,w,u){super(M,u),this._operation=q,this._className=w,this.a=this.registerDataInput("a",K),this.b=this.registerDataInput("b",H)}_doOperation(K){const H=this.a.getValue(K),M=this.b.getValue(K);return this._operation(H,M)}getClassName(){return this._className}}},14485:(K,H,M)=>{M.d(H,{b:()=>h});var q=M(13021),w=M(13004);const u="cachedOperationValue",y="cachedExecutionId";class h extends q.b{constructor(K,H){super(H),this.value=this.registerDataOutput("value",K),this.isValid=this.registerDataOutput("isValid",w.h)}_updateOutputs(K){const H=K._getExecutionVariable(this,y,-1),M=K._getExecutionVariable(this,u,null);if(void 0!==M&&null!==M&&H===K.executionId)this.isValid.setValue(!0,K),this.value.setValue(M,K);else try{const H=this._doOperation(K);if(void 0===H||null===H)return void this.isValid.setValue(!1,K);K._setExecutionVariable(this,u,H),K._setExecutionVariable(this,y,K.executionId),this.value.setValue(H,K),this.isValid.setValue(!0,K)}catch(q){this.isValid.setValue(!1,K)}}}},14492:(K,H,M)=>{M.d(H,{b:()=>w});var q=M(14485);class w extends q.b{constructor(K,H,M,q,w){super(H,w),this._operation=M,this._className=q,this.a=this.registerDataInput("a",K)}_doOperation(K){return this._operation(this.a.getValue(K))}getClassName(){return this._className}}}}]);