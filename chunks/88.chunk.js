"use strict";(self["269hv5nclphh"]=self["269hv5nclphh"]||[]).push([[88],{15594:(E,H,d)=>{d.r(H),d.d(H,{FlowGraphAbsBlock:()=>P,FlowGraphAcosBlock:()=>IE,FlowGraphAcoshBlock:()=>VE,FlowGraphAddBlock:()=>w,FlowGraphAsinBlock:()=>ZE,FlowGraphAsinhBlock:()=>ME,FlowGraphAtan2Block:()=>lE,FlowGraphAtanBlock:()=>gE,FlowGraphAtanhBlock:()=>CE,FlowGraphBitwiseAndBlock:()=>pE,FlowGraphBitwiseLeftShiftBlock:()=>jE,FlowGraphBitwiseNotBlock:()=>iE,FlowGraphBitwiseOrBlock:()=>fE,FlowGraphBitwiseRightShiftBlock:()=>XE,FlowGraphBitwiseXorBlock:()=>PE,FlowGraphCeilBlock:()=>U,FlowGraphClampBlock:()=>x,FlowGraphCosBlock:()=>dE,FlowGraphCoshBlock:()=>tE,FlowGraphCubeRootBlock:()=>eE,FlowGraphDegToRadBlock:()=>J,FlowGraphDivideBlock:()=>L,FlowGraphEBlock:()=>e,FlowGraphEqualityBlock:()=>v,FlowGraphExpBlock:()=>wE,FlowGraphFloorBlock:()=>W,FlowGraphFractionBlock:()=>c,FlowGraphGreaterThanBlock:()=>mE,FlowGraphGreaterThanOrEqualBlock:()=>T,FlowGraphInfBlock:()=>i,FlowGraphIsInfinityBlock:()=>B,FlowGraphIsNanBlock:()=>A,FlowGraphLeadingZerosBlock:()=>WE,FlowGraphLessThanBlock:()=>K,FlowGraphLessThanOrEqualBlock:()=>N,FlowGraphLog10Block:()=>LE,FlowGraphLog2Block:()=>QE,FlowGraphLogBlock:()=>RE,FlowGraphMathInterpolationBlock:()=>y,FlowGraphMaxBlock:()=>k,FlowGraphMinBlock:()=>a,FlowGraphModuloBlock:()=>F,FlowGraphMultiplyBlock:()=>Q,FlowGraphNaNBlock:()=>p,FlowGraphNegationBlock:()=>u,FlowGraphOneBitsCounterBlock:()=>YE,FlowGraphPiBlock:()=>s,FlowGraphPowerBlock:()=>sE,FlowGraphRadToDegBlock:()=>EE,FlowGraphRandomBlock:()=>D,FlowGraphRoundBlock:()=>Y,FlowGraphSaturateBlock:()=>b,FlowGraphSignBlock:()=>j,FlowGraphSinBlock:()=>HE,FlowGraphSinhBlock:()=>rE,FlowGraphSquareRootBlock:()=>DE,FlowGraphSubtractBlock:()=>R,FlowGraphTanBlock:()=>nE,FlowGraphTanhBlock:()=>SE,FlowGraphTrailingZerosBlock:()=>UE,FlowGraphTruncBlock:()=>X});var n=d(12344),Z=d(14103),I=d(15601),g=d(15610);class l extends g.e{constructor(E,H,d,n){super(E,n),this._operation=H,this._className=d}_doOperation(E){return this._operation(E)}getClassName(){return this._className}}var r=d(12384),t=d(15618);class S extends g.e{constructor(E,H,d,n,Z,I,g){super(n,g),this._operation=Z,this._className=I,this.a=this.registerDataInput("a",E),this.b=this.registerDataInput("b",H),this.c=this.registerDataInput("c",d)}_doOperation(E){return this._operation(this.a.getValue(E),this.b.getValue(E),this.c.getValue(E))}getClassName(){return this._className}}var M=d(14095),V=d(14107),C=d(14132);class w extends I.e{constructor(E){super((0,Z.M)(null===E||void 0===E?void 0:E.type),(0,Z.M)(null===E||void 0===E?void 0:E.type),(0,Z.M)(null===E||void 0===E?void 0:E.type),((E,H)=>this._polymorphicAdd(E,H)),"FlowGraphAddBlock",E)}_polymorphicAdd(E,H){const d=(0,C.g)(E),n=(0,C.g)(H);if((0,C.f)(d,n)||(0,C.e)(d,n)||(0,C.c)(d,n))return E.add(H);if("Quaternion"===d||"Vector4"===n)return new r.Vector4(E.x,E.y,E.z,E.w).addInPlace(H);if("Vector4"===d||"Quaternion"===n)return E.add(H);var Z;if(null!==(Z=this.config)&&void 0!==Z&&Z.preventIntegerFloatArithmetic&&typeof E!==typeof H)throw new Error("Cannot add different types of numbers.");return(0,C.k)(E)+(0,C.k)(H)}}(0,n.e)("FlowGraphAddBlock",w);class R extends I.e{constructor(E){super((0,Z.M)(null===E||void 0===E?void 0:E.type),(0,Z.M)(null===E||void 0===E?void 0:E.type),(0,Z.M)(null===E||void 0===E?void 0:E.type),((E,H)=>this._polymorphicSubtract(E,H)),"FlowGraphSubtractBlock",E)}_polymorphicSubtract(E,H){const d=(0,C.g)(E),n=(0,C.g)(H);if((0,C.f)(d,n)||(0,C.c)(d,n)||(0,C.e)(d,n))return E.RH(H);if("Quaternion"===d||"Vector4"===n)return new r.Vector4(E.x,E.y,E.z,E.w).MM(H);if("Vector4"===d||"Quaternion"===n)return E.RH(H);var Z;if(null!==(Z=this.config)&&void 0!==Z&&Z.preventIntegerFloatArithmetic&&typeof E!==typeof H)throw new Error("Cannot add different types of numbers.");return(0,C.k)(E)-(0,C.k)(H)}}(0,n.e)("FlowGraphSubtractBlock",R);class Q extends I.e{constructor(E){super((0,Z.M)(null===E||void 0===E?void 0:E.type),(0,Z.M)(null===E||void 0===E?void 0:E.type),(0,Z.M)(null===E||void 0===E?void 0:E.type),((E,H)=>this._polymorphicMultiply(E,H)),"FlowGraphMultiplyBlock",E)}_polymorphicMultiply(E,H){const d=(0,C.g)(E),n=(0,C.g)(H);if((0,C.f)(d,n)||(0,C.c)(d,n))return E.multiply(H);if("Quaternion"===d||"Vector4"===n)return new r.Vector4(E.x,E.y,E.z,E.w).multiplyInPlace(H);if("Vector4"===d||"Quaternion"===n)return E.multiply(H);if((0,C.e)(d,n)){var Z;if(null!==(Z=this.config)&&void 0!==Z&&Z.useMatrixPerComponent){const n=E.m;for(let E=0;E<n.length;E++)n[E]*=H.m[E];return"Matrix2D"===d?new V.c(n):"Matrix3D"===d?new V.d(n):r.Matrix.eH(n)}return H.multiply(E)}var I;if(null!==(I=this.config)&&void 0!==I&&I.preventIntegerFloatArithmetic&&typeof E!==typeof H)throw new Error("Cannot add different types of numbers.");return(0,C.k)(E)*(0,C.k)(H)}}(0,n.e)("FlowGraphMultiplyBlock",Q);class L extends I.e{constructor(E){super((0,Z.M)(null===E||void 0===E?void 0:E.type),(0,Z.M)(null===E||void 0===E?void 0:E.type),(0,Z.M)(null===E||void 0===E?void 0:E.type),((E,H)=>this._polymorphicDivide(E,H)),"FlowGraphDivideBlock",E)}_polymorphicDivide(E,H){const d=(0,C.g)(E),n=(0,C.g)(H);if((0,C.f)(d,n)||(0,C.c)(d,n))return E.divide(H);if("Quaternion"===d||"Quaternion"===n){const d=E.clone();return d.x/=H.x,d.y/=H.y,d.z/=H.z,d.w/=H.w,d}if("Quaternion"===d||"Vector4"===n)return new r.Vector4(E.x,E.y,E.z,E.w).divideInPlace(H);if("Vector4"===d||"Quaternion"===n)return E.divide(H);if((0,C.e)(d,n)){var Z;if(null!==(Z=this.config)&&void 0!==Z&&Z.useMatrixPerComponent){const n=E.m;for(let E=0;E<n.length;E++)n[E]/=H.m[E];return"Matrix2D"===d?new V.c(n):"Matrix3D"===d?new V.d(n):r.Matrix.eH(n)}return E.divide(H)}var I;if(null!==(I=this.config)&&void 0!==I&&I.preventIntegerFloatArithmetic&&typeof E!==typeof H)throw new Error("Cannot add different types of numbers.");return(0,C.k)(E)/(0,C.k)(H)}}(0,n.e)("FlowGraphDivideBlock",L);class D extends l{constructor(E){super(Z.r,(E=>this._random(E)),"FlowGraphRandomBlock",E),this.min=this.registerDataInput("min",Z.r,(null===E||void 0===E?void 0:E.min)??0),this.max=this.registerDataInput("max",Z.r,(null===E||void 0===E?void 0:E.max)??1),null!==E&&void 0!==E&&E.seed&&(this._seed=E.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const E=1e4*Math.sin(this._seed++);return E-Math.floor(E)}return Math.random()}_random(E){const H=this.min.getValue(E),d=this.max.getValue(E);return this._getRandomValue()*(d-H)+H}}(0,n.e)("FlowGraphRandomBlock",D);class e extends l{constructor(E){super(Z.r,(()=>Math.E),"FlowGraphEBlock",E)}}(0,n.e)("FlowGraphEBlock",e);class s extends l{constructor(E){super(Z.r,(()=>Math.PI),"FlowGraphPIBlock",E)}}(0,n.e)("FlowGraphPIBlock",s);class i extends l{constructor(E){super(Z.r,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",E)}}(0,n.e)("FlowGraphInfBlock",i);class p extends l{constructor(E){super(Z.r,(()=>Number.NaN),"FlowGraphNaNBlock",E)}}function f(E,H){switch((0,C.g)(E)){case"FlowGraphInteger":return new M.c(H(E.value));case"Vector2":return new r.Vector2(H(E.x),H(E.y));case"wH":return new r.wH(H(E.x),H(E.y),H(E.z));case"Vector4":return new r.Vector4(H(E.x),H(E.y),H(E.z),H(E.w));case"Quaternion":return new r.Quaternion(H(E.x),H(E.y),H(E.z),H(E.w));case"Matrix":return r.Matrix.eH(E.m.map(H));case"Matrix2D":return new V.c(E.m.map(H));case"Matrix3D":return new V.d(E.m.map(H));default:return H(E)}}(0,n.e)("FlowGraphNaNBlock",p);class P extends t.c{constructor(E){super(Z.r,Z.r,(E=>this._polymorphicAbs(E)),"FlowGraphAbsBlock",E)}_polymorphicAbs(E){return f(E,Math.abs)}}(0,n.e)("FlowGraphAbsBlock",P);class j extends t.c{constructor(E){super(Z.r,Z.r,(E=>this._polymorphicSign(E)),"FlowGraphSignBlock",E)}_polymorphicSign(E){return f(E,Math.sign)}}(0,n.e)("FlowGraphSignBlock",j);class X extends t.c{constructor(E){super(Z.r,Z.r,(E=>this._polymorphicTrunc(E)),"FlowGraphTruncBlock",E)}_polymorphicTrunc(E){return f(E,Math.trunc)}}(0,n.e)("FlowGraphTruncBlock",X);class W extends t.c{constructor(E){super(Z.r,Z.r,(E=>this._polymorphicFloor(E)),"FlowGraphFloorBlock",E)}_polymorphicFloor(E){return f(E,Math.floor)}}(0,n.e)("FlowGraphFloorBlock",W);class U extends t.c{constructor(E){super(Z.e,Z.e,(E=>this._polymorphicCeiling(E)),"FlowGraphCeilBlock",E)}_polymorphicCeiling(E){return f(E,Math.ceil)}}(0,n.e)("FlowGraphCeilBlock",U);class Y extends t.c{constructor(E){super(Z.e,Z.e,(E=>this._polymorphicRound(E)),"FlowGraphRoundBlock",E)}_polymorphicRound(E){return f(E,(E=>{var H;return E<0&&null!==(H=this.config)&&void 0!==H&&H.roundHalfAwayFromZero?-Math.round(-E):Math.round(E)}))}}(0,n.e)("FlowGraphRoundBlock",Y);class c extends t.c{constructor(E){super(Z.e,Z.e,(E=>this._polymorphicFraction(E)),"FlowGraphFractBlock",E)}_polymorphicFraction(E){return f(E,(E=>E-Math.floor(E)))}}(0,n.e)("FlowGraphFractBlock",c);class u extends t.c{constructor(E){super(Z.e,Z.e,(E=>this._polymorphicNeg(E)),"FlowGraphNegationBlock",E)}_polymorphicNeg(E){return f(E,(E=>-E))}}function o(E,H,d){switch((0,C.g)(E)){case"FlowGraphInteger":return new M.c(d(E.value,H.value));case"Vector2":return new r.Vector2(d(E.x,H.x),d(E.y,H.y));case"wH":return new r.wH(d(E.x,H.x),d(E.y,H.y),d(E.z,H.z));case"Vector4":return new r.Vector4(d(E.x,H.x),d(E.y,H.y),d(E.z,H.z),d(E.w,H.w));case"Quaternion":return new r.Quaternion(d(E.x,H.x),d(E.y,H.y),d(E.z,H.z),d(E.w,H.w));case"Matrix":return r.Matrix.eH(E.m.map(((E,n)=>d(E,H.m[n]))));case"Matrix2D":return new V.c(E.m.map(((E,n)=>d(E,H.m[n]))));case"Matrix3D":return new V.d(E.m.map(((E,n)=>d(E,H.m[n]))));default:return d((0,C.k)(E),(0,C.k)(H))}}(0,n.e)("FlowGraphNegationBlock",u);class F extends I.e{constructor(E){super(Z.e,Z.e,Z.e,((E,H)=>this._polymorphicRemainder(E,H)),"FlowGraphModuloBlock",E)}_polymorphicRemainder(E,H){return o(E,H,((E,H)=>E%H))}}(0,n.e)("FlowGraphModuloBlock",F);class a extends I.e{constructor(E){super(Z.e,Z.e,Z.e,((E,H)=>this._polymorphicMin(E,H)),"FlowGraphMinBlock",E)}_polymorphicMin(E,H){return o(E,H,Math.min)}}(0,n.e)("FlowGraphMinBlock",a);class k extends I.e{constructor(E){super(Z.e,Z.e,Z.e,((E,H)=>this._polymorphicMax(E,H)),"FlowGraphMaxBlock",E)}_polymorphicMax(E,H){return o(E,H,Math.max)}}function O(E,H,d){return Math.min(Math.max(E,Math.min(H,d)),Math.max(H,d))}function G(E,H,d,n){switch((0,C.g)(E)){case"FlowGraphInteger":return new M.c(n(E.value,H.value,d.value));case"Vector2":return new r.Vector2(n(E.x,H.x,d.x),n(E.y,H.y,d.y));case"wH":return new r.wH(n(E.x,H.x,d.x),n(E.y,H.y,d.y),n(E.z,H.z,d.z));case"Vector4":return new r.Vector4(n(E.x,H.x,d.x),n(E.y,H.y,d.y),n(E.z,H.z,d.z),n(E.w,H.w,d.w));case"Quaternion":return new r.Quaternion(n(E.x,H.x,d.x),n(E.y,H.y,d.y),n(E.z,H.z,d.z),n(E.w,H.w,d.w));case"Matrix":return r.Matrix.eH(E.m.map(((E,Z)=>n(E,H.m[Z],d.m[Z]))));case"Matrix2D":return new V.c(E.m.map(((E,Z)=>n(E,H.m[Z],d.m[Z]))));case"Matrix3D":return new V.d(E.m.map(((E,Z)=>n(E,H.m[Z],d.m[Z]))));default:return n((0,C.k)(E),(0,C.k)(H),(0,C.k)(d))}}(0,n.e)("FlowGraphMaxBlock",k);class x extends S{constructor(E){super(Z.e,Z.e,Z.e,Z.e,((E,H,d)=>this._polymorphicClamp(E,H,d)),"FlowGraphClampBlock",E)}_polymorphicClamp(E,H,d){return G(E,H,d,O)}}function q(E){return Math.min(Math.max(E,0),1)}(0,n.e)("FlowGraphClampBlock",x);class b extends t.c{constructor(E){super(Z.e,Z.e,(E=>this._polymorphicSaturate(E)),"FlowGraphSaturateBlock",E)}_polymorphicSaturate(E){return f(E,q)}}function h(E,H,d){return(1-d)*E+d*H}(0,n.e)("FlowGraphSaturateBlock",b);class y extends S{constructor(E){super(Z.e,Z.e,Z.e,Z.e,((E,H,d)=>this._polymorphicInterpolate(E,H,d)),"FlowGraphMathInterpolationBlock",E)}_polymorphicInterpolate(E,H,d){return G(E,H,d,h)}}(0,n.e)("FlowGraphMathInterpolationBlock",y);class v extends I.e{constructor(E){super(Z.e,Z.e,Z.h,((E,H)=>this._polymorphicEq(E,H)),"FlowGraphEqualityBlock",E)}_polymorphicEq(E,H){const d=(0,C.g)(E),n=(0,C.g)(H);return typeof E===typeof H&&((0,C.f)(d,n)||(0,C.e)(d,n)||(0,C.c)(d,n)?E.equals(H):E===H)}}function z(E,H,d){if((0,C.m)(E)&&(0,C.m)(H))return d((0,C.k)(E),(0,C.k)(H));throw new Error(`Cannot compare ${E} and ${H}`)}(0,n.e)("FlowGraphEqualityBlock",v);class K extends I.e{constructor(E){super(Z.e,Z.e,Z.h,((E,H)=>this._polymorphicLessThan(E,H)),"FlowGraphLessThanBlock",E)}_polymorphicLessThan(E,H){return z(E,H,((E,H)=>E<H))}}(0,n.e)("FlowGraphLessThanBlock",K);class N extends I.e{constructor(E){super(Z.e,Z.e,Z.h,((E,H)=>this._polymorphicLessThanOrEqual(E,H)),"FlowGraphLessThanOrEqualBlock",E)}_polymorphicLessThanOrEqual(E,H){return z(E,H,((E,H)=>E<=H))}}(0,n.e)("FlowGraphLessThanOrEqualBlock",N);class mE extends I.e{constructor(E){super(Z.e,Z.e,Z.h,((E,H)=>this._polymorphicGreaterThan(E,H)),"FlowGraphGreaterThanBlock",E)}_polymorphicGreaterThan(E,H){return z(E,H,((E,H)=>E>H))}}(0,n.e)("FlowGraphGreaterThanBlock",mE);class T extends I.e{constructor(E){super(Z.e,Z.e,Z.h,((E,H)=>this._polymorphicGreaterThanOrEqual(E,H)),"FlowGraphGreaterThanOrEqualBlock",E)}_polymorphicGreaterThanOrEqual(E,H){return z(E,H,((E,H)=>E>=H))}}(0,n.e)("FlowGraphGreaterThanOrEqualBlock",T);class A extends t.c{constructor(E){super(Z.e,Z.h,(E=>this._polymorphicIsNan(E)),"FlowGraphIsNaNBlock",E)}_polymorphicIsNan(E){if((0,C.m)(E,!0))return isNaN((0,C.k)(E));throw new Error(`Cannot get NaN of ${E}`)}}(0,n.e)("FlowGraphIsNaNBlock",A);class B extends t.c{constructor(E){super(Z.e,Z.h,(E=>this._polymorphicIsInf(E)),"FlowGraphIsInfBlock",E)}_polymorphicIsInf(E){if((0,C.m)(E))return!isFinite((0,C.k)(E));throw new Error(`Cannot get isInf of ${E}`)}}(0,n.e)("FlowGraphIsInfBlock",B);class J extends t.c{constructor(E){super(Z.e,Z.e,(E=>this._polymorphicDegToRad(E)),"FlowGraphDegToRadBlock",E)}_degToRad(E){return E*Math.PI/180}_polymorphicDegToRad(E){return f(E,this._degToRad)}}(0,n.e)("FlowGraphDegToRadBlock",J);class EE extends t.c{constructor(E){super(Z.e,Z.e,(E=>this._polymorphicRadToDeg(E)),"FlowGraphRadToDegBlock",E)}_radToDeg(E){return 180*E/Math.PI}_polymorphicRadToDeg(E){return f(E,this._radToDeg)}}(0,n.e)("FlowGraphRadToDegBlock",EE);class HE extends t.c{constructor(E){super(Z.r,Z.r,(E=>this._polymorphicSin(E)),"FlowGraphSinBlock",E)}_polymorphicSin(E){return f(E,Math.sin)}}class dE extends t.c{constructor(E){super(Z.r,Z.r,(E=>this._polymorphicCos(E)),"FlowGraphCosBlock",E)}_polymorphicCos(E){return f(E,Math.cos)}}class nE extends t.c{constructor(E){super(Z.r,Z.r,(E=>this._polymorphicTan(E)),"FlowGraphTanBlock",E)}_polymorphicTan(E){return f(E,Math.tan)}}class ZE extends t.c{constructor(E){super(Z.r,Z.r,(E=>this._polymorphicAsin(E)),"FlowGraphASinBlock",E)}_polymorphicAsin(E){return f(E,Math.asin)}}(0,n.e)("FlowGraphASinBlock",ZE);class IE extends t.c{constructor(E){super(Z.r,Z.r,(E=>this._polymorphicAcos(E)),"FlowGraphACosBlock",E)}_polymorphicAcos(E){return f(E,Math.acos)}}(0,n.e)("FlowGraphACosBlock",IE);class gE extends t.c{constructor(E){super(Z.r,Z.r,(E=>this._polymorphicAtan(E)),"FlowGraphATanBlock",E)}_polymorphicAtan(E){return f(E,Math.atan)}}(0,n.e)("FlowGraphATanBlock",gE);class lE extends I.e{constructor(E){super(Z.e,Z.e,Z.e,((E,H)=>this._polymorphicAtan2(E,H)),"FlowGraphATan2Block",E)}_polymorphicAtan2(E,H){return o(E,H,Math.atan2)}}(0,n.e)("FlowGraphATan2Block",lE);class rE extends t.c{constructor(E){super(Z.e,Z.e,(E=>this._polymorphicSinh(E)),"FlowGraphSinhBlock",E)}_polymorphicSinh(E){return f(E,Math.sinh)}}(0,n.e)("FlowGraphSinhBlock",rE);class tE extends t.c{constructor(E){super(Z.e,Z.e,(E=>this._polymorphicCosh(E)),"FlowGraphCoshBlock",E)}_polymorphicCosh(E){return f(E,Math.cosh)}}(0,n.e)("FlowGraphCoshBlock",tE);class SE extends t.c{constructor(E){super(Z.e,Z.e,(E=>this._polymorphicTanh(E)),"FlowGraphTanhBlock",E)}_polymorphicTanh(E){return f(E,Math.tanh)}}(0,n.e)("FlowGraphTanhBlock",SE);class ME extends t.c{constructor(E){super(Z.e,Z.r,(E=>this._polymorphicAsinh(E)),"FlowGraphASinhBlock",E)}_polymorphicAsinh(E){return f(E,Math.asinh)}}(0,n.e)("FlowGraphASinhBlock",ME);class VE extends t.c{constructor(E){super(Z.e,Z.r,(E=>this._polymorphicAcosh(E)),"FlowGraphACoshBlock",E)}_polymorphicAcosh(E){return f(E,Math.acosh)}}(0,n.e)("FlowGraphACoshBlock",VE);class CE extends t.c{constructor(E){super(Z.e,Z.r,(E=>this._polymorphicAtanh(E)),"FlowGraphATanhBlock",E)}_polymorphicAtanh(E){return f(E,Math.atanh)}}(0,n.e)("FlowGraphATanhBlock",CE);class wE extends t.c{constructor(E){super(Z.e,Z.r,(E=>this._polymorphicExp(E)),"FlowGraphExponentialBlock",E)}_polymorphicExp(E){return f(E,Math.exp)}}(0,n.e)("FlowGraphExponentialBlock",wE);class RE extends t.c{constructor(E){super(Z.e,Z.r,(E=>this._polymorphicLog(E)),"FlowGraphLogBlock",E)}_polymorphicLog(E){return f(E,Math.log)}}(0,n.e)("FlowGraphLogBlock",RE);class QE extends t.c{constructor(E){super(Z.e,Z.r,(E=>this._polymorphicLog2(E)),"FlowGraphLog2Block",E)}_polymorphicLog2(E){return f(E,Math.log2)}}(0,n.e)("FlowGraphLog2Block",QE);class LE extends t.c{constructor(E){super(Z.e,Z.r,(E=>this._polymorphicLog10(E)),"FlowGraphLog10Block",E)}_polymorphicLog10(E){return f(E,Math.log10)}}(0,n.e)("FlowGraphLog10Block",LE);class DE extends t.c{constructor(E){super(Z.e,Z.r,(E=>this._polymorphicSqrt(E)),"FlowGraphSquareRootBlock",E)}_polymorphicSqrt(E){return f(E,Math.sqrt)}}(0,n.e)("FlowGraphSquareRootBlock",DE);class eE extends t.c{constructor(E){super(Z.e,Z.r,(E=>this._polymorphicCubeRoot(E)),"FlowGraphCubeRootBlock",E)}_polymorphicCubeRoot(E){return f(E,Math.cbrt)}}(0,n.e)("FlowGraphCubeRootBlock",eE);class sE extends I.e{constructor(E){super(Z.e,Z.r,Z.r,((E,H)=>this._polymorphicPow(E,H)),"FlowGraphPowerBlock",E)}_polymorphicPow(E,H){return o(E,H,Math.pow)}}(0,n.e)("FlowGraphPowerBlock",sE);class iE extends t.c{constructor(E){super((0,Z.M)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),(0,Z.M)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),(E=>"boolean"===typeof E?!E:"number"===typeof E?~E:new M.c(~E.value)),"FlowGraphBitwiseNotBlock",E)}}(0,n.e)("FlowGraphBitwiseNotBlock",iE);class pE extends I.e{constructor(E){super((0,Z.M)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),(0,Z.M)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),(0,Z.M)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),((E,H)=>{if("boolean"===typeof E&&"boolean"===typeof H)return E&&H;if("number"===typeof E&&"number"===typeof H)return E&H;if("object"===typeof E&&"object"===typeof H)return new M.c(E.value&H.value);throw new Error(`Cannot perform bitwise AND on ${E} and ${H}`)}),"FlowGraphBitwiseAndBlock",E)}}(0,n.e)("FlowGraphBitwiseAndBlock",pE);class fE extends I.e{constructor(E){super((0,Z.M)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),(0,Z.M)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),(0,Z.M)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),((E,H)=>{if("boolean"===typeof E&&"boolean"===typeof H)return E||H;if("number"===typeof E&&"number"===typeof H)return E|H;if("object"===typeof E&&"object"===typeof H)return new M.c(E.value|H.value);throw new Error(`Cannot perform bitwise OR on ${E} and ${H}`)}),"FlowGraphBitwiseOrBlock",E)}}(0,n.e)("FlowGraphBitwiseOrBlock",fE);class PE extends I.e{constructor(E){super((0,Z.M)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),(0,Z.M)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),(0,Z.M)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),((E,H)=>{if("boolean"===typeof E&&"boolean"===typeof H)return E!==H;if("number"===typeof E&&"number"===typeof H)return E^H;if("object"===typeof E&&"object"===typeof H)return new M.c(E.value^H.value);throw new Error(`Cannot perform bitwise XOR on ${E} and ${H}`)}),"FlowGraphBitwiseXorBlock",E)}}(0,n.e)("FlowGraphBitwiseXorBlock",PE);class jE extends I.e{constructor(E){super(Z.j,Z.j,Z.j,((E,H)=>new M.c(E.value<<H.value)),"FlowGraphBitwiseLeftShiftBlock",E)}}(0,n.e)("FlowGraphBitwiseLeftShiftBlock",jE);class XE extends I.e{constructor(E){super(Z.j,Z.j,Z.j,((E,H)=>new M.c(E.value>>H.value)),"FlowGraphBitwiseRightShiftBlock",E)}}(0,n.e)("FlowGraphBitwiseRightShiftBlock",XE);class WE extends t.c{constructor(E){super(Z.j,Z.j,(E=>new M.c(Math.clz32(E.value))),"FlowGraphLeadingZerosBlock",E)}}(0,n.e)("FlowGraphLeadingZerosBlock",WE);class UE extends t.c{constructor(E){super(Z.j,Z.j,(E=>new M.c(E.value?31-Math.clz32(E.value&-E.value):32)),"FlowGraphTrailingZerosBlock",E)}}(0,n.e)("FlowGraphTrailingZerosBlock",UE);class YE extends t.c{constructor(E){super(Z.j,Z.j,(E=>new M.c(function(E){let H=0;for(;E;)H+=1&E,E>>=1;return H}(E.value))),"FlowGraphOneBitsCounterBlock",E)}}(0,n.e)("FlowGraphOneBitsCounterBlock",YE)},15601:(E,H,d)=>{d.d(H,{e:()=>Z});var n=d(15610);class Z extends n.e{constructor(E,H,d,n,Z,I){super(d,I),this._operation=n,this._className=Z,this.a=this.registerDataInput("a",E),this.b=this.registerDataInput("b",H)}_doOperation(E){const H=this.a.getValue(E),d=this.b.getValue(E);return this._operation(H,d)}getClassName(){return this._className}}},15610:(E,H,d)=>{d.d(H,{e:()=>l});var n=d(14125),Z=d(14103);const I="cachedOperationValue",g="cachedExecutionId";class l extends n.c{constructor(E,H){super(H),this.value=this.registerDataOutput("value",E),this.isValid=this.registerDataOutput("isValid",Z.h)}_updateOutputs(E){const H=E._getExecutionVariable(this,g,-1),d=E._getExecutionVariable(this,I,null);if(void 0!==d&&null!==d&&H===E.executionId)this.isValid.setValue(!0,E),this.value.setValue(d,E);else try{const H=this._doOperation(E);if(void 0===H||null===H)return void this.isValid.setValue(!1,E);E._setExecutionVariable(this,I,H),E._setExecutionVariable(this,g,E.executionId),this.value.setValue(H,E),this.isValid.setValue(!0,E)}catch(n){this.isValid.setValue(!1,E)}}}},15618:(E,H,d)=>{d.d(H,{c:()=>Z});var n=d(15610);class Z extends n.e{constructor(E,H,d,n,Z){super(H,Z),this._operation=d,this._className=n,this.a=this.registerDataInput("a",E)}_doOperation(E){return this._operation(this.a.getValue(E))}getClassName(){return this._className}}}}]);