"use strict";(self["9s4i8ue3jq"]=self["9s4i8ue3jq"]||[]).push([[88],{16007:(a,c,o)=>{o.r(c),o.d(c,{FlowGraphAbsBlock:()=>h,FlowGraphAcosBlock:()=>ta,FlowGraphAcoshBlock:()=>La,FlowGraphAddBlock:()=>g,FlowGraphAsinBlock:()=>qa,FlowGraphAsinhBlock:()=>ja,FlowGraphAtan2Block:()=>pa,FlowGraphAtanBlock:()=>ia,FlowGraphAtanhBlock:()=>ea,FlowGraphBitwiseAndBlock:()=>wa,FlowGraphBitwiseLeftShiftBlock:()=>Ua,FlowGraphBitwiseNotBlock:()=>Ja,FlowGraphBitwiseOrBlock:()=>Za,FlowGraphBitwiseRightShiftBlock:()=>Sa,FlowGraphBitwiseXorBlock:()=>ha,FlowGraphCeilBlock:()=>x,FlowGraphClampBlock:()=>D,FlowGraphCosBlock:()=>oa,FlowGraphCoshBlock:()=>Ta,FlowGraphCubeRootBlock:()=>na,FlowGraphDegToRadBlock:()=>z,FlowGraphDivideBlock:()=>y,FlowGraphEBlock:()=>n,FlowGraphEqualityBlock:()=>V,FlowGraphExpBlock:()=>ga,FlowGraphFloorBlock:()=>r,FlowGraphFractionBlock:()=>d,FlowGraphGreaterThanBlock:()=>A,FlowGraphGreaterThanOrEqualBlock:()=>v,FlowGraphInfBlock:()=>J,FlowGraphIsInfinityBlock:()=>Q,FlowGraphIsNanBlock:()=>l,FlowGraphLeadingZerosBlock:()=>ra,FlowGraphLessThanBlock:()=>H,FlowGraphLessThanOrEqualBlock:()=>b,FlowGraphLog10Block:()=>ya,FlowGraphLog2Block:()=>Na,FlowGraphLogBlock:()=>Ma,FlowGraphMathInterpolationBlock:()=>ma,FlowGraphMaxBlock:()=>B,FlowGraphMinBlock:()=>O,FlowGraphModuloBlock:()=>F,FlowGraphMultiplyBlock:()=>N,FlowGraphNaNBlock:()=>w,FlowGraphNegationBlock:()=>X,FlowGraphOneBitsCounterBlock:()=>Ra,FlowGraphPiBlock:()=>f,FlowGraphPowerBlock:()=>fa,FlowGraphRadToDegBlock:()=>aa,FlowGraphRandomBlock:()=>k,FlowGraphRoundBlock:()=>R,FlowGraphSaturateBlock:()=>Y,FlowGraphSignBlock:()=>U,FlowGraphSinBlock:()=>ca,FlowGraphSinhBlock:()=>Ga,FlowGraphSquareRootBlock:()=>ka,FlowGraphSubtractBlock:()=>M,FlowGraphTanBlock:()=>sa,FlowGraphTanhBlock:()=>Ca,FlowGraphTrailingZerosBlock:()=>xa,FlowGraphTruncBlock:()=>S});var s=o(12776),q=o(14394),t=o(16016),i=o(16018);class p extends i.c{constructor(a,c,o,s){super(a,s),this._operation=c,this._className=o}_doOperation(a){return this._operation(a)}getClassName(){return this._className}}var G=o(12810),T=o(16025);class C extends i.c{constructor(a,c,o,s,q,t,i){super(s,i),this._operation=q,this._className=t,this.a=this.registerDataInput("a",a),this.b=this.registerDataInput("b",c),this.c=this.registerDataInput("c",o)}_doOperation(a){return this._operation(this.a.getValue(a),this.b.getValue(a),this.c.getValue(a))}getClassName(){return this._className}}var j=o(14386),L=o(14400),e=o(14431);class g extends t.e{constructor(a){super((0,q.G)(null===a||void 0===a?void 0:a.type),(0,q.G)(null===a||void 0===a?void 0:a.type),(0,q.G)(null===a||void 0===a?void 0:a.type),((a,c)=>this._polymorphicAdd(a,c)),"FlowGraphAddBlock",a)}_polymorphicAdd(a,c){const o=(0,e.g)(a),s=(0,e.g)(c);if((0,e.f)(o,s)||(0,e.e)(o,s)||(0,e.d)(o,s))return a.add(c);if("Quaternion"===o||"Vector4"===s)return new G.Vector4(a.x,a.y,a.z,a.w).addInPlace(c);if("Vector4"===o||"Quaternion"===s)return a.add(c);var q;if(null!==(q=this.config)&&void 0!==q&&q.preventIntegerFloatArithmetic&&typeof a!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,e.m)(a)+(0,e.m)(c)}}(0,s.d)("FlowGraphAddBlock",g);class M extends t.e{constructor(a){super((0,q.G)(null===a||void 0===a?void 0:a.type),(0,q.G)(null===a||void 0===a?void 0:a.type),(0,q.G)(null===a||void 0===a?void 0:a.type),((a,c)=>this._polymorphicSubtract(a,c)),"FlowGraphSubtractBlock",a)}_polymorphicSubtract(a,c){const o=(0,e.g)(a),s=(0,e.g)(c);if((0,e.f)(o,s)||(0,e.d)(o,s)||(0,e.e)(o,s))return a.vc(c);if("Quaternion"===o||"Vector4"===s)return new G.Vector4(a.x,a.y,a.z,a.w).Vj(c);if("Vector4"===o||"Quaternion"===s)return a.vc(c);var q;if(null!==(q=this.config)&&void 0!==q&&q.preventIntegerFloatArithmetic&&typeof a!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,e.m)(a)-(0,e.m)(c)}}(0,s.d)("FlowGraphSubtractBlock",M);class N extends t.e{constructor(a){super((0,q.G)(null===a||void 0===a?void 0:a.type),(0,q.G)(null===a||void 0===a?void 0:a.type),(0,q.G)(null===a||void 0===a?void 0:a.type),((a,c)=>this._polymorphicMultiply(a,c)),"FlowGraphMultiplyBlock",a)}_polymorphicMultiply(a,c){const o=(0,e.g)(a),s=(0,e.g)(c);if((0,e.f)(o,s)||(0,e.d)(o,s))return a.multiply(c);if("Quaternion"===o||"Vector4"===s)return new G.Vector4(a.x,a.y,a.z,a.w).multiplyInPlace(c);if("Vector4"===o||"Quaternion"===s)return a.multiply(c);if((0,e.e)(o,s)){var q;if(null!==(q=this.config)&&void 0!==q&&q.useMatrixPerComponent){const s=a.m;for(let a=0;a<s.length;a++)s[a]*=c.m[a];return"Matrix2D"===o?new L.c(s):"Matrix3D"===o?new L.e(s):G.Matrix.qo(s)}return c.multiply(a)}var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof a!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,e.m)(a)*(0,e.m)(c)}}(0,s.d)("FlowGraphMultiplyBlock",N);class y extends t.e{constructor(a){super((0,q.G)(null===a||void 0===a?void 0:a.type),(0,q.G)(null===a||void 0===a?void 0:a.type),(0,q.G)(null===a||void 0===a?void 0:a.type),((a,c)=>this._polymorphicDivide(a,c)),"FlowGraphDivideBlock",a)}_polymorphicDivide(a,c){const o=(0,e.g)(a),s=(0,e.g)(c);if((0,e.f)(o,s)||(0,e.d)(o,s))return a.divide(c);if("Quaternion"===o||"Quaternion"===s){const o=a.clone();return o.x/=c.x,o.y/=c.y,o.z/=c.z,o.w/=c.w,o}if("Quaternion"===o||"Vector4"===s)return new G.Vector4(a.x,a.y,a.z,a.w).divideInPlace(c);if("Vector4"===o||"Quaternion"===s)return a.divide(c);if((0,e.e)(o,s)){var q;if(null!==(q=this.config)&&void 0!==q&&q.useMatrixPerComponent){const s=a.m;for(let a=0;a<s.length;a++)s[a]/=c.m[a];return"Matrix2D"===o?new L.c(s):"Matrix3D"===o?new L.e(s):G.Matrix.qo(s)}return a.divide(c)}var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof a!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,e.m)(a)/(0,e.m)(c)}}(0,s.d)("FlowGraphDivideBlock",y);class k extends p{constructor(a){super(q.o,(a=>this._random(a)),"FlowGraphRandomBlock",a),this.min=this.registerDataInput("min",q.o,(null===a||void 0===a?void 0:a.min)??0),this.max=this.registerDataInput("max",q.o,(null===a||void 0===a?void 0:a.max)??1),null!==a&&void 0!==a&&a.seed&&(this._seed=a.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const a=1e4*Math.sin(this._seed++);return a-Math.floor(a)}return Math.random()}_random(a){const c=this.min.getValue(a),o=this.max.getValue(a);return this._getRandomValue()*(o-c)+c}}(0,s.d)("FlowGraphRandomBlock",k);class n extends p{constructor(a){super(q.o,(()=>Math.E),"FlowGraphEBlock",a)}}(0,s.d)("FlowGraphEBlock",n);class f extends p{constructor(a){super(q.o,(()=>Math.PI),"FlowGraphPIBlock",a)}}(0,s.d)("FlowGraphPIBlock",f);class J extends p{constructor(a){super(q.o,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",a)}}(0,s.d)("FlowGraphInfBlock",J);class w extends p{constructor(a){super(q.o,(()=>Number.NaN),"FlowGraphNaNBlock",a)}}function Z(a,c){switch((0,e.g)(a)){case"FlowGraphInteger":return new j.c(c(a.value));case"Vector2":return new G.Vector2(c(a.x),c(a.y));case"Hc":return new G.Hc(c(a.x),c(a.y),c(a.z));case"Vector4":return new G.Vector4(c(a.x),c(a.y),c(a.z),c(a.w));case"Quaternion":return new G.Quaternion(c(a.x),c(a.y),c(a.z),c(a.w));case"Matrix":return G.Matrix.qo(a.m.map(c));case"Matrix2D":return new L.c(a.m.map(c));case"Matrix3D":return new L.e(a.m.map(c));default:return c(a)}}(0,s.d)("FlowGraphNaNBlock",w);class h extends T.d{constructor(a){super(q.o,q.o,(a=>this._polymorphicAbs(a)),"FlowGraphAbsBlock",a)}_polymorphicAbs(a){return Z(a,Math.abs)}}(0,s.d)("FlowGraphAbsBlock",h);class U extends T.d{constructor(a){super(q.o,q.o,(a=>this._polymorphicSign(a)),"FlowGraphSignBlock",a)}_polymorphicSign(a){return Z(a,Math.sign)}}(0,s.d)("FlowGraphSignBlock",U);class S extends T.d{constructor(a){super(q.o,q.o,(a=>this._polymorphicTrunc(a)),"FlowGraphTruncBlock",a)}_polymorphicTrunc(a){return Z(a,Math.trunc)}}(0,s.d)("FlowGraphTruncBlock",S);class r extends T.d{constructor(a){super(q.o,q.o,(a=>this._polymorphicFloor(a)),"FlowGraphFloorBlock",a)}_polymorphicFloor(a){return Z(a,Math.floor)}}(0,s.d)("FlowGraphFloorBlock",r);class x extends T.d{constructor(a){super(q.c,q.c,(a=>this._polymorphicCeiling(a)),"FlowGraphCeilBlock",a)}_polymorphicCeiling(a){return Z(a,Math.ceil)}}(0,s.d)("FlowGraphCeilBlock",x);class R extends T.d{constructor(a){super(q.c,q.c,(a=>this._polymorphicRound(a)),"FlowGraphRoundBlock",a)}_polymorphicRound(a){return Z(a,(a=>{var c;return a<0&&null!==(c=this.config)&&void 0!==c&&c.roundHalfAwayFromZero?-Math.round(-a):Math.round(a)}))}}(0,s.d)("FlowGraphRoundBlock",R);class d extends T.d{constructor(a){super(q.c,q.c,(a=>this._polymorphicFraction(a)),"FlowGraphFractBlock",a)}_polymorphicFraction(a){return Z(a,(a=>a-Math.floor(a)))}}(0,s.d)("FlowGraphFractBlock",d);class X extends T.d{constructor(a){super(q.c,q.c,(a=>this._polymorphicNeg(a)),"FlowGraphNegationBlock",a)}_polymorphicNeg(a){return Z(a,(a=>-a))}}function W(a,c,o){switch((0,e.g)(a)){case"FlowGraphInteger":return new j.c(o(a.value,c.value));case"Vector2":return new G.Vector2(o(a.x,c.x),o(a.y,c.y));case"Hc":return new G.Hc(o(a.x,c.x),o(a.y,c.y),o(a.z,c.z));case"Vector4":return new G.Vector4(o(a.x,c.x),o(a.y,c.y),o(a.z,c.z),o(a.w,c.w));case"Quaternion":return new G.Quaternion(o(a.x,c.x),o(a.y,c.y),o(a.z,c.z),o(a.w,c.w));case"Matrix":return G.Matrix.qo(a.m.map(((a,s)=>o(a,c.m[s]))));case"Matrix2D":return new L.c(a.m.map(((a,s)=>o(a,c.m[s]))));case"Matrix3D":return new L.e(a.m.map(((a,s)=>o(a,c.m[s]))));default:return o((0,e.m)(a),(0,e.m)(c))}}(0,s.d)("FlowGraphNegationBlock",X);class F extends t.e{constructor(a){super(q.c,q.c,q.c,((a,c)=>this._polymorphicRemainder(a,c)),"FlowGraphModuloBlock",a)}_polymorphicRemainder(a,c){return W(a,c,((a,c)=>a%c))}}(0,s.d)("FlowGraphModuloBlock",F);class O extends t.e{constructor(a){super(q.c,q.c,q.c,((a,c)=>this._polymorphicMin(a,c)),"FlowGraphMinBlock",a)}_polymorphicMin(a,c){return W(a,c,Math.min)}}(0,s.d)("FlowGraphMinBlock",O);class B extends t.e{constructor(a){super(q.c,q.c,q.c,((a,c)=>this._polymorphicMax(a,c)),"FlowGraphMaxBlock",a)}_polymorphicMax(a,c){return W(a,c,Math.max)}}function u(a,c,o){return Math.min(Math.max(a,Math.min(c,o)),Math.max(c,o))}function K(a,c,o,s){switch((0,e.g)(a)){case"FlowGraphInteger":return new j.c(s(a.value,c.value,o.value));case"Vector2":return new G.Vector2(s(a.x,c.x,o.x),s(a.y,c.y,o.y));case"Hc":return new G.Hc(s(a.x,c.x,o.x),s(a.y,c.y,o.y),s(a.z,c.z,o.z));case"Vector4":return new G.Vector4(s(a.x,c.x,o.x),s(a.y,c.y,o.y),s(a.z,c.z,o.z),s(a.w,c.w,o.w));case"Quaternion":return new G.Quaternion(s(a.x,c.x,o.x),s(a.y,c.y,o.y),s(a.z,c.z,o.z),s(a.w,c.w,o.w));case"Matrix":return G.Matrix.qo(a.m.map(((a,q)=>s(a,c.m[q],o.m[q]))));case"Matrix2D":return new L.c(a.m.map(((a,q)=>s(a,c.m[q],o.m[q]))));case"Matrix3D":return new L.e(a.m.map(((a,q)=>s(a,c.m[q],o.m[q]))));default:return s((0,e.m)(a),(0,e.m)(c),(0,e.m)(o))}}(0,s.d)("FlowGraphMaxBlock",B);class D extends C{constructor(a){super(q.c,q.c,q.c,q.c,((a,c,o)=>this._polymorphicClamp(a,c,o)),"FlowGraphClampBlock",a)}_polymorphicClamp(a,c,o){return K(a,c,o,u)}}function I(a){return Math.min(Math.max(a,0),1)}(0,s.d)("FlowGraphClampBlock",D);class Y extends T.d{constructor(a){super(q.c,q.c,(a=>this._polymorphicSaturate(a)),"FlowGraphSaturateBlock",a)}_polymorphicSaturate(a){return Z(a,I)}}function P(a,c,o){return(1-o)*a+o*c}(0,s.d)("FlowGraphSaturateBlock",Y);class ma extends C{constructor(a){super(q.c,q.c,q.c,q.c,((a,c,o)=>this._polymorphicInterpolate(a,c,o)),"FlowGraphMathInterpolationBlock",a)}_polymorphicInterpolate(a,c,o){return K(a,c,o,P)}}(0,s.d)("FlowGraphMathInterpolationBlock",ma);class V extends t.e{constructor(a){super(q.c,q.c,q.f,((a,c)=>this._polymorphicEq(a,c)),"FlowGraphEqualityBlock",a)}_polymorphicEq(a,c){const o=(0,e.g)(a),s=(0,e.g)(c);return typeof a===typeof c&&((0,e.f)(o,s)||(0,e.e)(o,s)||(0,e.d)(o,s)?a.equals(c):a===c)}}function E(a,c,o){if((0,e.n)(a)&&(0,e.n)(c))return o((0,e.m)(a),(0,e.m)(c));throw new Error(`Cannot compare ${a} and ${c}`)}(0,s.d)("FlowGraphEqualityBlock",V);class H extends t.e{constructor(a){super(q.c,q.c,q.f,((a,c)=>this._polymorphicLessThan(a,c)),"FlowGraphLessThanBlock",a)}_polymorphicLessThan(a,c){return E(a,c,((a,c)=>a<c))}}(0,s.d)("FlowGraphLessThanBlock",H);class b extends t.e{constructor(a){super(q.c,q.c,q.f,((a,c)=>this._polymorphicLessThanOrEqual(a,c)),"FlowGraphLessThanOrEqualBlock",a)}_polymorphicLessThanOrEqual(a,c){return E(a,c,((a,c)=>a<=c))}}(0,s.d)("FlowGraphLessThanOrEqualBlock",b);class A extends t.e{constructor(a){super(q.c,q.c,q.f,((a,c)=>this._polymorphicGreaterThan(a,c)),"FlowGraphGreaterThanBlock",a)}_polymorphicGreaterThan(a,c){return E(a,c,((a,c)=>a>c))}}(0,s.d)("FlowGraphGreaterThanBlock",A);class v extends t.e{constructor(a){super(q.c,q.c,q.f,((a,c)=>this._polymorphicGreaterThanOrEqual(a,c)),"FlowGraphGreaterThanOrEqualBlock",a)}_polymorphicGreaterThanOrEqual(a,c){return E(a,c,((a,c)=>a>=c))}}(0,s.d)("FlowGraphGreaterThanOrEqualBlock",v);class l extends T.d{constructor(a){super(q.c,q.f,(a=>this._polymorphicIsNan(a)),"FlowGraphIsNaNBlock",a)}_polymorphicIsNan(a){if((0,e.n)(a,!0))return isNaN((0,e.m)(a));throw new Error(`Cannot get NaN of ${a}`)}}(0,s.d)("FlowGraphIsNaNBlock",l);class Q extends T.d{constructor(a){super(q.c,q.f,(a=>this._polymorphicIsInf(a)),"FlowGraphIsInfBlock",a)}_polymorphicIsInf(a){if((0,e.n)(a))return!isFinite((0,e.m)(a));throw new Error(`Cannot get isInf of ${a}`)}}(0,s.d)("FlowGraphIsInfBlock",Q);class z extends T.d{constructor(a){super(q.c,q.c,(a=>this._polymorphicDegToRad(a)),"FlowGraphDegToRadBlock",a)}_degToRad(a){return a*Math.PI/180}_polymorphicDegToRad(a){return Z(a,this._degToRad)}}(0,s.d)("FlowGraphDegToRadBlock",z);class aa extends T.d{constructor(a){super(q.c,q.c,(a=>this._polymorphicRadToDeg(a)),"FlowGraphRadToDegBlock",a)}_radToDeg(a){return 180*a/Math.PI}_polymorphicRadToDeg(a){return Z(a,this._radToDeg)}}(0,s.d)("FlowGraphRadToDegBlock",aa);class ca extends T.d{constructor(a){super(q.o,q.o,(a=>this._polymorphicSin(a)),"FlowGraphSinBlock",a)}_polymorphicSin(a){return Z(a,Math.sin)}}class oa extends T.d{constructor(a){super(q.o,q.o,(a=>this._polymorphicCos(a)),"FlowGraphCosBlock",a)}_polymorphicCos(a){return Z(a,Math.cos)}}class sa extends T.d{constructor(a){super(q.o,q.o,(a=>this._polymorphicTan(a)),"FlowGraphTanBlock",a)}_polymorphicTan(a){return Z(a,Math.tan)}}class qa extends T.d{constructor(a){super(q.o,q.o,(a=>this._polymorphicAsin(a)),"FlowGraphASinBlock",a)}_polymorphicAsin(a){return Z(a,Math.asin)}}(0,s.d)("FlowGraphASinBlock",qa);class ta extends T.d{constructor(a){super(q.o,q.o,(a=>this._polymorphicAcos(a)),"FlowGraphACosBlock",a)}_polymorphicAcos(a){return Z(a,Math.acos)}}(0,s.d)("FlowGraphACosBlock",ta);class ia extends T.d{constructor(a){super(q.o,q.o,(a=>this._polymorphicAtan(a)),"FlowGraphATanBlock",a)}_polymorphicAtan(a){return Z(a,Math.atan)}}(0,s.d)("FlowGraphATanBlock",ia);class pa extends t.e{constructor(a){super(q.c,q.c,q.c,((a,c)=>this._polymorphicAtan2(a,c)),"FlowGraphATan2Block",a)}_polymorphicAtan2(a,c){return W(a,c,Math.atan2)}}(0,s.d)("FlowGraphATan2Block",pa);class Ga extends T.d{constructor(a){super(q.c,q.c,(a=>this._polymorphicSinh(a)),"FlowGraphSinhBlock",a)}_polymorphicSinh(a){return Z(a,Math.sinh)}}(0,s.d)("FlowGraphSinhBlock",Ga);class Ta extends T.d{constructor(a){super(q.c,q.c,(a=>this._polymorphicCosh(a)),"FlowGraphCoshBlock",a)}_polymorphicCosh(a){return Z(a,Math.cosh)}}(0,s.d)("FlowGraphCoshBlock",Ta);class Ca extends T.d{constructor(a){super(q.c,q.c,(a=>this._polymorphicTanh(a)),"FlowGraphTanhBlock",a)}_polymorphicTanh(a){return Z(a,Math.tanh)}}(0,s.d)("FlowGraphTanhBlock",Ca);class ja extends T.d{constructor(a){super(q.c,q.o,(a=>this._polymorphicAsinh(a)),"FlowGraphASinhBlock",a)}_polymorphicAsinh(a){return Z(a,Math.asinh)}}(0,s.d)("FlowGraphASinhBlock",ja);class La extends T.d{constructor(a){super(q.c,q.o,(a=>this._polymorphicAcosh(a)),"FlowGraphACoshBlock",a)}_polymorphicAcosh(a){return Z(a,Math.acosh)}}(0,s.d)("FlowGraphACoshBlock",La);class ea extends T.d{constructor(a){super(q.c,q.o,(a=>this._polymorphicAtanh(a)),"FlowGraphATanhBlock",a)}_polymorphicAtanh(a){return Z(a,Math.atanh)}}(0,s.d)("FlowGraphATanhBlock",ea);class ga extends T.d{constructor(a){super(q.c,q.o,(a=>this._polymorphicExp(a)),"FlowGraphExponentialBlock",a)}_polymorphicExp(a){return Z(a,Math.exp)}}(0,s.d)("FlowGraphExponentialBlock",ga);class Ma extends T.d{constructor(a){super(q.c,q.o,(a=>this._polymorphicLog(a)),"FlowGraphLogBlock",a)}_polymorphicLog(a){return Z(a,Math.log)}}(0,s.d)("FlowGraphLogBlock",Ma);class Na extends T.d{constructor(a){super(q.c,q.o,(a=>this._polymorphicLog2(a)),"FlowGraphLog2Block",a)}_polymorphicLog2(a){return Z(a,Math.log2)}}(0,s.d)("FlowGraphLog2Block",Na);class ya extends T.d{constructor(a){super(q.c,q.o,(a=>this._polymorphicLog10(a)),"FlowGraphLog10Block",a)}_polymorphicLog10(a){return Z(a,Math.log10)}}(0,s.d)("FlowGraphLog10Block",ya);class ka extends T.d{constructor(a){super(q.c,q.o,(a=>this._polymorphicSqrt(a)),"FlowGraphSquareRootBlock",a)}_polymorphicSqrt(a){return Z(a,Math.sqrt)}}(0,s.d)("FlowGraphSquareRootBlock",ka);class na extends T.d{constructor(a){super(q.c,q.o,(a=>this._polymorphicCubeRoot(a)),"FlowGraphCubeRootBlock",a)}_polymorphicCubeRoot(a){return Z(a,Math.cbrt)}}(0,s.d)("FlowGraphCubeRootBlock",na);class fa extends t.e{constructor(a){super(q.c,q.o,q.o,((a,c)=>this._polymorphicPow(a,c)),"FlowGraphPowerBlock",a)}_polymorphicPow(a,c){return W(a,c,Math.pow)}}(0,s.d)("FlowGraphPowerBlock",fa);class Ja extends T.d{constructor(a){super((0,q.G)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),(0,q.G)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),(a=>"boolean"===typeof a?!a:"number"===typeof a?~a:new j.c(~a.value)),"FlowGraphBitwiseNotBlock",a)}}(0,s.d)("FlowGraphBitwiseNotBlock",Ja);class wa extends t.e{constructor(a){super((0,q.G)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),(0,q.G)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),(0,q.G)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),((a,c)=>{if("boolean"===typeof a&&"boolean"===typeof c)return a&&c;if("number"===typeof a&&"number"===typeof c)return a&c;if("object"===typeof a&&"object"===typeof c)return new j.c(a.value&c.value);throw new Error(`Cannot perform bitwise AND on ${a} and ${c}`)}),"FlowGraphBitwiseAndBlock",a)}}(0,s.d)("FlowGraphBitwiseAndBlock",wa);class Za extends t.e{constructor(a){super((0,q.G)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),(0,q.G)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),(0,q.G)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),((a,c)=>{if("boolean"===typeof a&&"boolean"===typeof c)return a||c;if("number"===typeof a&&"number"===typeof c)return a|c;if("object"===typeof a&&"object"===typeof c)return new j.c(a.value|c.value);throw new Error(`Cannot perform bitwise OR on ${a} and ${c}`)}),"FlowGraphBitwiseOrBlock",a)}}(0,s.d)("FlowGraphBitwiseOrBlock",Za);class ha extends t.e{constructor(a){super((0,q.G)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),(0,q.G)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),(0,q.G)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),((a,c)=>{if("boolean"===typeof a&&"boolean"===typeof c)return a!==c;if("number"===typeof a&&"number"===typeof c)return a^c;if("object"===typeof a&&"object"===typeof c)return new j.c(a.value^c.value);throw new Error(`Cannot perform bitwise XOR on ${a} and ${c}`)}),"FlowGraphBitwiseXorBlock",a)}}(0,s.d)("FlowGraphBitwiseXorBlock",ha);class Ua extends t.e{constructor(a){super(q.g,q.g,q.g,((a,c)=>new j.c(a.value<<c.value)),"FlowGraphBitwiseLeftShiftBlock",a)}}(0,s.d)("FlowGraphBitwiseLeftShiftBlock",Ua);class Sa extends t.e{constructor(a){super(q.g,q.g,q.g,((a,c)=>new j.c(a.value>>c.value)),"FlowGraphBitwiseRightShiftBlock",a)}}(0,s.d)("FlowGraphBitwiseRightShiftBlock",Sa);class ra extends T.d{constructor(a){super(q.g,q.g,(a=>new j.c(Math.clz32(a.value))),"FlowGraphLeadingZerosBlock",a)}}(0,s.d)("FlowGraphLeadingZerosBlock",ra);class xa extends T.d{constructor(a){super(q.g,q.g,(a=>new j.c(a.value?31-Math.clz32(a.value&-a.value):32)),"FlowGraphTrailingZerosBlock",a)}}(0,s.d)("FlowGraphTrailingZerosBlock",xa);class Ra extends T.d{constructor(a){super(q.g,q.g,(a=>new j.c(function(a){let c=0;for(;a;)c+=1&a,a>>=1;return c}(a.value))),"FlowGraphOneBitsCounterBlock",a)}}(0,s.d)("FlowGraphOneBitsCounterBlock",Ra)},16016:(a,c,o)=>{o.d(c,{e:()=>q});var s=o(16018);class q extends s.c{constructor(a,c,o,s,q,t){super(o,t),this._operation=s,this._className=q,this.a=this.registerDataInput("a",a),this.b=this.registerDataInput("b",c)}_doOperation(a){const c=this.a.getValue(a),o=this.b.getValue(a);return this._operation(c,o)}getClassName(){return this._className}}},16018:(a,c,o)=>{o.d(c,{c:()=>p});var s=o(14423),q=o(14394);const t="cachedOperationValue",i="cachedExecutionId";class p extends s.e{constructor(a,c){super(c),this.value=this.registerDataOutput("value",a),this.isValid=this.registerDataOutput("isValid",q.f)}_updateOutputs(a){const c=a._getExecutionVariable(this,i,-1),o=a._getExecutionVariable(this,t,null);if(void 0!==o&&null!==o&&c===a.executionId)this.isValid.setValue(!0,a),this.value.setValue(o,a);else try{const c=this._doOperation(a);if(void 0===c||null===c)return void this.isValid.setValue(!1,a);a._setExecutionVariable(this,t,c),a._setExecutionVariable(this,i,a.executionId),this.value.setValue(c,a),this.isValid.setValue(!0,a)}catch(s){this.isValid.setValue(!1,a)}}}},16025:(a,c,o)=>{o.d(c,{d:()=>q});var s=o(16018);class q extends s.c{constructor(a,c,o,s,q){super(c,q),this._operation=o,this._className=s,this.a=this.registerDataInput("a",a)}_doOperation(a){return this._operation(this.a.getValue(a))}getClassName(){return this._className}}}}]);