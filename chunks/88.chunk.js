"use strict";(self.kdlk57exiqh=self.kdlk57exiqh||[]).push([[88],{15362:(i,x,e)=>{e.r(x),e.d(x,{FlowGraphAbsBlock:()=>O,FlowGraphAcosBlock:()=>ai,FlowGraphAcoshBlock:()=>Ki,FlowGraphAddBlock:()=>o,FlowGraphAsinBlock:()=>Ei,FlowGraphAsinhBlock:()=>Ai,FlowGraphAtan2Block:()=>Ji,FlowGraphAtanBlock:()=>Yi,FlowGraphAtanhBlock:()=>Li,FlowGraphBitwiseAndBlock:()=>fi,FlowGraphBitwiseLeftShiftBlock:()=>li,FlowGraphBitwiseNotBlock:()=>Si,FlowGraphBitwiseOrBlock:()=>wi,FlowGraphBitwiseRightShiftBlock:()=>Zi,FlowGraphBitwiseXorBlock:()=>Oi,FlowGraphCeilBlock:()=>k,FlowGraphClampBlock:()=>U,FlowGraphCosBlock:()=>ei,FlowGraphCoshBlock:()=>bi,FlowGraphCubeRootBlock:()=>ti,FlowGraphDegToRadBlock:()=>s,FlowGraphDivideBlock:()=>T,FlowGraphEBlock:()=>t,FlowGraphEqualityBlock:()=>y,FlowGraphExpBlock:()=>oi,FlowGraphFloorBlock:()=>B,FlowGraphFractionBlock:()=>mi,FlowGraphGreaterThanBlock:()=>q,FlowGraphGreaterThanOrEqualBlock:()=>W,FlowGraphInfBlock:()=>S,FlowGraphIsInfinityBlock:()=>v,FlowGraphIsNanBlock:()=>G,FlowGraphLeadingZerosBlock:()=>Bi,FlowGraphLessThanBlock:()=>c,FlowGraphLessThanOrEqualBlock:()=>P,FlowGraphLog10Block:()=>Ti,FlowGraphLog2Block:()=>zi,FlowGraphLogBlock:()=>Mi,FlowGraphMathInterpolationBlock:()=>R,FlowGraphMaxBlock:()=>d,FlowGraphMinBlock:()=>I,FlowGraphModuloBlock:()=>n,FlowGraphMultiplyBlock:()=>z,FlowGraphNaNBlock:()=>f,FlowGraphNegationBlock:()=>X,FlowGraphOneBitsCounterBlock:()=>Ni,FlowGraphPiBlock:()=>V,FlowGraphPowerBlock:()=>Vi,FlowGraphRadToDegBlock:()=>ii,FlowGraphRandomBlock:()=>Q,FlowGraphRoundBlock:()=>N,FlowGraphSaturateBlock:()=>h,FlowGraphSignBlock:()=>l,FlowGraphSinBlock:()=>xi,FlowGraphSinhBlock:()=>ui,FlowGraphSquareRootBlock:()=>Qi,FlowGraphSubtractBlock:()=>M,FlowGraphTanBlock:()=>ji,FlowGraphTanhBlock:()=>gi,FlowGraphTrailingZerosBlock:()=>ki,FlowGraphTruncBlock:()=>Z});var j=e(12204),E=e(13874),a=e(15364),Y=e(15373);class J extends Y.c{constructor(i,x,e,j){super(i,j),this._operation=x,this._className=e}_doOperation(i){return this._operation(i)}getClassName(){return this._className}}var u=e(12250),b=e(15375);class g extends Y.c{constructor(i,x,e,j,E,a,Y){super(j,Y),this._operation=E,this._className=a,this.a=this.registerDataInput("a",i),this.b=this.registerDataInput("b",x),this.c=this.registerDataInput("c",e)}_doOperation(i){return this._operation(this.a.getValue(i),this.b.getValue(i),this.c.getValue(i))}getClassName(){return this._className}}var A=e(13868),K=e(13877),L=e(13912);class o extends a.d{constructor(i){super((0,E.N)(null===i||void 0===i?void 0:i.type),(0,E.N)(null===i||void 0===i?void 0:i.type),(0,E.N)(null===i||void 0===i?void 0:i.type),((i,x)=>this._polymorphicAdd(i,x)),"FlowGraphAddBlock",i)}_polymorphicAdd(i,x){const e=(0,L.l)(i),j=(0,L.l)(x);if((0,L.k)(e,j)||(0,L.i)(e,j)||(0,L.e)(e,j))return i.add(x);if("Quaternion"===e||"Vector4"===j)return new u.Vector4(i.x,i.y,i.z,i.w).addInPlace(x);if("Vector4"===e||"Quaternion"===j)return i.add(x);var E;if(null!==(E=this.config)&&void 0!==E&&E.preventIntegerFloatArithmetic&&typeof i!==typeof x)throw new Error("Cannot add different types of numbers.");return(0,L.r)(i)+(0,L.r)(x)}}(0,j.f)("FlowGraphAddBlock",o);class M extends a.d{constructor(i){super((0,E.N)(null===i||void 0===i?void 0:i.type),(0,E.N)(null===i||void 0===i?void 0:i.type),(0,E.N)(null===i||void 0===i?void 0:i.type),((i,x)=>this._polymorphicSubtract(i,x)),"FlowGraphSubtractBlock",i)}_polymorphicSubtract(i,x){const e=(0,L.l)(i),j=(0,L.l)(x);if((0,L.k)(e,j)||(0,L.e)(e,j)||(0,L.i)(e,j))return i.Cx(x);if("Quaternion"===e||"Vector4"===j)return new u.Vector4(i.x,i.y,i.z,i.w).jK(x);if("Vector4"===e||"Quaternion"===j)return i.Cx(x);var E;if(null!==(E=this.config)&&void 0!==E&&E.preventIntegerFloatArithmetic&&typeof i!==typeof x)throw new Error("Cannot add different types of numbers.");return(0,L.r)(i)-(0,L.r)(x)}}(0,j.f)("FlowGraphSubtractBlock",M);class z extends a.d{constructor(i){super((0,E.N)(null===i||void 0===i?void 0:i.type),(0,E.N)(null===i||void 0===i?void 0:i.type),(0,E.N)(null===i||void 0===i?void 0:i.type),((i,x)=>this._polymorphicMultiply(i,x)),"FlowGraphMultiplyBlock",i)}_polymorphicMultiply(i,x){const e=(0,L.l)(i),j=(0,L.l)(x);if((0,L.k)(e,j)||(0,L.e)(e,j))return i.multiply(x);if("Quaternion"===e||"Vector4"===j)return new u.Vector4(i.x,i.y,i.z,i.w).multiplyInPlace(x);if("Vector4"===e||"Quaternion"===j)return i.multiply(x);if((0,L.i)(e,j)){var E;if(null!==(E=this.config)&&void 0!==E&&E.useMatrixPerComponent){const j=i.m;for(let i=0;i<j.length;i++)j[i]*=x.m[i];return"Matrix2D"===e?new K.e(j):"Matrix3D"===e?new K.f(j):u.Matrix.zJ(j)}return x.multiply(i)}var a;if(null!==(a=this.config)&&void 0!==a&&a.preventIntegerFloatArithmetic&&typeof i!==typeof x)throw new Error("Cannot add different types of numbers.");return(0,L.r)(i)*(0,L.r)(x)}}(0,j.f)("FlowGraphMultiplyBlock",z);class T extends a.d{constructor(i){super((0,E.N)(null===i||void 0===i?void 0:i.type),(0,E.N)(null===i||void 0===i?void 0:i.type),(0,E.N)(null===i||void 0===i?void 0:i.type),((i,x)=>this._polymorphicDivide(i,x)),"FlowGraphDivideBlock",i)}_polymorphicDivide(i,x){const e=(0,L.l)(i),j=(0,L.l)(x);if((0,L.k)(e,j)||(0,L.e)(e,j))return i.divide(x);if("Quaternion"===e||"Quaternion"===j){const e=i.clone();return e.x/=x.x,e.y/=x.y,e.z/=x.z,e.w/=x.w,e}if("Quaternion"===e||"Vector4"===j)return new u.Vector4(i.x,i.y,i.z,i.w).divideInPlace(x);if("Vector4"===e||"Quaternion"===j)return i.divide(x);if((0,L.i)(e,j)){var E;if(null!==(E=this.config)&&void 0!==E&&E.useMatrixPerComponent){const j=i.m;for(let i=0;i<j.length;i++)j[i]/=x.m[i];return"Matrix2D"===e?new K.e(j):"Matrix3D"===e?new K.f(j):u.Matrix.zJ(j)}return i.divide(x)}var a;if(null!==(a=this.config)&&void 0!==a&&a.preventIntegerFloatArithmetic&&typeof i!==typeof x)throw new Error("Cannot add different types of numbers.");return(0,L.r)(i)/(0,L.r)(x)}}(0,j.f)("FlowGraphDivideBlock",T);class Q extends J{constructor(i){super(E.q,(i=>this._random(i)),"FlowGraphRandomBlock",i),this.min=this.registerDataInput("min",E.q,(null===i||void 0===i?void 0:i.min)??0),this.max=this.registerDataInput("max",E.q,(null===i||void 0===i?void 0:i.max)??1),null!==i&&void 0!==i&&i.seed&&(this._seed=i.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const i=1e4*Math.sin(this._seed++);return i-Math.floor(i)}return Math.random()}_random(i){const x=this.min.getValue(i),e=this.max.getValue(i);return this._getRandomValue()*(e-x)+x}}(0,j.f)("FlowGraphRandomBlock",Q);class t extends J{constructor(i){super(E.q,(()=>Math.E),"FlowGraphEBlock",i)}}(0,j.f)("FlowGraphEBlock",t);class V extends J{constructor(i){super(E.q,(()=>Math.PI),"FlowGraphPIBlock",i)}}(0,j.f)("FlowGraphPIBlock",V);class S extends J{constructor(i){super(E.q,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",i)}}(0,j.f)("FlowGraphInfBlock",S);class f extends J{constructor(i){super(E.q,(()=>Number.NaN),"FlowGraphNaNBlock",i)}}function w(i,x){switch((0,L.l)(i)){case"FlowGraphInteger":return new A.d(x(i.value));case"Vector2":return new u.Vector2(x(i.x),x(i.y));case"KJ":return new u.KJ(x(i.x),x(i.y),x(i.z));case"Vector4":return new u.Vector4(x(i.x),x(i.y),x(i.z),x(i.w));case"Quaternion":return new u.Quaternion(x(i.x),x(i.y),x(i.z),x(i.w));case"Matrix":return u.Matrix.zJ(i.m.map(x));case"Matrix2D":return new K.e(i.m.map(x));case"Matrix3D":return new K.f(i.m.map(x));default:return x(i)}}(0,j.f)("FlowGraphNaNBlock",f);class O extends b.e{constructor(i){super(E.q,E.q,(i=>this._polymorphicAbs(i)),"FlowGraphAbsBlock",i)}_polymorphicAbs(i){return w(i,Math.abs)}}(0,j.f)("FlowGraphAbsBlock",O);class l extends b.e{constructor(i){super(E.q,E.q,(i=>this._polymorphicSign(i)),"FlowGraphSignBlock",i)}_polymorphicSign(i){return w(i,Math.sign)}}(0,j.f)("FlowGraphSignBlock",l);class Z extends b.e{constructor(i){super(E.q,E.q,(i=>this._polymorphicTrunc(i)),"FlowGraphTruncBlock",i)}_polymorphicTrunc(i){return w(i,Math.trunc)}}(0,j.f)("FlowGraphTruncBlock",Z);class B extends b.e{constructor(i){super(E.q,E.q,(i=>this._polymorphicFloor(i)),"FlowGraphFloorBlock",i)}_polymorphicFloor(i){return w(i,Math.floor)}}(0,j.f)("FlowGraphFloorBlock",B);class k extends b.e{constructor(i){super(E.c,E.c,(i=>this._polymorphicCeiling(i)),"FlowGraphCeilBlock",i)}_polymorphicCeiling(i){return w(i,Math.ceil)}}(0,j.f)("FlowGraphCeilBlock",k);class N extends b.e{constructor(i){super(E.c,E.c,(i=>this._polymorphicRound(i)),"FlowGraphRoundBlock",i)}_polymorphicRound(i){return w(i,(i=>{var x;return i<0&&null!==(x=this.config)&&void 0!==x&&x.roundHalfAwayFromZero?-Math.round(-i):Math.round(i)}))}}(0,j.f)("FlowGraphRoundBlock",N);class mi extends b.e{constructor(i){super(E.c,E.c,(i=>this._polymorphicFraction(i)),"FlowGraphFractBlock",i)}_polymorphicFraction(i){return w(i,(i=>i-Math.floor(i)))}}(0,j.f)("FlowGraphFractBlock",mi);class X extends b.e{constructor(i){super(E.c,E.c,(i=>this._polymorphicNeg(i)),"FlowGraphNegationBlock",i)}_polymorphicNeg(i){return w(i,(i=>-i))}}function C(i,x,e){switch((0,L.l)(i)){case"FlowGraphInteger":return new A.d(e(i.value,x.value));case"Vector2":return new u.Vector2(e(i.x,x.x),e(i.y,x.y));case"KJ":return new u.KJ(e(i.x,x.x),e(i.y,x.y),e(i.z,x.z));case"Vector4":return new u.Vector4(e(i.x,x.x),e(i.y,x.y),e(i.z,x.z),e(i.w,x.w));case"Quaternion":return new u.Quaternion(e(i.x,x.x),e(i.y,x.y),e(i.z,x.z),e(i.w,x.w));case"Matrix":return u.Matrix.zJ(i.m.map(((i,j)=>e(i,x.m[j]))));case"Matrix2D":return new K.e(i.m.map(((i,j)=>e(i,x.m[j]))));case"Matrix3D":return new K.f(i.m.map(((i,j)=>e(i,x.m[j]))));default:return e((0,L.r)(i),(0,L.r)(x))}}(0,j.f)("FlowGraphNegationBlock",X);class n extends a.d{constructor(i){super(E.c,E.c,E.c,((i,x)=>this._polymorphicRemainder(i,x)),"FlowGraphModuloBlock",i)}_polymorphicRemainder(i,x){return C(i,x,((i,x)=>i%x))}}(0,j.f)("FlowGraphModuloBlock",n);class I extends a.d{constructor(i){super(E.c,E.c,E.c,((i,x)=>this._polymorphicMin(i,x)),"FlowGraphMinBlock",i)}_polymorphicMin(i,x){return C(i,x,Math.min)}}(0,j.f)("FlowGraphMinBlock",I);class d extends a.d{constructor(i){super(E.c,E.c,E.c,((i,x)=>this._polymorphicMax(i,x)),"FlowGraphMaxBlock",i)}_polymorphicMax(i,x){return C(i,x,Math.max)}}function p(i,x,e){return Math.min(Math.max(i,Math.min(x,e)),Math.max(x,e))}function H(i,x,e,j){switch((0,L.l)(i)){case"FlowGraphInteger":return new A.d(j(i.value,x.value,e.value));case"Vector2":return new u.Vector2(j(i.x,x.x,e.x),j(i.y,x.y,e.y));case"KJ":return new u.KJ(j(i.x,x.x,e.x),j(i.y,x.y,e.y),j(i.z,x.z,e.z));case"Vector4":return new u.Vector4(j(i.x,x.x,e.x),j(i.y,x.y,e.y),j(i.z,x.z,e.z),j(i.w,x.w,e.w));case"Quaternion":return new u.Quaternion(j(i.x,x.x,e.x),j(i.y,x.y,e.y),j(i.z,x.z,e.z),j(i.w,x.w,e.w));case"Matrix":return u.Matrix.zJ(i.m.map(((i,E)=>j(i,x.m[E],e.m[E]))));case"Matrix2D":return new K.e(i.m.map(((i,E)=>j(i,x.m[E],e.m[E]))));case"Matrix3D":return new K.f(i.m.map(((i,E)=>j(i,x.m[E],e.m[E]))));default:return j((0,L.r)(i),(0,L.r)(x),(0,L.r)(e))}}(0,j.f)("FlowGraphMaxBlock",d);class U extends g{constructor(i){super(E.c,E.c,E.c,E.c,((i,x,e)=>this._polymorphicClamp(i,x,e)),"FlowGraphClampBlock",i)}_polymorphicClamp(i,x,e){return H(i,x,e,p)}}function D(i){return Math.min(Math.max(i,0),1)}(0,j.f)("FlowGraphClampBlock",U);class h extends b.e{constructor(i){super(E.c,E.c,(i=>this._polymorphicSaturate(i)),"FlowGraphSaturateBlock",i)}_polymorphicSaturate(i){return w(i,D)}}function F(i,x,e){return(1-e)*i+e*x}(0,j.f)("FlowGraphSaturateBlock",h);class R extends g{constructor(i){super(E.c,E.c,E.c,E.c,((i,x,e)=>this._polymorphicInterpolate(i,x,e)),"FlowGraphMathInterpolationBlock",i)}_polymorphicInterpolate(i,x,e){return H(i,x,e,F)}}(0,j.f)("FlowGraphMathInterpolationBlock",R);class y extends a.d{constructor(i){super(E.c,E.c,E.g,((i,x)=>this._polymorphicEq(i,x)),"FlowGraphEqualityBlock",i)}_polymorphicEq(i,x){const e=(0,L.l)(i),j=(0,L.l)(x);return typeof i===typeof x&&((0,L.k)(e,j)||(0,L.i)(e,j)||(0,L.e)(e,j)?i.equals(x):i===x)}}function r(i,x,e){if((0,L.s)(i)&&(0,L.s)(x))return e((0,L.r)(i),(0,L.r)(x));throw new Error(`Cannot compare ${i} and ${x}`)}(0,j.f)("FlowGraphEqualityBlock",y);class c extends a.d{constructor(i){super(E.c,E.c,E.g,((i,x)=>this._polymorphicLessThan(i,x)),"FlowGraphLessThanBlock",i)}_polymorphicLessThan(i,x){return r(i,x,((i,x)=>i<x))}}(0,j.f)("FlowGraphLessThanBlock",c);class P extends a.d{constructor(i){super(E.c,E.c,E.g,((i,x)=>this._polymorphicLessThanOrEqual(i,x)),"FlowGraphLessThanOrEqualBlock",i)}_polymorphicLessThanOrEqual(i,x){return r(i,x,((i,x)=>i<=x))}}(0,j.f)("FlowGraphLessThanOrEqualBlock",P);class q extends a.d{constructor(i){super(E.c,E.c,E.g,((i,x)=>this._polymorphicGreaterThan(i,x)),"FlowGraphGreaterThanBlock",i)}_polymorphicGreaterThan(i,x){return r(i,x,((i,x)=>i>x))}}(0,j.f)("FlowGraphGreaterThanBlock",q);class W extends a.d{constructor(i){super(E.c,E.c,E.g,((i,x)=>this._polymorphicGreaterThanOrEqual(i,x)),"FlowGraphGreaterThanOrEqualBlock",i)}_polymorphicGreaterThanOrEqual(i,x){return r(i,x,((i,x)=>i>=x))}}(0,j.f)("FlowGraphGreaterThanOrEqualBlock",W);class G extends b.e{constructor(i){super(E.c,E.g,(i=>this._polymorphicIsNan(i)),"FlowGraphIsNaNBlock",i)}_polymorphicIsNan(i){if((0,L.s)(i,!0))return isNaN((0,L.r)(i));throw new Error(`Cannot get NaN of ${i}`)}}(0,j.f)("FlowGraphIsNaNBlock",G);class v extends b.e{constructor(i){super(E.c,E.g,(i=>this._polymorphicIsInf(i)),"FlowGraphIsInfBlock",i)}_polymorphicIsInf(i){if((0,L.s)(i))return!isFinite((0,L.r)(i));throw new Error(`Cannot get isInf of ${i}`)}}(0,j.f)("FlowGraphIsInfBlock",v);class s extends b.e{constructor(i){super(E.c,E.c,(i=>this._polymorphicDegToRad(i)),"FlowGraphDegToRadBlock",i)}_degToRad(i){return i*Math.PI/180}_polymorphicDegToRad(i){return w(i,this._degToRad)}}(0,j.f)("FlowGraphDegToRadBlock",s);class ii extends b.e{constructor(i){super(E.c,E.c,(i=>this._polymorphicRadToDeg(i)),"FlowGraphRadToDegBlock",i)}_radToDeg(i){return 180*i/Math.PI}_polymorphicRadToDeg(i){return w(i,this._radToDeg)}}(0,j.f)("FlowGraphRadToDegBlock",ii);class xi extends b.e{constructor(i){super(E.q,E.q,(i=>this._polymorphicSin(i)),"FlowGraphSinBlock",i)}_polymorphicSin(i){return w(i,Math.sin)}}class ei extends b.e{constructor(i){super(E.q,E.q,(i=>this._polymorphicCos(i)),"FlowGraphCosBlock",i)}_polymorphicCos(i){return w(i,Math.cos)}}class ji extends b.e{constructor(i){super(E.q,E.q,(i=>this._polymorphicTan(i)),"FlowGraphTanBlock",i)}_polymorphicTan(i){return w(i,Math.tan)}}class Ei extends b.e{constructor(i){super(E.q,E.q,(i=>this._polymorphicAsin(i)),"FlowGraphASinBlock",i)}_polymorphicAsin(i){return w(i,Math.asin)}}(0,j.f)("FlowGraphASinBlock",Ei);class ai extends b.e{constructor(i){super(E.q,E.q,(i=>this._polymorphicAcos(i)),"FlowGraphACosBlock",i)}_polymorphicAcos(i){return w(i,Math.acos)}}(0,j.f)("FlowGraphACosBlock",ai);class Yi extends b.e{constructor(i){super(E.q,E.q,(i=>this._polymorphicAtan(i)),"FlowGraphATanBlock",i)}_polymorphicAtan(i){return w(i,Math.atan)}}(0,j.f)("FlowGraphATanBlock",Yi);class Ji extends a.d{constructor(i){super(E.c,E.c,E.c,((i,x)=>this._polymorphicAtan2(i,x)),"FlowGraphATan2Block",i)}_polymorphicAtan2(i,x){return C(i,x,Math.atan2)}}(0,j.f)("FlowGraphATan2Block",Ji);class ui extends b.e{constructor(i){super(E.c,E.c,(i=>this._polymorphicSinh(i)),"FlowGraphSinhBlock",i)}_polymorphicSinh(i){return w(i,Math.sinh)}}(0,j.f)("FlowGraphSinhBlock",ui);class bi extends b.e{constructor(i){super(E.c,E.c,(i=>this._polymorphicCosh(i)),"FlowGraphCoshBlock",i)}_polymorphicCosh(i){return w(i,Math.cosh)}}(0,j.f)("FlowGraphCoshBlock",bi);class gi extends b.e{constructor(i){super(E.c,E.c,(i=>this._polymorphicTanh(i)),"FlowGraphTanhBlock",i)}_polymorphicTanh(i){return w(i,Math.tanh)}}(0,j.f)("FlowGraphTanhBlock",gi);class Ai extends b.e{constructor(i){super(E.c,E.q,(i=>this._polymorphicAsinh(i)),"FlowGraphASinhBlock",i)}_polymorphicAsinh(i){return w(i,Math.asinh)}}(0,j.f)("FlowGraphASinhBlock",Ai);class Ki extends b.e{constructor(i){super(E.c,E.q,(i=>this._polymorphicAcosh(i)),"FlowGraphACoshBlock",i)}_polymorphicAcosh(i){return w(i,Math.acosh)}}(0,j.f)("FlowGraphACoshBlock",Ki);class Li extends b.e{constructor(i){super(E.c,E.q,(i=>this._polymorphicAtanh(i)),"FlowGraphATanhBlock",i)}_polymorphicAtanh(i){return w(i,Math.atanh)}}(0,j.f)("FlowGraphATanhBlock",Li);class oi extends b.e{constructor(i){super(E.c,E.q,(i=>this._polymorphicExp(i)),"FlowGraphExponentialBlock",i)}_polymorphicExp(i){return w(i,Math.exp)}}(0,j.f)("FlowGraphExponentialBlock",oi);class Mi extends b.e{constructor(i){super(E.c,E.q,(i=>this._polymorphicLog(i)),"FlowGraphLogBlock",i)}_polymorphicLog(i){return w(i,Math.log)}}(0,j.f)("FlowGraphLogBlock",Mi);class zi extends b.e{constructor(i){super(E.c,E.q,(i=>this._polymorphicLog2(i)),"FlowGraphLog2Block",i)}_polymorphicLog2(i){return w(i,Math.log2)}}(0,j.f)("FlowGraphLog2Block",zi);class Ti extends b.e{constructor(i){super(E.c,E.q,(i=>this._polymorphicLog10(i)),"FlowGraphLog10Block",i)}_polymorphicLog10(i){return w(i,Math.log10)}}(0,j.f)("FlowGraphLog10Block",Ti);class Qi extends b.e{constructor(i){super(E.c,E.q,(i=>this._polymorphicSqrt(i)),"FlowGraphSquareRootBlock",i)}_polymorphicSqrt(i){return w(i,Math.sqrt)}}(0,j.f)("FlowGraphSquareRootBlock",Qi);class ti extends b.e{constructor(i){super(E.c,E.q,(i=>this._polymorphicCubeRoot(i)),"FlowGraphCubeRootBlock",i)}_polymorphicCubeRoot(i){return w(i,Math.cbrt)}}(0,j.f)("FlowGraphCubeRootBlock",ti);class Vi extends a.d{constructor(i){super(E.c,E.q,E.q,((i,x)=>this._polymorphicPow(i,x)),"FlowGraphPowerBlock",i)}_polymorphicPow(i,x){return C(i,x,Math.pow)}}(0,j.f)("FlowGraphPowerBlock",Vi);class Si extends b.e{constructor(i){super((0,E.N)((null===i||void 0===i?void 0:i.valueType)||"FlowGraphInteger"),(0,E.N)((null===i||void 0===i?void 0:i.valueType)||"FlowGraphInteger"),(i=>"boolean"===typeof i?!i:"number"===typeof i?~i:new A.d(~i.value)),"FlowGraphBitwiseNotBlock",i)}}(0,j.f)("FlowGraphBitwiseNotBlock",Si);class fi extends a.d{constructor(i){super((0,E.N)((null===i||void 0===i?void 0:i.valueType)||"FlowGraphInteger"),(0,E.N)((null===i||void 0===i?void 0:i.valueType)||"FlowGraphInteger"),(0,E.N)((null===i||void 0===i?void 0:i.valueType)||"FlowGraphInteger"),((i,x)=>{if("boolean"===typeof i&&"boolean"===typeof x)return i&&x;if("number"===typeof i&&"number"===typeof x)return i&x;if("object"===typeof i&&"object"===typeof x)return new A.d(i.value&x.value);throw new Error(`Cannot perform bitwise AND on ${i} and ${x}`)}),"FlowGraphBitwiseAndBlock",i)}}(0,j.f)("FlowGraphBitwiseAndBlock",fi);class wi extends a.d{constructor(i){super((0,E.N)((null===i||void 0===i?void 0:i.valueType)||"FlowGraphInteger"),(0,E.N)((null===i||void 0===i?void 0:i.valueType)||"FlowGraphInteger"),(0,E.N)((null===i||void 0===i?void 0:i.valueType)||"FlowGraphInteger"),((i,x)=>{if("boolean"===typeof i&&"boolean"===typeof x)return i||x;if("number"===typeof i&&"number"===typeof x)return i|x;if("object"===typeof i&&"object"===typeof x)return new A.d(i.value|x.value);throw new Error(`Cannot perform bitwise OR on ${i} and ${x}`)}),"FlowGraphBitwiseOrBlock",i)}}(0,j.f)("FlowGraphBitwiseOrBlock",wi);class Oi extends a.d{constructor(i){super((0,E.N)((null===i||void 0===i?void 0:i.valueType)||"FlowGraphInteger"),(0,E.N)((null===i||void 0===i?void 0:i.valueType)||"FlowGraphInteger"),(0,E.N)((null===i||void 0===i?void 0:i.valueType)||"FlowGraphInteger"),((i,x)=>{if("boolean"===typeof i&&"boolean"===typeof x)return i!==x;if("number"===typeof i&&"number"===typeof x)return i^x;if("object"===typeof i&&"object"===typeof x)return new A.d(i.value^x.value);throw new Error(`Cannot perform bitwise XOR on ${i} and ${x}`)}),"FlowGraphBitwiseXorBlock",i)}}(0,j.f)("FlowGraphBitwiseXorBlock",Oi);class li extends a.d{constructor(i){super(E.h,E.h,E.h,((i,x)=>new A.d(i.value<<x.value)),"FlowGraphBitwiseLeftShiftBlock",i)}}(0,j.f)("FlowGraphBitwiseLeftShiftBlock",li);class Zi extends a.d{constructor(i){super(E.h,E.h,E.h,((i,x)=>new A.d(i.value>>x.value)),"FlowGraphBitwiseRightShiftBlock",i)}}(0,j.f)("FlowGraphBitwiseRightShiftBlock",Zi);class Bi extends b.e{constructor(i){super(E.h,E.h,(i=>new A.d(Math.clz32(i.value))),"FlowGraphLeadingZerosBlock",i)}}(0,j.f)("FlowGraphLeadingZerosBlock",Bi);class ki extends b.e{constructor(i){super(E.h,E.h,(i=>new A.d(i.value?31-Math.clz32(i.value&-i.value):32)),"FlowGraphTrailingZerosBlock",i)}}(0,j.f)("FlowGraphTrailingZerosBlock",ki);class Ni extends b.e{constructor(i){super(E.h,E.h,(i=>new A.d(function(i){let x=0;for(;i;)x+=1&i,i>>=1;return x}(i.value))),"FlowGraphOneBitsCounterBlock",i)}}(0,j.f)("FlowGraphOneBitsCounterBlock",Ni)},15364:(i,x,e)=>{e.d(x,{d:()=>E});var j=e(15373);class E extends j.c{constructor(i,x,e,j,E,a){super(e,a),this._operation=j,this._className=E,this.a=this.registerDataInput("a",i),this.b=this.registerDataInput("b",x)}_doOperation(i){const x=this.a.getValue(i),e=this.b.getValue(i);return this._operation(x,e)}getClassName(){return this._className}}},15373:(i,x,e)=>{e.d(x,{c:()=>J});var j=e(13900),E=e(13874);const a="cachedOperationValue",Y="cachedExecutionId";class J extends j.e{constructor(i,x){super(x),this.value=this.registerDataOutput("value",i),this.isValid=this.registerDataOutput("isValid",E.g)}_updateOutputs(i){const x=i._getExecutionVariable(this,Y,-1),e=i._getExecutionVariable(this,a,null);if(void 0!==e&&null!==e&&x===i.executionId)this.isValid.setValue(!0,i),this.value.setValue(e,i);else try{const x=this._doOperation(i);if(void 0===x||null===x)return void this.isValid.setValue(!1,i);i._setExecutionVariable(this,a,x),i._setExecutionVariable(this,Y,i.executionId),this.value.setValue(x,i),this.isValid.setValue(!0,i)}catch(j){this.isValid.setValue(!1,i)}}}},15375:(i,x,e)=>{e.d(x,{e:()=>E});var j=e(15373);class E extends j.c{constructor(i,x,e,j,E){super(x,E),this._operation=e,this._className=j,this.a=this.registerDataInput("a",i)}_doOperation(i){return this._operation(this.a.getValue(i))}getClassName(){return this._className}}}}]);