"use strict";(self.n4ygn1cq9vg=self.n4ygn1cq9vg||[]).push([[88],{15653:(e,d,v)=>{v.r(d),v.d(d,{FlowGraphAbsBlock:()=>x,FlowGraphAcosBlock:()=>Le,FlowGraphAcoshBlock:()=>ge,FlowGraphAddBlock:()=>w,FlowGraphAsinBlock:()=>pe,FlowGraphAsinhBlock:()=>ke,FlowGraphAtan2Block:()=>Xe,FlowGraphAtanBlock:()=>Be,FlowGraphAtanhBlock:()=>Fe,FlowGraphBitwiseAndBlock:()=>ne,FlowGraphBitwiseLeftShiftBlock:()=>ie,FlowGraphBitwiseNotBlock:()=>le,FlowGraphBitwiseOrBlock:()=>Ae,FlowGraphBitwiseRightShiftBlock:()=>md,FlowGraphBitwiseXorBlock:()=>xe,FlowGraphCeilBlock:()=>Z,FlowGraphClampBlock:()=>R,FlowGraphCosBlock:()=>ve,FlowGraphCoshBlock:()=>We,FlowGraphCubeRootBlock:()=>qe,FlowGraphDegToRadBlock:()=>E,FlowGraphDivideBlock:()=>D,FlowGraphEBlock:()=>q,FlowGraphEqualityBlock:()=>I,FlowGraphExpBlock:()=>we,FlowGraphFloorBlock:()=>r,FlowGraphFractionBlock:()=>T,FlowGraphGreaterThanBlock:()=>s,FlowGraphGreaterThanOrEqualBlock:()=>y,FlowGraphInfBlock:()=>l,FlowGraphIsInfinityBlock:()=>J,FlowGraphIsNanBlock:()=>j,FlowGraphLeadingZerosBlock:()=>re,FlowGraphLessThanBlock:()=>b,FlowGraphLessThanOrEqualBlock:()=>M,FlowGraphLog10Block:()=>De,FlowGraphLog2Block:()=>Ue,FlowGraphLogBlock:()=>Ge,FlowGraphMathInterpolationBlock:()=>t,FlowGraphMaxBlock:()=>N,FlowGraphMinBlock:()=>Q,FlowGraphModuloBlock:()=>K,FlowGraphMultiplyBlock:()=>U,FlowGraphNaNBlock:()=>n,FlowGraphNegationBlock:()=>S,FlowGraphOneBitsCounterBlock:()=>fe,FlowGraphPiBlock:()=>h,FlowGraphPowerBlock:()=>he,FlowGraphRadToDegBlock:()=>ee,FlowGraphRandomBlock:()=>C,FlowGraphRoundBlock:()=>f,FlowGraphSaturateBlock:()=>H,FlowGraphSignBlock:()=>i,FlowGraphSinBlock:()=>de,FlowGraphSinhBlock:()=>ze,FlowGraphSquareRootBlock:()=>Ce,FlowGraphSubtractBlock:()=>G,FlowGraphTanBlock:()=>Pe,FlowGraphTanhBlock:()=>Ve,FlowGraphTrailingZerosBlock:()=>Ze,FlowGraphTruncBlock:()=>me});var P=v(12381),p=v(14181),L=v(15661),B=v(15670);class X extends B.c{constructor(e,d,v,P){super(e,P),this._operation=d,this._className=v}_doOperation(e){return this._operation(e)}getClassName(){return this._className}}var z=v(12420),W=v(15678);class V extends B.c{constructor(e,d,v,P,p,L,B){super(P,B),this._operation=p,this._className=L,this.a=this.registerDataInput("a",e),this.b=this.registerDataInput("b",d),this.c=this.registerDataInput("c",v)}_doOperation(e){return this._operation(this.a.getValue(e),this.b.getValue(e),this.c.getValue(e))}getClassName(){return this._className}}var k=v(14179),g=v(14185),F=v(14208);class w extends L.e{constructor(e){super((0,p.F)(null===e||void 0===e?void 0:e.type),(0,p.F)(null===e||void 0===e?void 0:e.type),(0,p.F)(null===e||void 0===e?void 0:e.type),((e,d)=>this._polymorphicAdd(e,d)),"FlowGraphAddBlock",e)}_polymorphicAdd(e,d){const v=(0,F.h)(e),P=(0,F.h)(d);if((0,F.g)(v,P)||(0,F.d)(v,P)||(0,F.c)(v,P))return e.add(d);if("Quaternion"===v||"Vector4"===P)return new z.Vector4(e.x,e.y,e.z,e.w).addInPlace(d);if("Vector4"===v||"Quaternion"===P)return e.add(d);var p;if(null!==(p=this.config)&&void 0!==p&&p.preventIntegerFloatArithmetic&&typeof e!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,F.o)(e)+(0,F.o)(d)}}(0,P.h)("FlowGraphAddBlock",w);class G extends L.e{constructor(e){super((0,p.F)(null===e||void 0===e?void 0:e.type),(0,p.F)(null===e||void 0===e?void 0:e.type),(0,p.F)(null===e||void 0===e?void 0:e.type),((e,d)=>this._polymorphicSubtract(e,d)),"FlowGraphSubtractBlock",e)}_polymorphicSubtract(e,d){const v=(0,F.h)(e),P=(0,F.h)(d);if((0,F.g)(v,P)||(0,F.c)(v,P)||(0,F.d)(v,P))return e.Zd(d);if("Quaternion"===v||"Vector4"===P)return new z.Vector4(e.x,e.y,e.z,e.w).JV(d);if("Vector4"===v||"Quaternion"===P)return e.Zd(d);var p;if(null!==(p=this.config)&&void 0!==p&&p.preventIntegerFloatArithmetic&&typeof e!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,F.o)(e)-(0,F.o)(d)}}(0,P.h)("FlowGraphSubtractBlock",G);class U extends L.e{constructor(e){super((0,p.F)(null===e||void 0===e?void 0:e.type),(0,p.F)(null===e||void 0===e?void 0:e.type),(0,p.F)(null===e||void 0===e?void 0:e.type),((e,d)=>this._polymorphicMultiply(e,d)),"FlowGraphMultiplyBlock",e)}_polymorphicMultiply(e,d){const v=(0,F.h)(e),P=(0,F.h)(d);if((0,F.g)(v,P)||(0,F.c)(v,P))return e.multiply(d);if("Quaternion"===v||"Vector4"===P)return new z.Vector4(e.x,e.y,e.z,e.w).multiplyInPlace(d);if("Vector4"===v||"Quaternion"===P)return e.multiply(d);if((0,F.d)(v,P)){var p;if(null!==(p=this.config)&&void 0!==p&&p.useMatrixPerComponent){const P=e.m;for(let e=0;e<P.length;e++)P[e]*=d.m[e];return"Matrix2D"===v?new g.c(P):"Matrix3D"===v?new g.e(P):z.Matrix.Nd(P)}return d.multiply(e)}var L;if(null!==(L=this.config)&&void 0!==L&&L.preventIntegerFloatArithmetic&&typeof e!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,F.o)(e)*(0,F.o)(d)}}(0,P.h)("FlowGraphMultiplyBlock",U);class D extends L.e{constructor(e){super((0,p.F)(null===e||void 0===e?void 0:e.type),(0,p.F)(null===e||void 0===e?void 0:e.type),(0,p.F)(null===e||void 0===e?void 0:e.type),((e,d)=>this._polymorphicDivide(e,d)),"FlowGraphDivideBlock",e)}_polymorphicDivide(e,d){const v=(0,F.h)(e),P=(0,F.h)(d);if((0,F.g)(v,P)||(0,F.c)(v,P))return e.divide(d);if("Quaternion"===v||"Quaternion"===P){const v=e.clone();return v.x/=d.x,v.y/=d.y,v.z/=d.z,v.w/=d.w,v}if("Quaternion"===v||"Vector4"===P)return new z.Vector4(e.x,e.y,e.z,e.w).divideInPlace(d);if("Vector4"===v||"Quaternion"===P)return e.divide(d);if((0,F.d)(v,P)){var p;if(null!==(p=this.config)&&void 0!==p&&p.useMatrixPerComponent){const P=e.m;for(let e=0;e<P.length;e++)P[e]/=d.m[e];return"Matrix2D"===v?new g.c(P):"Matrix3D"===v?new g.e(P):z.Matrix.Nd(P)}return e.divide(d)}var L;if(null!==(L=this.config)&&void 0!==L&&L.preventIntegerFloatArithmetic&&typeof e!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,F.o)(e)/(0,F.o)(d)}}(0,P.h)("FlowGraphDivideBlock",D);class C extends X{constructor(e){super(p.n,(e=>this._random(e)),"FlowGraphRandomBlock",e),this.min=this.registerDataInput("min",p.n,(null===e||void 0===e?void 0:e.min)??0),this.max=this.registerDataInput("max",p.n,(null===e||void 0===e?void 0:e.max)??1),null!==e&&void 0!==e&&e.seed&&(this._seed=e.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const e=1e4*Math.sin(this._seed++);return e-Math.floor(e)}return Math.random()}_random(e){const d=this.min.getValue(e),v=this.max.getValue(e);return this._getRandomValue()*(v-d)+d}}(0,P.h)("FlowGraphRandomBlock",C);class q extends X{constructor(e){super(p.n,(()=>Math.E),"FlowGraphEBlock",e)}}(0,P.h)("FlowGraphEBlock",q);class h extends X{constructor(e){super(p.n,(()=>Math.PI),"FlowGraphPIBlock",e)}}(0,P.h)("FlowGraphPIBlock",h);class l extends X{constructor(e){super(p.n,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",e)}}(0,P.h)("FlowGraphInfBlock",l);class n extends X{constructor(e){super(p.n,(()=>Number.NaN),"FlowGraphNaNBlock",e)}}function A(e,d){switch((0,F.h)(e)){case"FlowGraphInteger":return new k.d(d(e.value));case"Vector2":return new z.Vector2(d(e.x),d(e.y));case"mv":return new z.mv(d(e.x),d(e.y),d(e.z));case"Vector4":return new z.Vector4(d(e.x),d(e.y),d(e.z),d(e.w));case"Quaternion":return new z.Quaternion(d(e.x),d(e.y),d(e.z),d(e.w));case"Matrix":return z.Matrix.Nd(e.m.map(d));case"Matrix2D":return new g.c(e.m.map(d));case"Matrix3D":return new g.e(e.m.map(d));default:return d(e)}}(0,P.h)("FlowGraphNaNBlock",n);class x extends W.d{constructor(e){super(p.n,p.n,(e=>this._polymorphicAbs(e)),"FlowGraphAbsBlock",e)}_polymorphicAbs(e){return A(e,Math.abs)}}(0,P.h)("FlowGraphAbsBlock",x);class i extends W.d{constructor(e){super(p.n,p.n,(e=>this._polymorphicSign(e)),"FlowGraphSignBlock",e)}_polymorphicSign(e){return A(e,Math.sign)}}(0,P.h)("FlowGraphSignBlock",i);class me extends W.d{constructor(e){super(p.n,p.n,(e=>this._polymorphicTrunc(e)),"FlowGraphTruncBlock",e)}_polymorphicTrunc(e){return A(e,Math.trunc)}}(0,P.h)("FlowGraphTruncBlock",me);class r extends W.d{constructor(e){super(p.n,p.n,(e=>this._polymorphicFloor(e)),"FlowGraphFloorBlock",e)}_polymorphicFloor(e){return A(e,Math.floor)}}(0,P.h)("FlowGraphFloorBlock",r);class Z extends W.d{constructor(e){super(p.b,p.b,(e=>this._polymorphicCeiling(e)),"FlowGraphCeilBlock",e)}_polymorphicCeiling(e){return A(e,Math.ceil)}}(0,P.h)("FlowGraphCeilBlock",Z);class f extends W.d{constructor(e){super(p.b,p.b,(e=>this._polymorphicRound(e)),"FlowGraphRoundBlock",e)}_polymorphicRound(e){return A(e,(e=>{var d;return e<0&&null!==(d=this.config)&&void 0!==d&&d.roundHalfAwayFromZero?-Math.round(-e):Math.round(e)}))}}(0,P.h)("FlowGraphRoundBlock",f);class T extends W.d{constructor(e){super(p.b,p.b,(e=>this._polymorphicFraction(e)),"FlowGraphFractBlock",e)}_polymorphicFraction(e){return A(e,(e=>e-Math.floor(e)))}}(0,P.h)("FlowGraphFractBlock",T);class S extends W.d{constructor(e){super(p.b,p.b,(e=>this._polymorphicNeg(e)),"FlowGraphNegationBlock",e)}_polymorphicNeg(e){return A(e,(e=>-e))}}function o(e,d,v){switch((0,F.h)(e)){case"FlowGraphInteger":return new k.d(v(e.value,d.value));case"Vector2":return new z.Vector2(v(e.x,d.x),v(e.y,d.y));case"mv":return new z.mv(v(e.x,d.x),v(e.y,d.y),v(e.z,d.z));case"Vector4":return new z.Vector4(v(e.x,d.x),v(e.y,d.y),v(e.z,d.z),v(e.w,d.w));case"Quaternion":return new z.Quaternion(v(e.x,d.x),v(e.y,d.y),v(e.z,d.z),v(e.w,d.w));case"Matrix":return z.Matrix.Nd(e.m.map(((e,P)=>v(e,d.m[P]))));case"Matrix2D":return new g.c(e.m.map(((e,P)=>v(e,d.m[P]))));case"Matrix3D":return new g.e(e.m.map(((e,P)=>v(e,d.m[P]))));default:return v((0,F.o)(e),(0,F.o)(d))}}(0,P.h)("FlowGraphNegationBlock",S);class K extends L.e{constructor(e){super(p.b,p.b,p.b,((e,d)=>this._polymorphicRemainder(e,d)),"FlowGraphModuloBlock",e)}_polymorphicRemainder(e,d){return o(e,d,((e,d)=>e%d))}}(0,P.h)("FlowGraphModuloBlock",K);class Q extends L.e{constructor(e){super(p.b,p.b,p.b,((e,d)=>this._polymorphicMin(e,d)),"FlowGraphMinBlock",e)}_polymorphicMin(e,d){return o(e,d,Math.min)}}(0,P.h)("FlowGraphMinBlock",Q);class N extends L.e{constructor(e){super(p.b,p.b,p.b,((e,d)=>this._polymorphicMax(e,d)),"FlowGraphMaxBlock",e)}_polymorphicMax(e,d){return o(e,d,Math.max)}}function u(e,d,v){return Math.min(Math.max(e,Math.min(d,v)),Math.max(d,v))}function O(e,d,v,P){switch((0,F.h)(e)){case"FlowGraphInteger":return new k.d(P(e.value,d.value,v.value));case"Vector2":return new z.Vector2(P(e.x,d.x,v.x),P(e.y,d.y,v.y));case"mv":return new z.mv(P(e.x,d.x,v.x),P(e.y,d.y,v.y),P(e.z,d.z,v.z));case"Vector4":return new z.Vector4(P(e.x,d.x,v.x),P(e.y,d.y,v.y),P(e.z,d.z,v.z),P(e.w,d.w,v.w));case"Quaternion":return new z.Quaternion(P(e.x,d.x,v.x),P(e.y,d.y,v.y),P(e.z,d.z,v.z),P(e.w,d.w,v.w));case"Matrix":return z.Matrix.Nd(e.m.map(((e,p)=>P(e,d.m[p],v.m[p]))));case"Matrix2D":return new g.c(e.m.map(((e,p)=>P(e,d.m[p],v.m[p]))));case"Matrix3D":return new g.e(e.m.map(((e,p)=>P(e,d.m[p],v.m[p]))));default:return P((0,F.o)(e),(0,F.o)(d),(0,F.o)(v))}}(0,P.h)("FlowGraphMaxBlock",N);class R extends V{constructor(e){super(p.b,p.b,p.b,p.b,((e,d,v)=>this._polymorphicClamp(e,d,v)),"FlowGraphClampBlock",e)}_polymorphicClamp(e,d,v){return O(e,d,v,u)}}function Y(e){return Math.min(Math.max(e,0),1)}(0,P.h)("FlowGraphClampBlock",R);class H extends W.d{constructor(e){super(p.b,p.b,(e=>this._polymorphicSaturate(e)),"FlowGraphSaturateBlock",e)}_polymorphicSaturate(e){return A(e,Y)}}function a(e,d,v){return(1-v)*e+v*d}(0,P.h)("FlowGraphSaturateBlock",H);class t extends V{constructor(e){super(p.b,p.b,p.b,p.b,((e,d,v)=>this._polymorphicInterpolate(e,d,v)),"FlowGraphMathInterpolationBlock",e)}_polymorphicInterpolate(e,d,v){return O(e,d,v,a)}}(0,P.h)("FlowGraphMathInterpolationBlock",t);class I extends L.e{constructor(e){super(p.b,p.b,p.d,((e,d)=>this._polymorphicEq(e,d)),"FlowGraphEqualityBlock",e)}_polymorphicEq(e,d){const v=(0,F.h)(e),P=(0,F.h)(d);return typeof e===typeof d&&((0,F.g)(v,P)||(0,F.d)(v,P)||(0,F.c)(v,P)?e.equals(d):e===d)}}function c(e,d,v){if((0,F.p)(e)&&(0,F.p)(d))return v((0,F.o)(e),(0,F.o)(d));throw new Error(`Cannot compare ${e} and ${d}`)}(0,P.h)("FlowGraphEqualityBlock",I);class b extends L.e{constructor(e){super(p.b,p.b,p.d,((e,d)=>this._polymorphicLessThan(e,d)),"FlowGraphLessThanBlock",e)}_polymorphicLessThan(e,d){return c(e,d,((e,d)=>e<d))}}(0,P.h)("FlowGraphLessThanBlock",b);class M extends L.e{constructor(e){super(p.b,p.b,p.d,((e,d)=>this._polymorphicLessThanOrEqual(e,d)),"FlowGraphLessThanOrEqualBlock",e)}_polymorphicLessThanOrEqual(e,d){return c(e,d,((e,d)=>e<=d))}}(0,P.h)("FlowGraphLessThanOrEqualBlock",M);class s extends L.e{constructor(e){super(p.b,p.b,p.d,((e,d)=>this._polymorphicGreaterThan(e,d)),"FlowGraphGreaterThanBlock",e)}_polymorphicGreaterThan(e,d){return c(e,d,((e,d)=>e>d))}}(0,P.h)("FlowGraphGreaterThanBlock",s);class y extends L.e{constructor(e){super(p.b,p.b,p.d,((e,d)=>this._polymorphicGreaterThanOrEqual(e,d)),"FlowGraphGreaterThanOrEqualBlock",e)}_polymorphicGreaterThanOrEqual(e,d){return c(e,d,((e,d)=>e>=d))}}(0,P.h)("FlowGraphGreaterThanOrEqualBlock",y);class j extends W.d{constructor(e){super(p.b,p.d,(e=>this._polymorphicIsNan(e)),"FlowGraphIsNaNBlock",e)}_polymorphicIsNan(e){if((0,F.p)(e,!0))return isNaN((0,F.o)(e));throw new Error(`Cannot get NaN of ${e}`)}}(0,P.h)("FlowGraphIsNaNBlock",j);class J extends W.d{constructor(e){super(p.b,p.d,(e=>this._polymorphicIsInf(e)),"FlowGraphIsInfBlock",e)}_polymorphicIsInf(e){if((0,F.p)(e))return!isFinite((0,F.o)(e));throw new Error(`Cannot get isInf of ${e}`)}}(0,P.h)("FlowGraphIsInfBlock",J);class E extends W.d{constructor(e){super(p.b,p.b,(e=>this._polymorphicDegToRad(e)),"FlowGraphDegToRadBlock",e)}_degToRad(e){return e*Math.PI/180}_polymorphicDegToRad(e){return A(e,this._degToRad)}}(0,P.h)("FlowGraphDegToRadBlock",E);class ee extends W.d{constructor(e){super(p.b,p.b,(e=>this._polymorphicRadToDeg(e)),"FlowGraphRadToDegBlock",e)}_radToDeg(e){return 180*e/Math.PI}_polymorphicRadToDeg(e){return A(e,this._radToDeg)}}(0,P.h)("FlowGraphRadToDegBlock",ee);class de extends W.d{constructor(e){super(p.n,p.n,(e=>this._polymorphicSin(e)),"FlowGraphSinBlock",e)}_polymorphicSin(e){return A(e,Math.sin)}}class ve extends W.d{constructor(e){super(p.n,p.n,(e=>this._polymorphicCos(e)),"FlowGraphCosBlock",e)}_polymorphicCos(e){return A(e,Math.cos)}}class Pe extends W.d{constructor(e){super(p.n,p.n,(e=>this._polymorphicTan(e)),"FlowGraphTanBlock",e)}_polymorphicTan(e){return A(e,Math.tan)}}class pe extends W.d{constructor(e){super(p.n,p.n,(e=>this._polymorphicAsin(e)),"FlowGraphASinBlock",e)}_polymorphicAsin(e){return A(e,Math.asin)}}(0,P.h)("FlowGraphASinBlock",pe);class Le extends W.d{constructor(e){super(p.n,p.n,(e=>this._polymorphicAcos(e)),"FlowGraphACosBlock",e)}_polymorphicAcos(e){return A(e,Math.acos)}}(0,P.h)("FlowGraphACosBlock",Le);class Be extends W.d{constructor(e){super(p.n,p.n,(e=>this._polymorphicAtan(e)),"FlowGraphATanBlock",e)}_polymorphicAtan(e){return A(e,Math.atan)}}(0,P.h)("FlowGraphATanBlock",Be);class Xe extends L.e{constructor(e){super(p.b,p.b,p.b,((e,d)=>this._polymorphicAtan2(e,d)),"FlowGraphATan2Block",e)}_polymorphicAtan2(e,d){return o(e,d,Math.atan2)}}(0,P.h)("FlowGraphATan2Block",Xe);class ze extends W.d{constructor(e){super(p.b,p.b,(e=>this._polymorphicSinh(e)),"FlowGraphSinhBlock",e)}_polymorphicSinh(e){return A(e,Math.sinh)}}(0,P.h)("FlowGraphSinhBlock",ze);class We extends W.d{constructor(e){super(p.b,p.b,(e=>this._polymorphicCosh(e)),"FlowGraphCoshBlock",e)}_polymorphicCosh(e){return A(e,Math.cosh)}}(0,P.h)("FlowGraphCoshBlock",We);class Ve extends W.d{constructor(e){super(p.b,p.b,(e=>this._polymorphicTanh(e)),"FlowGraphTanhBlock",e)}_polymorphicTanh(e){return A(e,Math.tanh)}}(0,P.h)("FlowGraphTanhBlock",Ve);class ke extends W.d{constructor(e){super(p.b,p.n,(e=>this._polymorphicAsinh(e)),"FlowGraphASinhBlock",e)}_polymorphicAsinh(e){return A(e,Math.asinh)}}(0,P.h)("FlowGraphASinhBlock",ke);class ge extends W.d{constructor(e){super(p.b,p.n,(e=>this._polymorphicAcosh(e)),"FlowGraphACoshBlock",e)}_polymorphicAcosh(e){return A(e,Math.acosh)}}(0,P.h)("FlowGraphACoshBlock",ge);class Fe extends W.d{constructor(e){super(p.b,p.n,(e=>this._polymorphicAtanh(e)),"FlowGraphATanhBlock",e)}_polymorphicAtanh(e){return A(e,Math.atanh)}}(0,P.h)("FlowGraphATanhBlock",Fe);class we extends W.d{constructor(e){super(p.b,p.n,(e=>this._polymorphicExp(e)),"FlowGraphExponentialBlock",e)}_polymorphicExp(e){return A(e,Math.exp)}}(0,P.h)("FlowGraphExponentialBlock",we);class Ge extends W.d{constructor(e){super(p.b,p.n,(e=>this._polymorphicLog(e)),"FlowGraphLogBlock",e)}_polymorphicLog(e){return A(e,Math.log)}}(0,P.h)("FlowGraphLogBlock",Ge);class Ue extends W.d{constructor(e){super(p.b,p.n,(e=>this._polymorphicLog2(e)),"FlowGraphLog2Block",e)}_polymorphicLog2(e){return A(e,Math.log2)}}(0,P.h)("FlowGraphLog2Block",Ue);class De extends W.d{constructor(e){super(p.b,p.n,(e=>this._polymorphicLog10(e)),"FlowGraphLog10Block",e)}_polymorphicLog10(e){return A(e,Math.log10)}}(0,P.h)("FlowGraphLog10Block",De);class Ce extends W.d{constructor(e){super(p.b,p.n,(e=>this._polymorphicSqrt(e)),"FlowGraphSquareRootBlock",e)}_polymorphicSqrt(e){return A(e,Math.sqrt)}}(0,P.h)("FlowGraphSquareRootBlock",Ce);class qe extends W.d{constructor(e){super(p.b,p.n,(e=>this._polymorphicCubeRoot(e)),"FlowGraphCubeRootBlock",e)}_polymorphicCubeRoot(e){return A(e,Math.cbrt)}}(0,P.h)("FlowGraphCubeRootBlock",qe);class he extends L.e{constructor(e){super(p.b,p.n,p.n,((e,d)=>this._polymorphicPow(e,d)),"FlowGraphPowerBlock",e)}_polymorphicPow(e,d){return o(e,d,Math.pow)}}(0,P.h)("FlowGraphPowerBlock",he);class le extends W.d{constructor(e){super((0,p.F)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),(0,p.F)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),(e=>"boolean"===typeof e?!e:"number"===typeof e?~e:new k.d(~e.value)),"FlowGraphBitwiseNotBlock",e)}}(0,P.h)("FlowGraphBitwiseNotBlock",le);class ne extends L.e{constructor(e){super((0,p.F)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),(0,p.F)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),(0,p.F)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),((e,d)=>{if("boolean"===typeof e&&"boolean"===typeof d)return e&&d;if("number"===typeof e&&"number"===typeof d)return e&d;if("object"===typeof e&&"object"===typeof d)return new k.d(e.value&d.value);throw new Error(`Cannot perform bitwise AND on ${e} and ${d}`)}),"FlowGraphBitwiseAndBlock",e)}}(0,P.h)("FlowGraphBitwiseAndBlock",ne);class Ae extends L.e{constructor(e){super((0,p.F)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),(0,p.F)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),(0,p.F)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),((e,d)=>{if("boolean"===typeof e&&"boolean"===typeof d)return e||d;if("number"===typeof e&&"number"===typeof d)return e|d;if("object"===typeof e&&"object"===typeof d)return new k.d(e.value|d.value);throw new Error(`Cannot perform bitwise OR on ${e} and ${d}`)}),"FlowGraphBitwiseOrBlock",e)}}(0,P.h)("FlowGraphBitwiseOrBlock",Ae);class xe extends L.e{constructor(e){super((0,p.F)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),(0,p.F)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),(0,p.F)((null===e||void 0===e?void 0:e.valueType)||"FlowGraphInteger"),((e,d)=>{if("boolean"===typeof e&&"boolean"===typeof d)return e!==d;if("number"===typeof e&&"number"===typeof d)return e^d;if("object"===typeof e&&"object"===typeof d)return new k.d(e.value^d.value);throw new Error(`Cannot perform bitwise XOR on ${e} and ${d}`)}),"FlowGraphBitwiseXorBlock",e)}}(0,P.h)("FlowGraphBitwiseXorBlock",xe);class ie extends L.e{constructor(e){super(p.f,p.f,p.f,((e,d)=>new k.d(e.value<<d.value)),"FlowGraphBitwiseLeftShiftBlock",e)}}(0,P.h)("FlowGraphBitwiseLeftShiftBlock",ie);class md extends L.e{constructor(e){super(p.f,p.f,p.f,((e,d)=>new k.d(e.value>>d.value)),"FlowGraphBitwiseRightShiftBlock",e)}}(0,P.h)("FlowGraphBitwiseRightShiftBlock",md);class re extends W.d{constructor(e){super(p.f,p.f,(e=>new k.d(Math.clz32(e.value))),"FlowGraphLeadingZerosBlock",e)}}(0,P.h)("FlowGraphLeadingZerosBlock",re);class Ze extends W.d{constructor(e){super(p.f,p.f,(e=>new k.d(e.value?31-Math.clz32(e.value&-e.value):32)),"FlowGraphTrailingZerosBlock",e)}}(0,P.h)("FlowGraphTrailingZerosBlock",Ze);class fe extends W.d{constructor(e){super(p.f,p.f,(e=>new k.d(function(e){let d=0;for(;e;)d+=1&e,e>>=1;return d}(e.value))),"FlowGraphOneBitsCounterBlock",e)}}(0,P.h)("FlowGraphOneBitsCounterBlock",fe)},15661:(e,d,v)=>{v.d(d,{e:()=>p});var P=v(15670);class p extends P.c{constructor(e,d,v,P,p,L){super(v,L),this._operation=P,this._className=p,this.a=this.registerDataInput("a",e),this.b=this.registerDataInput("b",d)}_doOperation(e){const d=this.a.getValue(e),v=this.b.getValue(e);return this._operation(d,v)}getClassName(){return this._className}}},15670:(e,d,v)=>{v.d(d,{c:()=>X});var P=v(14195),p=v(14181);const L="cachedOperationValue",B="cachedExecutionId";class X extends P.e{constructor(e,d){super(d),this.value=this.registerDataOutput("value",e),this.isValid=this.registerDataOutput("isValid",p.d)}_updateOutputs(e){const d=e._getExecutionVariable(this,B,-1),v=e._getExecutionVariable(this,L,null);if(void 0!==v&&null!==v&&d===e.executionId)this.isValid.setValue(!0,e),this.value.setValue(v,e);else try{const d=this._doOperation(e);if(void 0===d||null===d)return void this.isValid.setValue(!1,e);e._setExecutionVariable(this,L,d),e._setExecutionVariable(this,B,e.executionId),this.value.setValue(d,e),this.isValid.setValue(!0,e)}catch(P){this.isValid.setValue(!1,e)}}}},15678:(e,d,v)=>{v.d(d,{d:()=>p});var P=v(15670);class p extends P.c{constructor(e,d,v,P,p){super(d,p),this._operation=v,this._className=P,this.a=this.registerDataInput("a",e)}_doOperation(e){return this._operation(this.a.getValue(e))}getClassName(){return this._className}}}}]);