"use strict";(self["7c63p8lin4r"]=self["7c63p8lin4r"]||[]).push([[88],{15718:(z,u,U)=>{U.r(u),U.d(u,{FlowGraphAbsBlock:()=>L,FlowGraphAcosBlock:()=>fz,FlowGraphAcoshBlock:()=>mu,FlowGraphAddBlock:()=>A,FlowGraphAsinBlock:()=>vz,FlowGraphAsinhBlock:()=>dz,FlowGraphAtan2Block:()=>wz,FlowGraphAtanBlock:()=>gz,FlowGraphAtanhBlock:()=>Zz,FlowGraphBitwiseAndBlock:()=>tz,FlowGraphBitwiseLeftShiftBlock:()=>Oz,FlowGraphBitwiseNotBlock:()=>hz,FlowGraphBitwiseOrBlock:()=>Vz,FlowGraphBitwiseRightShiftBlock:()=>xz,FlowGraphBitwiseXorBlock:()=>Lz,FlowGraphCeilBlock:()=>K,FlowGraphClampBlock:()=>b,FlowGraphCosBlock:()=>Uz,FlowGraphCoshBlock:()=>Rz,FlowGraphCubeRootBlock:()=>Tz,FlowGraphDegToRadBlock:()=>e,FlowGraphDivideBlock:()=>r,FlowGraphEBlock:()=>T,FlowGraphEqualityBlock:()=>G,FlowGraphExpBlock:()=>Az,FlowGraphFloorBlock:()=>Q,FlowGraphFractionBlock:()=>p,FlowGraphGreaterThanBlock:()=>q,FlowGraphGreaterThanOrEqualBlock:()=>o,FlowGraphInfBlock:()=>h,FlowGraphIsInfinityBlock:()=>l,FlowGraphIsNanBlock:()=>s,FlowGraphLeadingZerosBlock:()=>Qz,FlowGraphLessThanBlock:()=>i,FlowGraphLessThanOrEqualBlock:()=>n,FlowGraphLog10Block:()=>rz,FlowGraphLog2Block:()=>Cz,FlowGraphLogBlock:()=>Ez,FlowGraphMathInterpolationBlock:()=>H,FlowGraphMaxBlock:()=>j,FlowGraphMinBlock:()=>W,FlowGraphModuloBlock:()=>c,FlowGraphMultiplyBlock:()=>C,FlowGraphNaNBlock:()=>t,FlowGraphNegationBlock:()=>N,FlowGraphOneBitsCounterBlock:()=>Yz,FlowGraphPiBlock:()=>X,FlowGraphPowerBlock:()=>Xz,FlowGraphRadToDegBlock:()=>zz,FlowGraphRandomBlock:()=>M,FlowGraphRoundBlock:()=>Y,FlowGraphSaturateBlock:()=>B,FlowGraphSignBlock:()=>O,FlowGraphSinBlock:()=>uz,FlowGraphSinhBlock:()=>Pz,FlowGraphSquareRootBlock:()=>Mz,FlowGraphSubtractBlock:()=>E,FlowGraphTanBlock:()=>Jz,FlowGraphTanhBlock:()=>Sz,FlowGraphTrailingZerosBlock:()=>Kz,FlowGraphTruncBlock:()=>x});var J=U(12875),v=U(14196),f=U(15722),g=U(15724);class w extends g.c{constructor(z,u,U,J){super(z,J),this._operation=u,this._className=U}_doOperation(z){return this._operation(z)}getClassName(){return this._className}}var P=U(12914),R=U(15728);class S extends g.c{constructor(z,u,U,J,v,f,g){super(J,g),this._operation=v,this._className=f,this.a=this.registerDataInput("a",z),this.b=this.registerDataInput("b",u),this.c=this.registerDataInput("c",U)}_doOperation(z){return this._operation(this.a.getValue(z),this.b.getValue(z),this.c.getValue(z))}getClassName(){return this._className}}var d=U(14192),mz=U(14204),Z=U(14233);class A extends f.d{constructor(z){super((0,v.R)(null===z||void 0===z?void 0:z.type),(0,v.R)(null===z||void 0===z?void 0:z.type),(0,v.R)(null===z||void 0===z?void 0:z.type),((z,u)=>this._polymorphicAdd(z,u)),"FlowGraphAddBlock",z)}_polymorphicAdd(z,u){const U=(0,Z.k)(z),J=(0,Z.k)(u);if((0,Z.g)(U,J)||(0,Z.d)(U,J)||(0,Z.c)(U,J))return z.add(u);if("Quaternion"===U||"Vector4"===J)return new P.Vector4(z.x,z.y,z.z,z.w).addInPlace(u);if("Vector4"===U||"Quaternion"===J)return z.add(u);var v;if(null!==(v=this.config)&&void 0!==v&&v.preventIntegerFloatArithmetic&&typeof z!==typeof u)throw new Error("Cannot add different types of numbers.");return(0,Z.q)(z)+(0,Z.q)(u)}}(0,J.f)("FlowGraphAddBlock",A);class E extends f.d{constructor(z){super((0,v.R)(null===z||void 0===z?void 0:z.type),(0,v.R)(null===z||void 0===z?void 0:z.type),(0,v.R)(null===z||void 0===z?void 0:z.type),((z,u)=>this._polymorphicSubtract(z,u)),"FlowGraphSubtractBlock",z)}_polymorphicSubtract(z,u){const U=(0,Z.k)(z),J=(0,Z.k)(u);if((0,Z.g)(U,J)||(0,Z.c)(U,J)||(0,Z.d)(U,J))return z.Cu(u);if("Quaternion"===U||"Vector4"===J)return new P.Vector4(z.x,z.y,z.z,z.w).dm(u);if("Vector4"===U||"Quaternion"===J)return z.Cu(u);var v;if(null!==(v=this.config)&&void 0!==v&&v.preventIntegerFloatArithmetic&&typeof z!==typeof u)throw new Error("Cannot add different types of numbers.");return(0,Z.q)(z)-(0,Z.q)(u)}}(0,J.f)("FlowGraphSubtractBlock",E);class C extends f.d{constructor(z){super((0,v.R)(null===z||void 0===z?void 0:z.type),(0,v.R)(null===z||void 0===z?void 0:z.type),(0,v.R)(null===z||void 0===z?void 0:z.type),((z,u)=>this._polymorphicMultiply(z,u)),"FlowGraphMultiplyBlock",z)}_polymorphicMultiply(z,u){const U=(0,Z.k)(z),J=(0,Z.k)(u);if((0,Z.g)(U,J)||(0,Z.c)(U,J))return z.multiply(u);if("Quaternion"===U||"Vector4"===J)return new P.Vector4(z.x,z.y,z.z,z.w).multiplyInPlace(u);if("Vector4"===U||"Quaternion"===J)return z.multiply(u);if((0,Z.d)(U,J)){var v;if(null!==(v=this.config)&&void 0!==v&&v.useMatrixPerComponent){const J=z.m;for(let z=0;z<J.length;z++)J[z]*=u.m[z];return"Matrix2D"===U?new mz.c(J):"Matrix3D"===U?new mz.e(J):P.Matrix.Xu(J)}return u.multiply(z)}var f;if(null!==(f=this.config)&&void 0!==f&&f.preventIntegerFloatArithmetic&&typeof z!==typeof u)throw new Error("Cannot add different types of numbers.");return(0,Z.q)(z)*(0,Z.q)(u)}}(0,J.f)("FlowGraphMultiplyBlock",C);class r extends f.d{constructor(z){super((0,v.R)(null===z||void 0===z?void 0:z.type),(0,v.R)(null===z||void 0===z?void 0:z.type),(0,v.R)(null===z||void 0===z?void 0:z.type),((z,u)=>this._polymorphicDivide(z,u)),"FlowGraphDivideBlock",z)}_polymorphicDivide(z,u){const U=(0,Z.k)(z),J=(0,Z.k)(u);if((0,Z.g)(U,J)||(0,Z.c)(U,J))return z.divide(u);if("Quaternion"===U||"Quaternion"===J){const U=z.clone();return U.x/=u.x,U.y/=u.y,U.z/=u.z,U.w/=u.w,U}if("Quaternion"===U||"Vector4"===J)return new P.Vector4(z.x,z.y,z.z,z.w).divideInPlace(u);if("Vector4"===U||"Quaternion"===J)return z.divide(u);if((0,Z.d)(U,J)){var v;if(null!==(v=this.config)&&void 0!==v&&v.useMatrixPerComponent){const J=z.m;for(let z=0;z<J.length;z++)J[z]/=u.m[z];return"Matrix2D"===U?new mz.c(J):"Matrix3D"===U?new mz.e(J):P.Matrix.Xu(J)}return z.divide(u)}var f;if(null!==(f=this.config)&&void 0!==f&&f.preventIntegerFloatArithmetic&&typeof z!==typeof u)throw new Error("Cannot add different types of numbers.");return(0,Z.q)(z)/(0,Z.q)(u)}}(0,J.f)("FlowGraphDivideBlock",r);class M extends w{constructor(z){var u,U;super(v.x,(z=>this._random(z)),"FlowGraphRandomBlock",z),this.min=this.registerDataInput("min",v.x,null!==(u=null===z||void 0===z?void 0:z.min)&&void 0!==u?u:0),this.max=this.registerDataInput("max",v.x,null!==(U=null===z||void 0===z?void 0:z.max)&&void 0!==U?U:1),null!==z&&void 0!==z&&z.seed&&(this._seed=z.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const z=1e4*Math.sin(this._seed++);return z-Math.floor(z)}return Math.random()}_random(z){const u=this.min.getValue(z),U=this.max.getValue(z);return this._getRandomValue()*(U-u)+u}}(0,J.f)("FlowGraphRandomBlock",M);class T extends w{constructor(z){super(v.x,(()=>Math.E),"FlowGraphEBlock",z)}}(0,J.f)("FlowGraphEBlock",T);class X extends w{constructor(z){super(v.x,(()=>Math.PI),"FlowGraphPIBlock",z)}}(0,J.f)("FlowGraphPIBlock",X);class h extends w{constructor(z){super(v.x,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",z)}}(0,J.f)("FlowGraphInfBlock",h);class t extends w{constructor(z){super(v.x,(()=>Number.NaN),"FlowGraphNaNBlock",z)}}function V(z,u){switch((0,Z.k)(z)){case"FlowGraphInteger":return new d.e(u(z.value));case"Vector2":return new P.Vector2(u(z.x),u(z.y));case"Eu":return new P.Eu(u(z.x),u(z.y),u(z.z));case"Vector4":return new P.Vector4(u(z.x),u(z.y),u(z.z),u(z.w));case"Quaternion":return new P.Quaternion(u(z.x),u(z.y),u(z.z),u(z.w));case"Matrix":return P.Matrix.Xu(z.m.map(u));case"Matrix2D":return new mz.c(z.m.map(u));case"Matrix3D":return new mz.e(z.m.map(u));default:return u(z)}}(0,J.f)("FlowGraphNaNBlock",t);class L extends R.b{constructor(z){super(v.x,v.x,(z=>this._polymorphicAbs(z)),"FlowGraphAbsBlock",z)}_polymorphicAbs(z){return V(z,Math.abs)}}(0,J.f)("FlowGraphAbsBlock",L);class O extends R.b{constructor(z){super(v.x,v.x,(z=>this._polymorphicSign(z)),"FlowGraphSignBlock",z)}_polymorphicSign(z){return V(z,Math.sign)}}(0,J.f)("FlowGraphSignBlock",O);class x extends R.b{constructor(z){super(v.x,v.x,(z=>this._polymorphicTrunc(z)),"FlowGraphTruncBlock",z)}_polymorphicTrunc(z){return V(z,Math.trunc)}}(0,J.f)("FlowGraphTruncBlock",x);class Q extends R.b{constructor(z){super(v.x,v.x,(z=>this._polymorphicFloor(z)),"FlowGraphFloorBlock",z)}_polymorphicFloor(z){return V(z,Math.floor)}}(0,J.f)("FlowGraphFloorBlock",Q);class K extends R.b{constructor(z){super(v.e,v.e,(z=>this._polymorphicCeiling(z)),"FlowGraphCeilBlock",z)}_polymorphicCeiling(z){return V(z,Math.ceil)}}(0,J.f)("FlowGraphCeilBlock",K);class Y extends R.b{constructor(z){super(v.e,v.e,(z=>this._polymorphicRound(z)),"FlowGraphRoundBlock",z)}_polymorphicRound(z){return V(z,(z=>{var u;return z<0&&null!==(u=this.config)&&void 0!==u&&u.roundHalfAwayFromZero?-Math.round(-z):Math.round(z)}))}}(0,J.f)("FlowGraphRoundBlock",Y);class p extends R.b{constructor(z){super(v.e,v.e,(z=>this._polymorphicFraction(z)),"FlowGraphFractBlock",z)}_polymorphicFraction(z){return V(z,(z=>z-Math.floor(z)))}}(0,J.f)("FlowGraphFractBlock",p);class N extends R.b{constructor(z){super(v.e,v.e,(z=>this._polymorphicNeg(z)),"FlowGraphNegationBlock",z)}_polymorphicNeg(z){return V(z,(z=>-z))}}function D(z,u,U){switch((0,Z.k)(z)){case"FlowGraphInteger":return new d.e(U(z.value,u.value));case"Vector2":return new P.Vector2(U(z.x,u.x),U(z.y,u.y));case"Eu":return new P.Eu(U(z.x,u.x),U(z.y,u.y),U(z.z,u.z));case"Vector4":return new P.Vector4(U(z.x,u.x),U(z.y,u.y),U(z.z,u.z),U(z.w,u.w));case"Quaternion":return new P.Quaternion(U(z.x,u.x),U(z.y,u.y),U(z.z,u.z),U(z.w,u.w));case"Matrix":return P.Matrix.Xu(z.m.map(((z,J)=>U(z,u.m[J]))));case"Matrix2D":return new mz.c(z.m.map(((z,J)=>U(z,u.m[J]))));case"Matrix3D":return new mz.e(z.m.map(((z,J)=>U(z,u.m[J]))));default:return U((0,Z.q)(z),(0,Z.q)(u))}}(0,J.f)("FlowGraphNegationBlock",N);class c extends f.d{constructor(z){super(v.e,v.e,v.e,((z,u)=>this._polymorphicRemainder(z,u)),"FlowGraphModuloBlock",z)}_polymorphicRemainder(z,u){return D(z,u,((z,u)=>z%u))}}(0,J.f)("FlowGraphModuloBlock",c);class W extends f.d{constructor(z){super(v.e,v.e,v.e,((z,u)=>this._polymorphicMin(z,u)),"FlowGraphMinBlock",z)}_polymorphicMin(z,u){return D(z,u,Math.min)}}(0,J.f)("FlowGraphMinBlock",W);class j extends f.d{constructor(z){super(v.e,v.e,v.e,((z,u)=>this._polymorphicMax(z,u)),"FlowGraphMaxBlock",z)}_polymorphicMax(z,u){return D(z,u,Math.max)}}function I(z,u,U){return Math.min(Math.max(z,Math.min(u,U)),Math.max(u,U))}function F(z,u,U,J){switch((0,Z.k)(z)){case"FlowGraphInteger":return new d.e(J(z.value,u.value,U.value));case"Vector2":return new P.Vector2(J(z.x,u.x,U.x),J(z.y,u.y,U.y));case"Eu":return new P.Eu(J(z.x,u.x,U.x),J(z.y,u.y,U.y),J(z.z,u.z,U.z));case"Vector4":return new P.Vector4(J(z.x,u.x,U.x),J(z.y,u.y,U.y),J(z.z,u.z,U.z),J(z.w,u.w,U.w));case"Quaternion":return new P.Quaternion(J(z.x,u.x,U.x),J(z.y,u.y,U.y),J(z.z,u.z,U.z),J(z.w,u.w,U.w));case"Matrix":return P.Matrix.Xu(z.m.map(((z,v)=>J(z,u.m[v],U.m[v]))));case"Matrix2D":return new mz.c(z.m.map(((z,v)=>J(z,u.m[v],U.m[v]))));case"Matrix3D":return new mz.e(z.m.map(((z,v)=>J(z,u.m[v],U.m[v]))));default:return J((0,Z.q)(z),(0,Z.q)(u),(0,Z.q)(U))}}(0,J.f)("FlowGraphMaxBlock",j);class b extends S{constructor(z){super(v.e,v.e,v.e,v.e,((z,u,U)=>this._polymorphicClamp(z,u,U)),"FlowGraphClampBlock",z)}_polymorphicClamp(z,u,U){return F(z,u,U,I)}}function k(z){return Math.min(Math.max(z,0),1)}(0,J.f)("FlowGraphClampBlock",b);class B extends R.b{constructor(z){super(v.e,v.e,(z=>this._polymorphicSaturate(z)),"FlowGraphSaturateBlock",z)}_polymorphicSaturate(z){return V(z,k)}}function y(z,u,U){return(1-U)*z+U*u}(0,J.f)("FlowGraphSaturateBlock",B);class H extends S{constructor(z){super(v.e,v.e,v.e,v.e,((z,u,U)=>this._polymorphicInterpolate(z,u,U)),"FlowGraphMathInterpolationBlock",z)}_polymorphicInterpolate(z,u,U){return F(z,u,U,y)}}(0,J.f)("FlowGraphMathInterpolationBlock",H);class G extends f.d{constructor(z){super(v.e,v.e,v.h,((z,u)=>this._polymorphicEq(z,u)),"FlowGraphEqualityBlock",z)}_polymorphicEq(z,u){const U=(0,Z.k)(z),J=(0,Z.k)(u);return typeof z===typeof u&&((0,Z.g)(U,J)||(0,Z.d)(U,J)||(0,Z.c)(U,J)?z.equals(u):z===u)}}function a(z,u,U){if((0,Z.r)(z)&&(0,Z.r)(u))return U((0,Z.q)(z),(0,Z.q)(u));throw new Error("Cannot compare ".concat(z," and ").concat(u))}(0,J.f)("FlowGraphEqualityBlock",G);class i extends f.d{constructor(z){super(v.e,v.e,v.h,((z,u)=>this._polymorphicLessThan(z,u)),"FlowGraphLessThanBlock",z)}_polymorphicLessThan(z,u){return a(z,u,((z,u)=>z<u))}}(0,J.f)("FlowGraphLessThanBlock",i);class n extends f.d{constructor(z){super(v.e,v.e,v.h,((z,u)=>this._polymorphicLessThanOrEqual(z,u)),"FlowGraphLessThanOrEqualBlock",z)}_polymorphicLessThanOrEqual(z,u){return a(z,u,((z,u)=>z<=u))}}(0,J.f)("FlowGraphLessThanOrEqualBlock",n);class q extends f.d{constructor(z){super(v.e,v.e,v.h,((z,u)=>this._polymorphicGreaterThan(z,u)),"FlowGraphGreaterThanBlock",z)}_polymorphicGreaterThan(z,u){return a(z,u,((z,u)=>z>u))}}(0,J.f)("FlowGraphGreaterThanBlock",q);class o extends f.d{constructor(z){super(v.e,v.e,v.h,((z,u)=>this._polymorphicGreaterThanOrEqual(z,u)),"FlowGraphGreaterThanOrEqualBlock",z)}_polymorphicGreaterThanOrEqual(z,u){return a(z,u,((z,u)=>z>=u))}}(0,J.f)("FlowGraphGreaterThanOrEqualBlock",o);class s extends R.b{constructor(z){super(v.e,v.h,(z=>this._polymorphicIsNan(z)),"FlowGraphIsNaNBlock",z)}_polymorphicIsNan(z){if((0,Z.r)(z,!0))return isNaN((0,Z.q)(z));throw new Error("Cannot get NaN of ".concat(z))}}(0,J.f)("FlowGraphIsNaNBlock",s);class l extends R.b{constructor(z){super(v.e,v.h,(z=>this._polymorphicIsInf(z)),"FlowGraphIsInfBlock",z)}_polymorphicIsInf(z){if((0,Z.r)(z))return!isFinite((0,Z.q)(z));throw new Error("Cannot get isInf of ".concat(z))}}(0,J.f)("FlowGraphIsInfBlock",l);class e extends R.b{constructor(z){super(v.e,v.e,(z=>this._polymorphicDegToRad(z)),"FlowGraphDegToRadBlock",z)}_degToRad(z){return z*Math.PI/180}_polymorphicDegToRad(z){return V(z,this._degToRad)}}(0,J.f)("FlowGraphDegToRadBlock",e);class zz extends R.b{constructor(z){super(v.e,v.e,(z=>this._polymorphicRadToDeg(z)),"FlowGraphRadToDegBlock",z)}_radToDeg(z){return 180*z/Math.PI}_polymorphicRadToDeg(z){return V(z,this._radToDeg)}}(0,J.f)("FlowGraphRadToDegBlock",zz);class uz extends R.b{constructor(z){super(v.x,v.x,(z=>this._polymorphicSin(z)),"FlowGraphSinBlock",z)}_polymorphicSin(z){return V(z,Math.sin)}}class Uz extends R.b{constructor(z){super(v.x,v.x,(z=>this._polymorphicCos(z)),"FlowGraphCosBlock",z)}_polymorphicCos(z){return V(z,Math.cos)}}class Jz extends R.b{constructor(z){super(v.x,v.x,(z=>this._polymorphicTan(z)),"FlowGraphTanBlock",z)}_polymorphicTan(z){return V(z,Math.tan)}}class vz extends R.b{constructor(z){super(v.x,v.x,(z=>this._polymorphicAsin(z)),"FlowGraphASinBlock",z)}_polymorphicAsin(z){return V(z,Math.asin)}}(0,J.f)("FlowGraphASinBlock",vz);class fz extends R.b{constructor(z){super(v.x,v.x,(z=>this._polymorphicAcos(z)),"FlowGraphACosBlock",z)}_polymorphicAcos(z){return V(z,Math.acos)}}(0,J.f)("FlowGraphACosBlock",fz);class gz extends R.b{constructor(z){super(v.x,v.x,(z=>this._polymorphicAtan(z)),"FlowGraphATanBlock",z)}_polymorphicAtan(z){return V(z,Math.atan)}}(0,J.f)("FlowGraphATanBlock",gz);class wz extends f.d{constructor(z){super(v.e,v.e,v.e,((z,u)=>this._polymorphicAtan2(z,u)),"FlowGraphATan2Block",z)}_polymorphicAtan2(z,u){return D(z,u,Math.atan2)}}(0,J.f)("FlowGraphATan2Block",wz);class Pz extends R.b{constructor(z){super(v.e,v.e,(z=>this._polymorphicSinh(z)),"FlowGraphSinhBlock",z)}_polymorphicSinh(z){return V(z,Math.sinh)}}(0,J.f)("FlowGraphSinhBlock",Pz);class Rz extends R.b{constructor(z){super(v.e,v.e,(z=>this._polymorphicCosh(z)),"FlowGraphCoshBlock",z)}_polymorphicCosh(z){return V(z,Math.cosh)}}(0,J.f)("FlowGraphCoshBlock",Rz);class Sz extends R.b{constructor(z){super(v.e,v.e,(z=>this._polymorphicTanh(z)),"FlowGraphTanhBlock",z)}_polymorphicTanh(z){return V(z,Math.tanh)}}(0,J.f)("FlowGraphTanhBlock",Sz);class dz extends R.b{constructor(z){super(v.e,v.x,(z=>this._polymorphicAsinh(z)),"FlowGraphASinhBlock",z)}_polymorphicAsinh(z){return V(z,Math.asinh)}}(0,J.f)("FlowGraphASinhBlock",dz);class mu extends R.b{constructor(z){super(v.e,v.x,(z=>this._polymorphicAcosh(z)),"FlowGraphACoshBlock",z)}_polymorphicAcosh(z){return V(z,Math.acosh)}}(0,J.f)("FlowGraphACoshBlock",mu);class Zz extends R.b{constructor(z){super(v.e,v.x,(z=>this._polymorphicAtanh(z)),"FlowGraphATanhBlock",z)}_polymorphicAtanh(z){return V(z,Math.atanh)}}(0,J.f)("FlowGraphATanhBlock",Zz);class Az extends R.b{constructor(z){super(v.e,v.x,(z=>this._polymorphicExp(z)),"FlowGraphExponentialBlock",z)}_polymorphicExp(z){return V(z,Math.exp)}}(0,J.f)("FlowGraphExponentialBlock",Az);class Ez extends R.b{constructor(z){super(v.e,v.x,(z=>this._polymorphicLog(z)),"FlowGraphLogBlock",z)}_polymorphicLog(z){return V(z,Math.log)}}(0,J.f)("FlowGraphLogBlock",Ez);class Cz extends R.b{constructor(z){super(v.e,v.x,(z=>this._polymorphicLog2(z)),"FlowGraphLog2Block",z)}_polymorphicLog2(z){return V(z,Math.log2)}}(0,J.f)("FlowGraphLog2Block",Cz);class rz extends R.b{constructor(z){super(v.e,v.x,(z=>this._polymorphicLog10(z)),"FlowGraphLog10Block",z)}_polymorphicLog10(z){return V(z,Math.log10)}}(0,J.f)("FlowGraphLog10Block",rz);class Mz extends R.b{constructor(z){super(v.e,v.x,(z=>this._polymorphicSqrt(z)),"FlowGraphSquareRootBlock",z)}_polymorphicSqrt(z){return V(z,Math.sqrt)}}(0,J.f)("FlowGraphSquareRootBlock",Mz);class Tz extends R.b{constructor(z){super(v.e,v.x,(z=>this._polymorphicCubeRoot(z)),"FlowGraphCubeRootBlock",z)}_polymorphicCubeRoot(z){return V(z,Math.cbrt)}}(0,J.f)("FlowGraphCubeRootBlock",Tz);class Xz extends f.d{constructor(z){super(v.e,v.x,v.x,((z,u)=>this._polymorphicPow(z,u)),"FlowGraphPowerBlock",z)}_polymorphicPow(z,u){return D(z,u,Math.pow)}}(0,J.f)("FlowGraphPowerBlock",Xz);class hz extends R.b{constructor(z){super((0,v.R)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),(0,v.R)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),(z=>"boolean"===typeof z?!z:"number"===typeof z?~z:new d.e(~z.value)),"FlowGraphBitwiseNotBlock",z)}}(0,J.f)("FlowGraphBitwiseNotBlock",hz);class tz extends f.d{constructor(z){super((0,v.R)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),(0,v.R)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),(0,v.R)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),((z,u)=>{if("boolean"===typeof z&&"boolean"===typeof u)return z&&u;if("number"===typeof z&&"number"===typeof u)return z&u;if("object"===typeof z&&"object"===typeof u)return new d.e(z.value&u.value);throw new Error("Cannot perform bitwise AND on ".concat(z," and ").concat(u))}),"FlowGraphBitwiseAndBlock",z)}}(0,J.f)("FlowGraphBitwiseAndBlock",tz);class Vz extends f.d{constructor(z){super((0,v.R)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),(0,v.R)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),(0,v.R)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),((z,u)=>{if("boolean"===typeof z&&"boolean"===typeof u)return z||u;if("number"===typeof z&&"number"===typeof u)return z|u;if("object"===typeof z&&"object"===typeof u)return new d.e(z.value|u.value);throw new Error("Cannot perform bitwise OR on ".concat(z," and ").concat(u))}),"FlowGraphBitwiseOrBlock",z)}}(0,J.f)("FlowGraphBitwiseOrBlock",Vz);class Lz extends f.d{constructor(z){super((0,v.R)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),(0,v.R)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),(0,v.R)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),((z,u)=>{if("boolean"===typeof z&&"boolean"===typeof u)return z!==u;if("number"===typeof z&&"number"===typeof u)return z^u;if("object"===typeof z&&"object"===typeof u)return new d.e(z.value^u.value);throw new Error("Cannot perform bitwise XOR on ".concat(z," and ").concat(u))}),"FlowGraphBitwiseXorBlock",z)}}(0,J.f)("FlowGraphBitwiseXorBlock",Lz);class Oz extends f.d{constructor(z){super(v.l,v.l,v.l,((z,u)=>new d.e(z.value<<u.value)),"FlowGraphBitwiseLeftShiftBlock",z)}}(0,J.f)("FlowGraphBitwiseLeftShiftBlock",Oz);class xz extends f.d{constructor(z){super(v.l,v.l,v.l,((z,u)=>new d.e(z.value>>u.value)),"FlowGraphBitwiseRightShiftBlock",z)}}(0,J.f)("FlowGraphBitwiseRightShiftBlock",xz);class Qz extends R.b{constructor(z){super(v.l,v.l,(z=>new d.e(Math.clz32(z.value))),"FlowGraphLeadingZerosBlock",z)}}(0,J.f)("FlowGraphLeadingZerosBlock",Qz);class Kz extends R.b{constructor(z){super(v.l,v.l,(z=>new d.e(z.value?31-Math.clz32(z.value&-z.value):32)),"FlowGraphTrailingZerosBlock",z)}}(0,J.f)("FlowGraphTrailingZerosBlock",Kz);class Yz extends R.b{constructor(z){super(v.l,v.l,(z=>new d.e(function(z){let u=0;for(;z;)u+=1&z,z>>=1;return u}(z.value))),"FlowGraphOneBitsCounterBlock",z)}}(0,J.f)("FlowGraphOneBitsCounterBlock",Yz)},15722:(z,u,U)=>{U.d(u,{d:()=>v});var J=U(15724);class v extends J.c{constructor(z,u,U,J,v,f){super(U,f),this._operation=J,this._className=v,this.a=this.registerDataInput("a",z),this.b=this.registerDataInput("b",u)}_doOperation(z){const u=this.a.getValue(z),U=this.b.getValue(z);return this._operation(u,U)}getClassName(){return this._className}}},15724:(z,u,U)=>{U.d(u,{c:()=>w});var J=U(14218),v=U(14196);const f="cachedOperationValue",g="cachedExecutionId";class w extends J.b{constructor(z,u){super(u),this.value=this.registerDataOutput("value",z),this.isValid=this.registerDataOutput("isValid",v.h)}_updateOutputs(z){const u=z._getExecutionVariable(this,g,-1),U=z._getExecutionVariable(this,f,null);if(void 0!==U&&null!==U&&u===z.executionId)this.isValid.setValue(!0,z),this.value.setValue(U,z);else try{const u=this._doOperation(z);if(void 0===u||null===u)return void this.isValid.setValue(!1,z);z._setExecutionVariable(this,f,u),z._setExecutionVariable(this,g,z.executionId),this.value.setValue(u,z),this.isValid.setValue(!0,z)}catch(J){this.isValid.setValue(!1,z)}}}},15728:(z,u,U)=>{U.d(u,{b:()=>v});var J=U(15724);class v extends J.c{constructor(z,u,U,J,v){super(u,v),this._operation=U,this._className=J,this.a=this.registerDataInput("a",z)}_doOperation(z){return this._operation(this.a.getValue(z))}getClassName(){return this._className}}}}]);