"use strict";(self.rsqbdnwe5e=self.rsqbdnwe5e||[]).push([[88],{15528:(N,p,T)=>{T.r(p),T.d(p,{FlowGraphAbsBlock:()=>F,FlowGraphAcosBlock:()=>CN,FlowGraphAcoshBlock:()=>bN,FlowGraphAddBlock:()=>k,FlowGraphAsinBlock:()=>aN,FlowGraphAsinhBlock:()=>MN,FlowGraphAtan2Block:()=>XN,FlowGraphAtanBlock:()=>UN,FlowGraphAtanhBlock:()=>lN,FlowGraphBitwiseAndBlock:()=>iN,FlowGraphBitwiseLeftShiftBlock:()=>vN,FlowGraphBitwiseNotBlock:()=>PN,FlowGraphBitwiseOrBlock:()=>KN,FlowGraphBitwiseRightShiftBlock:()=>WN,FlowGraphBitwiseXorBlock:()=>FN,FlowGraphCeilBlock:()=>R,FlowGraphClampBlock:()=>V,FlowGraphCosBlock:()=>TN,FlowGraphCoshBlock:()=>eN,FlowGraphCubeRootBlock:()=>wN,FlowGraphDegToRadBlock:()=>s,FlowGraphDivideBlock:()=>L,FlowGraphEBlock:()=>w,FlowGraphEqualityBlock:()=>c,FlowGraphExpBlock:()=>kN,FlowGraphFloorBlock:()=>z,FlowGraphFractionBlock:()=>f,FlowGraphGreaterThanBlock:()=>B,FlowGraphGreaterThanOrEqualBlock:()=>d,FlowGraphInfBlock:()=>P,FlowGraphIsInfinityBlock:()=>S,FlowGraphIsNanBlock:()=>t,FlowGraphLeadingZerosBlock:()=>zN,FlowGraphLessThanBlock:()=>E,FlowGraphLessThanOrEqualBlock:()=>O,FlowGraphLog10Block:()=>LN,FlowGraphLog2Block:()=>IN,FlowGraphLogBlock:()=>xN,FlowGraphMathInterpolationBlock:()=>D,FlowGraphMaxBlock:()=>q,FlowGraphMinBlock:()=>mN,FlowGraphModuloBlock:()=>Z,FlowGraphMultiplyBlock:()=>I,FlowGraphNaNBlock:()=>i,FlowGraphNegationBlock:()=>G,FlowGraphOneBitsCounterBlock:()=>JN,FlowGraphPiBlock:()=>g,FlowGraphPowerBlock:()=>gN,FlowGraphRadToDegBlock:()=>NN,FlowGraphRandomBlock:()=>n,FlowGraphRoundBlock:()=>J,FlowGraphSaturateBlock:()=>u,FlowGraphSignBlock:()=>v,FlowGraphSinBlock:()=>pN,FlowGraphSinhBlock:()=>yN,FlowGraphSquareRootBlock:()=>nN,FlowGraphSubtractBlock:()=>x,FlowGraphTanBlock:()=>AN,FlowGraphTanhBlock:()=>HN,FlowGraphTrailingZerosBlock:()=>RN,FlowGraphTruncBlock:()=>W});var A=T(12331),a=T(14082),C=T(15532),U=T(15541);class X extends U.d{constructor(N,p,T,A){super(N,A),this._operation=p,this._className=T}_doOperation(N){return this._operation(N)}getClassName(){return this._className}}var y=T(12371),e=T(15550);class H extends U.d{constructor(N,p,T,A,a,C,U){super(A,U),this._operation=a,this._className=C,this.a=this.registerDataInput("a",N),this.b=this.registerDataInput("b",p),this.c=this.registerDataInput("c",T)}_doOperation(N){return this._operation(this.a.getValue(N),this.b.getValue(N),this.c.getValue(N))}getClassName(){return this._className}}var M=T(14079),b=T(14084),l=T(14120);class k extends C.b{constructor(N){super((0,a.K)(null===N||void 0===N?void 0:N.type),(0,a.K)(null===N||void 0===N?void 0:N.type),(0,a.K)(null===N||void 0===N?void 0:N.type),((N,p)=>this._polymorphicAdd(N,p)),"FlowGraphAddBlock",N)}_polymorphicAdd(N,p){const T=(0,l.n)(N),A=(0,l.n)(p);if((0,l.j)(T,A)||(0,l.f)(T,A)||(0,l.e)(T,A))return N.add(p);if("Quaternion"===T||"Vector4"===A)return new y.Vector4(N.x,N.y,N.z,N.w).addInPlace(p);if("Vector4"===T||"Quaternion"===A)return N.add(p);var a;if(null!==(a=this.config)&&void 0!==a&&a.preventIntegerFloatArithmetic&&typeof N!==typeof p)throw new Error("Cannot add different types of numbers.");return(0,l.s)(N)+(0,l.s)(p)}}(0,A.d)("FlowGraphAddBlock",k);class x extends C.b{constructor(N){super((0,a.K)(null===N||void 0===N?void 0:N.type),(0,a.K)(null===N||void 0===N?void 0:N.type),(0,a.K)(null===N||void 0===N?void 0:N.type),((N,p)=>this._polymorphicSubtract(N,p)),"FlowGraphSubtractBlock",N)}_polymorphicSubtract(N,p){const T=(0,l.n)(N),A=(0,l.n)(p);if((0,l.j)(T,A)||(0,l.e)(T,A)||(0,l.f)(T,A))return N.Ip(p);if("Quaternion"===T||"Vector4"===A)return new y.Vector4(N.x,N.y,N.z,N.w).iM(p);if("Vector4"===T||"Quaternion"===A)return N.Ip(p);var a;if(null!==(a=this.config)&&void 0!==a&&a.preventIntegerFloatArithmetic&&typeof N!==typeof p)throw new Error("Cannot add different types of numbers.");return(0,l.s)(N)-(0,l.s)(p)}}(0,A.d)("FlowGraphSubtractBlock",x);class I extends C.b{constructor(N){super((0,a.K)(null===N||void 0===N?void 0:N.type),(0,a.K)(null===N||void 0===N?void 0:N.type),(0,a.K)(null===N||void 0===N?void 0:N.type),((N,p)=>this._polymorphicMultiply(N,p)),"FlowGraphMultiplyBlock",N)}_polymorphicMultiply(N,p){const T=(0,l.n)(N),A=(0,l.n)(p);if((0,l.j)(T,A)||(0,l.e)(T,A))return N.multiply(p);if("Quaternion"===T||"Vector4"===A)return new y.Vector4(N.x,N.y,N.z,N.w).multiplyInPlace(p);if("Vector4"===T||"Quaternion"===A)return N.multiply(p);if((0,l.f)(T,A)){var a;if(null!==(a=this.config)&&void 0!==a&&a.useMatrixPerComponent){const A=N.m;for(let N=0;N<A.length;N++)A[N]*=p.m[N];return"Matrix2D"===T?new b.c(A):"Matrix3D"===T?new b.g(A):y.Matrix.gp(A)}return p.multiply(N)}var C;if(null!==(C=this.config)&&void 0!==C&&C.preventIntegerFloatArithmetic&&typeof N!==typeof p)throw new Error("Cannot add different types of numbers.");return(0,l.s)(N)*(0,l.s)(p)}}(0,A.d)("FlowGraphMultiplyBlock",I);class L extends C.b{constructor(N){super((0,a.K)(null===N||void 0===N?void 0:N.type),(0,a.K)(null===N||void 0===N?void 0:N.type),(0,a.K)(null===N||void 0===N?void 0:N.type),((N,p)=>this._polymorphicDivide(N,p)),"FlowGraphDivideBlock",N)}_polymorphicDivide(N,p){const T=(0,l.n)(N),A=(0,l.n)(p);if((0,l.j)(T,A)||(0,l.e)(T,A))return N.divide(p);if("Quaternion"===T||"Quaternion"===A){const T=N.clone();return T.x/=p.x,T.y/=p.y,T.z/=p.z,T.w/=p.w,T}if("Quaternion"===T||"Vector4"===A)return new y.Vector4(N.x,N.y,N.z,N.w).divideInPlace(p);if("Vector4"===T||"Quaternion"===A)return N.divide(p);if((0,l.f)(T,A)){var a;if(null!==(a=this.config)&&void 0!==a&&a.useMatrixPerComponent){const A=N.m;for(let N=0;N<A.length;N++)A[N]/=p.m[N];return"Matrix2D"===T?new b.c(A):"Matrix3D"===T?new b.g(A):y.Matrix.gp(A)}return N.divide(p)}var C;if(null!==(C=this.config)&&void 0!==C&&C.preventIntegerFloatArithmetic&&typeof N!==typeof p)throw new Error("Cannot add different types of numbers.");return(0,l.s)(N)/(0,l.s)(p)}}(0,A.d)("FlowGraphDivideBlock",L);class n extends X{constructor(N){super(a.r,(N=>this._random(N)),"FlowGraphRandomBlock",N),this.min=this.registerDataInput("min",a.r,(null===N||void 0===N?void 0:N.min)??0),this.max=this.registerDataInput("max",a.r,(null===N||void 0===N?void 0:N.max)??1),null!==N&&void 0!==N&&N.seed&&(this._seed=N.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const N=1e4*Math.sin(this._seed++);return N-Math.floor(N)}return Math.random()}_random(N){const p=this.min.getValue(N),T=this.max.getValue(N);return this._getRandomValue()*(T-p)+p}}(0,A.d)("FlowGraphRandomBlock",n);class w extends X{constructor(N){super(a.r,(()=>Math.E),"FlowGraphEBlock",N)}}(0,A.d)("FlowGraphEBlock",w);class g extends X{constructor(N){super(a.r,(()=>Math.PI),"FlowGraphPIBlock",N)}}(0,A.d)("FlowGraphPIBlock",g);class P extends X{constructor(N){super(a.r,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",N)}}(0,A.d)("FlowGraphInfBlock",P);class i extends X{constructor(N){super(a.r,(()=>Number.NaN),"FlowGraphNaNBlock",N)}}function K(N,p){switch((0,l.n)(N)){case"FlowGraphInteger":return new M.c(p(N.value));case"Vector2":return new y.Vector2(p(N.x),p(N.y));case"xp":return new y.xp(p(N.x),p(N.y),p(N.z));case"Vector4":return new y.Vector4(p(N.x),p(N.y),p(N.z),p(N.w));case"Quaternion":return new y.Quaternion(p(N.x),p(N.y),p(N.z),p(N.w));case"Matrix":return y.Matrix.gp(N.m.map(p));case"Matrix2D":return new b.c(N.m.map(p));case"Matrix3D":return new b.g(N.m.map(p));default:return p(N)}}(0,A.d)("FlowGraphNaNBlock",i);class F extends e.e{constructor(N){super(a.r,a.r,(N=>this._polymorphicAbs(N)),"FlowGraphAbsBlock",N)}_polymorphicAbs(N){return K(N,Math.abs)}}(0,A.d)("FlowGraphAbsBlock",F);class v extends e.e{constructor(N){super(a.r,a.r,(N=>this._polymorphicSign(N)),"FlowGraphSignBlock",N)}_polymorphicSign(N){return K(N,Math.sign)}}(0,A.d)("FlowGraphSignBlock",v);class W extends e.e{constructor(N){super(a.r,a.r,(N=>this._polymorphicTrunc(N)),"FlowGraphTruncBlock",N)}_polymorphicTrunc(N){return K(N,Math.trunc)}}(0,A.d)("FlowGraphTruncBlock",W);class z extends e.e{constructor(N){super(a.r,a.r,(N=>this._polymorphicFloor(N)),"FlowGraphFloorBlock",N)}_polymorphicFloor(N){return K(N,Math.floor)}}(0,A.d)("FlowGraphFloorBlock",z);class R extends e.e{constructor(N){super(a.d,a.d,(N=>this._polymorphicCeiling(N)),"FlowGraphCeilBlock",N)}_polymorphicCeiling(N){return K(N,Math.ceil)}}(0,A.d)("FlowGraphCeilBlock",R);class J extends e.e{constructor(N){super(a.d,a.d,(N=>this._polymorphicRound(N)),"FlowGraphRoundBlock",N)}_polymorphicRound(N){return K(N,(N=>{var p;return N<0&&null!==(p=this.config)&&void 0!==p&&p.roundHalfAwayFromZero?-Math.round(-N):Math.round(N)}))}}(0,A.d)("FlowGraphRoundBlock",J);class f extends e.e{constructor(N){super(a.d,a.d,(N=>this._polymorphicFraction(N)),"FlowGraphFractBlock",N)}_polymorphicFraction(N){return K(N,(N=>N-Math.floor(N)))}}(0,A.d)("FlowGraphFractBlock",f);class G extends e.e{constructor(N){super(a.d,a.d,(N=>this._polymorphicNeg(N)),"FlowGraphNegationBlock",N)}_polymorphicNeg(N){return K(N,(N=>-N))}}function o(N,p,T){switch((0,l.n)(N)){case"FlowGraphInteger":return new M.c(T(N.value,p.value));case"Vector2":return new y.Vector2(T(N.x,p.x),T(N.y,p.y));case"xp":return new y.xp(T(N.x,p.x),T(N.y,p.y),T(N.z,p.z));case"Vector4":return new y.Vector4(T(N.x,p.x),T(N.y,p.y),T(N.z,p.z),T(N.w,p.w));case"Quaternion":return new y.Quaternion(T(N.x,p.x),T(N.y,p.y),T(N.z,p.z),T(N.w,p.w));case"Matrix":return y.Matrix.gp(N.m.map(((N,A)=>T(N,p.m[A]))));case"Matrix2D":return new b.c(N.m.map(((N,A)=>T(N,p.m[A]))));case"Matrix3D":return new b.g(N.m.map(((N,A)=>T(N,p.m[A]))));default:return T((0,l.s)(N),(0,l.s)(p))}}(0,A.d)("FlowGraphNegationBlock",G);class Z extends C.b{constructor(N){super(a.d,a.d,a.d,((N,p)=>this._polymorphicRemainder(N,p)),"FlowGraphModuloBlock",N)}_polymorphicRemainder(N,p){return o(N,p,((N,p)=>N%p))}}(0,A.d)("FlowGraphModuloBlock",Z);class mN extends C.b{constructor(N){super(a.d,a.d,a.d,((N,p)=>this._polymorphicMin(N,p)),"FlowGraphMinBlock",N)}_polymorphicMin(N,p){return o(N,p,Math.min)}}(0,A.d)("FlowGraphMinBlock",mN);class q extends C.b{constructor(N){super(a.d,a.d,a.d,((N,p)=>this._polymorphicMax(N,p)),"FlowGraphMaxBlock",N)}_polymorphicMax(N,p){return o(N,p,Math.max)}}function h(N,p,T){return Math.min(Math.max(N,Math.min(p,T)),Math.max(p,T))}function j(N,p,T,A){switch((0,l.n)(N)){case"FlowGraphInteger":return new M.c(A(N.value,p.value,T.value));case"Vector2":return new y.Vector2(A(N.x,p.x,T.x),A(N.y,p.y,T.y));case"xp":return new y.xp(A(N.x,p.x,T.x),A(N.y,p.y,T.y),A(N.z,p.z,T.z));case"Vector4":return new y.Vector4(A(N.x,p.x,T.x),A(N.y,p.y,T.y),A(N.z,p.z,T.z),A(N.w,p.w,T.w));case"Quaternion":return new y.Quaternion(A(N.x,p.x,T.x),A(N.y,p.y,T.y),A(N.z,p.z,T.z),A(N.w,p.w,T.w));case"Matrix":return y.Matrix.gp(N.m.map(((N,a)=>A(N,p.m[a],T.m[a]))));case"Matrix2D":return new b.c(N.m.map(((N,a)=>A(N,p.m[a],T.m[a]))));case"Matrix3D":return new b.g(N.m.map(((N,a)=>A(N,p.m[a],T.m[a]))));default:return A((0,l.s)(N),(0,l.s)(p),(0,l.s)(T))}}(0,A.d)("FlowGraphMaxBlock",q);class V extends H{constructor(N){super(a.d,a.d,a.d,a.d,((N,p,T)=>this._polymorphicClamp(N,p,T)),"FlowGraphClampBlock",N)}_polymorphicClamp(N,p,T){return j(N,p,T,h)}}function r(N){return Math.min(Math.max(N,0),1)}(0,A.d)("FlowGraphClampBlock",V);class u extends e.e{constructor(N){super(a.d,a.d,(N=>this._polymorphicSaturate(N)),"FlowGraphSaturateBlock",N)}_polymorphicSaturate(N){return K(N,r)}}function Y(N,p,T){return(1-T)*N+T*p}(0,A.d)("FlowGraphSaturateBlock",u);class D extends H{constructor(N){super(a.d,a.d,a.d,a.d,((N,p,T)=>this._polymorphicInterpolate(N,p,T)),"FlowGraphMathInterpolationBlock",N)}_polymorphicInterpolate(N,p,T){return j(N,p,T,Y)}}(0,A.d)("FlowGraphMathInterpolationBlock",D);class c extends C.b{constructor(N){super(a.d,a.d,a.g,((N,p)=>this._polymorphicEq(N,p)),"FlowGraphEqualityBlock",N)}_polymorphicEq(N,p){const T=(0,l.n)(N),A=(0,l.n)(p);return typeof N===typeof p&&((0,l.j)(T,A)||(0,l.f)(T,A)||(0,l.e)(T,A)?N.equals(p):N===p)}}function Q(N,p,T){if((0,l.u)(N)&&(0,l.u)(p))return T((0,l.s)(N),(0,l.s)(p));throw new Error(`Cannot compare ${N} and ${p}`)}(0,A.d)("FlowGraphEqualityBlock",c);class E extends C.b{constructor(N){super(a.d,a.d,a.g,((N,p)=>this._polymorphicLessThan(N,p)),"FlowGraphLessThanBlock",N)}_polymorphicLessThan(N,p){return Q(N,p,((N,p)=>N<p))}}(0,A.d)("FlowGraphLessThanBlock",E);class O extends C.b{constructor(N){super(a.d,a.d,a.g,((N,p)=>this._polymorphicLessThanOrEqual(N,p)),"FlowGraphLessThanOrEqualBlock",N)}_polymorphicLessThanOrEqual(N,p){return Q(N,p,((N,p)=>N<=p))}}(0,A.d)("FlowGraphLessThanOrEqualBlock",O);class B extends C.b{constructor(N){super(a.d,a.d,a.g,((N,p)=>this._polymorphicGreaterThan(N,p)),"FlowGraphGreaterThanBlock",N)}_polymorphicGreaterThan(N,p){return Q(N,p,((N,p)=>N>p))}}(0,A.d)("FlowGraphGreaterThanBlock",B);class d extends C.b{constructor(N){super(a.d,a.d,a.g,((N,p)=>this._polymorphicGreaterThanOrEqual(N,p)),"FlowGraphGreaterThanOrEqualBlock",N)}_polymorphicGreaterThanOrEqual(N,p){return Q(N,p,((N,p)=>N>=p))}}(0,A.d)("FlowGraphGreaterThanOrEqualBlock",d);class t extends e.e{constructor(N){super(a.d,a.g,(N=>this._polymorphicIsNan(N)),"FlowGraphIsNaNBlock",N)}_polymorphicIsNan(N){if((0,l.u)(N,!0))return isNaN((0,l.s)(N));throw new Error(`Cannot get NaN of ${N}`)}}(0,A.d)("FlowGraphIsNaNBlock",t);class S extends e.e{constructor(N){super(a.d,a.g,(N=>this._polymorphicIsInf(N)),"FlowGraphIsInfBlock",N)}_polymorphicIsInf(N){if((0,l.u)(N))return!isFinite((0,l.s)(N));throw new Error(`Cannot get isInf of ${N}`)}}(0,A.d)("FlowGraphIsInfBlock",S);class s extends e.e{constructor(N){super(a.d,a.d,(N=>this._polymorphicDegToRad(N)),"FlowGraphDegToRadBlock",N)}_degToRad(N){return N*Math.PI/180}_polymorphicDegToRad(N){return K(N,this._degToRad)}}(0,A.d)("FlowGraphDegToRadBlock",s);class NN extends e.e{constructor(N){super(a.d,a.d,(N=>this._polymorphicRadToDeg(N)),"FlowGraphRadToDegBlock",N)}_radToDeg(N){return 180*N/Math.PI}_polymorphicRadToDeg(N){return K(N,this._radToDeg)}}(0,A.d)("FlowGraphRadToDegBlock",NN);class pN extends e.e{constructor(N){super(a.r,a.r,(N=>this._polymorphicSin(N)),"FlowGraphSinBlock",N)}_polymorphicSin(N){return K(N,Math.sin)}}class TN extends e.e{constructor(N){super(a.r,a.r,(N=>this._polymorphicCos(N)),"FlowGraphCosBlock",N)}_polymorphicCos(N){return K(N,Math.cos)}}class AN extends e.e{constructor(N){super(a.r,a.r,(N=>this._polymorphicTan(N)),"FlowGraphTanBlock",N)}_polymorphicTan(N){return K(N,Math.tan)}}class aN extends e.e{constructor(N){super(a.r,a.r,(N=>this._polymorphicAsin(N)),"FlowGraphASinBlock",N)}_polymorphicAsin(N){return K(N,Math.asin)}}(0,A.d)("FlowGraphASinBlock",aN);class CN extends e.e{constructor(N){super(a.r,a.r,(N=>this._polymorphicAcos(N)),"FlowGraphACosBlock",N)}_polymorphicAcos(N){return K(N,Math.acos)}}(0,A.d)("FlowGraphACosBlock",CN);class UN extends e.e{constructor(N){super(a.r,a.r,(N=>this._polymorphicAtan(N)),"FlowGraphATanBlock",N)}_polymorphicAtan(N){return K(N,Math.atan)}}(0,A.d)("FlowGraphATanBlock",UN);class XN extends C.b{constructor(N){super(a.d,a.d,a.d,((N,p)=>this._polymorphicAtan2(N,p)),"FlowGraphATan2Block",N)}_polymorphicAtan2(N,p){return o(N,p,Math.atan2)}}(0,A.d)("FlowGraphATan2Block",XN);class yN extends e.e{constructor(N){super(a.d,a.d,(N=>this._polymorphicSinh(N)),"FlowGraphSinhBlock",N)}_polymorphicSinh(N){return K(N,Math.sinh)}}(0,A.d)("FlowGraphSinhBlock",yN);class eN extends e.e{constructor(N){super(a.d,a.d,(N=>this._polymorphicCosh(N)),"FlowGraphCoshBlock",N)}_polymorphicCosh(N){return K(N,Math.cosh)}}(0,A.d)("FlowGraphCoshBlock",eN);class HN extends e.e{constructor(N){super(a.d,a.d,(N=>this._polymorphicTanh(N)),"FlowGraphTanhBlock",N)}_polymorphicTanh(N){return K(N,Math.tanh)}}(0,A.d)("FlowGraphTanhBlock",HN);class MN extends e.e{constructor(N){super(a.d,a.r,(N=>this._polymorphicAsinh(N)),"FlowGraphASinhBlock",N)}_polymorphicAsinh(N){return K(N,Math.asinh)}}(0,A.d)("FlowGraphASinhBlock",MN);class bN extends e.e{constructor(N){super(a.d,a.r,(N=>this._polymorphicAcosh(N)),"FlowGraphACoshBlock",N)}_polymorphicAcosh(N){return K(N,Math.acosh)}}(0,A.d)("FlowGraphACoshBlock",bN);class lN extends e.e{constructor(N){super(a.d,a.r,(N=>this._polymorphicAtanh(N)),"FlowGraphATanhBlock",N)}_polymorphicAtanh(N){return K(N,Math.atanh)}}(0,A.d)("FlowGraphATanhBlock",lN);class kN extends e.e{constructor(N){super(a.d,a.r,(N=>this._polymorphicExp(N)),"FlowGraphExponentialBlock",N)}_polymorphicExp(N){return K(N,Math.exp)}}(0,A.d)("FlowGraphExponentialBlock",kN);class xN extends e.e{constructor(N){super(a.d,a.r,(N=>this._polymorphicLog(N)),"FlowGraphLogBlock",N)}_polymorphicLog(N){return K(N,Math.log)}}(0,A.d)("FlowGraphLogBlock",xN);class IN extends e.e{constructor(N){super(a.d,a.r,(N=>this._polymorphicLog2(N)),"FlowGraphLog2Block",N)}_polymorphicLog2(N){return K(N,Math.log2)}}(0,A.d)("FlowGraphLog2Block",IN);class LN extends e.e{constructor(N){super(a.d,a.r,(N=>this._polymorphicLog10(N)),"FlowGraphLog10Block",N)}_polymorphicLog10(N){return K(N,Math.log10)}}(0,A.d)("FlowGraphLog10Block",LN);class nN extends e.e{constructor(N){super(a.d,a.r,(N=>this._polymorphicSqrt(N)),"FlowGraphSquareRootBlock",N)}_polymorphicSqrt(N){return K(N,Math.sqrt)}}(0,A.d)("FlowGraphSquareRootBlock",nN);class wN extends e.e{constructor(N){super(a.d,a.r,(N=>this._polymorphicCubeRoot(N)),"FlowGraphCubeRootBlock",N)}_polymorphicCubeRoot(N){return K(N,Math.cbrt)}}(0,A.d)("FlowGraphCubeRootBlock",wN);class gN extends C.b{constructor(N){super(a.d,a.r,a.r,((N,p)=>this._polymorphicPow(N,p)),"FlowGraphPowerBlock",N)}_polymorphicPow(N,p){return o(N,p,Math.pow)}}(0,A.d)("FlowGraphPowerBlock",gN);class PN extends e.e{constructor(N){super((0,a.K)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,a.K)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(N=>"boolean"===typeof N?!N:"number"===typeof N?~N:new M.c(~N.value)),"FlowGraphBitwiseNotBlock",N)}}(0,A.d)("FlowGraphBitwiseNotBlock",PN);class iN extends C.b{constructor(N){super((0,a.K)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,a.K)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,a.K)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),((N,p)=>{if("boolean"===typeof N&&"boolean"===typeof p)return N&&p;if("number"===typeof N&&"number"===typeof p)return N&p;if("object"===typeof N&&"object"===typeof p)return new M.c(N.value&p.value);throw new Error(`Cannot perform bitwise AND on ${N} and ${p}`)}),"FlowGraphBitwiseAndBlock",N)}}(0,A.d)("FlowGraphBitwiseAndBlock",iN);class KN extends C.b{constructor(N){super((0,a.K)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,a.K)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,a.K)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),((N,p)=>{if("boolean"===typeof N&&"boolean"===typeof p)return N||p;if("number"===typeof N&&"number"===typeof p)return N|p;if("object"===typeof N&&"object"===typeof p)return new M.c(N.value|p.value);throw new Error(`Cannot perform bitwise OR on ${N} and ${p}`)}),"FlowGraphBitwiseOrBlock",N)}}(0,A.d)("FlowGraphBitwiseOrBlock",KN);class FN extends C.b{constructor(N){super((0,a.K)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,a.K)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,a.K)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),((N,p)=>{if("boolean"===typeof N&&"boolean"===typeof p)return N!==p;if("number"===typeof N&&"number"===typeof p)return N^p;if("object"===typeof N&&"object"===typeof p)return new M.c(N.value^p.value);throw new Error(`Cannot perform bitwise XOR on ${N} and ${p}`)}),"FlowGraphBitwiseXorBlock",N)}}(0,A.d)("FlowGraphBitwiseXorBlock",FN);class vN extends C.b{constructor(N){super(a.h,a.h,a.h,((N,p)=>new M.c(N.value<<p.value)),"FlowGraphBitwiseLeftShiftBlock",N)}}(0,A.d)("FlowGraphBitwiseLeftShiftBlock",vN);class WN extends C.b{constructor(N){super(a.h,a.h,a.h,((N,p)=>new M.c(N.value>>p.value)),"FlowGraphBitwiseRightShiftBlock",N)}}(0,A.d)("FlowGraphBitwiseRightShiftBlock",WN);class zN extends e.e{constructor(N){super(a.h,a.h,(N=>new M.c(Math.clz32(N.value))),"FlowGraphLeadingZerosBlock",N)}}(0,A.d)("FlowGraphLeadingZerosBlock",zN);class RN extends e.e{constructor(N){super(a.h,a.h,(N=>new M.c(N.value?31-Math.clz32(N.value&-N.value):32)),"FlowGraphTrailingZerosBlock",N)}}(0,A.d)("FlowGraphTrailingZerosBlock",RN);class JN extends e.e{constructor(N){super(a.h,a.h,(N=>new M.c(function(N){let p=0;for(;N;)p+=1&N,N>>=1;return p}(N.value))),"FlowGraphOneBitsCounterBlock",N)}}(0,A.d)("FlowGraphOneBitsCounterBlock",JN)},15532:(N,p,T)=>{T.d(p,{b:()=>a});var A=T(15541);class a extends A.d{constructor(N,p,T,A,a,C){super(T,C),this._operation=A,this._className=a,this.a=this.registerDataInput("a",N),this.b=this.registerDataInput("b",p)}_doOperation(N){const p=this.a.getValue(N),T=this.b.getValue(N);return this._operation(p,T)}getClassName(){return this._className}}},15541:(N,p,T)=>{T.d(p,{d:()=>X});var A=T(14108),a=T(14082);const C="cachedOperationValue",U="cachedExecutionId";class X extends A.c{constructor(N,p){super(p),this.value=this.registerDataOutput("value",N),this.isValid=this.registerDataOutput("isValid",a.g)}_updateOutputs(N){const p=N._getExecutionVariable(this,U,-1),T=N._getExecutionVariable(this,C,null);if(void 0!==T&&null!==T&&p===N.executionId)this.isValid.setValue(!0,N),this.value.setValue(T,N);else try{const p=this._doOperation(N);if(void 0===p||null===p)return void this.isValid.setValue(!1,N);N._setExecutionVariable(this,C,p),N._setExecutionVariable(this,U,N.executionId),this.value.setValue(p,N),this.isValid.setValue(!0,N)}catch(A){this.isValid.setValue(!1,N)}}}},15550:(N,p,T)=>{T.d(p,{e:()=>a});var A=T(15541);class a extends A.d{constructor(N,p,T,A,a){super(p,a),this._operation=T,this._className=A,this.a=this.registerDataInput("a",N)}_doOperation(N){return this._operation(this.a.getValue(N))}getClassName(){return this._className}}}}]);