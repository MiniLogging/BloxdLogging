"use strict";(self.irtrrknfyfo=self.irtrrknfyfo||[]).push([[88],{14571:(B,E,v)=>{v.r(E),v.d(E,{FlowGraphAbsBlock:()=>i,FlowGraphAcosBlock:()=>qB,FlowGraphAcoshBlock:()=>QB,FlowGraphAddBlock:()=>G,FlowGraphAsinBlock:()=>oB,FlowGraphAsinhBlock:()=>yB,FlowGraphAtan2Block:()=>SB,FlowGraphAtanBlock:()=>cB,FlowGraphAtanhBlock:()=>PB,FlowGraphBitwiseAndBlock:()=>XB,FlowGraphBitwiseLeftShiftBlock:()=>uB,FlowGraphBitwiseNotBlock:()=>NB,FlowGraphBitwiseOrBlock:()=>rB,FlowGraphBitwiseRightShiftBlock:()=>IB,FlowGraphBitwiseXorBlock:()=>iB,FlowGraphCeilBlock:()=>C,FlowGraphClampBlock:()=>b,FlowGraphCosBlock:()=>vB,FlowGraphCoshBlock:()=>DB,FlowGraphCubeRootBlock:()=>VB,FlowGraphDegToRadBlock:()=>Z,FlowGraphDivideBlock:()=>m,FlowGraphEBlock:()=>V,FlowGraphEqualityBlock:()=>U,FlowGraphExpBlock:()=>GB,FlowGraphFloorBlock:()=>K,FlowGraphFractionBlock:()=>A,FlowGraphGreaterThanBlock:()=>e,FlowGraphGreaterThanOrEqualBlock:()=>k,FlowGraphInfBlock:()=>N,FlowGraphIsInfinityBlock:()=>M,FlowGraphIsNanBlock:()=>L,FlowGraphLeadingZerosBlock:()=>KB,FlowGraphLessThanBlock:()=>J,FlowGraphLessThanOrEqualBlock:()=>O,FlowGraphLog10Block:()=>mB,FlowGraphLog2Block:()=>aB,FlowGraphLogBlock:()=>YB,FlowGraphMathInterpolationBlock:()=>n,FlowGraphMaxBlock:()=>H,FlowGraphMinBlock:()=>p,FlowGraphModuloBlock:()=>t,FlowGraphMultiplyBlock:()=>a,FlowGraphNaNBlock:()=>X,FlowGraphNegationBlock:()=>l,FlowGraphOneBitsCounterBlock:()=>fB,FlowGraphPiBlock:()=>T,FlowGraphPowerBlock:()=>TB,FlowGraphRadToDegBlock:()=>BB,FlowGraphRandomBlock:()=>g,FlowGraphRoundBlock:()=>f,FlowGraphSaturateBlock:()=>W,FlowGraphSignBlock:()=>u,FlowGraphSinBlock:()=>EB,FlowGraphSinhBlock:()=>xB,FlowGraphSquareRootBlock:()=>gB,FlowGraphSubtractBlock:()=>Y,FlowGraphTanBlock:()=>zB,FlowGraphTanhBlock:()=>hB,FlowGraphTrailingZerosBlock:()=>CB,FlowGraphTruncBlock:()=>I});var z=v(11345),o=v(13102),q=v(14579),c=v(14588);class S extends c.b{constructor(B,E,v,z){super(B,z),this._operation=E,this._className=v}_doOperation(B){return this._operation(B)}getClassName(){return this._className}}var x=v(11380),D=v(14595);class h extends c.b{constructor(B,E,v,z,o,q,c){super(z,c),this._operation=o,this._className=q,this.a=this.registerDataInput("a",B),this.b=this.registerDataInput("b",E),this.c=this.registerDataInput("c",v)}_doOperation(B){return this._operation(this.a.getValue(B),this.b.getValue(B),this.c.getValue(B))}getClassName(){return this._className}}var y=v(13099),Q=v(13111),P=v(13133);class G extends q.c{constructor(B){super((0,o.Q)(null===B||void 0===B?void 0:B.type),(0,o.Q)(null===B||void 0===B?void 0:B.type),(0,o.Q)(null===B||void 0===B?void 0:B.type),((B,E)=>this._polymorphicAdd(B,E)),"FlowGraphAddBlock",B)}_polymorphicAdd(B,E){const v=(0,P.m)(B),z=(0,P.m)(E);if((0,P.i)(v,z)||(0,P.g)(v,z)||(0,P.d)(v,z))return B.add(E);if("Quaternion"===v||"Vector4"===z)return new x.Vector4(B.x,B.y,B.z,B.w).addInPlace(E);if("Vector4"===v||"Quaternion"===z)return B.add(E);var o;if(null!==(o=this.config)&&void 0!==o&&o.preventIntegerFloatArithmetic&&typeof B!==typeof E)throw new Error("Cannot add different types of numbers.");return(0,P.r)(B)+(0,P.r)(E)}}(0,z.f)("FlowGraphAddBlock",G);class Y extends q.c{constructor(B){super((0,o.Q)(null===B||void 0===B?void 0:B.type),(0,o.Q)(null===B||void 0===B?void 0:B.type),(0,o.Q)(null===B||void 0===B?void 0:B.type),((B,E)=>this._polymorphicSubtract(B,E)),"FlowGraphSubtractBlock",B)}_polymorphicSubtract(B,E){const v=(0,P.m)(B),z=(0,P.m)(E);if((0,P.i)(v,z)||(0,P.d)(v,z)||(0,P.g)(v,z))return B.YE(E);if("Quaternion"===v||"Vector4"===z)return new x.Vector4(B.x,B.y,B.z,B.w).wy(E);if("Vector4"===v||"Quaternion"===z)return B.YE(E);var o;if(null!==(o=this.config)&&void 0!==o&&o.preventIntegerFloatArithmetic&&typeof B!==typeof E)throw new Error("Cannot add different types of numbers.");return(0,P.r)(B)-(0,P.r)(E)}}(0,z.f)("FlowGraphSubtractBlock",Y);class a extends q.c{constructor(B){super((0,o.Q)(null===B||void 0===B?void 0:B.type),(0,o.Q)(null===B||void 0===B?void 0:B.type),(0,o.Q)(null===B||void 0===B?void 0:B.type),((B,E)=>this._polymorphicMultiply(B,E)),"FlowGraphMultiplyBlock",B)}_polymorphicMultiply(B,E){const v=(0,P.m)(B),z=(0,P.m)(E);if((0,P.i)(v,z)||(0,P.d)(v,z))return B.multiply(E);if("Quaternion"===v||"Vector4"===z)return new x.Vector4(B.x,B.y,B.z,B.w).multiplyInPlace(E);if("Vector4"===v||"Quaternion"===z)return B.multiply(E);if((0,P.g)(v,z)){var o;if(null!==(o=this.config)&&void 0!==o&&o.useMatrixPerComponent){const z=B.m;for(let B=0;B<z.length;B++)z[B]*=E.m[B];return"Matrix2D"===v?new Q.c(z):"Matrix3D"===v?new Q.g(z):x.Matrix.VE(z)}return E.multiply(B)}var q;if(null!==(q=this.config)&&void 0!==q&&q.preventIntegerFloatArithmetic&&typeof B!==typeof E)throw new Error("Cannot add different types of numbers.");return(0,P.r)(B)*(0,P.r)(E)}}(0,z.f)("FlowGraphMultiplyBlock",a);class m extends q.c{constructor(B){super((0,o.Q)(null===B||void 0===B?void 0:B.type),(0,o.Q)(null===B||void 0===B?void 0:B.type),(0,o.Q)(null===B||void 0===B?void 0:B.type),((B,E)=>this._polymorphicDivide(B,E)),"FlowGraphDivideBlock",B)}_polymorphicDivide(B,E){const v=(0,P.m)(B),z=(0,P.m)(E);if((0,P.i)(v,z)||(0,P.d)(v,z))return B.divide(E);if("Quaternion"===v||"Quaternion"===z){const v=B.clone();return v.x/=E.x,v.y/=E.y,v.z/=E.z,v.w/=E.w,v}if("Quaternion"===v||"Vector4"===z)return new x.Vector4(B.x,B.y,B.z,B.w).divideInPlace(E);if("Vector4"===v||"Quaternion"===z)return B.divide(E);if((0,P.g)(v,z)){var o;if(null!==(o=this.config)&&void 0!==o&&o.useMatrixPerComponent){const z=B.m;for(let B=0;B<z.length;B++)z[B]/=E.m[B];return"Matrix2D"===v?new Q.c(z):"Matrix3D"===v?new Q.g(z):x.Matrix.VE(z)}return B.divide(E)}var q;if(null!==(q=this.config)&&void 0!==q&&q.preventIntegerFloatArithmetic&&typeof B!==typeof E)throw new Error("Cannot add different types of numbers.");return(0,P.r)(B)/(0,P.r)(E)}}(0,z.f)("FlowGraphDivideBlock",m);class g extends S{constructor(B){super(o.v,(B=>this._random(B)),"FlowGraphRandomBlock",B),this.min=this.registerDataInput("min",o.v,(null===B||void 0===B?void 0:B.min)??0),this.max=this.registerDataInput("max",o.v,(null===B||void 0===B?void 0:B.max)??1),null!==B&&void 0!==B&&B.seed&&(this._seed=B.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const B=1e4*Math.sin(this._seed++);return B-Math.floor(B)}return Math.random()}_random(B){const E=this.min.getValue(B),v=this.max.getValue(B);return this._getRandomValue()*(v-E)+E}}(0,z.f)("FlowGraphRandomBlock",g);class V extends S{constructor(B){super(o.v,(()=>Math.E),"FlowGraphEBlock",B)}}(0,z.f)("FlowGraphEBlock",V);class T extends S{constructor(B){super(o.v,(()=>Math.PI),"FlowGraphPIBlock",B)}}(0,z.f)("FlowGraphPIBlock",T);class N extends S{constructor(B){super(o.v,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",B)}}(0,z.f)("FlowGraphInfBlock",N);class X extends S{constructor(B){super(o.v,(()=>Number.NaN),"FlowGraphNaNBlock",B)}}function r(B,E){switch((0,P.m)(B)){case"FlowGraphInteger":return new y.d(E(B.value));case"Vector2":return new x.Vector2(E(B.x),E(B.y));case"GE":return new x.GE(E(B.x),E(B.y),E(B.z));case"Vector4":return new x.Vector4(E(B.x),E(B.y),E(B.z),E(B.w));case"Quaternion":return new x.Quaternion(E(B.x),E(B.y),E(B.z),E(B.w));case"Matrix":return x.Matrix.VE(B.m.map(E));case"Matrix2D":return new Q.c(B.m.map(E));case"Matrix3D":return new Q.g(B.m.map(E));default:return E(B)}}(0,z.f)("FlowGraphNaNBlock",X);class i extends D.d{constructor(B){super(o.v,o.v,(B=>this._polymorphicAbs(B)),"FlowGraphAbsBlock",B)}_polymorphicAbs(B){return r(B,Math.abs)}}(0,z.f)("FlowGraphAbsBlock",i);class u extends D.d{constructor(B){super(o.v,o.v,(B=>this._polymorphicSign(B)),"FlowGraphSignBlock",B)}_polymorphicSign(B){return r(B,Math.sign)}}(0,z.f)("FlowGraphSignBlock",u);class I extends D.d{constructor(B){super(o.v,o.v,(B=>this._polymorphicTrunc(B)),"FlowGraphTruncBlock",B)}_polymorphicTrunc(B){return r(B,Math.trunc)}}(0,z.f)("FlowGraphTruncBlock",I);class K extends D.d{constructor(B){super(o.v,o.v,(B=>this._polymorphicFloor(B)),"FlowGraphFloorBlock",B)}_polymorphicFloor(B){return r(B,Math.floor)}}(0,z.f)("FlowGraphFloorBlock",K);class C extends D.d{constructor(B){super(o.c,o.c,(B=>this._polymorphicCeiling(B)),"FlowGraphCeilBlock",B)}_polymorphicCeiling(B){return r(B,Math.ceil)}}(0,z.f)("FlowGraphCeilBlock",C);class f extends D.d{constructor(B){super(o.c,o.c,(B=>this._polymorphicRound(B)),"FlowGraphRoundBlock",B)}_polymorphicRound(B){return r(B,(B=>{var E;return B<0&&null!==(E=this.config)&&void 0!==E&&E.roundHalfAwayFromZero?-Math.round(-B):Math.round(B)}))}}(0,z.f)("FlowGraphRoundBlock",f);class A extends D.d{constructor(B){super(o.c,o.c,(B=>this._polymorphicFraction(B)),"FlowGraphFractBlock",B)}_polymorphicFraction(B){return r(B,(B=>B-Math.floor(B)))}}(0,z.f)("FlowGraphFractBlock",A);class l extends D.d{constructor(B){super(o.c,o.c,(B=>this._polymorphicNeg(B)),"FlowGraphNegationBlock",B)}_polymorphicNeg(B){return r(B,(B=>-B))}}function d(B,E,v){switch((0,P.m)(B)){case"FlowGraphInteger":return new y.d(v(B.value,E.value));case"Vector2":return new x.Vector2(v(B.x,E.x),v(B.y,E.y));case"GE":return new x.GE(v(B.x,E.x),v(B.y,E.y),v(B.z,E.z));case"Vector4":return new x.Vector4(v(B.x,E.x),v(B.y,E.y),v(B.z,E.z),v(B.w,E.w));case"Quaternion":return new x.Quaternion(v(B.x,E.x),v(B.y,E.y),v(B.z,E.z),v(B.w,E.w));case"Matrix":return x.Matrix.VE(B.m.map(((B,z)=>v(B,E.m[z]))));case"Matrix2D":return new Q.c(B.m.map(((B,z)=>v(B,E.m[z]))));case"Matrix3D":return new Q.g(B.m.map(((B,z)=>v(B,E.m[z]))));default:return v((0,P.r)(B),(0,P.r)(E))}}(0,z.f)("FlowGraphNegationBlock",l);class t extends q.c{constructor(B){super(o.c,o.c,o.c,((B,E)=>this._polymorphicRemainder(B,E)),"FlowGraphModuloBlock",B)}_polymorphicRemainder(B,E){return d(B,E,((B,E)=>B%E))}}(0,z.f)("FlowGraphModuloBlock",t);class p extends q.c{constructor(B){super(o.c,o.c,o.c,((B,E)=>this._polymorphicMin(B,E)),"FlowGraphMinBlock",B)}_polymorphicMin(B,E){return d(B,E,Math.min)}}(0,z.f)("FlowGraphMinBlock",p);class H extends q.c{constructor(B){super(o.c,o.c,o.c,((B,E)=>this._polymorphicMax(B,E)),"FlowGraphMaxBlock",B)}_polymorphicMax(B,E){return d(B,E,Math.max)}}function j(B,E,v){return Math.min(Math.max(B,Math.min(E,v)),Math.max(E,v))}function R(B,E,v,z){switch((0,P.m)(B)){case"FlowGraphInteger":return new y.d(z(B.value,E.value,v.value));case"Vector2":return new x.Vector2(z(B.x,E.x,v.x),z(B.y,E.y,v.y));case"GE":return new x.GE(z(B.x,E.x,v.x),z(B.y,E.y,v.y),z(B.z,E.z,v.z));case"Vector4":return new x.Vector4(z(B.x,E.x,v.x),z(B.y,E.y,v.y),z(B.z,E.z,v.z),z(B.w,E.w,v.w));case"Quaternion":return new x.Quaternion(z(B.x,E.x,v.x),z(B.y,E.y,v.y),z(B.z,E.z,v.z),z(B.w,E.w,v.w));case"Matrix":return x.Matrix.VE(B.m.map(((B,o)=>z(B,E.m[o],v.m[o]))));case"Matrix2D":return new Q.c(B.m.map(((B,o)=>z(B,E.m[o],v.m[o]))));case"Matrix3D":return new Q.g(B.m.map(((B,o)=>z(B,E.m[o],v.m[o]))));default:return z((0,P.r)(B),(0,P.r)(E),(0,P.r)(v))}}(0,z.f)("FlowGraphMaxBlock",H);class b extends h{constructor(B){super(o.c,o.c,o.c,o.c,((B,E,v)=>this._polymorphicClamp(B,E,v)),"FlowGraphClampBlock",B)}_polymorphicClamp(B,E,v){return R(B,E,v,j)}}function F(B){return Math.min(Math.max(B,0),1)}(0,z.f)("FlowGraphClampBlock",b);class W extends D.d{constructor(B){super(o.c,o.c,(B=>this._polymorphicSaturate(B)),"FlowGraphSaturateBlock",B)}_polymorphicSaturate(B){return r(B,F)}}function w(B,E,v){return(1-v)*B+v*E}(0,z.f)("FlowGraphSaturateBlock",W);class n extends h{constructor(B){super(o.c,o.c,o.c,o.c,((B,E,v)=>this._polymorphicInterpolate(B,E,v)),"FlowGraphMathInterpolationBlock",B)}_polymorphicInterpolate(B,E,v){return R(B,E,v,w)}}(0,z.f)("FlowGraphMathInterpolationBlock",n);class U extends q.c{constructor(B){super(o.c,o.c,o.f,((B,E)=>this._polymorphicEq(B,E)),"FlowGraphEqualityBlock",B)}_polymorphicEq(B,E){const v=(0,P.m)(B),z=(0,P.m)(E);return typeof B===typeof E&&((0,P.i)(v,z)||(0,P.g)(v,z)||(0,P.d)(v,z)?B.equals(E):B===E)}}function s(B,E,v){if((0,P.s)(B)&&(0,P.s)(E))return v((0,P.r)(B),(0,P.r)(E));throw new Error(`Cannot compare ${B} and ${E}`)}(0,z.f)("FlowGraphEqualityBlock",U);class J extends q.c{constructor(B){super(o.c,o.c,o.f,((B,E)=>this._polymorphicLessThan(B,E)),"FlowGraphLessThanBlock",B)}_polymorphicLessThan(B,E){return s(B,E,((B,E)=>B<E))}}(0,z.f)("FlowGraphLessThanBlock",J);class O extends q.c{constructor(B){super(o.c,o.c,o.f,((B,E)=>this._polymorphicLessThanOrEqual(B,E)),"FlowGraphLessThanOrEqualBlock",B)}_polymorphicLessThanOrEqual(B,E){return s(B,E,((B,E)=>B<=E))}}(0,z.f)("FlowGraphLessThanOrEqualBlock",O);class e extends q.c{constructor(B){super(o.c,o.c,o.f,((B,E)=>this._polymorphicGreaterThan(B,E)),"FlowGraphGreaterThanBlock",B)}_polymorphicGreaterThan(B,E){return s(B,E,((B,E)=>B>E))}}(0,z.f)("FlowGraphGreaterThanBlock",e);class k extends q.c{constructor(B){super(o.c,o.c,o.f,((B,E)=>this._polymorphicGreaterThanOrEqual(B,E)),"FlowGraphGreaterThanOrEqualBlock",B)}_polymorphicGreaterThanOrEqual(B,E){return s(B,E,((B,E)=>B>=E))}}(0,z.f)("FlowGraphGreaterThanOrEqualBlock",k);class L extends D.d{constructor(B){super(o.c,o.f,(B=>this._polymorphicIsNan(B)),"FlowGraphIsNaNBlock",B)}_polymorphicIsNan(B){if((0,P.s)(B,!0))return isNaN((0,P.r)(B));throw new Error(`Cannot get NaN of ${B}`)}}(0,z.f)("FlowGraphIsNaNBlock",L);class M extends D.d{constructor(B){super(o.c,o.f,(B=>this._polymorphicIsInf(B)),"FlowGraphIsInfBlock",B)}_polymorphicIsInf(B){if((0,P.s)(B))return!isFinite((0,P.r)(B));throw new Error(`Cannot get isInf of ${B}`)}}(0,z.f)("FlowGraphIsInfBlock",M);class Z extends D.d{constructor(B){super(o.c,o.c,(B=>this._polymorphicDegToRad(B)),"FlowGraphDegToRadBlock",B)}_degToRad(B){return B*Math.PI/180}_polymorphicDegToRad(B){return r(B,this._degToRad)}}(0,z.f)("FlowGraphDegToRadBlock",Z);class BB extends D.d{constructor(B){super(o.c,o.c,(B=>this._polymorphicRadToDeg(B)),"FlowGraphRadToDegBlock",B)}_radToDeg(B){return 180*B/Math.PI}_polymorphicRadToDeg(B){return r(B,this._radToDeg)}}(0,z.f)("FlowGraphRadToDegBlock",BB);class EB extends D.d{constructor(B){super(o.v,o.v,(B=>this._polymorphicSin(B)),"FlowGraphSinBlock",B)}_polymorphicSin(B){return r(B,Math.sin)}}class vB extends D.d{constructor(B){super(o.v,o.v,(B=>this._polymorphicCos(B)),"FlowGraphCosBlock",B)}_polymorphicCos(B){return r(B,Math.cos)}}class zB extends D.d{constructor(B){super(o.v,o.v,(B=>this._polymorphicTan(B)),"FlowGraphTanBlock",B)}_polymorphicTan(B){return r(B,Math.tan)}}class oB extends D.d{constructor(B){super(o.v,o.v,(B=>this._polymorphicAsin(B)),"FlowGraphASinBlock",B)}_polymorphicAsin(B){return r(B,Math.asin)}}(0,z.f)("FlowGraphASinBlock",oB);class qB extends D.d{constructor(B){super(o.v,o.v,(B=>this._polymorphicAcos(B)),"FlowGraphACosBlock",B)}_polymorphicAcos(B){return r(B,Math.acos)}}(0,z.f)("FlowGraphACosBlock",qB);class cB extends D.d{constructor(B){super(o.v,o.v,(B=>this._polymorphicAtan(B)),"FlowGraphATanBlock",B)}_polymorphicAtan(B){return r(B,Math.atan)}}(0,z.f)("FlowGraphATanBlock",cB);class SB extends q.c{constructor(B){super(o.c,o.c,o.c,((B,E)=>this._polymorphicAtan2(B,E)),"FlowGraphATan2Block",B)}_polymorphicAtan2(B,E){return d(B,E,Math.atan2)}}(0,z.f)("FlowGraphATan2Block",SB);class xB extends D.d{constructor(B){super(o.c,o.c,(B=>this._polymorphicSinh(B)),"FlowGraphSinhBlock",B)}_polymorphicSinh(B){return r(B,Math.sinh)}}(0,z.f)("FlowGraphSinhBlock",xB);class DB extends D.d{constructor(B){super(o.c,o.c,(B=>this._polymorphicCosh(B)),"FlowGraphCoshBlock",B)}_polymorphicCosh(B){return r(B,Math.cosh)}}(0,z.f)("FlowGraphCoshBlock",DB);class hB extends D.d{constructor(B){super(o.c,o.c,(B=>this._polymorphicTanh(B)),"FlowGraphTanhBlock",B)}_polymorphicTanh(B){return r(B,Math.tanh)}}(0,z.f)("FlowGraphTanhBlock",hB);class yB extends D.d{constructor(B){super(o.c,o.v,(B=>this._polymorphicAsinh(B)),"FlowGraphASinhBlock",B)}_polymorphicAsinh(B){return r(B,Math.asinh)}}(0,z.f)("FlowGraphASinhBlock",yB);class QB extends D.d{constructor(B){super(o.c,o.v,(B=>this._polymorphicAcosh(B)),"FlowGraphACoshBlock",B)}_polymorphicAcosh(B){return r(B,Math.acosh)}}(0,z.f)("FlowGraphACoshBlock",QB);class PB extends D.d{constructor(B){super(o.c,o.v,(B=>this._polymorphicAtanh(B)),"FlowGraphATanhBlock",B)}_polymorphicAtanh(B){return r(B,Math.atanh)}}(0,z.f)("FlowGraphATanhBlock",PB);class GB extends D.d{constructor(B){super(o.c,o.v,(B=>this._polymorphicExp(B)),"FlowGraphExponentialBlock",B)}_polymorphicExp(B){return r(B,Math.exp)}}(0,z.f)("FlowGraphExponentialBlock",GB);class YB extends D.d{constructor(B){super(o.c,o.v,(B=>this._polymorphicLog(B)),"FlowGraphLogBlock",B)}_polymorphicLog(B){return r(B,Math.log)}}(0,z.f)("FlowGraphLogBlock",YB);class aB extends D.d{constructor(B){super(o.c,o.v,(B=>this._polymorphicLog2(B)),"FlowGraphLog2Block",B)}_polymorphicLog2(B){return r(B,Math.log2)}}(0,z.f)("FlowGraphLog2Block",aB);class mB extends D.d{constructor(B){super(o.c,o.v,(B=>this._polymorphicLog10(B)),"FlowGraphLog10Block",B)}_polymorphicLog10(B){return r(B,Math.log10)}}(0,z.f)("FlowGraphLog10Block",mB);class gB extends D.d{constructor(B){super(o.c,o.v,(B=>this._polymorphicSqrt(B)),"FlowGraphSquareRootBlock",B)}_polymorphicSqrt(B){return r(B,Math.sqrt)}}(0,z.f)("FlowGraphSquareRootBlock",gB);class VB extends D.d{constructor(B){super(o.c,o.v,(B=>this._polymorphicCubeRoot(B)),"FlowGraphCubeRootBlock",B)}_polymorphicCubeRoot(B){return r(B,Math.cbrt)}}(0,z.f)("FlowGraphCubeRootBlock",VB);class TB extends q.c{constructor(B){super(o.c,o.v,o.v,((B,E)=>this._polymorphicPow(B,E)),"FlowGraphPowerBlock",B)}_polymorphicPow(B,E){return d(B,E,Math.pow)}}(0,z.f)("FlowGraphPowerBlock",TB);class NB extends D.d{constructor(B){super((0,o.Q)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),(0,o.Q)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),(B=>"boolean"===typeof B?!B:"number"===typeof B?~B:new y.d(~B.value)),"FlowGraphBitwiseNotBlock",B)}}(0,z.f)("FlowGraphBitwiseNotBlock",NB);class XB extends q.c{constructor(B){super((0,o.Q)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),(0,o.Q)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),(0,o.Q)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),((B,E)=>{if("boolean"===typeof B&&"boolean"===typeof E)return B&&E;if("number"===typeof B&&"number"===typeof E)return B&E;if("object"===typeof B&&"object"===typeof E)return new y.d(B.value&E.value);throw new Error(`Cannot perform bitwise AND on ${B} and ${E}`)}),"FlowGraphBitwiseAndBlock",B)}}(0,z.f)("FlowGraphBitwiseAndBlock",XB);class rB extends q.c{constructor(B){super((0,o.Q)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),(0,o.Q)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),(0,o.Q)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),((B,E)=>{if("boolean"===typeof B&&"boolean"===typeof E)return B||E;if("number"===typeof B&&"number"===typeof E)return B|E;if("object"===typeof B&&"object"===typeof E)return new y.d(B.value|E.value);throw new Error(`Cannot perform bitwise OR on ${B} and ${E}`)}),"FlowGraphBitwiseOrBlock",B)}}(0,z.f)("FlowGraphBitwiseOrBlock",rB);class iB extends q.c{constructor(B){super((0,o.Q)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),(0,o.Q)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),(0,o.Q)((null===B||void 0===B?void 0:B.valueType)||"FlowGraphInteger"),((B,E)=>{if("boolean"===typeof B&&"boolean"===typeof E)return B!==E;if("number"===typeof B&&"number"===typeof E)return B^E;if("object"===typeof B&&"object"===typeof E)return new y.d(B.value^E.value);throw new Error(`Cannot perform bitwise XOR on ${B} and ${E}`)}),"FlowGraphBitwiseXorBlock",B)}}(0,z.f)("FlowGraphBitwiseXorBlock",iB);class uB extends q.c{constructor(B){super(o.g,o.g,o.g,((B,E)=>new y.d(B.value<<E.value)),"FlowGraphBitwiseLeftShiftBlock",B)}}(0,z.f)("FlowGraphBitwiseLeftShiftBlock",uB);class IB extends q.c{constructor(B){super(o.g,o.g,o.g,((B,E)=>new y.d(B.value>>E.value)),"FlowGraphBitwiseRightShiftBlock",B)}}(0,z.f)("FlowGraphBitwiseRightShiftBlock",IB);class KB extends D.d{constructor(B){super(o.g,o.g,(B=>new y.d(Math.clz32(B.value))),"FlowGraphLeadingZerosBlock",B)}}(0,z.f)("FlowGraphLeadingZerosBlock",KB);class CB extends D.d{constructor(B){super(o.g,o.g,(B=>new y.d(B.value?31-Math.clz32(B.value&-B.value):32)),"FlowGraphTrailingZerosBlock",B)}}(0,z.f)("FlowGraphTrailingZerosBlock",CB);class fB extends D.d{constructor(B){super(o.g,o.g,(B=>new y.d(function(B){let E=0;for(;B;)E+=1&B,B>>=1;return E}(B.value))),"FlowGraphOneBitsCounterBlock",B)}}(0,z.f)("FlowGraphOneBitsCounterBlock",fB)},14579:(B,E,v)=>{v.d(E,{c:()=>o});var z=v(14588);class o extends z.b{constructor(B,E,v,z,o,q){super(v,q),this._operation=z,this._className=o,this.a=this.registerDataInput("a",B),this.b=this.registerDataInput("b",E)}_doOperation(B){const E=this.a.getValue(B),v=this.b.getValue(B);return this._operation(E,v)}getClassName(){return this._className}}},14588:(B,E,v)=>{v.d(E,{b:()=>S});var z=v(13121),o=v(13102);const q="cachedOperationValue",c="cachedExecutionId";class S extends z.c{constructor(B,E){super(E),this.value=this.registerDataOutput("value",B),this.isValid=this.registerDataOutput("isValid",o.f)}_updateOutputs(B){const E=B._getExecutionVariable(this,c,-1),v=B._getExecutionVariable(this,q,null);if(void 0!==v&&null!==v&&E===B.executionId)this.isValid.setValue(!0,B),this.value.setValue(v,B);else try{const E=this._doOperation(B);if(void 0===E||null===E)return void this.isValid.setValue(!1,B);B._setExecutionVariable(this,q,E),B._setExecutionVariable(this,c,B.executionId),this.value.setValue(E,B),this.isValid.setValue(!0,B)}catch(z){this.isValid.setValue(!1,B)}}}},14595:(B,E,v)=>{v.d(E,{d:()=>o});var z=v(14588);class o extends z.b{constructor(B,E,v,z,o){super(E,o),this._operation=v,this._className=z,this.a=this.registerDataInput("a",B)}_doOperation(B){return this._operation(this.a.getValue(B))}getClassName(){return this._className}}}}]);