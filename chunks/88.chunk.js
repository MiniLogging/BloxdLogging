"use strict";(self.ipz2em9uj1g=self.ipz2em9uj1g||[]).push([[88],{15862:(r,O,W)=>{W.r(O),W.d(O,{FlowGraphAbsBlock:()=>D,FlowGraphAcosBlock:()=>Cr,FlowGraphAcoshBlock:()=>gr,FlowGraphAddBlock:()=>U,FlowGraphAsinBlock:()=>Qr,FlowGraphAsinhBlock:()=>vr,FlowGraphAtan2Block:()=>hr,FlowGraphAtanBlock:()=>Tr,FlowGraphAtanhBlock:()=>Kr,FlowGraphBitwiseAndBlock:()=>or,FlowGraphBitwiseLeftShiftBlock:()=>pr,FlowGraphBitwiseNotBlock:()=>Sr,FlowGraphBitwiseOrBlock:()=>Nr,FlowGraphBitwiseRightShiftBlock:()=>zr,FlowGraphBitwiseXorBlock:()=>Dr,FlowGraphCeilBlock:()=>M,FlowGraphClampBlock:()=>i,FlowGraphCosBlock:()=>Wr,FlowGraphCoshBlock:()=>mO,FlowGraphCubeRootBlock:()=>Gr,FlowGraphDegToRadBlock:()=>c,FlowGraphDivideBlock:()=>e,FlowGraphEBlock:()=>G,FlowGraphEqualityBlock:()=>n,FlowGraphExpBlock:()=>Ur,FlowGraphFloorBlock:()=>L,FlowGraphFractionBlock:()=>s,FlowGraphGreaterThanBlock:()=>H,FlowGraphGreaterThanOrEqualBlock:()=>A,FlowGraphInfBlock:()=>S,FlowGraphIsInfinityBlock:()=>I,FlowGraphIsNanBlock:()=>x,FlowGraphLeadingZerosBlock:()=>Lr,FlowGraphLessThanBlock:()=>F,FlowGraphLessThanOrEqualBlock:()=>j,FlowGraphLog10Block:()=>er,FlowGraphLog2Block:()=>br,FlowGraphLogBlock:()=>Pr,FlowGraphMathInterpolationBlock:()=>u,FlowGraphMaxBlock:()=>V,FlowGraphMinBlock:()=>R,FlowGraphModuloBlock:()=>E,FlowGraphMultiplyBlock:()=>b,FlowGraphNaNBlock:()=>o,FlowGraphNegationBlock:()=>B,FlowGraphOneBitsCounterBlock:()=>kr,FlowGraphPiBlock:()=>X,FlowGraphPowerBlock:()=>Xr,FlowGraphRadToDegBlock:()=>rr,FlowGraphRandomBlock:()=>Y,FlowGraphRoundBlock:()=>k,FlowGraphSaturateBlock:()=>y,FlowGraphSignBlock:()=>p,FlowGraphSinBlock:()=>Or,FlowGraphSinhBlock:()=>Jr,FlowGraphSquareRootBlock:()=>Yr,FlowGraphSubtractBlock:()=>P,FlowGraphTanBlock:()=>qr,FlowGraphTanhBlock:()=>dr,FlowGraphTrailingZerosBlock:()=>Mr,FlowGraphTruncBlock:()=>z});var q=W(12560),Q=W(14274),C=W(15870),T=W(15876);class h extends T.c{constructor(r,O,W,q){super(r,q),this._operation=O,this._className=W}_doOperation(r){return this._operation(r)}getClassName(){return this._className}}var J=W(12591),mr=W(15878);class d extends T.c{constructor(r,O,W,q,Q,C,T){super(q,T),this._operation=Q,this._className=C,this.a=this.registerDataInput("a",r),this.b=this.registerDataInput("b",O),this.c=this.registerDataInput("c",W)}_doOperation(r){return this._operation(this.a.getValue(r),this.b.getValue(r),this.c.getValue(r))}getClassName(){return this._className}}var v=W(14266),g=W(14277),K=W(14308);class U extends C.c{constructor(r){super((0,Q.K)(null===r||void 0===r?void 0:r.type),(0,Q.K)(null===r||void 0===r?void 0:r.type),(0,Q.K)(null===r||void 0===r?void 0:r.type),((r,O)=>this._polymorphicAdd(r,O)),"FlowGraphAddBlock",r)}_polymorphicAdd(r,O){const W=(0,K.l)(r),q=(0,K.l)(O);if((0,K.h)(W,q)||(0,K.g)(W,q)||(0,K.d)(W,q))return r.add(O);if("Quaternion"===W||"Vector4"===q)return new J.Vector4(r.x,r.y,r.z,r.w).addInPlace(O);if("Vector4"===W||"Quaternion"===q)return r.add(O);var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.preventIntegerFloatArithmetic&&typeof r!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,K.q)(r)+(0,K.q)(O)}}(0,q.e)("FlowGraphAddBlock",U);class P extends C.c{constructor(r){super((0,Q.K)(null===r||void 0===r?void 0:r.type),(0,Q.K)(null===r||void 0===r?void 0:r.type),(0,Q.K)(null===r||void 0===r?void 0:r.type),((r,O)=>this._polymorphicSubtract(r,O)),"FlowGraphSubtractBlock",r)}_polymorphicSubtract(r,O){const W=(0,K.l)(r),q=(0,K.l)(O);if((0,K.h)(W,q)||(0,K.d)(W,q)||(0,K.g)(W,q))return r.YO(O);if("Quaternion"===W||"Vector4"===q)return new J.Vector4(r.x,r.y,r.z,r.w).yv(O);if("Vector4"===W||"Quaternion"===q)return r.YO(O);var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.preventIntegerFloatArithmetic&&typeof r!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,K.q)(r)-(0,K.q)(O)}}(0,q.e)("FlowGraphSubtractBlock",P);class b extends C.c{constructor(r){super((0,Q.K)(null===r||void 0===r?void 0:r.type),(0,Q.K)(null===r||void 0===r?void 0:r.type),(0,Q.K)(null===r||void 0===r?void 0:r.type),((r,O)=>this._polymorphicMultiply(r,O)),"FlowGraphMultiplyBlock",r)}_polymorphicMultiply(r,O){const W=(0,K.l)(r),q=(0,K.l)(O);if((0,K.h)(W,q)||(0,K.d)(W,q))return r.multiply(O);if("Quaternion"===W||"Vector4"===q)return new J.Vector4(r.x,r.y,r.z,r.w).multiplyInPlace(O);if("Vector4"===W||"Quaternion"===q)return r.multiply(O);if((0,K.g)(W,q)){var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.useMatrixPerComponent){const q=r.m;for(let r=0;r<q.length;r++)q[r]*=O.m[r];return"Matrix2D"===W?new g.e(q):"Matrix3D"===W?new g.g(q):J.Matrix.oO(q)}return O.multiply(r)}var C;if(null!==(C=this.config)&&void 0!==C&&C.preventIntegerFloatArithmetic&&typeof r!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,K.q)(r)*(0,K.q)(O)}}(0,q.e)("FlowGraphMultiplyBlock",b);class e extends C.c{constructor(r){super((0,Q.K)(null===r||void 0===r?void 0:r.type),(0,Q.K)(null===r||void 0===r?void 0:r.type),(0,Q.K)(null===r||void 0===r?void 0:r.type),((r,O)=>this._polymorphicDivide(r,O)),"FlowGraphDivideBlock",r)}_polymorphicDivide(r,O){const W=(0,K.l)(r),q=(0,K.l)(O);if((0,K.h)(W,q)||(0,K.d)(W,q))return r.divide(O);if("Quaternion"===W||"Quaternion"===q){const W=r.clone();return W.x/=O.x,W.y/=O.y,W.z/=O.z,W.w/=O.w,W}if("Quaternion"===W||"Vector4"===q)return new J.Vector4(r.x,r.y,r.z,r.w).divideInPlace(O);if("Vector4"===W||"Quaternion"===q)return r.divide(O);if((0,K.g)(W,q)){var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.useMatrixPerComponent){const q=r.m;for(let r=0;r<q.length;r++)q[r]/=O.m[r];return"Matrix2D"===W?new g.e(q):"Matrix3D"===W?new g.g(q):J.Matrix.oO(q)}return r.divide(O)}var C;if(null!==(C=this.config)&&void 0!==C&&C.preventIntegerFloatArithmetic&&typeof r!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,K.q)(r)/(0,K.q)(O)}}(0,q.e)("FlowGraphDivideBlock",e);class Y extends h{constructor(r){super(Q.r,(r=>this._random(r)),"FlowGraphRandomBlock",r),this.min=this.registerDataInput("min",Q.r,(null===r||void 0===r?void 0:r.min)??0),this.max=this.registerDataInput("max",Q.r,(null===r||void 0===r?void 0:r.max)??1),null!==r&&void 0!==r&&r.seed&&(this._seed=r.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const r=1e4*Math.sin(this._seed++);return r-Math.floor(r)}return Math.random()}_random(r){const O=this.min.getValue(r),W=this.max.getValue(r);return this._getRandomValue()*(W-O)+O}}(0,q.e)("FlowGraphRandomBlock",Y);class G extends h{constructor(r){super(Q.r,(()=>Math.E),"FlowGraphEBlock",r)}}(0,q.e)("FlowGraphEBlock",G);class X extends h{constructor(r){super(Q.r,(()=>Math.PI),"FlowGraphPIBlock",r)}}(0,q.e)("FlowGraphPIBlock",X);class S extends h{constructor(r){super(Q.r,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",r)}}(0,q.e)("FlowGraphInfBlock",S);class o extends h{constructor(r){super(Q.r,(()=>Number.NaN),"FlowGraphNaNBlock",r)}}function N(r,O){switch((0,K.l)(r)){case"FlowGraphInteger":return new v.d(O(r.value));case"Vector2":return new J.Vector2(O(r.x),O(r.y));case"eO":return new J.eO(O(r.x),O(r.y),O(r.z));case"Vector4":return new J.Vector4(O(r.x),O(r.y),O(r.z),O(r.w));case"Quaternion":return new J.Quaternion(O(r.x),O(r.y),O(r.z),O(r.w));case"Matrix":return J.Matrix.oO(r.m.map(O));case"Matrix2D":return new g.e(r.m.map(O));case"Matrix3D":return new g.g(r.m.map(O));default:return O(r)}}(0,q.e)("FlowGraphNaNBlock",o);class D extends mr.c{constructor(r){super(Q.r,Q.r,(r=>this._polymorphicAbs(r)),"FlowGraphAbsBlock",r)}_polymorphicAbs(r){return N(r,Math.abs)}}(0,q.e)("FlowGraphAbsBlock",D);class p extends mr.c{constructor(r){super(Q.r,Q.r,(r=>this._polymorphicSign(r)),"FlowGraphSignBlock",r)}_polymorphicSign(r){return N(r,Math.sign)}}(0,q.e)("FlowGraphSignBlock",p);class z extends mr.c{constructor(r){super(Q.r,Q.r,(r=>this._polymorphicTrunc(r)),"FlowGraphTruncBlock",r)}_polymorphicTrunc(r){return N(r,Math.trunc)}}(0,q.e)("FlowGraphTruncBlock",z);class L extends mr.c{constructor(r){super(Q.r,Q.r,(r=>this._polymorphicFloor(r)),"FlowGraphFloorBlock",r)}_polymorphicFloor(r){return N(r,Math.floor)}}(0,q.e)("FlowGraphFloorBlock",L);class M extends mr.c{constructor(r){super(Q.c,Q.c,(r=>this._polymorphicCeiling(r)),"FlowGraphCeilBlock",r)}_polymorphicCeiling(r){return N(r,Math.ceil)}}(0,q.e)("FlowGraphCeilBlock",M);class k extends mr.c{constructor(r){super(Q.c,Q.c,(r=>this._polymorphicRound(r)),"FlowGraphRoundBlock",r)}_polymorphicRound(r){return N(r,(r=>{var O;return r<0&&null!==(O=this.config)&&void 0!==O&&O.roundHalfAwayFromZero?-Math.round(-r):Math.round(r)}))}}(0,q.e)("FlowGraphRoundBlock",k);class s extends mr.c{constructor(r){super(Q.c,Q.c,(r=>this._polymorphicFraction(r)),"FlowGraphFractBlock",r)}_polymorphicFraction(r){return N(r,(r=>r-Math.floor(r)))}}(0,q.e)("FlowGraphFractBlock",s);class B extends mr.c{constructor(r){super(Q.c,Q.c,(r=>this._polymorphicNeg(r)),"FlowGraphNegationBlock",r)}_polymorphicNeg(r){return N(r,(r=>-r))}}function Z(r,O,W){switch((0,K.l)(r)){case"FlowGraphInteger":return new v.d(W(r.value,O.value));case"Vector2":return new J.Vector2(W(r.x,O.x),W(r.y,O.y));case"eO":return new J.eO(W(r.x,O.x),W(r.y,O.y),W(r.z,O.z));case"Vector4":return new J.Vector4(W(r.x,O.x),W(r.y,O.y),W(r.z,O.z),W(r.w,O.w));case"Quaternion":return new J.Quaternion(W(r.x,O.x),W(r.y,O.y),W(r.z,O.z),W(r.w,O.w));case"Matrix":return J.Matrix.oO(r.m.map(((r,q)=>W(r,O.m[q]))));case"Matrix2D":return new g.e(r.m.map(((r,q)=>W(r,O.m[q]))));case"Matrix3D":return new g.g(r.m.map(((r,q)=>W(r,O.m[q]))));default:return W((0,K.q)(r),(0,K.q)(O))}}(0,q.e)("FlowGraphNegationBlock",B);class E extends C.c{constructor(r){super(Q.c,Q.c,Q.c,((r,O)=>this._polymorphicRemainder(r,O)),"FlowGraphModuloBlock",r)}_polymorphicRemainder(r,O){return Z(r,O,((r,O)=>r%O))}}(0,q.e)("FlowGraphModuloBlock",E);class R extends C.c{constructor(r){super(Q.c,Q.c,Q.c,((r,O)=>this._polymorphicMin(r,O)),"FlowGraphMinBlock",r)}_polymorphicMin(r,O){return Z(r,O,Math.min)}}(0,q.e)("FlowGraphMinBlock",R);class V extends C.c{constructor(r){super(Q.c,Q.c,Q.c,((r,O)=>this._polymorphicMax(r,O)),"FlowGraphMaxBlock",r)}_polymorphicMax(r,O){return Z(r,O,Math.max)}}function a(r,O,W){return Math.min(Math.max(r,Math.min(O,W)),Math.max(O,W))}function t(r,O,W,q){switch((0,K.l)(r)){case"FlowGraphInteger":return new v.d(q(r.value,O.value,W.value));case"Vector2":return new J.Vector2(q(r.x,O.x,W.x),q(r.y,O.y,W.y));case"eO":return new J.eO(q(r.x,O.x,W.x),q(r.y,O.y,W.y),q(r.z,O.z,W.z));case"Vector4":return new J.Vector4(q(r.x,O.x,W.x),q(r.y,O.y,W.y),q(r.z,O.z,W.z),q(r.w,O.w,W.w));case"Quaternion":return new J.Quaternion(q(r.x,O.x,W.x),q(r.y,O.y,W.y),q(r.z,O.z,W.z),q(r.w,O.w,W.w));case"Matrix":return J.Matrix.oO(r.m.map(((r,Q)=>q(r,O.m[Q],W.m[Q]))));case"Matrix2D":return new g.e(r.m.map(((r,Q)=>q(r,O.m[Q],W.m[Q]))));case"Matrix3D":return new g.g(r.m.map(((r,Q)=>q(r,O.m[Q],W.m[Q]))));default:return q((0,K.q)(r),(0,K.q)(O),(0,K.q)(W))}}(0,q.e)("FlowGraphMaxBlock",V);class i extends d{constructor(r){super(Q.c,Q.c,Q.c,Q.c,((r,O,W)=>this._polymorphicClamp(r,O,W)),"FlowGraphClampBlock",r)}_polymorphicClamp(r,O,W){return t(r,O,W,a)}}function l(r){return Math.min(Math.max(r,0),1)}(0,q.e)("FlowGraphClampBlock",i);class y extends mr.c{constructor(r){super(Q.c,Q.c,(r=>this._polymorphicSaturate(r)),"FlowGraphSaturateBlock",r)}_polymorphicSaturate(r){return N(r,l)}}function w(r,O,W){return(1-W)*r+W*O}(0,q.e)("FlowGraphSaturateBlock",y);class u extends d{constructor(r){super(Q.c,Q.c,Q.c,Q.c,((r,O,W)=>this._polymorphicInterpolate(r,O,W)),"FlowGraphMathInterpolationBlock",r)}_polymorphicInterpolate(r,O,W){return t(r,O,W,w)}}(0,q.e)("FlowGraphMathInterpolationBlock",u);class n extends C.c{constructor(r){super(Q.c,Q.c,Q.d,((r,O)=>this._polymorphicEq(r,O)),"FlowGraphEqualityBlock",r)}_polymorphicEq(r,O){const W=(0,K.l)(r),q=(0,K.l)(O);return typeof r===typeof O&&((0,K.h)(W,q)||(0,K.g)(W,q)||(0,K.d)(W,q)?r.equals(O):r===O)}}function f(r,O,W){if((0,K.s)(r)&&(0,K.s)(O))return W((0,K.q)(r),(0,K.q)(O));throw new Error(`Cannot compare ${r} and ${O}`)}(0,q.e)("FlowGraphEqualityBlock",n);class F extends C.c{constructor(r){super(Q.c,Q.c,Q.d,((r,O)=>this._polymorphicLessThan(r,O)),"FlowGraphLessThanBlock",r)}_polymorphicLessThan(r,O){return f(r,O,((r,O)=>r<O))}}(0,q.e)("FlowGraphLessThanBlock",F);class j extends C.c{constructor(r){super(Q.c,Q.c,Q.d,((r,O)=>this._polymorphicLessThanOrEqual(r,O)),"FlowGraphLessThanOrEqualBlock",r)}_polymorphicLessThanOrEqual(r,O){return f(r,O,((r,O)=>r<=O))}}(0,q.e)("FlowGraphLessThanOrEqualBlock",j);class H extends C.c{constructor(r){super(Q.c,Q.c,Q.d,((r,O)=>this._polymorphicGreaterThan(r,O)),"FlowGraphGreaterThanBlock",r)}_polymorphicGreaterThan(r,O){return f(r,O,((r,O)=>r>O))}}(0,q.e)("FlowGraphGreaterThanBlock",H);class A extends C.c{constructor(r){super(Q.c,Q.c,Q.d,((r,O)=>this._polymorphicGreaterThanOrEqual(r,O)),"FlowGraphGreaterThanOrEqualBlock",r)}_polymorphicGreaterThanOrEqual(r,O){return f(r,O,((r,O)=>r>=O))}}(0,q.e)("FlowGraphGreaterThanOrEqualBlock",A);class x extends mr.c{constructor(r){super(Q.c,Q.d,(r=>this._polymorphicIsNan(r)),"FlowGraphIsNaNBlock",r)}_polymorphicIsNan(r){if((0,K.s)(r,!0))return isNaN((0,K.q)(r));throw new Error(`Cannot get NaN of ${r}`)}}(0,q.e)("FlowGraphIsNaNBlock",x);class I extends mr.c{constructor(r){super(Q.c,Q.d,(r=>this._polymorphicIsInf(r)),"FlowGraphIsInfBlock",r)}_polymorphicIsInf(r){if((0,K.s)(r))return!isFinite((0,K.q)(r));throw new Error(`Cannot get isInf of ${r}`)}}(0,q.e)("FlowGraphIsInfBlock",I);class c extends mr.c{constructor(r){super(Q.c,Q.c,(r=>this._polymorphicDegToRad(r)),"FlowGraphDegToRadBlock",r)}_degToRad(r){return r*Math.PI/180}_polymorphicDegToRad(r){return N(r,this._degToRad)}}(0,q.e)("FlowGraphDegToRadBlock",c);class rr extends mr.c{constructor(r){super(Q.c,Q.c,(r=>this._polymorphicRadToDeg(r)),"FlowGraphRadToDegBlock",r)}_radToDeg(r){return 180*r/Math.PI}_polymorphicRadToDeg(r){return N(r,this._radToDeg)}}(0,q.e)("FlowGraphRadToDegBlock",rr);class Or extends mr.c{constructor(r){super(Q.r,Q.r,(r=>this._polymorphicSin(r)),"FlowGraphSinBlock",r)}_polymorphicSin(r){return N(r,Math.sin)}}class Wr extends mr.c{constructor(r){super(Q.r,Q.r,(r=>this._polymorphicCos(r)),"FlowGraphCosBlock",r)}_polymorphicCos(r){return N(r,Math.cos)}}class qr extends mr.c{constructor(r){super(Q.r,Q.r,(r=>this._polymorphicTan(r)),"FlowGraphTanBlock",r)}_polymorphicTan(r){return N(r,Math.tan)}}class Qr extends mr.c{constructor(r){super(Q.r,Q.r,(r=>this._polymorphicAsin(r)),"FlowGraphASinBlock",r)}_polymorphicAsin(r){return N(r,Math.asin)}}(0,q.e)("FlowGraphASinBlock",Qr);class Cr extends mr.c{constructor(r){super(Q.r,Q.r,(r=>this._polymorphicAcos(r)),"FlowGraphACosBlock",r)}_polymorphicAcos(r){return N(r,Math.acos)}}(0,q.e)("FlowGraphACosBlock",Cr);class Tr extends mr.c{constructor(r){super(Q.r,Q.r,(r=>this._polymorphicAtan(r)),"FlowGraphATanBlock",r)}_polymorphicAtan(r){return N(r,Math.atan)}}(0,q.e)("FlowGraphATanBlock",Tr);class hr extends C.c{constructor(r){super(Q.c,Q.c,Q.c,((r,O)=>this._polymorphicAtan2(r,O)),"FlowGraphATan2Block",r)}_polymorphicAtan2(r,O){return Z(r,O,Math.atan2)}}(0,q.e)("FlowGraphATan2Block",hr);class Jr extends mr.c{constructor(r){super(Q.c,Q.c,(r=>this._polymorphicSinh(r)),"FlowGraphSinhBlock",r)}_polymorphicSinh(r){return N(r,Math.sinh)}}(0,q.e)("FlowGraphSinhBlock",Jr);class mO extends mr.c{constructor(r){super(Q.c,Q.c,(r=>this._polymorphicCosh(r)),"FlowGraphCoshBlock",r)}_polymorphicCosh(r){return N(r,Math.cosh)}}(0,q.e)("FlowGraphCoshBlock",mO);class dr extends mr.c{constructor(r){super(Q.c,Q.c,(r=>this._polymorphicTanh(r)),"FlowGraphTanhBlock",r)}_polymorphicTanh(r){return N(r,Math.tanh)}}(0,q.e)("FlowGraphTanhBlock",dr);class vr extends mr.c{constructor(r){super(Q.c,Q.r,(r=>this._polymorphicAsinh(r)),"FlowGraphASinhBlock",r)}_polymorphicAsinh(r){return N(r,Math.asinh)}}(0,q.e)("FlowGraphASinhBlock",vr);class gr extends mr.c{constructor(r){super(Q.c,Q.r,(r=>this._polymorphicAcosh(r)),"FlowGraphACoshBlock",r)}_polymorphicAcosh(r){return N(r,Math.acosh)}}(0,q.e)("FlowGraphACoshBlock",gr);class Kr extends mr.c{constructor(r){super(Q.c,Q.r,(r=>this._polymorphicAtanh(r)),"FlowGraphATanhBlock",r)}_polymorphicAtanh(r){return N(r,Math.atanh)}}(0,q.e)("FlowGraphATanhBlock",Kr);class Ur extends mr.c{constructor(r){super(Q.c,Q.r,(r=>this._polymorphicExp(r)),"FlowGraphExponentialBlock",r)}_polymorphicExp(r){return N(r,Math.exp)}}(0,q.e)("FlowGraphExponentialBlock",Ur);class Pr extends mr.c{constructor(r){super(Q.c,Q.r,(r=>this._polymorphicLog(r)),"FlowGraphLogBlock",r)}_polymorphicLog(r){return N(r,Math.log)}}(0,q.e)("FlowGraphLogBlock",Pr);class br extends mr.c{constructor(r){super(Q.c,Q.r,(r=>this._polymorphicLog2(r)),"FlowGraphLog2Block",r)}_polymorphicLog2(r){return N(r,Math.log2)}}(0,q.e)("FlowGraphLog2Block",br);class er extends mr.c{constructor(r){super(Q.c,Q.r,(r=>this._polymorphicLog10(r)),"FlowGraphLog10Block",r)}_polymorphicLog10(r){return N(r,Math.log10)}}(0,q.e)("FlowGraphLog10Block",er);class Yr extends mr.c{constructor(r){super(Q.c,Q.r,(r=>this._polymorphicSqrt(r)),"FlowGraphSquareRootBlock",r)}_polymorphicSqrt(r){return N(r,Math.sqrt)}}(0,q.e)("FlowGraphSquareRootBlock",Yr);class Gr extends mr.c{constructor(r){super(Q.c,Q.r,(r=>this._polymorphicCubeRoot(r)),"FlowGraphCubeRootBlock",r)}_polymorphicCubeRoot(r){return N(r,Math.cbrt)}}(0,q.e)("FlowGraphCubeRootBlock",Gr);class Xr extends C.c{constructor(r){super(Q.c,Q.r,Q.r,((r,O)=>this._polymorphicPow(r,O)),"FlowGraphPowerBlock",r)}_polymorphicPow(r,O){return Z(r,O,Math.pow)}}(0,q.e)("FlowGraphPowerBlock",Xr);class Sr extends mr.c{constructor(r){super((0,Q.K)((null===r||void 0===r?void 0:r.valueType)||"FlowGraphInteger"),(0,Q.K)((null===r||void 0===r?void 0:r.valueType)||"FlowGraphInteger"),(r=>"boolean"===typeof r?!r:"number"===typeof r?~r:new v.d(~r.value)),"FlowGraphBitwiseNotBlock",r)}}(0,q.e)("FlowGraphBitwiseNotBlock",Sr);class or extends C.c{constructor(r){super((0,Q.K)((null===r||void 0===r?void 0:r.valueType)||"FlowGraphInteger"),(0,Q.K)((null===r||void 0===r?void 0:r.valueType)||"FlowGraphInteger"),(0,Q.K)((null===r||void 0===r?void 0:r.valueType)||"FlowGraphInteger"),((r,O)=>{if("boolean"===typeof r&&"boolean"===typeof O)return r&&O;if("number"===typeof r&&"number"===typeof O)return r&O;if("object"===typeof r&&"object"===typeof O)return new v.d(r.value&O.value);throw new Error(`Cannot perform bitwise AND on ${r} and ${O}`)}),"FlowGraphBitwiseAndBlock",r)}}(0,q.e)("FlowGraphBitwiseAndBlock",or);class Nr extends C.c{constructor(r){super((0,Q.K)((null===r||void 0===r?void 0:r.valueType)||"FlowGraphInteger"),(0,Q.K)((null===r||void 0===r?void 0:r.valueType)||"FlowGraphInteger"),(0,Q.K)((null===r||void 0===r?void 0:r.valueType)||"FlowGraphInteger"),((r,O)=>{if("boolean"===typeof r&&"boolean"===typeof O)return r||O;if("number"===typeof r&&"number"===typeof O)return r|O;if("object"===typeof r&&"object"===typeof O)return new v.d(r.value|O.value);throw new Error(`Cannot perform bitwise OR on ${r} and ${O}`)}),"FlowGraphBitwiseOrBlock",r)}}(0,q.e)("FlowGraphBitwiseOrBlock",Nr);class Dr extends C.c{constructor(r){super((0,Q.K)((null===r||void 0===r?void 0:r.valueType)||"FlowGraphInteger"),(0,Q.K)((null===r||void 0===r?void 0:r.valueType)||"FlowGraphInteger"),(0,Q.K)((null===r||void 0===r?void 0:r.valueType)||"FlowGraphInteger"),((r,O)=>{if("boolean"===typeof r&&"boolean"===typeof O)return r!==O;if("number"===typeof r&&"number"===typeof O)return r^O;if("object"===typeof r&&"object"===typeof O)return new v.d(r.value^O.value);throw new Error(`Cannot perform bitwise XOR on ${r} and ${O}`)}),"FlowGraphBitwiseXorBlock",r)}}(0,q.e)("FlowGraphBitwiseXorBlock",Dr);class pr extends C.c{constructor(r){super(Q.e,Q.e,Q.e,((r,O)=>new v.d(r.value<<O.value)),"FlowGraphBitwiseLeftShiftBlock",r)}}(0,q.e)("FlowGraphBitwiseLeftShiftBlock",pr);class zr extends C.c{constructor(r){super(Q.e,Q.e,Q.e,((r,O)=>new v.d(r.value>>O.value)),"FlowGraphBitwiseRightShiftBlock",r)}}(0,q.e)("FlowGraphBitwiseRightShiftBlock",zr);class Lr extends mr.c{constructor(r){super(Q.e,Q.e,(r=>new v.d(Math.clz32(r.value))),"FlowGraphLeadingZerosBlock",r)}}(0,q.e)("FlowGraphLeadingZerosBlock",Lr);class Mr extends mr.c{constructor(r){super(Q.e,Q.e,(r=>new v.d(r.value?31-Math.clz32(r.value&-r.value):32)),"FlowGraphTrailingZerosBlock",r)}}(0,q.e)("FlowGraphTrailingZerosBlock",Mr);class kr extends mr.c{constructor(r){super(Q.e,Q.e,(r=>new v.d(function(r){let O=0;for(;r;)O+=1&r,r>>=1;return O}(r.value))),"FlowGraphOneBitsCounterBlock",r)}}(0,q.e)("FlowGraphOneBitsCounterBlock",kr)},15870:(r,O,W)=>{W.d(O,{c:()=>Q});var q=W(15876);class Q extends q.c{constructor(r,O,W,q,Q,C){super(W,C),this._operation=q,this._className=Q,this.a=this.registerDataInput("a",r),this.b=this.registerDataInput("b",O)}_doOperation(r){const O=this.a.getValue(r),W=this.b.getValue(r);return this._operation(O,W)}getClassName(){return this._className}}},15876:(r,O,W)=>{W.d(O,{c:()=>h});var q=W(14297),Q=W(14274);const C="cachedOperationValue",T="cachedExecutionId";class h extends q.d{constructor(r,O){super(O),this.value=this.registerDataOutput("value",r),this.isValid=this.registerDataOutput("isValid",Q.d)}_updateOutputs(r){const O=r._getExecutionVariable(this,T,-1),W=r._getExecutionVariable(this,C,null);if(void 0!==W&&null!==W&&O===r.executionId)this.isValid.setValue(!0,r),this.value.setValue(W,r);else try{const O=this._doOperation(r);if(void 0===O||null===O)return void this.isValid.setValue(!1,r);r._setExecutionVariable(this,C,O),r._setExecutionVariable(this,T,r.executionId),this.value.setValue(O,r),this.isValid.setValue(!0,r)}catch(q){this.isValid.setValue(!1,r)}}}},15878:(r,O,W)=>{W.d(O,{c:()=>Q});var q=W(15876);class Q extends q.c{constructor(r,O,W,q,Q){super(O,Q),this._operation=W,this._className=q,this.a=this.registerDataInput("a",r)}_doOperation(r){return this._operation(this.a.getValue(r))}getClassName(){return this._className}}}}]);