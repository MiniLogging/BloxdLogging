"use strict";(self["3gghkoft8x"]=self["3gghkoft8x"]||[]).push([[88],{15528:(y,S,I)=>{I.r(S),I.d(S,{FlowGraphAbsBlock:()=>o,FlowGraphAcosBlock:()=>Ay,FlowGraphAcoshBlock:()=>Gy,FlowGraphAddBlock:()=>L,FlowGraphAsinBlock:()=>iy,FlowGraphAsinhBlock:()=>Ky,FlowGraphAtan2Block:()=>dy,FlowGraphAtanBlock:()=>By,FlowGraphAtanhBlock:()=>py,FlowGraphBitwiseAndBlock:()=>Cy,FlowGraphBitwiseLeftShiftBlock:()=>Ey,FlowGraphBitwiseNotBlock:()=>mS,FlowGraphBitwiseOrBlock:()=>Dy,FlowGraphBitwiseRightShiftBlock:()=>zy,FlowGraphBitwiseXorBlock:()=>oy,FlowGraphCeilBlock:()=>h,FlowGraphClampBlock:()=>W,FlowGraphCosBlock:()=>Iy,FlowGraphCoshBlock:()=>Jy,FlowGraphCubeRootBlock:()=>Oy,FlowGraphDegToRadBlock:()=>w,FlowGraphDivideBlock:()=>j,FlowGraphEBlock:()=>O,FlowGraphEqualityBlock:()=>c,FlowGraphExpBlock:()=>Ly,FlowGraphFloorBlock:()=>r,FlowGraphFractionBlock:()=>v,FlowGraphGreaterThanBlock:()=>N,FlowGraphGreaterThanOrEqualBlock:()=>Y,FlowGraphInfBlock:()=>my,FlowGraphIsInfinityBlock:()=>Z,FlowGraphIsNanBlock:()=>H,FlowGraphLeadingZerosBlock:()=>ry,FlowGraphLessThanBlock:()=>M,FlowGraphLessThanOrEqualBlock:()=>t,FlowGraphLog10Block:()=>jy,FlowGraphLog2Block:()=>ly,FlowGraphLogBlock:()=>Ty,FlowGraphMathInterpolationBlock:()=>Q,FlowGraphMaxBlock:()=>R,FlowGraphMinBlock:()=>k,FlowGraphModuloBlock:()=>g,FlowGraphMultiplyBlock:()=>l,FlowGraphNaNBlock:()=>C,FlowGraphNegationBlock:()=>P,FlowGraphOneBitsCounterBlock:()=>ny,FlowGraphPiBlock:()=>f,FlowGraphPowerBlock:()=>fy,FlowGraphRadToDegBlock:()=>yy,FlowGraphRandomBlock:()=>s,FlowGraphRoundBlock:()=>n,FlowGraphSaturateBlock:()=>e,FlowGraphSignBlock:()=>E,FlowGraphSinBlock:()=>Sy,FlowGraphSinhBlock:()=>Fy,FlowGraphSquareRootBlock:()=>sy,FlowGraphSubtractBlock:()=>T,FlowGraphTanBlock:()=>Vy,FlowGraphTanhBlock:()=>uy,FlowGraphTrailingZerosBlock:()=>hy,FlowGraphTruncBlock:()=>z});var V=I(12282),i=I(14033),A=I(15535),B=I(15540);class d extends B.e{constructor(y,S,I,V){super(y,V),this._operation=S,this._className=I}_doOperation(y){return this._operation(y)}getClassName(){return this._className}}var F=I(12321),J=I(15549);class u extends B.e{constructor(y,S,I,V,i,A,B){super(V,B),this._operation=i,this._className=A,this.a=this.registerDataInput("a",y),this.b=this.registerDataInput("b",S),this.c=this.registerDataInput("c",I)}_doOperation(y){return this._operation(this.a.getValue(y),this.b.getValue(y),this.c.getValue(y))}getClassName(){return this._className}}var K=I(14029),G=I(14038),p=I(14064);class L extends A.e{constructor(y){super((0,i.I)(null===y||void 0===y?void 0:y.type),(0,i.I)(null===y||void 0===y?void 0:y.type),(0,i.I)(null===y||void 0===y?void 0:y.type),((y,S)=>this._polymorphicAdd(y,S)),"FlowGraphAddBlock",y)}_polymorphicAdd(y,S){const I=(0,p.j)(y),V=(0,p.j)(S);if((0,p.h)(I,V)||(0,p.d)(I,V)||(0,p.c)(I,V))return y.add(S);if("Quaternion"===I||"Vector4"===V)return new F.Vector4(y.x,y.y,y.z,y.w).addInPlace(S);if("Vector4"===I||"Quaternion"===V)return y.add(S);var i;if(null!==(i=this.config)&&void 0!==i&&i.preventIntegerFloatArithmetic&&typeof y!==typeof S)throw new Error("Cannot add different types of numbers.");return(0,p.p)(y)+(0,p.p)(S)}}(0,V.e)("FlowGraphAddBlock",L);class T extends A.e{constructor(y){super((0,i.I)(null===y||void 0===y?void 0:y.type),(0,i.I)(null===y||void 0===y?void 0:y.type),(0,i.I)(null===y||void 0===y?void 0:y.type),((y,S)=>this._polymorphicSubtract(y,S)),"FlowGraphSubtractBlock",y)}_polymorphicSubtract(y,S){const I=(0,p.j)(y),V=(0,p.j)(S);if((0,p.h)(I,V)||(0,p.c)(I,V)||(0,p.d)(I,V))return y.fS(S);if("Quaternion"===I||"Vector4"===V)return new F.Vector4(y.x,y.y,y.z,y.w).uK(S);if("Vector4"===I||"Quaternion"===V)return y.fS(S);var i;if(null!==(i=this.config)&&void 0!==i&&i.preventIntegerFloatArithmetic&&typeof y!==typeof S)throw new Error("Cannot add different types of numbers.");return(0,p.p)(y)-(0,p.p)(S)}}(0,V.e)("FlowGraphSubtractBlock",T);class l extends A.e{constructor(y){super((0,i.I)(null===y||void 0===y?void 0:y.type),(0,i.I)(null===y||void 0===y?void 0:y.type),(0,i.I)(null===y||void 0===y?void 0:y.type),((y,S)=>this._polymorphicMultiply(y,S)),"FlowGraphMultiplyBlock",y)}_polymorphicMultiply(y,S){const I=(0,p.j)(y),V=(0,p.j)(S);if((0,p.h)(I,V)||(0,p.c)(I,V))return y.multiply(S);if("Quaternion"===I||"Vector4"===V)return new F.Vector4(y.x,y.y,y.z,y.w).multiplyInPlace(S);if("Vector4"===I||"Quaternion"===V)return y.multiply(S);if((0,p.d)(I,V)){var i;if(null!==(i=this.config)&&void 0!==i&&i.useMatrixPerComponent){const V=y.m;for(let y=0;y<V.length;y++)V[y]*=S.m[y];return"Matrix2D"===I?new G.b(V):"Matrix3D"===I?new G.c(V):F.Matrix.oS(V)}return S.multiply(y)}var A;if(null!==(A=this.config)&&void 0!==A&&A.preventIntegerFloatArithmetic&&typeof y!==typeof S)throw new Error("Cannot add different types of numbers.");return(0,p.p)(y)*(0,p.p)(S)}}(0,V.e)("FlowGraphMultiplyBlock",l);class j extends A.e{constructor(y){super((0,i.I)(null===y||void 0===y?void 0:y.type),(0,i.I)(null===y||void 0===y?void 0:y.type),(0,i.I)(null===y||void 0===y?void 0:y.type),((y,S)=>this._polymorphicDivide(y,S)),"FlowGraphDivideBlock",y)}_polymorphicDivide(y,S){const I=(0,p.j)(y),V=(0,p.j)(S);if((0,p.h)(I,V)||(0,p.c)(I,V))return y.divide(S);if("Quaternion"===I||"Quaternion"===V){const I=y.clone();return I.x/=S.x,I.y/=S.y,I.z/=S.z,I.w/=S.w,I}if("Quaternion"===I||"Vector4"===V)return new F.Vector4(y.x,y.y,y.z,y.w).divideInPlace(S);if("Vector4"===I||"Quaternion"===V)return y.divide(S);if((0,p.d)(I,V)){var i;if(null!==(i=this.config)&&void 0!==i&&i.useMatrixPerComponent){const V=y.m;for(let y=0;y<V.length;y++)V[y]/=S.m[y];return"Matrix2D"===I?new G.b(V):"Matrix3D"===I?new G.c(V):F.Matrix.oS(V)}return y.divide(S)}var A;if(null!==(A=this.config)&&void 0!==A&&A.preventIntegerFloatArithmetic&&typeof y!==typeof S)throw new Error("Cannot add different types of numbers.");return(0,p.p)(y)/(0,p.p)(S)}}(0,V.e)("FlowGraphDivideBlock",j);class s extends d{constructor(y){super(i.t,(y=>this._random(y)),"FlowGraphRandomBlock",y),this.min=this.registerDataInput("min",i.t,(null===y||void 0===y?void 0:y.min)??0),this.max=this.registerDataInput("max",i.t,(null===y||void 0===y?void 0:y.max)??1),null!==y&&void 0!==y&&y.seed&&(this._seed=y.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const y=1e4*Math.sin(this._seed++);return y-Math.floor(y)}return Math.random()}_random(y){const S=this.min.getValue(y),I=this.max.getValue(y);return this._getRandomValue()*(I-S)+S}}(0,V.e)("FlowGraphRandomBlock",s);class O extends d{constructor(y){super(i.t,(()=>Math.E),"FlowGraphEBlock",y)}}(0,V.e)("FlowGraphEBlock",O);class f extends d{constructor(y){super(i.t,(()=>Math.PI),"FlowGraphPIBlock",y)}}(0,V.e)("FlowGraphPIBlock",f);class my extends d{constructor(y){super(i.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",y)}}(0,V.e)("FlowGraphInfBlock",my);class C extends d{constructor(y){super(i.t,(()=>Number.NaN),"FlowGraphNaNBlock",y)}}function D(y,S){switch((0,p.j)(y)){case"FlowGraphInteger":return new K.c(S(y.value));case"Vector2":return new F.Vector2(S(y.x),S(y.y));case"OS":return new F.OS(S(y.x),S(y.y),S(y.z));case"Vector4":return new F.Vector4(S(y.x),S(y.y),S(y.z),S(y.w));case"Quaternion":return new F.Quaternion(S(y.x),S(y.y),S(y.z),S(y.w));case"Matrix":return F.Matrix.oS(y.m.map(S));case"Matrix2D":return new G.b(y.m.map(S));case"Matrix3D":return new G.c(y.m.map(S));default:return S(y)}}(0,V.e)("FlowGraphNaNBlock",C);class o extends J.e{constructor(y){super(i.t,i.t,(y=>this._polymorphicAbs(y)),"FlowGraphAbsBlock",y)}_polymorphicAbs(y){return D(y,Math.abs)}}(0,V.e)("FlowGraphAbsBlock",o);class E extends J.e{constructor(y){super(i.t,i.t,(y=>this._polymorphicSign(y)),"FlowGraphSignBlock",y)}_polymorphicSign(y){return D(y,Math.sign)}}(0,V.e)("FlowGraphSignBlock",E);class z extends J.e{constructor(y){super(i.t,i.t,(y=>this._polymorphicTrunc(y)),"FlowGraphTruncBlock",y)}_polymorphicTrunc(y){return D(y,Math.trunc)}}(0,V.e)("FlowGraphTruncBlock",z);class r extends J.e{constructor(y){super(i.t,i.t,(y=>this._polymorphicFloor(y)),"FlowGraphFloorBlock",y)}_polymorphicFloor(y){return D(y,Math.floor)}}(0,V.e)("FlowGraphFloorBlock",r);class h extends J.e{constructor(y){super(i.c,i.c,(y=>this._polymorphicCeiling(y)),"FlowGraphCeilBlock",y)}_polymorphicCeiling(y){return D(y,Math.ceil)}}(0,V.e)("FlowGraphCeilBlock",h);class n extends J.e{constructor(y){super(i.c,i.c,(y=>this._polymorphicRound(y)),"FlowGraphRoundBlock",y)}_polymorphicRound(y){return D(y,(y=>{var S;return y<0&&null!==(S=this.config)&&void 0!==S&&S.roundHalfAwayFromZero?-Math.round(-y):Math.round(y)}))}}(0,V.e)("FlowGraphRoundBlock",n);class v extends J.e{constructor(y){super(i.c,i.c,(y=>this._polymorphicFraction(y)),"FlowGraphFractBlock",y)}_polymorphicFraction(y){return D(y,(y=>y-Math.floor(y)))}}(0,V.e)("FlowGraphFractBlock",v);class P extends J.e{constructor(y){super(i.c,i.c,(y=>this._polymorphicNeg(y)),"FlowGraphNegationBlock",y)}_polymorphicNeg(y){return D(y,(y=>-y))}}function q(y,S,I){switch((0,p.j)(y)){case"FlowGraphInteger":return new K.c(I(y.value,S.value));case"Vector2":return new F.Vector2(I(y.x,S.x),I(y.y,S.y));case"OS":return new F.OS(I(y.x,S.x),I(y.y,S.y),I(y.z,S.z));case"Vector4":return new F.Vector4(I(y.x,S.x),I(y.y,S.y),I(y.z,S.z),I(y.w,S.w));case"Quaternion":return new F.Quaternion(I(y.x,S.x),I(y.y,S.y),I(y.z,S.z),I(y.w,S.w));case"Matrix":return F.Matrix.oS(y.m.map(((y,V)=>I(y,S.m[V]))));case"Matrix2D":return new G.b(y.m.map(((y,V)=>I(y,S.m[V]))));case"Matrix3D":return new G.c(y.m.map(((y,V)=>I(y,S.m[V]))));default:return I((0,p.p)(y),(0,p.p)(S))}}(0,V.e)("FlowGraphNegationBlock",P);class g extends A.e{constructor(y){super(i.c,i.c,i.c,((y,S)=>this._polymorphicRemainder(y,S)),"FlowGraphModuloBlock",y)}_polymorphicRemainder(y,S){return q(y,S,((y,S)=>y%S))}}(0,V.e)("FlowGraphModuloBlock",g);class k extends A.e{constructor(y){super(i.c,i.c,i.c,((y,S)=>this._polymorphicMin(y,S)),"FlowGraphMinBlock",y)}_polymorphicMin(y,S){return q(y,S,Math.min)}}(0,V.e)("FlowGraphMinBlock",k);class R extends A.e{constructor(y){super(i.c,i.c,i.c,((y,S)=>this._polymorphicMax(y,S)),"FlowGraphMaxBlock",y)}_polymorphicMax(y,S){return q(y,S,Math.max)}}function b(y,S,I){return Math.min(Math.max(y,Math.min(S,I)),Math.max(S,I))}function U(y,S,I,V){switch((0,p.j)(y)){case"FlowGraphInteger":return new K.c(V(y.value,S.value,I.value));case"Vector2":return new F.Vector2(V(y.x,S.x,I.x),V(y.y,S.y,I.y));case"OS":return new F.OS(V(y.x,S.x,I.x),V(y.y,S.y,I.y),V(y.z,S.z,I.z));case"Vector4":return new F.Vector4(V(y.x,S.x,I.x),V(y.y,S.y,I.y),V(y.z,S.z,I.z),V(y.w,S.w,I.w));case"Quaternion":return new F.Quaternion(V(y.x,S.x,I.x),V(y.y,S.y,I.y),V(y.z,S.z,I.z),V(y.w,S.w,I.w));case"Matrix":return F.Matrix.oS(y.m.map(((y,i)=>V(y,S.m[i],I.m[i]))));case"Matrix2D":return new G.b(y.m.map(((y,i)=>V(y,S.m[i],I.m[i]))));case"Matrix3D":return new G.c(y.m.map(((y,i)=>V(y,S.m[i],I.m[i]))));default:return V((0,p.p)(y),(0,p.p)(S),(0,p.p)(I))}}(0,V.e)("FlowGraphMaxBlock",R);class W extends u{constructor(y){super(i.c,i.c,i.c,i.c,((y,S,I)=>this._polymorphicClamp(y,S,I)),"FlowGraphClampBlock",y)}_polymorphicClamp(y,S,I){return U(y,S,I,b)}}function a(y){return Math.min(Math.max(y,0),1)}(0,V.e)("FlowGraphClampBlock",W);class e extends J.e{constructor(y){super(i.c,i.c,(y=>this._polymorphicSaturate(y)),"FlowGraphSaturateBlock",y)}_polymorphicSaturate(y){return D(y,a)}}function x(y,S,I){return(1-I)*y+I*S}(0,V.e)("FlowGraphSaturateBlock",e);class Q extends u{constructor(y){super(i.c,i.c,i.c,i.c,((y,S,I)=>this._polymorphicInterpolate(y,S,I)),"FlowGraphMathInterpolationBlock",y)}_polymorphicInterpolate(y,S,I){return U(y,S,I,x)}}(0,V.e)("FlowGraphMathInterpolationBlock",Q);class c extends A.e{constructor(y){super(i.c,i.c,i.f,((y,S)=>this._polymorphicEq(y,S)),"FlowGraphEqualityBlock",y)}_polymorphicEq(y,S){const I=(0,p.j)(y),V=(0,p.j)(S);return typeof y===typeof S&&((0,p.h)(I,V)||(0,p.d)(I,V)||(0,p.c)(I,V)?y.equals(S):y===S)}}function X(y,S,I){if((0,p.q)(y)&&(0,p.q)(S))return I((0,p.p)(y),(0,p.p)(S));throw new Error(`Cannot compare ${y} and ${S}`)}(0,V.e)("FlowGraphEqualityBlock",c);class M extends A.e{constructor(y){super(i.c,i.c,i.f,((y,S)=>this._polymorphicLessThan(y,S)),"FlowGraphLessThanBlock",y)}_polymorphicLessThan(y,S){return X(y,S,((y,S)=>y<S))}}(0,V.e)("FlowGraphLessThanBlock",M);class t extends A.e{constructor(y){super(i.c,i.c,i.f,((y,S)=>this._polymorphicLessThanOrEqual(y,S)),"FlowGraphLessThanOrEqualBlock",y)}_polymorphicLessThanOrEqual(y,S){return X(y,S,((y,S)=>y<=S))}}(0,V.e)("FlowGraphLessThanOrEqualBlock",t);class N extends A.e{constructor(y){super(i.c,i.c,i.f,((y,S)=>this._polymorphicGreaterThan(y,S)),"FlowGraphGreaterThanBlock",y)}_polymorphicGreaterThan(y,S){return X(y,S,((y,S)=>y>S))}}(0,V.e)("FlowGraphGreaterThanBlock",N);class Y extends A.e{constructor(y){super(i.c,i.c,i.f,((y,S)=>this._polymorphicGreaterThanOrEqual(y,S)),"FlowGraphGreaterThanOrEqualBlock",y)}_polymorphicGreaterThanOrEqual(y,S){return X(y,S,((y,S)=>y>=S))}}(0,V.e)("FlowGraphGreaterThanOrEqualBlock",Y);class H extends J.e{constructor(y){super(i.c,i.f,(y=>this._polymorphicIsNan(y)),"FlowGraphIsNaNBlock",y)}_polymorphicIsNan(y){if((0,p.q)(y,!0))return isNaN((0,p.p)(y));throw new Error(`Cannot get NaN of ${y}`)}}(0,V.e)("FlowGraphIsNaNBlock",H);class Z extends J.e{constructor(y){super(i.c,i.f,(y=>this._polymorphicIsInf(y)),"FlowGraphIsInfBlock",y)}_polymorphicIsInf(y){if((0,p.q)(y))return!isFinite((0,p.p)(y));throw new Error(`Cannot get isInf of ${y}`)}}(0,V.e)("FlowGraphIsInfBlock",Z);class w extends J.e{constructor(y){super(i.c,i.c,(y=>this._polymorphicDegToRad(y)),"FlowGraphDegToRadBlock",y)}_degToRad(y){return y*Math.PI/180}_polymorphicDegToRad(y){return D(y,this._degToRad)}}(0,V.e)("FlowGraphDegToRadBlock",w);class yy extends J.e{constructor(y){super(i.c,i.c,(y=>this._polymorphicRadToDeg(y)),"FlowGraphRadToDegBlock",y)}_radToDeg(y){return 180*y/Math.PI}_polymorphicRadToDeg(y){return D(y,this._radToDeg)}}(0,V.e)("FlowGraphRadToDegBlock",yy);class Sy extends J.e{constructor(y){super(i.t,i.t,(y=>this._polymorphicSin(y)),"FlowGraphSinBlock",y)}_polymorphicSin(y){return D(y,Math.sin)}}class Iy extends J.e{constructor(y){super(i.t,i.t,(y=>this._polymorphicCos(y)),"FlowGraphCosBlock",y)}_polymorphicCos(y){return D(y,Math.cos)}}class Vy extends J.e{constructor(y){super(i.t,i.t,(y=>this._polymorphicTan(y)),"FlowGraphTanBlock",y)}_polymorphicTan(y){return D(y,Math.tan)}}class iy extends J.e{constructor(y){super(i.t,i.t,(y=>this._polymorphicAsin(y)),"FlowGraphASinBlock",y)}_polymorphicAsin(y){return D(y,Math.asin)}}(0,V.e)("FlowGraphASinBlock",iy);class Ay extends J.e{constructor(y){super(i.t,i.t,(y=>this._polymorphicAcos(y)),"FlowGraphACosBlock",y)}_polymorphicAcos(y){return D(y,Math.acos)}}(0,V.e)("FlowGraphACosBlock",Ay);class By extends J.e{constructor(y){super(i.t,i.t,(y=>this._polymorphicAtan(y)),"FlowGraphATanBlock",y)}_polymorphicAtan(y){return D(y,Math.atan)}}(0,V.e)("FlowGraphATanBlock",By);class dy extends A.e{constructor(y){super(i.c,i.c,i.c,((y,S)=>this._polymorphicAtan2(y,S)),"FlowGraphATan2Block",y)}_polymorphicAtan2(y,S){return q(y,S,Math.atan2)}}(0,V.e)("FlowGraphATan2Block",dy);class Fy extends J.e{constructor(y){super(i.c,i.c,(y=>this._polymorphicSinh(y)),"FlowGraphSinhBlock",y)}_polymorphicSinh(y){return D(y,Math.sinh)}}(0,V.e)("FlowGraphSinhBlock",Fy);class Jy extends J.e{constructor(y){super(i.c,i.c,(y=>this._polymorphicCosh(y)),"FlowGraphCoshBlock",y)}_polymorphicCosh(y){return D(y,Math.cosh)}}(0,V.e)("FlowGraphCoshBlock",Jy);class uy extends J.e{constructor(y){super(i.c,i.c,(y=>this._polymorphicTanh(y)),"FlowGraphTanhBlock",y)}_polymorphicTanh(y){return D(y,Math.tanh)}}(0,V.e)("FlowGraphTanhBlock",uy);class Ky extends J.e{constructor(y){super(i.c,i.t,(y=>this._polymorphicAsinh(y)),"FlowGraphASinhBlock",y)}_polymorphicAsinh(y){return D(y,Math.asinh)}}(0,V.e)("FlowGraphASinhBlock",Ky);class Gy extends J.e{constructor(y){super(i.c,i.t,(y=>this._polymorphicAcosh(y)),"FlowGraphACoshBlock",y)}_polymorphicAcosh(y){return D(y,Math.acosh)}}(0,V.e)("FlowGraphACoshBlock",Gy);class py extends J.e{constructor(y){super(i.c,i.t,(y=>this._polymorphicAtanh(y)),"FlowGraphATanhBlock",y)}_polymorphicAtanh(y){return D(y,Math.atanh)}}(0,V.e)("FlowGraphATanhBlock",py);class Ly extends J.e{constructor(y){super(i.c,i.t,(y=>this._polymorphicExp(y)),"FlowGraphExponentialBlock",y)}_polymorphicExp(y){return D(y,Math.exp)}}(0,V.e)("FlowGraphExponentialBlock",Ly);class Ty extends J.e{constructor(y){super(i.c,i.t,(y=>this._polymorphicLog(y)),"FlowGraphLogBlock",y)}_polymorphicLog(y){return D(y,Math.log)}}(0,V.e)("FlowGraphLogBlock",Ty);class ly extends J.e{constructor(y){super(i.c,i.t,(y=>this._polymorphicLog2(y)),"FlowGraphLog2Block",y)}_polymorphicLog2(y){return D(y,Math.log2)}}(0,V.e)("FlowGraphLog2Block",ly);class jy extends J.e{constructor(y){super(i.c,i.t,(y=>this._polymorphicLog10(y)),"FlowGraphLog10Block",y)}_polymorphicLog10(y){return D(y,Math.log10)}}(0,V.e)("FlowGraphLog10Block",jy);class sy extends J.e{constructor(y){super(i.c,i.t,(y=>this._polymorphicSqrt(y)),"FlowGraphSquareRootBlock",y)}_polymorphicSqrt(y){return D(y,Math.sqrt)}}(0,V.e)("FlowGraphSquareRootBlock",sy);class Oy extends J.e{constructor(y){super(i.c,i.t,(y=>this._polymorphicCubeRoot(y)),"FlowGraphCubeRootBlock",y)}_polymorphicCubeRoot(y){return D(y,Math.cbrt)}}(0,V.e)("FlowGraphCubeRootBlock",Oy);class fy extends A.e{constructor(y){super(i.c,i.t,i.t,((y,S)=>this._polymorphicPow(y,S)),"FlowGraphPowerBlock",y)}_polymorphicPow(y,S){return q(y,S,Math.pow)}}(0,V.e)("FlowGraphPowerBlock",fy);class mS extends J.e{constructor(y){super((0,i.I)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),(0,i.I)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),(y=>"boolean"===typeof y?!y:"number"===typeof y?~y:new K.c(~y.value)),"FlowGraphBitwiseNotBlock",y)}}(0,V.e)("FlowGraphBitwiseNotBlock",mS);class Cy extends A.e{constructor(y){super((0,i.I)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),(0,i.I)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),(0,i.I)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),((y,S)=>{if("boolean"===typeof y&&"boolean"===typeof S)return y&&S;if("number"===typeof y&&"number"===typeof S)return y&S;if("object"===typeof y&&"object"===typeof S)return new K.c(y.value&S.value);throw new Error(`Cannot perform bitwise AND on ${y} and ${S}`)}),"FlowGraphBitwiseAndBlock",y)}}(0,V.e)("FlowGraphBitwiseAndBlock",Cy);class Dy extends A.e{constructor(y){super((0,i.I)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),(0,i.I)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),(0,i.I)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),((y,S)=>{if("boolean"===typeof y&&"boolean"===typeof S)return y||S;if("number"===typeof y&&"number"===typeof S)return y|S;if("object"===typeof y&&"object"===typeof S)return new K.c(y.value|S.value);throw new Error(`Cannot perform bitwise OR on ${y} and ${S}`)}),"FlowGraphBitwiseOrBlock",y)}}(0,V.e)("FlowGraphBitwiseOrBlock",Dy);class oy extends A.e{constructor(y){super((0,i.I)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),(0,i.I)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),(0,i.I)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),((y,S)=>{if("boolean"===typeof y&&"boolean"===typeof S)return y!==S;if("number"===typeof y&&"number"===typeof S)return y^S;if("object"===typeof y&&"object"===typeof S)return new K.c(y.value^S.value);throw new Error(`Cannot perform bitwise XOR on ${y} and ${S}`)}),"FlowGraphBitwiseXorBlock",y)}}(0,V.e)("FlowGraphBitwiseXorBlock",oy);class Ey extends A.e{constructor(y){super(i.i,i.i,i.i,((y,S)=>new K.c(y.value<<S.value)),"FlowGraphBitwiseLeftShiftBlock",y)}}(0,V.e)("FlowGraphBitwiseLeftShiftBlock",Ey);class zy extends A.e{constructor(y){super(i.i,i.i,i.i,((y,S)=>new K.c(y.value>>S.value)),"FlowGraphBitwiseRightShiftBlock",y)}}(0,V.e)("FlowGraphBitwiseRightShiftBlock",zy);class ry extends J.e{constructor(y){super(i.i,i.i,(y=>new K.c(Math.clz32(y.value))),"FlowGraphLeadingZerosBlock",y)}}(0,V.e)("FlowGraphLeadingZerosBlock",ry);class hy extends J.e{constructor(y){super(i.i,i.i,(y=>new K.c(y.value?31-Math.clz32(y.value&-y.value):32)),"FlowGraphTrailingZerosBlock",y)}}(0,V.e)("FlowGraphTrailingZerosBlock",hy);class ny extends J.e{constructor(y){super(i.i,i.i,(y=>new K.c(function(y){let S=0;for(;y;)S+=1&y,y>>=1;return S}(y.value))),"FlowGraphOneBitsCounterBlock",y)}}(0,V.e)("FlowGraphOneBitsCounterBlock",ny)},15535:(y,S,I)=>{I.d(S,{e:()=>i});var V=I(15540);class i extends V.e{constructor(y,S,I,V,i,A){super(I,A),this._operation=V,this._className=i,this.a=this.registerDataInput("a",y),this.b=this.registerDataInput("b",S)}_doOperation(y){const S=this.a.getValue(y),I=this.b.getValue(y);return this._operation(S,I)}getClassName(){return this._className}}},15540:(y,S,I)=>{I.d(S,{e:()=>d});var V=I(14058),i=I(14033);const A="cachedOperationValue",B="cachedExecutionId";class d extends V.d{constructor(y,S){super(S),this.value=this.registerDataOutput("value",y),this.isValid=this.registerDataOutput("isValid",i.f)}_updateOutputs(y){const S=y._getExecutionVariable(this,B,-1),I=y._getExecutionVariable(this,A,null);if(void 0!==I&&null!==I&&S===y.executionId)this.isValid.setValue(!0,y),this.value.setValue(I,y);else try{const S=this._doOperation(y);if(void 0===S||null===S)return void this.isValid.setValue(!1,y);y._setExecutionVariable(this,A,S),y._setExecutionVariable(this,B,y.executionId),this.value.setValue(S,y),this.isValid.setValue(!0,y)}catch(V){this.isValid.setValue(!1,y)}}}},15549:(y,S,I)=>{I.d(S,{e:()=>i});var V=I(15540);class i extends V.e{constructor(y,S,I,V,i){super(S,i),this._operation=I,this._className=V,this.a=this.registerDataInput("a",y)}_doOperation(y){return this._operation(this.a.getValue(y))}getClassName(){return this._className}}}}]);