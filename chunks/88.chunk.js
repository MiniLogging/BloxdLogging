"use strict";(self.hmihoa2fs98=self.hmihoa2fs98||[]).push([[88],{14877:(b,d,P)=>{P.r(d),P.d(d,{FlowGraphAbsBlock:()=>X,FlowGraphAcosBlock:()=>ib,FlowGraphAcoshBlock:()=>sb,FlowGraphAddBlock:()=>w,FlowGraphAsinBlock:()=>Wb,FlowGraphAsinhBlock:()=>Yb,FlowGraphAtan2Block:()=>Cb,FlowGraphAtanBlock:()=>qb,FlowGraphAtanhBlock:()=>Eb,FlowGraphBitwiseAndBlock:()=>fb,FlowGraphBitwiseLeftShiftBlock:()=>ub,FlowGraphBitwiseNotBlock:()=>Ab,FlowGraphBitwiseOrBlock:()=>gb,FlowGraphBitwiseRightShiftBlock:()=>Mb,FlowGraphBitwiseXorBlock:()=>Xb,FlowGraphCeilBlock:()=>R,FlowGraphClampBlock:()=>V,FlowGraphCosBlock:()=>Pb,FlowGraphCoshBlock:()=>Lb,FlowGraphCubeRootBlock:()=>Zb,FlowGraphDegToRadBlock:()=>k,FlowGraphDivideBlock:()=>B,FlowGraphEBlock:()=>Z,FlowGraphEqualityBlock:()=>Q,FlowGraphExpBlock:()=>wb,FlowGraphFloorBlock:()=>e,FlowGraphFractionBlock:()=>H,FlowGraphGreaterThanBlock:()=>F,FlowGraphGreaterThanOrEqualBlock:()=>h,FlowGraphInfBlock:()=>A,FlowGraphIsInfinityBlock:()=>K,FlowGraphIsNanBlock:()=>T,FlowGraphLeadingZerosBlock:()=>eb,FlowGraphLessThanBlock:()=>m,FlowGraphLessThanOrEqualBlock:()=>v,FlowGraphLog10Block:()=>Bb,FlowGraphLog2Block:()=>rb,FlowGraphLogBlock:()=>tb,FlowGraphMathInterpolationBlock:()=>z,FlowGraphMaxBlock:()=>j,FlowGraphMinBlock:()=>N,FlowGraphModuloBlock:()=>l,FlowGraphMultiplyBlock:()=>r,FlowGraphNaNBlock:()=>f,FlowGraphNegationBlock:()=>p,FlowGraphOneBitsCounterBlock:()=>Ub,FlowGraphPiBlock:()=>o,FlowGraphPowerBlock:()=>ob,FlowGraphRadToDegBlock:()=>bb,FlowGraphRandomBlock:()=>n,FlowGraphRoundBlock:()=>U,FlowGraphSaturateBlock:()=>c,FlowGraphSignBlock:()=>u,FlowGraphSinBlock:()=>db,FlowGraphSinhBlock:()=>Jb,FlowGraphSquareRootBlock:()=>nb,FlowGraphSubtractBlock:()=>t,FlowGraphTanBlock:()=>Gb,FlowGraphTanhBlock:()=>xb,FlowGraphTrailingZerosBlock:()=>Rb,FlowGraphTruncBlock:()=>M});var G=P(11639),W=P(13365),i=P(14885),q=P(14890);class C extends q.e{constructor(b,d,P,G){super(b,G),this._operation=d,this._className=P}_doOperation(b){return this._operation(b)}getClassName(){return this._className}}var J=P(11681),L=P(14893);class x extends q.e{constructor(b,d,P,G,W,i,q){super(G,q),this._operation=W,this._className=i,this.a=this.registerDataInput("a",b),this.b=this.registerDataInput("b",d),this.c=this.registerDataInput("c",P)}_doOperation(b){return this._operation(this.a.getValue(b),this.b.getValue(b),this.c.getValue(b))}getClassName(){return this._className}}var Y=P(13360),s=P(13368),E=P(13394);class w extends i.b{constructor(b){super((0,W.F)(null===b||void 0===b?void 0:b.type),(0,W.F)(null===b||void 0===b?void 0:b.type),(0,W.F)(null===b||void 0===b?void 0:b.type),((b,d)=>this._polymorphicAdd(b,d)),"FlowGraphAddBlock",b)}_polymorphicAdd(b,d){const P=(0,E.i)(b),G=(0,E.i)(d);if((0,E.h)(P,G)||(0,E.e)(P,G)||(0,E.c)(P,G))return b.add(d);if("Quaternion"===P||"Vector4"===G)return new J.Vector4(b.x,b.y,b.z,b.w).addInPlace(d);if("Vector4"===P||"Quaternion"===G)return b.add(d);var W;if(null!==(W=this.config)&&void 0!==W&&W.preventIntegerFloatArithmetic&&typeof b!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,E.l)(b)+(0,E.l)(d)}}(0,G.f)("FlowGraphAddBlock",w);class t extends i.b{constructor(b){super((0,W.F)(null===b||void 0===b?void 0:b.type),(0,W.F)(null===b||void 0===b?void 0:b.type),(0,W.F)(null===b||void 0===b?void 0:b.type),((b,d)=>this._polymorphicSubtract(b,d)),"FlowGraphSubtractBlock",b)}_polymorphicSubtract(b,d){const P=(0,E.i)(b),G=(0,E.i)(d);if((0,E.h)(P,G)||(0,E.c)(P,G)||(0,E.e)(P,G))return b.Rd(d);if("Quaternion"===P||"Vector4"===G)return new J.Vector4(b.x,b.y,b.z,b.w).GY(d);if("Vector4"===P||"Quaternion"===G)return b.Rd(d);var W;if(null!==(W=this.config)&&void 0!==W&&W.preventIntegerFloatArithmetic&&typeof b!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,E.l)(b)-(0,E.l)(d)}}(0,G.f)("FlowGraphSubtractBlock",t);class r extends i.b{constructor(b){super((0,W.F)(null===b||void 0===b?void 0:b.type),(0,W.F)(null===b||void 0===b?void 0:b.type),(0,W.F)(null===b||void 0===b?void 0:b.type),((b,d)=>this._polymorphicMultiply(b,d)),"FlowGraphMultiplyBlock",b)}_polymorphicMultiply(b,d){const P=(0,E.i)(b),G=(0,E.i)(d);if((0,E.h)(P,G)||(0,E.c)(P,G))return b.multiply(d);if("Quaternion"===P||"Vector4"===G)return new J.Vector4(b.x,b.y,b.z,b.w).multiplyInPlace(d);if("Vector4"===P||"Quaternion"===G)return b.multiply(d);if((0,E.e)(P,G)){var W;if(null!==(W=this.config)&&void 0!==W&&W.useMatrixPerComponent){const G=b.m;for(let b=0;b<G.length;b++)G[b]*=d.m[b];return"Matrix2D"===P?new s.d(G):"Matrix3D"===P?new s.g(G):J.Matrix.Od(G)}return d.multiply(b)}var i;if(null!==(i=this.config)&&void 0!==i&&i.preventIntegerFloatArithmetic&&typeof b!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,E.l)(b)*(0,E.l)(d)}}(0,G.f)("FlowGraphMultiplyBlock",r);class B extends i.b{constructor(b){super((0,W.F)(null===b||void 0===b?void 0:b.type),(0,W.F)(null===b||void 0===b?void 0:b.type),(0,W.F)(null===b||void 0===b?void 0:b.type),((b,d)=>this._polymorphicDivide(b,d)),"FlowGraphDivideBlock",b)}_polymorphicDivide(b,d){const P=(0,E.i)(b),G=(0,E.i)(d);if((0,E.h)(P,G)||(0,E.c)(P,G))return b.divide(d);if("Quaternion"===P||"Quaternion"===G){const P=b.clone();return P.x/=d.x,P.y/=d.y,P.z/=d.z,P.w/=d.w,P}if("Quaternion"===P||"Vector4"===G)return new J.Vector4(b.x,b.y,b.z,b.w).divideInPlace(d);if("Vector4"===P||"Quaternion"===G)return b.divide(d);if((0,E.e)(P,G)){var W;if(null!==(W=this.config)&&void 0!==W&&W.useMatrixPerComponent){const G=b.m;for(let b=0;b<G.length;b++)G[b]/=d.m[b];return"Matrix2D"===P?new s.d(G):"Matrix3D"===P?new s.g(G):J.Matrix.Od(G)}return b.divide(d)}var i;if(null!==(i=this.config)&&void 0!==i&&i.preventIntegerFloatArithmetic&&typeof b!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,E.l)(b)/(0,E.l)(d)}}(0,G.f)("FlowGraphDivideBlock",B);class n extends C{constructor(b){super(W.p,(b=>this._random(b)),"FlowGraphRandomBlock",b),this.min=this.registerDataInput("min",W.p,(null===b||void 0===b?void 0:b.min)??0),this.max=this.registerDataInput("max",W.p,(null===b||void 0===b?void 0:b.max)??1),null!==b&&void 0!==b&&b.seed&&(this._seed=b.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const b=1e4*Math.sin(this._seed++);return b-Math.floor(b)}return Math.random()}_random(b){const d=this.min.getValue(b),P=this.max.getValue(b);return this._getRandomValue()*(P-d)+d}}(0,G.f)("FlowGraphRandomBlock",n);class Z extends C{constructor(b){super(W.p,(()=>Math.E),"FlowGraphEBlock",b)}}(0,G.f)("FlowGraphEBlock",Z);class o extends C{constructor(b){super(W.p,(()=>Math.PI),"FlowGraphPIBlock",b)}}(0,G.f)("FlowGraphPIBlock",o);class A extends C{constructor(b){super(W.p,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",b)}}(0,G.f)("FlowGraphInfBlock",A);class f extends C{constructor(b){super(W.p,(()=>Number.NaN),"FlowGraphNaNBlock",b)}}function g(b,d){switch((0,E.i)(b)){case"FlowGraphInteger":return new Y.b(d(b.value));case"Vector2":return new J.Vector2(d(b.x),d(b.y));case"ed":return new J.ed(d(b.x),d(b.y),d(b.z));case"Vector4":return new J.Vector4(d(b.x),d(b.y),d(b.z),d(b.w));case"Quaternion":return new J.Quaternion(d(b.x),d(b.y),d(b.z),d(b.w));case"Matrix":return J.Matrix.Od(b.m.map(d));case"Matrix2D":return new s.d(b.m.map(d));case"Matrix3D":return new s.g(b.m.map(d));default:return d(b)}}(0,G.f)("FlowGraphNaNBlock",f);class X extends L.b{constructor(b){super(W.p,W.p,(b=>this._polymorphicAbs(b)),"FlowGraphAbsBlock",b)}_polymorphicAbs(b){return g(b,Math.abs)}}(0,G.f)("FlowGraphAbsBlock",X);class u extends L.b{constructor(b){super(W.p,W.p,(b=>this._polymorphicSign(b)),"FlowGraphSignBlock",b)}_polymorphicSign(b){return g(b,Math.sign)}}(0,G.f)("FlowGraphSignBlock",u);class M extends L.b{constructor(b){super(W.p,W.p,(b=>this._polymorphicTrunc(b)),"FlowGraphTruncBlock",b)}_polymorphicTrunc(b){return g(b,Math.trunc)}}(0,G.f)("FlowGraphTruncBlock",M);class e extends L.b{constructor(b){super(W.p,W.p,(b=>this._polymorphicFloor(b)),"FlowGraphFloorBlock",b)}_polymorphicFloor(b){return g(b,Math.floor)}}(0,G.f)("FlowGraphFloorBlock",e);class R extends L.b{constructor(b){super(W.b,W.b,(b=>this._polymorphicCeiling(b)),"FlowGraphCeilBlock",b)}_polymorphicCeiling(b){return g(b,Math.ceil)}}(0,G.f)("FlowGraphCeilBlock",R);class U extends L.b{constructor(b){super(W.b,W.b,(b=>this._polymorphicRound(b)),"FlowGraphRoundBlock",b)}_polymorphicRound(b){return g(b,(b=>{var d;return b<0&&null!==(d=this.config)&&void 0!==d&&d.roundHalfAwayFromZero?-Math.round(-b):Math.round(b)}))}}(0,G.f)("FlowGraphRoundBlock",U);class H extends L.b{constructor(b){super(W.b,W.b,(b=>this._polymorphicFraction(b)),"FlowGraphFractBlock",b)}_polymorphicFraction(b){return g(b,(b=>b-Math.floor(b)))}}(0,G.f)("FlowGraphFractBlock",H);class p extends L.b{constructor(b){super(W.b,W.b,(b=>this._polymorphicNeg(b)),"FlowGraphNegationBlock",b)}_polymorphicNeg(b){return g(b,(b=>-b))}}function S(b,d,P){switch((0,E.i)(b)){case"FlowGraphInteger":return new Y.b(P(b.value,d.value));case"Vector2":return new J.Vector2(P(b.x,d.x),P(b.y,d.y));case"ed":return new J.ed(P(b.x,d.x),P(b.y,d.y),P(b.z,d.z));case"Vector4":return new J.Vector4(P(b.x,d.x),P(b.y,d.y),P(b.z,d.z),P(b.w,d.w));case"Quaternion":return new J.Quaternion(P(b.x,d.x),P(b.y,d.y),P(b.z,d.z),P(b.w,d.w));case"Matrix":return J.Matrix.Od(b.m.map(((b,G)=>P(b,d.m[G]))));case"Matrix2D":return new s.d(b.m.map(((b,G)=>P(b,d.m[G]))));case"Matrix3D":return new s.g(b.m.map(((b,G)=>P(b,d.m[G]))));default:return P((0,E.l)(b),(0,E.l)(d))}}(0,G.f)("FlowGraphNegationBlock",p);class l extends i.b{constructor(b){super(W.b,W.b,W.b,((b,d)=>this._polymorphicRemainder(b,d)),"FlowGraphModuloBlock",b)}_polymorphicRemainder(b,d){return S(b,d,((b,d)=>b%d))}}(0,G.f)("FlowGraphModuloBlock",l);class N extends i.b{constructor(b){super(W.b,W.b,W.b,((b,d)=>this._polymorphicMin(b,d)),"FlowGraphMinBlock",b)}_polymorphicMin(b,d){return S(b,d,Math.min)}}(0,G.f)("FlowGraphMinBlock",N);class j extends i.b{constructor(b){super(W.b,W.b,W.b,((b,d)=>this._polymorphicMax(b,d)),"FlowGraphMaxBlock",b)}_polymorphicMax(b,d){return S(b,d,Math.max)}}function a(b,d,P){return Math.min(Math.max(b,Math.min(d,P)),Math.max(d,P))}function O(b,d,P,G){switch((0,E.i)(b)){case"FlowGraphInteger":return new Y.b(G(b.value,d.value,P.value));case"Vector2":return new J.Vector2(G(b.x,d.x,P.x),G(b.y,d.y,P.y));case"ed":return new J.ed(G(b.x,d.x,P.x),G(b.y,d.y,P.y),G(b.z,d.z,P.z));case"Vector4":return new J.Vector4(G(b.x,d.x,P.x),G(b.y,d.y,P.y),G(b.z,d.z,P.z),G(b.w,d.w,P.w));case"Quaternion":return new J.Quaternion(G(b.x,d.x,P.x),G(b.y,d.y,P.y),G(b.z,d.z,P.z),G(b.w,d.w,P.w));case"Matrix":return J.Matrix.Od(b.m.map(((b,W)=>G(b,d.m[W],P.m[W]))));case"Matrix2D":return new s.d(b.m.map(((b,W)=>G(b,d.m[W],P.m[W]))));case"Matrix3D":return new s.g(b.m.map(((b,W)=>G(b,d.m[W],P.m[W]))));default:return G((0,E.l)(b),(0,E.l)(d),(0,E.l)(P))}}(0,G.f)("FlowGraphMaxBlock",j);class V extends x{constructor(b){super(W.b,W.b,W.b,W.b,((b,d,P)=>this._polymorphicClamp(b,d,P)),"FlowGraphClampBlock",b)}_polymorphicClamp(b,d,P){return O(b,d,P,a)}}function y(b){return Math.min(Math.max(b,0),1)}(0,G.f)("FlowGraphClampBlock",V);class c extends L.b{constructor(b){super(W.b,W.b,(b=>this._polymorphicSaturate(b)),"FlowGraphSaturateBlock",b)}_polymorphicSaturate(b){return g(b,y)}}function D(b,d,P){return(1-P)*b+P*d}(0,G.f)("FlowGraphSaturateBlock",c);class z extends x{constructor(b){super(W.b,W.b,W.b,W.b,((b,d,P)=>this._polymorphicInterpolate(b,d,P)),"FlowGraphMathInterpolationBlock",b)}_polymorphicInterpolate(b,d,P){return O(b,d,P,D)}}(0,G.f)("FlowGraphMathInterpolationBlock",z);class Q extends i.b{constructor(b){super(W.b,W.b,W.c,((b,d)=>this._polymorphicEq(b,d)),"FlowGraphEqualityBlock",b)}_polymorphicEq(b,d){const P=(0,E.i)(b),G=(0,E.i)(d);return typeof b===typeof d&&((0,E.h)(P,G)||(0,E.e)(P,G)||(0,E.c)(P,G)?b.equals(d):b===d)}}function I(b,d,P){if((0,E.n)(b)&&(0,E.n)(d))return P((0,E.l)(b),(0,E.l)(d));throw new Error(`Cannot compare ${b} and ${d}`)}(0,G.f)("FlowGraphEqualityBlock",Q);class m extends i.b{constructor(b){super(W.b,W.b,W.c,((b,d)=>this._polymorphicLessThan(b,d)),"FlowGraphLessThanBlock",b)}_polymorphicLessThan(b,d){return I(b,d,((b,d)=>b<d))}}(0,G.f)("FlowGraphLessThanBlock",m);class v extends i.b{constructor(b){super(W.b,W.b,W.c,((b,d)=>this._polymorphicLessThanOrEqual(b,d)),"FlowGraphLessThanOrEqualBlock",b)}_polymorphicLessThanOrEqual(b,d){return I(b,d,((b,d)=>b<=d))}}(0,G.f)("FlowGraphLessThanOrEqualBlock",v);class F extends i.b{constructor(b){super(W.b,W.b,W.c,((b,d)=>this._polymorphicGreaterThan(b,d)),"FlowGraphGreaterThanBlock",b)}_polymorphicGreaterThan(b,d){return I(b,d,((b,d)=>b>d))}}(0,G.f)("FlowGraphGreaterThanBlock",F);class h extends i.b{constructor(b){super(W.b,W.b,W.c,((b,d)=>this._polymorphicGreaterThanOrEqual(b,d)),"FlowGraphGreaterThanOrEqualBlock",b)}_polymorphicGreaterThanOrEqual(b,d){return I(b,d,((b,d)=>b>=d))}}(0,G.f)("FlowGraphGreaterThanOrEqualBlock",h);class T extends L.b{constructor(b){super(W.b,W.c,(b=>this._polymorphicIsNan(b)),"FlowGraphIsNaNBlock",b)}_polymorphicIsNan(b){if((0,E.n)(b,!0))return isNaN((0,E.l)(b));throw new Error(`Cannot get NaN of ${b}`)}}(0,G.f)("FlowGraphIsNaNBlock",T);class K extends L.b{constructor(b){super(W.b,W.c,(b=>this._polymorphicIsInf(b)),"FlowGraphIsInfBlock",b)}_polymorphicIsInf(b){if((0,E.n)(b))return!isFinite((0,E.l)(b));throw new Error(`Cannot get isInf of ${b}`)}}(0,G.f)("FlowGraphIsInfBlock",K);class k extends L.b{constructor(b){super(W.b,W.b,(b=>this._polymorphicDegToRad(b)),"FlowGraphDegToRadBlock",b)}_degToRad(b){return b*Math.PI/180}_polymorphicDegToRad(b){return g(b,this._degToRad)}}(0,G.f)("FlowGraphDegToRadBlock",k);class bb extends L.b{constructor(b){super(W.b,W.b,(b=>this._polymorphicRadToDeg(b)),"FlowGraphRadToDegBlock",b)}_radToDeg(b){return 180*b/Math.PI}_polymorphicRadToDeg(b){return g(b,this._radToDeg)}}(0,G.f)("FlowGraphRadToDegBlock",bb);class db extends L.b{constructor(b){super(W.p,W.p,(b=>this._polymorphicSin(b)),"FlowGraphSinBlock",b)}_polymorphicSin(b){return g(b,Math.sin)}}class Pb extends L.b{constructor(b){super(W.p,W.p,(b=>this._polymorphicCos(b)),"FlowGraphCosBlock",b)}_polymorphicCos(b){return g(b,Math.cos)}}class Gb extends L.b{constructor(b){super(W.p,W.p,(b=>this._polymorphicTan(b)),"FlowGraphTanBlock",b)}_polymorphicTan(b){return g(b,Math.tan)}}class Wb extends L.b{constructor(b){super(W.p,W.p,(b=>this._polymorphicAsin(b)),"FlowGraphASinBlock",b)}_polymorphicAsin(b){return g(b,Math.asin)}}(0,G.f)("FlowGraphASinBlock",Wb);class ib extends L.b{constructor(b){super(W.p,W.p,(b=>this._polymorphicAcos(b)),"FlowGraphACosBlock",b)}_polymorphicAcos(b){return g(b,Math.acos)}}(0,G.f)("FlowGraphACosBlock",ib);class qb extends L.b{constructor(b){super(W.p,W.p,(b=>this._polymorphicAtan(b)),"FlowGraphATanBlock",b)}_polymorphicAtan(b){return g(b,Math.atan)}}(0,G.f)("FlowGraphATanBlock",qb);class Cb extends i.b{constructor(b){super(W.b,W.b,W.b,((b,d)=>this._polymorphicAtan2(b,d)),"FlowGraphATan2Block",b)}_polymorphicAtan2(b,d){return S(b,d,Math.atan2)}}(0,G.f)("FlowGraphATan2Block",Cb);class Jb extends L.b{constructor(b){super(W.b,W.b,(b=>this._polymorphicSinh(b)),"FlowGraphSinhBlock",b)}_polymorphicSinh(b){return g(b,Math.sinh)}}(0,G.f)("FlowGraphSinhBlock",Jb);class Lb extends L.b{constructor(b){super(W.b,W.b,(b=>this._polymorphicCosh(b)),"FlowGraphCoshBlock",b)}_polymorphicCosh(b){return g(b,Math.cosh)}}(0,G.f)("FlowGraphCoshBlock",Lb);class xb extends L.b{constructor(b){super(W.b,W.b,(b=>this._polymorphicTanh(b)),"FlowGraphTanhBlock",b)}_polymorphicTanh(b){return g(b,Math.tanh)}}(0,G.f)("FlowGraphTanhBlock",xb);class Yb extends L.b{constructor(b){super(W.b,W.p,(b=>this._polymorphicAsinh(b)),"FlowGraphASinhBlock",b)}_polymorphicAsinh(b){return g(b,Math.asinh)}}(0,G.f)("FlowGraphASinhBlock",Yb);class sb extends L.b{constructor(b){super(W.b,W.p,(b=>this._polymorphicAcosh(b)),"FlowGraphACoshBlock",b)}_polymorphicAcosh(b){return g(b,Math.acosh)}}(0,G.f)("FlowGraphACoshBlock",sb);class Eb extends L.b{constructor(b){super(W.b,W.p,(b=>this._polymorphicAtanh(b)),"FlowGraphATanhBlock",b)}_polymorphicAtanh(b){return g(b,Math.atanh)}}(0,G.f)("FlowGraphATanhBlock",Eb);class wb extends L.b{constructor(b){super(W.b,W.p,(b=>this._polymorphicExp(b)),"FlowGraphExponentialBlock",b)}_polymorphicExp(b){return g(b,Math.exp)}}(0,G.f)("FlowGraphExponentialBlock",wb);class tb extends L.b{constructor(b){super(W.b,W.p,(b=>this._polymorphicLog(b)),"FlowGraphLogBlock",b)}_polymorphicLog(b){return g(b,Math.log)}}(0,G.f)("FlowGraphLogBlock",tb);class rb extends L.b{constructor(b){super(W.b,W.p,(b=>this._polymorphicLog2(b)),"FlowGraphLog2Block",b)}_polymorphicLog2(b){return g(b,Math.log2)}}(0,G.f)("FlowGraphLog2Block",rb);class Bb extends L.b{constructor(b){super(W.b,W.p,(b=>this._polymorphicLog10(b)),"FlowGraphLog10Block",b)}_polymorphicLog10(b){return g(b,Math.log10)}}(0,G.f)("FlowGraphLog10Block",Bb);class nb extends L.b{constructor(b){super(W.b,W.p,(b=>this._polymorphicSqrt(b)),"FlowGraphSquareRootBlock",b)}_polymorphicSqrt(b){return g(b,Math.sqrt)}}(0,G.f)("FlowGraphSquareRootBlock",nb);class Zb extends L.b{constructor(b){super(W.b,W.p,(b=>this._polymorphicCubeRoot(b)),"FlowGraphCubeRootBlock",b)}_polymorphicCubeRoot(b){return g(b,Math.cbrt)}}(0,G.f)("FlowGraphCubeRootBlock",Zb);class ob extends i.b{constructor(b){super(W.b,W.p,W.p,((b,d)=>this._polymorphicPow(b,d)),"FlowGraphPowerBlock",b)}_polymorphicPow(b,d){return S(b,d,Math.pow)}}(0,G.f)("FlowGraphPowerBlock",ob);class Ab extends L.b{constructor(b){super((0,W.F)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,W.F)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(b=>"boolean"===typeof b?!b:"number"===typeof b?~b:new Y.b(~b.value)),"FlowGraphBitwiseNotBlock",b)}}(0,G.f)("FlowGraphBitwiseNotBlock",Ab);class fb extends i.b{constructor(b){super((0,W.F)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,W.F)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,W.F)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),((b,d)=>{if("boolean"===typeof b&&"boolean"===typeof d)return b&&d;if("number"===typeof b&&"number"===typeof d)return b&d;if("object"===typeof b&&"object"===typeof d)return new Y.b(b.value&d.value);throw new Error(`Cannot perform bitwise AND on ${b} and ${d}`)}),"FlowGraphBitwiseAndBlock",b)}}(0,G.f)("FlowGraphBitwiseAndBlock",fb);class gb extends i.b{constructor(b){super((0,W.F)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,W.F)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,W.F)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),((b,d)=>{if("boolean"===typeof b&&"boolean"===typeof d)return b||d;if("number"===typeof b&&"number"===typeof d)return b|d;if("object"===typeof b&&"object"===typeof d)return new Y.b(b.value|d.value);throw new Error(`Cannot perform bitwise OR on ${b} and ${d}`)}),"FlowGraphBitwiseOrBlock",b)}}(0,G.f)("FlowGraphBitwiseOrBlock",gb);class Xb extends i.b{constructor(b){super((0,W.F)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,W.F)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,W.F)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),((b,d)=>{if("boolean"===typeof b&&"boolean"===typeof d)return b!==d;if("number"===typeof b&&"number"===typeof d)return b^d;if("object"===typeof b&&"object"===typeof d)return new Y.b(b.value^d.value);throw new Error(`Cannot perform bitwise XOR on ${b} and ${d}`)}),"FlowGraphBitwiseXorBlock",b)}}(0,G.f)("FlowGraphBitwiseXorBlock",Xb);class ub extends i.b{constructor(b){super(W.d,W.d,W.d,((b,d)=>new Y.b(b.value<<d.value)),"FlowGraphBitwiseLeftShiftBlock",b)}}(0,G.f)("FlowGraphBitwiseLeftShiftBlock",ub);class Mb extends i.b{constructor(b){super(W.d,W.d,W.d,((b,d)=>new Y.b(b.value>>d.value)),"FlowGraphBitwiseRightShiftBlock",b)}}(0,G.f)("FlowGraphBitwiseRightShiftBlock",Mb);class eb extends L.b{constructor(b){super(W.d,W.d,(b=>new Y.b(Math.clz32(b.value))),"FlowGraphLeadingZerosBlock",b)}}(0,G.f)("FlowGraphLeadingZerosBlock",eb);class Rb extends L.b{constructor(b){super(W.d,W.d,(b=>new Y.b(b.value?31-Math.clz32(b.value&-b.value):32)),"FlowGraphTrailingZerosBlock",b)}}(0,G.f)("FlowGraphTrailingZerosBlock",Rb);class Ub extends L.b{constructor(b){super(W.d,W.d,(b=>new Y.b(function(b){let d=0;for(;b;)d+=1&b,b>>=1;return d}(b.value))),"FlowGraphOneBitsCounterBlock",b)}}(0,G.f)("FlowGraphOneBitsCounterBlock",Ub)},14885:(b,d,P)=>{P.d(d,{b:()=>W});var G=P(14890);class W extends G.e{constructor(b,d,P,G,W,i){super(P,i),this._operation=G,this._className=W,this.a=this.registerDataInput("a",b),this.b=this.registerDataInput("b",d)}_doOperation(b){const d=this.a.getValue(b),P=this.b.getValue(b);return this._operation(d,P)}getClassName(){return this._className}}},14890:(b,d,P)=>{P.d(d,{e:()=>C});var G=P(13386),W=P(13365);const i="cachedOperationValue",q="cachedExecutionId";class C extends G.b{constructor(b,d){super(d),this.value=this.registerDataOutput("value",b),this.isValid=this.registerDataOutput("isValid",W.c)}_updateOutputs(b){const d=b._getExecutionVariable(this,q,-1),P=b._getExecutionVariable(this,i,null);if(void 0!==P&&null!==P&&d===b.executionId)this.isValid.setValue(!0,b),this.value.setValue(P,b);else try{const d=this._doOperation(b);if(void 0===d||null===d)return void this.isValid.setValue(!1,b);b._setExecutionVariable(this,i,d),b._setExecutionVariable(this,q,b.executionId),this.value.setValue(d,b),this.isValid.setValue(!0,b)}catch(G){this.isValid.setValue(!1,b)}}}},14893:(b,d,P)=>{P.d(d,{b:()=>W});var G=P(14890);class W extends G.e{constructor(b,d,P,G,W){super(d,W),this._operation=P,this._className=G,this.a=this.registerDataInput("a",b)}_doOperation(b){return this._operation(this.a.getValue(b))}getClassName(){return this._className}}}}]);