"use strict";(self["1xyrlsr8vb9"]=self["1xyrlsr8vb9"]||[]).push([[88],{15357:(I,O,C)=>{C.r(O),C.d(O,{FlowGraphAbsBlock:()=>X,FlowGraphAcosBlock:()=>iI,FlowGraphAcoshBlock:()=>sI,FlowGraphAddBlock:()=>q,FlowGraphAsinBlock:()=>KI,FlowGraphAsinhBlock:()=>QI,FlowGraphAtan2Block:()=>SI,FlowGraphAtanBlock:()=>yI,FlowGraphAtanhBlock:()=>ZI,FlowGraphBitwiseAndBlock:()=>cI,FlowGraphBitwiseLeftShiftBlock:()=>TI,FlowGraphBitwiseNotBlock:()=>oI,FlowGraphBitwiseOrBlock:()=>nI,FlowGraphBitwiseRightShiftBlock:()=>HI,FlowGraphBitwiseXorBlock:()=>XI,FlowGraphCeilBlock:()=>a,FlowGraphClampBlock:()=>w,FlowGraphCosBlock:()=>CI,FlowGraphCoshBlock:()=>pI,FlowGraphCubeRootBlock:()=>WI,FlowGraphDegToRadBlock:()=>G,FlowGraphDivideBlock:()=>h,FlowGraphEBlock:()=>W,FlowGraphEqualityBlock:()=>z,FlowGraphExpBlock:()=>qI,FlowGraphFloorBlock:()=>b,FlowGraphFractionBlock:()=>u,FlowGraphGreaterThanBlock:()=>v,FlowGraphGreaterThanOrEqualBlock:()=>B,FlowGraphInfBlock:()=>o,FlowGraphIsInfinityBlock:()=>R,FlowGraphIsNanBlock:()=>F,FlowGraphLeadingZerosBlock:()=>bI,FlowGraphLessThanBlock:()=>A,FlowGraphLessThanOrEqualBlock:()=>P,FlowGraphLog10Block:()=>hI,FlowGraphLog2Block:()=>EI,FlowGraphLogBlock:()=>mO,FlowGraphMathInterpolationBlock:()=>L,FlowGraphMaxBlock:()=>D,FlowGraphMinBlock:()=>x,FlowGraphModuloBlock:()=>l,FlowGraphMultiplyBlock:()=>E,FlowGraphNaNBlock:()=>c,FlowGraphNegationBlock:()=>J,FlowGraphOneBitsCounterBlock:()=>MI,FlowGraphPiBlock:()=>Y,FlowGraphPowerBlock:()=>YI,FlowGraphRadToDegBlock:()=>II,FlowGraphRandomBlock:()=>r,FlowGraphRoundBlock:()=>M,FlowGraphSaturateBlock:()=>V,FlowGraphSignBlock:()=>T,FlowGraphSinBlock:()=>OI,FlowGraphSinhBlock:()=>UI,FlowGraphSquareRootBlock:()=>rI,FlowGraphSubtractBlock:()=>mI,FlowGraphTanBlock:()=>jI,FlowGraphTanhBlock:()=>NI,FlowGraphTrailingZerosBlock:()=>aI,FlowGraphTruncBlock:()=>H});var j=C(12226),K=C(13886),i=C(15361),y=C(15369);class S extends y.e{constructor(I,O,C,j){super(I,j),this._operation=O,this._className=C}_doOperation(I){return this._operation(I)}getClassName(){return this._className}}var U=C(12272),p=C(15376);class N extends y.e{constructor(I,O,C,j,K,i,y){super(j,y),this._operation=K,this._className=i,this.a=this.registerDataInput("a",I),this.b=this.registerDataInput("b",O),this.c=this.registerDataInput("c",C)}_doOperation(I){return this._operation(this.a.getValue(I),this.b.getValue(I),this.c.getValue(I))}getClassName(){return this._className}}var Q=C(13878),s=C(13888),Z=C(13922);class q extends i.b{constructor(I){super((0,K.O)(null===I||void 0===I?void 0:I.type),(0,K.O)(null===I||void 0===I?void 0:I.type),(0,K.O)(null===I||void 0===I?void 0:I.type),((I,O)=>this._polymorphicAdd(I,O)),"FlowGraphAddBlock",I)}_polymorphicAdd(I,O){const C=(0,Z.m)(I),j=(0,Z.m)(O);if((0,Z.i)(C,j)||(0,Z.g)(C,j)||(0,Z.c)(C,j))return I.add(O);if("Quaternion"===C||"Vector4"===j)return new U.Vector4(I.x,I.y,I.z,I.w).addInPlace(O);if("Vector4"===C||"Quaternion"===j)return I.add(O);var K;if(null!==(K=this.config)&&void 0!==K&&K.preventIntegerFloatArithmetic&&typeof I!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,Z.r)(I)+(0,Z.r)(O)}}(0,j.e)("FlowGraphAddBlock",q);class mI extends i.b{constructor(I){super((0,K.O)(null===I||void 0===I?void 0:I.type),(0,K.O)(null===I||void 0===I?void 0:I.type),(0,K.O)(null===I||void 0===I?void 0:I.type),((I,O)=>this._polymorphicSubtract(I,O)),"FlowGraphSubtractBlock",I)}_polymorphicSubtract(I,O){const C=(0,Z.m)(I),j=(0,Z.m)(O);if((0,Z.i)(C,j)||(0,Z.c)(C,j)||(0,Z.g)(C,j))return I.EO(O);if("Quaternion"===C||"Vector4"===j)return new U.Vector4(I.x,I.y,I.z,I.w).OQ(O);if("Vector4"===C||"Quaternion"===j)return I.EO(O);var K;if(null!==(K=this.config)&&void 0!==K&&K.preventIntegerFloatArithmetic&&typeof I!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,Z.r)(I)-(0,Z.r)(O)}}(0,j.e)("FlowGraphSubtractBlock",mI);class E extends i.b{constructor(I){super((0,K.O)(null===I||void 0===I?void 0:I.type),(0,K.O)(null===I||void 0===I?void 0:I.type),(0,K.O)(null===I||void 0===I?void 0:I.type),((I,O)=>this._polymorphicMultiply(I,O)),"FlowGraphMultiplyBlock",I)}_polymorphicMultiply(I,O){const C=(0,Z.m)(I),j=(0,Z.m)(O);if((0,Z.i)(C,j)||(0,Z.c)(C,j))return I.multiply(O);if("Quaternion"===C||"Vector4"===j)return new U.Vector4(I.x,I.y,I.z,I.w).multiplyInPlace(O);if("Vector4"===C||"Quaternion"===j)return I.multiply(O);if((0,Z.g)(C,j)){var K;if(null!==(K=this.config)&&void 0!==K&&K.useMatrixPerComponent){const j=I.m;for(let I=0;I<j.length;I++)j[I]*=O.m[I];return"Matrix2D"===C?new s.d(j):"Matrix3D"===C?new s.f(j):U.Matrix.YO(j)}return O.multiply(I)}var i;if(null!==(i=this.config)&&void 0!==i&&i.preventIntegerFloatArithmetic&&typeof I!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,Z.r)(I)*(0,Z.r)(O)}}(0,j.e)("FlowGraphMultiplyBlock",E);class h extends i.b{constructor(I){super((0,K.O)(null===I||void 0===I?void 0:I.type),(0,K.O)(null===I||void 0===I?void 0:I.type),(0,K.O)(null===I||void 0===I?void 0:I.type),((I,O)=>this._polymorphicDivide(I,O)),"FlowGraphDivideBlock",I)}_polymorphicDivide(I,O){const C=(0,Z.m)(I),j=(0,Z.m)(O);if((0,Z.i)(C,j)||(0,Z.c)(C,j))return I.divide(O);if("Quaternion"===C||"Quaternion"===j){const C=I.clone();return C.x/=O.x,C.y/=O.y,C.z/=O.z,C.w/=O.w,C}if("Quaternion"===C||"Vector4"===j)return new U.Vector4(I.x,I.y,I.z,I.w).divideInPlace(O);if("Vector4"===C||"Quaternion"===j)return I.divide(O);if((0,Z.g)(C,j)){var K;if(null!==(K=this.config)&&void 0!==K&&K.useMatrixPerComponent){const j=I.m;for(let I=0;I<j.length;I++)j[I]/=O.m[I];return"Matrix2D"===C?new s.d(j):"Matrix3D"===C?new s.f(j):U.Matrix.YO(j)}return I.divide(O)}var i;if(null!==(i=this.config)&&void 0!==i&&i.preventIntegerFloatArithmetic&&typeof I!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,Z.r)(I)/(0,Z.r)(O)}}(0,j.e)("FlowGraphDivideBlock",h);class r extends S{constructor(I){super(K.u,(I=>this._random(I)),"FlowGraphRandomBlock",I),this.min=this.registerDataInput("min",K.u,(null===I||void 0===I?void 0:I.min)??0),this.max=this.registerDataInput("max",K.u,(null===I||void 0===I?void 0:I.max)??1),null!==I&&void 0!==I&&I.seed&&(this._seed=I.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const I=1e4*Math.sin(this._seed++);return I-Math.floor(I)}return Math.random()}_random(I){const O=this.min.getValue(I),C=this.max.getValue(I);return this._getRandomValue()*(C-O)+O}}(0,j.e)("FlowGraphRandomBlock",r);class W extends S{constructor(I){super(K.u,(()=>Math.E),"FlowGraphEBlock",I)}}(0,j.e)("FlowGraphEBlock",W);class Y extends S{constructor(I){super(K.u,(()=>Math.PI),"FlowGraphPIBlock",I)}}(0,j.e)("FlowGraphPIBlock",Y);class o extends S{constructor(I){super(K.u,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",I)}}(0,j.e)("FlowGraphInfBlock",o);class c extends S{constructor(I){super(K.u,(()=>Number.NaN),"FlowGraphNaNBlock",I)}}function n(I,O){switch((0,Z.m)(I)){case"FlowGraphInteger":return new Q.e(O(I.value));case"Vector2":return new U.Vector2(O(I.x),O(I.y));case"mC":return new U.mC(O(I.x),O(I.y),O(I.z));case"Vector4":return new U.Vector4(O(I.x),O(I.y),O(I.z),O(I.w));case"Quaternion":return new U.Quaternion(O(I.x),O(I.y),O(I.z),O(I.w));case"Matrix":return U.Matrix.YO(I.m.map(O));case"Matrix2D":return new s.d(I.m.map(O));case"Matrix3D":return new s.f(I.m.map(O));default:return O(I)}}(0,j.e)("FlowGraphNaNBlock",c);class X extends p.c{constructor(I){super(K.u,K.u,(I=>this._polymorphicAbs(I)),"FlowGraphAbsBlock",I)}_polymorphicAbs(I){return n(I,Math.abs)}}(0,j.e)("FlowGraphAbsBlock",X);class T extends p.c{constructor(I){super(K.u,K.u,(I=>this._polymorphicSign(I)),"FlowGraphSignBlock",I)}_polymorphicSign(I){return n(I,Math.sign)}}(0,j.e)("FlowGraphSignBlock",T);class H extends p.c{constructor(I){super(K.u,K.u,(I=>this._polymorphicTrunc(I)),"FlowGraphTruncBlock",I)}_polymorphicTrunc(I){return n(I,Math.trunc)}}(0,j.e)("FlowGraphTruncBlock",H);class b extends p.c{constructor(I){super(K.u,K.u,(I=>this._polymorphicFloor(I)),"FlowGraphFloorBlock",I)}_polymorphicFloor(I){return n(I,Math.floor)}}(0,j.e)("FlowGraphFloorBlock",b);class a extends p.c{constructor(I){super(K.d,K.d,(I=>this._polymorphicCeiling(I)),"FlowGraphCeilBlock",I)}_polymorphicCeiling(I){return n(I,Math.ceil)}}(0,j.e)("FlowGraphCeilBlock",a);class M extends p.c{constructor(I){super(K.d,K.d,(I=>this._polymorphicRound(I)),"FlowGraphRoundBlock",I)}_polymorphicRound(I){return n(I,(I=>{var O;return I<0&&null!==(O=this.config)&&void 0!==O&&O.roundHalfAwayFromZero?-Math.round(-I):Math.round(I)}))}}(0,j.e)("FlowGraphRoundBlock",M);class u extends p.c{constructor(I){super(K.d,K.d,(I=>this._polymorphicFraction(I)),"FlowGraphFractBlock",I)}_polymorphicFraction(I){return n(I,(I=>I-Math.floor(I)))}}(0,j.e)("FlowGraphFractBlock",u);class J extends p.c{constructor(I){super(K.d,K.d,(I=>this._polymorphicNeg(I)),"FlowGraphNegationBlock",I)}_polymorphicNeg(I){return n(I,(I=>-I))}}function f(I,O,C){switch((0,Z.m)(I)){case"FlowGraphInteger":return new Q.e(C(I.value,O.value));case"Vector2":return new U.Vector2(C(I.x,O.x),C(I.y,O.y));case"mC":return new U.mC(C(I.x,O.x),C(I.y,O.y),C(I.z,O.z));case"Vector4":return new U.Vector4(C(I.x,O.x),C(I.y,O.y),C(I.z,O.z),C(I.w,O.w));case"Quaternion":return new U.Quaternion(C(I.x,O.x),C(I.y,O.y),C(I.z,O.z),C(I.w,O.w));case"Matrix":return U.Matrix.YO(I.m.map(((I,j)=>C(I,O.m[j]))));case"Matrix2D":return new s.d(I.m.map(((I,j)=>C(I,O.m[j]))));case"Matrix3D":return new s.f(I.m.map(((I,j)=>C(I,O.m[j]))));default:return C((0,Z.r)(I),(0,Z.r)(O))}}(0,j.e)("FlowGraphNegationBlock",J);class l extends i.b{constructor(I){super(K.d,K.d,K.d,((I,O)=>this._polymorphicRemainder(I,O)),"FlowGraphModuloBlock",I)}_polymorphicRemainder(I,O){return f(I,O,((I,O)=>I%O))}}(0,j.e)("FlowGraphModuloBlock",l);class x extends i.b{constructor(I){super(K.d,K.d,K.d,((I,O)=>this._polymorphicMin(I,O)),"FlowGraphMinBlock",I)}_polymorphicMin(I,O){return f(I,O,Math.min)}}(0,j.e)("FlowGraphMinBlock",x);class D extends i.b{constructor(I){super(K.d,K.d,K.d,((I,O)=>this._polymorphicMax(I,O)),"FlowGraphMaxBlock",I)}_polymorphicMax(I,O){return f(I,O,Math.max)}}function t(I,O,C){return Math.min(Math.max(I,Math.min(O,C)),Math.max(O,C))}function d(I,O,C,j){switch((0,Z.m)(I)){case"FlowGraphInteger":return new Q.e(j(I.value,O.value,C.value));case"Vector2":return new U.Vector2(j(I.x,O.x,C.x),j(I.y,O.y,C.y));case"mC":return new U.mC(j(I.x,O.x,C.x),j(I.y,O.y,C.y),j(I.z,O.z,C.z));case"Vector4":return new U.Vector4(j(I.x,O.x,C.x),j(I.y,O.y,C.y),j(I.z,O.z,C.z),j(I.w,O.w,C.w));case"Quaternion":return new U.Quaternion(j(I.x,O.x,C.x),j(I.y,O.y,C.y),j(I.z,O.z,C.z),j(I.w,O.w,C.w));case"Matrix":return U.Matrix.YO(I.m.map(((I,K)=>j(I,O.m[K],C.m[K]))));case"Matrix2D":return new s.d(I.m.map(((I,K)=>j(I,O.m[K],C.m[K]))));case"Matrix3D":return new s.f(I.m.map(((I,K)=>j(I,O.m[K],C.m[K]))));default:return j((0,Z.r)(I),(0,Z.r)(O),(0,Z.r)(C))}}(0,j.e)("FlowGraphMaxBlock",D);class w extends N{constructor(I){super(K.d,K.d,K.d,K.d,((I,O,C)=>this._polymorphicClamp(I,O,C)),"FlowGraphClampBlock",I)}_polymorphicClamp(I,O,C){return d(I,O,C,t)}}function g(I){return Math.min(Math.max(I,0),1)}(0,j.e)("FlowGraphClampBlock",w);class V extends p.c{constructor(I){super(K.d,K.d,(I=>this._polymorphicSaturate(I)),"FlowGraphSaturateBlock",I)}_polymorphicSaturate(I){return n(I,g)}}function e(I,O,C){return(1-C)*I+C*O}(0,j.e)("FlowGraphSaturateBlock",V);class L extends N{constructor(I){super(K.d,K.d,K.d,K.d,((I,O,C)=>this._polymorphicInterpolate(I,O,C)),"FlowGraphMathInterpolationBlock",I)}_polymorphicInterpolate(I,O,C){return d(I,O,C,e)}}(0,j.e)("FlowGraphMathInterpolationBlock",L);class z extends i.b{constructor(I){super(K.d,K.d,K.g,((I,O)=>this._polymorphicEq(I,O)),"FlowGraphEqualityBlock",I)}_polymorphicEq(I,O){const C=(0,Z.m)(I),j=(0,Z.m)(O);return typeof I===typeof O&&((0,Z.i)(C,j)||(0,Z.g)(C,j)||(0,Z.c)(C,j)?I.equals(O):I===O)}}function k(I,O,C){if((0,Z.t)(I)&&(0,Z.t)(O))return C((0,Z.r)(I),(0,Z.r)(O));throw new Error(`Cannot compare ${I} and ${O}`)}(0,j.e)("FlowGraphEqualityBlock",z);class A extends i.b{constructor(I){super(K.d,K.d,K.g,((I,O)=>this._polymorphicLessThan(I,O)),"FlowGraphLessThanBlock",I)}_polymorphicLessThan(I,O){return k(I,O,((I,O)=>I<O))}}(0,j.e)("FlowGraphLessThanBlock",A);class P extends i.b{constructor(I){super(K.d,K.d,K.g,((I,O)=>this._polymorphicLessThanOrEqual(I,O)),"FlowGraphLessThanOrEqualBlock",I)}_polymorphicLessThanOrEqual(I,O){return k(I,O,((I,O)=>I<=O))}}(0,j.e)("FlowGraphLessThanOrEqualBlock",P);class v extends i.b{constructor(I){super(K.d,K.d,K.g,((I,O)=>this._polymorphicGreaterThan(I,O)),"FlowGraphGreaterThanBlock",I)}_polymorphicGreaterThan(I,O){return k(I,O,((I,O)=>I>O))}}(0,j.e)("FlowGraphGreaterThanBlock",v);class B extends i.b{constructor(I){super(K.d,K.d,K.g,((I,O)=>this._polymorphicGreaterThanOrEqual(I,O)),"FlowGraphGreaterThanOrEqualBlock",I)}_polymorphicGreaterThanOrEqual(I,O){return k(I,O,((I,O)=>I>=O))}}(0,j.e)("FlowGraphGreaterThanOrEqualBlock",B);class F extends p.c{constructor(I){super(K.d,K.g,(I=>this._polymorphicIsNan(I)),"FlowGraphIsNaNBlock",I)}_polymorphicIsNan(I){if((0,Z.t)(I,!0))return isNaN((0,Z.r)(I));throw new Error(`Cannot get NaN of ${I}`)}}(0,j.e)("FlowGraphIsNaNBlock",F);class R extends p.c{constructor(I){super(K.d,K.g,(I=>this._polymorphicIsInf(I)),"FlowGraphIsInfBlock",I)}_polymorphicIsInf(I){if((0,Z.t)(I))return!isFinite((0,Z.r)(I));throw new Error(`Cannot get isInf of ${I}`)}}(0,j.e)("FlowGraphIsInfBlock",R);class G extends p.c{constructor(I){super(K.d,K.d,(I=>this._polymorphicDegToRad(I)),"FlowGraphDegToRadBlock",I)}_degToRad(I){return I*Math.PI/180}_polymorphicDegToRad(I){return n(I,this._degToRad)}}(0,j.e)("FlowGraphDegToRadBlock",G);class II extends p.c{constructor(I){super(K.d,K.d,(I=>this._polymorphicRadToDeg(I)),"FlowGraphRadToDegBlock",I)}_radToDeg(I){return 180*I/Math.PI}_polymorphicRadToDeg(I){return n(I,this._radToDeg)}}(0,j.e)("FlowGraphRadToDegBlock",II);class OI extends p.c{constructor(I){super(K.u,K.u,(I=>this._polymorphicSin(I)),"FlowGraphSinBlock",I)}_polymorphicSin(I){return n(I,Math.sin)}}class CI extends p.c{constructor(I){super(K.u,K.u,(I=>this._polymorphicCos(I)),"FlowGraphCosBlock",I)}_polymorphicCos(I){return n(I,Math.cos)}}class jI extends p.c{constructor(I){super(K.u,K.u,(I=>this._polymorphicTan(I)),"FlowGraphTanBlock",I)}_polymorphicTan(I){return n(I,Math.tan)}}class KI extends p.c{constructor(I){super(K.u,K.u,(I=>this._polymorphicAsin(I)),"FlowGraphASinBlock",I)}_polymorphicAsin(I){return n(I,Math.asin)}}(0,j.e)("FlowGraphASinBlock",KI);class iI extends p.c{constructor(I){super(K.u,K.u,(I=>this._polymorphicAcos(I)),"FlowGraphACosBlock",I)}_polymorphicAcos(I){return n(I,Math.acos)}}(0,j.e)("FlowGraphACosBlock",iI);class yI extends p.c{constructor(I){super(K.u,K.u,(I=>this._polymorphicAtan(I)),"FlowGraphATanBlock",I)}_polymorphicAtan(I){return n(I,Math.atan)}}(0,j.e)("FlowGraphATanBlock",yI);class SI extends i.b{constructor(I){super(K.d,K.d,K.d,((I,O)=>this._polymorphicAtan2(I,O)),"FlowGraphATan2Block",I)}_polymorphicAtan2(I,O){return f(I,O,Math.atan2)}}(0,j.e)("FlowGraphATan2Block",SI);class UI extends p.c{constructor(I){super(K.d,K.d,(I=>this._polymorphicSinh(I)),"FlowGraphSinhBlock",I)}_polymorphicSinh(I){return n(I,Math.sinh)}}(0,j.e)("FlowGraphSinhBlock",UI);class pI extends p.c{constructor(I){super(K.d,K.d,(I=>this._polymorphicCosh(I)),"FlowGraphCoshBlock",I)}_polymorphicCosh(I){return n(I,Math.cosh)}}(0,j.e)("FlowGraphCoshBlock",pI);class NI extends p.c{constructor(I){super(K.d,K.d,(I=>this._polymorphicTanh(I)),"FlowGraphTanhBlock",I)}_polymorphicTanh(I){return n(I,Math.tanh)}}(0,j.e)("FlowGraphTanhBlock",NI);class QI extends p.c{constructor(I){super(K.d,K.u,(I=>this._polymorphicAsinh(I)),"FlowGraphASinhBlock",I)}_polymorphicAsinh(I){return n(I,Math.asinh)}}(0,j.e)("FlowGraphASinhBlock",QI);class sI extends p.c{constructor(I){super(K.d,K.u,(I=>this._polymorphicAcosh(I)),"FlowGraphACoshBlock",I)}_polymorphicAcosh(I){return n(I,Math.acosh)}}(0,j.e)("FlowGraphACoshBlock",sI);class ZI extends p.c{constructor(I){super(K.d,K.u,(I=>this._polymorphicAtanh(I)),"FlowGraphATanhBlock",I)}_polymorphicAtanh(I){return n(I,Math.atanh)}}(0,j.e)("FlowGraphATanhBlock",ZI);class qI extends p.c{constructor(I){super(K.d,K.u,(I=>this._polymorphicExp(I)),"FlowGraphExponentialBlock",I)}_polymorphicExp(I){return n(I,Math.exp)}}(0,j.e)("FlowGraphExponentialBlock",qI);class mO extends p.c{constructor(I){super(K.d,K.u,(I=>this._polymorphicLog(I)),"FlowGraphLogBlock",I)}_polymorphicLog(I){return n(I,Math.log)}}(0,j.e)("FlowGraphLogBlock",mO);class EI extends p.c{constructor(I){super(K.d,K.u,(I=>this._polymorphicLog2(I)),"FlowGraphLog2Block",I)}_polymorphicLog2(I){return n(I,Math.log2)}}(0,j.e)("FlowGraphLog2Block",EI);class hI extends p.c{constructor(I){super(K.d,K.u,(I=>this._polymorphicLog10(I)),"FlowGraphLog10Block",I)}_polymorphicLog10(I){return n(I,Math.log10)}}(0,j.e)("FlowGraphLog10Block",hI);class rI extends p.c{constructor(I){super(K.d,K.u,(I=>this._polymorphicSqrt(I)),"FlowGraphSquareRootBlock",I)}_polymorphicSqrt(I){return n(I,Math.sqrt)}}(0,j.e)("FlowGraphSquareRootBlock",rI);class WI extends p.c{constructor(I){super(K.d,K.u,(I=>this._polymorphicCubeRoot(I)),"FlowGraphCubeRootBlock",I)}_polymorphicCubeRoot(I){return n(I,Math.cbrt)}}(0,j.e)("FlowGraphCubeRootBlock",WI);class YI extends i.b{constructor(I){super(K.d,K.u,K.u,((I,O)=>this._polymorphicPow(I,O)),"FlowGraphPowerBlock",I)}_polymorphicPow(I,O){return f(I,O,Math.pow)}}(0,j.e)("FlowGraphPowerBlock",YI);class oI extends p.c{constructor(I){super((0,K.O)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,K.O)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(I=>"boolean"===typeof I?!I:"number"===typeof I?~I:new Q.e(~I.value)),"FlowGraphBitwiseNotBlock",I)}}(0,j.e)("FlowGraphBitwiseNotBlock",oI);class cI extends i.b{constructor(I){super((0,K.O)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,K.O)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,K.O)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),((I,O)=>{if("boolean"===typeof I&&"boolean"===typeof O)return I&&O;if("number"===typeof I&&"number"===typeof O)return I&O;if("object"===typeof I&&"object"===typeof O)return new Q.e(I.value&O.value);throw new Error(`Cannot perform bitwise AND on ${I} and ${O}`)}),"FlowGraphBitwiseAndBlock",I)}}(0,j.e)("FlowGraphBitwiseAndBlock",cI);class nI extends i.b{constructor(I){super((0,K.O)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,K.O)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,K.O)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),((I,O)=>{if("boolean"===typeof I&&"boolean"===typeof O)return I||O;if("number"===typeof I&&"number"===typeof O)return I|O;if("object"===typeof I&&"object"===typeof O)return new Q.e(I.value|O.value);throw new Error(`Cannot perform bitwise OR on ${I} and ${O}`)}),"FlowGraphBitwiseOrBlock",I)}}(0,j.e)("FlowGraphBitwiseOrBlock",nI);class XI extends i.b{constructor(I){super((0,K.O)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,K.O)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,K.O)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),((I,O)=>{if("boolean"===typeof I&&"boolean"===typeof O)return I!==O;if("number"===typeof I&&"number"===typeof O)return I^O;if("object"===typeof I&&"object"===typeof O)return new Q.e(I.value^O.value);throw new Error(`Cannot perform bitwise XOR on ${I} and ${O}`)}),"FlowGraphBitwiseXorBlock",I)}}(0,j.e)("FlowGraphBitwiseXorBlock",XI);class TI extends i.b{constructor(I){super(K.h,K.h,K.h,((I,O)=>new Q.e(I.value<<O.value)),"FlowGraphBitwiseLeftShiftBlock",I)}}(0,j.e)("FlowGraphBitwiseLeftShiftBlock",TI);class HI extends i.b{constructor(I){super(K.h,K.h,K.h,((I,O)=>new Q.e(I.value>>O.value)),"FlowGraphBitwiseRightShiftBlock",I)}}(0,j.e)("FlowGraphBitwiseRightShiftBlock",HI);class bI extends p.c{constructor(I){super(K.h,K.h,(I=>new Q.e(Math.clz32(I.value))),"FlowGraphLeadingZerosBlock",I)}}(0,j.e)("FlowGraphLeadingZerosBlock",bI);class aI extends p.c{constructor(I){super(K.h,K.h,(I=>new Q.e(I.value?31-Math.clz32(I.value&-I.value):32)),"FlowGraphTrailingZerosBlock",I)}}(0,j.e)("FlowGraphTrailingZerosBlock",aI);class MI extends p.c{constructor(I){super(K.h,K.h,(I=>new Q.e(function(I){let O=0;for(;I;)O+=1&I,I>>=1;return O}(I.value))),"FlowGraphOneBitsCounterBlock",I)}}(0,j.e)("FlowGraphOneBitsCounterBlock",MI)},15361:(I,O,C)=>{C.d(O,{b:()=>K});var j=C(15369);class K extends j.e{constructor(I,O,C,j,K,i){super(C,i),this._operation=j,this._className=K,this.a=this.registerDataInput("a",I),this.b=this.registerDataInput("b",O)}_doOperation(I){const O=this.a.getValue(I),C=this.b.getValue(I);return this._operation(O,C)}getClassName(){return this._className}}},15369:(I,O,C)=>{C.d(O,{e:()=>S});var j=C(13906),K=C(13886);const i="cachedOperationValue",y="cachedExecutionId";class S extends j.d{constructor(I,O){super(O),this.value=this.registerDataOutput("value",I),this.isValid=this.registerDataOutput("isValid",K.g)}_updateOutputs(I){const O=I._getExecutionVariable(this,y,-1),C=I._getExecutionVariable(this,i,null);if(void 0!==C&&null!==C&&O===I.executionId)this.isValid.setValue(!0,I),this.value.setValue(C,I);else try{const O=this._doOperation(I);if(void 0===O||null===O)return void this.isValid.setValue(!1,I);I._setExecutionVariable(this,i,O),I._setExecutionVariable(this,y,I.executionId),this.value.setValue(O,I),this.isValid.setValue(!0,I)}catch(j){this.isValid.setValue(!1,I)}}}},15376:(I,O,C)=>{C.d(O,{c:()=>K});var j=C(15369);class K extends j.e{constructor(I,O,C,j,K){super(O,K),this._operation=C,this._className=j,this.a=this.registerDataInput("a",I)}_doOperation(I){return this._operation(this.a.getValue(I))}getClassName(){return this._className}}}}]);