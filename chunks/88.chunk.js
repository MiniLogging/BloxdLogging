"use strict";(self.mo7o6813fhb=self.mo7o6813fhb||[]).push([[88],{15384:(t,U,y)=>{y.r(U),y.d(U,{FlowGraphAbsBlock:()=>f,FlowGraphAcosBlock:()=>Yt,FlowGraphAcoshBlock:()=>ht,FlowGraphAddBlock:()=>F,FlowGraphAsinBlock:()=>rt,FlowGraphAsinhBlock:()=>Lt,FlowGraphAtan2Block:()=>Xt,FlowGraphAtanBlock:()=>mU,FlowGraphAtanhBlock:()=>Qt,FlowGraphBitwiseAndBlock:()=>pt,FlowGraphBitwiseLeftShiftBlock:()=>St,FlowGraphBitwiseNotBlock:()=>bt,FlowGraphBitwiseOrBlock:()=>ct,FlowGraphBitwiseRightShiftBlock:()=>Nt,FlowGraphBitwiseXorBlock:()=>ft,FlowGraphCeilBlock:()=>J,FlowGraphClampBlock:()=>v,FlowGraphCosBlock:()=>yt,FlowGraphCoshBlock:()=>Gt,FlowGraphCubeRootBlock:()=>gt,FlowGraphDegToRadBlock:()=>z,FlowGraphDivideBlock:()=>D,FlowGraphEBlock:()=>g,FlowGraphEqualityBlock:()=>Z,FlowGraphExpBlock:()=>Ft,FlowGraphFloorBlock:()=>j,FlowGraphFractionBlock:()=>d,FlowGraphGreaterThanBlock:()=>C,FlowGraphGreaterThanOrEqualBlock:()=>R,FlowGraphInfBlock:()=>b,FlowGraphIsInfinityBlock:()=>T,FlowGraphIsNanBlock:()=>u,FlowGraphLeadingZerosBlock:()=>jt,FlowGraphLessThanBlock:()=>A,FlowGraphLessThanOrEqualBlock:()=>K,FlowGraphLog10Block:()=>Dt,FlowGraphLog2Block:()=>wt,FlowGraphLogBlock:()=>Et,FlowGraphMathInterpolationBlock:()=>x,FlowGraphMaxBlock:()=>V,FlowGraphMinBlock:()=>o,FlowGraphModuloBlock:()=>e,FlowGraphMultiplyBlock:()=>w,FlowGraphNaNBlock:()=>p,FlowGraphNegationBlock:()=>q,FlowGraphOneBitsCounterBlock:()=>at,FlowGraphPiBlock:()=>B,FlowGraphPowerBlock:()=>Bt,FlowGraphRadToDegBlock:()=>tt,FlowGraphRandomBlock:()=>l,FlowGraphRoundBlock:()=>a,FlowGraphSaturateBlock:()=>k,FlowGraphSignBlock:()=>S,FlowGraphSinBlock:()=>Ut,FlowGraphSinhBlock:()=>Pt,FlowGraphSquareRootBlock:()=>lt,FlowGraphSubtractBlock:()=>E,FlowGraphTanBlock:()=>It,FlowGraphTanhBlock:()=>Mt,FlowGraphTrailingZerosBlock:()=>Jt,FlowGraphTruncBlock:()=>N});var I=y(12338),r=y(13845),Y=y(15390),mt=y(15392);class X extends mt.d{constructor(t,U,y,I){super(t,I),this._operation=U,this._className=y}_doOperation(t){return this._operation(t)}getClassName(){return this._className}}var P=y(12386),G=y(15398);class M extends mt.d{constructor(t,U,y,I,r,Y,mt){super(I,mt),this._operation=r,this._className=Y,this.a=this.registerDataInput("a",t),this.b=this.registerDataInput("b",U),this.c=this.registerDataInput("c",y)}_doOperation(t){return this._operation(this.a.getValue(t),this.b.getValue(t),this.c.getValue(t))}getClassName(){return this._className}}var L=y(13842),h=y(13852),Q=y(13879);class F extends Y.e{constructor(t){super((0,r.S)(null===t||void 0===t?void 0:t.type),(0,r.S)(null===t||void 0===t?void 0:t.type),(0,r.S)(null===t||void 0===t?void 0:t.type),((t,U)=>this._polymorphicAdd(t,U)),"FlowGraphAddBlock",t)}_polymorphicAdd(t,U){const y=(0,Q.n)(t),I=(0,Q.n)(U);if((0,Q.k)(y,I)||(0,Q.h)(y,I)||(0,Q.d)(y,I))return t.add(U);if("Quaternion"===y||"Vector4"===I)return new P.Vector4(t.x,t.y,t.z,t.w).addInPlace(U);if("Vector4"===y||"Quaternion"===I)return t.add(U);var r;if(null!==(r=this.config)&&void 0!==r&&r.preventIntegerFloatArithmetic&&typeof t!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,Q.q)(t)+(0,Q.q)(U)}}(0,I.f)("FlowGraphAddBlock",F);class E extends Y.e{constructor(t){super((0,r.S)(null===t||void 0===t?void 0:t.type),(0,r.S)(null===t||void 0===t?void 0:t.type),(0,r.S)(null===t||void 0===t?void 0:t.type),((t,U)=>this._polymorphicSubtract(t,U)),"FlowGraphSubtractBlock",t)}_polymorphicSubtract(t,U){const y=(0,Q.n)(t),I=(0,Q.n)(U);if((0,Q.k)(y,I)||(0,Q.d)(y,I)||(0,Q.h)(y,I))return t.lU(U);if("Quaternion"===y||"Vector4"===I)return new P.Vector4(t.x,t.y,t.z,t.w).GL(U);if("Vector4"===y||"Quaternion"===I)return t.lU(U);var r;if(null!==(r=this.config)&&void 0!==r&&r.preventIntegerFloatArithmetic&&typeof t!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,Q.q)(t)-(0,Q.q)(U)}}(0,I.f)("FlowGraphSubtractBlock",E);class w extends Y.e{constructor(t){super((0,r.S)(null===t||void 0===t?void 0:t.type),(0,r.S)(null===t||void 0===t?void 0:t.type),(0,r.S)(null===t||void 0===t?void 0:t.type),((t,U)=>this._polymorphicMultiply(t,U)),"FlowGraphMultiplyBlock",t)}_polymorphicMultiply(t,U){const y=(0,Q.n)(t),I=(0,Q.n)(U);if((0,Q.k)(y,I)||(0,Q.d)(y,I))return t.multiply(U);if("Quaternion"===y||"Vector4"===I)return new P.Vector4(t.x,t.y,t.z,t.w).multiplyInPlace(U);if("Vector4"===y||"Quaternion"===I)return t.multiply(U);if((0,Q.h)(y,I)){var r;if(null!==(r=this.config)&&void 0!==r&&r.useMatrixPerComponent){const I=t.m;for(let t=0;t<I.length;t++)I[t]*=U.m[t];return"Matrix2D"===y?new h.e(I):"Matrix3D"===y?new h.g(I):P.Matrix.pU(I)}return U.multiply(t)}var Y;if(null!==(Y=this.config)&&void 0!==Y&&Y.preventIntegerFloatArithmetic&&typeof t!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,Q.q)(t)*(0,Q.q)(U)}}(0,I.f)("FlowGraphMultiplyBlock",w);class D extends Y.e{constructor(t){super((0,r.S)(null===t||void 0===t?void 0:t.type),(0,r.S)(null===t||void 0===t?void 0:t.type),(0,r.S)(null===t||void 0===t?void 0:t.type),((t,U)=>this._polymorphicDivide(t,U)),"FlowGraphDivideBlock",t)}_polymorphicDivide(t,U){const y=(0,Q.n)(t),I=(0,Q.n)(U);if((0,Q.k)(y,I)||(0,Q.d)(y,I))return t.divide(U);if("Quaternion"===y||"Quaternion"===I){const y=t.clone();return y.x/=U.x,y.y/=U.y,y.z/=U.z,y.w/=U.w,y}if("Quaternion"===y||"Vector4"===I)return new P.Vector4(t.x,t.y,t.z,t.w).divideInPlace(U);if("Vector4"===y||"Quaternion"===I)return t.divide(U);if((0,Q.h)(y,I)){var r;if(null!==(r=this.config)&&void 0!==r&&r.useMatrixPerComponent){const I=t.m;for(let t=0;t<I.length;t++)I[t]/=U.m[t];return"Matrix2D"===y?new h.e(I):"Matrix3D"===y?new h.g(I):P.Matrix.pU(I)}return t.divide(U)}var Y;if(null!==(Y=this.config)&&void 0!==Y&&Y.preventIntegerFloatArithmetic&&typeof t!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,Q.q)(t)/(0,Q.q)(U)}}(0,I.f)("FlowGraphDivideBlock",D);class l extends X{constructor(t){super(r.w,(t=>this._random(t)),"FlowGraphRandomBlock",t),this.min=this.registerDataInput("min",r.w,(null===t||void 0===t?void 0:t.min)??0),this.max=this.registerDataInput("max",r.w,(null===t||void 0===t?void 0:t.max)??1),null!==t&&void 0!==t&&t.seed&&(this._seed=t.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const t=1e4*Math.sin(this._seed++);return t-Math.floor(t)}return Math.random()}_random(t){const U=this.min.getValue(t),y=this.max.getValue(t);return this._getRandomValue()*(y-U)+U}}(0,I.f)("FlowGraphRandomBlock",l);class g extends X{constructor(t){super(r.w,(()=>Math.E),"FlowGraphEBlock",t)}}(0,I.f)("FlowGraphEBlock",g);class B extends X{constructor(t){super(r.w,(()=>Math.PI),"FlowGraphPIBlock",t)}}(0,I.f)("FlowGraphPIBlock",B);class b extends X{constructor(t){super(r.w,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",t)}}(0,I.f)("FlowGraphInfBlock",b);class p extends X{constructor(t){super(r.w,(()=>Number.NaN),"FlowGraphNaNBlock",t)}}function c(t,U){switch((0,Q.n)(t)){case"FlowGraphInteger":return new L.c(U(t.value));case"Vector2":return new P.Vector2(U(t.x),U(t.y));case"DU":return new P.DU(U(t.x),U(t.y),U(t.z));case"Vector4":return new P.Vector4(U(t.x),U(t.y),U(t.z),U(t.w));case"Quaternion":return new P.Quaternion(U(t.x),U(t.y),U(t.z),U(t.w));case"Matrix":return P.Matrix.pU(t.m.map(U));case"Matrix2D":return new h.e(t.m.map(U));case"Matrix3D":return new h.g(t.m.map(U));default:return U(t)}}(0,I.f)("FlowGraphNaNBlock",p);class f extends G.c{constructor(t){super(r.w,r.w,(t=>this._polymorphicAbs(t)),"FlowGraphAbsBlock",t)}_polymorphicAbs(t){return c(t,Math.abs)}}(0,I.f)("FlowGraphAbsBlock",f);class S extends G.c{constructor(t){super(r.w,r.w,(t=>this._polymorphicSign(t)),"FlowGraphSignBlock",t)}_polymorphicSign(t){return c(t,Math.sign)}}(0,I.f)("FlowGraphSignBlock",S);class N extends G.c{constructor(t){super(r.w,r.w,(t=>this._polymorphicTrunc(t)),"FlowGraphTruncBlock",t)}_polymorphicTrunc(t){return c(t,Math.trunc)}}(0,I.f)("FlowGraphTruncBlock",N);class j extends G.c{constructor(t){super(r.w,r.w,(t=>this._polymorphicFloor(t)),"FlowGraphFloorBlock",t)}_polymorphicFloor(t){return c(t,Math.floor)}}(0,I.f)("FlowGraphFloorBlock",j);class J extends G.c{constructor(t){super(r.e,r.e,(t=>this._polymorphicCeiling(t)),"FlowGraphCeilBlock",t)}_polymorphicCeiling(t){return c(t,Math.ceil)}}(0,I.f)("FlowGraphCeilBlock",J);class a extends G.c{constructor(t){super(r.e,r.e,(t=>this._polymorphicRound(t)),"FlowGraphRoundBlock",t)}_polymorphicRound(t){return c(t,(t=>{var U;return t<0&&null!==(U=this.config)&&void 0!==U&&U.roundHalfAwayFromZero?-Math.round(-t):Math.round(t)}))}}(0,I.f)("FlowGraphRoundBlock",a);class d extends G.c{constructor(t){super(r.e,r.e,(t=>this._polymorphicFraction(t)),"FlowGraphFractBlock",t)}_polymorphicFraction(t){return c(t,(t=>t-Math.floor(t)))}}(0,I.f)("FlowGraphFractBlock",d);class q extends G.c{constructor(t){super(r.e,r.e,(t=>this._polymorphicNeg(t)),"FlowGraphNegationBlock",t)}_polymorphicNeg(t){return c(t,(t=>-t))}}function H(t,U,y){switch((0,Q.n)(t)){case"FlowGraphInteger":return new L.c(y(t.value,U.value));case"Vector2":return new P.Vector2(y(t.x,U.x),y(t.y,U.y));case"DU":return new P.DU(y(t.x,U.x),y(t.y,U.y),y(t.z,U.z));case"Vector4":return new P.Vector4(y(t.x,U.x),y(t.y,U.y),y(t.z,U.z),y(t.w,U.w));case"Quaternion":return new P.Quaternion(y(t.x,U.x),y(t.y,U.y),y(t.z,U.z),y(t.w,U.w));case"Matrix":return P.Matrix.pU(t.m.map(((t,I)=>y(t,U.m[I]))));case"Matrix2D":return new h.e(t.m.map(((t,I)=>y(t,U.m[I]))));case"Matrix3D":return new h.g(t.m.map(((t,I)=>y(t,U.m[I]))));default:return y((0,Q.q)(t),(0,Q.q)(U))}}(0,I.f)("FlowGraphNegationBlock",q);class e extends Y.e{constructor(t){super(r.e,r.e,r.e,((t,U)=>this._polymorphicRemainder(t,U)),"FlowGraphModuloBlock",t)}_polymorphicRemainder(t,U){return H(t,U,((t,U)=>t%U))}}(0,I.f)("FlowGraphModuloBlock",e);class o extends Y.e{constructor(t){super(r.e,r.e,r.e,((t,U)=>this._polymorphicMin(t,U)),"FlowGraphMinBlock",t)}_polymorphicMin(t,U){return H(t,U,Math.min)}}(0,I.f)("FlowGraphMinBlock",o);class V extends Y.e{constructor(t){super(r.e,r.e,r.e,((t,U)=>this._polymorphicMax(t,U)),"FlowGraphMaxBlock",t)}_polymorphicMax(t,U){return H(t,U,Math.max)}}function n(t,U,y){return Math.min(Math.max(t,Math.min(U,y)),Math.max(U,y))}function i(t,U,y,I){switch((0,Q.n)(t)){case"FlowGraphInteger":return new L.c(I(t.value,U.value,y.value));case"Vector2":return new P.Vector2(I(t.x,U.x,y.x),I(t.y,U.y,y.y));case"DU":return new P.DU(I(t.x,U.x,y.x),I(t.y,U.y,y.y),I(t.z,U.z,y.z));case"Vector4":return new P.Vector4(I(t.x,U.x,y.x),I(t.y,U.y,y.y),I(t.z,U.z,y.z),I(t.w,U.w,y.w));case"Quaternion":return new P.Quaternion(I(t.x,U.x,y.x),I(t.y,U.y,y.y),I(t.z,U.z,y.z),I(t.w,U.w,y.w));case"Matrix":return P.Matrix.pU(t.m.map(((t,r)=>I(t,U.m[r],y.m[r]))));case"Matrix2D":return new h.e(t.m.map(((t,r)=>I(t,U.m[r],y.m[r]))));case"Matrix3D":return new h.g(t.m.map(((t,r)=>I(t,U.m[r],y.m[r]))));default:return I((0,Q.q)(t),(0,Q.q)(U),(0,Q.q)(y))}}(0,I.f)("FlowGraphMaxBlock",V);class v extends M{constructor(t){super(r.e,r.e,r.e,r.e,((t,U,y)=>this._polymorphicClamp(t,U,y)),"FlowGraphClampBlock",t)}_polymorphicClamp(t,U,y){return i(t,U,y,n)}}function O(t){return Math.min(Math.max(t,0),1)}(0,I.f)("FlowGraphClampBlock",v);class k extends G.c{constructor(t){super(r.e,r.e,(t=>this._polymorphicSaturate(t)),"FlowGraphSaturateBlock",t)}_polymorphicSaturate(t){return c(t,O)}}function s(t,U,y){return(1-y)*t+y*U}(0,I.f)("FlowGraphSaturateBlock",k);class x extends M{constructor(t){super(r.e,r.e,r.e,r.e,((t,U,y)=>this._polymorphicInterpolate(t,U,y)),"FlowGraphMathInterpolationBlock",t)}_polymorphicInterpolate(t,U,y){return i(t,U,y,s)}}(0,I.f)("FlowGraphMathInterpolationBlock",x);class Z extends Y.e{constructor(t){super(r.e,r.e,r.i,((t,U)=>this._polymorphicEq(t,U)),"FlowGraphEqualityBlock",t)}_polymorphicEq(t,U){const y=(0,Q.n)(t),I=(0,Q.n)(U);return typeof t===typeof U&&((0,Q.k)(y,I)||(0,Q.h)(y,I)||(0,Q.d)(y,I)?t.equals(U):t===U)}}function W(t,U,y){if((0,Q.t)(t)&&(0,Q.t)(U))return y((0,Q.q)(t),(0,Q.q)(U));throw new Error(`Cannot compare ${t} and ${U}`)}(0,I.f)("FlowGraphEqualityBlock",Z);class A extends Y.e{constructor(t){super(r.e,r.e,r.i,((t,U)=>this._polymorphicLessThan(t,U)),"FlowGraphLessThanBlock",t)}_polymorphicLessThan(t,U){return W(t,U,((t,U)=>t<U))}}(0,I.f)("FlowGraphLessThanBlock",A);class K extends Y.e{constructor(t){super(r.e,r.e,r.i,((t,U)=>this._polymorphicLessThanOrEqual(t,U)),"FlowGraphLessThanOrEqualBlock",t)}_polymorphicLessThanOrEqual(t,U){return W(t,U,((t,U)=>t<=U))}}(0,I.f)("FlowGraphLessThanOrEqualBlock",K);class C extends Y.e{constructor(t){super(r.e,r.e,r.i,((t,U)=>this._polymorphicGreaterThan(t,U)),"FlowGraphGreaterThanBlock",t)}_polymorphicGreaterThan(t,U){return W(t,U,((t,U)=>t>U))}}(0,I.f)("FlowGraphGreaterThanBlock",C);class R extends Y.e{constructor(t){super(r.e,r.e,r.i,((t,U)=>this._polymorphicGreaterThanOrEqual(t,U)),"FlowGraphGreaterThanOrEqualBlock",t)}_polymorphicGreaterThanOrEqual(t,U){return W(t,U,((t,U)=>t>=U))}}(0,I.f)("FlowGraphGreaterThanOrEqualBlock",R);class u extends G.c{constructor(t){super(r.e,r.i,(t=>this._polymorphicIsNan(t)),"FlowGraphIsNaNBlock",t)}_polymorphicIsNan(t){if((0,Q.t)(t,!0))return isNaN((0,Q.q)(t));throw new Error(`Cannot get NaN of ${t}`)}}(0,I.f)("FlowGraphIsNaNBlock",u);class T extends G.c{constructor(t){super(r.e,r.i,(t=>this._polymorphicIsInf(t)),"FlowGraphIsInfBlock",t)}_polymorphicIsInf(t){if((0,Q.t)(t))return!isFinite((0,Q.q)(t));throw new Error(`Cannot get isInf of ${t}`)}}(0,I.f)("FlowGraphIsInfBlock",T);class z extends G.c{constructor(t){super(r.e,r.e,(t=>this._polymorphicDegToRad(t)),"FlowGraphDegToRadBlock",t)}_degToRad(t){return t*Math.PI/180}_polymorphicDegToRad(t){return c(t,this._degToRad)}}(0,I.f)("FlowGraphDegToRadBlock",z);class tt extends G.c{constructor(t){super(r.e,r.e,(t=>this._polymorphicRadToDeg(t)),"FlowGraphRadToDegBlock",t)}_radToDeg(t){return 180*t/Math.PI}_polymorphicRadToDeg(t){return c(t,this._radToDeg)}}(0,I.f)("FlowGraphRadToDegBlock",tt);class Ut extends G.c{constructor(t){super(r.w,r.w,(t=>this._polymorphicSin(t)),"FlowGraphSinBlock",t)}_polymorphicSin(t){return c(t,Math.sin)}}class yt extends G.c{constructor(t){super(r.w,r.w,(t=>this._polymorphicCos(t)),"FlowGraphCosBlock",t)}_polymorphicCos(t){return c(t,Math.cos)}}class It extends G.c{constructor(t){super(r.w,r.w,(t=>this._polymorphicTan(t)),"FlowGraphTanBlock",t)}_polymorphicTan(t){return c(t,Math.tan)}}class rt extends G.c{constructor(t){super(r.w,r.w,(t=>this._polymorphicAsin(t)),"FlowGraphASinBlock",t)}_polymorphicAsin(t){return c(t,Math.asin)}}(0,I.f)("FlowGraphASinBlock",rt);class Yt extends G.c{constructor(t){super(r.w,r.w,(t=>this._polymorphicAcos(t)),"FlowGraphACosBlock",t)}_polymorphicAcos(t){return c(t,Math.acos)}}(0,I.f)("FlowGraphACosBlock",Yt);class mU extends G.c{constructor(t){super(r.w,r.w,(t=>this._polymorphicAtan(t)),"FlowGraphATanBlock",t)}_polymorphicAtan(t){return c(t,Math.atan)}}(0,I.f)("FlowGraphATanBlock",mU);class Xt extends Y.e{constructor(t){super(r.e,r.e,r.e,((t,U)=>this._polymorphicAtan2(t,U)),"FlowGraphATan2Block",t)}_polymorphicAtan2(t,U){return H(t,U,Math.atan2)}}(0,I.f)("FlowGraphATan2Block",Xt);class Pt extends G.c{constructor(t){super(r.e,r.e,(t=>this._polymorphicSinh(t)),"FlowGraphSinhBlock",t)}_polymorphicSinh(t){return c(t,Math.sinh)}}(0,I.f)("FlowGraphSinhBlock",Pt);class Gt extends G.c{constructor(t){super(r.e,r.e,(t=>this._polymorphicCosh(t)),"FlowGraphCoshBlock",t)}_polymorphicCosh(t){return c(t,Math.cosh)}}(0,I.f)("FlowGraphCoshBlock",Gt);class Mt extends G.c{constructor(t){super(r.e,r.e,(t=>this._polymorphicTanh(t)),"FlowGraphTanhBlock",t)}_polymorphicTanh(t){return c(t,Math.tanh)}}(0,I.f)("FlowGraphTanhBlock",Mt);class Lt extends G.c{constructor(t){super(r.e,r.w,(t=>this._polymorphicAsinh(t)),"FlowGraphASinhBlock",t)}_polymorphicAsinh(t){return c(t,Math.asinh)}}(0,I.f)("FlowGraphASinhBlock",Lt);class ht extends G.c{constructor(t){super(r.e,r.w,(t=>this._polymorphicAcosh(t)),"FlowGraphACoshBlock",t)}_polymorphicAcosh(t){return c(t,Math.acosh)}}(0,I.f)("FlowGraphACoshBlock",ht);class Qt extends G.c{constructor(t){super(r.e,r.w,(t=>this._polymorphicAtanh(t)),"FlowGraphATanhBlock",t)}_polymorphicAtanh(t){return c(t,Math.atanh)}}(0,I.f)("FlowGraphATanhBlock",Qt);class Ft extends G.c{constructor(t){super(r.e,r.w,(t=>this._polymorphicExp(t)),"FlowGraphExponentialBlock",t)}_polymorphicExp(t){return c(t,Math.exp)}}(0,I.f)("FlowGraphExponentialBlock",Ft);class Et extends G.c{constructor(t){super(r.e,r.w,(t=>this._polymorphicLog(t)),"FlowGraphLogBlock",t)}_polymorphicLog(t){return c(t,Math.log)}}(0,I.f)("FlowGraphLogBlock",Et);class wt extends G.c{constructor(t){super(r.e,r.w,(t=>this._polymorphicLog2(t)),"FlowGraphLog2Block",t)}_polymorphicLog2(t){return c(t,Math.log2)}}(0,I.f)("FlowGraphLog2Block",wt);class Dt extends G.c{constructor(t){super(r.e,r.w,(t=>this._polymorphicLog10(t)),"FlowGraphLog10Block",t)}_polymorphicLog10(t){return c(t,Math.log10)}}(0,I.f)("FlowGraphLog10Block",Dt);class lt extends G.c{constructor(t){super(r.e,r.w,(t=>this._polymorphicSqrt(t)),"FlowGraphSquareRootBlock",t)}_polymorphicSqrt(t){return c(t,Math.sqrt)}}(0,I.f)("FlowGraphSquareRootBlock",lt);class gt extends G.c{constructor(t){super(r.e,r.w,(t=>this._polymorphicCubeRoot(t)),"FlowGraphCubeRootBlock",t)}_polymorphicCubeRoot(t){return c(t,Math.cbrt)}}(0,I.f)("FlowGraphCubeRootBlock",gt);class Bt extends Y.e{constructor(t){super(r.e,r.w,r.w,((t,U)=>this._polymorphicPow(t,U)),"FlowGraphPowerBlock",t)}_polymorphicPow(t,U){return H(t,U,Math.pow)}}(0,I.f)("FlowGraphPowerBlock",Bt);class bt extends G.c{constructor(t){super((0,r.S)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,r.S)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(t=>"boolean"===typeof t?!t:"number"===typeof t?~t:new L.c(~t.value)),"FlowGraphBitwiseNotBlock",t)}}(0,I.f)("FlowGraphBitwiseNotBlock",bt);class pt extends Y.e{constructor(t){super((0,r.S)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,r.S)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,r.S)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),((t,U)=>{if("boolean"===typeof t&&"boolean"===typeof U)return t&&U;if("number"===typeof t&&"number"===typeof U)return t&U;if("object"===typeof t&&"object"===typeof U)return new L.c(t.value&U.value);throw new Error(`Cannot perform bitwise AND on ${t} and ${U}`)}),"FlowGraphBitwiseAndBlock",t)}}(0,I.f)("FlowGraphBitwiseAndBlock",pt);class ct extends Y.e{constructor(t){super((0,r.S)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,r.S)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,r.S)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),((t,U)=>{if("boolean"===typeof t&&"boolean"===typeof U)return t||U;if("number"===typeof t&&"number"===typeof U)return t|U;if("object"===typeof t&&"object"===typeof U)return new L.c(t.value|U.value);throw new Error(`Cannot perform bitwise OR on ${t} and ${U}`)}),"FlowGraphBitwiseOrBlock",t)}}(0,I.f)("FlowGraphBitwiseOrBlock",ct);class ft extends Y.e{constructor(t){super((0,r.S)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,r.S)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,r.S)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),((t,U)=>{if("boolean"===typeof t&&"boolean"===typeof U)return t!==U;if("number"===typeof t&&"number"===typeof U)return t^U;if("object"===typeof t&&"object"===typeof U)return new L.c(t.value^U.value);throw new Error(`Cannot perform bitwise XOR on ${t} and ${U}`)}),"FlowGraphBitwiseXorBlock",t)}}(0,I.f)("FlowGraphBitwiseXorBlock",ft);class St extends Y.e{constructor(t){super(r.j,r.j,r.j,((t,U)=>new L.c(t.value<<U.value)),"FlowGraphBitwiseLeftShiftBlock",t)}}(0,I.f)("FlowGraphBitwiseLeftShiftBlock",St);class Nt extends Y.e{constructor(t){super(r.j,r.j,r.j,((t,U)=>new L.c(t.value>>U.value)),"FlowGraphBitwiseRightShiftBlock",t)}}(0,I.f)("FlowGraphBitwiseRightShiftBlock",Nt);class jt extends G.c{constructor(t){super(r.j,r.j,(t=>new L.c(Math.clz32(t.value))),"FlowGraphLeadingZerosBlock",t)}}(0,I.f)("FlowGraphLeadingZerosBlock",jt);class Jt extends G.c{constructor(t){super(r.j,r.j,(t=>new L.c(t.value?31-Math.clz32(t.value&-t.value):32)),"FlowGraphTrailingZerosBlock",t)}}(0,I.f)("FlowGraphTrailingZerosBlock",Jt);class at extends G.c{constructor(t){super(r.j,r.j,(t=>new L.c(function(t){let U=0;for(;t;)U+=1&t,t>>=1;return U}(t.value))),"FlowGraphOneBitsCounterBlock",t)}}(0,I.f)("FlowGraphOneBitsCounterBlock",at)},15390:(t,U,y)=>{y.d(U,{e:()=>r});var I=y(15392);class r extends I.d{constructor(t,U,y,I,r,Y){super(y,Y),this._operation=I,this._className=r,this.a=this.registerDataInput("a",t),this.b=this.registerDataInput("b",U)}_doOperation(t){const U=this.a.getValue(t),y=this.b.getValue(t);return this._operation(U,y)}getClassName(){return this._className}}},15392:(t,U,y)=>{y.d(U,{d:()=>X});var I=y(13865),r=y(13845);const Y="cachedOperationValue",mt="cachedExecutionId";class X extends I.c{constructor(t,U){super(U),this.value=this.registerDataOutput("value",t),this.isValid=this.registerDataOutput("isValid",r.i)}_updateOutputs(t){const U=t._getExecutionVariable(this,mt,-1),y=t._getExecutionVariable(this,Y,null);if(void 0!==y&&null!==y&&U===t.executionId)this.isValid.setValue(!0,t),this.value.setValue(y,t);else try{const U=this._doOperation(t);if(void 0===U||null===U)return void this.isValid.setValue(!1,t);t._setExecutionVariable(this,Y,U),t._setExecutionVariable(this,mt,t.executionId),this.value.setValue(U,t),this.isValid.setValue(!0,t)}catch(I){this.isValid.setValue(!1,t)}}}},15398:(t,U,y)=>{y.d(U,{c:()=>r});var I=y(15392);class r extends I.d{constructor(t,U,y,I,r){super(U,r),this._operation=y,this._className=I,this.a=this.registerDataInput("a",t)}_doOperation(t){return this._operation(this.a.getValue(t))}getClassName(){return this._className}}}}]);