"use strict";(self.ynu1yiqvs98=self.ynu1yiqvs98||[]).push([[88],{14340:(I,E,j)=>{j.r(E),j.d(E,{FlowGraphAbsBlock:()=>G,FlowGraphAcosBlock:()=>zI,FlowGraphAcoshBlock:()=>ZI,FlowGraphAddBlock:()=>K,FlowGraphAsinBlock:()=>wI,FlowGraphAsinhBlock:()=>oI,FlowGraphAtan2Block:()=>tI,FlowGraphAtanBlock:()=>hI,FlowGraphAtanhBlock:()=>cI,FlowGraphBitwiseAndBlock:()=>bI,FlowGraphBitwiseLeftShiftBlock:()=>yI,FlowGraphBitwiseNotBlock:()=>uI,FlowGraphBitwiseOrBlock:()=>QI,FlowGraphBitwiseRightShiftBlock:()=>dI,FlowGraphBitwiseXorBlock:()=>GI,FlowGraphCeilBlock:()=>l,FlowGraphClampBlock:()=>W,FlowGraphCosBlock:()=>jI,FlowGraphCoshBlock:()=>RI,FlowGraphCubeRootBlock:()=>qI,FlowGraphDegToRadBlock:()=>m,FlowGraphDivideBlock:()=>C,FlowGraphEBlock:()=>q,FlowGraphEqualityBlock:()=>f,FlowGraphExpBlock:()=>KI,FlowGraphFloorBlock:()=>a,FlowGraphFractionBlock:()=>r,FlowGraphGreaterThanBlock:()=>D,FlowGraphGreaterThanOrEqualBlock:()=>k,FlowGraphInfBlock:()=>u,FlowGraphIsInfinityBlock:()=>N,FlowGraphIsNanBlock:()=>J,FlowGraphLeadingZerosBlock:()=>aI,FlowGraphLessThanBlock:()=>B,FlowGraphLessThanOrEqualBlock:()=>p,FlowGraphLog10Block:()=>CI,FlowGraphLog2Block:()=>FI,FlowGraphLogBlock:()=>LI,FlowGraphMathInterpolationBlock:()=>V,FlowGraphMaxBlock:()=>A,FlowGraphMinBlock:()=>Y,FlowGraphModuloBlock:()=>g,FlowGraphMultiplyBlock:()=>F,FlowGraphNaNBlock:()=>b,FlowGraphNegationBlock:()=>n,FlowGraphOneBitsCounterBlock:()=>iI,FlowGraphPiBlock:()=>x,FlowGraphPowerBlock:()=>xI,FlowGraphRadToDegBlock:()=>II,FlowGraphRandomBlock:()=>X,FlowGraphRoundBlock:()=>i,FlowGraphSaturateBlock:()=>s,FlowGraphSignBlock:()=>y,FlowGraphSinBlock:()=>EI,FlowGraphSinhBlock:()=>UI,FlowGraphSquareRootBlock:()=>XI,FlowGraphSubtractBlock:()=>L,FlowGraphTanBlock:()=>eI,FlowGraphTanhBlock:()=>PI,FlowGraphTrailingZerosBlock:()=>lI,FlowGraphTruncBlock:()=>d});var e=j(11073),w=j(12819),z=j(14345),h=j(14351);class t extends h.d{constructor(I,E,j,e){super(I,e),this._operation=E,this._className=j}_doOperation(I){return this._operation(I)}getClassName(){return this._className}}var U=j(11117),R=j(14358);class P extends h.d{constructor(I,E,j,e,w,z,h){super(e,h),this._operation=w,this._className=z,this.a=this.registerDataInput("a",I),this.b=this.registerDataInput("b",E),this.c=this.registerDataInput("c",j)}_doOperation(I){return this._operation(this.a.getValue(I),this.b.getValue(I),this.c.getValue(I))}getClassName(){return this._className}}var o=j(12812),Z=j(12821),c=j(12843);class K extends z.d{constructor(I){super((0,w.N)(null===I||void 0===I?void 0:I.type),(0,w.N)(null===I||void 0===I?void 0:I.type),(0,w.N)(null===I||void 0===I?void 0:I.type),((I,E)=>this._polymorphicAdd(I,E)),"FlowGraphAddBlock",I)}_polymorphicAdd(I,E){const j=(0,c.j)(I),e=(0,c.j)(E);if((0,c.h)(j,e)||(0,c.e)(j,e)||(0,c.d)(j,e))return I.add(E);if("Quaternion"===j||"Vector4"===e)return new U.Vector4(I.x,I.y,I.z,I.w).addInPlace(E);if("Vector4"===j||"Quaternion"===e)return I.add(E);var w;if(null!==(w=this.config)&&void 0!==w&&w.preventIntegerFloatArithmetic&&typeof I!==typeof E)throw new Error("Cannot add different types of numbers.");return(0,c.n)(I)+(0,c.n)(E)}}(0,e.h)("FlowGraphAddBlock",K);class L extends z.d{constructor(I){super((0,w.N)(null===I||void 0===I?void 0:I.type),(0,w.N)(null===I||void 0===I?void 0:I.type),(0,w.N)(null===I||void 0===I?void 0:I.type),((I,E)=>this._polymorphicSubtract(I,E)),"FlowGraphSubtractBlock",I)}_polymorphicSubtract(I,E){const j=(0,c.j)(I),e=(0,c.j)(E);if((0,c.h)(j,e)||(0,c.d)(j,e)||(0,c.e)(j,e))return I.FE(E);if("Quaternion"===j||"Vector4"===e)return new U.Vector4(I.x,I.y,I.z,I.w).Uo(E);if("Vector4"===j||"Quaternion"===e)return I.FE(E);var w;if(null!==(w=this.config)&&void 0!==w&&w.preventIntegerFloatArithmetic&&typeof I!==typeof E)throw new Error("Cannot add different types of numbers.");return(0,c.n)(I)-(0,c.n)(E)}}(0,e.h)("FlowGraphSubtractBlock",L);class F extends z.d{constructor(I){super((0,w.N)(null===I||void 0===I?void 0:I.type),(0,w.N)(null===I||void 0===I?void 0:I.type),(0,w.N)(null===I||void 0===I?void 0:I.type),((I,E)=>this._polymorphicMultiply(I,E)),"FlowGraphMultiplyBlock",I)}_polymorphicMultiply(I,E){const j=(0,c.j)(I),e=(0,c.j)(E);if((0,c.h)(j,e)||(0,c.d)(j,e))return I.multiply(E);if("Quaternion"===j||"Vector4"===e)return new U.Vector4(I.x,I.y,I.z,I.w).multiplyInPlace(E);if("Vector4"===j||"Quaternion"===e)return I.multiply(E);if((0,c.e)(j,e)){var w;if(null!==(w=this.config)&&void 0!==w&&w.useMatrixPerComponent){const e=I.m;for(let I=0;I<e.length;I++)e[I]*=E.m[I];return"Matrix2D"===j?new Z.d(e):"Matrix3D"===j?new Z.h(e):U.Matrix.xE(e)}return E.multiply(I)}var z;if(null!==(z=this.config)&&void 0!==z&&z.preventIntegerFloatArithmetic&&typeof I!==typeof E)throw new Error("Cannot add different types of numbers.");return(0,c.n)(I)*(0,c.n)(E)}}(0,e.h)("FlowGraphMultiplyBlock",F);class C extends z.d{constructor(I){super((0,w.N)(null===I||void 0===I?void 0:I.type),(0,w.N)(null===I||void 0===I?void 0:I.type),(0,w.N)(null===I||void 0===I?void 0:I.type),((I,E)=>this._polymorphicDivide(I,E)),"FlowGraphDivideBlock",I)}_polymorphicDivide(I,E){const j=(0,c.j)(I),e=(0,c.j)(E);if((0,c.h)(j,e)||(0,c.d)(j,e))return I.divide(E);if("Quaternion"===j||"Quaternion"===e){const j=I.clone();return j.x/=E.x,j.y/=E.y,j.z/=E.z,j.w/=E.w,j}if("Quaternion"===j||"Vector4"===e)return new U.Vector4(I.x,I.y,I.z,I.w).divideInPlace(E);if("Vector4"===j||"Quaternion"===e)return I.divide(E);if((0,c.e)(j,e)){var w;if(null!==(w=this.config)&&void 0!==w&&w.useMatrixPerComponent){const e=I.m;for(let I=0;I<e.length;I++)e[I]/=E.m[I];return"Matrix2D"===j?new Z.d(e):"Matrix3D"===j?new Z.h(e):U.Matrix.xE(e)}return I.divide(E)}var z;if(null!==(z=this.config)&&void 0!==z&&z.preventIntegerFloatArithmetic&&typeof I!==typeof E)throw new Error("Cannot add different types of numbers.");return(0,c.n)(I)/(0,c.n)(E)}}(0,e.h)("FlowGraphDivideBlock",C);class X extends t{constructor(I){super(w.t,(I=>this._random(I)),"FlowGraphRandomBlock",I),this.min=this.registerDataInput("min",w.t,(null===I||void 0===I?void 0:I.min)??0),this.max=this.registerDataInput("max",w.t,(null===I||void 0===I?void 0:I.max)??1),null!==I&&void 0!==I&&I.seed&&(this._seed=I.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const I=1e4*Math.sin(this._seed++);return I-Math.floor(I)}return Math.random()}_random(I){const E=this.min.getValue(I),j=this.max.getValue(I);return this._getRandomValue()*(j-E)+E}}(0,e.h)("FlowGraphRandomBlock",X);class q extends t{constructor(I){super(w.t,(()=>Math.E),"FlowGraphEBlock",I)}}(0,e.h)("FlowGraphEBlock",q);class x extends t{constructor(I){super(w.t,(()=>Math.PI),"FlowGraphPIBlock",I)}}(0,e.h)("FlowGraphPIBlock",x);class u extends t{constructor(I){super(w.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",I)}}(0,e.h)("FlowGraphInfBlock",u);class b extends t{constructor(I){super(w.t,(()=>Number.NaN),"FlowGraphNaNBlock",I)}}function Q(I,E){switch((0,c.j)(I)){case"FlowGraphInteger":return new o.b(E(I.value));case"Vector2":return new U.Vector2(E(I.x),E(I.y));case"LE":return new U.LE(E(I.x),E(I.y),E(I.z));case"Vector4":return new U.Vector4(E(I.x),E(I.y),E(I.z),E(I.w));case"Quaternion":return new U.Quaternion(E(I.x),E(I.y),E(I.z),E(I.w));case"Matrix":return U.Matrix.xE(I.m.map(E));case"Matrix2D":return new Z.d(I.m.map(E));case"Matrix3D":return new Z.h(I.m.map(E));default:return E(I)}}(0,e.h)("FlowGraphNaNBlock",b);class G extends R.b{constructor(I){super(w.t,w.t,(I=>this._polymorphicAbs(I)),"FlowGraphAbsBlock",I)}_polymorphicAbs(I){return Q(I,Math.abs)}}(0,e.h)("FlowGraphAbsBlock",G);class y extends R.b{constructor(I){super(w.t,w.t,(I=>this._polymorphicSign(I)),"FlowGraphSignBlock",I)}_polymorphicSign(I){return Q(I,Math.sign)}}(0,e.h)("FlowGraphSignBlock",y);class d extends R.b{constructor(I){super(w.t,w.t,(I=>this._polymorphicTrunc(I)),"FlowGraphTruncBlock",I)}_polymorphicTrunc(I){return Q(I,Math.trunc)}}(0,e.h)("FlowGraphTruncBlock",d);class a extends R.b{constructor(I){super(w.t,w.t,(I=>this._polymorphicFloor(I)),"FlowGraphFloorBlock",I)}_polymorphicFloor(I){return Q(I,Math.floor)}}(0,e.h)("FlowGraphFloorBlock",a);class l extends R.b{constructor(I){super(w.e,w.e,(I=>this._polymorphicCeiling(I)),"FlowGraphCeilBlock",I)}_polymorphicCeiling(I){return Q(I,Math.ceil)}}(0,e.h)("FlowGraphCeilBlock",l);class i extends R.b{constructor(I){super(w.e,w.e,(I=>this._polymorphicRound(I)),"FlowGraphRoundBlock",I)}_polymorphicRound(I){return Q(I,(I=>{var E;return I<0&&null!==(E=this.config)&&void 0!==E&&E.roundHalfAwayFromZero?-Math.round(-I):Math.round(I)}))}}(0,e.h)("FlowGraphRoundBlock",i);class r extends R.b{constructor(I){super(w.e,w.e,(I=>this._polymorphicFraction(I)),"FlowGraphFractBlock",I)}_polymorphicFraction(I){return Q(I,(I=>I-Math.floor(I)))}}(0,e.h)("FlowGraphFractBlock",r);class n extends R.b{constructor(I){super(w.e,w.e,(I=>this._polymorphicNeg(I)),"FlowGraphNegationBlock",I)}_polymorphicNeg(I){return Q(I,(I=>-I))}}function H(I,E,j){switch((0,c.j)(I)){case"FlowGraphInteger":return new o.b(j(I.value,E.value));case"Vector2":return new U.Vector2(j(I.x,E.x),j(I.y,E.y));case"LE":return new U.LE(j(I.x,E.x),j(I.y,E.y),j(I.z,E.z));case"Vector4":return new U.Vector4(j(I.x,E.x),j(I.y,E.y),j(I.z,E.z),j(I.w,E.w));case"Quaternion":return new U.Quaternion(j(I.x,E.x),j(I.y,E.y),j(I.z,E.z),j(I.w,E.w));case"Matrix":return U.Matrix.xE(I.m.map(((I,e)=>j(I,E.m[e]))));case"Matrix2D":return new Z.d(I.m.map(((I,e)=>j(I,E.m[e]))));case"Matrix3D":return new Z.h(I.m.map(((I,e)=>j(I,E.m[e]))));default:return j((0,c.n)(I),(0,c.n)(E))}}(0,e.h)("FlowGraphNegationBlock",n);class g extends z.d{constructor(I){super(w.e,w.e,w.e,((I,E)=>this._polymorphicRemainder(I,E)),"FlowGraphModuloBlock",I)}_polymorphicRemainder(I,E){return H(I,E,((I,E)=>I%E))}}(0,e.h)("FlowGraphModuloBlock",g);class Y extends z.d{constructor(I){super(w.e,w.e,w.e,((I,E)=>this._polymorphicMin(I,E)),"FlowGraphMinBlock",I)}_polymorphicMin(I,E){return H(I,E,Math.min)}}(0,e.h)("FlowGraphMinBlock",Y);class A extends z.d{constructor(I){super(w.e,w.e,w.e,((I,E)=>this._polymorphicMax(I,E)),"FlowGraphMaxBlock",I)}_polymorphicMax(I,E){return H(I,E,Math.max)}}function T(I,E,j){return Math.min(Math.max(I,Math.min(E,j)),Math.max(E,j))}function M(I,E,j,e){switch((0,c.j)(I)){case"FlowGraphInteger":return new o.b(e(I.value,E.value,j.value));case"Vector2":return new U.Vector2(e(I.x,E.x,j.x),e(I.y,E.y,j.y));case"LE":return new U.LE(e(I.x,E.x,j.x),e(I.y,E.y,j.y),e(I.z,E.z,j.z));case"Vector4":return new U.Vector4(e(I.x,E.x,j.x),e(I.y,E.y,j.y),e(I.z,E.z,j.z),e(I.w,E.w,j.w));case"Quaternion":return new U.Quaternion(e(I.x,E.x,j.x),e(I.y,E.y,j.y),e(I.z,E.z,j.z),e(I.w,E.w,j.w));case"Matrix":return U.Matrix.xE(I.m.map(((I,w)=>e(I,E.m[w],j.m[w]))));case"Matrix2D":return new Z.d(I.m.map(((I,w)=>e(I,E.m[w],j.m[w]))));case"Matrix3D":return new Z.h(I.m.map(((I,w)=>e(I,E.m[w],j.m[w]))));default:return e((0,c.n)(I),(0,c.n)(E),(0,c.n)(j))}}(0,e.h)("FlowGraphMaxBlock",A);class W extends P{constructor(I){super(w.e,w.e,w.e,w.e,((I,E,j)=>this._polymorphicClamp(I,E,j)),"FlowGraphClampBlock",I)}_polymorphicClamp(I,E,j){return M(I,E,j,T)}}function O(I){return Math.min(Math.max(I,0),1)}(0,e.h)("FlowGraphClampBlock",W);class s extends R.b{constructor(I){super(w.e,w.e,(I=>this._polymorphicSaturate(I)),"FlowGraphSaturateBlock",I)}_polymorphicSaturate(I){return Q(I,O)}}function v(I,E,j){return(1-j)*I+j*E}(0,e.h)("FlowGraphSaturateBlock",s);class V extends P{constructor(I){super(w.e,w.e,w.e,w.e,((I,E,j)=>this._polymorphicInterpolate(I,E,j)),"FlowGraphMathInterpolationBlock",I)}_polymorphicInterpolate(I,E,j){return M(I,E,j,v)}}(0,e.h)("FlowGraphMathInterpolationBlock",V);class f extends z.d{constructor(I){super(w.e,w.e,w.g,((I,E)=>this._polymorphicEq(I,E)),"FlowGraphEqualityBlock",I)}_polymorphicEq(I,E){const j=(0,c.j)(I),e=(0,c.j)(E);return typeof I===typeof E&&((0,c.h)(j,e)||(0,c.e)(j,e)||(0,c.d)(j,e)?I.equals(E):I===E)}}function S(I,E,j){if((0,c.r)(I)&&(0,c.r)(E))return j((0,c.n)(I),(0,c.n)(E));throw new Error(`Cannot compare ${I} and ${E}`)}(0,e.h)("FlowGraphEqualityBlock",f);class B extends z.d{constructor(I){super(w.e,w.e,w.g,((I,E)=>this._polymorphicLessThan(I,E)),"FlowGraphLessThanBlock",I)}_polymorphicLessThan(I,E){return S(I,E,((I,E)=>I<E))}}(0,e.h)("FlowGraphLessThanBlock",B);class p extends z.d{constructor(I){super(w.e,w.e,w.g,((I,E)=>this._polymorphicLessThanOrEqual(I,E)),"FlowGraphLessThanOrEqualBlock",I)}_polymorphicLessThanOrEqual(I,E){return S(I,E,((I,E)=>I<=E))}}(0,e.h)("FlowGraphLessThanOrEqualBlock",p);class D extends z.d{constructor(I){super(w.e,w.e,w.g,((I,E)=>this._polymorphicGreaterThan(I,E)),"FlowGraphGreaterThanBlock",I)}_polymorphicGreaterThan(I,E){return S(I,E,((I,E)=>I>E))}}(0,e.h)("FlowGraphGreaterThanBlock",D);class k extends z.d{constructor(I){super(w.e,w.e,w.g,((I,E)=>this._polymorphicGreaterThanOrEqual(I,E)),"FlowGraphGreaterThanOrEqualBlock",I)}_polymorphicGreaterThanOrEqual(I,E){return S(I,E,((I,E)=>I>=E))}}(0,e.h)("FlowGraphGreaterThanOrEqualBlock",k);class J extends R.b{constructor(I){super(w.e,w.g,(I=>this._polymorphicIsNan(I)),"FlowGraphIsNaNBlock",I)}_polymorphicIsNan(I){if((0,c.r)(I,!0))return isNaN((0,c.n)(I));throw new Error(`Cannot get NaN of ${I}`)}}(0,e.h)("FlowGraphIsNaNBlock",J);class N extends R.b{constructor(I){super(w.e,w.g,(I=>this._polymorphicIsInf(I)),"FlowGraphIsInfBlock",I)}_polymorphicIsInf(I){if((0,c.r)(I))return!isFinite((0,c.n)(I));throw new Error(`Cannot get isInf of ${I}`)}}(0,e.h)("FlowGraphIsInfBlock",N);class m extends R.b{constructor(I){super(w.e,w.e,(I=>this._polymorphicDegToRad(I)),"FlowGraphDegToRadBlock",I)}_degToRad(I){return I*Math.PI/180}_polymorphicDegToRad(I){return Q(I,this._degToRad)}}(0,e.h)("FlowGraphDegToRadBlock",m);class II extends R.b{constructor(I){super(w.e,w.e,(I=>this._polymorphicRadToDeg(I)),"FlowGraphRadToDegBlock",I)}_radToDeg(I){return 180*I/Math.PI}_polymorphicRadToDeg(I){return Q(I,this._radToDeg)}}(0,e.h)("FlowGraphRadToDegBlock",II);class EI extends R.b{constructor(I){super(w.t,w.t,(I=>this._polymorphicSin(I)),"FlowGraphSinBlock",I)}_polymorphicSin(I){return Q(I,Math.sin)}}class jI extends R.b{constructor(I){super(w.t,w.t,(I=>this._polymorphicCos(I)),"FlowGraphCosBlock",I)}_polymorphicCos(I){return Q(I,Math.cos)}}class eI extends R.b{constructor(I){super(w.t,w.t,(I=>this._polymorphicTan(I)),"FlowGraphTanBlock",I)}_polymorphicTan(I){return Q(I,Math.tan)}}class wI extends R.b{constructor(I){super(w.t,w.t,(I=>this._polymorphicAsin(I)),"FlowGraphASinBlock",I)}_polymorphicAsin(I){return Q(I,Math.asin)}}(0,e.h)("FlowGraphASinBlock",wI);class zI extends R.b{constructor(I){super(w.t,w.t,(I=>this._polymorphicAcos(I)),"FlowGraphACosBlock",I)}_polymorphicAcos(I){return Q(I,Math.acos)}}(0,e.h)("FlowGraphACosBlock",zI);class hI extends R.b{constructor(I){super(w.t,w.t,(I=>this._polymorphicAtan(I)),"FlowGraphATanBlock",I)}_polymorphicAtan(I){return Q(I,Math.atan)}}(0,e.h)("FlowGraphATanBlock",hI);class tI extends z.d{constructor(I){super(w.e,w.e,w.e,((I,E)=>this._polymorphicAtan2(I,E)),"FlowGraphATan2Block",I)}_polymorphicAtan2(I,E){return H(I,E,Math.atan2)}}(0,e.h)("FlowGraphATan2Block",tI);class UI extends R.b{constructor(I){super(w.e,w.e,(I=>this._polymorphicSinh(I)),"FlowGraphSinhBlock",I)}_polymorphicSinh(I){return Q(I,Math.sinh)}}(0,e.h)("FlowGraphSinhBlock",UI);class RI extends R.b{constructor(I){super(w.e,w.e,(I=>this._polymorphicCosh(I)),"FlowGraphCoshBlock",I)}_polymorphicCosh(I){return Q(I,Math.cosh)}}(0,e.h)("FlowGraphCoshBlock",RI);class PI extends R.b{constructor(I){super(w.e,w.e,(I=>this._polymorphicTanh(I)),"FlowGraphTanhBlock",I)}_polymorphicTanh(I){return Q(I,Math.tanh)}}(0,e.h)("FlowGraphTanhBlock",PI);class oI extends R.b{constructor(I){super(w.e,w.t,(I=>this._polymorphicAsinh(I)),"FlowGraphASinhBlock",I)}_polymorphicAsinh(I){return Q(I,Math.asinh)}}(0,e.h)("FlowGraphASinhBlock",oI);class ZI extends R.b{constructor(I){super(w.e,w.t,(I=>this._polymorphicAcosh(I)),"FlowGraphACoshBlock",I)}_polymorphicAcosh(I){return Q(I,Math.acosh)}}(0,e.h)("FlowGraphACoshBlock",ZI);class cI extends R.b{constructor(I){super(w.e,w.t,(I=>this._polymorphicAtanh(I)),"FlowGraphATanhBlock",I)}_polymorphicAtanh(I){return Q(I,Math.atanh)}}(0,e.h)("FlowGraphATanhBlock",cI);class KI extends R.b{constructor(I){super(w.e,w.t,(I=>this._polymorphicExp(I)),"FlowGraphExponentialBlock",I)}_polymorphicExp(I){return Q(I,Math.exp)}}(0,e.h)("FlowGraphExponentialBlock",KI);class LI extends R.b{constructor(I){super(w.e,w.t,(I=>this._polymorphicLog(I)),"FlowGraphLogBlock",I)}_polymorphicLog(I){return Q(I,Math.log)}}(0,e.h)("FlowGraphLogBlock",LI);class FI extends R.b{constructor(I){super(w.e,w.t,(I=>this._polymorphicLog2(I)),"FlowGraphLog2Block",I)}_polymorphicLog2(I){return Q(I,Math.log2)}}(0,e.h)("FlowGraphLog2Block",FI);class CI extends R.b{constructor(I){super(w.e,w.t,(I=>this._polymorphicLog10(I)),"FlowGraphLog10Block",I)}_polymorphicLog10(I){return Q(I,Math.log10)}}(0,e.h)("FlowGraphLog10Block",CI);class XI extends R.b{constructor(I){super(w.e,w.t,(I=>this._polymorphicSqrt(I)),"FlowGraphSquareRootBlock",I)}_polymorphicSqrt(I){return Q(I,Math.sqrt)}}(0,e.h)("FlowGraphSquareRootBlock",XI);class qI extends R.b{constructor(I){super(w.e,w.t,(I=>this._polymorphicCubeRoot(I)),"FlowGraphCubeRootBlock",I)}_polymorphicCubeRoot(I){return Q(I,Math.cbrt)}}(0,e.h)("FlowGraphCubeRootBlock",qI);class xI extends z.d{constructor(I){super(w.e,w.t,w.t,((I,E)=>this._polymorphicPow(I,E)),"FlowGraphPowerBlock",I)}_polymorphicPow(I,E){return H(I,E,Math.pow)}}(0,e.h)("FlowGraphPowerBlock",xI);class uI extends R.b{constructor(I){super((0,w.N)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,w.N)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(I=>"boolean"===typeof I?!I:"number"===typeof I?~I:new o.b(~I.value)),"FlowGraphBitwiseNotBlock",I)}}(0,e.h)("FlowGraphBitwiseNotBlock",uI);class bI extends z.d{constructor(I){super((0,w.N)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,w.N)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,w.N)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),((I,E)=>{if("boolean"===typeof I&&"boolean"===typeof E)return I&&E;if("number"===typeof I&&"number"===typeof E)return I&E;if("object"===typeof I&&"object"===typeof E)return new o.b(I.value&E.value);throw new Error(`Cannot perform bitwise AND on ${I} and ${E}`)}),"FlowGraphBitwiseAndBlock",I)}}(0,e.h)("FlowGraphBitwiseAndBlock",bI);class QI extends z.d{constructor(I){super((0,w.N)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,w.N)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,w.N)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),((I,E)=>{if("boolean"===typeof I&&"boolean"===typeof E)return I||E;if("number"===typeof I&&"number"===typeof E)return I|E;if("object"===typeof I&&"object"===typeof E)return new o.b(I.value|E.value);throw new Error(`Cannot perform bitwise OR on ${I} and ${E}`)}),"FlowGraphBitwiseOrBlock",I)}}(0,e.h)("FlowGraphBitwiseOrBlock",QI);class GI extends z.d{constructor(I){super((0,w.N)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,w.N)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,w.N)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),((I,E)=>{if("boolean"===typeof I&&"boolean"===typeof E)return I!==E;if("number"===typeof I&&"number"===typeof E)return I^E;if("object"===typeof I&&"object"===typeof E)return new o.b(I.value^E.value);throw new Error(`Cannot perform bitwise XOR on ${I} and ${E}`)}),"FlowGraphBitwiseXorBlock",I)}}(0,e.h)("FlowGraphBitwiseXorBlock",GI);class yI extends z.d{constructor(I){super(w.i,w.i,w.i,((I,E)=>new o.b(I.value<<E.value)),"FlowGraphBitwiseLeftShiftBlock",I)}}(0,e.h)("FlowGraphBitwiseLeftShiftBlock",yI);class dI extends z.d{constructor(I){super(w.i,w.i,w.i,((I,E)=>new o.b(I.value>>E.value)),"FlowGraphBitwiseRightShiftBlock",I)}}(0,e.h)("FlowGraphBitwiseRightShiftBlock",dI);class aI extends R.b{constructor(I){super(w.i,w.i,(I=>new o.b(Math.clz32(I.value))),"FlowGraphLeadingZerosBlock",I)}}(0,e.h)("FlowGraphLeadingZerosBlock",aI);class lI extends R.b{constructor(I){super(w.i,w.i,(I=>new o.b(I.value?31-Math.clz32(I.value&-I.value):32)),"FlowGraphTrailingZerosBlock",I)}}(0,e.h)("FlowGraphTrailingZerosBlock",lI);class iI extends R.b{constructor(I){super(w.i,w.i,(I=>new o.b(function(I){let E=0;for(;I;)E+=1&I,I>>=1;return E}(I.value))),"FlowGraphOneBitsCounterBlock",I)}}(0,e.h)("FlowGraphOneBitsCounterBlock",iI)},14345:(I,E,j)=>{j.d(E,{d:()=>w});var e=j(14351);class w extends e.d{constructor(I,E,j,e,w,z){super(j,z),this._operation=e,this._className=w,this.a=this.registerDataInput("a",I),this.b=this.registerDataInput("b",E)}_doOperation(I){const E=this.a.getValue(I),j=this.b.getValue(I);return this._operation(E,j)}getClassName(){return this._className}}},14351:(I,E,j)=>{j.d(E,{d:()=>t});var e=j(12834),w=j(12819);const z="cachedOperationValue",h="cachedExecutionId";class t extends e.e{constructor(I,E){super(E),this.value=this.registerDataOutput("value",I),this.isValid=this.registerDataOutput("isValid",w.g)}_updateOutputs(I){const E=I._getExecutionVariable(this,h,-1),j=I._getExecutionVariable(this,z,null);if(void 0!==j&&null!==j&&E===I.executionId)this.isValid.setValue(!0,I),this.value.setValue(j,I);else try{const E=this._doOperation(I);if(void 0===E||null===E)return void this.isValid.setValue(!1,I);I._setExecutionVariable(this,z,E),I._setExecutionVariable(this,h,I.executionId),this.value.setValue(E,I),this.isValid.setValue(!0,I)}catch(e){this.isValid.setValue(!1,I)}}}},14358:(I,E,j)=>{j.d(E,{b:()=>w});var e=j(14351);class w extends e.d{constructor(I,E,j,e,w){super(E,w),this._operation=j,this._className=e,this.a=this.registerDataInput("a",I)}_doOperation(I){return this._operation(this.a.getValue(I))}getClassName(){return this._className}}}}]);