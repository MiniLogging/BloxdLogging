"use strict";(self.xeuzlpp225k=self.xeuzlpp225k||[]).push([[88],{14531:(k,Q,i)=>{i.r(Q),i.d(Q,{FlowGraphAbsBlock:()=>s,FlowGraphAcosBlock:()=>Ck,FlowGraphAcoshBlock:()=>Hk,FlowGraphAddBlock:()=>F,FlowGraphAsinBlock:()=>Uk,FlowGraphAsinhBlock:()=>Gk,FlowGraphAtan2Block:()=>ok,FlowGraphAtanBlock:()=>Bk,FlowGraphAtanhBlock:()=>ek,FlowGraphBitwiseAndBlock:()=>yk,FlowGraphBitwiseLeftShiftBlock:()=>uk,FlowGraphBitwiseNotBlock:()=>Yk,FlowGraphBitwiseOrBlock:()=>Lk,FlowGraphBitwiseRightShiftBlock:()=>ak,FlowGraphBitwiseXorBlock:()=>sk,FlowGraphCeilBlock:()=>T,FlowGraphClampBlock:()=>W,FlowGraphCosBlock:()=>ik,FlowGraphCoshBlock:()=>Ok,FlowGraphCubeRootBlock:()=>ck,FlowGraphDegToRadBlock:()=>V,FlowGraphDivideBlock:()=>l,FlowGraphEBlock:()=>c,FlowGraphEqualityBlock:()=>S,FlowGraphExpBlock:()=>Fk,FlowGraphFloorBlock:()=>j,FlowGraphFractionBlock:()=>v,FlowGraphGreaterThanBlock:()=>I,FlowGraphGreaterThanOrEqualBlock:()=>r,FlowGraphInfBlock:()=>Y,FlowGraphIsInfinityBlock:()=>x,FlowGraphIsNanBlock:()=>n,FlowGraphLeadingZerosBlock:()=>jk,FlowGraphLessThanBlock:()=>P,FlowGraphLessThanOrEqualBlock:()=>t,FlowGraphLog10Block:()=>lk,FlowGraphLog2Block:()=>Ek,FlowGraphLogBlock:()=>zk,FlowGraphMathInterpolationBlock:()=>w,FlowGraphMaxBlock:()=>b,FlowGraphMinBlock:()=>d,FlowGraphModuloBlock:()=>p,FlowGraphMultiplyBlock:()=>E,FlowGraphNaNBlock:()=>y,FlowGraphNegationBlock:()=>N,FlowGraphOneBitsCounterBlock:()=>Kk,FlowGraphPiBlock:()=>f,FlowGraphPowerBlock:()=>fk,FlowGraphRadToDegBlock:()=>kk,FlowGraphRandomBlock:()=>h,FlowGraphRoundBlock:()=>K,FlowGraphSaturateBlock:()=>g,FlowGraphSignBlock:()=>u,FlowGraphSinBlock:()=>Qk,FlowGraphSinhBlock:()=>mk,FlowGraphSquareRootBlock:()=>hk,FlowGraphSubtractBlock:()=>z,FlowGraphTanBlock:()=>Zk,FlowGraphTanhBlock:()=>Jk,FlowGraphTrailingZerosBlock:()=>Tk,FlowGraphTruncBlock:()=>a});var Z=i(11253),U=i(13064),C=i(14533),B=i(14536);class o extends B.e{constructor(k,Q,i,Z){super(k,Z),this._operation=Q,this._className=i}_doOperation(k){return this._operation(k)}getClassName(){return this._className}}var m=i(11298),O=i(14543);class J extends B.e{constructor(k,Q,i,Z,U,C,B){super(Z,B),this._operation=U,this._className=C,this.a=this.registerDataInput("a",k),this.b=this.registerDataInput("b",Q),this.c=this.registerDataInput("c",i)}_doOperation(k){return this._operation(this.a.getValue(k),this.b.getValue(k),this.c.getValue(k))}getClassName(){return this._className}}var G=i(13060),H=i(13066),e=i(13096);class F extends C.c{constructor(k){super((0,U.N)(null===k||void 0===k?void 0:k.type),(0,U.N)(null===k||void 0===k?void 0:k.type),(0,U.N)(null===k||void 0===k?void 0:k.type),((k,Q)=>this._polymorphicAdd(k,Q)),"FlowGraphAddBlock",k)}_polymorphicAdd(k,Q){const i=(0,e.n)(k),Z=(0,e.n)(Q);if((0,e.l)(i,Z)||(0,e.h)(i,Z)||(0,e.e)(i,Z))return k.add(Q);if("Quaternion"===i||"Vector4"===Z)return new m.Vector4(k.x,k.y,k.z,k.w).addInPlace(Q);if("Vector4"===i||"Quaternion"===Z)return k.add(Q);var U;if(null!==(U=this.config)&&void 0!==U&&U.preventIntegerFloatArithmetic&&typeof k!==typeof Q)throw new Error("Cannot add different types of numbers.");return(0,e.u)(k)+(0,e.u)(Q)}}(0,Z.e)("FlowGraphAddBlock",F);class z extends C.c{constructor(k){super((0,U.N)(null===k||void 0===k?void 0:k.type),(0,U.N)(null===k||void 0===k?void 0:k.type),(0,U.N)(null===k||void 0===k?void 0:k.type),((k,Q)=>this._polymorphicSubtract(k,Q)),"FlowGraphSubtractBlock",k)}_polymorphicSubtract(k,Q){const i=(0,e.n)(k),Z=(0,e.n)(Q);if((0,e.l)(i,Z)||(0,e.e)(i,Z)||(0,e.h)(i,Z))return k.EQ(Q);if("Quaternion"===i||"Vector4"===Z)return new m.Vector4(k.x,k.y,k.z,k.w).tJ(Q);if("Vector4"===i||"Quaternion"===Z)return k.EQ(Q);var U;if(null!==(U=this.config)&&void 0!==U&&U.preventIntegerFloatArithmetic&&typeof k!==typeof Q)throw new Error("Cannot add different types of numbers.");return(0,e.u)(k)-(0,e.u)(Q)}}(0,Z.e)("FlowGraphSubtractBlock",z);class E extends C.c{constructor(k){super((0,U.N)(null===k||void 0===k?void 0:k.type),(0,U.N)(null===k||void 0===k?void 0:k.type),(0,U.N)(null===k||void 0===k?void 0:k.type),((k,Q)=>this._polymorphicMultiply(k,Q)),"FlowGraphMultiplyBlock",k)}_polymorphicMultiply(k,Q){const i=(0,e.n)(k),Z=(0,e.n)(Q);if((0,e.l)(i,Z)||(0,e.e)(i,Z))return k.multiply(Q);if("Quaternion"===i||"Vector4"===Z)return new m.Vector4(k.x,k.y,k.z,k.w).multiplyInPlace(Q);if("Vector4"===i||"Quaternion"===Z)return k.multiply(Q);if((0,e.h)(i,Z)){var U;if(null!==(U=this.config)&&void 0!==U&&U.useMatrixPerComponent){const Z=k.m;for(let k=0;k<Z.length;k++)Z[k]*=Q.m[k];return"Matrix2D"===i?new H.b(Z):"Matrix3D"===i?new H.e(Z):m.Matrix.fQ(Z)}return Q.multiply(k)}var C;if(null!==(C=this.config)&&void 0!==C&&C.preventIntegerFloatArithmetic&&typeof k!==typeof Q)throw new Error("Cannot add different types of numbers.");return(0,e.u)(k)*(0,e.u)(Q)}}(0,Z.e)("FlowGraphMultiplyBlock",E);class l extends C.c{constructor(k){super((0,U.N)(null===k||void 0===k?void 0:k.type),(0,U.N)(null===k||void 0===k?void 0:k.type),(0,U.N)(null===k||void 0===k?void 0:k.type),((k,Q)=>this._polymorphicDivide(k,Q)),"FlowGraphDivideBlock",k)}_polymorphicDivide(k,Q){const i=(0,e.n)(k),Z=(0,e.n)(Q);if((0,e.l)(i,Z)||(0,e.e)(i,Z))return k.divide(Q);if("Quaternion"===i||"Quaternion"===Z){const i=k.clone();return i.x/=Q.x,i.y/=Q.y,i.z/=Q.z,i.w/=Q.w,i}if("Quaternion"===i||"Vector4"===Z)return new m.Vector4(k.x,k.y,k.z,k.w).divideInPlace(Q);if("Vector4"===i||"Quaternion"===Z)return k.divide(Q);if((0,e.h)(i,Z)){var U;if(null!==(U=this.config)&&void 0!==U&&U.useMatrixPerComponent){const Z=k.m;for(let k=0;k<Z.length;k++)Z[k]/=Q.m[k];return"Matrix2D"===i?new H.b(Z):"Matrix3D"===i?new H.e(Z):m.Matrix.fQ(Z)}return k.divide(Q)}var C;if(null!==(C=this.config)&&void 0!==C&&C.preventIntegerFloatArithmetic&&typeof k!==typeof Q)throw new Error("Cannot add different types of numbers.");return(0,e.u)(k)/(0,e.u)(Q)}}(0,Z.e)("FlowGraphDivideBlock",l);class h extends o{constructor(k){super(U.o,(k=>this._random(k)),"FlowGraphRandomBlock",k),this.min=this.registerDataInput("min",U.o,(null===k||void 0===k?void 0:k.min)??0),this.max=this.registerDataInput("max",U.o,(null===k||void 0===k?void 0:k.max)??1),null!==k&&void 0!==k&&k.seed&&(this._seed=k.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const k=1e4*Math.sin(this._seed++);return k-Math.floor(k)}return Math.random()}_random(k){const Q=this.min.getValue(k),i=this.max.getValue(k);return this._getRandomValue()*(i-Q)+Q}}(0,Z.e)("FlowGraphRandomBlock",h);class c extends o{constructor(k){super(U.o,(()=>Math.E),"FlowGraphEBlock",k)}}(0,Z.e)("FlowGraphEBlock",c);class f extends o{constructor(k){super(U.o,(()=>Math.PI),"FlowGraphPIBlock",k)}}(0,Z.e)("FlowGraphPIBlock",f);class Y extends o{constructor(k){super(U.o,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",k)}}(0,Z.e)("FlowGraphInfBlock",Y);class y extends o{constructor(k){super(U.o,(()=>Number.NaN),"FlowGraphNaNBlock",k)}}function L(k,Q){switch((0,e.n)(k)){case"FlowGraphInteger":return new G.e(Q(k.value));case"Vector2":return new m.Vector2(Q(k.x),Q(k.y));case"zQ":return new m.zQ(Q(k.x),Q(k.y),Q(k.z));case"Vector4":return new m.Vector4(Q(k.x),Q(k.y),Q(k.z),Q(k.w));case"Quaternion":return new m.Quaternion(Q(k.x),Q(k.y),Q(k.z),Q(k.w));case"Matrix":return m.Matrix.fQ(k.m.map(Q));case"Matrix2D":return new H.b(k.m.map(Q));case"Matrix3D":return new H.e(k.m.map(Q));default:return Q(k)}}(0,Z.e)("FlowGraphNaNBlock",y);class s extends O.b{constructor(k){super(U.o,U.o,(k=>this._polymorphicAbs(k)),"FlowGraphAbsBlock",k)}_polymorphicAbs(k){return L(k,Math.abs)}}(0,Z.e)("FlowGraphAbsBlock",s);class u extends O.b{constructor(k){super(U.o,U.o,(k=>this._polymorphicSign(k)),"FlowGraphSignBlock",k)}_polymorphicSign(k){return L(k,Math.sign)}}(0,Z.e)("FlowGraphSignBlock",u);class a extends O.b{constructor(k){super(U.o,U.o,(k=>this._polymorphicTrunc(k)),"FlowGraphTruncBlock",k)}_polymorphicTrunc(k){return L(k,Math.trunc)}}(0,Z.e)("FlowGraphTruncBlock",a);class j extends O.b{constructor(k){super(U.o,U.o,(k=>this._polymorphicFloor(k)),"FlowGraphFloorBlock",k)}_polymorphicFloor(k){return L(k,Math.floor)}}(0,Z.e)("FlowGraphFloorBlock",j);class T extends O.b{constructor(k){super(U.b,U.b,(k=>this._polymorphicCeiling(k)),"FlowGraphCeilBlock",k)}_polymorphicCeiling(k){return L(k,Math.ceil)}}(0,Z.e)("FlowGraphCeilBlock",T);class K extends O.b{constructor(k){super(U.b,U.b,(k=>this._polymorphicRound(k)),"FlowGraphRoundBlock",k)}_polymorphicRound(k){return L(k,(k=>{var Q;return k<0&&null!==(Q=this.config)&&void 0!==Q&&Q.roundHalfAwayFromZero?-Math.round(-k):Math.round(k)}))}}(0,Z.e)("FlowGraphRoundBlock",K);class v extends O.b{constructor(k){super(U.b,U.b,(k=>this._polymorphicFraction(k)),"FlowGraphFractBlock",k)}_polymorphicFraction(k){return L(k,(k=>k-Math.floor(k)))}}(0,Z.e)("FlowGraphFractBlock",v);class N extends O.b{constructor(k){super(U.b,U.b,(k=>this._polymorphicNeg(k)),"FlowGraphNegationBlock",k)}_polymorphicNeg(k){return L(k,(k=>-k))}}function X(k,Q,i){switch((0,e.n)(k)){case"FlowGraphInteger":return new G.e(i(k.value,Q.value));case"Vector2":return new m.Vector2(i(k.x,Q.x),i(k.y,Q.y));case"zQ":return new m.zQ(i(k.x,Q.x),i(k.y,Q.y),i(k.z,Q.z));case"Vector4":return new m.Vector4(i(k.x,Q.x),i(k.y,Q.y),i(k.z,Q.z),i(k.w,Q.w));case"Quaternion":return new m.Quaternion(i(k.x,Q.x),i(k.y,Q.y),i(k.z,Q.z),i(k.w,Q.w));case"Matrix":return m.Matrix.fQ(k.m.map(((k,Z)=>i(k,Q.m[Z]))));case"Matrix2D":return new H.b(k.m.map(((k,Z)=>i(k,Q.m[Z]))));case"Matrix3D":return new H.e(k.m.map(((k,Z)=>i(k,Q.m[Z]))));default:return i((0,e.u)(k),(0,e.u)(Q))}}(0,Z.e)("FlowGraphNegationBlock",N);class p extends C.c{constructor(k){super(U.b,U.b,U.b,((k,Q)=>this._polymorphicRemainder(k,Q)),"FlowGraphModuloBlock",k)}_polymorphicRemainder(k,Q){return X(k,Q,((k,Q)=>k%Q))}}(0,Z.e)("FlowGraphModuloBlock",p);class d extends C.c{constructor(k){super(U.b,U.b,U.b,((k,Q)=>this._polymorphicMin(k,Q)),"FlowGraphMinBlock",k)}_polymorphicMin(k,Q){return X(k,Q,Math.min)}}(0,Z.e)("FlowGraphMinBlock",d);class b extends C.c{constructor(k){super(U.b,U.b,U.b,((k,Q)=>this._polymorphicMax(k,Q)),"FlowGraphMaxBlock",k)}_polymorphicMax(k,Q){return X(k,Q,Math.max)}}function D(k,Q,i){return Math.min(Math.max(k,Math.min(Q,i)),Math.max(Q,i))}function M(k,Q,i,Z){switch((0,e.n)(k)){case"FlowGraphInteger":return new G.e(Z(k.value,Q.value,i.value));case"Vector2":return new m.Vector2(Z(k.x,Q.x,i.x),Z(k.y,Q.y,i.y));case"zQ":return new m.zQ(Z(k.x,Q.x,i.x),Z(k.y,Q.y,i.y),Z(k.z,Q.z,i.z));case"Vector4":return new m.Vector4(Z(k.x,Q.x,i.x),Z(k.y,Q.y,i.y),Z(k.z,Q.z,i.z),Z(k.w,Q.w,i.w));case"Quaternion":return new m.Quaternion(Z(k.x,Q.x,i.x),Z(k.y,Q.y,i.y),Z(k.z,Q.z,i.z),Z(k.w,Q.w,i.w));case"Matrix":return m.Matrix.fQ(k.m.map(((k,U)=>Z(k,Q.m[U],i.m[U]))));case"Matrix2D":return new H.b(k.m.map(((k,U)=>Z(k,Q.m[U],i.m[U]))));case"Matrix3D":return new H.e(k.m.map(((k,U)=>Z(k,Q.m[U],i.m[U]))));default:return Z((0,e.u)(k),(0,e.u)(Q),(0,e.u)(i))}}(0,Z.e)("FlowGraphMaxBlock",b);class W extends J{constructor(k){super(U.b,U.b,U.b,U.b,((k,Q,i)=>this._polymorphicClamp(k,Q,i)),"FlowGraphClampBlock",k)}_polymorphicClamp(k,Q,i){return M(k,Q,i,D)}}function A(k){return Math.min(Math.max(k,0),1)}(0,Z.e)("FlowGraphClampBlock",W);class g extends O.b{constructor(k){super(U.b,U.b,(k=>this._polymorphicSaturate(k)),"FlowGraphSaturateBlock",k)}_polymorphicSaturate(k){return L(k,A)}}function R(k,Q,i){return(1-i)*k+i*Q}(0,Z.e)("FlowGraphSaturateBlock",g);class w extends J{constructor(k){super(U.b,U.b,U.b,U.b,((k,Q,i)=>this._polymorphicInterpolate(k,Q,i)),"FlowGraphMathInterpolationBlock",k)}_polymorphicInterpolate(k,Q,i){return M(k,Q,i,R)}}(0,Z.e)("FlowGraphMathInterpolationBlock",w);class S extends C.c{constructor(k){super(U.b,U.b,U.f,((k,Q)=>this._polymorphicEq(k,Q)),"FlowGraphEqualityBlock",k)}_polymorphicEq(k,Q){const i=(0,e.n)(k),Z=(0,e.n)(Q);return typeof k===typeof Q&&((0,e.l)(i,Z)||(0,e.h)(i,Z)||(0,e.e)(i,Z)?k.equals(Q):k===Q)}}function q(k,Q,i){if((0,e.y)(k)&&(0,e.y)(Q))return i((0,e.u)(k),(0,e.u)(Q));throw new Error(`Cannot compare ${k} and ${Q}`)}(0,Z.e)("FlowGraphEqualityBlock",S);class P extends C.c{constructor(k){super(U.b,U.b,U.f,((k,Q)=>this._polymorphicLessThan(k,Q)),"FlowGraphLessThanBlock",k)}_polymorphicLessThan(k,Q){return q(k,Q,((k,Q)=>k<Q))}}(0,Z.e)("FlowGraphLessThanBlock",P);class t extends C.c{constructor(k){super(U.b,U.b,U.f,((k,Q)=>this._polymorphicLessThanOrEqual(k,Q)),"FlowGraphLessThanOrEqualBlock",k)}_polymorphicLessThanOrEqual(k,Q){return q(k,Q,((k,Q)=>k<=Q))}}(0,Z.e)("FlowGraphLessThanOrEqualBlock",t);class I extends C.c{constructor(k){super(U.b,U.b,U.f,((k,Q)=>this._polymorphicGreaterThan(k,Q)),"FlowGraphGreaterThanBlock",k)}_polymorphicGreaterThan(k,Q){return q(k,Q,((k,Q)=>k>Q))}}(0,Z.e)("FlowGraphGreaterThanBlock",I);class r extends C.c{constructor(k){super(U.b,U.b,U.f,((k,Q)=>this._polymorphicGreaterThanOrEqual(k,Q)),"FlowGraphGreaterThanOrEqualBlock",k)}_polymorphicGreaterThanOrEqual(k,Q){return q(k,Q,((k,Q)=>k>=Q))}}(0,Z.e)("FlowGraphGreaterThanOrEqualBlock",r);class n extends O.b{constructor(k){super(U.b,U.f,(k=>this._polymorphicIsNan(k)),"FlowGraphIsNaNBlock",k)}_polymorphicIsNan(k){if((0,e.y)(k,!0))return isNaN((0,e.u)(k));throw new Error(`Cannot get NaN of ${k}`)}}(0,Z.e)("FlowGraphIsNaNBlock",n);class x extends O.b{constructor(k){super(U.b,U.f,(k=>this._polymorphicIsInf(k)),"FlowGraphIsInfBlock",k)}_polymorphicIsInf(k){if((0,e.y)(k))return!isFinite((0,e.u)(k));throw new Error(`Cannot get isInf of ${k}`)}}(0,Z.e)("FlowGraphIsInfBlock",x);class V extends O.b{constructor(k){super(U.b,U.b,(k=>this._polymorphicDegToRad(k)),"FlowGraphDegToRadBlock",k)}_degToRad(k){return k*Math.PI/180}_polymorphicDegToRad(k){return L(k,this._degToRad)}}(0,Z.e)("FlowGraphDegToRadBlock",V);class kk extends O.b{constructor(k){super(U.b,U.b,(k=>this._polymorphicRadToDeg(k)),"FlowGraphRadToDegBlock",k)}_radToDeg(k){return 180*k/Math.PI}_polymorphicRadToDeg(k){return L(k,this._radToDeg)}}(0,Z.e)("FlowGraphRadToDegBlock",kk);class Qk extends O.b{constructor(k){super(U.o,U.o,(k=>this._polymorphicSin(k)),"FlowGraphSinBlock",k)}_polymorphicSin(k){return L(k,Math.sin)}}class ik extends O.b{constructor(k){super(U.o,U.o,(k=>this._polymorphicCos(k)),"FlowGraphCosBlock",k)}_polymorphicCos(k){return L(k,Math.cos)}}class Zk extends O.b{constructor(k){super(U.o,U.o,(k=>this._polymorphicTan(k)),"FlowGraphTanBlock",k)}_polymorphicTan(k){return L(k,Math.tan)}}class Uk extends O.b{constructor(k){super(U.o,U.o,(k=>this._polymorphicAsin(k)),"FlowGraphASinBlock",k)}_polymorphicAsin(k){return L(k,Math.asin)}}(0,Z.e)("FlowGraphASinBlock",Uk);class Ck extends O.b{constructor(k){super(U.o,U.o,(k=>this._polymorphicAcos(k)),"FlowGraphACosBlock",k)}_polymorphicAcos(k){return L(k,Math.acos)}}(0,Z.e)("FlowGraphACosBlock",Ck);class Bk extends O.b{constructor(k){super(U.o,U.o,(k=>this._polymorphicAtan(k)),"FlowGraphATanBlock",k)}_polymorphicAtan(k){return L(k,Math.atan)}}(0,Z.e)("FlowGraphATanBlock",Bk);class ok extends C.c{constructor(k){super(U.b,U.b,U.b,((k,Q)=>this._polymorphicAtan2(k,Q)),"FlowGraphATan2Block",k)}_polymorphicAtan2(k,Q){return X(k,Q,Math.atan2)}}(0,Z.e)("FlowGraphATan2Block",ok);class mk extends O.b{constructor(k){super(U.b,U.b,(k=>this._polymorphicSinh(k)),"FlowGraphSinhBlock",k)}_polymorphicSinh(k){return L(k,Math.sinh)}}(0,Z.e)("FlowGraphSinhBlock",mk);class Ok extends O.b{constructor(k){super(U.b,U.b,(k=>this._polymorphicCosh(k)),"FlowGraphCoshBlock",k)}_polymorphicCosh(k){return L(k,Math.cosh)}}(0,Z.e)("FlowGraphCoshBlock",Ok);class Jk extends O.b{constructor(k){super(U.b,U.b,(k=>this._polymorphicTanh(k)),"FlowGraphTanhBlock",k)}_polymorphicTanh(k){return L(k,Math.tanh)}}(0,Z.e)("FlowGraphTanhBlock",Jk);class Gk extends O.b{constructor(k){super(U.b,U.o,(k=>this._polymorphicAsinh(k)),"FlowGraphASinhBlock",k)}_polymorphicAsinh(k){return L(k,Math.asinh)}}(0,Z.e)("FlowGraphASinhBlock",Gk);class Hk extends O.b{constructor(k){super(U.b,U.o,(k=>this._polymorphicAcosh(k)),"FlowGraphACoshBlock",k)}_polymorphicAcosh(k){return L(k,Math.acosh)}}(0,Z.e)("FlowGraphACoshBlock",Hk);class ek extends O.b{constructor(k){super(U.b,U.o,(k=>this._polymorphicAtanh(k)),"FlowGraphATanhBlock",k)}_polymorphicAtanh(k){return L(k,Math.atanh)}}(0,Z.e)("FlowGraphATanhBlock",ek);class Fk extends O.b{constructor(k){super(U.b,U.o,(k=>this._polymorphicExp(k)),"FlowGraphExponentialBlock",k)}_polymorphicExp(k){return L(k,Math.exp)}}(0,Z.e)("FlowGraphExponentialBlock",Fk);class zk extends O.b{constructor(k){super(U.b,U.o,(k=>this._polymorphicLog(k)),"FlowGraphLogBlock",k)}_polymorphicLog(k){return L(k,Math.log)}}(0,Z.e)("FlowGraphLogBlock",zk);class Ek extends O.b{constructor(k){super(U.b,U.o,(k=>this._polymorphicLog2(k)),"FlowGraphLog2Block",k)}_polymorphicLog2(k){return L(k,Math.log2)}}(0,Z.e)("FlowGraphLog2Block",Ek);class lk extends O.b{constructor(k){super(U.b,U.o,(k=>this._polymorphicLog10(k)),"FlowGraphLog10Block",k)}_polymorphicLog10(k){return L(k,Math.log10)}}(0,Z.e)("FlowGraphLog10Block",lk);class hk extends O.b{constructor(k){super(U.b,U.o,(k=>this._polymorphicSqrt(k)),"FlowGraphSquareRootBlock",k)}_polymorphicSqrt(k){return L(k,Math.sqrt)}}(0,Z.e)("FlowGraphSquareRootBlock",hk);class ck extends O.b{constructor(k){super(U.b,U.o,(k=>this._polymorphicCubeRoot(k)),"FlowGraphCubeRootBlock",k)}_polymorphicCubeRoot(k){return L(k,Math.cbrt)}}(0,Z.e)("FlowGraphCubeRootBlock",ck);class fk extends C.c{constructor(k){super(U.b,U.o,U.o,((k,Q)=>this._polymorphicPow(k,Q)),"FlowGraphPowerBlock",k)}_polymorphicPow(k,Q){return X(k,Q,Math.pow)}}(0,Z.e)("FlowGraphPowerBlock",fk);class Yk extends O.b{constructor(k){super((0,U.N)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),(0,U.N)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),(k=>"boolean"===typeof k?!k:"number"===typeof k?~k:new G.e(~k.value)),"FlowGraphBitwiseNotBlock",k)}}(0,Z.e)("FlowGraphBitwiseNotBlock",Yk);class yk extends C.c{constructor(k){super((0,U.N)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),(0,U.N)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),(0,U.N)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),((k,Q)=>{if("boolean"===typeof k&&"boolean"===typeof Q)return k&&Q;if("number"===typeof k&&"number"===typeof Q)return k&Q;if("object"===typeof k&&"object"===typeof Q)return new G.e(k.value&Q.value);throw new Error(`Cannot perform bitwise AND on ${k} and ${Q}`)}),"FlowGraphBitwiseAndBlock",k)}}(0,Z.e)("FlowGraphBitwiseAndBlock",yk);class Lk extends C.c{constructor(k){super((0,U.N)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),(0,U.N)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),(0,U.N)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),((k,Q)=>{if("boolean"===typeof k&&"boolean"===typeof Q)return k||Q;if("number"===typeof k&&"number"===typeof Q)return k|Q;if("object"===typeof k&&"object"===typeof Q)return new G.e(k.value|Q.value);throw new Error(`Cannot perform bitwise OR on ${k} and ${Q}`)}),"FlowGraphBitwiseOrBlock",k)}}(0,Z.e)("FlowGraphBitwiseOrBlock",Lk);class sk extends C.c{constructor(k){super((0,U.N)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),(0,U.N)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),(0,U.N)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),((k,Q)=>{if("boolean"===typeof k&&"boolean"===typeof Q)return k!==Q;if("number"===typeof k&&"number"===typeof Q)return k^Q;if("object"===typeof k&&"object"===typeof Q)return new G.e(k.value^Q.value);throw new Error(`Cannot perform bitwise XOR on ${k} and ${Q}`)}),"FlowGraphBitwiseXorBlock",k)}}(0,Z.e)("FlowGraphBitwiseXorBlock",sk);class uk extends C.c{constructor(k){super(U.h,U.h,U.h,((k,Q)=>new G.e(k.value<<Q.value)),"FlowGraphBitwiseLeftShiftBlock",k)}}(0,Z.e)("FlowGraphBitwiseLeftShiftBlock",uk);class ak extends C.c{constructor(k){super(U.h,U.h,U.h,((k,Q)=>new G.e(k.value>>Q.value)),"FlowGraphBitwiseRightShiftBlock",k)}}(0,Z.e)("FlowGraphBitwiseRightShiftBlock",ak);class jk extends O.b{constructor(k){super(U.h,U.h,(k=>new G.e(Math.clz32(k.value))),"FlowGraphLeadingZerosBlock",k)}}(0,Z.e)("FlowGraphLeadingZerosBlock",jk);class Tk extends O.b{constructor(k){super(U.h,U.h,(k=>new G.e(k.value?31-Math.clz32(k.value&-k.value):32)),"FlowGraphTrailingZerosBlock",k)}}(0,Z.e)("FlowGraphTrailingZerosBlock",Tk);class Kk extends O.b{constructor(k){super(U.h,U.h,(k=>new G.e(function(k){let Q=0;for(;k;)Q+=1&k,k>>=1;return Q}(k.value))),"FlowGraphOneBitsCounterBlock",k)}}(0,Z.e)("FlowGraphOneBitsCounterBlock",Kk)},14533:(k,Q,i)=>{i.d(Q,{c:()=>U});var Z=i(14536);class U extends Z.e{constructor(k,Q,i,Z,U,C){super(i,C),this._operation=Z,this._className=U,this.a=this.registerDataInput("a",k),this.b=this.registerDataInput("b",Q)}_doOperation(k){const Q=this.a.getValue(k),i=this.b.getValue(k);return this._operation(Q,i)}getClassName(){return this._className}}},14536:(k,Q,i)=>{i.d(Q,{e:()=>o});var Z=i(13084),U=i(13064);const C="cachedOperationValue",B="cachedExecutionId";class o extends Z.e{constructor(k,Q){super(Q),this.value=this.registerDataOutput("value",k),this.isValid=this.registerDataOutput("isValid",U.f)}_updateOutputs(k){const Q=k._getExecutionVariable(this,B,-1),i=k._getExecutionVariable(this,C,null);if(void 0!==i&&null!==i&&Q===k.executionId)this.isValid.setValue(!0,k),this.value.setValue(i,k);else try{const Q=this._doOperation(k);if(void 0===Q||null===Q)return void this.isValid.setValue(!1,k);k._setExecutionVariable(this,C,Q),k._setExecutionVariable(this,B,k.executionId),this.value.setValue(Q,k),this.isValid.setValue(!0,k)}catch(Z){this.isValid.setValue(!1,k)}}}},14543:(k,Q,i)=>{i.d(Q,{b:()=>U});var Z=i(14536);class U extends Z.e{constructor(k,Q,i,Z,U){super(Q,U),this._operation=i,this._className=Z,this.a=this.registerDataInput("a",k)}_doOperation(k){return this._operation(this.a.getValue(k))}getClassName(){return this._className}}}}]);