"use strict";(self["1kjc9ee3uyt"]=self["1kjc9ee3uyt"]||[]).push([[88],{14767:(w,E,G)=>{G.r(E),G.d(E,{FlowGraphAbsBlock:()=>T,FlowGraphAcosBlock:()=>Bw,FlowGraphAcoshBlock:()=>uw,FlowGraphAddBlock:()=>a,FlowGraphAsinBlock:()=>hw,FlowGraphAsinhBlock:()=>Ow,FlowGraphAtan2Block:()=>xw,FlowGraphAtanBlock:()=>yw,FlowGraphAtanhBlock:()=>Vw,FlowGraphBitwiseAndBlock:()=>qw,FlowGraphBitwiseLeftShiftBlock:()=>Iw,FlowGraphBitwiseNotBlock:()=>tw,FlowGraphBitwiseOrBlock:()=>Ww,FlowGraphBitwiseRightShiftBlock:()=>jw,FlowGraphBitwiseXorBlock:()=>Tw,FlowGraphCeilBlock:()=>o,FlowGraphClampBlock:()=>D,FlowGraphCosBlock:()=>Gw,FlowGraphCoshBlock:()=>lw,FlowGraphCubeRootBlock:()=>dw,FlowGraphDegToRadBlock:()=>A,FlowGraphDivideBlock:()=>Z,FlowGraphEBlock:()=>d,FlowGraphEqualityBlock:()=>L,FlowGraphExpBlock:()=>aw,FlowGraphFloorBlock:()=>g,FlowGraphFractionBlock:()=>k,FlowGraphGreaterThanBlock:()=>Y,FlowGraphGreaterThanOrEqualBlock:()=>S,FlowGraphInfBlock:()=>t,FlowGraphIsInfinityBlock:()=>b,FlowGraphIsNanBlock:()=>X,FlowGraphLeadingZerosBlock:()=>gw,FlowGraphLessThanBlock:()=>n,FlowGraphLessThanOrEqualBlock:()=>r,FlowGraphLog10Block:()=>Zw,FlowGraphLog2Block:()=>cw,FlowGraphLogBlock:()=>Qw,FlowGraphMathInterpolationBlock:()=>z,FlowGraphMaxBlock:()=>F,FlowGraphMinBlock:()=>s,FlowGraphModuloBlock:()=>C,FlowGraphMultiplyBlock:()=>c,FlowGraphNaNBlock:()=>q,FlowGraphNegationBlock:()=>N,FlowGraphOneBitsCounterBlock:()=>fw,FlowGraphPiBlock:()=>K,FlowGraphPowerBlock:()=>Kw,FlowGraphRadToDegBlock:()=>ww,FlowGraphRandomBlock:()=>J,FlowGraphRoundBlock:()=>f,FlowGraphSaturateBlock:()=>R,FlowGraphSignBlock:()=>I,FlowGraphSinBlock:()=>Ew,FlowGraphSinhBlock:()=>Uw,FlowGraphSquareRootBlock:()=>Jw,FlowGraphSubtractBlock:()=>Q,FlowGraphTanBlock:()=>Pw,FlowGraphTanhBlock:()=>iw,FlowGraphTrailingZerosBlock:()=>ow,FlowGraphTruncBlock:()=>j});var P=G(11646),h=G(13281),B=G(14769),y=G(14776);class x extends y.e{constructor(w,E,G,P){super(w,P),this._operation=E,this._className=G}_doOperation(w){return this._operation(w)}getClassName(){return this._className}}var U=G(11679),l=G(14780);class i extends y.e{constructor(w,E,G,P,h,B,y){super(P,y),this._operation=h,this._className=B,this.a=this.registerDataInput("a",w),this.b=this.registerDataInput("b",E),this.c=this.registerDataInput("c",G)}_doOperation(w){return this._operation(this.a.getValue(w),this.b.getValue(w),this.c.getValue(w))}getClassName(){return this._className}}var O=G(13274),u=G(13284),V=G(13306);class a extends B.c{constructor(w){super((0,h.K)(null===w||void 0===w?void 0:w.type),(0,h.K)(null===w||void 0===w?void 0:w.type),(0,h.K)(null===w||void 0===w?void 0:w.type),((w,E)=>this._polymorphicAdd(w,E)),"FlowGraphAddBlock",w)}_polymorphicAdd(w,E){const G=(0,V.l)(w),P=(0,V.l)(E);if((0,V.h)(G,P)||(0,V.f)(G,P)||(0,V.b)(G,P))return w.add(E);if("Quaternion"===G||"Vector4"===P)return new U.Vector4(w.x,w.y,w.z,w.w).addInPlace(E);if("Vector4"===G||"Quaternion"===P)return w.add(E);var h;if(null!==(h=this.config)&&void 0!==h&&h.preventIntegerFloatArithmetic&&typeof w!==typeof E)throw new Error("Cannot add different types of numbers.");return(0,V.q)(w)+(0,V.q)(E)}}(0,P.g)("FlowGraphAddBlock",a);class Q extends B.c{constructor(w){super((0,h.K)(null===w||void 0===w?void 0:w.type),(0,h.K)(null===w||void 0===w?void 0:w.type),(0,h.K)(null===w||void 0===w?void 0:w.type),((w,E)=>this._polymorphicSubtract(w,E)),"FlowGraphSubtractBlock",w)}_polymorphicSubtract(w,E){const G=(0,V.l)(w),P=(0,V.l)(E);if((0,V.h)(G,P)||(0,V.b)(G,P)||(0,V.f)(G,P))return w.cE(E);if("Quaternion"===G||"Vector4"===P)return new U.Vector4(w.x,w.y,w.z,w.w).xO(E);if("Vector4"===G||"Quaternion"===P)return w.cE(E);var h;if(null!==(h=this.config)&&void 0!==h&&h.preventIntegerFloatArithmetic&&typeof w!==typeof E)throw new Error("Cannot add different types of numbers.");return(0,V.q)(w)-(0,V.q)(E)}}(0,P.g)("FlowGraphSubtractBlock",Q);class c extends B.c{constructor(w){super((0,h.K)(null===w||void 0===w?void 0:w.type),(0,h.K)(null===w||void 0===w?void 0:w.type),(0,h.K)(null===w||void 0===w?void 0:w.type),((w,E)=>this._polymorphicMultiply(w,E)),"FlowGraphMultiplyBlock",w)}_polymorphicMultiply(w,E){const G=(0,V.l)(w),P=(0,V.l)(E);if((0,V.h)(G,P)||(0,V.b)(G,P))return w.multiply(E);if("Quaternion"===G||"Vector4"===P)return new U.Vector4(w.x,w.y,w.z,w.w).multiplyInPlace(E);if("Vector4"===G||"Quaternion"===P)return w.multiply(E);if((0,V.f)(G,P)){var h;if(null!==(h=this.config)&&void 0!==h&&h.useMatrixPerComponent){const P=w.m;for(let w=0;w<P.length;w++)P[w]*=E.m[w];return"Matrix2D"===G?new u.c(P):"Matrix3D"===G?new u.e(P):U.Matrix.KE(P)}return E.multiply(w)}var B;if(null!==(B=this.config)&&void 0!==B&&B.preventIntegerFloatArithmetic&&typeof w!==typeof E)throw new Error("Cannot add different types of numbers.");return(0,V.q)(w)*(0,V.q)(E)}}(0,P.g)("FlowGraphMultiplyBlock",c);class Z extends B.c{constructor(w){super((0,h.K)(null===w||void 0===w?void 0:w.type),(0,h.K)(null===w||void 0===w?void 0:w.type),(0,h.K)(null===w||void 0===w?void 0:w.type),((w,E)=>this._polymorphicDivide(w,E)),"FlowGraphDivideBlock",w)}_polymorphicDivide(w,E){const G=(0,V.l)(w),P=(0,V.l)(E);if((0,V.h)(G,P)||(0,V.b)(G,P))return w.divide(E);if("Quaternion"===G||"Quaternion"===P){const G=w.clone();return G.x/=E.x,G.y/=E.y,G.z/=E.z,G.w/=E.w,G}if("Quaternion"===G||"Vector4"===P)return new U.Vector4(w.x,w.y,w.z,w.w).divideInPlace(E);if("Vector4"===G||"Quaternion"===P)return w.divide(E);if((0,V.f)(G,P)){var h;if(null!==(h=this.config)&&void 0!==h&&h.useMatrixPerComponent){const P=w.m;for(let w=0;w<P.length;w++)P[w]/=E.m[w];return"Matrix2D"===G?new u.c(P):"Matrix3D"===G?new u.e(P):U.Matrix.KE(P)}return w.divide(E)}var B;if(null!==(B=this.config)&&void 0!==B&&B.preventIntegerFloatArithmetic&&typeof w!==typeof E)throw new Error("Cannot add different types of numbers.");return(0,V.q)(w)/(0,V.q)(E)}}(0,P.g)("FlowGraphDivideBlock",Z);class J extends x{constructor(w){super(h.r,(w=>this._random(w)),"FlowGraphRandomBlock",w),this.min=this.registerDataInput("min",h.r,(null===w||void 0===w?void 0:w.min)??0),this.max=this.registerDataInput("max",h.r,(null===w||void 0===w?void 0:w.max)??1),null!==w&&void 0!==w&&w.seed&&(this._seed=w.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const w=1e4*Math.sin(this._seed++);return w-Math.floor(w)}return Math.random()}_random(w){const E=this.min.getValue(w),G=this.max.getValue(w);return this._getRandomValue()*(G-E)+E}}(0,P.g)("FlowGraphRandomBlock",J);class d extends x{constructor(w){super(h.r,(()=>Math.E),"FlowGraphEBlock",w)}}(0,P.g)("FlowGraphEBlock",d);class K extends x{constructor(w){super(h.r,(()=>Math.PI),"FlowGraphPIBlock",w)}}(0,P.g)("FlowGraphPIBlock",K);class t extends x{constructor(w){super(h.r,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",w)}}(0,P.g)("FlowGraphInfBlock",t);class q extends x{constructor(w){super(h.r,(()=>Number.NaN),"FlowGraphNaNBlock",w)}}function W(w,E){switch((0,V.l)(w)){case"FlowGraphInteger":return new O.d(E(w.value));case"Vector2":return new U.Vector2(E(w.x),E(w.y));case"QE":return new U.QE(E(w.x),E(w.y),E(w.z));case"Vector4":return new U.Vector4(E(w.x),E(w.y),E(w.z),E(w.w));case"Quaternion":return new U.Quaternion(E(w.x),E(w.y),E(w.z),E(w.w));case"Matrix":return U.Matrix.KE(w.m.map(E));case"Matrix2D":return new u.c(w.m.map(E));case"Matrix3D":return new u.e(w.m.map(E));default:return E(w)}}(0,P.g)("FlowGraphNaNBlock",q);class T extends l.d{constructor(w){super(h.r,h.r,(w=>this._polymorphicAbs(w)),"FlowGraphAbsBlock",w)}_polymorphicAbs(w){return W(w,Math.abs)}}(0,P.g)("FlowGraphAbsBlock",T);class I extends l.d{constructor(w){super(h.r,h.r,(w=>this._polymorphicSign(w)),"FlowGraphSignBlock",w)}_polymorphicSign(w){return W(w,Math.sign)}}(0,P.g)("FlowGraphSignBlock",I);class j extends l.d{constructor(w){super(h.r,h.r,(w=>this._polymorphicTrunc(w)),"FlowGraphTruncBlock",w)}_polymorphicTrunc(w){return W(w,Math.trunc)}}(0,P.g)("FlowGraphTruncBlock",j);class g extends l.d{constructor(w){super(h.r,h.r,(w=>this._polymorphicFloor(w)),"FlowGraphFloorBlock",w)}_polymorphicFloor(w){return W(w,Math.floor)}}(0,P.g)("FlowGraphFloorBlock",g);class o extends l.d{constructor(w){super(h.c,h.c,(w=>this._polymorphicCeiling(w)),"FlowGraphCeilBlock",w)}_polymorphicCeiling(w){return W(w,Math.ceil)}}(0,P.g)("FlowGraphCeilBlock",o);class f extends l.d{constructor(w){super(h.c,h.c,(w=>this._polymorphicRound(w)),"FlowGraphRoundBlock",w)}_polymorphicRound(w){return W(w,(w=>{var E;return w<0&&null!==(E=this.config)&&void 0!==E&&E.roundHalfAwayFromZero?-Math.round(-w):Math.round(w)}))}}(0,P.g)("FlowGraphRoundBlock",f);class k extends l.d{constructor(w){super(h.c,h.c,(w=>this._polymorphicFraction(w)),"FlowGraphFractBlock",w)}_polymorphicFraction(w){return W(w,(w=>w-Math.floor(w)))}}(0,P.g)("FlowGraphFractBlock",k);class N extends l.d{constructor(w){super(h.c,h.c,(w=>this._polymorphicNeg(w)),"FlowGraphNegationBlock",w)}_polymorphicNeg(w){return W(w,(w=>-w))}}function v(w,E,G){switch((0,V.l)(w)){case"FlowGraphInteger":return new O.d(G(w.value,E.value));case"Vector2":return new U.Vector2(G(w.x,E.x),G(w.y,E.y));case"QE":return new U.QE(G(w.x,E.x),G(w.y,E.y),G(w.z,E.z));case"Vector4":return new U.Vector4(G(w.x,E.x),G(w.y,E.y),G(w.z,E.z),G(w.w,E.w));case"Quaternion":return new U.Quaternion(G(w.x,E.x),G(w.y,E.y),G(w.z,E.z),G(w.w,E.w));case"Matrix":return U.Matrix.KE(w.m.map(((w,P)=>G(w,E.m[P]))));case"Matrix2D":return new u.c(w.m.map(((w,P)=>G(w,E.m[P]))));case"Matrix3D":return new u.e(w.m.map(((w,P)=>G(w,E.m[P]))));default:return G((0,V.q)(w),(0,V.q)(E))}}(0,P.g)("FlowGraphNegationBlock",N);class C extends B.c{constructor(w){super(h.c,h.c,h.c,((w,E)=>this._polymorphicRemainder(w,E)),"FlowGraphModuloBlock",w)}_polymorphicRemainder(w,E){return v(w,E,((w,E)=>w%E))}}(0,P.g)("FlowGraphModuloBlock",C);class s extends B.c{constructor(w){super(h.c,h.c,h.c,((w,E)=>this._polymorphicMin(w,E)),"FlowGraphMinBlock",w)}_polymorphicMin(w,E){return v(w,E,Math.min)}}(0,P.g)("FlowGraphMinBlock",s);class F extends B.c{constructor(w){super(h.c,h.c,h.c,((w,E)=>this._polymorphicMax(w,E)),"FlowGraphMaxBlock",w)}_polymorphicMax(w,E){return v(w,E,Math.max)}}function M(w,E,G){return Math.min(Math.max(w,Math.min(E,G)),Math.max(E,G))}function p(w,E,G,P){switch((0,V.l)(w)){case"FlowGraphInteger":return new O.d(P(w.value,E.value,G.value));case"Vector2":return new U.Vector2(P(w.x,E.x,G.x),P(w.y,E.y,G.y));case"QE":return new U.QE(P(w.x,E.x,G.x),P(w.y,E.y,G.y),P(w.z,E.z,G.z));case"Vector4":return new U.Vector4(P(w.x,E.x,G.x),P(w.y,E.y,G.y),P(w.z,E.z,G.z),P(w.w,E.w,G.w));case"Quaternion":return new U.Quaternion(P(w.x,E.x,G.x),P(w.y,E.y,G.y),P(w.z,E.z,G.z),P(w.w,E.w,G.w));case"Matrix":return U.Matrix.KE(w.m.map(((w,h)=>P(w,E.m[h],G.m[h]))));case"Matrix2D":return new u.c(w.m.map(((w,h)=>P(w,E.m[h],G.m[h]))));case"Matrix3D":return new u.e(w.m.map(((w,h)=>P(w,E.m[h],G.m[h]))));default:return P((0,V.q)(w),(0,V.q)(E),(0,V.q)(G))}}(0,P.g)("FlowGraphMaxBlock",F);class D extends i{constructor(w){super(h.c,h.c,h.c,h.c,((w,E,G)=>this._polymorphicClamp(w,E,G)),"FlowGraphClampBlock",w)}_polymorphicClamp(w,E,G){return p(w,E,G,M)}}function e(w){return Math.min(Math.max(w,0),1)}(0,P.g)("FlowGraphClampBlock",D);class R extends l.d{constructor(w){super(h.c,h.c,(w=>this._polymorphicSaturate(w)),"FlowGraphSaturateBlock",w)}_polymorphicSaturate(w){return W(w,e)}}function H(w,E,G){return(1-G)*w+G*E}(0,P.g)("FlowGraphSaturateBlock",R);class z extends i{constructor(w){super(h.c,h.c,h.c,h.c,((w,E,G)=>this._polymorphicInterpolate(w,E,G)),"FlowGraphMathInterpolationBlock",w)}_polymorphicInterpolate(w,E,G){return p(w,E,G,H)}}(0,P.g)("FlowGraphMathInterpolationBlock",z);class L extends B.c{constructor(w){super(h.c,h.c,h.g,((w,E)=>this._polymorphicEq(w,E)),"FlowGraphEqualityBlock",w)}_polymorphicEq(w,E){const G=(0,V.l)(w),P=(0,V.l)(E);return typeof w===typeof E&&((0,V.h)(G,P)||(0,V.f)(G,P)||(0,V.b)(G,P)?w.equals(E):w===E)}}function m(w,E,G){if((0,V.u)(w)&&(0,V.u)(E))return G((0,V.q)(w),(0,V.q)(E));throw new Error(`Cannot compare ${w} and ${E}`)}(0,P.g)("FlowGraphEqualityBlock",L);class n extends B.c{constructor(w){super(h.c,h.c,h.g,((w,E)=>this._polymorphicLessThan(w,E)),"FlowGraphLessThanBlock",w)}_polymorphicLessThan(w,E){return m(w,E,((w,E)=>w<E))}}(0,P.g)("FlowGraphLessThanBlock",n);class r extends B.c{constructor(w){super(h.c,h.c,h.g,((w,E)=>this._polymorphicLessThanOrEqual(w,E)),"FlowGraphLessThanOrEqualBlock",w)}_polymorphicLessThanOrEqual(w,E){return m(w,E,((w,E)=>w<=E))}}(0,P.g)("FlowGraphLessThanOrEqualBlock",r);class Y extends B.c{constructor(w){super(h.c,h.c,h.g,((w,E)=>this._polymorphicGreaterThan(w,E)),"FlowGraphGreaterThanBlock",w)}_polymorphicGreaterThan(w,E){return m(w,E,((w,E)=>w>E))}}(0,P.g)("FlowGraphGreaterThanBlock",Y);class S extends B.c{constructor(w){super(h.c,h.c,h.g,((w,E)=>this._polymorphicGreaterThanOrEqual(w,E)),"FlowGraphGreaterThanOrEqualBlock",w)}_polymorphicGreaterThanOrEqual(w,E){return m(w,E,((w,E)=>w>=E))}}(0,P.g)("FlowGraphGreaterThanOrEqualBlock",S);class X extends l.d{constructor(w){super(h.c,h.g,(w=>this._polymorphicIsNan(w)),"FlowGraphIsNaNBlock",w)}_polymorphicIsNan(w){if((0,V.u)(w,!0))return isNaN((0,V.q)(w));throw new Error(`Cannot get NaN of ${w}`)}}(0,P.g)("FlowGraphIsNaNBlock",X);class b extends l.d{constructor(w){super(h.c,h.g,(w=>this._polymorphicIsInf(w)),"FlowGraphIsInfBlock",w)}_polymorphicIsInf(w){if((0,V.u)(w))return!isFinite((0,V.q)(w));throw new Error(`Cannot get isInf of ${w}`)}}(0,P.g)("FlowGraphIsInfBlock",b);class A extends l.d{constructor(w){super(h.c,h.c,(w=>this._polymorphicDegToRad(w)),"FlowGraphDegToRadBlock",w)}_degToRad(w){return w*Math.PI/180}_polymorphicDegToRad(w){return W(w,this._degToRad)}}(0,P.g)("FlowGraphDegToRadBlock",A);class ww extends l.d{constructor(w){super(h.c,h.c,(w=>this._polymorphicRadToDeg(w)),"FlowGraphRadToDegBlock",w)}_radToDeg(w){return 180*w/Math.PI}_polymorphicRadToDeg(w){return W(w,this._radToDeg)}}(0,P.g)("FlowGraphRadToDegBlock",ww);class Ew extends l.d{constructor(w){super(h.r,h.r,(w=>this._polymorphicSin(w)),"FlowGraphSinBlock",w)}_polymorphicSin(w){return W(w,Math.sin)}}class Gw extends l.d{constructor(w){super(h.r,h.r,(w=>this._polymorphicCos(w)),"FlowGraphCosBlock",w)}_polymorphicCos(w){return W(w,Math.cos)}}class Pw extends l.d{constructor(w){super(h.r,h.r,(w=>this._polymorphicTan(w)),"FlowGraphTanBlock",w)}_polymorphicTan(w){return W(w,Math.tan)}}class hw extends l.d{constructor(w){super(h.r,h.r,(w=>this._polymorphicAsin(w)),"FlowGraphASinBlock",w)}_polymorphicAsin(w){return W(w,Math.asin)}}(0,P.g)("FlowGraphASinBlock",hw);class Bw extends l.d{constructor(w){super(h.r,h.r,(w=>this._polymorphicAcos(w)),"FlowGraphACosBlock",w)}_polymorphicAcos(w){return W(w,Math.acos)}}(0,P.g)("FlowGraphACosBlock",Bw);class yw extends l.d{constructor(w){super(h.r,h.r,(w=>this._polymorphicAtan(w)),"FlowGraphATanBlock",w)}_polymorphicAtan(w){return W(w,Math.atan)}}(0,P.g)("FlowGraphATanBlock",yw);class xw extends B.c{constructor(w){super(h.c,h.c,h.c,((w,E)=>this._polymorphicAtan2(w,E)),"FlowGraphATan2Block",w)}_polymorphicAtan2(w,E){return v(w,E,Math.atan2)}}(0,P.g)("FlowGraphATan2Block",xw);class Uw extends l.d{constructor(w){super(h.c,h.c,(w=>this._polymorphicSinh(w)),"FlowGraphSinhBlock",w)}_polymorphicSinh(w){return W(w,Math.sinh)}}(0,P.g)("FlowGraphSinhBlock",Uw);class lw extends l.d{constructor(w){super(h.c,h.c,(w=>this._polymorphicCosh(w)),"FlowGraphCoshBlock",w)}_polymorphicCosh(w){return W(w,Math.cosh)}}(0,P.g)("FlowGraphCoshBlock",lw);class iw extends l.d{constructor(w){super(h.c,h.c,(w=>this._polymorphicTanh(w)),"FlowGraphTanhBlock",w)}_polymorphicTanh(w){return W(w,Math.tanh)}}(0,P.g)("FlowGraphTanhBlock",iw);class Ow extends l.d{constructor(w){super(h.c,h.r,(w=>this._polymorphicAsinh(w)),"FlowGraphASinhBlock",w)}_polymorphicAsinh(w){return W(w,Math.asinh)}}(0,P.g)("FlowGraphASinhBlock",Ow);class uw extends l.d{constructor(w){super(h.c,h.r,(w=>this._polymorphicAcosh(w)),"FlowGraphACoshBlock",w)}_polymorphicAcosh(w){return W(w,Math.acosh)}}(0,P.g)("FlowGraphACoshBlock",uw);class Vw extends l.d{constructor(w){super(h.c,h.r,(w=>this._polymorphicAtanh(w)),"FlowGraphATanhBlock",w)}_polymorphicAtanh(w){return W(w,Math.atanh)}}(0,P.g)("FlowGraphATanhBlock",Vw);class aw extends l.d{constructor(w){super(h.c,h.r,(w=>this._polymorphicExp(w)),"FlowGraphExponentialBlock",w)}_polymorphicExp(w){return W(w,Math.exp)}}(0,P.g)("FlowGraphExponentialBlock",aw);class Qw extends l.d{constructor(w){super(h.c,h.r,(w=>this._polymorphicLog(w)),"FlowGraphLogBlock",w)}_polymorphicLog(w){return W(w,Math.log)}}(0,P.g)("FlowGraphLogBlock",Qw);class cw extends l.d{constructor(w){super(h.c,h.r,(w=>this._polymorphicLog2(w)),"FlowGraphLog2Block",w)}_polymorphicLog2(w){return W(w,Math.log2)}}(0,P.g)("FlowGraphLog2Block",cw);class Zw extends l.d{constructor(w){super(h.c,h.r,(w=>this._polymorphicLog10(w)),"FlowGraphLog10Block",w)}_polymorphicLog10(w){return W(w,Math.log10)}}(0,P.g)("FlowGraphLog10Block",Zw);class Jw extends l.d{constructor(w){super(h.c,h.r,(w=>this._polymorphicSqrt(w)),"FlowGraphSquareRootBlock",w)}_polymorphicSqrt(w){return W(w,Math.sqrt)}}(0,P.g)("FlowGraphSquareRootBlock",Jw);class dw extends l.d{constructor(w){super(h.c,h.r,(w=>this._polymorphicCubeRoot(w)),"FlowGraphCubeRootBlock",w)}_polymorphicCubeRoot(w){return W(w,Math.cbrt)}}(0,P.g)("FlowGraphCubeRootBlock",dw);class Kw extends B.c{constructor(w){super(h.c,h.r,h.r,((w,E)=>this._polymorphicPow(w,E)),"FlowGraphPowerBlock",w)}_polymorphicPow(w,E){return v(w,E,Math.pow)}}(0,P.g)("FlowGraphPowerBlock",Kw);class tw extends l.d{constructor(w){super((0,h.K)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,h.K)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(w=>"boolean"===typeof w?!w:"number"===typeof w?~w:new O.d(~w.value)),"FlowGraphBitwiseNotBlock",w)}}(0,P.g)("FlowGraphBitwiseNotBlock",tw);class qw extends B.c{constructor(w){super((0,h.K)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,h.K)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,h.K)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),((w,E)=>{if("boolean"===typeof w&&"boolean"===typeof E)return w&&E;if("number"===typeof w&&"number"===typeof E)return w&E;if("object"===typeof w&&"object"===typeof E)return new O.d(w.value&E.value);throw new Error(`Cannot perform bitwise AND on ${w} and ${E}`)}),"FlowGraphBitwiseAndBlock",w)}}(0,P.g)("FlowGraphBitwiseAndBlock",qw);class Ww extends B.c{constructor(w){super((0,h.K)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,h.K)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,h.K)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),((w,E)=>{if("boolean"===typeof w&&"boolean"===typeof E)return w||E;if("number"===typeof w&&"number"===typeof E)return w|E;if("object"===typeof w&&"object"===typeof E)return new O.d(w.value|E.value);throw new Error(`Cannot perform bitwise OR on ${w} and ${E}`)}),"FlowGraphBitwiseOrBlock",w)}}(0,P.g)("FlowGraphBitwiseOrBlock",Ww);class Tw extends B.c{constructor(w){super((0,h.K)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,h.K)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,h.K)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),((w,E)=>{if("boolean"===typeof w&&"boolean"===typeof E)return w!==E;if("number"===typeof w&&"number"===typeof E)return w^E;if("object"===typeof w&&"object"===typeof E)return new O.d(w.value^E.value);throw new Error(`Cannot perform bitwise XOR on ${w} and ${E}`)}),"FlowGraphBitwiseXorBlock",w)}}(0,P.g)("FlowGraphBitwiseXorBlock",Tw);class Iw extends B.c{constructor(w){super(h.h,h.h,h.h,((w,E)=>new O.d(w.value<<E.value)),"FlowGraphBitwiseLeftShiftBlock",w)}}(0,P.g)("FlowGraphBitwiseLeftShiftBlock",Iw);class jw extends B.c{constructor(w){super(h.h,h.h,h.h,((w,E)=>new O.d(w.value>>E.value)),"FlowGraphBitwiseRightShiftBlock",w)}}(0,P.g)("FlowGraphBitwiseRightShiftBlock",jw);class gw extends l.d{constructor(w){super(h.h,h.h,(w=>new O.d(Math.clz32(w.value))),"FlowGraphLeadingZerosBlock",w)}}(0,P.g)("FlowGraphLeadingZerosBlock",gw);class ow extends l.d{constructor(w){super(h.h,h.h,(w=>new O.d(w.value?31-Math.clz32(w.value&-w.value):32)),"FlowGraphTrailingZerosBlock",w)}}(0,P.g)("FlowGraphTrailingZerosBlock",ow);class fw extends l.d{constructor(w){super(h.h,h.h,(w=>new O.d(function(w){let E=0;for(;w;)E+=1&w,w>>=1;return E}(w.value))),"FlowGraphOneBitsCounterBlock",w)}}(0,P.g)("FlowGraphOneBitsCounterBlock",fw)},14769:(w,E,G)=>{G.d(E,{c:()=>h});var P=G(14776);class h extends P.e{constructor(w,E,G,P,h,B){super(G,B),this._operation=P,this._className=h,this.a=this.registerDataInput("a",w),this.b=this.registerDataInput("b",E)}_doOperation(w){const E=this.a.getValue(w),G=this.b.getValue(w);return this._operation(E,G)}getClassName(){return this._className}}},14776:(w,E,G)=>{G.d(E,{e:()=>x});var P=G(13298),h=G(13281);const B="cachedOperationValue",y="cachedExecutionId";class x extends P.d{constructor(w,E){super(E),this.value=this.registerDataOutput("value",w),this.isValid=this.registerDataOutput("isValid",h.g)}_updateOutputs(w){const E=w._getExecutionVariable(this,y,-1),G=w._getExecutionVariable(this,B,null);if(void 0!==G&&null!==G&&E===w.executionId)this.isValid.setValue(!0,w),this.value.setValue(G,w);else try{const E=this._doOperation(w);if(void 0===E||null===E)return void this.isValid.setValue(!1,w);w._setExecutionVariable(this,B,E),w._setExecutionVariable(this,y,w.executionId),this.value.setValue(E,w),this.isValid.setValue(!0,w)}catch(P){this.isValid.setValue(!1,w)}}}},14780:(w,E,G)=>{G.d(E,{d:()=>h});var P=G(14776);class h extends P.e{constructor(w,E,G,P,h){super(E,h),this._operation=G,this._className=P,this.a=this.registerDataInput("a",w)}_doOperation(w){return this._operation(this.a.getValue(w))}getClassName(){return this._className}}}}]);