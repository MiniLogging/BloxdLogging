"use strict";(self.vb3rpbgyozo=self.vb3rpbgyozo||[]).push([[88],{15992:(q,I,l)=>{l.r(I),l.d(I,{FlowGraphAbsBlock:()=>e,FlowGraphAcosBlock:()=>Oq,FlowGraphAcoshBlock:()=>xq,FlowGraphAddBlock:()=>d,FlowGraphAsinBlock:()=>tq,FlowGraphAsinhBlock:()=>rq,FlowGraphAtan2Block:()=>aq,FlowGraphAtanBlock:()=>cq,FlowGraphAtanhBlock:()=>oq,FlowGraphBitwiseAndBlock:()=>Rq,FlowGraphBitwiseLeftShiftBlock:()=>iq,FlowGraphBitwiseNotBlock:()=>Cq,FlowGraphBitwiseOrBlock:()=>Wq,FlowGraphBitwiseRightShiftBlock:()=>Sq,FlowGraphBitwiseXorBlock:()=>eq,FlowGraphCeilBlock:()=>p,FlowGraphClampBlock:()=>h,FlowGraphCosBlock:()=>lq,FlowGraphCoshBlock:()=>sq,FlowGraphCubeRootBlock:()=>vq,FlowGraphDegToRadBlock:()=>b,FlowGraphDivideBlock:()=>U,FlowGraphEBlock:()=>v,FlowGraphEqualityBlock:()=>y,FlowGraphExpBlock:()=>dq,FlowGraphFloorBlock:()=>g,FlowGraphFractionBlock:()=>K,FlowGraphGreaterThanBlock:()=>z,FlowGraphGreaterThanOrEqualBlock:()=>H,FlowGraphInfBlock:()=>C,FlowGraphIsInfinityBlock:()=>Q,FlowGraphIsNanBlock:()=>A,FlowGraphLeadingZerosBlock:()=>gq,FlowGraphLessThanBlock:()=>N,FlowGraphLessThanOrEqualBlock:()=>J,FlowGraphLog10Block:()=>Uq,FlowGraphLog2Block:()=>Vq,FlowGraphLogBlock:()=>Tq,FlowGraphMathInterpolationBlock:()=>Y,FlowGraphMaxBlock:()=>L,FlowGraphMinBlock:()=>f,FlowGraphModuloBlock:()=>n,FlowGraphMultiplyBlock:()=>V,FlowGraphNaNBlock:()=>R,FlowGraphNegationBlock:()=>D,FlowGraphOneBitsCounterBlock:()=>Xq,FlowGraphPiBlock:()=>k,FlowGraphPowerBlock:()=>kq,FlowGraphRadToDegBlock:()=>qq,FlowGraphRandomBlock:()=>B,FlowGraphRoundBlock:()=>X,FlowGraphSaturateBlock:()=>P,FlowGraphSignBlock:()=>i,FlowGraphSinBlock:()=>Iq,FlowGraphSinhBlock:()=>Fq,FlowGraphSquareRootBlock:()=>Bq,FlowGraphSubtractBlock:()=>T,FlowGraphTanBlock:()=>wq,FlowGraphTanhBlock:()=>Zq,FlowGraphTrailingZerosBlock:()=>pq,FlowGraphTruncBlock:()=>S});var w=l(12711),t=l(14441),O=l(16001),c=l(16008);class a extends c.d{constructor(q,I,l,w){super(q,w),this._operation=I,this._className=l}_doOperation(q){return this._operation(q)}getClassName(){return this._className}}var F=l(12747),s=l(16010);class Z extends c.d{constructor(q,I,l,w,t,O,c){super(w,c),this._operation=t,this._className=O,this.a=this.registerDataInput("a",q),this.b=this.registerDataInput("b",I),this.c=this.registerDataInput("c",l)}_doOperation(q){return this._operation(this.a.getValue(q),this.b.getValue(q),this.c.getValue(q))}getClassName(){return this._className}}var r=l(14437),x=l(14443),o=l(14473);class d extends O.e{constructor(q){super((0,t.P)(null===q||void 0===q?void 0:q.type),(0,t.P)(null===q||void 0===q?void 0:q.type),(0,t.P)(null===q||void 0===q?void 0:q.type),((q,I)=>this._polymorphicAdd(q,I)),"FlowGraphAddBlock",q)}_polymorphicAdd(q,I){const l=(0,o.n)(q),w=(0,o.n)(I);if((0,o.k)(l,w)||(0,o.i)(l,w)||(0,o.e)(l,w))return q.add(I);if("Quaternion"===l||"Vector4"===w)return new F.Vector4(q.x,q.y,q.z,q.w).addInPlace(I);if("Vector4"===l||"Quaternion"===w)return q.add(I);var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof q!==typeof I)throw new Error("Cannot add different types of numbers.");return(0,o.s)(q)+(0,o.s)(I)}}(0,w.e)("FlowGraphAddBlock",d);class T extends O.e{constructor(q){super((0,t.P)(null===q||void 0===q?void 0:q.type),(0,t.P)(null===q||void 0===q?void 0:q.type),(0,t.P)(null===q||void 0===q?void 0:q.type),((q,I)=>this._polymorphicSubtract(q,I)),"FlowGraphSubtractBlock",q)}_polymorphicSubtract(q,I){const l=(0,o.n)(q),w=(0,o.n)(I);if((0,o.k)(l,w)||(0,o.e)(l,w)||(0,o.i)(l,w))return q.TI(I);if("Quaternion"===l||"Vector4"===w)return new F.Vector4(q.x,q.y,q.z,q.w).Sr(I);if("Vector4"===l||"Quaternion"===w)return q.TI(I);var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof q!==typeof I)throw new Error("Cannot add different types of numbers.");return(0,o.s)(q)-(0,o.s)(I)}}(0,w.e)("FlowGraphSubtractBlock",T);class V extends O.e{constructor(q){super((0,t.P)(null===q||void 0===q?void 0:q.type),(0,t.P)(null===q||void 0===q?void 0:q.type),(0,t.P)(null===q||void 0===q?void 0:q.type),((q,I)=>this._polymorphicMultiply(q,I)),"FlowGraphMultiplyBlock",q)}_polymorphicMultiply(q,I){const l=(0,o.n)(q),w=(0,o.n)(I);if((0,o.k)(l,w)||(0,o.e)(l,w))return q.multiply(I);if("Quaternion"===l||"Vector4"===w)return new F.Vector4(q.x,q.y,q.z,q.w).multiplyInPlace(I);if("Vector4"===l||"Quaternion"===w)return q.multiply(I);if((0,o.i)(l,w)){var t;if(null!==(t=this.config)&&void 0!==t&&t.useMatrixPerComponent){const w=q.m;for(let q=0;q<w.length;q++)w[q]*=I.m[q];return"Matrix2D"===l?new x.b(w):"Matrix3D"===l?new x.f(w):F.Matrix.vI(w)}return I.multiply(q)}var O;if(null!==(O=this.config)&&void 0!==O&&O.preventIntegerFloatArithmetic&&typeof q!==typeof I)throw new Error("Cannot add different types of numbers.");return(0,o.s)(q)*(0,o.s)(I)}}(0,w.e)("FlowGraphMultiplyBlock",V);class U extends O.e{constructor(q){super((0,t.P)(null===q||void 0===q?void 0:q.type),(0,t.P)(null===q||void 0===q?void 0:q.type),(0,t.P)(null===q||void 0===q?void 0:q.type),((q,I)=>this._polymorphicDivide(q,I)),"FlowGraphDivideBlock",q)}_polymorphicDivide(q,I){const l=(0,o.n)(q),w=(0,o.n)(I);if((0,o.k)(l,w)||(0,o.e)(l,w))return q.divide(I);if("Quaternion"===l||"Quaternion"===w){const l=q.clone();return l.x/=I.x,l.y/=I.y,l.z/=I.z,l.w/=I.w,l}if("Quaternion"===l||"Vector4"===w)return new F.Vector4(q.x,q.y,q.z,q.w).divideInPlace(I);if("Vector4"===l||"Quaternion"===w)return q.divide(I);if((0,o.i)(l,w)){var t;if(null!==(t=this.config)&&void 0!==t&&t.useMatrixPerComponent){const w=q.m;for(let q=0;q<w.length;q++)w[q]/=I.m[q];return"Matrix2D"===l?new x.b(w):"Matrix3D"===l?new x.f(w):F.Matrix.vI(w)}return q.divide(I)}var O;if(null!==(O=this.config)&&void 0!==O&&O.preventIntegerFloatArithmetic&&typeof q!==typeof I)throw new Error("Cannot add different types of numbers.");return(0,o.s)(q)/(0,o.s)(I)}}(0,w.e)("FlowGraphDivideBlock",U);class B extends a{constructor(q){super(t.v,(q=>this._random(q)),"FlowGraphRandomBlock",q),this.min=this.registerDataInput("min",t.v,(null===q||void 0===q?void 0:q.min)??0),this.max=this.registerDataInput("max",t.v,(null===q||void 0===q?void 0:q.max)??1),null!==q&&void 0!==q&&q.seed&&(this._seed=q.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const q=1e4*Math.sin(this._seed++);return q-Math.floor(q)}return Math.random()}_random(q){const I=this.min.getValue(q),l=this.max.getValue(q);return this._getRandomValue()*(l-I)+I}}(0,w.e)("FlowGraphRandomBlock",B);class v extends a{constructor(q){super(t.v,(()=>Math.E),"FlowGraphEBlock",q)}}(0,w.e)("FlowGraphEBlock",v);class k extends a{constructor(q){super(t.v,(()=>Math.PI),"FlowGraphPIBlock",q)}}(0,w.e)("FlowGraphPIBlock",k);class C extends a{constructor(q){super(t.v,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",q)}}(0,w.e)("FlowGraphInfBlock",C);class R extends a{constructor(q){super(t.v,(()=>Number.NaN),"FlowGraphNaNBlock",q)}}function W(q,I){switch((0,o.n)(q)){case"FlowGraphInteger":return new r.d(I(q.value));case"Vector2":return new F.Vector2(I(q.x),I(q.y));case"dI":return new F.dI(I(q.x),I(q.y),I(q.z));case"Vector4":return new F.Vector4(I(q.x),I(q.y),I(q.z),I(q.w));case"Quaternion":return new F.Quaternion(I(q.x),I(q.y),I(q.z),I(q.w));case"Matrix":return F.Matrix.vI(q.m.map(I));case"Matrix2D":return new x.b(q.m.map(I));case"Matrix3D":return new x.f(q.m.map(I));default:return I(q)}}(0,w.e)("FlowGraphNaNBlock",R);class e extends s.d{constructor(q){super(t.v,t.v,(q=>this._polymorphicAbs(q)),"FlowGraphAbsBlock",q)}_polymorphicAbs(q){return W(q,Math.abs)}}(0,w.e)("FlowGraphAbsBlock",e);class i extends s.d{constructor(q){super(t.v,t.v,(q=>this._polymorphicSign(q)),"FlowGraphSignBlock",q)}_polymorphicSign(q){return W(q,Math.sign)}}(0,w.e)("FlowGraphSignBlock",i);class S extends s.d{constructor(q){super(t.v,t.v,(q=>this._polymorphicTrunc(q)),"FlowGraphTruncBlock",q)}_polymorphicTrunc(q){return W(q,Math.trunc)}}(0,w.e)("FlowGraphTruncBlock",S);class g extends s.d{constructor(q){super(t.v,t.v,(q=>this._polymorphicFloor(q)),"FlowGraphFloorBlock",q)}_polymorphicFloor(q){return W(q,Math.floor)}}(0,w.e)("FlowGraphFloorBlock",g);class p extends s.d{constructor(q){super(t.e,t.e,(q=>this._polymorphicCeiling(q)),"FlowGraphCeilBlock",q)}_polymorphicCeiling(q){return W(q,Math.ceil)}}(0,w.e)("FlowGraphCeilBlock",p);class X extends s.d{constructor(q){super(t.e,t.e,(q=>this._polymorphicRound(q)),"FlowGraphRoundBlock",q)}_polymorphicRound(q){return W(q,(q=>{var I;return q<0&&null!==(I=this.config)&&void 0!==I&&I.roundHalfAwayFromZero?-Math.round(-q):Math.round(q)}))}}(0,w.e)("FlowGraphRoundBlock",X);class K extends s.d{constructor(q){super(t.e,t.e,(q=>this._polymorphicFraction(q)),"FlowGraphFractBlock",q)}_polymorphicFraction(q){return W(q,(q=>q-Math.floor(q)))}}(0,w.e)("FlowGraphFractBlock",K);class D extends s.d{constructor(q){super(t.e,t.e,(q=>this._polymorphicNeg(q)),"FlowGraphNegationBlock",q)}_polymorphicNeg(q){return W(q,(q=>-q))}}function M(q,I,l){switch((0,o.n)(q)){case"FlowGraphInteger":return new r.d(l(q.value,I.value));case"Vector2":return new F.Vector2(l(q.x,I.x),l(q.y,I.y));case"dI":return new F.dI(l(q.x,I.x),l(q.y,I.y),l(q.z,I.z));case"Vector4":return new F.Vector4(l(q.x,I.x),l(q.y,I.y),l(q.z,I.z),l(q.w,I.w));case"Quaternion":return new F.Quaternion(l(q.x,I.x),l(q.y,I.y),l(q.z,I.z),l(q.w,I.w));case"Matrix":return F.Matrix.vI(q.m.map(((q,w)=>l(q,I.m[w]))));case"Matrix2D":return new x.b(q.m.map(((q,w)=>l(q,I.m[w]))));case"Matrix3D":return new x.f(q.m.map(((q,w)=>l(q,I.m[w]))));default:return l((0,o.s)(q),(0,o.s)(I))}}(0,w.e)("FlowGraphNegationBlock",D);class n extends O.e{constructor(q){super(t.e,t.e,t.e,((q,I)=>this._polymorphicRemainder(q,I)),"FlowGraphModuloBlock",q)}_polymorphicRemainder(q,I){return M(q,I,((q,I)=>q%I))}}(0,w.e)("FlowGraphModuloBlock",n);class f extends O.e{constructor(q){super(t.e,t.e,t.e,((q,I)=>this._polymorphicMin(q,I)),"FlowGraphMinBlock",q)}_polymorphicMin(q,I){return M(q,I,Math.min)}}(0,w.e)("FlowGraphMinBlock",f);class L extends O.e{constructor(q){super(t.e,t.e,t.e,((q,I)=>this._polymorphicMax(q,I)),"FlowGraphMaxBlock",q)}_polymorphicMax(q,I){return M(q,I,Math.max)}}function E(q,I,l){return Math.min(Math.max(q,Math.min(I,l)),Math.max(I,l))}function j(q,I,l,w){switch((0,o.n)(q)){case"FlowGraphInteger":return new r.d(w(q.value,I.value,l.value));case"Vector2":return new F.Vector2(w(q.x,I.x,l.x),w(q.y,I.y,l.y));case"dI":return new F.dI(w(q.x,I.x,l.x),w(q.y,I.y,l.y),w(q.z,I.z,l.z));case"Vector4":return new F.Vector4(w(q.x,I.x,l.x),w(q.y,I.y,l.y),w(q.z,I.z,l.z),w(q.w,I.w,l.w));case"Quaternion":return new F.Quaternion(w(q.x,I.x,l.x),w(q.y,I.y,l.y),w(q.z,I.z,l.z),w(q.w,I.w,l.w));case"Matrix":return F.Matrix.vI(q.m.map(((q,t)=>w(q,I.m[t],l.m[t]))));case"Matrix2D":return new x.b(q.m.map(((q,t)=>w(q,I.m[t],l.m[t]))));case"Matrix3D":return new x.f(q.m.map(((q,t)=>w(q,I.m[t],l.m[t]))));default:return w((0,o.s)(q),(0,o.s)(I),(0,o.s)(l))}}(0,w.e)("FlowGraphMaxBlock",L);class h extends Z{constructor(q){super(t.e,t.e,t.e,t.e,((q,I,l)=>this._polymorphicClamp(q,I,l)),"FlowGraphClampBlock",q)}_polymorphicClamp(q,I,l){return j(q,I,l,E)}}function u(q){return Math.min(Math.max(q,0),1)}(0,w.e)("FlowGraphClampBlock",h);class P extends s.d{constructor(q){super(t.e,t.e,(q=>this._polymorphicSaturate(q)),"FlowGraphSaturateBlock",q)}_polymorphicSaturate(q){return W(q,u)}}function mq(q,I,l){return(1-l)*q+l*I}(0,w.e)("FlowGraphSaturateBlock",P);class Y extends Z{constructor(q){super(t.e,t.e,t.e,t.e,((q,I,l)=>this._polymorphicInterpolate(q,I,l)),"FlowGraphMathInterpolationBlock",q)}_polymorphicInterpolate(q,I,l){return j(q,I,l,mq)}}(0,w.e)("FlowGraphMathInterpolationBlock",Y);class y extends O.e{constructor(q){super(t.e,t.e,t.g,((q,I)=>this._polymorphicEq(q,I)),"FlowGraphEqualityBlock",q)}_polymorphicEq(q,I){const l=(0,o.n)(q),w=(0,o.n)(I);return typeof q===typeof I&&((0,o.k)(l,w)||(0,o.i)(l,w)||(0,o.e)(l,w)?q.equals(I):q===I)}}function G(q,I,l){if((0,o.w)(q)&&(0,o.w)(I))return l((0,o.s)(q),(0,o.s)(I));throw new Error(`Cannot compare ${q} and ${I}`)}(0,w.e)("FlowGraphEqualityBlock",y);class N extends O.e{constructor(q){super(t.e,t.e,t.g,((q,I)=>this._polymorphicLessThan(q,I)),"FlowGraphLessThanBlock",q)}_polymorphicLessThan(q,I){return G(q,I,((q,I)=>q<I))}}(0,w.e)("FlowGraphLessThanBlock",N);class J extends O.e{constructor(q){super(t.e,t.e,t.g,((q,I)=>this._polymorphicLessThanOrEqual(q,I)),"FlowGraphLessThanOrEqualBlock",q)}_polymorphicLessThanOrEqual(q,I){return G(q,I,((q,I)=>q<=I))}}(0,w.e)("FlowGraphLessThanOrEqualBlock",J);class z extends O.e{constructor(q){super(t.e,t.e,t.g,((q,I)=>this._polymorphicGreaterThan(q,I)),"FlowGraphGreaterThanBlock",q)}_polymorphicGreaterThan(q,I){return G(q,I,((q,I)=>q>I))}}(0,w.e)("FlowGraphGreaterThanBlock",z);class H extends O.e{constructor(q){super(t.e,t.e,t.g,((q,I)=>this._polymorphicGreaterThanOrEqual(q,I)),"FlowGraphGreaterThanOrEqualBlock",q)}_polymorphicGreaterThanOrEqual(q,I){return G(q,I,((q,I)=>q>=I))}}(0,w.e)("FlowGraphGreaterThanOrEqualBlock",H);class A extends s.d{constructor(q){super(t.e,t.g,(q=>this._polymorphicIsNan(q)),"FlowGraphIsNaNBlock",q)}_polymorphicIsNan(q){if((0,o.w)(q,!0))return isNaN((0,o.s)(q));throw new Error(`Cannot get NaN of ${q}`)}}(0,w.e)("FlowGraphIsNaNBlock",A);class Q extends s.d{constructor(q){super(t.e,t.g,(q=>this._polymorphicIsInf(q)),"FlowGraphIsInfBlock",q)}_polymorphicIsInf(q){if((0,o.w)(q))return!isFinite((0,o.s)(q));throw new Error(`Cannot get isInf of ${q}`)}}(0,w.e)("FlowGraphIsInfBlock",Q);class b extends s.d{constructor(q){super(t.e,t.e,(q=>this._polymorphicDegToRad(q)),"FlowGraphDegToRadBlock",q)}_degToRad(q){return q*Math.PI/180}_polymorphicDegToRad(q){return W(q,this._degToRad)}}(0,w.e)("FlowGraphDegToRadBlock",b);class qq extends s.d{constructor(q){super(t.e,t.e,(q=>this._polymorphicRadToDeg(q)),"FlowGraphRadToDegBlock",q)}_radToDeg(q){return 180*q/Math.PI}_polymorphicRadToDeg(q){return W(q,this._radToDeg)}}(0,w.e)("FlowGraphRadToDegBlock",qq);class Iq extends s.d{constructor(q){super(t.v,t.v,(q=>this._polymorphicSin(q)),"FlowGraphSinBlock",q)}_polymorphicSin(q){return W(q,Math.sin)}}class lq extends s.d{constructor(q){super(t.v,t.v,(q=>this._polymorphicCos(q)),"FlowGraphCosBlock",q)}_polymorphicCos(q){return W(q,Math.cos)}}class wq extends s.d{constructor(q){super(t.v,t.v,(q=>this._polymorphicTan(q)),"FlowGraphTanBlock",q)}_polymorphicTan(q){return W(q,Math.tan)}}class tq extends s.d{constructor(q){super(t.v,t.v,(q=>this._polymorphicAsin(q)),"FlowGraphASinBlock",q)}_polymorphicAsin(q){return W(q,Math.asin)}}(0,w.e)("FlowGraphASinBlock",tq);class Oq extends s.d{constructor(q){super(t.v,t.v,(q=>this._polymorphicAcos(q)),"FlowGraphACosBlock",q)}_polymorphicAcos(q){return W(q,Math.acos)}}(0,w.e)("FlowGraphACosBlock",Oq);class cq extends s.d{constructor(q){super(t.v,t.v,(q=>this._polymorphicAtan(q)),"FlowGraphATanBlock",q)}_polymorphicAtan(q){return W(q,Math.atan)}}(0,w.e)("FlowGraphATanBlock",cq);class aq extends O.e{constructor(q){super(t.e,t.e,t.e,((q,I)=>this._polymorphicAtan2(q,I)),"FlowGraphATan2Block",q)}_polymorphicAtan2(q,I){return M(q,I,Math.atan2)}}(0,w.e)("FlowGraphATan2Block",aq);class Fq extends s.d{constructor(q){super(t.e,t.e,(q=>this._polymorphicSinh(q)),"FlowGraphSinhBlock",q)}_polymorphicSinh(q){return W(q,Math.sinh)}}(0,w.e)("FlowGraphSinhBlock",Fq);class sq extends s.d{constructor(q){super(t.e,t.e,(q=>this._polymorphicCosh(q)),"FlowGraphCoshBlock",q)}_polymorphicCosh(q){return W(q,Math.cosh)}}(0,w.e)("FlowGraphCoshBlock",sq);class Zq extends s.d{constructor(q){super(t.e,t.e,(q=>this._polymorphicTanh(q)),"FlowGraphTanhBlock",q)}_polymorphicTanh(q){return W(q,Math.tanh)}}(0,w.e)("FlowGraphTanhBlock",Zq);class rq extends s.d{constructor(q){super(t.e,t.v,(q=>this._polymorphicAsinh(q)),"FlowGraphASinhBlock",q)}_polymorphicAsinh(q){return W(q,Math.asinh)}}(0,w.e)("FlowGraphASinhBlock",rq);class xq extends s.d{constructor(q){super(t.e,t.v,(q=>this._polymorphicAcosh(q)),"FlowGraphACoshBlock",q)}_polymorphicAcosh(q){return W(q,Math.acosh)}}(0,w.e)("FlowGraphACoshBlock",xq);class oq extends s.d{constructor(q){super(t.e,t.v,(q=>this._polymorphicAtanh(q)),"FlowGraphATanhBlock",q)}_polymorphicAtanh(q){return W(q,Math.atanh)}}(0,w.e)("FlowGraphATanhBlock",oq);class dq extends s.d{constructor(q){super(t.e,t.v,(q=>this._polymorphicExp(q)),"FlowGraphExponentialBlock",q)}_polymorphicExp(q){return W(q,Math.exp)}}(0,w.e)("FlowGraphExponentialBlock",dq);class Tq extends s.d{constructor(q){super(t.e,t.v,(q=>this._polymorphicLog(q)),"FlowGraphLogBlock",q)}_polymorphicLog(q){return W(q,Math.log)}}(0,w.e)("FlowGraphLogBlock",Tq);class Vq extends s.d{constructor(q){super(t.e,t.v,(q=>this._polymorphicLog2(q)),"FlowGraphLog2Block",q)}_polymorphicLog2(q){return W(q,Math.log2)}}(0,w.e)("FlowGraphLog2Block",Vq);class Uq extends s.d{constructor(q){super(t.e,t.v,(q=>this._polymorphicLog10(q)),"FlowGraphLog10Block",q)}_polymorphicLog10(q){return W(q,Math.log10)}}(0,w.e)("FlowGraphLog10Block",Uq);class Bq extends s.d{constructor(q){super(t.e,t.v,(q=>this._polymorphicSqrt(q)),"FlowGraphSquareRootBlock",q)}_polymorphicSqrt(q){return W(q,Math.sqrt)}}(0,w.e)("FlowGraphSquareRootBlock",Bq);class vq extends s.d{constructor(q){super(t.e,t.v,(q=>this._polymorphicCubeRoot(q)),"FlowGraphCubeRootBlock",q)}_polymorphicCubeRoot(q){return W(q,Math.cbrt)}}(0,w.e)("FlowGraphCubeRootBlock",vq);class kq extends O.e{constructor(q){super(t.e,t.v,t.v,((q,I)=>this._polymorphicPow(q,I)),"FlowGraphPowerBlock",q)}_polymorphicPow(q,I){return M(q,I,Math.pow)}}(0,w.e)("FlowGraphPowerBlock",kq);class Cq extends s.d{constructor(q){super((0,t.P)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,t.P)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(q=>"boolean"===typeof q?!q:"number"===typeof q?~q:new r.d(~q.value)),"FlowGraphBitwiseNotBlock",q)}}(0,w.e)("FlowGraphBitwiseNotBlock",Cq);class Rq extends O.e{constructor(q){super((0,t.P)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,t.P)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,t.P)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),((q,I)=>{if("boolean"===typeof q&&"boolean"===typeof I)return q&&I;if("number"===typeof q&&"number"===typeof I)return q&I;if("object"===typeof q&&"object"===typeof I)return new r.d(q.value&I.value);throw new Error(`Cannot perform bitwise AND on ${q} and ${I}`)}),"FlowGraphBitwiseAndBlock",q)}}(0,w.e)("FlowGraphBitwiseAndBlock",Rq);class Wq extends O.e{constructor(q){super((0,t.P)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,t.P)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,t.P)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),((q,I)=>{if("boolean"===typeof q&&"boolean"===typeof I)return q||I;if("number"===typeof q&&"number"===typeof I)return q|I;if("object"===typeof q&&"object"===typeof I)return new r.d(q.value|I.value);throw new Error(`Cannot perform bitwise OR on ${q} and ${I}`)}),"FlowGraphBitwiseOrBlock",q)}}(0,w.e)("FlowGraphBitwiseOrBlock",Wq);class eq extends O.e{constructor(q){super((0,t.P)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,t.P)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,t.P)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),((q,I)=>{if("boolean"===typeof q&&"boolean"===typeof I)return q!==I;if("number"===typeof q&&"number"===typeof I)return q^I;if("object"===typeof q&&"object"===typeof I)return new r.d(q.value^I.value);throw new Error(`Cannot perform bitwise XOR on ${q} and ${I}`)}),"FlowGraphBitwiseXorBlock",q)}}(0,w.e)("FlowGraphBitwiseXorBlock",eq);class iq extends O.e{constructor(q){super(t.k,t.k,t.k,((q,I)=>new r.d(q.value<<I.value)),"FlowGraphBitwiseLeftShiftBlock",q)}}(0,w.e)("FlowGraphBitwiseLeftShiftBlock",iq);class Sq extends O.e{constructor(q){super(t.k,t.k,t.k,((q,I)=>new r.d(q.value>>I.value)),"FlowGraphBitwiseRightShiftBlock",q)}}(0,w.e)("FlowGraphBitwiseRightShiftBlock",Sq);class gq extends s.d{constructor(q){super(t.k,t.k,(q=>new r.d(Math.clz32(q.value))),"FlowGraphLeadingZerosBlock",q)}}(0,w.e)("FlowGraphLeadingZerosBlock",gq);class pq extends s.d{constructor(q){super(t.k,t.k,(q=>new r.d(q.value?31-Math.clz32(q.value&-q.value):32)),"FlowGraphTrailingZerosBlock",q)}}(0,w.e)("FlowGraphTrailingZerosBlock",pq);class Xq extends s.d{constructor(q){super(t.k,t.k,(q=>new r.d(function(q){let I=0;for(;q;)I+=1&q,q>>=1;return I}(q.value))),"FlowGraphOneBitsCounterBlock",q)}}(0,w.e)("FlowGraphOneBitsCounterBlock",Xq)},16001:(q,I,l)=>{l.d(I,{e:()=>t});var w=l(16008);class t extends w.d{constructor(q,I,l,w,t,O){super(l,O),this._operation=w,this._className=t,this.a=this.registerDataInput("a",q),this.b=this.registerDataInput("b",I)}_doOperation(q){const I=this.a.getValue(q),l=this.b.getValue(q);return this._operation(I,l)}getClassName(){return this._className}}},16008:(q,I,l)=>{l.d(I,{d:()=>a});var w=l(14457),t=l(14441);const O="cachedOperationValue",c="cachedExecutionId";class a extends w.c{constructor(q,I){super(I),this.value=this.registerDataOutput("value",q),this.isValid=this.registerDataOutput("isValid",t.g)}_updateOutputs(q){const I=q._getExecutionVariable(this,c,-1),l=q._getExecutionVariable(this,O,null);if(void 0!==l&&null!==l&&I===q.executionId)this.isValid.setValue(!0,q),this.value.setValue(l,q);else try{const I=this._doOperation(q);if(void 0===I||null===I)return void this.isValid.setValue(!1,q);q._setExecutionVariable(this,O,I),q._setExecutionVariable(this,c,q.executionId),this.value.setValue(I,q),this.isValid.setValue(!0,q)}catch(w){this.isValid.setValue(!1,q)}}}},16010:(q,I,l)=>{l.d(I,{d:()=>t});var w=l(16008);class t extends w.d{constructor(q,I,l,w,t){super(I,t),this._operation=l,this._className=w,this.a=this.registerDataInput("a",q)}_doOperation(q){return this._operation(this.a.getValue(q))}getClassName(){return this._className}}}}]);