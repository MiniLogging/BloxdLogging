"use strict";(self.h6ljd275xwr=self.h6ljd275xwr||[]).push([[88],{14581:(n,y,H)=>{H.r(y),H.d(y,{FlowGraphAbsBlock:()=>c,FlowGraphAcosBlock:()=>hn,FlowGraphAcoshBlock:()=>Un,FlowGraphAddBlock:()=>T,FlowGraphAsinBlock:()=>Gn,FlowGraphAsinhBlock:()=>An,FlowGraphAtan2Block:()=>Bn,FlowGraphAtanBlock:()=>kn,FlowGraphAtanhBlock:()=>Tn,FlowGraphBitwiseAndBlock:()=>fn,FlowGraphBitwiseLeftShiftBlock:()=>En,FlowGraphBitwiseNotBlock:()=>Mn,FlowGraphBitwiseOrBlock:()=>cn,FlowGraphBitwiseRightShiftBlock:()=>Xn,FlowGraphBitwiseXorBlock:()=>pn,FlowGraphCeilBlock:()=>d,FlowGraphClampBlock:()=>N,FlowGraphCosBlock:()=>Hn,FlowGraphCoshBlock:()=>qn,FlowGraphCubeRootBlock:()=>Fn,FlowGraphDegToRadBlock:()=>m,FlowGraphDivideBlock:()=>Q,FlowGraphEBlock:()=>v,FlowGraphEqualityBlock:()=>Z,FlowGraphExpBlock:()=>Wn,FlowGraphFloorBlock:()=>X,FlowGraphFractionBlock:()=>O,FlowGraphGreaterThanBlock:()=>t,FlowGraphGreaterThanOrEqualBlock:()=>u,FlowGraphInfBlock:()=>g,FlowGraphIsInfinityBlock:()=>J,FlowGraphIsNanBlock:()=>L,FlowGraphLeadingZerosBlock:()=>dn,FlowGraphLessThanBlock:()=>P,FlowGraphLessThanOrEqualBlock:()=>x,FlowGraphLog10Block:()=>ln,FlowGraphLog2Block:()=>Qn,FlowGraphLogBlock:()=>zn,FlowGraphMathInterpolationBlock:()=>D,FlowGraphMaxBlock:()=>R,FlowGraphMinBlock:()=>I,FlowGraphModuloBlock:()=>j,FlowGraphMultiplyBlock:()=>z,FlowGraphNaNBlock:()=>M,FlowGraphNegationBlock:()=>e,FlowGraphOneBitsCounterBlock:()=>On,FlowGraphPiBlock:()=>F,FlowGraphPowerBlock:()=>gn,FlowGraphRadToDegBlock:()=>nn,FlowGraphRandomBlock:()=>l,FlowGraphRoundBlock:()=>a,FlowGraphSaturateBlock:()=>K,FlowGraphSignBlock:()=>p,FlowGraphSinBlock:()=>yn,FlowGraphSinhBlock:()=>Vn,FlowGraphSquareRootBlock:()=>vn,FlowGraphSubtractBlock:()=>W,FlowGraphTanBlock:()=>on,FlowGraphTanhBlock:()=>bn,FlowGraphTrailingZerosBlock:()=>an,FlowGraphTruncBlock:()=>E});var o=H(11248),G=H(13117),h=H(14585),k=H(14592);class i extends k.b{constructor(n,y,H,o){super(n,o),this._operation=y,this._className=H}_doOperation(n){return this._operation(n)}getClassName(){return this._className}}var B=H(11288),V=H(14597);class q extends k.b{constructor(n,y,H,o,G,h,k){super(o,k),this._operation=G,this._className=h,this.a=this.registerDataInput("a",n),this.b=this.registerDataInput("b",y),this.c=this.registerDataInput("c",H)}_doOperation(n){return this._operation(this.a.getValue(n),this.b.getValue(n),this.c.getValue(n))}getClassName(){return this._className}}var b=H(13112),A=H(13124),U=H(13152);class T extends h.c{constructor(n){super((0,G.D)(null===n||void 0===n?void 0:n.type),(0,G.D)(null===n||void 0===n?void 0:n.type),(0,G.D)(null===n||void 0===n?void 0:n.type),((n,y)=>this._polymorphicAdd(n,y)),"FlowGraphAddBlock",n)}_polymorphicAdd(n,y){const H=(0,U.l)(n),o=(0,U.l)(y);if((0,U.h)(H,o)||(0,U.e)(H,o)||(0,U.d)(H,o))return n.add(y);if("Quaternion"===H||"Vector4"===o)return new B.Vector4(n.x,n.y,n.z,n.w).addInPlace(y);if("Vector4"===H||"Quaternion"===o)return n.add(y);var G;if(null!==(G=this.config)&&void 0!==G&&G.preventIntegerFloatArithmetic&&typeof n!==typeof y)throw new Error("Cannot add different types of numbers.");return(0,U.s)(n)+(0,U.s)(y)}}(0,o.h)("FlowGraphAddBlock",T);class W extends h.c{constructor(n){super((0,G.D)(null===n||void 0===n?void 0:n.type),(0,G.D)(null===n||void 0===n?void 0:n.type),(0,G.D)(null===n||void 0===n?void 0:n.type),((n,y)=>this._polymorphicSubtract(n,y)),"FlowGraphSubtractBlock",n)}_polymorphicSubtract(n,y){const H=(0,U.l)(n),o=(0,U.l)(y);if((0,U.h)(H,o)||(0,U.d)(H,o)||(0,U.e)(H,o))return n.Qy(y);if("Quaternion"===H||"Vector4"===o)return new B.Vector4(n.x,n.y,n.z,n.w).kb(y);if("Vector4"===H||"Quaternion"===o)return n.Qy(y);var G;if(null!==(G=this.config)&&void 0!==G&&G.preventIntegerFloatArithmetic&&typeof n!==typeof y)throw new Error("Cannot add different types of numbers.");return(0,U.s)(n)-(0,U.s)(y)}}(0,o.h)("FlowGraphSubtractBlock",W);class z extends h.c{constructor(n){super((0,G.D)(null===n||void 0===n?void 0:n.type),(0,G.D)(null===n||void 0===n?void 0:n.type),(0,G.D)(null===n||void 0===n?void 0:n.type),((n,y)=>this._polymorphicMultiply(n,y)),"FlowGraphMultiplyBlock",n)}_polymorphicMultiply(n,y){const H=(0,U.l)(n),o=(0,U.l)(y);if((0,U.h)(H,o)||(0,U.d)(H,o))return n.multiply(y);if("Quaternion"===H||"Vector4"===o)return new B.Vector4(n.x,n.y,n.z,n.w).multiplyInPlace(y);if("Vector4"===H||"Quaternion"===o)return n.multiply(y);if((0,U.e)(H,o)){var G;if(null!==(G=this.config)&&void 0!==G&&G.useMatrixPerComponent){const o=n.m;for(let n=0;n<o.length;n++)o[n]*=y.m[n];return"Matrix2D"===H?new A.e(o):"Matrix3D"===H?new A.i(o):B.Matrix.gy(o)}return y.multiply(n)}var h;if(null!==(h=this.config)&&void 0!==h&&h.preventIntegerFloatArithmetic&&typeof n!==typeof y)throw new Error("Cannot add different types of numbers.");return(0,U.s)(n)*(0,U.s)(y)}}(0,o.h)("FlowGraphMultiplyBlock",z);class Q extends h.c{constructor(n){super((0,G.D)(null===n||void 0===n?void 0:n.type),(0,G.D)(null===n||void 0===n?void 0:n.type),(0,G.D)(null===n||void 0===n?void 0:n.type),((n,y)=>this._polymorphicDivide(n,y)),"FlowGraphDivideBlock",n)}_polymorphicDivide(n,y){const H=(0,U.l)(n),o=(0,U.l)(y);if((0,U.h)(H,o)||(0,U.d)(H,o))return n.divide(y);if("Quaternion"===H||"Quaternion"===o){const H=n.clone();return H.x/=y.x,H.y/=y.y,H.z/=y.z,H.w/=y.w,H}if("Quaternion"===H||"Vector4"===o)return new B.Vector4(n.x,n.y,n.z,n.w).divideInPlace(y);if("Vector4"===H||"Quaternion"===o)return n.divide(y);if((0,U.e)(H,o)){var G;if(null!==(G=this.config)&&void 0!==G&&G.useMatrixPerComponent){const o=n.m;for(let n=0;n<o.length;n++)o[n]/=y.m[n];return"Matrix2D"===H?new A.e(o):"Matrix3D"===H?new A.i(o):B.Matrix.gy(o)}return n.divide(y)}var h;if(null!==(h=this.config)&&void 0!==h&&h.preventIntegerFloatArithmetic&&typeof n!==typeof y)throw new Error("Cannot add different types of numbers.");return(0,U.s)(n)/(0,U.s)(y)}}(0,o.h)("FlowGraphDivideBlock",Q);class l extends i{constructor(n){super(G.p,(n=>this._random(n)),"FlowGraphRandomBlock",n),this.min=this.registerDataInput("min",G.p,(null===n||void 0===n?void 0:n.min)??0),this.max=this.registerDataInput("max",G.p,(null===n||void 0===n?void 0:n.max)??1),null!==n&&void 0!==n&&n.seed&&(this._seed=n.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const n=1e4*Math.sin(this._seed++);return n-Math.floor(n)}return Math.random()}_random(n){const y=this.min.getValue(n),H=this.max.getValue(n);return this._getRandomValue()*(H-y)+y}}(0,o.h)("FlowGraphRandomBlock",l);class v extends i{constructor(n){super(G.p,(()=>Math.E),"FlowGraphEBlock",n)}}(0,o.h)("FlowGraphEBlock",v);class F extends i{constructor(n){super(G.p,(()=>Math.PI),"FlowGraphPIBlock",n)}}(0,o.h)("FlowGraphPIBlock",F);class g extends i{constructor(n){super(G.p,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",n)}}(0,o.h)("FlowGraphInfBlock",g);class M extends i{constructor(n){super(G.p,(()=>Number.NaN),"FlowGraphNaNBlock",n)}}function f(n,y){switch((0,U.l)(n)){case"FlowGraphInteger":return new b.c(y(n.value));case"Vector2":return new B.Vector2(y(n.x),y(n.y));case"zy":return new B.zy(y(n.x),y(n.y),y(n.z));case"Vector4":return new B.Vector4(y(n.x),y(n.y),y(n.z),y(n.w));case"Quaternion":return new B.Quaternion(y(n.x),y(n.y),y(n.z),y(n.w));case"Matrix":return B.Matrix.gy(n.m.map(y));case"Matrix2D":return new A.e(n.m.map(y));case"Matrix3D":return new A.i(n.m.map(y));default:return y(n)}}(0,o.h)("FlowGraphNaNBlock",M);class c extends V.b{constructor(n){super(G.p,G.p,(n=>this._polymorphicAbs(n)),"FlowGraphAbsBlock",n)}_polymorphicAbs(n){return f(n,Math.abs)}}(0,o.h)("FlowGraphAbsBlock",c);class p extends V.b{constructor(n){super(G.p,G.p,(n=>this._polymorphicSign(n)),"FlowGraphSignBlock",n)}_polymorphicSign(n){return f(n,Math.sign)}}(0,o.h)("FlowGraphSignBlock",p);class E extends V.b{constructor(n){super(G.p,G.p,(n=>this._polymorphicTrunc(n)),"FlowGraphTruncBlock",n)}_polymorphicTrunc(n){return f(n,Math.trunc)}}(0,o.h)("FlowGraphTruncBlock",E);class X extends V.b{constructor(n){super(G.p,G.p,(n=>this._polymorphicFloor(n)),"FlowGraphFloorBlock",n)}_polymorphicFloor(n){return f(n,Math.floor)}}(0,o.h)("FlowGraphFloorBlock",X);class d extends V.b{constructor(n){super(G.c,G.c,(n=>this._polymorphicCeiling(n)),"FlowGraphCeilBlock",n)}_polymorphicCeiling(n){return f(n,Math.ceil)}}(0,o.h)("FlowGraphCeilBlock",d);class a extends V.b{constructor(n){super(G.c,G.c,(n=>this._polymorphicRound(n)),"FlowGraphRoundBlock",n)}_polymorphicRound(n){return f(n,(n=>{var y;return n<0&&null!==(y=this.config)&&void 0!==y&&y.roundHalfAwayFromZero?-Math.round(-n):Math.round(n)}))}}(0,o.h)("FlowGraphRoundBlock",a);class O extends V.b{constructor(n){super(G.c,G.c,(n=>this._polymorphicFraction(n)),"FlowGraphFractBlock",n)}_polymorphicFraction(n){return f(n,(n=>n-Math.floor(n)))}}(0,o.h)("FlowGraphFractBlock",O);class e extends V.b{constructor(n){super(G.c,G.c,(n=>this._polymorphicNeg(n)),"FlowGraphNegationBlock",n)}_polymorphicNeg(n){return f(n,(n=>-n))}}function w(n,y,H){switch((0,U.l)(n)){case"FlowGraphInteger":return new b.c(H(n.value,y.value));case"Vector2":return new B.Vector2(H(n.x,y.x),H(n.y,y.y));case"zy":return new B.zy(H(n.x,y.x),H(n.y,y.y),H(n.z,y.z));case"Vector4":return new B.Vector4(H(n.x,y.x),H(n.y,y.y),H(n.z,y.z),H(n.w,y.w));case"Quaternion":return new B.Quaternion(H(n.x,y.x),H(n.y,y.y),H(n.z,y.z),H(n.w,y.w));case"Matrix":return B.Matrix.gy(n.m.map(((n,o)=>H(n,y.m[o]))));case"Matrix2D":return new A.e(n.m.map(((n,o)=>H(n,y.m[o]))));case"Matrix3D":return new A.i(n.m.map(((n,o)=>H(n,y.m[o]))));default:return H((0,U.s)(n),(0,U.s)(y))}}(0,o.h)("FlowGraphNegationBlock",e);class j extends h.c{constructor(n){super(G.c,G.c,G.c,((n,y)=>this._polymorphicRemainder(n,y)),"FlowGraphModuloBlock",n)}_polymorphicRemainder(n,y){return w(n,y,((n,y)=>n%y))}}(0,o.h)("FlowGraphModuloBlock",j);class I extends h.c{constructor(n){super(G.c,G.c,G.c,((n,y)=>this._polymorphicMin(n,y)),"FlowGraphMinBlock",n)}_polymorphicMin(n,y){return w(n,y,Math.min)}}(0,o.h)("FlowGraphMinBlock",I);class R extends h.c{constructor(n){super(G.c,G.c,G.c,((n,y)=>this._polymorphicMax(n,y)),"FlowGraphMaxBlock",n)}_polymorphicMax(n,y){return w(n,y,Math.max)}}function C(n,y,H){return Math.min(Math.max(n,Math.min(y,H)),Math.max(y,H))}function S(n,y,H,o){switch((0,U.l)(n)){case"FlowGraphInteger":return new b.c(o(n.value,y.value,H.value));case"Vector2":return new B.Vector2(o(n.x,y.x,H.x),o(n.y,y.y,H.y));case"zy":return new B.zy(o(n.x,y.x,H.x),o(n.y,y.y,H.y),o(n.z,y.z,H.z));case"Vector4":return new B.Vector4(o(n.x,y.x,H.x),o(n.y,y.y,H.y),o(n.z,y.z,H.z),o(n.w,y.w,H.w));case"Quaternion":return new B.Quaternion(o(n.x,y.x,H.x),o(n.y,y.y,H.y),o(n.z,y.z,H.z),o(n.w,y.w,H.w));case"Matrix":return B.Matrix.gy(n.m.map(((n,G)=>o(n,y.m[G],H.m[G]))));case"Matrix2D":return new A.e(n.m.map(((n,G)=>o(n,y.m[G],H.m[G]))));case"Matrix3D":return new A.i(n.m.map(((n,G)=>o(n,y.m[G],H.m[G]))));default:return o((0,U.s)(n),(0,U.s)(y),(0,U.s)(H))}}(0,o.h)("FlowGraphMaxBlock",R);class N extends q{constructor(n){super(G.c,G.c,G.c,G.c,((n,y,H)=>this._polymorphicClamp(n,y,H)),"FlowGraphClampBlock",n)}_polymorphicClamp(n,y,H){return S(n,y,H,C)}}function r(n){return Math.min(Math.max(n,0),1)}(0,o.h)("FlowGraphClampBlock",N);class K extends V.b{constructor(n){super(G.c,G.c,(n=>this._polymorphicSaturate(n)),"FlowGraphSaturateBlock",n)}_polymorphicSaturate(n){return f(n,r)}}function Y(n,y,H){return(1-H)*n+H*y}(0,o.h)("FlowGraphSaturateBlock",K);class D extends q{constructor(n){super(G.c,G.c,G.c,G.c,((n,y,H)=>this._polymorphicInterpolate(n,y,H)),"FlowGraphMathInterpolationBlock",n)}_polymorphicInterpolate(n,y,H){return S(n,y,H,Y)}}(0,o.h)("FlowGraphMathInterpolationBlock",D);class Z extends h.c{constructor(n){super(G.c,G.c,G.e,((n,y)=>this._polymorphicEq(n,y)),"FlowGraphEqualityBlock",n)}_polymorphicEq(n,y){const H=(0,U.l)(n),o=(0,U.l)(y);return typeof n===typeof y&&((0,U.h)(H,o)||(0,U.e)(H,o)||(0,U.d)(H,o)?n.equals(y):n===y)}}function s(n,y,H){if((0,U.t)(n)&&(0,U.t)(y))return H((0,U.s)(n),(0,U.s)(y));throw new Error(`Cannot compare ${n} and ${y}`)}(0,o.h)("FlowGraphEqualityBlock",Z);class P extends h.c{constructor(n){super(G.c,G.c,G.e,((n,y)=>this._polymorphicLessThan(n,y)),"FlowGraphLessThanBlock",n)}_polymorphicLessThan(n,y){return s(n,y,((n,y)=>n<y))}}(0,o.h)("FlowGraphLessThanBlock",P);class x extends h.c{constructor(n){super(G.c,G.c,G.e,((n,y)=>this._polymorphicLessThanOrEqual(n,y)),"FlowGraphLessThanOrEqualBlock",n)}_polymorphicLessThanOrEqual(n,y){return s(n,y,((n,y)=>n<=y))}}(0,o.h)("FlowGraphLessThanOrEqualBlock",x);class t extends h.c{constructor(n){super(G.c,G.c,G.e,((n,y)=>this._polymorphicGreaterThan(n,y)),"FlowGraphGreaterThanBlock",n)}_polymorphicGreaterThan(n,y){return s(n,y,((n,y)=>n>y))}}(0,o.h)("FlowGraphGreaterThanBlock",t);class u extends h.c{constructor(n){super(G.c,G.c,G.e,((n,y)=>this._polymorphicGreaterThanOrEqual(n,y)),"FlowGraphGreaterThanOrEqualBlock",n)}_polymorphicGreaterThanOrEqual(n,y){return s(n,y,((n,y)=>n>=y))}}(0,o.h)("FlowGraphGreaterThanOrEqualBlock",u);class L extends V.b{constructor(n){super(G.c,G.e,(n=>this._polymorphicIsNan(n)),"FlowGraphIsNaNBlock",n)}_polymorphicIsNan(n){if((0,U.t)(n,!0))return isNaN((0,U.s)(n));throw new Error(`Cannot get NaN of ${n}`)}}(0,o.h)("FlowGraphIsNaNBlock",L);class J extends V.b{constructor(n){super(G.c,G.e,(n=>this._polymorphicIsInf(n)),"FlowGraphIsInfBlock",n)}_polymorphicIsInf(n){if((0,U.t)(n))return!isFinite((0,U.s)(n));throw new Error(`Cannot get isInf of ${n}`)}}(0,o.h)("FlowGraphIsInfBlock",J);class m extends V.b{constructor(n){super(G.c,G.c,(n=>this._polymorphicDegToRad(n)),"FlowGraphDegToRadBlock",n)}_degToRad(n){return n*Math.PI/180}_polymorphicDegToRad(n){return f(n,this._degToRad)}}(0,o.h)("FlowGraphDegToRadBlock",m);class nn extends V.b{constructor(n){super(G.c,G.c,(n=>this._polymorphicRadToDeg(n)),"FlowGraphRadToDegBlock",n)}_radToDeg(n){return 180*n/Math.PI}_polymorphicRadToDeg(n){return f(n,this._radToDeg)}}(0,o.h)("FlowGraphRadToDegBlock",nn);class yn extends V.b{constructor(n){super(G.p,G.p,(n=>this._polymorphicSin(n)),"FlowGraphSinBlock",n)}_polymorphicSin(n){return f(n,Math.sin)}}class Hn extends V.b{constructor(n){super(G.p,G.p,(n=>this._polymorphicCos(n)),"FlowGraphCosBlock",n)}_polymorphicCos(n){return f(n,Math.cos)}}class on extends V.b{constructor(n){super(G.p,G.p,(n=>this._polymorphicTan(n)),"FlowGraphTanBlock",n)}_polymorphicTan(n){return f(n,Math.tan)}}class Gn extends V.b{constructor(n){super(G.p,G.p,(n=>this._polymorphicAsin(n)),"FlowGraphASinBlock",n)}_polymorphicAsin(n){return f(n,Math.asin)}}(0,o.h)("FlowGraphASinBlock",Gn);class hn extends V.b{constructor(n){super(G.p,G.p,(n=>this._polymorphicAcos(n)),"FlowGraphACosBlock",n)}_polymorphicAcos(n){return f(n,Math.acos)}}(0,o.h)("FlowGraphACosBlock",hn);class kn extends V.b{constructor(n){super(G.p,G.p,(n=>this._polymorphicAtan(n)),"FlowGraphATanBlock",n)}_polymorphicAtan(n){return f(n,Math.atan)}}(0,o.h)("FlowGraphATanBlock",kn);class Bn extends h.c{constructor(n){super(G.c,G.c,G.c,((n,y)=>this._polymorphicAtan2(n,y)),"FlowGraphATan2Block",n)}_polymorphicAtan2(n,y){return w(n,y,Math.atan2)}}(0,o.h)("FlowGraphATan2Block",Bn);class Vn extends V.b{constructor(n){super(G.c,G.c,(n=>this._polymorphicSinh(n)),"FlowGraphSinhBlock",n)}_polymorphicSinh(n){return f(n,Math.sinh)}}(0,o.h)("FlowGraphSinhBlock",Vn);class qn extends V.b{constructor(n){super(G.c,G.c,(n=>this._polymorphicCosh(n)),"FlowGraphCoshBlock",n)}_polymorphicCosh(n){return f(n,Math.cosh)}}(0,o.h)("FlowGraphCoshBlock",qn);class bn extends V.b{constructor(n){super(G.c,G.c,(n=>this._polymorphicTanh(n)),"FlowGraphTanhBlock",n)}_polymorphicTanh(n){return f(n,Math.tanh)}}(0,o.h)("FlowGraphTanhBlock",bn);class An extends V.b{constructor(n){super(G.c,G.p,(n=>this._polymorphicAsinh(n)),"FlowGraphASinhBlock",n)}_polymorphicAsinh(n){return f(n,Math.asinh)}}(0,o.h)("FlowGraphASinhBlock",An);class Un extends V.b{constructor(n){super(G.c,G.p,(n=>this._polymorphicAcosh(n)),"FlowGraphACoshBlock",n)}_polymorphicAcosh(n){return f(n,Math.acosh)}}(0,o.h)("FlowGraphACoshBlock",Un);class Tn extends V.b{constructor(n){super(G.c,G.p,(n=>this._polymorphicAtanh(n)),"FlowGraphATanhBlock",n)}_polymorphicAtanh(n){return f(n,Math.atanh)}}(0,o.h)("FlowGraphATanhBlock",Tn);class Wn extends V.b{constructor(n){super(G.c,G.p,(n=>this._polymorphicExp(n)),"FlowGraphExponentialBlock",n)}_polymorphicExp(n){return f(n,Math.exp)}}(0,o.h)("FlowGraphExponentialBlock",Wn);class zn extends V.b{constructor(n){super(G.c,G.p,(n=>this._polymorphicLog(n)),"FlowGraphLogBlock",n)}_polymorphicLog(n){return f(n,Math.log)}}(0,o.h)("FlowGraphLogBlock",zn);class Qn extends V.b{constructor(n){super(G.c,G.p,(n=>this._polymorphicLog2(n)),"FlowGraphLog2Block",n)}_polymorphicLog2(n){return f(n,Math.log2)}}(0,o.h)("FlowGraphLog2Block",Qn);class ln extends V.b{constructor(n){super(G.c,G.p,(n=>this._polymorphicLog10(n)),"FlowGraphLog10Block",n)}_polymorphicLog10(n){return f(n,Math.log10)}}(0,o.h)("FlowGraphLog10Block",ln);class vn extends V.b{constructor(n){super(G.c,G.p,(n=>this._polymorphicSqrt(n)),"FlowGraphSquareRootBlock",n)}_polymorphicSqrt(n){return f(n,Math.sqrt)}}(0,o.h)("FlowGraphSquareRootBlock",vn);class Fn extends V.b{constructor(n){super(G.c,G.p,(n=>this._polymorphicCubeRoot(n)),"FlowGraphCubeRootBlock",n)}_polymorphicCubeRoot(n){return f(n,Math.cbrt)}}(0,o.h)("FlowGraphCubeRootBlock",Fn);class gn extends h.c{constructor(n){super(G.c,G.p,G.p,((n,y)=>this._polymorphicPow(n,y)),"FlowGraphPowerBlock",n)}_polymorphicPow(n,y){return w(n,y,Math.pow)}}(0,o.h)("FlowGraphPowerBlock",gn);class Mn extends V.b{constructor(n){super((0,G.D)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),(0,G.D)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),(n=>"boolean"===typeof n?!n:"number"===typeof n?~n:new b.c(~n.value)),"FlowGraphBitwiseNotBlock",n)}}(0,o.h)("FlowGraphBitwiseNotBlock",Mn);class fn extends h.c{constructor(n){super((0,G.D)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),(0,G.D)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),(0,G.D)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),((n,y)=>{if("boolean"===typeof n&&"boolean"===typeof y)return n&&y;if("number"===typeof n&&"number"===typeof y)return n&y;if("object"===typeof n&&"object"===typeof y)return new b.c(n.value&y.value);throw new Error(`Cannot perform bitwise AND on ${n} and ${y}`)}),"FlowGraphBitwiseAndBlock",n)}}(0,o.h)("FlowGraphBitwiseAndBlock",fn);class cn extends h.c{constructor(n){super((0,G.D)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),(0,G.D)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),(0,G.D)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),((n,y)=>{if("boolean"===typeof n&&"boolean"===typeof y)return n||y;if("number"===typeof n&&"number"===typeof y)return n|y;if("object"===typeof n&&"object"===typeof y)return new b.c(n.value|y.value);throw new Error(`Cannot perform bitwise OR on ${n} and ${y}`)}),"FlowGraphBitwiseOrBlock",n)}}(0,o.h)("FlowGraphBitwiseOrBlock",cn);class pn extends h.c{constructor(n){super((0,G.D)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),(0,G.D)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),(0,G.D)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),((n,y)=>{if("boolean"===typeof n&&"boolean"===typeof y)return n!==y;if("number"===typeof n&&"number"===typeof y)return n^y;if("object"===typeof n&&"object"===typeof y)return new b.c(n.value^y.value);throw new Error(`Cannot perform bitwise XOR on ${n} and ${y}`)}),"FlowGraphBitwiseXorBlock",n)}}(0,o.h)("FlowGraphBitwiseXorBlock",pn);class En extends h.c{constructor(n){super(G.f,G.f,G.f,((n,y)=>new b.c(n.value<<y.value)),"FlowGraphBitwiseLeftShiftBlock",n)}}(0,o.h)("FlowGraphBitwiseLeftShiftBlock",En);class Xn extends h.c{constructor(n){super(G.f,G.f,G.f,((n,y)=>new b.c(n.value>>y.value)),"FlowGraphBitwiseRightShiftBlock",n)}}(0,o.h)("FlowGraphBitwiseRightShiftBlock",Xn);class dn extends V.b{constructor(n){super(G.f,G.f,(n=>new b.c(Math.clz32(n.value))),"FlowGraphLeadingZerosBlock",n)}}(0,o.h)("FlowGraphLeadingZerosBlock",dn);class an extends V.b{constructor(n){super(G.f,G.f,(n=>new b.c(n.value?31-Math.clz32(n.value&-n.value):32)),"FlowGraphTrailingZerosBlock",n)}}(0,o.h)("FlowGraphTrailingZerosBlock",an);class On extends V.b{constructor(n){super(G.f,G.f,(n=>new b.c(function(n){let y=0;for(;n;)y+=1&n,n>>=1;return y}(n.value))),"FlowGraphOneBitsCounterBlock",n)}}(0,o.h)("FlowGraphOneBitsCounterBlock",On)},14585:(n,y,H)=>{H.d(y,{c:()=>G});var o=H(14592);class G extends o.b{constructor(n,y,H,o,G,h){super(H,h),this._operation=o,this._className=G,this.a=this.registerDataInput("a",n),this.b=this.registerDataInput("b",y)}_doOperation(n){const y=this.a.getValue(n),H=this.b.getValue(n);return this._operation(y,H)}getClassName(){return this._className}}},14592:(n,y,H)=>{H.d(y,{b:()=>i});var o=H(13146),G=H(13117);const h="cachedOperationValue",k="cachedExecutionId";class i extends o.c{constructor(n,y){super(y),this.value=this.registerDataOutput("value",n),this.isValid=this.registerDataOutput("isValid",G.e)}_updateOutputs(n){const y=n._getExecutionVariable(this,k,-1),H=n._getExecutionVariable(this,h,null);if(void 0!==H&&null!==H&&y===n.executionId)this.isValid.setValue(!0,n),this.value.setValue(H,n);else try{const y=this._doOperation(n);if(void 0===y||null===y)return void this.isValid.setValue(!1,n);n._setExecutionVariable(this,h,y),n._setExecutionVariable(this,k,n.executionId),this.value.setValue(y,n),this.isValid.setValue(!0,n)}catch(o){this.isValid.setValue(!1,n)}}}},14597:(n,y,H)=>{H.d(y,{b:()=>G});var o=H(14592);class G extends o.b{constructor(n,y,H,o,G){super(y,G),this._operation=H,this._className=o,this.a=this.registerDataInput("a",n)}_doOperation(n){return this._operation(this.a.getValue(n))}getClassName(){return this._className}}}}]);