"use strict";(self.qcdfysujsyf=self.qcdfysujsyf||[]).push([[88],{15871:(K,A,T)=>{T.r(A),T.d(A,{FlowGraphAbsBlock:()=>S,FlowGraphAcosBlock:()=>LK,FlowGraphAcoshBlock:()=>xK,FlowGraphAddBlock:()=>b,FlowGraphAsinBlock:()=>BK,FlowGraphAsinhBlock:()=>ZK,FlowGraphAtan2Block:()=>OK,FlowGraphAtanBlock:()=>fK,FlowGraphAtanhBlock:()=>JK,FlowGraphBitwiseAndBlock:()=>zK,FlowGraphBitwiseLeftShiftBlock:()=>lK,FlowGraphBitwiseNotBlock:()=>UK,FlowGraphBitwiseOrBlock:()=>gK,FlowGraphBitwiseRightShiftBlock:()=>uK,FlowGraphBitwiseXorBlock:()=>SK,FlowGraphCeilBlock:()=>n,FlowGraphClampBlock:()=>v,FlowGraphCosBlock:()=>TK,FlowGraphCoshBlock:()=>QK,FlowGraphCubeRootBlock:()=>DK,FlowGraphDegToRadBlock:()=>t,FlowGraphDivideBlock:()=>d,FlowGraphEBlock:()=>D,FlowGraphEqualityBlock:()=>V,FlowGraphExpBlock:()=>bK,FlowGraphFloorBlock:()=>c,FlowGraphFractionBlock:()=>e,FlowGraphGreaterThanBlock:()=>w,FlowGraphGreaterThanOrEqualBlock:()=>a,FlowGraphInfBlock:()=>U,FlowGraphIsInfinityBlock:()=>E,FlowGraphIsNanBlock:()=>M,FlowGraphLeadingZerosBlock:()=>cK,FlowGraphLessThanBlock:()=>q,FlowGraphLessThanOrEqualBlock:()=>y,FlowGraphLog10Block:()=>dK,FlowGraphLog2Block:()=>FK,FlowGraphLogBlock:()=>PK,FlowGraphMathInterpolationBlock:()=>i,FlowGraphMaxBlock:()=>s,FlowGraphMinBlock:()=>k,FlowGraphModuloBlock:()=>h,FlowGraphMultiplyBlock:()=>F,FlowGraphNaNBlock:()=>z,FlowGraphNegationBlock:()=>p,FlowGraphOneBitsCounterBlock:()=>HK,FlowGraphPiBlock:()=>mK,FlowGraphPowerBlock:()=>mA,FlowGraphRadToDegBlock:()=>KK,FlowGraphRandomBlock:()=>N,FlowGraphRoundBlock:()=>H,FlowGraphSaturateBlock:()=>o,FlowGraphSignBlock:()=>l,FlowGraphSinBlock:()=>AK,FlowGraphSinhBlock:()=>CK,FlowGraphSquareRootBlock:()=>NK,FlowGraphSubtractBlock:()=>P,FlowGraphTanBlock:()=>GK,FlowGraphTanhBlock:()=>YK,FlowGraphTrailingZerosBlock:()=>nK,FlowGraphTruncBlock:()=>u});var G=T(12651),B=T(14237),L=T(15880),f=T(15884);class O extends f.b{constructor(K,A,T,G){super(K,G),this._operation=A,this._className=T}_doOperation(K){return this._operation(K)}getClassName(){return this._className}}var C=T(12700),Q=T(15888);class Y extends f.b{constructor(K,A,T,G,B,L,f){super(G,f),this._operation=B,this._className=L,this.a=this.registerDataInput("a",K),this.b=this.registerDataInput("b",A),this.c=this.registerDataInput("c",T)}_doOperation(K){return this._operation(this.a.getValue(K),this.b.getValue(K),this.c.getValue(K))}getClassName(){return this._className}}var Z=T(14229),x=T(14245),J=T(14278);class b extends L.d{constructor(K){super((0,B.O)(null===K||void 0===K?void 0:K.type),(0,B.O)(null===K||void 0===K?void 0:K.type),(0,B.O)(null===K||void 0===K?void 0:K.type),((K,A)=>this._polymorphicAdd(K,A)),"FlowGraphAddBlock",K)}_polymorphicAdd(K,A){const T=(0,J.i)(K),G=(0,J.i)(A);if((0,J.h)(T,G)||(0,J.f)(T,G)||(0,J.c)(T,G))return K.add(A);if("Quaternion"===T||"Vector4"===G)return new C.Vector4(K.x,K.y,K.z,K.w).addInPlace(A);if("Vector4"===T||"Quaternion"===G)return K.add(A);var B;if(null!==(B=this.config)&&void 0!==B&&B.preventIntegerFloatArithmetic&&typeof K!==typeof A)throw new Error("Cannot add different types of numbers.");return(0,J.q)(K)+(0,J.q)(A)}}(0,G.c)("FlowGraphAddBlock",b);class P extends L.d{constructor(K){super((0,B.O)(null===K||void 0===K?void 0:K.type),(0,B.O)(null===K||void 0===K?void 0:K.type),(0,B.O)(null===K||void 0===K?void 0:K.type),((K,A)=>this._polymorphicSubtract(K,A)),"FlowGraphSubtractBlock",K)}_polymorphicSubtract(K,A){const T=(0,J.i)(K),G=(0,J.i)(A);if((0,J.h)(T,G)||(0,J.c)(T,G)||(0,J.f)(T,G))return K.FA(A);if("Quaternion"===T||"Vector4"===G)return new C.Vector4(K.x,K.y,K.z,K.w).DZ(A);if("Vector4"===T||"Quaternion"===G)return K.FA(A);var B;if(null!==(B=this.config)&&void 0!==B&&B.preventIntegerFloatArithmetic&&typeof K!==typeof A)throw new Error("Cannot add different types of numbers.");return(0,J.q)(K)-(0,J.q)(A)}}(0,G.c)("FlowGraphSubtractBlock",P);class F extends L.d{constructor(K){super((0,B.O)(null===K||void 0===K?void 0:K.type),(0,B.O)(null===K||void 0===K?void 0:K.type),(0,B.O)(null===K||void 0===K?void 0:K.type),((K,A)=>this._polymorphicMultiply(K,A)),"FlowGraphMultiplyBlock",K)}_polymorphicMultiply(K,A){const T=(0,J.i)(K),G=(0,J.i)(A);if((0,J.h)(T,G)||(0,J.c)(T,G))return K.multiply(A);if("Quaternion"===T||"Vector4"===G)return new C.Vector4(K.x,K.y,K.z,K.w).multiplyInPlace(A);if("Vector4"===T||"Quaternion"===G)return K.multiply(A);if((0,J.f)(T,G)){var B;if(null!==(B=this.config)&&void 0!==B&&B.useMatrixPerComponent){const G=K.m;for(let K=0;K<G.length;K++)G[K]*=A.m[K];return"Matrix2D"===T?new x.e(G):"Matrix3D"===T?new x.i(G):C.Matrix.mT(G)}return A.multiply(K)}var L;if(null!==(L=this.config)&&void 0!==L&&L.preventIntegerFloatArithmetic&&typeof K!==typeof A)throw new Error("Cannot add different types of numbers.");return(0,J.q)(K)*(0,J.q)(A)}}(0,G.c)("FlowGraphMultiplyBlock",F);class d extends L.d{constructor(K){super((0,B.O)(null===K||void 0===K?void 0:K.type),(0,B.O)(null===K||void 0===K?void 0:K.type),(0,B.O)(null===K||void 0===K?void 0:K.type),((K,A)=>this._polymorphicDivide(K,A)),"FlowGraphDivideBlock",K)}_polymorphicDivide(K,A){const T=(0,J.i)(K),G=(0,J.i)(A);if((0,J.h)(T,G)||(0,J.c)(T,G))return K.divide(A);if("Quaternion"===T||"Quaternion"===G){const T=K.clone();return T.x/=A.x,T.y/=A.y,T.z/=A.z,T.w/=A.w,T}if("Quaternion"===T||"Vector4"===G)return new C.Vector4(K.x,K.y,K.z,K.w).divideInPlace(A);if("Vector4"===T||"Quaternion"===G)return K.divide(A);if((0,J.f)(T,G)){var B;if(null!==(B=this.config)&&void 0!==B&&B.useMatrixPerComponent){const G=K.m;for(let K=0;K<G.length;K++)G[K]/=A.m[K];return"Matrix2D"===T?new x.e(G):"Matrix3D"===T?new x.i(G):C.Matrix.mT(G)}return K.divide(A)}var L;if(null!==(L=this.config)&&void 0!==L&&L.preventIntegerFloatArithmetic&&typeof K!==typeof A)throw new Error("Cannot add different types of numbers.");return(0,J.q)(K)/(0,J.q)(A)}}(0,G.c)("FlowGraphDivideBlock",d);class N extends O{constructor(K){super(B.q,(K=>this._random(K)),"FlowGraphRandomBlock",K),this.min=this.registerDataInput("min",B.q,(null===K||void 0===K?void 0:K.min)??0),this.max=this.registerDataInput("max",B.q,(null===K||void 0===K?void 0:K.max)??1),null!==K&&void 0!==K&&K.seed&&(this._seed=K.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const K=1e4*Math.sin(this._seed++);return K-Math.floor(K)}return Math.random()}_random(K){const A=this.min.getValue(K),T=this.max.getValue(K);return this._getRandomValue()*(T-A)+A}}(0,G.c)("FlowGraphRandomBlock",N);class D extends O{constructor(K){super(B.q,(()=>Math.E),"FlowGraphEBlock",K)}}(0,G.c)("FlowGraphEBlock",D);class mK extends O{constructor(K){super(B.q,(()=>Math.PI),"FlowGraphPIBlock",K)}}(0,G.c)("FlowGraphPIBlock",mK);class U extends O{constructor(K){super(B.q,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",K)}}(0,G.c)("FlowGraphInfBlock",U);class z extends O{constructor(K){super(B.q,(()=>Number.NaN),"FlowGraphNaNBlock",K)}}function g(K,A){switch((0,J.i)(K)){case"FlowGraphInteger":return new Z.e(A(K.value));case"Vector2":return new C.Vector2(A(K.x),A(K.y));case"PA":return new C.PA(A(K.x),A(K.y),A(K.z));case"Vector4":return new C.Vector4(A(K.x),A(K.y),A(K.z),A(K.w));case"Quaternion":return new C.Quaternion(A(K.x),A(K.y),A(K.z),A(K.w));case"Matrix":return C.Matrix.mT(K.m.map(A));case"Matrix2D":return new x.e(K.m.map(A));case"Matrix3D":return new x.i(K.m.map(A));default:return A(K)}}(0,G.c)("FlowGraphNaNBlock",z);class S extends Q.e{constructor(K){super(B.q,B.q,(K=>this._polymorphicAbs(K)),"FlowGraphAbsBlock",K)}_polymorphicAbs(K){return g(K,Math.abs)}}(0,G.c)("FlowGraphAbsBlock",S);class l extends Q.e{constructor(K){super(B.q,B.q,(K=>this._polymorphicSign(K)),"FlowGraphSignBlock",K)}_polymorphicSign(K){return g(K,Math.sign)}}(0,G.c)("FlowGraphSignBlock",l);class u extends Q.e{constructor(K){super(B.q,B.q,(K=>this._polymorphicTrunc(K)),"FlowGraphTruncBlock",K)}_polymorphicTrunc(K){return g(K,Math.trunc)}}(0,G.c)("FlowGraphTruncBlock",u);class c extends Q.e{constructor(K){super(B.q,B.q,(K=>this._polymorphicFloor(K)),"FlowGraphFloorBlock",K)}_polymorphicFloor(K){return g(K,Math.floor)}}(0,G.c)("FlowGraphFloorBlock",c);class n extends Q.e{constructor(K){super(B.b,B.b,(K=>this._polymorphicCeiling(K)),"FlowGraphCeilBlock",K)}_polymorphicCeiling(K){return g(K,Math.ceil)}}(0,G.c)("FlowGraphCeilBlock",n);class H extends Q.e{constructor(K){super(B.b,B.b,(K=>this._polymorphicRound(K)),"FlowGraphRoundBlock",K)}_polymorphicRound(K){return g(K,(K=>{var A;return K<0&&null!==(A=this.config)&&void 0!==A&&A.roundHalfAwayFromZero?-Math.round(-K):Math.round(K)}))}}(0,G.c)("FlowGraphRoundBlock",H);class e extends Q.e{constructor(K){super(B.b,B.b,(K=>this._polymorphicFraction(K)),"FlowGraphFractBlock",K)}_polymorphicFraction(K){return g(K,(K=>K-Math.floor(K)))}}(0,G.c)("FlowGraphFractBlock",e);class p extends Q.e{constructor(K){super(B.b,B.b,(K=>this._polymorphicNeg(K)),"FlowGraphNegationBlock",K)}_polymorphicNeg(K){return g(K,(K=>-K))}}function r(K,A,T){switch((0,J.i)(K)){case"FlowGraphInteger":return new Z.e(T(K.value,A.value));case"Vector2":return new C.Vector2(T(K.x,A.x),T(K.y,A.y));case"PA":return new C.PA(T(K.x,A.x),T(K.y,A.y),T(K.z,A.z));case"Vector4":return new C.Vector4(T(K.x,A.x),T(K.y,A.y),T(K.z,A.z),T(K.w,A.w));case"Quaternion":return new C.Quaternion(T(K.x,A.x),T(K.y,A.y),T(K.z,A.z),T(K.w,A.w));case"Matrix":return C.Matrix.mT(K.m.map(((K,G)=>T(K,A.m[G]))));case"Matrix2D":return new x.e(K.m.map(((K,G)=>T(K,A.m[G]))));case"Matrix3D":return new x.i(K.m.map(((K,G)=>T(K,A.m[G]))));default:return T((0,J.q)(K),(0,J.q)(A))}}(0,G.c)("FlowGraphNegationBlock",p);class h extends L.d{constructor(K){super(B.b,B.b,B.b,((K,A)=>this._polymorphicRemainder(K,A)),"FlowGraphModuloBlock",K)}_polymorphicRemainder(K,A){return r(K,A,((K,A)=>K%A))}}(0,G.c)("FlowGraphModuloBlock",h);class k extends L.d{constructor(K){super(B.b,B.b,B.b,((K,A)=>this._polymorphicMin(K,A)),"FlowGraphMinBlock",K)}_polymorphicMin(K,A){return r(K,A,Math.min)}}(0,G.c)("FlowGraphMinBlock",k);class s extends L.d{constructor(K){super(B.b,B.b,B.b,((K,A)=>this._polymorphicMax(K,A)),"FlowGraphMaxBlock",K)}_polymorphicMax(K,A){return r(K,A,Math.max)}}function j(K,A,T){return Math.min(Math.max(K,Math.min(A,T)),Math.max(A,T))}function R(K,A,T,G){switch((0,J.i)(K)){case"FlowGraphInteger":return new Z.e(G(K.value,A.value,T.value));case"Vector2":return new C.Vector2(G(K.x,A.x,T.x),G(K.y,A.y,T.y));case"PA":return new C.PA(G(K.x,A.x,T.x),G(K.y,A.y,T.y),G(K.z,A.z,T.z));case"Vector4":return new C.Vector4(G(K.x,A.x,T.x),G(K.y,A.y,T.y),G(K.z,A.z,T.z),G(K.w,A.w,T.w));case"Quaternion":return new C.Quaternion(G(K.x,A.x,T.x),G(K.y,A.y,T.y),G(K.z,A.z,T.z),G(K.w,A.w,T.w));case"Matrix":return C.Matrix.mT(K.m.map(((K,B)=>G(K,A.m[B],T.m[B]))));case"Matrix2D":return new x.e(K.m.map(((K,B)=>G(K,A.m[B],T.m[B]))));case"Matrix3D":return new x.i(K.m.map(((K,B)=>G(K,A.m[B],T.m[B]))));default:return G((0,J.q)(K),(0,J.q)(A),(0,J.q)(T))}}(0,G.c)("FlowGraphMaxBlock",s);class v extends Y{constructor(K){super(B.b,B.b,B.b,B.b,((K,A,T)=>this._polymorphicClamp(K,A,T)),"FlowGraphClampBlock",K)}_polymorphicClamp(K,A,T){return R(K,A,T,j)}}function I(K){return Math.min(Math.max(K,0),1)}(0,G.c)("FlowGraphClampBlock",v);class o extends Q.e{constructor(K){super(B.b,B.b,(K=>this._polymorphicSaturate(K)),"FlowGraphSaturateBlock",K)}_polymorphicSaturate(K){return g(K,I)}}function W(K,A,T){return(1-T)*K+T*A}(0,G.c)("FlowGraphSaturateBlock",o);class i extends Y{constructor(K){super(B.b,B.b,B.b,B.b,((K,A,T)=>this._polymorphicInterpolate(K,A,T)),"FlowGraphMathInterpolationBlock",K)}_polymorphicInterpolate(K,A,T){return R(K,A,T,W)}}(0,G.c)("FlowGraphMathInterpolationBlock",i);class V extends L.d{constructor(K){super(B.b,B.b,B.d,((K,A)=>this._polymorphicEq(K,A)),"FlowGraphEqualityBlock",K)}_polymorphicEq(K,A){const T=(0,J.i)(K),G=(0,J.i)(A);return typeof K===typeof A&&((0,J.h)(T,G)||(0,J.f)(T,G)||(0,J.c)(T,G)?K.equals(A):K===A)}}function X(K,A,T){if((0,J.r)(K)&&(0,J.r)(A))return T((0,J.q)(K),(0,J.q)(A));throw new Error(`Cannot compare ${K} and ${A}`)}(0,G.c)("FlowGraphEqualityBlock",V);class q extends L.d{constructor(K){super(B.b,B.b,B.d,((K,A)=>this._polymorphicLessThan(K,A)),"FlowGraphLessThanBlock",K)}_polymorphicLessThan(K,A){return X(K,A,((K,A)=>K<A))}}(0,G.c)("FlowGraphLessThanBlock",q);class y extends L.d{constructor(K){super(B.b,B.b,B.d,((K,A)=>this._polymorphicLessThanOrEqual(K,A)),"FlowGraphLessThanOrEqualBlock",K)}_polymorphicLessThanOrEqual(K,A){return X(K,A,((K,A)=>K<=A))}}(0,G.c)("FlowGraphLessThanOrEqualBlock",y);class w extends L.d{constructor(K){super(B.b,B.b,B.d,((K,A)=>this._polymorphicGreaterThan(K,A)),"FlowGraphGreaterThanBlock",K)}_polymorphicGreaterThan(K,A){return X(K,A,((K,A)=>K>A))}}(0,G.c)("FlowGraphGreaterThanBlock",w);class a extends L.d{constructor(K){super(B.b,B.b,B.d,((K,A)=>this._polymorphicGreaterThanOrEqual(K,A)),"FlowGraphGreaterThanOrEqualBlock",K)}_polymorphicGreaterThanOrEqual(K,A){return X(K,A,((K,A)=>K>=A))}}(0,G.c)("FlowGraphGreaterThanOrEqualBlock",a);class M extends Q.e{constructor(K){super(B.b,B.d,(K=>this._polymorphicIsNan(K)),"FlowGraphIsNaNBlock",K)}_polymorphicIsNan(K){if((0,J.r)(K,!0))return isNaN((0,J.q)(K));throw new Error(`Cannot get NaN of ${K}`)}}(0,G.c)("FlowGraphIsNaNBlock",M);class E extends Q.e{constructor(K){super(B.b,B.d,(K=>this._polymorphicIsInf(K)),"FlowGraphIsInfBlock",K)}_polymorphicIsInf(K){if((0,J.r)(K))return!isFinite((0,J.q)(K));throw new Error(`Cannot get isInf of ${K}`)}}(0,G.c)("FlowGraphIsInfBlock",E);class t extends Q.e{constructor(K){super(B.b,B.b,(K=>this._polymorphicDegToRad(K)),"FlowGraphDegToRadBlock",K)}_degToRad(K){return K*Math.PI/180}_polymorphicDegToRad(K){return g(K,this._degToRad)}}(0,G.c)("FlowGraphDegToRadBlock",t);class KK extends Q.e{constructor(K){super(B.b,B.b,(K=>this._polymorphicRadToDeg(K)),"FlowGraphRadToDegBlock",K)}_radToDeg(K){return 180*K/Math.PI}_polymorphicRadToDeg(K){return g(K,this._radToDeg)}}(0,G.c)("FlowGraphRadToDegBlock",KK);class AK extends Q.e{constructor(K){super(B.q,B.q,(K=>this._polymorphicSin(K)),"FlowGraphSinBlock",K)}_polymorphicSin(K){return g(K,Math.sin)}}class TK extends Q.e{constructor(K){super(B.q,B.q,(K=>this._polymorphicCos(K)),"FlowGraphCosBlock",K)}_polymorphicCos(K){return g(K,Math.cos)}}class GK extends Q.e{constructor(K){super(B.q,B.q,(K=>this._polymorphicTan(K)),"FlowGraphTanBlock",K)}_polymorphicTan(K){return g(K,Math.tan)}}class BK extends Q.e{constructor(K){super(B.q,B.q,(K=>this._polymorphicAsin(K)),"FlowGraphASinBlock",K)}_polymorphicAsin(K){return g(K,Math.asin)}}(0,G.c)("FlowGraphASinBlock",BK);class LK extends Q.e{constructor(K){super(B.q,B.q,(K=>this._polymorphicAcos(K)),"FlowGraphACosBlock",K)}_polymorphicAcos(K){return g(K,Math.acos)}}(0,G.c)("FlowGraphACosBlock",LK);class fK extends Q.e{constructor(K){super(B.q,B.q,(K=>this._polymorphicAtan(K)),"FlowGraphATanBlock",K)}_polymorphicAtan(K){return g(K,Math.atan)}}(0,G.c)("FlowGraphATanBlock",fK);class OK extends L.d{constructor(K){super(B.b,B.b,B.b,((K,A)=>this._polymorphicAtan2(K,A)),"FlowGraphATan2Block",K)}_polymorphicAtan2(K,A){return r(K,A,Math.atan2)}}(0,G.c)("FlowGraphATan2Block",OK);class CK extends Q.e{constructor(K){super(B.b,B.b,(K=>this._polymorphicSinh(K)),"FlowGraphSinhBlock",K)}_polymorphicSinh(K){return g(K,Math.sinh)}}(0,G.c)("FlowGraphSinhBlock",CK);class QK extends Q.e{constructor(K){super(B.b,B.b,(K=>this._polymorphicCosh(K)),"FlowGraphCoshBlock",K)}_polymorphicCosh(K){return g(K,Math.cosh)}}(0,G.c)("FlowGraphCoshBlock",QK);class YK extends Q.e{constructor(K){super(B.b,B.b,(K=>this._polymorphicTanh(K)),"FlowGraphTanhBlock",K)}_polymorphicTanh(K){return g(K,Math.tanh)}}(0,G.c)("FlowGraphTanhBlock",YK);class ZK extends Q.e{constructor(K){super(B.b,B.q,(K=>this._polymorphicAsinh(K)),"FlowGraphASinhBlock",K)}_polymorphicAsinh(K){return g(K,Math.asinh)}}(0,G.c)("FlowGraphASinhBlock",ZK);class xK extends Q.e{constructor(K){super(B.b,B.q,(K=>this._polymorphicAcosh(K)),"FlowGraphACoshBlock",K)}_polymorphicAcosh(K){return g(K,Math.acosh)}}(0,G.c)("FlowGraphACoshBlock",xK);class JK extends Q.e{constructor(K){super(B.b,B.q,(K=>this._polymorphicAtanh(K)),"FlowGraphATanhBlock",K)}_polymorphicAtanh(K){return g(K,Math.atanh)}}(0,G.c)("FlowGraphATanhBlock",JK);class bK extends Q.e{constructor(K){super(B.b,B.q,(K=>this._polymorphicExp(K)),"FlowGraphExponentialBlock",K)}_polymorphicExp(K){return g(K,Math.exp)}}(0,G.c)("FlowGraphExponentialBlock",bK);class PK extends Q.e{constructor(K){super(B.b,B.q,(K=>this._polymorphicLog(K)),"FlowGraphLogBlock",K)}_polymorphicLog(K){return g(K,Math.log)}}(0,G.c)("FlowGraphLogBlock",PK);class FK extends Q.e{constructor(K){super(B.b,B.q,(K=>this._polymorphicLog2(K)),"FlowGraphLog2Block",K)}_polymorphicLog2(K){return g(K,Math.log2)}}(0,G.c)("FlowGraphLog2Block",FK);class dK extends Q.e{constructor(K){super(B.b,B.q,(K=>this._polymorphicLog10(K)),"FlowGraphLog10Block",K)}_polymorphicLog10(K){return g(K,Math.log10)}}(0,G.c)("FlowGraphLog10Block",dK);class NK extends Q.e{constructor(K){super(B.b,B.q,(K=>this._polymorphicSqrt(K)),"FlowGraphSquareRootBlock",K)}_polymorphicSqrt(K){return g(K,Math.sqrt)}}(0,G.c)("FlowGraphSquareRootBlock",NK);class DK extends Q.e{constructor(K){super(B.b,B.q,(K=>this._polymorphicCubeRoot(K)),"FlowGraphCubeRootBlock",K)}_polymorphicCubeRoot(K){return g(K,Math.cbrt)}}(0,G.c)("FlowGraphCubeRootBlock",DK);class mA extends L.d{constructor(K){super(B.b,B.q,B.q,((K,A)=>this._polymorphicPow(K,A)),"FlowGraphPowerBlock",K)}_polymorphicPow(K,A){return r(K,A,Math.pow)}}(0,G.c)("FlowGraphPowerBlock",mA);class UK extends Q.e{constructor(K){super((0,B.O)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,B.O)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(K=>"boolean"===typeof K?!K:"number"===typeof K?~K:new Z.e(~K.value)),"FlowGraphBitwiseNotBlock",K)}}(0,G.c)("FlowGraphBitwiseNotBlock",UK);class zK extends L.d{constructor(K){super((0,B.O)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,B.O)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,B.O)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),((K,A)=>{if("boolean"===typeof K&&"boolean"===typeof A)return K&&A;if("number"===typeof K&&"number"===typeof A)return K&A;if("object"===typeof K&&"object"===typeof A)return new Z.e(K.value&A.value);throw new Error(`Cannot perform bitwise AND on ${K} and ${A}`)}),"FlowGraphBitwiseAndBlock",K)}}(0,G.c)("FlowGraphBitwiseAndBlock",zK);class gK extends L.d{constructor(K){super((0,B.O)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,B.O)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,B.O)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),((K,A)=>{if("boolean"===typeof K&&"boolean"===typeof A)return K||A;if("number"===typeof K&&"number"===typeof A)return K|A;if("object"===typeof K&&"object"===typeof A)return new Z.e(K.value|A.value);throw new Error(`Cannot perform bitwise OR on ${K} and ${A}`)}),"FlowGraphBitwiseOrBlock",K)}}(0,G.c)("FlowGraphBitwiseOrBlock",gK);class SK extends L.d{constructor(K){super((0,B.O)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,B.O)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,B.O)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),((K,A)=>{if("boolean"===typeof K&&"boolean"===typeof A)return K!==A;if("number"===typeof K&&"number"===typeof A)return K^A;if("object"===typeof K&&"object"===typeof A)return new Z.e(K.value^A.value);throw new Error(`Cannot perform bitwise XOR on ${K} and ${A}`)}),"FlowGraphBitwiseXorBlock",K)}}(0,G.c)("FlowGraphBitwiseXorBlock",SK);class lK extends L.d{constructor(K){super(B.g,B.g,B.g,((K,A)=>new Z.e(K.value<<A.value)),"FlowGraphBitwiseLeftShiftBlock",K)}}(0,G.c)("FlowGraphBitwiseLeftShiftBlock",lK);class uK extends L.d{constructor(K){super(B.g,B.g,B.g,((K,A)=>new Z.e(K.value>>A.value)),"FlowGraphBitwiseRightShiftBlock",K)}}(0,G.c)("FlowGraphBitwiseRightShiftBlock",uK);class cK extends Q.e{constructor(K){super(B.g,B.g,(K=>new Z.e(Math.clz32(K.value))),"FlowGraphLeadingZerosBlock",K)}}(0,G.c)("FlowGraphLeadingZerosBlock",cK);class nK extends Q.e{constructor(K){super(B.g,B.g,(K=>new Z.e(K.value?31-Math.clz32(K.value&-K.value):32)),"FlowGraphTrailingZerosBlock",K)}}(0,G.c)("FlowGraphTrailingZerosBlock",nK);class HK extends Q.e{constructor(K){super(B.g,B.g,(K=>new Z.e(function(K){let A=0;for(;K;)A+=1&K,K>>=1;return A}(K.value))),"FlowGraphOneBitsCounterBlock",K)}}(0,G.c)("FlowGraphOneBitsCounterBlock",HK)},15880:(K,A,T)=>{T.d(A,{d:()=>B});var G=T(15884);class B extends G.b{constructor(K,A,T,G,B,L){super(T,L),this._operation=G,this._className=B,this.a=this.registerDataInput("a",K),this.b=this.registerDataInput("b",A)}_doOperation(K){const A=this.a.getValue(K),T=this.b.getValue(K);return this._operation(A,T)}getClassName(){return this._className}}},15884:(K,A,T)=>{T.d(A,{b:()=>O});var G=T(14262),B=T(14237);const L="cachedOperationValue",f="cachedExecutionId";class O extends G.e{constructor(K,A){super(A),this.value=this.registerDataOutput("value",K),this.isValid=this.registerDataOutput("isValid",B.d)}_updateOutputs(K){const A=K._getExecutionVariable(this,f,-1),T=K._getExecutionVariable(this,L,null);if(void 0!==T&&null!==T&&A===K.executionId)this.isValid.setValue(!0,K),this.value.setValue(T,K);else try{const A=this._doOperation(K);if(void 0===A||null===A)return void this.isValid.setValue(!1,K);K._setExecutionVariable(this,L,A),K._setExecutionVariable(this,f,K.executionId),this.value.setValue(A,K),this.isValid.setValue(!0,K)}catch(G){this.isValid.setValue(!1,K)}}}},15888:(K,A,T)=>{T.d(A,{e:()=>B});var G=T(15884);class B extends G.b{constructor(K,A,T,G,B){super(A,B),this._operation=T,this._className=G,this.a=this.registerDataInput("a",K)}_doOperation(K){return this._operation(this.a.getValue(K))}getClassName(){return this._className}}}}]);