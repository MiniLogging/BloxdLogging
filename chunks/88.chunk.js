"use strict";(self["9jl1vn4ei5r"]=self["9jl1vn4ei5r"]||[]).push([[88],{14979:(M,p,b)=>{b.r(p),b.d(p,{FlowGraphAbsBlock:()=>y,FlowGraphAcosBlock:()=>BM,FlowGraphAcoshBlock:()=>oM,FlowGraphAddBlock:()=>i,FlowGraphAsinBlock:()=>qM,FlowGraphAsinhBlock:()=>FM,FlowGraphAtan2Block:()=>uM,FlowGraphAtanBlock:()=>kM,FlowGraphAtanhBlock:()=>WM,FlowGraphBitwiseAndBlock:()=>fM,FlowGraphBitwiseLeftShiftBlock:()=>xM,FlowGraphBitwiseNotBlock:()=>SM,FlowGraphBitwiseOrBlock:()=>RM,FlowGraphBitwiseRightShiftBlock:()=>PM,FlowGraphBitwiseXorBlock:()=>yM,FlowGraphCeilBlock:()=>N,FlowGraphClampBlock:()=>V,FlowGraphCosBlock:()=>bM,FlowGraphCoshBlock:()=>OM,FlowGraphCubeRootBlock:()=>aM,FlowGraphDegToRadBlock:()=>l,FlowGraphDivideBlock:()=>K,FlowGraphEBlock:()=>a,FlowGraphEqualityBlock:()=>v,FlowGraphExpBlock:()=>iM,FlowGraphFloorBlock:()=>L,FlowGraphFractionBlock:()=>Y,FlowGraphGreaterThanBlock:()=>G,FlowGraphGreaterThanOrEqualBlock:()=>mM,FlowGraphInfBlock:()=>S,FlowGraphIsInfinityBlock:()=>X,FlowGraphIsNanBlock:()=>C,FlowGraphLeadingZerosBlock:()=>LM,FlowGraphLessThanBlock:()=>t,FlowGraphLessThanOrEqualBlock:()=>e,FlowGraphLog10Block:()=>KM,FlowGraphLog2Block:()=>jM,FlowGraphLogBlock:()=>AM,FlowGraphMathInterpolationBlock:()=>J,FlowGraphMaxBlock:()=>U,FlowGraphMinBlock:()=>g,FlowGraphModuloBlock:()=>n,FlowGraphMultiplyBlock:()=>j,FlowGraphNaNBlock:()=>f,FlowGraphNegationBlock:()=>w,FlowGraphOneBitsCounterBlock:()=>rM,FlowGraphPiBlock:()=>s,FlowGraphPowerBlock:()=>sM,FlowGraphRadToDegBlock:()=>MM,FlowGraphRandomBlock:()=>D,FlowGraphRoundBlock:()=>r,FlowGraphSaturateBlock:()=>I,FlowGraphSignBlock:()=>x,FlowGraphSinBlock:()=>pM,FlowGraphSinhBlock:()=>TM,FlowGraphSquareRootBlock:()=>DM,FlowGraphSubtractBlock:()=>A,FlowGraphTanBlock:()=>QM,FlowGraphTanhBlock:()=>HM,FlowGraphTrailingZerosBlock:()=>NM,FlowGraphTruncBlock:()=>P});var Q=b(11757),q=b(13477),B=b(14987),k=b(14995);class u extends k.d{constructor(M,p,b,Q){super(M,Q),this._operation=p,this._className=b}_doOperation(M){return this._operation(M)}getClassName(){return this._className}}var T=b(11796),O=b(15001);class H extends k.d{constructor(M,p,b,Q,q,B,k){super(Q,k),this._operation=q,this._className=B,this.a=this.registerDataInput("a",M),this.b=this.registerDataInput("b",p),this.c=this.registerDataInput("c",b)}_doOperation(M){return this._operation(this.a.getValue(M),this.b.getValue(M),this.c.getValue(M))}getClassName(){return this._className}}var F=b(13468),o=b(13479),W=b(13507);class i extends B.c{constructor(M){super((0,q.P)(null===M||void 0===M?void 0:M.type),(0,q.P)(null===M||void 0===M?void 0:M.type),(0,q.P)(null===M||void 0===M?void 0:M.type),((M,p)=>this._polymorphicAdd(M,p)),"FlowGraphAddBlock",M)}_polymorphicAdd(M,p){const b=(0,W.m)(M),Q=(0,W.m)(p);if((0,W.i)(b,Q)||(0,W.e)(b,Q)||(0,W.d)(b,Q))return M.add(p);if("Quaternion"===b||"Vector4"===Q)return new T.Vector4(M.x,M.y,M.z,M.w).addInPlace(p);if("Vector4"===b||"Quaternion"===Q)return M.add(p);var q;if(null!==(q=this.config)&&void 0!==q&&q.preventIntegerFloatArithmetic&&typeof M!==typeof p)throw new Error("Cannot add different types of numbers.");return(0,W.r)(M)+(0,W.r)(p)}}(0,Q.g)("FlowGraphAddBlock",i);class A extends B.c{constructor(M){super((0,q.P)(null===M||void 0===M?void 0:M.type),(0,q.P)(null===M||void 0===M?void 0:M.type),(0,q.P)(null===M||void 0===M?void 0:M.type),((M,p)=>this._polymorphicSubtract(M,p)),"FlowGraphSubtractBlock",M)}_polymorphicSubtract(M,p){const b=(0,W.m)(M),Q=(0,W.m)(p);if((0,W.i)(b,Q)||(0,W.d)(b,Q)||(0,W.e)(b,Q))return M.jp(p);if("Quaternion"===b||"Vector4"===Q)return new T.Vector4(M.x,M.y,M.z,M.w).TF(p);if("Vector4"===b||"Quaternion"===Q)return M.jp(p);var q;if(null!==(q=this.config)&&void 0!==q&&q.preventIntegerFloatArithmetic&&typeof M!==typeof p)throw new Error("Cannot add different types of numbers.");return(0,W.r)(M)-(0,W.r)(p)}}(0,Q.g)("FlowGraphSubtractBlock",A);class j extends B.c{constructor(M){super((0,q.P)(null===M||void 0===M?void 0:M.type),(0,q.P)(null===M||void 0===M?void 0:M.type),(0,q.P)(null===M||void 0===M?void 0:M.type),((M,p)=>this._polymorphicMultiply(M,p)),"FlowGraphMultiplyBlock",M)}_polymorphicMultiply(M,p){const b=(0,W.m)(M),Q=(0,W.m)(p);if((0,W.i)(b,Q)||(0,W.d)(b,Q))return M.multiply(p);if("Quaternion"===b||"Vector4"===Q)return new T.Vector4(M.x,M.y,M.z,M.w).multiplyInPlace(p);if("Vector4"===b||"Quaternion"===Q)return M.multiply(p);if((0,W.e)(b,Q)){var q;if(null!==(q=this.config)&&void 0!==q&&q.useMatrixPerComponent){const Q=M.m;for(let M=0;M<Q.length;M++)Q[M]*=p.m[M];return"Matrix2D"===b?new o.d(Q):"Matrix3D"===b?new o.h(Q):T.Matrix.sp(Q)}return p.multiply(M)}var B;if(null!==(B=this.config)&&void 0!==B&&B.preventIntegerFloatArithmetic&&typeof M!==typeof p)throw new Error("Cannot add different types of numbers.");return(0,W.r)(M)*(0,W.r)(p)}}(0,Q.g)("FlowGraphMultiplyBlock",j);class K extends B.c{constructor(M){super((0,q.P)(null===M||void 0===M?void 0:M.type),(0,q.P)(null===M||void 0===M?void 0:M.type),(0,q.P)(null===M||void 0===M?void 0:M.type),((M,p)=>this._polymorphicDivide(M,p)),"FlowGraphDivideBlock",M)}_polymorphicDivide(M,p){const b=(0,W.m)(M),Q=(0,W.m)(p);if((0,W.i)(b,Q)||(0,W.d)(b,Q))return M.divide(p);if("Quaternion"===b||"Quaternion"===Q){const b=M.clone();return b.x/=p.x,b.y/=p.y,b.z/=p.z,b.w/=p.w,b}if("Quaternion"===b||"Vector4"===Q)return new T.Vector4(M.x,M.y,M.z,M.w).divideInPlace(p);if("Vector4"===b||"Quaternion"===Q)return M.divide(p);if((0,W.e)(b,Q)){var q;if(null!==(q=this.config)&&void 0!==q&&q.useMatrixPerComponent){const Q=M.m;for(let M=0;M<Q.length;M++)Q[M]/=p.m[M];return"Matrix2D"===b?new o.d(Q):"Matrix3D"===b?new o.h(Q):T.Matrix.sp(Q)}return M.divide(p)}var B;if(null!==(B=this.config)&&void 0!==B&&B.preventIntegerFloatArithmetic&&typeof M!==typeof p)throw new Error("Cannot add different types of numbers.");return(0,W.r)(M)/(0,W.r)(p)}}(0,Q.g)("FlowGraphDivideBlock",K);class D extends u{constructor(M){super(q.q,(M=>this._random(M)),"FlowGraphRandomBlock",M),this.min=this.registerDataInput("min",q.q,(null===M||void 0===M?void 0:M.min)??0),this.max=this.registerDataInput("max",q.q,(null===M||void 0===M?void 0:M.max)??1),null!==M&&void 0!==M&&M.seed&&(this._seed=M.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const M=1e4*Math.sin(this._seed++);return M-Math.floor(M)}return Math.random()}_random(M){const p=this.min.getValue(M),b=this.max.getValue(M);return this._getRandomValue()*(b-p)+p}}(0,Q.g)("FlowGraphRandomBlock",D);class a extends u{constructor(M){super(q.q,(()=>Math.E),"FlowGraphEBlock",M)}}(0,Q.g)("FlowGraphEBlock",a);class s extends u{constructor(M){super(q.q,(()=>Math.PI),"FlowGraphPIBlock",M)}}(0,Q.g)("FlowGraphPIBlock",s);class S extends u{constructor(M){super(q.q,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",M)}}(0,Q.g)("FlowGraphInfBlock",S);class f extends u{constructor(M){super(q.q,(()=>Number.NaN),"FlowGraphNaNBlock",M)}}function R(M,p){switch((0,W.m)(M)){case"FlowGraphInteger":return new F.e(p(M.value));case"Vector2":return new T.Vector2(p(M.x),p(M.y));case"Ap":return new T.Ap(p(M.x),p(M.y),p(M.z));case"Vector4":return new T.Vector4(p(M.x),p(M.y),p(M.z),p(M.w));case"Quaternion":return new T.Quaternion(p(M.x),p(M.y),p(M.z),p(M.w));case"Matrix":return T.Matrix.sp(M.m.map(p));case"Matrix2D":return new o.d(M.m.map(p));case"Matrix3D":return new o.h(M.m.map(p));default:return p(M)}}(0,Q.g)("FlowGraphNaNBlock",f);class y extends O.b{constructor(M){super(q.q,q.q,(M=>this._polymorphicAbs(M)),"FlowGraphAbsBlock",M)}_polymorphicAbs(M){return R(M,Math.abs)}}(0,Q.g)("FlowGraphAbsBlock",y);class x extends O.b{constructor(M){super(q.q,q.q,(M=>this._polymorphicSign(M)),"FlowGraphSignBlock",M)}_polymorphicSign(M){return R(M,Math.sign)}}(0,Q.g)("FlowGraphSignBlock",x);class P extends O.b{constructor(M){super(q.q,q.q,(M=>this._polymorphicTrunc(M)),"FlowGraphTruncBlock",M)}_polymorphicTrunc(M){return R(M,Math.trunc)}}(0,Q.g)("FlowGraphTruncBlock",P);class L extends O.b{constructor(M){super(q.q,q.q,(M=>this._polymorphicFloor(M)),"FlowGraphFloorBlock",M)}_polymorphicFloor(M){return R(M,Math.floor)}}(0,Q.g)("FlowGraphFloorBlock",L);class N extends O.b{constructor(M){super(q.c,q.c,(M=>this._polymorphicCeiling(M)),"FlowGraphCeilBlock",M)}_polymorphicCeiling(M){return R(M,Math.ceil)}}(0,Q.g)("FlowGraphCeilBlock",N);class r extends O.b{constructor(M){super(q.c,q.c,(M=>this._polymorphicRound(M)),"FlowGraphRoundBlock",M)}_polymorphicRound(M){return R(M,(M=>{var p;return M<0&&null!==(p=this.config)&&void 0!==p&&p.roundHalfAwayFromZero?-Math.round(-M):Math.round(M)}))}}(0,Q.g)("FlowGraphRoundBlock",r);class Y extends O.b{constructor(M){super(q.c,q.c,(M=>this._polymorphicFraction(M)),"FlowGraphFractBlock",M)}_polymorphicFraction(M){return R(M,(M=>M-Math.floor(M)))}}(0,Q.g)("FlowGraphFractBlock",Y);class w extends O.b{constructor(M){super(q.c,q.c,(M=>this._polymorphicNeg(M)),"FlowGraphNegationBlock",M)}_polymorphicNeg(M){return R(M,(M=>-M))}}function E(M,p,b){switch((0,W.m)(M)){case"FlowGraphInteger":return new F.e(b(M.value,p.value));case"Vector2":return new T.Vector2(b(M.x,p.x),b(M.y,p.y));case"Ap":return new T.Ap(b(M.x,p.x),b(M.y,p.y),b(M.z,p.z));case"Vector4":return new T.Vector4(b(M.x,p.x),b(M.y,p.y),b(M.z,p.z),b(M.w,p.w));case"Quaternion":return new T.Quaternion(b(M.x,p.x),b(M.y,p.y),b(M.z,p.z),b(M.w,p.w));case"Matrix":return T.Matrix.sp(M.m.map(((M,Q)=>b(M,p.m[Q]))));case"Matrix2D":return new o.d(M.m.map(((M,Q)=>b(M,p.m[Q]))));case"Matrix3D":return new o.h(M.m.map(((M,Q)=>b(M,p.m[Q]))));default:return b((0,W.r)(M),(0,W.r)(p))}}(0,Q.g)("FlowGraphNegationBlock",w);class n extends B.c{constructor(M){super(q.c,q.c,q.c,((M,p)=>this._polymorphicRemainder(M,p)),"FlowGraphModuloBlock",M)}_polymorphicRemainder(M,p){return E(M,p,((M,p)=>M%p))}}(0,Q.g)("FlowGraphModuloBlock",n);class g extends B.c{constructor(M){super(q.c,q.c,q.c,((M,p)=>this._polymorphicMin(M,p)),"FlowGraphMinBlock",M)}_polymorphicMin(M,p){return E(M,p,Math.min)}}(0,Q.g)("FlowGraphMinBlock",g);class U extends B.c{constructor(M){super(q.c,q.c,q.c,((M,p)=>this._polymorphicMax(M,p)),"FlowGraphMaxBlock",M)}_polymorphicMax(M,p){return E(M,p,Math.max)}}function c(M,p,b){return Math.min(Math.max(M,Math.min(p,b)),Math.max(p,b))}function d(M,p,b,Q){switch((0,W.m)(M)){case"FlowGraphInteger":return new F.e(Q(M.value,p.value,b.value));case"Vector2":return new T.Vector2(Q(M.x,p.x,b.x),Q(M.y,p.y,b.y));case"Ap":return new T.Ap(Q(M.x,p.x,b.x),Q(M.y,p.y,b.y),Q(M.z,p.z,b.z));case"Vector4":return new T.Vector4(Q(M.x,p.x,b.x),Q(M.y,p.y,b.y),Q(M.z,p.z,b.z),Q(M.w,p.w,b.w));case"Quaternion":return new T.Quaternion(Q(M.x,p.x,b.x),Q(M.y,p.y,b.y),Q(M.z,p.z,b.z),Q(M.w,p.w,b.w));case"Matrix":return T.Matrix.sp(M.m.map(((M,q)=>Q(M,p.m[q],b.m[q]))));case"Matrix2D":return new o.d(M.m.map(((M,q)=>Q(M,p.m[q],b.m[q]))));case"Matrix3D":return new o.h(M.m.map(((M,q)=>Q(M,p.m[q],b.m[q]))));default:return Q((0,W.r)(M),(0,W.r)(p),(0,W.r)(b))}}(0,Q.g)("FlowGraphMaxBlock",U);class V extends H{constructor(M){super(q.c,q.c,q.c,q.c,((M,p,b)=>this._polymorphicClamp(M,p,b)),"FlowGraphClampBlock",M)}_polymorphicClamp(M,p,b){return d(M,p,b,c)}}function h(M){return Math.min(Math.max(M,0),1)}(0,Q.g)("FlowGraphClampBlock",V);class I extends O.b{constructor(M){super(q.c,q.c,(M=>this._polymorphicSaturate(M)),"FlowGraphSaturateBlock",M)}_polymorphicSaturate(M){return R(M,h)}}function Z(M,p,b){return(1-b)*M+b*p}(0,Q.g)("FlowGraphSaturateBlock",I);class J extends H{constructor(M){super(q.c,q.c,q.c,q.c,((M,p,b)=>this._polymorphicInterpolate(M,p,b)),"FlowGraphMathInterpolationBlock",M)}_polymorphicInterpolate(M,p,b){return d(M,p,b,Z)}}(0,Q.g)("FlowGraphMathInterpolationBlock",J);class v extends B.c{constructor(M){super(q.c,q.c,q.d,((M,p)=>this._polymorphicEq(M,p)),"FlowGraphEqualityBlock",M)}_polymorphicEq(M,p){const b=(0,W.m)(M),Q=(0,W.m)(p);return typeof M===typeof p&&((0,W.i)(b,Q)||(0,W.e)(b,Q)||(0,W.d)(b,Q)?M.equals(p):M===p)}}function z(M,p,b){if((0,W.v)(M)&&(0,W.v)(p))return b((0,W.r)(M),(0,W.r)(p));throw new Error(`Cannot compare ${M} and ${p}`)}(0,Q.g)("FlowGraphEqualityBlock",v);class t extends B.c{constructor(M){super(q.c,q.c,q.d,((M,p)=>this._polymorphicLessThan(M,p)),"FlowGraphLessThanBlock",M)}_polymorphicLessThan(M,p){return z(M,p,((M,p)=>M<p))}}(0,Q.g)("FlowGraphLessThanBlock",t);class e extends B.c{constructor(M){super(q.c,q.c,q.d,((M,p)=>this._polymorphicLessThanOrEqual(M,p)),"FlowGraphLessThanOrEqualBlock",M)}_polymorphicLessThanOrEqual(M,p){return z(M,p,((M,p)=>M<=p))}}(0,Q.g)("FlowGraphLessThanOrEqualBlock",e);class G extends B.c{constructor(M){super(q.c,q.c,q.d,((M,p)=>this._polymorphicGreaterThan(M,p)),"FlowGraphGreaterThanBlock",M)}_polymorphicGreaterThan(M,p){return z(M,p,((M,p)=>M>p))}}(0,Q.g)("FlowGraphGreaterThanBlock",G);class mM extends B.c{constructor(M){super(q.c,q.c,q.d,((M,p)=>this._polymorphicGreaterThanOrEqual(M,p)),"FlowGraphGreaterThanOrEqualBlock",M)}_polymorphicGreaterThanOrEqual(M,p){return z(M,p,((M,p)=>M>=p))}}(0,Q.g)("FlowGraphGreaterThanOrEqualBlock",mM);class C extends O.b{constructor(M){super(q.c,q.d,(M=>this._polymorphicIsNan(M)),"FlowGraphIsNaNBlock",M)}_polymorphicIsNan(M){if((0,W.v)(M,!0))return isNaN((0,W.r)(M));throw new Error(`Cannot get NaN of ${M}`)}}(0,Q.g)("FlowGraphIsNaNBlock",C);class X extends O.b{constructor(M){super(q.c,q.d,(M=>this._polymorphicIsInf(M)),"FlowGraphIsInfBlock",M)}_polymorphicIsInf(M){if((0,W.v)(M))return!isFinite((0,W.r)(M));throw new Error(`Cannot get isInf of ${M}`)}}(0,Q.g)("FlowGraphIsInfBlock",X);class l extends O.b{constructor(M){super(q.c,q.c,(M=>this._polymorphicDegToRad(M)),"FlowGraphDegToRadBlock",M)}_degToRad(M){return M*Math.PI/180}_polymorphicDegToRad(M){return R(M,this._degToRad)}}(0,Q.g)("FlowGraphDegToRadBlock",l);class MM extends O.b{constructor(M){super(q.c,q.c,(M=>this._polymorphicRadToDeg(M)),"FlowGraphRadToDegBlock",M)}_radToDeg(M){return 180*M/Math.PI}_polymorphicRadToDeg(M){return R(M,this._radToDeg)}}(0,Q.g)("FlowGraphRadToDegBlock",MM);class pM extends O.b{constructor(M){super(q.q,q.q,(M=>this._polymorphicSin(M)),"FlowGraphSinBlock",M)}_polymorphicSin(M){return R(M,Math.sin)}}class bM extends O.b{constructor(M){super(q.q,q.q,(M=>this._polymorphicCos(M)),"FlowGraphCosBlock",M)}_polymorphicCos(M){return R(M,Math.cos)}}class QM extends O.b{constructor(M){super(q.q,q.q,(M=>this._polymorphicTan(M)),"FlowGraphTanBlock",M)}_polymorphicTan(M){return R(M,Math.tan)}}class qM extends O.b{constructor(M){super(q.q,q.q,(M=>this._polymorphicAsin(M)),"FlowGraphASinBlock",M)}_polymorphicAsin(M){return R(M,Math.asin)}}(0,Q.g)("FlowGraphASinBlock",qM);class BM extends O.b{constructor(M){super(q.q,q.q,(M=>this._polymorphicAcos(M)),"FlowGraphACosBlock",M)}_polymorphicAcos(M){return R(M,Math.acos)}}(0,Q.g)("FlowGraphACosBlock",BM);class kM extends O.b{constructor(M){super(q.q,q.q,(M=>this._polymorphicAtan(M)),"FlowGraphATanBlock",M)}_polymorphicAtan(M){return R(M,Math.atan)}}(0,Q.g)("FlowGraphATanBlock",kM);class uM extends B.c{constructor(M){super(q.c,q.c,q.c,((M,p)=>this._polymorphicAtan2(M,p)),"FlowGraphATan2Block",M)}_polymorphicAtan2(M,p){return E(M,p,Math.atan2)}}(0,Q.g)("FlowGraphATan2Block",uM);class TM extends O.b{constructor(M){super(q.c,q.c,(M=>this._polymorphicSinh(M)),"FlowGraphSinhBlock",M)}_polymorphicSinh(M){return R(M,Math.sinh)}}(0,Q.g)("FlowGraphSinhBlock",TM);class OM extends O.b{constructor(M){super(q.c,q.c,(M=>this._polymorphicCosh(M)),"FlowGraphCoshBlock",M)}_polymorphicCosh(M){return R(M,Math.cosh)}}(0,Q.g)("FlowGraphCoshBlock",OM);class HM extends O.b{constructor(M){super(q.c,q.c,(M=>this._polymorphicTanh(M)),"FlowGraphTanhBlock",M)}_polymorphicTanh(M){return R(M,Math.tanh)}}(0,Q.g)("FlowGraphTanhBlock",HM);class FM extends O.b{constructor(M){super(q.c,q.q,(M=>this._polymorphicAsinh(M)),"FlowGraphASinhBlock",M)}_polymorphicAsinh(M){return R(M,Math.asinh)}}(0,Q.g)("FlowGraphASinhBlock",FM);class oM extends O.b{constructor(M){super(q.c,q.q,(M=>this._polymorphicAcosh(M)),"FlowGraphACoshBlock",M)}_polymorphicAcosh(M){return R(M,Math.acosh)}}(0,Q.g)("FlowGraphACoshBlock",oM);class WM extends O.b{constructor(M){super(q.c,q.q,(M=>this._polymorphicAtanh(M)),"FlowGraphATanhBlock",M)}_polymorphicAtanh(M){return R(M,Math.atanh)}}(0,Q.g)("FlowGraphATanhBlock",WM);class iM extends O.b{constructor(M){super(q.c,q.q,(M=>this._polymorphicExp(M)),"FlowGraphExponentialBlock",M)}_polymorphicExp(M){return R(M,Math.exp)}}(0,Q.g)("FlowGraphExponentialBlock",iM);class AM extends O.b{constructor(M){super(q.c,q.q,(M=>this._polymorphicLog(M)),"FlowGraphLogBlock",M)}_polymorphicLog(M){return R(M,Math.log)}}(0,Q.g)("FlowGraphLogBlock",AM);class jM extends O.b{constructor(M){super(q.c,q.q,(M=>this._polymorphicLog2(M)),"FlowGraphLog2Block",M)}_polymorphicLog2(M){return R(M,Math.log2)}}(0,Q.g)("FlowGraphLog2Block",jM);class KM extends O.b{constructor(M){super(q.c,q.q,(M=>this._polymorphicLog10(M)),"FlowGraphLog10Block",M)}_polymorphicLog10(M){return R(M,Math.log10)}}(0,Q.g)("FlowGraphLog10Block",KM);class DM extends O.b{constructor(M){super(q.c,q.q,(M=>this._polymorphicSqrt(M)),"FlowGraphSquareRootBlock",M)}_polymorphicSqrt(M){return R(M,Math.sqrt)}}(0,Q.g)("FlowGraphSquareRootBlock",DM);class aM extends O.b{constructor(M){super(q.c,q.q,(M=>this._polymorphicCubeRoot(M)),"FlowGraphCubeRootBlock",M)}_polymorphicCubeRoot(M){return R(M,Math.cbrt)}}(0,Q.g)("FlowGraphCubeRootBlock",aM);class sM extends B.c{constructor(M){super(q.c,q.q,q.q,((M,p)=>this._polymorphicPow(M,p)),"FlowGraphPowerBlock",M)}_polymorphicPow(M,p){return E(M,p,Math.pow)}}(0,Q.g)("FlowGraphPowerBlock",sM);class SM extends O.b{constructor(M){super((0,q.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,q.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(M=>"boolean"===typeof M?!M:"number"===typeof M?~M:new F.e(~M.value)),"FlowGraphBitwiseNotBlock",M)}}(0,Q.g)("FlowGraphBitwiseNotBlock",SM);class fM extends B.c{constructor(M){super((0,q.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,q.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,q.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),((M,p)=>{if("boolean"===typeof M&&"boolean"===typeof p)return M&&p;if("number"===typeof M&&"number"===typeof p)return M&p;if("object"===typeof M&&"object"===typeof p)return new F.e(M.value&p.value);throw new Error(`Cannot perform bitwise AND on ${M} and ${p}`)}),"FlowGraphBitwiseAndBlock",M)}}(0,Q.g)("FlowGraphBitwiseAndBlock",fM);class RM extends B.c{constructor(M){super((0,q.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,q.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,q.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),((M,p)=>{if("boolean"===typeof M&&"boolean"===typeof p)return M||p;if("number"===typeof M&&"number"===typeof p)return M|p;if("object"===typeof M&&"object"===typeof p)return new F.e(M.value|p.value);throw new Error(`Cannot perform bitwise OR on ${M} and ${p}`)}),"FlowGraphBitwiseOrBlock",M)}}(0,Q.g)("FlowGraphBitwiseOrBlock",RM);class yM extends B.c{constructor(M){super((0,q.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,q.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),(0,q.P)((null===M||void 0===M?void 0:M.valueType)||"FlowGraphInteger"),((M,p)=>{if("boolean"===typeof M&&"boolean"===typeof p)return M!==p;if("number"===typeof M&&"number"===typeof p)return M^p;if("object"===typeof M&&"object"===typeof p)return new F.e(M.value^p.value);throw new Error(`Cannot perform bitwise XOR on ${M} and ${p}`)}),"FlowGraphBitwiseXorBlock",M)}}(0,Q.g)("FlowGraphBitwiseXorBlock",yM);class xM extends B.c{constructor(M){super(q.e,q.e,q.e,((M,p)=>new F.e(M.value<<p.value)),"FlowGraphBitwiseLeftShiftBlock",M)}}(0,Q.g)("FlowGraphBitwiseLeftShiftBlock",xM);class PM extends B.c{constructor(M){super(q.e,q.e,q.e,((M,p)=>new F.e(M.value>>p.value)),"FlowGraphBitwiseRightShiftBlock",M)}}(0,Q.g)("FlowGraphBitwiseRightShiftBlock",PM);class LM extends O.b{constructor(M){super(q.e,q.e,(M=>new F.e(Math.clz32(M.value))),"FlowGraphLeadingZerosBlock",M)}}(0,Q.g)("FlowGraphLeadingZerosBlock",LM);class NM extends O.b{constructor(M){super(q.e,q.e,(M=>new F.e(M.value?31-Math.clz32(M.value&-M.value):32)),"FlowGraphTrailingZerosBlock",M)}}(0,Q.g)("FlowGraphTrailingZerosBlock",NM);class rM extends O.b{constructor(M){super(q.e,q.e,(M=>new F.e(function(M){let p=0;for(;M;)p+=1&M,M>>=1;return p}(M.value))),"FlowGraphOneBitsCounterBlock",M)}}(0,Q.g)("FlowGraphOneBitsCounterBlock",rM)},14987:(M,p,b)=>{b.d(p,{c:()=>q});var Q=b(14995);class q extends Q.d{constructor(M,p,b,Q,q,B){super(b,B),this._operation=Q,this._className=q,this.a=this.registerDataInput("a",M),this.b=this.registerDataInput("b",p)}_doOperation(M){const p=this.a.getValue(M),b=this.b.getValue(M);return this._operation(p,b)}getClassName(){return this._className}}},14995:(M,p,b)=>{b.d(p,{d:()=>u});var Q=b(13492),q=b(13477);const B="cachedOperationValue",k="cachedExecutionId";class u extends Q.b{constructor(M,p){super(p),this.value=this.registerDataOutput("value",M),this.isValid=this.registerDataOutput("isValid",q.d)}_updateOutputs(M){const p=M._getExecutionVariable(this,k,-1),b=M._getExecutionVariable(this,B,null);if(void 0!==b&&null!==b&&p===M.executionId)this.isValid.setValue(!0,M),this.value.setValue(b,M);else try{const p=this._doOperation(M);if(void 0===p||null===p)return void this.isValid.setValue(!1,M);M._setExecutionVariable(this,B,p),M._setExecutionVariable(this,k,M.executionId),this.value.setValue(p,M),this.isValid.setValue(!0,M)}catch(Q){this.isValid.setValue(!1,M)}}}},15001:(M,p,b)=>{b.d(p,{b:()=>q});var Q=b(14995);class q extends Q.d{constructor(M,p,b,Q,q){super(p,q),this._operation=b,this._className=Q,this.a=this.registerDataInput("a",M)}_doOperation(M){return this._operation(this.a.getValue(M))}getClassName(){return this._className}}}}]);