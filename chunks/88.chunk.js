"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[88],{14449:(o,H,n)=>{n.r(H),n.d(H,{FlowGraphAbsBlock:()=>P,FlowGraphAcosBlock:()=>go,FlowGraphAcoshBlock:()=>Ao,FlowGraphAddBlock:()=>x,FlowGraphAsinBlock:()=>ko,FlowGraphAsinhBlock:()=>co,FlowGraphAtan2Block:()=>Yo,FlowGraphAtanBlock:()=>Oo,FlowGraphAtanhBlock:()=>lo,FlowGraphBitwiseAndBlock:()=>jo,FlowGraphBitwiseLeftShiftBlock:()=>bo,FlowGraphBitwiseNotBlock:()=>po,FlowGraphBitwiseOrBlock:()=>mo,FlowGraphBitwiseRightShiftBlock:()=>eo,FlowGraphBitwiseXorBlock:()=>Po,FlowGraphCeilBlock:()=>M,FlowGraphClampBlock:()=>t,FlowGraphCosBlock:()=>no,FlowGraphCoshBlock:()=>So,FlowGraphCubeRootBlock:()=>ho,FlowGraphDegToRadBlock:()=>L,FlowGraphDivideBlock:()=>J,FlowGraphEBlock:()=>h,FlowGraphEqualityBlock:()=>v,FlowGraphExpBlock:()=>xo,FlowGraphFloorBlock:()=>Z,FlowGraphFractionBlock:()=>f,FlowGraphGreaterThanBlock:()=>d,FlowGraphGreaterThanOrEqualBlock:()=>R,FlowGraphInfBlock:()=>p,FlowGraphIsInfinityBlock:()=>i,FlowGraphIsNanBlock:()=>W,FlowGraphLeadingZerosBlock:()=>Zo,FlowGraphLessThanBlock:()=>r,FlowGraphLessThanOrEqualBlock:()=>u,FlowGraphLog10Block:()=>Jo,FlowGraphLog2Block:()=>Vo,FlowGraphLogBlock:()=>zo,FlowGraphMathInterpolationBlock:()=>I,FlowGraphMaxBlock:()=>a,FlowGraphMinBlock:()=>T,FlowGraphModuloBlock:()=>D,FlowGraphMultiplyBlock:()=>V,FlowGraphNaNBlock:()=>j,FlowGraphNegationBlock:()=>B,FlowGraphOneBitsCounterBlock:()=>Ko,FlowGraphPiBlock:()=>Q,FlowGraphPowerBlock:()=>Qo,FlowGraphRadToDegBlock:()=>oo,FlowGraphRandomBlock:()=>N,FlowGraphRoundBlock:()=>K,FlowGraphSaturateBlock:()=>s,FlowGraphSignBlock:()=>b,FlowGraphSinBlock:()=>Ho,FlowGraphSinhBlock:()=>yo,FlowGraphSquareRootBlock:()=>No,FlowGraphSubtractBlock:()=>z,FlowGraphTanBlock:()=>Eo,FlowGraphTanhBlock:()=>Go,FlowGraphTrailingZerosBlock:()=>Mo,FlowGraphTruncBlock:()=>e});var E=n(11140),k=n(12933),g=n(14458),O=n(14464);class Y extends O.d{constructor(o,H,n,E){super(o,E),this._operation=H,this._className=n}_doOperation(o){return this._operation(o)}getClassName(){return this._className}}var y=n(11189),S=n(14469);class G extends O.d{constructor(o,H,n,E,k,g,O){super(E,O),this._operation=k,this._className=g,this.a=this.registerDataInput("a",o),this.b=this.registerDataInput("b",H),this.c=this.registerDataInput("c",n)}_doOperation(o){return this._operation(this.a.getValue(o),this.b.getValue(o),this.c.getValue(o))}getClassName(){return this._className}}var c=n(12929),A=n(12939),l=n(12970);class x extends g.d{constructor(o){super((0,k.L)(null===o||void 0===o?void 0:o.type),(0,k.L)(null===o||void 0===o?void 0:o.type),(0,k.L)(null===o||void 0===o?void 0:o.type),((o,H)=>this._polymorphicAdd(o,H)),"FlowGraphAddBlock",o)}_polymorphicAdd(o,H){const n=(0,l.j)(o),E=(0,l.j)(H);if((0,l.h)(n,E)||(0,l.g)(n,E)||(0,l.c)(n,E))return o.add(H);if("Quaternion"===n||"Vector4"===E)return new y.Vector4(o.x,o.y,o.z,o.w).addInPlace(H);if("Vector4"===n||"Quaternion"===E)return o.add(H);var k;if(null!==(k=this.config)&&void 0!==k&&k.preventIntegerFloatArithmetic&&typeof o!==typeof H)throw new Error("Cannot add different types of numbers.");return(0,l.n)(o)+(0,l.n)(H)}}(0,E.e)("FlowGraphAddBlock",x);class z extends g.d{constructor(o){super((0,k.L)(null===o||void 0===o?void 0:o.type),(0,k.L)(null===o||void 0===o?void 0:o.type),(0,k.L)(null===o||void 0===o?void 0:o.type),((o,H)=>this._polymorphicSubtract(o,H)),"FlowGraphSubtractBlock",o)}_polymorphicSubtract(o,H){const n=(0,l.j)(o),E=(0,l.j)(H);if((0,l.h)(n,E)||(0,l.c)(n,E)||(0,l.g)(n,E))return o.zH(H);if("Quaternion"===n||"Vector4"===E)return new y.Vector4(o.x,o.y,o.z,o.w).tG(H);if("Vector4"===n||"Quaternion"===E)return o.zH(H);var k;if(null!==(k=this.config)&&void 0!==k&&k.preventIntegerFloatArithmetic&&typeof o!==typeof H)throw new Error("Cannot add different types of numbers.");return(0,l.n)(o)-(0,l.n)(H)}}(0,E.e)("FlowGraphSubtractBlock",z);class V extends g.d{constructor(o){super((0,k.L)(null===o||void 0===o?void 0:o.type),(0,k.L)(null===o||void 0===o?void 0:o.type),(0,k.L)(null===o||void 0===o?void 0:o.type),((o,H)=>this._polymorphicMultiply(o,H)),"FlowGraphMultiplyBlock",o)}_polymorphicMultiply(o,H){const n=(0,l.j)(o),E=(0,l.j)(H);if((0,l.h)(n,E)||(0,l.c)(n,E))return o.multiply(H);if("Quaternion"===n||"Vector4"===E)return new y.Vector4(o.x,o.y,o.z,o.w).multiplyInPlace(H);if("Vector4"===n||"Quaternion"===E)return o.multiply(H);if((0,l.g)(n,E)){var k;if(null!==(k=this.config)&&void 0!==k&&k.useMatrixPerComponent){const E=o.m;for(let o=0;o<E.length;o++)E[o]*=H.m[o];return"Matrix2D"===n?new A.b(E):"Matrix3D"===n?new A.e(E):y.Matrix.Mg(E)}return H.multiply(o)}var g;if(null!==(g=this.config)&&void 0!==g&&g.preventIntegerFloatArithmetic&&typeof o!==typeof H)throw new Error("Cannot add different types of numbers.");return(0,l.n)(o)*(0,l.n)(H)}}(0,E.e)("FlowGraphMultiplyBlock",V);class J extends g.d{constructor(o){super((0,k.L)(null===o||void 0===o?void 0:o.type),(0,k.L)(null===o||void 0===o?void 0:o.type),(0,k.L)(null===o||void 0===o?void 0:o.type),((o,H)=>this._polymorphicDivide(o,H)),"FlowGraphDivideBlock",o)}_polymorphicDivide(o,H){const n=(0,l.j)(o),E=(0,l.j)(H);if((0,l.h)(n,E)||(0,l.c)(n,E))return o.divide(H);if("Quaternion"===n||"Quaternion"===E){const n=o.clone();return n.x/=H.x,n.y/=H.y,n.z/=H.z,n.w/=H.w,n}if("Quaternion"===n||"Vector4"===E)return new y.Vector4(o.x,o.y,o.z,o.w).divideInPlace(H);if("Vector4"===n||"Quaternion"===E)return o.divide(H);if((0,l.g)(n,E)){var k;if(null!==(k=this.config)&&void 0!==k&&k.useMatrixPerComponent){const E=o.m;for(let o=0;o<E.length;o++)E[o]/=H.m[o];return"Matrix2D"===n?new A.b(E):"Matrix3D"===n?new A.e(E):y.Matrix.Mg(E)}return o.divide(H)}var g;if(null!==(g=this.config)&&void 0!==g&&g.preventIntegerFloatArithmetic&&typeof o!==typeof H)throw new Error("Cannot add different types of numbers.");return(0,l.n)(o)/(0,l.n)(H)}}(0,E.e)("FlowGraphDivideBlock",J);class N extends Y{constructor(o){super(k.r,(o=>this._random(o)),"FlowGraphRandomBlock",o),this.min=this.registerDataInput("min",k.r,(null===o||void 0===o?void 0:o.min)??0),this.max=this.registerDataInput("max",k.r,(null===o||void 0===o?void 0:o.max)??1),null!==o&&void 0!==o&&o.seed&&(this._seed=o.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const o=1e4*Math.sin(this._seed++);return o-Math.floor(o)}return Math.random()}_random(o){const H=this.min.getValue(o),n=this.max.getValue(o);return this._getRandomValue()*(n-H)+H}}(0,E.e)("FlowGraphRandomBlock",N);class h extends Y{constructor(o){super(k.r,(()=>Math.E),"FlowGraphEBlock",o)}}(0,E.e)("FlowGraphEBlock",h);class Q extends Y{constructor(o){super(k.r,(()=>Math.PI),"FlowGraphPIBlock",o)}}(0,E.e)("FlowGraphPIBlock",Q);class p extends Y{constructor(o){super(k.r,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",o)}}(0,E.e)("FlowGraphInfBlock",p);class j extends Y{constructor(o){super(k.r,(()=>Number.NaN),"FlowGraphNaNBlock",o)}}function m(o,H){switch((0,l.j)(o)){case"FlowGraphInteger":return new c.c(H(o.value));case"Vector2":return new y.Vector2(H(o.x),H(o.y));case"xH":return new y.xH(H(o.x),H(o.y),H(o.z));case"Vector4":return new y.Vector4(H(o.x),H(o.y),H(o.z),H(o.w));case"Quaternion":return new y.Quaternion(H(o.x),H(o.y),H(o.z),H(o.w));case"Matrix":return y.Matrix.Mg(o.m.map(H));case"Matrix2D":return new A.b(o.m.map(H));case"Matrix3D":return new A.e(o.m.map(H));default:return H(o)}}(0,E.e)("FlowGraphNaNBlock",j);class P extends S.d{constructor(o){super(k.r,k.r,(o=>this._polymorphicAbs(o)),"FlowGraphAbsBlock",o)}_polymorphicAbs(o){return m(o,Math.abs)}}(0,E.e)("FlowGraphAbsBlock",P);class b extends S.d{constructor(o){super(k.r,k.r,(o=>this._polymorphicSign(o)),"FlowGraphSignBlock",o)}_polymorphicSign(o){return m(o,Math.sign)}}(0,E.e)("FlowGraphSignBlock",b);class e extends S.d{constructor(o){super(k.r,k.r,(o=>this._polymorphicTrunc(o)),"FlowGraphTruncBlock",o)}_polymorphicTrunc(o){return m(o,Math.trunc)}}(0,E.e)("FlowGraphTruncBlock",e);class Z extends S.d{constructor(o){super(k.r,k.r,(o=>this._polymorphicFloor(o)),"FlowGraphFloorBlock",o)}_polymorphicFloor(o){return m(o,Math.floor)}}(0,E.e)("FlowGraphFloorBlock",Z);class M extends S.d{constructor(o){super(k.b,k.b,(o=>this._polymorphicCeiling(o)),"FlowGraphCeilBlock",o)}_polymorphicCeiling(o){return m(o,Math.ceil)}}(0,E.e)("FlowGraphCeilBlock",M);class K extends S.d{constructor(o){super(k.b,k.b,(o=>this._polymorphicRound(o)),"FlowGraphRoundBlock",o)}_polymorphicRound(o){return m(o,(o=>{var H;return o<0&&null!==(H=this.config)&&void 0!==H&&H.roundHalfAwayFromZero?-Math.round(-o):Math.round(o)}))}}(0,E.e)("FlowGraphRoundBlock",K);class f extends S.d{constructor(o){super(k.b,k.b,(o=>this._polymorphicFraction(o)),"FlowGraphFractBlock",o)}_polymorphicFraction(o){return m(o,(o=>o-Math.floor(o)))}}(0,E.e)("FlowGraphFractBlock",f);class B extends S.d{constructor(o){super(k.b,k.b,(o=>this._polymorphicNeg(o)),"FlowGraphNegationBlock",o)}_polymorphicNeg(o){return m(o,(o=>-o))}}function q(o,H,n){switch((0,l.j)(o)){case"FlowGraphInteger":return new c.c(n(o.value,H.value));case"Vector2":return new y.Vector2(n(o.x,H.x),n(o.y,H.y));case"xH":return new y.xH(n(o.x,H.x),n(o.y,H.y),n(o.z,H.z));case"Vector4":return new y.Vector4(n(o.x,H.x),n(o.y,H.y),n(o.z,H.z),n(o.w,H.w));case"Quaternion":return new y.Quaternion(n(o.x,H.x),n(o.y,H.y),n(o.z,H.z),n(o.w,H.w));case"Matrix":return y.Matrix.Mg(o.m.map(((o,E)=>n(o,H.m[E]))));case"Matrix2D":return new A.b(o.m.map(((o,E)=>n(o,H.m[E]))));case"Matrix3D":return new A.e(o.m.map(((o,E)=>n(o,H.m[E]))));default:return n((0,l.n)(o),(0,l.n)(H))}}(0,E.e)("FlowGraphNegationBlock",B);class D extends g.d{constructor(o){super(k.b,k.b,k.b,((o,H)=>this._polymorphicRemainder(o,H)),"FlowGraphModuloBlock",o)}_polymorphicRemainder(o,H){return q(o,H,((o,H)=>o%H))}}(0,E.e)("FlowGraphModuloBlock",D);class T extends g.d{constructor(o){super(k.b,k.b,k.b,((o,H)=>this._polymorphicMin(o,H)),"FlowGraphMinBlock",o)}_polymorphicMin(o,H){return q(o,H,Math.min)}}(0,E.e)("FlowGraphMinBlock",T);class a extends g.d{constructor(o){super(k.b,k.b,k.b,((o,H)=>this._polymorphicMax(o,H)),"FlowGraphMaxBlock",o)}_polymorphicMax(o,H){return q(o,H,Math.max)}}function F(o,H,n){return Math.min(Math.max(o,Math.min(H,n)),Math.max(H,n))}function C(o,H,n,E){switch((0,l.j)(o)){case"FlowGraphInteger":return new c.c(E(o.value,H.value,n.value));case"Vector2":return new y.Vector2(E(o.x,H.x,n.x),E(o.y,H.y,n.y));case"xH":return new y.xH(E(o.x,H.x,n.x),E(o.y,H.y,n.y),E(o.z,H.z,n.z));case"Vector4":return new y.Vector4(E(o.x,H.x,n.x),E(o.y,H.y,n.y),E(o.z,H.z,n.z),E(o.w,H.w,n.w));case"Quaternion":return new y.Quaternion(E(o.x,H.x,n.x),E(o.y,H.y,n.y),E(o.z,H.z,n.z),E(o.w,H.w,n.w));case"Matrix":return y.Matrix.Mg(o.m.map(((o,k)=>E(o,H.m[k],n.m[k]))));case"Matrix2D":return new A.b(o.m.map(((o,k)=>E(o,H.m[k],n.m[k]))));case"Matrix3D":return new A.e(o.m.map(((o,k)=>E(o,H.m[k],n.m[k]))));default:return E((0,l.n)(o),(0,l.n)(H),(0,l.n)(n))}}(0,E.e)("FlowGraphMaxBlock",a);class t extends G{constructor(o){super(k.b,k.b,k.b,k.b,((o,H,n)=>this._polymorphicClamp(o,H,n)),"FlowGraphClampBlock",o)}_polymorphicClamp(o,H,n){return C(o,H,n,F)}}function X(o){return Math.min(Math.max(o,0),1)}(0,E.e)("FlowGraphClampBlock",t);class s extends S.d{constructor(o){super(k.b,k.b,(o=>this._polymorphicSaturate(o)),"FlowGraphSaturateBlock",o)}_polymorphicSaturate(o){return m(o,X)}}function U(o,H,n){return(1-n)*o+n*H}(0,E.e)("FlowGraphSaturateBlock",s);class I extends G{constructor(o){super(k.b,k.b,k.b,k.b,((o,H,n)=>this._polymorphicInterpolate(o,H,n)),"FlowGraphMathInterpolationBlock",o)}_polymorphicInterpolate(o,H,n){return C(o,H,n,U)}}(0,E.e)("FlowGraphMathInterpolationBlock",I);class v extends g.d{constructor(o){super(k.b,k.b,k.d,((o,H)=>this._polymorphicEq(o,H)),"FlowGraphEqualityBlock",o)}_polymorphicEq(o,H){const n=(0,l.j)(o),E=(0,l.j)(H);return typeof o===typeof H&&((0,l.h)(n,E)||(0,l.g)(n,E)||(0,l.c)(n,E)?o.equals(H):o===H)}}function w(o,H,n){if((0,l.o)(o)&&(0,l.o)(H))return n((0,l.n)(o),(0,l.n)(H));throw new Error(`Cannot compare ${o} and ${H}`)}(0,E.e)("FlowGraphEqualityBlock",v);class r extends g.d{constructor(o){super(k.b,k.b,k.d,((o,H)=>this._polymorphicLessThan(o,H)),"FlowGraphLessThanBlock",o)}_polymorphicLessThan(o,H){return w(o,H,((o,H)=>o<H))}}(0,E.e)("FlowGraphLessThanBlock",r);class u extends g.d{constructor(o){super(k.b,k.b,k.d,((o,H)=>this._polymorphicLessThanOrEqual(o,H)),"FlowGraphLessThanOrEqualBlock",o)}_polymorphicLessThanOrEqual(o,H){return w(o,H,((o,H)=>o<=H))}}(0,E.e)("FlowGraphLessThanOrEqualBlock",u);class d extends g.d{constructor(o){super(k.b,k.b,k.d,((o,H)=>this._polymorphicGreaterThan(o,H)),"FlowGraphGreaterThanBlock",o)}_polymorphicGreaterThan(o,H){return w(o,H,((o,H)=>o>H))}}(0,E.e)("FlowGraphGreaterThanBlock",d);class R extends g.d{constructor(o){super(k.b,k.b,k.d,((o,H)=>this._polymorphicGreaterThanOrEqual(o,H)),"FlowGraphGreaterThanOrEqualBlock",o)}_polymorphicGreaterThanOrEqual(o,H){return w(o,H,((o,H)=>o>=H))}}(0,E.e)("FlowGraphGreaterThanOrEqualBlock",R);class W extends S.d{constructor(o){super(k.b,k.d,(o=>this._polymorphicIsNan(o)),"FlowGraphIsNaNBlock",o)}_polymorphicIsNan(o){if((0,l.o)(o,!0))return isNaN((0,l.n)(o));throw new Error(`Cannot get NaN of ${o}`)}}(0,E.e)("FlowGraphIsNaNBlock",W);class i extends S.d{constructor(o){super(k.b,k.d,(o=>this._polymorphicIsInf(o)),"FlowGraphIsInfBlock",o)}_polymorphicIsInf(o){if((0,l.o)(o))return!isFinite((0,l.n)(o));throw new Error(`Cannot get isInf of ${o}`)}}(0,E.e)("FlowGraphIsInfBlock",i);class L extends S.d{constructor(o){super(k.b,k.b,(o=>this._polymorphicDegToRad(o)),"FlowGraphDegToRadBlock",o)}_degToRad(o){return o*Math.PI/180}_polymorphicDegToRad(o){return m(o,this._degToRad)}}(0,E.e)("FlowGraphDegToRadBlock",L);class oo extends S.d{constructor(o){super(k.b,k.b,(o=>this._polymorphicRadToDeg(o)),"FlowGraphRadToDegBlock",o)}_radToDeg(o){return 180*o/Math.PI}_polymorphicRadToDeg(o){return m(o,this._radToDeg)}}(0,E.e)("FlowGraphRadToDegBlock",oo);class Ho extends S.d{constructor(o){super(k.r,k.r,(o=>this._polymorphicSin(o)),"FlowGraphSinBlock",o)}_polymorphicSin(o){return m(o,Math.sin)}}class no extends S.d{constructor(o){super(k.r,k.r,(o=>this._polymorphicCos(o)),"FlowGraphCosBlock",o)}_polymorphicCos(o){return m(o,Math.cos)}}class Eo extends S.d{constructor(o){super(k.r,k.r,(o=>this._polymorphicTan(o)),"FlowGraphTanBlock",o)}_polymorphicTan(o){return m(o,Math.tan)}}class ko extends S.d{constructor(o){super(k.r,k.r,(o=>this._polymorphicAsin(o)),"FlowGraphASinBlock",o)}_polymorphicAsin(o){return m(o,Math.asin)}}(0,E.e)("FlowGraphASinBlock",ko);class go extends S.d{constructor(o){super(k.r,k.r,(o=>this._polymorphicAcos(o)),"FlowGraphACosBlock",o)}_polymorphicAcos(o){return m(o,Math.acos)}}(0,E.e)("FlowGraphACosBlock",go);class Oo extends S.d{constructor(o){super(k.r,k.r,(o=>this._polymorphicAtan(o)),"FlowGraphATanBlock",o)}_polymorphicAtan(o){return m(o,Math.atan)}}(0,E.e)("FlowGraphATanBlock",Oo);class Yo extends g.d{constructor(o){super(k.b,k.b,k.b,((o,H)=>this._polymorphicAtan2(o,H)),"FlowGraphATan2Block",o)}_polymorphicAtan2(o,H){return q(o,H,Math.atan2)}}(0,E.e)("FlowGraphATan2Block",Yo);class yo extends S.d{constructor(o){super(k.b,k.b,(o=>this._polymorphicSinh(o)),"FlowGraphSinhBlock",o)}_polymorphicSinh(o){return m(o,Math.sinh)}}(0,E.e)("FlowGraphSinhBlock",yo);class So extends S.d{constructor(o){super(k.b,k.b,(o=>this._polymorphicCosh(o)),"FlowGraphCoshBlock",o)}_polymorphicCosh(o){return m(o,Math.cosh)}}(0,E.e)("FlowGraphCoshBlock",So);class Go extends S.d{constructor(o){super(k.b,k.b,(o=>this._polymorphicTanh(o)),"FlowGraphTanhBlock",o)}_polymorphicTanh(o){return m(o,Math.tanh)}}(0,E.e)("FlowGraphTanhBlock",Go);class co extends S.d{constructor(o){super(k.b,k.r,(o=>this._polymorphicAsinh(o)),"FlowGraphASinhBlock",o)}_polymorphicAsinh(o){return m(o,Math.asinh)}}(0,E.e)("FlowGraphASinhBlock",co);class Ao extends S.d{constructor(o){super(k.b,k.r,(o=>this._polymorphicAcosh(o)),"FlowGraphACoshBlock",o)}_polymorphicAcosh(o){return m(o,Math.acosh)}}(0,E.e)("FlowGraphACoshBlock",Ao);class lo extends S.d{constructor(o){super(k.b,k.r,(o=>this._polymorphicAtanh(o)),"FlowGraphATanhBlock",o)}_polymorphicAtanh(o){return m(o,Math.atanh)}}(0,E.e)("FlowGraphATanhBlock",lo);class xo extends S.d{constructor(o){super(k.b,k.r,(o=>this._polymorphicExp(o)),"FlowGraphExponentialBlock",o)}_polymorphicExp(o){return m(o,Math.exp)}}(0,E.e)("FlowGraphExponentialBlock",xo);class zo extends S.d{constructor(o){super(k.b,k.r,(o=>this._polymorphicLog(o)),"FlowGraphLogBlock",o)}_polymorphicLog(o){return m(o,Math.log)}}(0,E.e)("FlowGraphLogBlock",zo);class Vo extends S.d{constructor(o){super(k.b,k.r,(o=>this._polymorphicLog2(o)),"FlowGraphLog2Block",o)}_polymorphicLog2(o){return m(o,Math.log2)}}(0,E.e)("FlowGraphLog2Block",Vo);class Jo extends S.d{constructor(o){super(k.b,k.r,(o=>this._polymorphicLog10(o)),"FlowGraphLog10Block",o)}_polymorphicLog10(o){return m(o,Math.log10)}}(0,E.e)("FlowGraphLog10Block",Jo);class No extends S.d{constructor(o){super(k.b,k.r,(o=>this._polymorphicSqrt(o)),"FlowGraphSquareRootBlock",o)}_polymorphicSqrt(o){return m(o,Math.sqrt)}}(0,E.e)("FlowGraphSquareRootBlock",No);class ho extends S.d{constructor(o){super(k.b,k.r,(o=>this._polymorphicCubeRoot(o)),"FlowGraphCubeRootBlock",o)}_polymorphicCubeRoot(o){return m(o,Math.cbrt)}}(0,E.e)("FlowGraphCubeRootBlock",ho);class Qo extends g.d{constructor(o){super(k.b,k.r,k.r,((o,H)=>this._polymorphicPow(o,H)),"FlowGraphPowerBlock",o)}_polymorphicPow(o,H){return q(o,H,Math.pow)}}(0,E.e)("FlowGraphPowerBlock",Qo);class po extends S.d{constructor(o){super((0,k.L)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),(0,k.L)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),(o=>"boolean"===typeof o?!o:"number"===typeof o?~o:new c.c(~o.value)),"FlowGraphBitwiseNotBlock",o)}}(0,E.e)("FlowGraphBitwiseNotBlock",po);class jo extends g.d{constructor(o){super((0,k.L)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),(0,k.L)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),(0,k.L)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),((o,H)=>{if("boolean"===typeof o&&"boolean"===typeof H)return o&&H;if("number"===typeof o&&"number"===typeof H)return o&H;if("object"===typeof o&&"object"===typeof H)return new c.c(o.value&H.value);throw new Error(`Cannot perform bitwise AND on ${o} and ${H}`)}),"FlowGraphBitwiseAndBlock",o)}}(0,E.e)("FlowGraphBitwiseAndBlock",jo);class mo extends g.d{constructor(o){super((0,k.L)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),(0,k.L)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),(0,k.L)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),((o,H)=>{if("boolean"===typeof o&&"boolean"===typeof H)return o||H;if("number"===typeof o&&"number"===typeof H)return o|H;if("object"===typeof o&&"object"===typeof H)return new c.c(o.value|H.value);throw new Error(`Cannot perform bitwise OR on ${o} and ${H}`)}),"FlowGraphBitwiseOrBlock",o)}}(0,E.e)("FlowGraphBitwiseOrBlock",mo);class Po extends g.d{constructor(o){super((0,k.L)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),(0,k.L)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),(0,k.L)((null===o||void 0===o?void 0:o.valueType)||"FlowGraphInteger"),((o,H)=>{if("boolean"===typeof o&&"boolean"===typeof H)return o!==H;if("number"===typeof o&&"number"===typeof H)return o^H;if("object"===typeof o&&"object"===typeof H)return new c.c(o.value^H.value);throw new Error(`Cannot perform bitwise XOR on ${o} and ${H}`)}),"FlowGraphBitwiseXorBlock",o)}}(0,E.e)("FlowGraphBitwiseXorBlock",Po);class bo extends g.d{constructor(o){super(k.e,k.e,k.e,((o,H)=>new c.c(o.value<<H.value)),"FlowGraphBitwiseLeftShiftBlock",o)}}(0,E.e)("FlowGraphBitwiseLeftShiftBlock",bo);class eo extends g.d{constructor(o){super(k.e,k.e,k.e,((o,H)=>new c.c(o.value>>H.value)),"FlowGraphBitwiseRightShiftBlock",o)}}(0,E.e)("FlowGraphBitwiseRightShiftBlock",eo);class Zo extends S.d{constructor(o){super(k.e,k.e,(o=>new c.c(Math.clz32(o.value))),"FlowGraphLeadingZerosBlock",o)}}(0,E.e)("FlowGraphLeadingZerosBlock",Zo);class Mo extends S.d{constructor(o){super(k.e,k.e,(o=>new c.c(o.value?31-Math.clz32(o.value&-o.value):32)),"FlowGraphTrailingZerosBlock",o)}}(0,E.e)("FlowGraphTrailingZerosBlock",Mo);class Ko extends S.d{constructor(o){super(k.e,k.e,(o=>new c.c(function(o){let H=0;for(;o;)H+=1&o,o>>=1;return H}(o.value))),"FlowGraphOneBitsCounterBlock",o)}}(0,E.e)("FlowGraphOneBitsCounterBlock",Ko)},14458:(o,H,n)=>{n.d(H,{d:()=>k});var E=n(14464);class k extends E.d{constructor(o,H,n,E,k,g){super(n,g),this._operation=E,this._className=k,this.a=this.registerDataInput("a",o),this.b=this.registerDataInput("b",H)}_doOperation(o){const H=this.a.getValue(o),n=this.b.getValue(o);return this._operation(H,n)}getClassName(){return this._className}}},14464:(o,H,n)=>{n.d(H,{d:()=>Y});var E=n(12956),k=n(12933);const g="cachedOperationValue",O="cachedExecutionId";class Y extends E.c{constructor(o,H){super(H),this.value=this.registerDataOutput("value",o),this.isValid=this.registerDataOutput("isValid",k.d)}_updateOutputs(o){const H=o._getExecutionVariable(this,O,-1),n=o._getExecutionVariable(this,g,null);if(void 0!==n&&null!==n&&H===o.executionId)this.isValid.setValue(!0,o),this.value.setValue(n,o);else try{const H=this._doOperation(o);if(void 0===H||null===H)return void this.isValid.setValue(!1,o);o._setExecutionVariable(this,g,H),o._setExecutionVariable(this,O,o.executionId),this.value.setValue(H,o),this.isValid.setValue(!0,o)}catch(E){this.isValid.setValue(!1,o)}}}},14469:(o,H,n)=>{n.d(H,{d:()=>k});var E=n(14464);class k extends E.d{constructor(o,H,n,E,k){super(H,k),this._operation=n,this._className=E,this.a=this.registerDataInput("a",o)}_doOperation(o){return this._operation(this.a.getValue(o))}getClassName(){return this._className}}}}]);