"use strict";(self.agop5zpabxv=self.agop5zpabxv||[]).push([[88],{15501:(H,u,J)=>{J.r(u),J.d(u,{FlowGraphAbsBlock:()=>Y,FlowGraphAcosBlock:()=>hH,FlowGraphAcoshBlock:()=>PH,FlowGraphAddBlock:()=>l,FlowGraphAsinBlock:()=>UH,FlowGraphAsinhBlock:()=>GH,FlowGraphAtan2Block:()=>gH,FlowGraphAtanBlock:()=>wH,FlowGraphAtanhBlock:()=>mu,FlowGraphBitwiseAndBlock:()=>LH,FlowGraphBitwiseLeftShiftBlock:()=>FH,FlowGraphBitwiseNotBlock:()=>MH,FlowGraphBitwiseOrBlock:()=>ZH,FlowGraphBitwiseRightShiftBlock:()=>sH,FlowGraphBitwiseXorBlock:()=>YH,FlowGraphCeilBlock:()=>t,FlowGraphClampBlock:()=>i,FlowGraphCosBlock:()=>JH,FlowGraphCoshBlock:()=>bH,FlowGraphCubeRootBlock:()=>CH,FlowGraphDegToRadBlock:()=>Q,FlowGraphDivideBlock:()=>a,FlowGraphEBlock:()=>C,FlowGraphEqualityBlock:()=>o,FlowGraphExpBlock:()=>lH,FlowGraphFloorBlock:()=>A,FlowGraphFractionBlock:()=>c,FlowGraphGreaterThanBlock:()=>K,FlowGraphGreaterThanOrEqualBlock:()=>N,FlowGraphInfBlock:()=>M,FlowGraphIsInfinityBlock:()=>E,FlowGraphIsNanBlock:()=>q,FlowGraphLeadingZerosBlock:()=>AH,FlowGraphLessThanBlock:()=>x,FlowGraphLessThanOrEqualBlock:()=>z,FlowGraphLog10Block:()=>aH,FlowGraphLog2Block:()=>pH,FlowGraphLogBlock:()=>rH,FlowGraphMathInterpolationBlock:()=>D,FlowGraphMaxBlock:()=>X,FlowGraphMinBlock:()=>R,FlowGraphModuloBlock:()=>T,FlowGraphMultiplyBlock:()=>p,FlowGraphNaNBlock:()=>L,FlowGraphNegationBlock:()=>n,FlowGraphOneBitsCounterBlock:()=>eH,FlowGraphPiBlock:()=>j,FlowGraphPowerBlock:()=>jH,FlowGraphRadToDegBlock:()=>HH,FlowGraphRandomBlock:()=>k,FlowGraphRoundBlock:()=>e,FlowGraphSaturateBlock:()=>v,FlowGraphSignBlock:()=>F,FlowGraphSinBlock:()=>uH,FlowGraphSinhBlock:()=>BH,FlowGraphSquareRootBlock:()=>kH,FlowGraphSubtractBlock:()=>r,FlowGraphTanBlock:()=>OH,FlowGraphTanhBlock:()=>dH,FlowGraphTrailingZerosBlock:()=>tH,FlowGraphTruncBlock:()=>s});var O=J(12304),U=J(14018),h=J(15506),w=J(15515);class g extends w.b{constructor(H,u,J,O){super(H,O),this._operation=u,this._className=J}_doOperation(H){return this._operation(H)}getClassName(){return this._className}}var B=J(12338),b=J(15519);class d extends w.b{constructor(H,u,J,O,U,h,w){super(O,w),this._operation=U,this._className=h,this.a=this.registerDataInput("a",H),this.b=this.registerDataInput("b",u),this.c=this.registerDataInput("c",J)}_doOperation(H){return this._operation(this.a.getValue(H),this.b.getValue(H),this.c.getValue(H))}getClassName(){return this._className}}var G=J(14011),P=J(14027),mH=J(14049);class l extends h.b{constructor(H){super((0,U.X)(null===H||void 0===H?void 0:H.type),(0,U.X)(null===H||void 0===H?void 0:H.type),(0,U.X)(null===H||void 0===H?void 0:H.type),((H,u)=>this._polymorphicAdd(H,u)),"FlowGraphAddBlock",H)}_polymorphicAdd(H,u){const J=(0,mH.i)(H),O=(0,mH.i)(u);if((0,mH.g)(J,O)||(0,mH.d)(J,O)||(0,mH.c)(J,O))return H.add(u);if("Quaternion"===J||"Vector4"===O)return new B.Vector4(H.x,H.y,H.z,H.w).addInPlace(u);if("Vector4"===J||"Quaternion"===O)return H.add(u);var U;if(null!==(U=this.config)&&void 0!==U&&U.preventIntegerFloatArithmetic&&typeof H!==typeof u)throw new Error("Cannot add different types of numbers.");return(0,mH.m)(H)+(0,mH.m)(u)}}(0,O.f)("FlowGraphAddBlock",l);class r extends h.b{constructor(H){super((0,U.X)(null===H||void 0===H?void 0:H.type),(0,U.X)(null===H||void 0===H?void 0:H.type),(0,U.X)(null===H||void 0===H?void 0:H.type),((H,u)=>this._polymorphicSubtract(H,u)),"FlowGraphSubtractBlock",H)}_polymorphicSubtract(H,u){const J=(0,mH.i)(H),O=(0,mH.i)(u);if((0,mH.g)(J,O)||(0,mH.c)(J,O)||(0,mH.d)(J,O))return H.ru(u);if("Quaternion"===J||"Vector4"===O)return new B.Vector4(H.x,H.y,H.z,H.w).jP(u);if("Vector4"===J||"Quaternion"===O)return H.ru(u);var U;if(null!==(U=this.config)&&void 0!==U&&U.preventIntegerFloatArithmetic&&typeof H!==typeof u)throw new Error("Cannot add different types of numbers.");return(0,mH.m)(H)-(0,mH.m)(u)}}(0,O.f)("FlowGraphSubtractBlock",r);class p extends h.b{constructor(H){super((0,U.X)(null===H||void 0===H?void 0:H.type),(0,U.X)(null===H||void 0===H?void 0:H.type),(0,U.X)(null===H||void 0===H?void 0:H.type),((H,u)=>this._polymorphicMultiply(H,u)),"FlowGraphMultiplyBlock",H)}_polymorphicMultiply(H,u){const J=(0,mH.i)(H),O=(0,mH.i)(u);if((0,mH.g)(J,O)||(0,mH.c)(J,O))return H.multiply(u);if("Quaternion"===J||"Vector4"===O)return new B.Vector4(H.x,H.y,H.z,H.w).multiplyInPlace(u);if("Vector4"===J||"Quaternion"===O)return H.multiply(u);if((0,mH.d)(J,O)){var U;if(null!==(U=this.config)&&void 0!==U&&U.useMatrixPerComponent){const O=H.m;for(let H=0;H<O.length;H++)O[H]*=u.m[H];return"Matrix2D"===J?new P.c(O):"Matrix3D"===J?new P.e(O):B.Matrix.Cu(O)}return u.multiply(H)}var h;if(null!==(h=this.config)&&void 0!==h&&h.preventIntegerFloatArithmetic&&typeof H!==typeof u)throw new Error("Cannot add different types of numbers.");return(0,mH.m)(H)*(0,mH.m)(u)}}(0,O.f)("FlowGraphMultiplyBlock",p);class a extends h.b{constructor(H){super((0,U.X)(null===H||void 0===H?void 0:H.type),(0,U.X)(null===H||void 0===H?void 0:H.type),(0,U.X)(null===H||void 0===H?void 0:H.type),((H,u)=>this._polymorphicDivide(H,u)),"FlowGraphDivideBlock",H)}_polymorphicDivide(H,u){const J=(0,mH.i)(H),O=(0,mH.i)(u);if((0,mH.g)(J,O)||(0,mH.c)(J,O))return H.divide(u);if("Quaternion"===J||"Quaternion"===O){const J=H.clone();return J.x/=u.x,J.y/=u.y,J.z/=u.z,J.w/=u.w,J}if("Quaternion"===J||"Vector4"===O)return new B.Vector4(H.x,H.y,H.z,H.w).divideInPlace(u);if("Vector4"===J||"Quaternion"===O)return H.divide(u);if((0,mH.d)(J,O)){var U;if(null!==(U=this.config)&&void 0!==U&&U.useMatrixPerComponent){const O=H.m;for(let H=0;H<O.length;H++)O[H]/=u.m[H];return"Matrix2D"===J?new P.c(O):"Matrix3D"===J?new P.e(O):B.Matrix.Cu(O)}return H.divide(u)}var h;if(null!==(h=this.config)&&void 0!==h&&h.preventIntegerFloatArithmetic&&typeof H!==typeof u)throw new Error("Cannot add different types of numbers.");return(0,mH.m)(H)/(0,mH.m)(u)}}(0,O.f)("FlowGraphDivideBlock",a);class k extends g{constructor(H){super(U.z,(H=>this._random(H)),"FlowGraphRandomBlock",H),this.min=this.registerDataInput("min",U.z,(null===H||void 0===H?void 0:H.min)??0),this.max=this.registerDataInput("max",U.z,(null===H||void 0===H?void 0:H.max)??1),null!==H&&void 0!==H&&H.seed&&(this._seed=H.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const H=1e4*Math.sin(this._seed++);return H-Math.floor(H)}return Math.random()}_random(H){const u=this.min.getValue(H),J=this.max.getValue(H);return this._getRandomValue()*(J-u)+u}}(0,O.f)("FlowGraphRandomBlock",k);class C extends g{constructor(H){super(U.z,(()=>Math.E),"FlowGraphEBlock",H)}}(0,O.f)("FlowGraphEBlock",C);class j extends g{constructor(H){super(U.z,(()=>Math.PI),"FlowGraphPIBlock",H)}}(0,O.f)("FlowGraphPIBlock",j);class M extends g{constructor(H){super(U.z,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",H)}}(0,O.f)("FlowGraphInfBlock",M);class L extends g{constructor(H){super(U.z,(()=>Number.NaN),"FlowGraphNaNBlock",H)}}function Z(H,u){switch((0,mH.i)(H)){case"FlowGraphInteger":return new G.d(u(H.value));case"Vector2":return new B.Vector2(u(H.x),u(H.y));case"lu":return new B.lu(u(H.x),u(H.y),u(H.z));case"Vector4":return new B.Vector4(u(H.x),u(H.y),u(H.z),u(H.w));case"Quaternion":return new B.Quaternion(u(H.x),u(H.y),u(H.z),u(H.w));case"Matrix":return B.Matrix.Cu(H.m.map(u));case"Matrix2D":return new P.c(H.m.map(u));case"Matrix3D":return new P.e(H.m.map(u));default:return u(H)}}(0,O.f)("FlowGraphNaNBlock",L);class Y extends b.c{constructor(H){super(U.z,U.z,(H=>this._polymorphicAbs(H)),"FlowGraphAbsBlock",H)}_polymorphicAbs(H){return Z(H,Math.abs)}}(0,O.f)("FlowGraphAbsBlock",Y);class F extends b.c{constructor(H){super(U.z,U.z,(H=>this._polymorphicSign(H)),"FlowGraphSignBlock",H)}_polymorphicSign(H){return Z(H,Math.sign)}}(0,O.f)("FlowGraphSignBlock",F);class s extends b.c{constructor(H){super(U.z,U.z,(H=>this._polymorphicTrunc(H)),"FlowGraphTruncBlock",H)}_polymorphicTrunc(H){return Z(H,Math.trunc)}}(0,O.f)("FlowGraphTruncBlock",s);class A extends b.c{constructor(H){super(U.z,U.z,(H=>this._polymorphicFloor(H)),"FlowGraphFloorBlock",H)}_polymorphicFloor(H){return Z(H,Math.floor)}}(0,O.f)("FlowGraphFloorBlock",A);class t extends b.c{constructor(H){super(U.d,U.d,(H=>this._polymorphicCeiling(H)),"FlowGraphCeilBlock",H)}_polymorphicCeiling(H){return Z(H,Math.ceil)}}(0,O.f)("FlowGraphCeilBlock",t);class e extends b.c{constructor(H){super(U.d,U.d,(H=>this._polymorphicRound(H)),"FlowGraphRoundBlock",H)}_polymorphicRound(H){return Z(H,(H=>{var u;return H<0&&null!==(u=this.config)&&void 0!==u&&u.roundHalfAwayFromZero?-Math.round(-H):Math.round(H)}))}}(0,O.f)("FlowGraphRoundBlock",e);class c extends b.c{constructor(H){super(U.d,U.d,(H=>this._polymorphicFraction(H)),"FlowGraphFractBlock",H)}_polymorphicFraction(H){return Z(H,(H=>H-Math.floor(H)))}}(0,O.f)("FlowGraphFractBlock",c);class n extends b.c{constructor(H){super(U.d,U.d,(H=>this._polymorphicNeg(H)),"FlowGraphNegationBlock",H)}_polymorphicNeg(H){return Z(H,(H=>-H))}}function V(H,u,J){switch((0,mH.i)(H)){case"FlowGraphInteger":return new G.d(J(H.value,u.value));case"Vector2":return new B.Vector2(J(H.x,u.x),J(H.y,u.y));case"lu":return new B.lu(J(H.x,u.x),J(H.y,u.y),J(H.z,u.z));case"Vector4":return new B.Vector4(J(H.x,u.x),J(H.y,u.y),J(H.z,u.z),J(H.w,u.w));case"Quaternion":return new B.Quaternion(J(H.x,u.x),J(H.y,u.y),J(H.z,u.z),J(H.w,u.w));case"Matrix":return B.Matrix.Cu(H.m.map(((H,O)=>J(H,u.m[O]))));case"Matrix2D":return new P.c(H.m.map(((H,O)=>J(H,u.m[O]))));case"Matrix3D":return new P.e(H.m.map(((H,O)=>J(H,u.m[O]))));default:return J((0,mH.m)(H),(0,mH.m)(u))}}(0,O.f)("FlowGraphNegationBlock",n);class T extends h.b{constructor(H){super(U.d,U.d,U.d,((H,u)=>this._polymorphicRemainder(H,u)),"FlowGraphModuloBlock",H)}_polymorphicRemainder(H,u){return V(H,u,((H,u)=>H%u))}}(0,O.f)("FlowGraphModuloBlock",T);class R extends h.b{constructor(H){super(U.d,U.d,U.d,((H,u)=>this._polymorphicMin(H,u)),"FlowGraphMinBlock",H)}_polymorphicMin(H,u){return V(H,u,Math.min)}}(0,O.f)("FlowGraphMinBlock",R);class X extends h.b{constructor(H){super(U.d,U.d,U.d,((H,u)=>this._polymorphicMax(H,u)),"FlowGraphMaxBlock",H)}_polymorphicMax(H,u){return V(H,u,Math.max)}}function W(H,u,J){return Math.min(Math.max(H,Math.min(u,J)),Math.max(u,J))}function f(H,u,J,O){switch((0,mH.i)(H)){case"FlowGraphInteger":return new G.d(O(H.value,u.value,J.value));case"Vector2":return new B.Vector2(O(H.x,u.x,J.x),O(H.y,u.y,J.y));case"lu":return new B.lu(O(H.x,u.x,J.x),O(H.y,u.y,J.y),O(H.z,u.z,J.z));case"Vector4":return new B.Vector4(O(H.x,u.x,J.x),O(H.y,u.y,J.y),O(H.z,u.z,J.z),O(H.w,u.w,J.w));case"Quaternion":return new B.Quaternion(O(H.x,u.x,J.x),O(H.y,u.y,J.y),O(H.z,u.z,J.z),O(H.w,u.w,J.w));case"Matrix":return B.Matrix.Cu(H.m.map(((H,U)=>O(H,u.m[U],J.m[U]))));case"Matrix2D":return new P.c(H.m.map(((H,U)=>O(H,u.m[U],J.m[U]))));case"Matrix3D":return new P.e(H.m.map(((H,U)=>O(H,u.m[U],J.m[U]))));default:return O((0,mH.m)(H),(0,mH.m)(u),(0,mH.m)(J))}}(0,O.f)("FlowGraphMaxBlock",X);class i extends d{constructor(H){super(U.d,U.d,U.d,U.d,((H,u,J)=>this._polymorphicClamp(H,u,J)),"FlowGraphClampBlock",H)}_polymorphicClamp(H,u,J){return f(H,u,J,W)}}function S(H){return Math.min(Math.max(H,0),1)}(0,O.f)("FlowGraphClampBlock",i);class v extends b.c{constructor(H){super(U.d,U.d,(H=>this._polymorphicSaturate(H)),"FlowGraphSaturateBlock",H)}_polymorphicSaturate(H){return Z(H,S)}}function I(H,u,J){return(1-J)*H+J*u}(0,O.f)("FlowGraphSaturateBlock",v);class D extends d{constructor(H){super(U.d,U.d,U.d,U.d,((H,u,J)=>this._polymorphicInterpolate(H,u,J)),"FlowGraphMathInterpolationBlock",H)}_polymorphicInterpolate(H,u,J){return f(H,u,J,I)}}(0,O.f)("FlowGraphMathInterpolationBlock",D);class o extends h.b{constructor(H){super(U.d,U.d,U.f,((H,u)=>this._polymorphicEq(H,u)),"FlowGraphEqualityBlock",H)}_polymorphicEq(H,u){const J=(0,mH.i)(H),O=(0,mH.i)(u);return typeof H===typeof u&&((0,mH.g)(J,O)||(0,mH.d)(J,O)||(0,mH.c)(J,O)?H.equals(u):H===u)}}function y(H,u,J){if((0,mH.p)(H)&&(0,mH.p)(u))return J((0,mH.m)(H),(0,mH.m)(u));throw new Error(`Cannot compare ${H} and ${u}`)}(0,O.f)("FlowGraphEqualityBlock",o);class x extends h.b{constructor(H){super(U.d,U.d,U.f,((H,u)=>this._polymorphicLessThan(H,u)),"FlowGraphLessThanBlock",H)}_polymorphicLessThan(H,u){return y(H,u,((H,u)=>H<u))}}(0,O.f)("FlowGraphLessThanBlock",x);class z extends h.b{constructor(H){super(U.d,U.d,U.f,((H,u)=>this._polymorphicLessThanOrEqual(H,u)),"FlowGraphLessThanOrEqualBlock",H)}_polymorphicLessThanOrEqual(H,u){return y(H,u,((H,u)=>H<=u))}}(0,O.f)("FlowGraphLessThanOrEqualBlock",z);class K extends h.b{constructor(H){super(U.d,U.d,U.f,((H,u)=>this._polymorphicGreaterThan(H,u)),"FlowGraphGreaterThanBlock",H)}_polymorphicGreaterThan(H,u){return y(H,u,((H,u)=>H>u))}}(0,O.f)("FlowGraphGreaterThanBlock",K);class N extends h.b{constructor(H){super(U.d,U.d,U.f,((H,u)=>this._polymorphicGreaterThanOrEqual(H,u)),"FlowGraphGreaterThanOrEqualBlock",H)}_polymorphicGreaterThanOrEqual(H,u){return y(H,u,((H,u)=>H>=u))}}(0,O.f)("FlowGraphGreaterThanOrEqualBlock",N);class q extends b.c{constructor(H){super(U.d,U.f,(H=>this._polymorphicIsNan(H)),"FlowGraphIsNaNBlock",H)}_polymorphicIsNan(H){if((0,mH.p)(H,!0))return isNaN((0,mH.m)(H));throw new Error(`Cannot get NaN of ${H}`)}}(0,O.f)("FlowGraphIsNaNBlock",q);class E extends b.c{constructor(H){super(U.d,U.f,(H=>this._polymorphicIsInf(H)),"FlowGraphIsInfBlock",H)}_polymorphicIsInf(H){if((0,mH.p)(H))return!isFinite((0,mH.m)(H));throw new Error(`Cannot get isInf of ${H}`)}}(0,O.f)("FlowGraphIsInfBlock",E);class Q extends b.c{constructor(H){super(U.d,U.d,(H=>this._polymorphicDegToRad(H)),"FlowGraphDegToRadBlock",H)}_degToRad(H){return H*Math.PI/180}_polymorphicDegToRad(H){return Z(H,this._degToRad)}}(0,O.f)("FlowGraphDegToRadBlock",Q);class HH extends b.c{constructor(H){super(U.d,U.d,(H=>this._polymorphicRadToDeg(H)),"FlowGraphRadToDegBlock",H)}_radToDeg(H){return 180*H/Math.PI}_polymorphicRadToDeg(H){return Z(H,this._radToDeg)}}(0,O.f)("FlowGraphRadToDegBlock",HH);class uH extends b.c{constructor(H){super(U.z,U.z,(H=>this._polymorphicSin(H)),"FlowGraphSinBlock",H)}_polymorphicSin(H){return Z(H,Math.sin)}}class JH extends b.c{constructor(H){super(U.z,U.z,(H=>this._polymorphicCos(H)),"FlowGraphCosBlock",H)}_polymorphicCos(H){return Z(H,Math.cos)}}class OH extends b.c{constructor(H){super(U.z,U.z,(H=>this._polymorphicTan(H)),"FlowGraphTanBlock",H)}_polymorphicTan(H){return Z(H,Math.tan)}}class UH extends b.c{constructor(H){super(U.z,U.z,(H=>this._polymorphicAsin(H)),"FlowGraphASinBlock",H)}_polymorphicAsin(H){return Z(H,Math.asin)}}(0,O.f)("FlowGraphASinBlock",UH);class hH extends b.c{constructor(H){super(U.z,U.z,(H=>this._polymorphicAcos(H)),"FlowGraphACosBlock",H)}_polymorphicAcos(H){return Z(H,Math.acos)}}(0,O.f)("FlowGraphACosBlock",hH);class wH extends b.c{constructor(H){super(U.z,U.z,(H=>this._polymorphicAtan(H)),"FlowGraphATanBlock",H)}_polymorphicAtan(H){return Z(H,Math.atan)}}(0,O.f)("FlowGraphATanBlock",wH);class gH extends h.b{constructor(H){super(U.d,U.d,U.d,((H,u)=>this._polymorphicAtan2(H,u)),"FlowGraphATan2Block",H)}_polymorphicAtan2(H,u){return V(H,u,Math.atan2)}}(0,O.f)("FlowGraphATan2Block",gH);class BH extends b.c{constructor(H){super(U.d,U.d,(H=>this._polymorphicSinh(H)),"FlowGraphSinhBlock",H)}_polymorphicSinh(H){return Z(H,Math.sinh)}}(0,O.f)("FlowGraphSinhBlock",BH);class bH extends b.c{constructor(H){super(U.d,U.d,(H=>this._polymorphicCosh(H)),"FlowGraphCoshBlock",H)}_polymorphicCosh(H){return Z(H,Math.cosh)}}(0,O.f)("FlowGraphCoshBlock",bH);class dH extends b.c{constructor(H){super(U.d,U.d,(H=>this._polymorphicTanh(H)),"FlowGraphTanhBlock",H)}_polymorphicTanh(H){return Z(H,Math.tanh)}}(0,O.f)("FlowGraphTanhBlock",dH);class GH extends b.c{constructor(H){super(U.d,U.z,(H=>this._polymorphicAsinh(H)),"FlowGraphASinhBlock",H)}_polymorphicAsinh(H){return Z(H,Math.asinh)}}(0,O.f)("FlowGraphASinhBlock",GH);class PH extends b.c{constructor(H){super(U.d,U.z,(H=>this._polymorphicAcosh(H)),"FlowGraphACoshBlock",H)}_polymorphicAcosh(H){return Z(H,Math.acosh)}}(0,O.f)("FlowGraphACoshBlock",PH);class mu extends b.c{constructor(H){super(U.d,U.z,(H=>this._polymorphicAtanh(H)),"FlowGraphATanhBlock",H)}_polymorphicAtanh(H){return Z(H,Math.atanh)}}(0,O.f)("FlowGraphATanhBlock",mu);class lH extends b.c{constructor(H){super(U.d,U.z,(H=>this._polymorphicExp(H)),"FlowGraphExponentialBlock",H)}_polymorphicExp(H){return Z(H,Math.exp)}}(0,O.f)("FlowGraphExponentialBlock",lH);class rH extends b.c{constructor(H){super(U.d,U.z,(H=>this._polymorphicLog(H)),"FlowGraphLogBlock",H)}_polymorphicLog(H){return Z(H,Math.log)}}(0,O.f)("FlowGraphLogBlock",rH);class pH extends b.c{constructor(H){super(U.d,U.z,(H=>this._polymorphicLog2(H)),"FlowGraphLog2Block",H)}_polymorphicLog2(H){return Z(H,Math.log2)}}(0,O.f)("FlowGraphLog2Block",pH);class aH extends b.c{constructor(H){super(U.d,U.z,(H=>this._polymorphicLog10(H)),"FlowGraphLog10Block",H)}_polymorphicLog10(H){return Z(H,Math.log10)}}(0,O.f)("FlowGraphLog10Block",aH);class kH extends b.c{constructor(H){super(U.d,U.z,(H=>this._polymorphicSqrt(H)),"FlowGraphSquareRootBlock",H)}_polymorphicSqrt(H){return Z(H,Math.sqrt)}}(0,O.f)("FlowGraphSquareRootBlock",kH);class CH extends b.c{constructor(H){super(U.d,U.z,(H=>this._polymorphicCubeRoot(H)),"FlowGraphCubeRootBlock",H)}_polymorphicCubeRoot(H){return Z(H,Math.cbrt)}}(0,O.f)("FlowGraphCubeRootBlock",CH);class jH extends h.b{constructor(H){super(U.d,U.z,U.z,((H,u)=>this._polymorphicPow(H,u)),"FlowGraphPowerBlock",H)}_polymorphicPow(H,u){return V(H,u,Math.pow)}}(0,O.f)("FlowGraphPowerBlock",jH);class MH extends b.c{constructor(H){super((0,U.X)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),(0,U.X)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),(H=>"boolean"===typeof H?!H:"number"===typeof H?~H:new G.d(~H.value)),"FlowGraphBitwiseNotBlock",H)}}(0,O.f)("FlowGraphBitwiseNotBlock",MH);class LH extends h.b{constructor(H){super((0,U.X)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),(0,U.X)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),(0,U.X)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),((H,u)=>{if("boolean"===typeof H&&"boolean"===typeof u)return H&&u;if("number"===typeof H&&"number"===typeof u)return H&u;if("object"===typeof H&&"object"===typeof u)return new G.d(H.value&u.value);throw new Error(`Cannot perform bitwise AND on ${H} and ${u}`)}),"FlowGraphBitwiseAndBlock",H)}}(0,O.f)("FlowGraphBitwiseAndBlock",LH);class ZH extends h.b{constructor(H){super((0,U.X)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),(0,U.X)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),(0,U.X)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),((H,u)=>{if("boolean"===typeof H&&"boolean"===typeof u)return H||u;if("number"===typeof H&&"number"===typeof u)return H|u;if("object"===typeof H&&"object"===typeof u)return new G.d(H.value|u.value);throw new Error(`Cannot perform bitwise OR on ${H} and ${u}`)}),"FlowGraphBitwiseOrBlock",H)}}(0,O.f)("FlowGraphBitwiseOrBlock",ZH);class YH extends h.b{constructor(H){super((0,U.X)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),(0,U.X)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),(0,U.X)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),((H,u)=>{if("boolean"===typeof H&&"boolean"===typeof u)return H!==u;if("number"===typeof H&&"number"===typeof u)return H^u;if("object"===typeof H&&"object"===typeof u)return new G.d(H.value^u.value);throw new Error(`Cannot perform bitwise XOR on ${H} and ${u}`)}),"FlowGraphBitwiseXorBlock",H)}}(0,O.f)("FlowGraphBitwiseXorBlock",YH);class FH extends h.b{constructor(H){super(U.j,U.j,U.j,((H,u)=>new G.d(H.value<<u.value)),"FlowGraphBitwiseLeftShiftBlock",H)}}(0,O.f)("FlowGraphBitwiseLeftShiftBlock",FH);class sH extends h.b{constructor(H){super(U.j,U.j,U.j,((H,u)=>new G.d(H.value>>u.value)),"FlowGraphBitwiseRightShiftBlock",H)}}(0,O.f)("FlowGraphBitwiseRightShiftBlock",sH);class AH extends b.c{constructor(H){super(U.j,U.j,(H=>new G.d(Math.clz32(H.value))),"FlowGraphLeadingZerosBlock",H)}}(0,O.f)("FlowGraphLeadingZerosBlock",AH);class tH extends b.c{constructor(H){super(U.j,U.j,(H=>new G.d(H.value?31-Math.clz32(H.value&-H.value):32)),"FlowGraphTrailingZerosBlock",H)}}(0,O.f)("FlowGraphTrailingZerosBlock",tH);class eH extends b.c{constructor(H){super(U.j,U.j,(H=>new G.d(function(H){let u=0;for(;H;)u+=1&H,H>>=1;return u}(H.value))),"FlowGraphOneBitsCounterBlock",H)}}(0,O.f)("FlowGraphOneBitsCounterBlock",eH)},15506:(H,u,J)=>{J.d(u,{b:()=>U});var O=J(15515);class U extends O.b{constructor(H,u,J,O,U,h){super(J,h),this._operation=O,this._className=U,this.a=this.registerDataInput("a",H),this.b=this.registerDataInput("b",u)}_doOperation(H){const u=this.a.getValue(H),J=this.b.getValue(H);return this._operation(u,J)}getClassName(){return this._className}}},15515:(H,u,J)=>{J.d(u,{b:()=>g});var O=J(14041),U=J(14018);const h="cachedOperationValue",w="cachedExecutionId";class g extends O.b{constructor(H,u){super(u),this.value=this.registerDataOutput("value",H),this.isValid=this.registerDataOutput("isValid",U.f)}_updateOutputs(H){const u=H._getExecutionVariable(this,w,-1),J=H._getExecutionVariable(this,h,null);if(void 0!==J&&null!==J&&u===H.executionId)this.isValid.setValue(!0,H),this.value.setValue(J,H);else try{const u=this._doOperation(H);if(void 0===u||null===u)return void this.isValid.setValue(!1,H);H._setExecutionVariable(this,h,u),H._setExecutionVariable(this,w,H.executionId),this.value.setValue(u,H),this.isValid.setValue(!0,H)}catch(O){this.isValid.setValue(!1,H)}}}},15519:(H,u,J)=>{J.d(u,{c:()=>U});var O=J(15515);class U extends O.b{constructor(H,u,J,O,U){super(u,U),this._operation=J,this._className=O,this.a=this.registerDataInput("a",H)}_doOperation(H){return this._operation(this.a.getValue(H))}getClassName(){return this._className}}}}]);