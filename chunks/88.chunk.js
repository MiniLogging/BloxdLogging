"use strict";(self.uji65st81d=self.uji65st81d||[]).push([[88],{15606:(V,h,mV)=>{mV.r(h),mV.d(h,{FlowGraphAbsBlock:()=>H,FlowGraphAcosBlock:()=>NV,FlowGraphAcoshBlock:()=>qV,FlowGraphAddBlock:()=>R,FlowGraphAsinBlock:()=>LV,FlowGraphAsinhBlock:()=>nV,FlowGraphAtan2Block:()=>kV,FlowGraphAtanBlock:()=>AV,FlowGraphAtanhBlock:()=>xV,FlowGraphBitwiseAndBlock:()=>vV,FlowGraphBitwiseLeftShiftBlock:()=>jV,FlowGraphBitwiseNotBlock:()=>JV,FlowGraphBitwiseOrBlock:()=>DV,FlowGraphBitwiseRightShiftBlock:()=>lV,FlowGraphBitwiseXorBlock:()=>HV,FlowGraphCeilBlock:()=>y,FlowGraphClampBlock:()=>Y,FlowGraphCosBlock:()=>mh,FlowGraphCoshBlock:()=>KV,FlowGraphCubeRootBlock:()=>zV,FlowGraphDegToRadBlock:()=>B,FlowGraphDivideBlock:()=>M,FlowGraphEBlock:()=>z,FlowGraphEqualityBlock:()=>b,FlowGraphExpBlock:()=>RV,FlowGraphFloorBlock:()=>G,FlowGraphFractionBlock:()=>I,FlowGraphGreaterThanBlock:()=>e,FlowGraphGreaterThanOrEqualBlock:()=>W,FlowGraphInfBlock:()=>J,FlowGraphIsInfinityBlock:()=>a,FlowGraphIsNanBlock:()=>X,FlowGraphLeadingZerosBlock:()=>GV,FlowGraphLessThanBlock:()=>U,FlowGraphLessThanOrEqualBlock:()=>u,FlowGraphLog10Block:()=>MV,FlowGraphLog2Block:()=>sV,FlowGraphLogBlock:()=>dV,FlowGraphMathInterpolationBlock:()=>i,FlowGraphMaxBlock:()=>Z,FlowGraphMinBlock:()=>p,FlowGraphModuloBlock:()=>F,FlowGraphMultiplyBlock:()=>s,FlowGraphNaNBlock:()=>v,FlowGraphNegationBlock:()=>r,FlowGraphOneBitsCounterBlock:()=>OV,FlowGraphPiBlock:()=>Q,FlowGraphPowerBlock:()=>QV,FlowGraphRadToDegBlock:()=>VV,FlowGraphRandomBlock:()=>c,FlowGraphRoundBlock:()=>O,FlowGraphSaturateBlock:()=>E,FlowGraphSignBlock:()=>j,FlowGraphSinBlock:()=>hV,FlowGraphSinhBlock:()=>CV,FlowGraphSquareRootBlock:()=>cV,FlowGraphSubtractBlock:()=>d,FlowGraphTanBlock:()=>tV,FlowGraphTanhBlock:()=>oV,FlowGraphTrailingZerosBlock:()=>yV,FlowGraphTruncBlock:()=>l});var t=mV(12388),L=mV(14109),N=mV(15609),A=mV(15611);class k extends A.b{constructor(V,h,mV,t){super(V,t),this._operation=h,this._className=mV}_doOperation(V){return this._operation(V)}getClassName(){return this._className}}var C=mV(12422),K=mV(15618);class o extends A.b{constructor(V,h,mV,t,L,N,A){super(t,A),this._operation=L,this._className=N,this.a=this.registerDataInput("a",V),this.b=this.registerDataInput("b",h),this.c=this.registerDataInput("c",mV)}_doOperation(V){return this._operation(this.a.getValue(V),this.b.getValue(V),this.c.getValue(V))}getClassName(){return this._className}}var n=mV(14102),q=mV(14111),x=mV(14135);class R extends N.d{constructor(V){super((0,L.I)(null===V||void 0===V?void 0:V.type),(0,L.I)(null===V||void 0===V?void 0:V.type),(0,L.I)(null===V||void 0===V?void 0:V.type),((V,h)=>this._polymorphicAdd(V,h)),"FlowGraphAddBlock",V)}_polymorphicAdd(V,h){const mV=(0,x.k)(V),t=(0,x.k)(h);if((0,x.h)(mV,t)||(0,x.g)(mV,t)||(0,x.c)(mV,t))return V.add(h);if("Quaternion"===mV||"Vector4"===t)return new C.Vector4(V.x,V.y,V.z,V.w).addInPlace(h);if("Vector4"===mV||"Quaternion"===t)return V.add(h);var L;if(null!==(L=this.config)&&void 0!==L&&L.preventIntegerFloatArithmetic&&typeof V!==typeof h)throw new Error("Cannot add different types of numbers.");return(0,x.o)(V)+(0,x.o)(h)}}(0,t.i)("FlowGraphAddBlock",R);class d extends N.d{constructor(V){super((0,L.I)(null===V||void 0===V?void 0:V.type),(0,L.I)(null===V||void 0===V?void 0:V.type),(0,L.I)(null===V||void 0===V?void 0:V.type),((V,h)=>this._polymorphicSubtract(V,h)),"FlowGraphSubtractBlock",V)}_polymorphicSubtract(V,h){const mV=(0,x.k)(V),t=(0,x.k)(h);if((0,x.h)(mV,t)||(0,x.c)(mV,t)||(0,x.g)(mV,t))return V.Mh(h);if("Quaternion"===mV||"Vector4"===t)return new C.Vector4(V.x,V.y,V.z,V.w).An(h);if("Vector4"===mV||"Quaternion"===t)return V.Mh(h);var L;if(null!==(L=this.config)&&void 0!==L&&L.preventIntegerFloatArithmetic&&typeof V!==typeof h)throw new Error("Cannot add different types of numbers.");return(0,x.o)(V)-(0,x.o)(h)}}(0,t.i)("FlowGraphSubtractBlock",d);class s extends N.d{constructor(V){super((0,L.I)(null===V||void 0===V?void 0:V.type),(0,L.I)(null===V||void 0===V?void 0:V.type),(0,L.I)(null===V||void 0===V?void 0:V.type),((V,h)=>this._polymorphicMultiply(V,h)),"FlowGraphMultiplyBlock",V)}_polymorphicMultiply(V,h){const mV=(0,x.k)(V),t=(0,x.k)(h);if((0,x.h)(mV,t)||(0,x.c)(mV,t))return V.multiply(h);if("Quaternion"===mV||"Vector4"===t)return new C.Vector4(V.x,V.y,V.z,V.w).multiplyInPlace(h);if("Vector4"===mV||"Quaternion"===t)return V.multiply(h);if((0,x.g)(mV,t)){var L;if(null!==(L=this.config)&&void 0!==L&&L.useMatrixPerComponent){const t=V.m;for(let V=0;V<t.length;V++)t[V]*=h.m[V];return"Matrix2D"===mV?new q.e(t):"Matrix3D"===mV?new q.i(t):C.Matrix.Dh(t)}return h.multiply(V)}var N;if(null!==(N=this.config)&&void 0!==N&&N.preventIntegerFloatArithmetic&&typeof V!==typeof h)throw new Error("Cannot add different types of numbers.");return(0,x.o)(V)*(0,x.o)(h)}}(0,t.i)("FlowGraphMultiplyBlock",s);class M extends N.d{constructor(V){super((0,L.I)(null===V||void 0===V?void 0:V.type),(0,L.I)(null===V||void 0===V?void 0:V.type),(0,L.I)(null===V||void 0===V?void 0:V.type),((V,h)=>this._polymorphicDivide(V,h)),"FlowGraphDivideBlock",V)}_polymorphicDivide(V,h){const mV=(0,x.k)(V),t=(0,x.k)(h);if((0,x.h)(mV,t)||(0,x.c)(mV,t))return V.divide(h);if("Quaternion"===mV||"Quaternion"===t){const mV=V.clone();return mV.x/=h.x,mV.y/=h.y,mV.z/=h.z,mV.w/=h.w,mV}if("Quaternion"===mV||"Vector4"===t)return new C.Vector4(V.x,V.y,V.z,V.w).divideInPlace(h);if("Vector4"===mV||"Quaternion"===t)return V.divide(h);if((0,x.g)(mV,t)){var L;if(null!==(L=this.config)&&void 0!==L&&L.useMatrixPerComponent){const t=V.m;for(let V=0;V<t.length;V++)t[V]/=h.m[V];return"Matrix2D"===mV?new q.e(t):"Matrix3D"===mV?new q.i(t):C.Matrix.Dh(t)}return V.divide(h)}var N;if(null!==(N=this.config)&&void 0!==N&&N.preventIntegerFloatArithmetic&&typeof V!==typeof h)throw new Error("Cannot add different types of numbers.");return(0,x.o)(V)/(0,x.o)(h)}}(0,t.i)("FlowGraphDivideBlock",M);class c extends k{constructor(V){super(L.r,(V=>this._random(V)),"FlowGraphRandomBlock",V),this.min=this.registerDataInput("min",L.r,(null===V||void 0===V?void 0:V.min)??0),this.max=this.registerDataInput("max",L.r,(null===V||void 0===V?void 0:V.max)??1),null!==V&&void 0!==V&&V.seed&&(this._seed=V.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const V=1e4*Math.sin(this._seed++);return V-Math.floor(V)}return Math.random()}_random(V){const h=this.min.getValue(V),mV=this.max.getValue(V);return this._getRandomValue()*(mV-h)+h}}(0,t.i)("FlowGraphRandomBlock",c);class z extends k{constructor(V){super(L.r,(()=>Math.E),"FlowGraphEBlock",V)}}(0,t.i)("FlowGraphEBlock",z);class Q extends k{constructor(V){super(L.r,(()=>Math.PI),"FlowGraphPIBlock",V)}}(0,t.i)("FlowGraphPIBlock",Q);class J extends k{constructor(V){super(L.r,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",V)}}(0,t.i)("FlowGraphInfBlock",J);class v extends k{constructor(V){super(L.r,(()=>Number.NaN),"FlowGraphNaNBlock",V)}}function D(V,h){switch((0,x.k)(V)){case"FlowGraphInteger":return new n.d(h(V.value));case"Vector2":return new C.Vector2(h(V.x),h(V.y));case"sh":return new C.sh(h(V.x),h(V.y),h(V.z));case"Vector4":return new C.Vector4(h(V.x),h(V.y),h(V.z),h(V.w));case"Quaternion":return new C.Quaternion(h(V.x),h(V.y),h(V.z),h(V.w));case"Matrix":return C.Matrix.Dh(V.m.map(h));case"Matrix2D":return new q.e(V.m.map(h));case"Matrix3D":return new q.i(V.m.map(h));default:return h(V)}}(0,t.i)("FlowGraphNaNBlock",v);class H extends K.d{constructor(V){super(L.r,L.r,(V=>this._polymorphicAbs(V)),"FlowGraphAbsBlock",V)}_polymorphicAbs(V){return D(V,Math.abs)}}(0,t.i)("FlowGraphAbsBlock",H);class j extends K.d{constructor(V){super(L.r,L.r,(V=>this._polymorphicSign(V)),"FlowGraphSignBlock",V)}_polymorphicSign(V){return D(V,Math.sign)}}(0,t.i)("FlowGraphSignBlock",j);class l extends K.d{constructor(V){super(L.r,L.r,(V=>this._polymorphicTrunc(V)),"FlowGraphTruncBlock",V)}_polymorphicTrunc(V){return D(V,Math.trunc)}}(0,t.i)("FlowGraphTruncBlock",l);class G extends K.d{constructor(V){super(L.r,L.r,(V=>this._polymorphicFloor(V)),"FlowGraphFloorBlock",V)}_polymorphicFloor(V){return D(V,Math.floor)}}(0,t.i)("FlowGraphFloorBlock",G);class y extends K.d{constructor(V){super(L.e,L.e,(V=>this._polymorphicCeiling(V)),"FlowGraphCeilBlock",V)}_polymorphicCeiling(V){return D(V,Math.ceil)}}(0,t.i)("FlowGraphCeilBlock",y);class O extends K.d{constructor(V){super(L.e,L.e,(V=>this._polymorphicRound(V)),"FlowGraphRoundBlock",V)}_polymorphicRound(V){return D(V,(V=>{var h;return V<0&&null!==(h=this.config)&&void 0!==h&&h.roundHalfAwayFromZero?-Math.round(-V):Math.round(V)}))}}(0,t.i)("FlowGraphRoundBlock",O);class I extends K.d{constructor(V){super(L.e,L.e,(V=>this._polymorphicFraction(V)),"FlowGraphFractBlock",V)}_polymorphicFraction(V){return D(V,(V=>V-Math.floor(V)))}}(0,t.i)("FlowGraphFractBlock",I);class r extends K.d{constructor(V){super(L.e,L.e,(V=>this._polymorphicNeg(V)),"FlowGraphNegationBlock",V)}_polymorphicNeg(V){return D(V,(V=>-V))}}function T(V,h,mV){switch((0,x.k)(V)){case"FlowGraphInteger":return new n.d(mV(V.value,h.value));case"Vector2":return new C.Vector2(mV(V.x,h.x),mV(V.y,h.y));case"sh":return new C.sh(mV(V.x,h.x),mV(V.y,h.y),mV(V.z,h.z));case"Vector4":return new C.Vector4(mV(V.x,h.x),mV(V.y,h.y),mV(V.z,h.z),mV(V.w,h.w));case"Quaternion":return new C.Quaternion(mV(V.x,h.x),mV(V.y,h.y),mV(V.z,h.z),mV(V.w,h.w));case"Matrix":return C.Matrix.Dh(V.m.map(((V,t)=>mV(V,h.m[t]))));case"Matrix2D":return new q.e(V.m.map(((V,t)=>mV(V,h.m[t]))));case"Matrix3D":return new q.i(V.m.map(((V,t)=>mV(V,h.m[t]))));default:return mV((0,x.o)(V),(0,x.o)(h))}}(0,t.i)("FlowGraphNegationBlock",r);class F extends N.d{constructor(V){super(L.e,L.e,L.e,((V,h)=>this._polymorphicRemainder(V,h)),"FlowGraphModuloBlock",V)}_polymorphicRemainder(V,h){return T(V,h,((V,h)=>V%h))}}(0,t.i)("FlowGraphModuloBlock",F);class p extends N.d{constructor(V){super(L.e,L.e,L.e,((V,h)=>this._polymorphicMin(V,h)),"FlowGraphMinBlock",V)}_polymorphicMin(V,h){return T(V,h,Math.min)}}(0,t.i)("FlowGraphMinBlock",p);class Z extends N.d{constructor(V){super(L.e,L.e,L.e,((V,h)=>this._polymorphicMax(V,h)),"FlowGraphMaxBlock",V)}_polymorphicMax(V,h){return T(V,h,Math.max)}}function f(V,h,mV){return Math.min(Math.max(V,Math.min(h,mV)),Math.max(h,mV))}function S(V,h,mV,t){switch((0,x.k)(V)){case"FlowGraphInteger":return new n.d(t(V.value,h.value,mV.value));case"Vector2":return new C.Vector2(t(V.x,h.x,mV.x),t(V.y,h.y,mV.y));case"sh":return new C.sh(t(V.x,h.x,mV.x),t(V.y,h.y,mV.y),t(V.z,h.z,mV.z));case"Vector4":return new C.Vector4(t(V.x,h.x,mV.x),t(V.y,h.y,mV.y),t(V.z,h.z,mV.z),t(V.w,h.w,mV.w));case"Quaternion":return new C.Quaternion(t(V.x,h.x,mV.x),t(V.y,h.y,mV.y),t(V.z,h.z,mV.z),t(V.w,h.w,mV.w));case"Matrix":return C.Matrix.Dh(V.m.map(((V,L)=>t(V,h.m[L],mV.m[L]))));case"Matrix2D":return new q.e(V.m.map(((V,L)=>t(V,h.m[L],mV.m[L]))));case"Matrix3D":return new q.i(V.m.map(((V,L)=>t(V,h.m[L],mV.m[L]))));default:return t((0,x.o)(V),(0,x.o)(h),(0,x.o)(mV))}}(0,t.i)("FlowGraphMaxBlock",Z);class Y extends o{constructor(V){super(L.e,L.e,L.e,L.e,((V,h,mV)=>this._polymorphicClamp(V,h,mV)),"FlowGraphClampBlock",V)}_polymorphicClamp(V,h,mV){return S(V,h,mV,f)}}function w(V){return Math.min(Math.max(V,0),1)}(0,t.i)("FlowGraphClampBlock",Y);class E extends K.d{constructor(V){super(L.e,L.e,(V=>this._polymorphicSaturate(V)),"FlowGraphSaturateBlock",V)}_polymorphicSaturate(V){return D(V,w)}}function g(V,h,mV){return(1-mV)*V+mV*h}(0,t.i)("FlowGraphSaturateBlock",E);class i extends o{constructor(V){super(L.e,L.e,L.e,L.e,((V,h,mV)=>this._polymorphicInterpolate(V,h,mV)),"FlowGraphMathInterpolationBlock",V)}_polymorphicInterpolate(V,h,mV){return S(V,h,mV,g)}}(0,t.i)("FlowGraphMathInterpolationBlock",i);class b extends N.d{constructor(V){super(L.e,L.e,L.h,((V,h)=>this._polymorphicEq(V,h)),"FlowGraphEqualityBlock",V)}_polymorphicEq(V,h){const mV=(0,x.k)(V),t=(0,x.k)(h);return typeof V===typeof h&&((0,x.h)(mV,t)||(0,x.g)(mV,t)||(0,x.c)(mV,t)?V.equals(h):V===h)}}function P(V,h,mV){if((0,x.r)(V)&&(0,x.r)(h))return mV((0,x.o)(V),(0,x.o)(h));throw new Error(`Cannot compare ${V} and ${h}`)}(0,t.i)("FlowGraphEqualityBlock",b);class U extends N.d{constructor(V){super(L.e,L.e,L.h,((V,h)=>this._polymorphicLessThan(V,h)),"FlowGraphLessThanBlock",V)}_polymorphicLessThan(V,h){return P(V,h,((V,h)=>V<h))}}(0,t.i)("FlowGraphLessThanBlock",U);class u extends N.d{constructor(V){super(L.e,L.e,L.h,((V,h)=>this._polymorphicLessThanOrEqual(V,h)),"FlowGraphLessThanOrEqualBlock",V)}_polymorphicLessThanOrEqual(V,h){return P(V,h,((V,h)=>V<=h))}}(0,t.i)("FlowGraphLessThanOrEqualBlock",u);class e extends N.d{constructor(V){super(L.e,L.e,L.h,((V,h)=>this._polymorphicGreaterThan(V,h)),"FlowGraphGreaterThanBlock",V)}_polymorphicGreaterThan(V,h){return P(V,h,((V,h)=>V>h))}}(0,t.i)("FlowGraphGreaterThanBlock",e);class W extends N.d{constructor(V){super(L.e,L.e,L.h,((V,h)=>this._polymorphicGreaterThanOrEqual(V,h)),"FlowGraphGreaterThanOrEqualBlock",V)}_polymorphicGreaterThanOrEqual(V,h){return P(V,h,((V,h)=>V>=h))}}(0,t.i)("FlowGraphGreaterThanOrEqualBlock",W);class X extends K.d{constructor(V){super(L.e,L.h,(V=>this._polymorphicIsNan(V)),"FlowGraphIsNaNBlock",V)}_polymorphicIsNan(V){if((0,x.r)(V,!0))return isNaN((0,x.o)(V));throw new Error(`Cannot get NaN of ${V}`)}}(0,t.i)("FlowGraphIsNaNBlock",X);class a extends K.d{constructor(V){super(L.e,L.h,(V=>this._polymorphicIsInf(V)),"FlowGraphIsInfBlock",V)}_polymorphicIsInf(V){if((0,x.r)(V))return!isFinite((0,x.o)(V));throw new Error(`Cannot get isInf of ${V}`)}}(0,t.i)("FlowGraphIsInfBlock",a);class B extends K.d{constructor(V){super(L.e,L.e,(V=>this._polymorphicDegToRad(V)),"FlowGraphDegToRadBlock",V)}_degToRad(V){return V*Math.PI/180}_polymorphicDegToRad(V){return D(V,this._degToRad)}}(0,t.i)("FlowGraphDegToRadBlock",B);class VV extends K.d{constructor(V){super(L.e,L.e,(V=>this._polymorphicRadToDeg(V)),"FlowGraphRadToDegBlock",V)}_radToDeg(V){return 180*V/Math.PI}_polymorphicRadToDeg(V){return D(V,this._radToDeg)}}(0,t.i)("FlowGraphRadToDegBlock",VV);class hV extends K.d{constructor(V){super(L.r,L.r,(V=>this._polymorphicSin(V)),"FlowGraphSinBlock",V)}_polymorphicSin(V){return D(V,Math.sin)}}class mh extends K.d{constructor(V){super(L.r,L.r,(V=>this._polymorphicCos(V)),"FlowGraphCosBlock",V)}_polymorphicCos(V){return D(V,Math.cos)}}class tV extends K.d{constructor(V){super(L.r,L.r,(V=>this._polymorphicTan(V)),"FlowGraphTanBlock",V)}_polymorphicTan(V){return D(V,Math.tan)}}class LV extends K.d{constructor(V){super(L.r,L.r,(V=>this._polymorphicAsin(V)),"FlowGraphASinBlock",V)}_polymorphicAsin(V){return D(V,Math.asin)}}(0,t.i)("FlowGraphASinBlock",LV);class NV extends K.d{constructor(V){super(L.r,L.r,(V=>this._polymorphicAcos(V)),"FlowGraphACosBlock",V)}_polymorphicAcos(V){return D(V,Math.acos)}}(0,t.i)("FlowGraphACosBlock",NV);class AV extends K.d{constructor(V){super(L.r,L.r,(V=>this._polymorphicAtan(V)),"FlowGraphATanBlock",V)}_polymorphicAtan(V){return D(V,Math.atan)}}(0,t.i)("FlowGraphATanBlock",AV);class kV extends N.d{constructor(V){super(L.e,L.e,L.e,((V,h)=>this._polymorphicAtan2(V,h)),"FlowGraphATan2Block",V)}_polymorphicAtan2(V,h){return T(V,h,Math.atan2)}}(0,t.i)("FlowGraphATan2Block",kV);class CV extends K.d{constructor(V){super(L.e,L.e,(V=>this._polymorphicSinh(V)),"FlowGraphSinhBlock",V)}_polymorphicSinh(V){return D(V,Math.sinh)}}(0,t.i)("FlowGraphSinhBlock",CV);class KV extends K.d{constructor(V){super(L.e,L.e,(V=>this._polymorphicCosh(V)),"FlowGraphCoshBlock",V)}_polymorphicCosh(V){return D(V,Math.cosh)}}(0,t.i)("FlowGraphCoshBlock",KV);class oV extends K.d{constructor(V){super(L.e,L.e,(V=>this._polymorphicTanh(V)),"FlowGraphTanhBlock",V)}_polymorphicTanh(V){return D(V,Math.tanh)}}(0,t.i)("FlowGraphTanhBlock",oV);class nV extends K.d{constructor(V){super(L.e,L.r,(V=>this._polymorphicAsinh(V)),"FlowGraphASinhBlock",V)}_polymorphicAsinh(V){return D(V,Math.asinh)}}(0,t.i)("FlowGraphASinhBlock",nV);class qV extends K.d{constructor(V){super(L.e,L.r,(V=>this._polymorphicAcosh(V)),"FlowGraphACoshBlock",V)}_polymorphicAcosh(V){return D(V,Math.acosh)}}(0,t.i)("FlowGraphACoshBlock",qV);class xV extends K.d{constructor(V){super(L.e,L.r,(V=>this._polymorphicAtanh(V)),"FlowGraphATanhBlock",V)}_polymorphicAtanh(V){return D(V,Math.atanh)}}(0,t.i)("FlowGraphATanhBlock",xV);class RV extends K.d{constructor(V){super(L.e,L.r,(V=>this._polymorphicExp(V)),"FlowGraphExponentialBlock",V)}_polymorphicExp(V){return D(V,Math.exp)}}(0,t.i)("FlowGraphExponentialBlock",RV);class dV extends K.d{constructor(V){super(L.e,L.r,(V=>this._polymorphicLog(V)),"FlowGraphLogBlock",V)}_polymorphicLog(V){return D(V,Math.log)}}(0,t.i)("FlowGraphLogBlock",dV);class sV extends K.d{constructor(V){super(L.e,L.r,(V=>this._polymorphicLog2(V)),"FlowGraphLog2Block",V)}_polymorphicLog2(V){return D(V,Math.log2)}}(0,t.i)("FlowGraphLog2Block",sV);class MV extends K.d{constructor(V){super(L.e,L.r,(V=>this._polymorphicLog10(V)),"FlowGraphLog10Block",V)}_polymorphicLog10(V){return D(V,Math.log10)}}(0,t.i)("FlowGraphLog10Block",MV);class cV extends K.d{constructor(V){super(L.e,L.r,(V=>this._polymorphicSqrt(V)),"FlowGraphSquareRootBlock",V)}_polymorphicSqrt(V){return D(V,Math.sqrt)}}(0,t.i)("FlowGraphSquareRootBlock",cV);class zV extends K.d{constructor(V){super(L.e,L.r,(V=>this._polymorphicCubeRoot(V)),"FlowGraphCubeRootBlock",V)}_polymorphicCubeRoot(V){return D(V,Math.cbrt)}}(0,t.i)("FlowGraphCubeRootBlock",zV);class QV extends N.d{constructor(V){super(L.e,L.r,L.r,((V,h)=>this._polymorphicPow(V,h)),"FlowGraphPowerBlock",V)}_polymorphicPow(V,h){return T(V,h,Math.pow)}}(0,t.i)("FlowGraphPowerBlock",QV);class JV extends K.d{constructor(V){super((0,L.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,L.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(V=>"boolean"===typeof V?!V:"number"===typeof V?~V:new n.d(~V.value)),"FlowGraphBitwiseNotBlock",V)}}(0,t.i)("FlowGraphBitwiseNotBlock",JV);class vV extends N.d{constructor(V){super((0,L.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,L.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,L.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),((V,h)=>{if("boolean"===typeof V&&"boolean"===typeof h)return V&&h;if("number"===typeof V&&"number"===typeof h)return V&h;if("object"===typeof V&&"object"===typeof h)return new n.d(V.value&h.value);throw new Error(`Cannot perform bitwise AND on ${V} and ${h}`)}),"FlowGraphBitwiseAndBlock",V)}}(0,t.i)("FlowGraphBitwiseAndBlock",vV);class DV extends N.d{constructor(V){super((0,L.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,L.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,L.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),((V,h)=>{if("boolean"===typeof V&&"boolean"===typeof h)return V||h;if("number"===typeof V&&"number"===typeof h)return V|h;if("object"===typeof V&&"object"===typeof h)return new n.d(V.value|h.value);throw new Error(`Cannot perform bitwise OR on ${V} and ${h}`)}),"FlowGraphBitwiseOrBlock",V)}}(0,t.i)("FlowGraphBitwiseOrBlock",DV);class HV extends N.d{constructor(V){super((0,L.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,L.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,L.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),((V,h)=>{if("boolean"===typeof V&&"boolean"===typeof h)return V!==h;if("number"===typeof V&&"number"===typeof h)return V^h;if("object"===typeof V&&"object"===typeof h)return new n.d(V.value^h.value);throw new Error(`Cannot perform bitwise XOR on ${V} and ${h}`)}),"FlowGraphBitwiseXorBlock",V)}}(0,t.i)("FlowGraphBitwiseXorBlock",HV);class jV extends N.d{constructor(V){super(L.j,L.j,L.j,((V,h)=>new n.d(V.value<<h.value)),"FlowGraphBitwiseLeftShiftBlock",V)}}(0,t.i)("FlowGraphBitwiseLeftShiftBlock",jV);class lV extends N.d{constructor(V){super(L.j,L.j,L.j,((V,h)=>new n.d(V.value>>h.value)),"FlowGraphBitwiseRightShiftBlock",V)}}(0,t.i)("FlowGraphBitwiseRightShiftBlock",lV);class GV extends K.d{constructor(V){super(L.j,L.j,(V=>new n.d(Math.clz32(V.value))),"FlowGraphLeadingZerosBlock",V)}}(0,t.i)("FlowGraphLeadingZerosBlock",GV);class yV extends K.d{constructor(V){super(L.j,L.j,(V=>new n.d(V.value?31-Math.clz32(V.value&-V.value):32)),"FlowGraphTrailingZerosBlock",V)}}(0,t.i)("FlowGraphTrailingZerosBlock",yV);class OV extends K.d{constructor(V){super(L.j,L.j,(V=>new n.d(function(V){let h=0;for(;V;)h+=1&V,V>>=1;return h}(V.value))),"FlowGraphOneBitsCounterBlock",V)}}(0,t.i)("FlowGraphOneBitsCounterBlock",OV)},15609:(V,h,mV)=>{mV.d(h,{d:()=>L});var t=mV(15611);class L extends t.b{constructor(V,h,mV,t,L,N){super(mV,N),this._operation=t,this._className=L,this.a=this.registerDataInput("a",V),this.b=this.registerDataInput("b",h)}_doOperation(V){const h=this.a.getValue(V),mV=this.b.getValue(V);return this._operation(h,mV)}getClassName(){return this._className}}},15611:(V,h,mV)=>{mV.d(h,{b:()=>k});var t=mV(14123),L=mV(14109);const N="cachedOperationValue",A="cachedExecutionId";class k extends t.e{constructor(V,h){super(h),this.value=this.registerDataOutput("value",V),this.isValid=this.registerDataOutput("isValid",L.h)}_updateOutputs(V){const h=V._getExecutionVariable(this,A,-1),mV=V._getExecutionVariable(this,N,null);if(void 0!==mV&&null!==mV&&h===V.executionId)this.isValid.setValue(!0,V),this.value.setValue(mV,V);else try{const h=this._doOperation(V);if(void 0===h||null===h)return void this.isValid.setValue(!1,V);V._setExecutionVariable(this,N,h),V._setExecutionVariable(this,A,V.executionId),this.value.setValue(h,V),this.isValid.setValue(!0,V)}catch(t){this.isValid.setValue(!1,V)}}}},15618:(V,h,mV)=>{mV.d(h,{d:()=>L});var t=mV(15611);class L extends t.b{constructor(V,h,mV,t,L){super(h,L),this._operation=mV,this._className=t,this.a=this.registerDataInput("a",V)}_doOperation(V){return this._operation(this.a.getValue(V))}getClassName(){return this._className}}}}]);