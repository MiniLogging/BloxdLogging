"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[88],{14336:(q,S,b)=>{b.r(S),b.d(S,{FlowGraphAbsBlock:()=>B,FlowGraphAcosBlock:()=>vq,FlowGraphAcoshBlock:()=>yq,FlowGraphAddBlock:()=>G,FlowGraphAsinBlock:()=>Cq,FlowGraphAsinhBlock:()=>lq,FlowGraphAtan2Block:()=>gq,FlowGraphAtanBlock:()=>Uq,FlowGraphAtanhBlock:()=>Rq,FlowGraphBitwiseAndBlock:()=>Xq,FlowGraphBitwiseLeftShiftBlock:()=>tq,FlowGraphBitwiseNotBlock:()=>uq,FlowGraphBitwiseOrBlock:()=>Tq,FlowGraphBitwiseRightShiftBlock:()=>fq,FlowGraphBitwiseXorBlock:()=>Bq,FlowGraphCeilBlock:()=>E,FlowGraphClampBlock:()=>a,FlowGraphCosBlock:()=>bq,FlowGraphCoshBlock:()=>Iq,FlowGraphCubeRootBlock:()=>Wq,FlowGraphDegToRadBlock:()=>c,FlowGraphDivideBlock:()=>Q,FlowGraphEBlock:()=>W,FlowGraphEqualityBlock:()=>w,FlowGraphExpBlock:()=>Gq,FlowGraphFloorBlock:()=>m,FlowGraphFractionBlock:()=>i,FlowGraphGreaterThanBlock:()=>j,FlowGraphGreaterThanOrEqualBlock:()=>M,FlowGraphInfBlock:()=>u,FlowGraphIsInfinityBlock:()=>Y,FlowGraphIsNanBlock:()=>p,FlowGraphLeadingZerosBlock:()=>mq,FlowGraphLessThanBlock:()=>h,FlowGraphLessThanOrEqualBlock:()=>O,FlowGraphLog10Block:()=>Qq,FlowGraphLog2Block:()=>Hq,FlowGraphLogBlock:()=>Zq,FlowGraphMathInterpolationBlock:()=>A,FlowGraphMaxBlock:()=>D,FlowGraphMinBlock:()=>K,FlowGraphModuloBlock:()=>d,FlowGraphMultiplyBlock:()=>H,FlowGraphNaNBlock:()=>X,FlowGraphNegationBlock:()=>J,FlowGraphOneBitsCounterBlock:()=>eq,FlowGraphPiBlock:()=>N,FlowGraphPowerBlock:()=>Nq,FlowGraphRadToDegBlock:()=>qq,FlowGraphRandomBlock:()=>k,FlowGraphRoundBlock:()=>e,FlowGraphSaturateBlock:()=>o,FlowGraphSignBlock:()=>t,FlowGraphSinBlock:()=>Sq,FlowGraphSinhBlock:()=>rq,FlowGraphSquareRootBlock:()=>kq,FlowGraphSubtractBlock:()=>Z,FlowGraphTanBlock:()=>zq,FlowGraphTanhBlock:()=>Vq,FlowGraphTrailingZerosBlock:()=>Eq,FlowGraphTruncBlock:()=>f});var z=b(11058),C=b(12839),v=b(14345),U=b(14353);class g extends U.d{constructor(q,S,b,z){super(q,z),this._operation=S,this._className=b}_doOperation(q){return this._operation(q)}getClassName(){return this._className}}var r=b(11103),I=b(14361);class V extends U.d{constructor(q,S,b,z,C,v,U){super(z,U),this._operation=C,this._className=v,this.a=this.registerDataInput("a",q),this.b=this.registerDataInput("b",S),this.c=this.registerDataInput("c",b)}_doOperation(q){return this._operation(this.a.getValue(q),this.b.getValue(q),this.c.getValue(q))}getClassName(){return this._className}}var l=b(12836),y=b(12841),R=b(12856);class G extends v.c{constructor(q){super((0,C.J)(null===q||void 0===q?void 0:q.type),(0,C.J)(null===q||void 0===q?void 0:q.type),(0,C.J)(null===q||void 0===q?void 0:q.type),((q,S)=>this._polymorphicAdd(q,S)),"FlowGraphAddBlock",q)}_polymorphicAdd(q,S){const b=(0,R.i)(q),z=(0,R.i)(S);if((0,R.g)(b,z)||(0,R.c)(b,z)||(0,R.b)(b,z))return q.add(S);if("Quaternion"===b||"Vector4"===z)return new r.Vector4(q.x,q.y,q.z,q.w).addInPlace(S);if("Vector4"===b||"Quaternion"===z)return q.add(S);var C;if(null!==(C=this.config)&&void 0!==C&&C.preventIntegerFloatArithmetic&&typeof q!==typeof S)throw new Error("Cannot add different types of numbers.");return(0,R.o)(q)+(0,R.o)(S)}}(0,z.f)("FlowGraphAddBlock",G);class Z extends v.c{constructor(q){super((0,C.J)(null===q||void 0===q?void 0:q.type),(0,C.J)(null===q||void 0===q?void 0:q.type),(0,C.J)(null===q||void 0===q?void 0:q.type),((q,S)=>this._polymorphicSubtract(q,S)),"FlowGraphSubtractBlock",q)}_polymorphicSubtract(q,S){const b=(0,R.i)(q),z=(0,R.i)(S);if((0,R.g)(b,z)||(0,R.b)(b,z)||(0,R.c)(b,z))return q.RS(S);if("Quaternion"===b||"Vector4"===z)return new r.Vector4(q.x,q.y,q.z,q.w).Ql(S);if("Vector4"===b||"Quaternion"===z)return q.RS(S);var C;if(null!==(C=this.config)&&void 0!==C&&C.preventIntegerFloatArithmetic&&typeof q!==typeof S)throw new Error("Cannot add different types of numbers.");return(0,R.o)(q)-(0,R.o)(S)}}(0,z.f)("FlowGraphSubtractBlock",Z);class H extends v.c{constructor(q){super((0,C.J)(null===q||void 0===q?void 0:q.type),(0,C.J)(null===q||void 0===q?void 0:q.type),(0,C.J)(null===q||void 0===q?void 0:q.type),((q,S)=>this._polymorphicMultiply(q,S)),"FlowGraphMultiplyBlock",q)}_polymorphicMultiply(q,S){const b=(0,R.i)(q),z=(0,R.i)(S);if((0,R.g)(b,z)||(0,R.b)(b,z))return q.multiply(S);if("Quaternion"===b||"Vector4"===z)return new r.Vector4(q.x,q.y,q.z,q.w).multiplyInPlace(S);if("Vector4"===b||"Quaternion"===z)return q.multiply(S);if((0,R.c)(b,z)){var C;if(null!==(C=this.config)&&void 0!==C&&C.useMatrixPerComponent){const z=q.m;for(let q=0;q<z.length;q++)z[q]*=S.m[q];return"Matrix2D"===b?new y.e(z):"Matrix3D"===b?new y.f(z):r.Matrix.Hb(z)}return S.multiply(q)}var v;if(null!==(v=this.config)&&void 0!==v&&v.preventIntegerFloatArithmetic&&typeof q!==typeof S)throw new Error("Cannot add different types of numbers.");return(0,R.o)(q)*(0,R.o)(S)}}(0,z.f)("FlowGraphMultiplyBlock",H);class Q extends v.c{constructor(q){super((0,C.J)(null===q||void 0===q?void 0:q.type),(0,C.J)(null===q||void 0===q?void 0:q.type),(0,C.J)(null===q||void 0===q?void 0:q.type),((q,S)=>this._polymorphicDivide(q,S)),"FlowGraphDivideBlock",q)}_polymorphicDivide(q,S){const b=(0,R.i)(q),z=(0,R.i)(S);if((0,R.g)(b,z)||(0,R.b)(b,z))return q.divide(S);if("Quaternion"===b||"Quaternion"===z){const b=q.clone();return b.x/=S.x,b.y/=S.y,b.z/=S.z,b.w/=S.w,b}if("Quaternion"===b||"Vector4"===z)return new r.Vector4(q.x,q.y,q.z,q.w).divideInPlace(S);if("Vector4"===b||"Quaternion"===z)return q.divide(S);if((0,R.c)(b,z)){var C;if(null!==(C=this.config)&&void 0!==C&&C.useMatrixPerComponent){const z=q.m;for(let q=0;q<z.length;q++)z[q]/=S.m[q];return"Matrix2D"===b?new y.e(z):"Matrix3D"===b?new y.f(z):r.Matrix.Hb(z)}return q.divide(S)}var v;if(null!==(v=this.config)&&void 0!==v&&v.preventIntegerFloatArithmetic&&typeof q!==typeof S)throw new Error("Cannot add different types of numbers.");return(0,R.o)(q)/(0,R.o)(S)}}(0,z.f)("FlowGraphDivideBlock",Q);class k extends g{constructor(q){super(C.o,(q=>this._random(q)),"FlowGraphRandomBlock",q),this.min=this.registerDataInput("min",C.o,(null===q||void 0===q?void 0:q.min)??0),this.max=this.registerDataInput("max",C.o,(null===q||void 0===q?void 0:q.max)??1),null!==q&&void 0!==q&&q.seed&&(this._seed=q.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const q=1e4*Math.sin(this._seed++);return q-Math.floor(q)}return Math.random()}_random(q){const S=this.min.getValue(q),b=this.max.getValue(q);return this._getRandomValue()*(b-S)+S}}(0,z.f)("FlowGraphRandomBlock",k);class W extends g{constructor(q){super(C.o,(()=>Math.E),"FlowGraphEBlock",q)}}(0,z.f)("FlowGraphEBlock",W);class N extends g{constructor(q){super(C.o,(()=>Math.PI),"FlowGraphPIBlock",q)}}(0,z.f)("FlowGraphPIBlock",N);class u extends g{constructor(q){super(C.o,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",q)}}(0,z.f)("FlowGraphInfBlock",u);class X extends g{constructor(q){super(C.o,(()=>Number.NaN),"FlowGraphNaNBlock",q)}}function T(q,S){switch((0,R.i)(q)){case"FlowGraphInteger":return new l.d(S(q.value));case"Vector2":return new r.Vector2(S(q.x),S(q.y));case"yS":return new r.yS(S(q.x),S(q.y),S(q.z));case"Vector4":return new r.Vector4(S(q.x),S(q.y),S(q.z),S(q.w));case"Quaternion":return new r.Quaternion(S(q.x),S(q.y),S(q.z),S(q.w));case"Matrix":return r.Matrix.Hb(q.m.map(S));case"Matrix2D":return new y.e(q.m.map(S));case"Matrix3D":return new y.f(q.m.map(S));default:return S(q)}}(0,z.f)("FlowGraphNaNBlock",X);class B extends I.e{constructor(q){super(C.o,C.o,(q=>this._polymorphicAbs(q)),"FlowGraphAbsBlock",q)}_polymorphicAbs(q){return T(q,Math.abs)}}(0,z.f)("FlowGraphAbsBlock",B);class t extends I.e{constructor(q){super(C.o,C.o,(q=>this._polymorphicSign(q)),"FlowGraphSignBlock",q)}_polymorphicSign(q){return T(q,Math.sign)}}(0,z.f)("FlowGraphSignBlock",t);class f extends I.e{constructor(q){super(C.o,C.o,(q=>this._polymorphicTrunc(q)),"FlowGraphTruncBlock",q)}_polymorphicTrunc(q){return T(q,Math.trunc)}}(0,z.f)("FlowGraphTruncBlock",f);class m extends I.e{constructor(q){super(C.o,C.o,(q=>this._polymorphicFloor(q)),"FlowGraphFloorBlock",q)}_polymorphicFloor(q){return T(q,Math.floor)}}(0,z.f)("FlowGraphFloorBlock",m);class E extends I.e{constructor(q){super(C.d,C.d,(q=>this._polymorphicCeiling(q)),"FlowGraphCeilBlock",q)}_polymorphicCeiling(q){return T(q,Math.ceil)}}(0,z.f)("FlowGraphCeilBlock",E);class e extends I.e{constructor(q){super(C.d,C.d,(q=>this._polymorphicRound(q)),"FlowGraphRoundBlock",q)}_polymorphicRound(q){return T(q,(q=>{var S;return q<0&&null!==(S=this.config)&&void 0!==S&&S.roundHalfAwayFromZero?-Math.round(-q):Math.round(q)}))}}(0,z.f)("FlowGraphRoundBlock",e);class i extends I.e{constructor(q){super(C.d,C.d,(q=>this._polymorphicFraction(q)),"FlowGraphFractBlock",q)}_polymorphicFraction(q){return T(q,(q=>q-Math.floor(q)))}}(0,z.f)("FlowGraphFractBlock",i);class J extends I.e{constructor(q){super(C.d,C.d,(q=>this._polymorphicNeg(q)),"FlowGraphNegationBlock",q)}_polymorphicNeg(q){return T(q,(q=>-q))}}function L(q,S,b){switch((0,R.i)(q)){case"FlowGraphInteger":return new l.d(b(q.value,S.value));case"Vector2":return new r.Vector2(b(q.x,S.x),b(q.y,S.y));case"yS":return new r.yS(b(q.x,S.x),b(q.y,S.y),b(q.z,S.z));case"Vector4":return new r.Vector4(b(q.x,S.x),b(q.y,S.y),b(q.z,S.z),b(q.w,S.w));case"Quaternion":return new r.Quaternion(b(q.x,S.x),b(q.y,S.y),b(q.z,S.z),b(q.w,S.w));case"Matrix":return r.Matrix.Hb(q.m.map(((q,z)=>b(q,S.m[z]))));case"Matrix2D":return new y.e(q.m.map(((q,z)=>b(q,S.m[z]))));case"Matrix3D":return new y.f(q.m.map(((q,z)=>b(q,S.m[z]))));default:return b((0,R.o)(q),(0,R.o)(S))}}(0,z.f)("FlowGraphNegationBlock",J);class d extends v.c{constructor(q){super(C.d,C.d,C.d,((q,S)=>this._polymorphicRemainder(q,S)),"FlowGraphModuloBlock",q)}_polymorphicRemainder(q,S){return L(q,S,((q,S)=>q%S))}}(0,z.f)("FlowGraphModuloBlock",d);class K extends v.c{constructor(q){super(C.d,C.d,C.d,((q,S)=>this._polymorphicMin(q,S)),"FlowGraphMinBlock",q)}_polymorphicMin(q,S){return L(q,S,Math.min)}}(0,z.f)("FlowGraphMinBlock",K);class D extends v.c{constructor(q){super(C.d,C.d,C.d,((q,S)=>this._polymorphicMax(q,S)),"FlowGraphMaxBlock",q)}_polymorphicMax(q,S){return L(q,S,Math.max)}}function x(q,S,b){return Math.min(Math.max(q,Math.min(S,b)),Math.max(S,b))}function F(q,S,b,z){switch((0,R.i)(q)){case"FlowGraphInteger":return new l.d(z(q.value,S.value,b.value));case"Vector2":return new r.Vector2(z(q.x,S.x,b.x),z(q.y,S.y,b.y));case"yS":return new r.yS(z(q.x,S.x,b.x),z(q.y,S.y,b.y),z(q.z,S.z,b.z));case"Vector4":return new r.Vector4(z(q.x,S.x,b.x),z(q.y,S.y,b.y),z(q.z,S.z,b.z),z(q.w,S.w,b.w));case"Quaternion":return new r.Quaternion(z(q.x,S.x,b.x),z(q.y,S.y,b.y),z(q.z,S.z,b.z),z(q.w,S.w,b.w));case"Matrix":return r.Matrix.Hb(q.m.map(((q,C)=>z(q,S.m[C],b.m[C]))));case"Matrix2D":return new y.e(q.m.map(((q,C)=>z(q,S.m[C],b.m[C]))));case"Matrix3D":return new y.f(q.m.map(((q,C)=>z(q,S.m[C],b.m[C]))));default:return z((0,R.o)(q),(0,R.o)(S),(0,R.o)(b))}}(0,z.f)("FlowGraphMaxBlock",D);class a extends V{constructor(q){super(C.d,C.d,C.d,C.d,((q,S,b)=>this._polymorphicClamp(q,S,b)),"FlowGraphClampBlock",q)}_polymorphicClamp(q,S,b){return F(q,S,b,x)}}function n(q){return Math.min(Math.max(q,0),1)}(0,z.f)("FlowGraphClampBlock",a);class o extends I.e{constructor(q){super(C.d,C.d,(q=>this._polymorphicSaturate(q)),"FlowGraphSaturateBlock",q)}_polymorphicSaturate(q){return T(q,n)}}function s(q,S,b){return(1-b)*q+b*S}(0,z.f)("FlowGraphSaturateBlock",o);class A extends V{constructor(q){super(C.d,C.d,C.d,C.d,((q,S,b)=>this._polymorphicInterpolate(q,S,b)),"FlowGraphMathInterpolationBlock",q)}_polymorphicInterpolate(q,S,b){return F(q,S,b,s)}}(0,z.f)("FlowGraphMathInterpolationBlock",A);class w extends v.c{constructor(q){super(C.d,C.d,C.f,((q,S)=>this._polymorphicEq(q,S)),"FlowGraphEqualityBlock",q)}_polymorphicEq(q,S){const b=(0,R.i)(q),z=(0,R.i)(S);return typeof q===typeof S&&((0,R.g)(b,z)||(0,R.c)(b,z)||(0,R.b)(b,z)?q.equals(S):q===S)}}function P(q,S,b){if((0,R.s)(q)&&(0,R.s)(S))return b((0,R.o)(q),(0,R.o)(S));throw new Error(`Cannot compare ${q} and ${S}`)}(0,z.f)("FlowGraphEqualityBlock",w);class h extends v.c{constructor(q){super(C.d,C.d,C.f,((q,S)=>this._polymorphicLessThan(q,S)),"FlowGraphLessThanBlock",q)}_polymorphicLessThan(q,S){return P(q,S,((q,S)=>q<S))}}(0,z.f)("FlowGraphLessThanBlock",h);class O extends v.c{constructor(q){super(C.d,C.d,C.f,((q,S)=>this._polymorphicLessThanOrEqual(q,S)),"FlowGraphLessThanOrEqualBlock",q)}_polymorphicLessThanOrEqual(q,S){return P(q,S,((q,S)=>q<=S))}}(0,z.f)("FlowGraphLessThanOrEqualBlock",O);class j extends v.c{constructor(q){super(C.d,C.d,C.f,((q,S)=>this._polymorphicGreaterThan(q,S)),"FlowGraphGreaterThanBlock",q)}_polymorphicGreaterThan(q,S){return P(q,S,((q,S)=>q>S))}}(0,z.f)("FlowGraphGreaterThanBlock",j);class M extends v.c{constructor(q){super(C.d,C.d,C.f,((q,S)=>this._polymorphicGreaterThanOrEqual(q,S)),"FlowGraphGreaterThanOrEqualBlock",q)}_polymorphicGreaterThanOrEqual(q,S){return P(q,S,((q,S)=>q>=S))}}(0,z.f)("FlowGraphGreaterThanOrEqualBlock",M);class p extends I.e{constructor(q){super(C.d,C.f,(q=>this._polymorphicIsNan(q)),"FlowGraphIsNaNBlock",q)}_polymorphicIsNan(q){if((0,R.s)(q,!0))return isNaN((0,R.o)(q));throw new Error(`Cannot get NaN of ${q}`)}}(0,z.f)("FlowGraphIsNaNBlock",p);class Y extends I.e{constructor(q){super(C.d,C.f,(q=>this._polymorphicIsInf(q)),"FlowGraphIsInfBlock",q)}_polymorphicIsInf(q){if((0,R.s)(q))return!isFinite((0,R.o)(q));throw new Error(`Cannot get isInf of ${q}`)}}(0,z.f)("FlowGraphIsInfBlock",Y);class c extends I.e{constructor(q){super(C.d,C.d,(q=>this._polymorphicDegToRad(q)),"FlowGraphDegToRadBlock",q)}_degToRad(q){return q*Math.PI/180}_polymorphicDegToRad(q){return T(q,this._degToRad)}}(0,z.f)("FlowGraphDegToRadBlock",c);class qq extends I.e{constructor(q){super(C.d,C.d,(q=>this._polymorphicRadToDeg(q)),"FlowGraphRadToDegBlock",q)}_radToDeg(q){return 180*q/Math.PI}_polymorphicRadToDeg(q){return T(q,this._radToDeg)}}(0,z.f)("FlowGraphRadToDegBlock",qq);class Sq extends I.e{constructor(q){super(C.o,C.o,(q=>this._polymorphicSin(q)),"FlowGraphSinBlock",q)}_polymorphicSin(q){return T(q,Math.sin)}}class bq extends I.e{constructor(q){super(C.o,C.o,(q=>this._polymorphicCos(q)),"FlowGraphCosBlock",q)}_polymorphicCos(q){return T(q,Math.cos)}}class zq extends I.e{constructor(q){super(C.o,C.o,(q=>this._polymorphicTan(q)),"FlowGraphTanBlock",q)}_polymorphicTan(q){return T(q,Math.tan)}}class Cq extends I.e{constructor(q){super(C.o,C.o,(q=>this._polymorphicAsin(q)),"FlowGraphASinBlock",q)}_polymorphicAsin(q){return T(q,Math.asin)}}(0,z.f)("FlowGraphASinBlock",Cq);class vq extends I.e{constructor(q){super(C.o,C.o,(q=>this._polymorphicAcos(q)),"FlowGraphACosBlock",q)}_polymorphicAcos(q){return T(q,Math.acos)}}(0,z.f)("FlowGraphACosBlock",vq);class Uq extends I.e{constructor(q){super(C.o,C.o,(q=>this._polymorphicAtan(q)),"FlowGraphATanBlock",q)}_polymorphicAtan(q){return T(q,Math.atan)}}(0,z.f)("FlowGraphATanBlock",Uq);class gq extends v.c{constructor(q){super(C.d,C.d,C.d,((q,S)=>this._polymorphicAtan2(q,S)),"FlowGraphATan2Block",q)}_polymorphicAtan2(q,S){return L(q,S,Math.atan2)}}(0,z.f)("FlowGraphATan2Block",gq);class rq extends I.e{constructor(q){super(C.d,C.d,(q=>this._polymorphicSinh(q)),"FlowGraphSinhBlock",q)}_polymorphicSinh(q){return T(q,Math.sinh)}}(0,z.f)("FlowGraphSinhBlock",rq);class Iq extends I.e{constructor(q){super(C.d,C.d,(q=>this._polymorphicCosh(q)),"FlowGraphCoshBlock",q)}_polymorphicCosh(q){return T(q,Math.cosh)}}(0,z.f)("FlowGraphCoshBlock",Iq);class Vq extends I.e{constructor(q){super(C.d,C.d,(q=>this._polymorphicTanh(q)),"FlowGraphTanhBlock",q)}_polymorphicTanh(q){return T(q,Math.tanh)}}(0,z.f)("FlowGraphTanhBlock",Vq);class lq extends I.e{constructor(q){super(C.d,C.o,(q=>this._polymorphicAsinh(q)),"FlowGraphASinhBlock",q)}_polymorphicAsinh(q){return T(q,Math.asinh)}}(0,z.f)("FlowGraphASinhBlock",lq);class yq extends I.e{constructor(q){super(C.d,C.o,(q=>this._polymorphicAcosh(q)),"FlowGraphACoshBlock",q)}_polymorphicAcosh(q){return T(q,Math.acosh)}}(0,z.f)("FlowGraphACoshBlock",yq);class Rq extends I.e{constructor(q){super(C.d,C.o,(q=>this._polymorphicAtanh(q)),"FlowGraphATanhBlock",q)}_polymorphicAtanh(q){return T(q,Math.atanh)}}(0,z.f)("FlowGraphATanhBlock",Rq);class Gq extends I.e{constructor(q){super(C.d,C.o,(q=>this._polymorphicExp(q)),"FlowGraphExponentialBlock",q)}_polymorphicExp(q){return T(q,Math.exp)}}(0,z.f)("FlowGraphExponentialBlock",Gq);class Zq extends I.e{constructor(q){super(C.d,C.o,(q=>this._polymorphicLog(q)),"FlowGraphLogBlock",q)}_polymorphicLog(q){return T(q,Math.log)}}(0,z.f)("FlowGraphLogBlock",Zq);class Hq extends I.e{constructor(q){super(C.d,C.o,(q=>this._polymorphicLog2(q)),"FlowGraphLog2Block",q)}_polymorphicLog2(q){return T(q,Math.log2)}}(0,z.f)("FlowGraphLog2Block",Hq);class Qq extends I.e{constructor(q){super(C.d,C.o,(q=>this._polymorphicLog10(q)),"FlowGraphLog10Block",q)}_polymorphicLog10(q){return T(q,Math.log10)}}(0,z.f)("FlowGraphLog10Block",Qq);class kq extends I.e{constructor(q){super(C.d,C.o,(q=>this._polymorphicSqrt(q)),"FlowGraphSquareRootBlock",q)}_polymorphicSqrt(q){return T(q,Math.sqrt)}}(0,z.f)("FlowGraphSquareRootBlock",kq);class Wq extends I.e{constructor(q){super(C.d,C.o,(q=>this._polymorphicCubeRoot(q)),"FlowGraphCubeRootBlock",q)}_polymorphicCubeRoot(q){return T(q,Math.cbrt)}}(0,z.f)("FlowGraphCubeRootBlock",Wq);class Nq extends v.c{constructor(q){super(C.d,C.o,C.o,((q,S)=>this._polymorphicPow(q,S)),"FlowGraphPowerBlock",q)}_polymorphicPow(q,S){return L(q,S,Math.pow)}}(0,z.f)("FlowGraphPowerBlock",Nq);class uq extends I.e{constructor(q){super((0,C.J)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,C.J)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(q=>"boolean"===typeof q?!q:"number"===typeof q?~q:new l.d(~q.value)),"FlowGraphBitwiseNotBlock",q)}}(0,z.f)("FlowGraphBitwiseNotBlock",uq);class Xq extends v.c{constructor(q){super((0,C.J)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,C.J)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,C.J)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),((q,S)=>{if("boolean"===typeof q&&"boolean"===typeof S)return q&&S;if("number"===typeof q&&"number"===typeof S)return q&S;if("object"===typeof q&&"object"===typeof S)return new l.d(q.value&S.value);throw new Error(`Cannot perform bitwise AND on ${q} and ${S}`)}),"FlowGraphBitwiseAndBlock",q)}}(0,z.f)("FlowGraphBitwiseAndBlock",Xq);class Tq extends v.c{constructor(q){super((0,C.J)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,C.J)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,C.J)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),((q,S)=>{if("boolean"===typeof q&&"boolean"===typeof S)return q||S;if("number"===typeof q&&"number"===typeof S)return q|S;if("object"===typeof q&&"object"===typeof S)return new l.d(q.value|S.value);throw new Error(`Cannot perform bitwise OR on ${q} and ${S}`)}),"FlowGraphBitwiseOrBlock",q)}}(0,z.f)("FlowGraphBitwiseOrBlock",Tq);class Bq extends v.c{constructor(q){super((0,C.J)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,C.J)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,C.J)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),((q,S)=>{if("boolean"===typeof q&&"boolean"===typeof S)return q!==S;if("number"===typeof q&&"number"===typeof S)return q^S;if("object"===typeof q&&"object"===typeof S)return new l.d(q.value^S.value);throw new Error(`Cannot perform bitwise XOR on ${q} and ${S}`)}),"FlowGraphBitwiseXorBlock",q)}}(0,z.f)("FlowGraphBitwiseXorBlock",Bq);class tq extends v.c{constructor(q){super(C.h,C.h,C.h,((q,S)=>new l.d(q.value<<S.value)),"FlowGraphBitwiseLeftShiftBlock",q)}}(0,z.f)("FlowGraphBitwiseLeftShiftBlock",tq);class fq extends v.c{constructor(q){super(C.h,C.h,C.h,((q,S)=>new l.d(q.value>>S.value)),"FlowGraphBitwiseRightShiftBlock",q)}}(0,z.f)("FlowGraphBitwiseRightShiftBlock",fq);class mq extends I.e{constructor(q){super(C.h,C.h,(q=>new l.d(Math.clz32(q.value))),"FlowGraphLeadingZerosBlock",q)}}(0,z.f)("FlowGraphLeadingZerosBlock",mq);class Eq extends I.e{constructor(q){super(C.h,C.h,(q=>new l.d(q.value?31-Math.clz32(q.value&-q.value):32)),"FlowGraphTrailingZerosBlock",q)}}(0,z.f)("FlowGraphTrailingZerosBlock",Eq);class eq extends I.e{constructor(q){super(C.h,C.h,(q=>new l.d(function(q){let S=0;for(;q;)S+=1&q,q>>=1;return S}(q.value))),"FlowGraphOneBitsCounterBlock",q)}}(0,z.f)("FlowGraphOneBitsCounterBlock",eq)},14345:(q,S,b)=>{b.d(S,{c:()=>C});var z=b(14353);class C extends z.d{constructor(q,S,b,z,C,v){super(b,v),this._operation=z,this._className=C,this.a=this.registerDataInput("a",q),this.b=this.registerDataInput("b",S)}_doOperation(q){const S=this.a.getValue(q),b=this.b.getValue(q);return this._operation(S,b)}getClassName(){return this._className}}},14353:(q,S,b)=>{b.d(S,{d:()=>g});var z=b(12852),C=b(12839);const v="cachedOperationValue",U="cachedExecutionId";class g extends z.c{constructor(q,S){super(S),this.value=this.registerDataOutput("value",q),this.isValid=this.registerDataOutput("isValid",C.f)}_updateOutputs(q){const S=q._getExecutionVariable(this,U,-1),b=q._getExecutionVariable(this,v,null);if(void 0!==b&&null!==b&&S===q.executionId)this.isValid.setValue(!0,q),this.value.setValue(b,q);else try{const S=this._doOperation(q);if(void 0===S||null===S)return void this.isValid.setValue(!1,q);q._setExecutionVariable(this,v,S),q._setExecutionVariable(this,U,q.executionId),this.value.setValue(S,q),this.isValid.setValue(!0,q)}catch(z){this.isValid.setValue(!1,q)}}}},14361:(q,S,b)=>{b.d(S,{e:()=>C});var z=b(14353);class C extends z.d{constructor(q,S,b,z,C){super(S,C),this._operation=b,this._className=z,this.a=this.registerDataInput("a",q)}_doOperation(q){return this._operation(this.a.getValue(q))}getClassName(){return this._className}}}}]);