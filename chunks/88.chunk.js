"use strict";(self.ksd6jhs1yr=self.ksd6jhs1yr||[]).push([[88],{15605:(C,c,d)=>{d.r(c),d.d(c,{FlowGraphAbsBlock:()=>r,FlowGraphAcosBlock:()=>PC,FlowGraphAcoshBlock:()=>ZC,FlowGraphAddBlock:()=>A,FlowGraphAsinBlock:()=>XC,FlowGraphAsinhBlock:()=>kC,FlowGraphAtan2Block:()=>RC,FlowGraphAtanBlock:()=>VC,FlowGraphAtanhBlock:()=>UC,FlowGraphBitwiseAndBlock:()=>EC,FlowGraphBitwiseLeftShiftBlock:()=>MC,FlowGraphBitwiseNotBlock:()=>WC,FlowGraphBitwiseOrBlock:()=>NC,FlowGraphBitwiseRightShiftBlock:()=>KC,FlowGraphBitwiseXorBlock:()=>rC,FlowGraphCeilBlock:()=>h,FlowGraphClampBlock:()=>v,FlowGraphCosBlock:()=>dC,FlowGraphCoshBlock:()=>jC,FlowGraphCubeRootBlock:()=>eC,FlowGraphDegToRadBlock:()=>O,FlowGraphDivideBlock:()=>B,FlowGraphEBlock:()=>e,FlowGraphEqualityBlock:()=>I,FlowGraphExpBlock:()=>AC,FlowGraphFloorBlock:()=>i,FlowGraphFractionBlock:()=>f,FlowGraphGreaterThanBlock:()=>l,FlowGraphGreaterThanOrEqualBlock:()=>S,FlowGraphInfBlock:()=>W,FlowGraphIsInfinityBlock:()=>a,FlowGraphIsNanBlock:()=>G,FlowGraphLeadingZerosBlock:()=>iC,FlowGraphLessThanBlock:()=>F,FlowGraphLessThanOrEqualBlock:()=>Y,FlowGraphLog10Block:()=>BC,FlowGraphLog2Block:()=>qC,FlowGraphLogBlock:()=>uC,FlowGraphMathInterpolationBlock:()=>Q,FlowGraphMaxBlock:()=>y,FlowGraphMinBlock:()=>J,FlowGraphModuloBlock:()=>w,FlowGraphMultiplyBlock:()=>q,FlowGraphNaNBlock:()=>E,FlowGraphNegationBlock:()=>T,FlowGraphOneBitsCounterBlock:()=>LC,FlowGraphPiBlock:()=>n,FlowGraphPowerBlock:()=>nC,FlowGraphRadToDegBlock:()=>CC,FlowGraphRandomBlock:()=>t,FlowGraphRoundBlock:()=>L,FlowGraphSaturateBlock:()=>s,FlowGraphSignBlock:()=>M,FlowGraphSinBlock:()=>cC,FlowGraphSinhBlock:()=>pC,FlowGraphSquareRootBlock:()=>tC,FlowGraphSubtractBlock:()=>u,FlowGraphTanBlock:()=>bC,FlowGraphTanhBlock:()=>gC,FlowGraphTrailingZerosBlock:()=>hC,FlowGraphTruncBlock:()=>K});var b=d(12345),X=d(14126),P=d(15608),V=d(15611);class R extends V.e{constructor(C,c,d,b){super(C,b),this._operation=c,this._className=d}_doOperation(C){return this._operation(C)}getClassName(){return this._className}}var p=d(12403),j=d(15618);class g extends V.e{constructor(C,c,d,b,X,P,V){super(b,V),this._operation=X,this._className=P,this.a=this.registerDataInput("a",C),this.b=this.registerDataInput("b",c),this.c=this.registerDataInput("c",d)}_doOperation(C){return this._operation(this.a.getValue(C),this.b.getValue(C),this.c.getValue(C))}getClassName(){return this._className}}var k=d(14120),Z=d(14135),U=d(14169);class A extends P.d{constructor(C){super((0,X.H)(null===C||void 0===C?void 0:C.type),(0,X.H)(null===C||void 0===C?void 0:C.type),(0,X.H)(null===C||void 0===C?void 0:C.type),((C,c)=>this._polymorphicAdd(C,c)),"FlowGraphAddBlock",C)}_polymorphicAdd(C,c){const d=(0,U.h)(C),b=(0,U.h)(c);if((0,U.g)(d,b)||(0,U.d)(d,b)||(0,U.b)(d,b))return C.add(c);if("Quaternion"===d||"Vector4"===b)return new p.Vector4(C.x,C.y,C.z,C.w).addInPlace(c);if("Vector4"===d||"Quaternion"===b)return C.add(c);var X;if(null!==(X=this.config)&&void 0!==X&&X.preventIntegerFloatArithmetic&&typeof C!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,U.k)(C)+(0,U.k)(c)}}(0,b.e)("FlowGraphAddBlock",A);class u extends P.d{constructor(C){super((0,X.H)(null===C||void 0===C?void 0:C.type),(0,X.H)(null===C||void 0===C?void 0:C.type),(0,X.H)(null===C||void 0===C?void 0:C.type),((C,c)=>this._polymorphicSubtract(C,c)),"FlowGraphSubtractBlock",C)}_polymorphicSubtract(C,c){const d=(0,U.h)(C),b=(0,U.h)(c);if((0,U.g)(d,b)||(0,U.b)(d,b)||(0,U.d)(d,b))return C.Xd(c);if("Quaternion"===d||"Vector4"===b)return new p.Vector4(C.x,C.y,C.z,C.w).wZ(c);if("Vector4"===d||"Quaternion"===b)return C.Xd(c);var X;if(null!==(X=this.config)&&void 0!==X&&X.preventIntegerFloatArithmetic&&typeof C!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,U.k)(C)-(0,U.k)(c)}}(0,b.e)("FlowGraphSubtractBlock",u);class q extends P.d{constructor(C){super((0,X.H)(null===C||void 0===C?void 0:C.type),(0,X.H)(null===C||void 0===C?void 0:C.type),(0,X.H)(null===C||void 0===C?void 0:C.type),((C,c)=>this._polymorphicMultiply(C,c)),"FlowGraphMultiplyBlock",C)}_polymorphicMultiply(C,c){const d=(0,U.h)(C),b=(0,U.h)(c);if((0,U.g)(d,b)||(0,U.b)(d,b))return C.multiply(c);if("Quaternion"===d||"Vector4"===b)return new p.Vector4(C.x,C.y,C.z,C.w).multiplyInPlace(c);if("Vector4"===d||"Quaternion"===b)return C.multiply(c);if((0,U.d)(d,b)){var X;if(null!==(X=this.config)&&void 0!==X&&X.useMatrixPerComponent){const b=C.m;for(let C=0;C<b.length;C++)b[C]*=c.m[C];return"Matrix2D"===d?new Z.c(b):"Matrix3D"===d?new Z.e(b):p.Matrix.jd(b)}return c.multiply(C)}var P;if(null!==(P=this.config)&&void 0!==P&&P.preventIntegerFloatArithmetic&&typeof C!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,U.k)(C)*(0,U.k)(c)}}(0,b.e)("FlowGraphMultiplyBlock",q);class B extends P.d{constructor(C){super((0,X.H)(null===C||void 0===C?void 0:C.type),(0,X.H)(null===C||void 0===C?void 0:C.type),(0,X.H)(null===C||void 0===C?void 0:C.type),((C,c)=>this._polymorphicDivide(C,c)),"FlowGraphDivideBlock",C)}_polymorphicDivide(C,c){const d=(0,U.h)(C),b=(0,U.h)(c);if((0,U.g)(d,b)||(0,U.b)(d,b))return C.divide(c);if("Quaternion"===d||"Quaternion"===b){const d=C.clone();return d.x/=c.x,d.y/=c.y,d.z/=c.z,d.w/=c.w,d}if("Quaternion"===d||"Vector4"===b)return new p.Vector4(C.x,C.y,C.z,C.w).divideInPlace(c);if("Vector4"===d||"Quaternion"===b)return C.divide(c);if((0,U.d)(d,b)){var X;if(null!==(X=this.config)&&void 0!==X&&X.useMatrixPerComponent){const b=C.m;for(let C=0;C<b.length;C++)b[C]/=c.m[C];return"Matrix2D"===d?new Z.c(b):"Matrix3D"===d?new Z.e(b):p.Matrix.jd(b)}return C.divide(c)}var P;if(null!==(P=this.config)&&void 0!==P&&P.preventIntegerFloatArithmetic&&typeof C!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,U.k)(C)/(0,U.k)(c)}}(0,b.e)("FlowGraphDivideBlock",B);class t extends R{constructor(C){super(X.q,(C=>this._random(C)),"FlowGraphRandomBlock",C),this.min=this.registerDataInput("min",X.q,(null===C||void 0===C?void 0:C.min)??0),this.max=this.registerDataInput("max",X.q,(null===C||void 0===C?void 0:C.max)??1),null!==C&&void 0!==C&&C.seed&&(this._seed=C.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const C=1e4*Math.sin(this._seed++);return C-Math.floor(C)}return Math.random()}_random(C){const c=this.min.getValue(C),d=this.max.getValue(C);return this._getRandomValue()*(d-c)+c}}(0,b.e)("FlowGraphRandomBlock",t);class e extends R{constructor(C){super(X.q,(()=>Math.E),"FlowGraphEBlock",C)}}(0,b.e)("FlowGraphEBlock",e);class n extends R{constructor(C){super(X.q,(()=>Math.PI),"FlowGraphPIBlock",C)}}(0,b.e)("FlowGraphPIBlock",n);class W extends R{constructor(C){super(X.q,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",C)}}(0,b.e)("FlowGraphInfBlock",W);class E extends R{constructor(C){super(X.q,(()=>Number.NaN),"FlowGraphNaNBlock",C)}}function N(C,c){switch((0,U.h)(C)){case"FlowGraphInteger":return new k.c(c(C.value));case"Vector2":return new p.Vector2(c(C.x),c(C.y));case"dd":return new p.dd(c(C.x),c(C.y),c(C.z));case"Vector4":return new p.Vector4(c(C.x),c(C.y),c(C.z),c(C.w));case"Quaternion":return new p.Quaternion(c(C.x),c(C.y),c(C.z),c(C.w));case"Matrix":return p.Matrix.jd(C.m.map(c));case"Matrix2D":return new Z.c(C.m.map(c));case"Matrix3D":return new Z.e(C.m.map(c));default:return c(C)}}(0,b.e)("FlowGraphNaNBlock",E);class r extends j.c{constructor(C){super(X.q,X.q,(C=>this._polymorphicAbs(C)),"FlowGraphAbsBlock",C)}_polymorphicAbs(C){return N(C,Math.abs)}}(0,b.e)("FlowGraphAbsBlock",r);class M extends j.c{constructor(C){super(X.q,X.q,(C=>this._polymorphicSign(C)),"FlowGraphSignBlock",C)}_polymorphicSign(C){return N(C,Math.sign)}}(0,b.e)("FlowGraphSignBlock",M);class K extends j.c{constructor(C){super(X.q,X.q,(C=>this._polymorphicTrunc(C)),"FlowGraphTruncBlock",C)}_polymorphicTrunc(C){return N(C,Math.trunc)}}(0,b.e)("FlowGraphTruncBlock",K);class i extends j.c{constructor(C){super(X.q,X.q,(C=>this._polymorphicFloor(C)),"FlowGraphFloorBlock",C)}_polymorphicFloor(C){return N(C,Math.floor)}}(0,b.e)("FlowGraphFloorBlock",i);class h extends j.c{constructor(C){super(X.b,X.b,(C=>this._polymorphicCeiling(C)),"FlowGraphCeilBlock",C)}_polymorphicCeiling(C){return N(C,Math.ceil)}}(0,b.e)("FlowGraphCeilBlock",h);class L extends j.c{constructor(C){super(X.b,X.b,(C=>this._polymorphicRound(C)),"FlowGraphRoundBlock",C)}_polymorphicRound(C){return N(C,(C=>{var c;return C<0&&null!==(c=this.config)&&void 0!==c&&c.roundHalfAwayFromZero?-Math.round(-C):Math.round(C)}))}}(0,b.e)("FlowGraphRoundBlock",L);class f extends j.c{constructor(C){super(X.b,X.b,(C=>this._polymorphicFraction(C)),"FlowGraphFractBlock",C)}_polymorphicFraction(C){return N(C,(C=>C-Math.floor(C)))}}(0,b.e)("FlowGraphFractBlock",f);class T extends j.c{constructor(C){super(X.b,X.b,(C=>this._polymorphicNeg(C)),"FlowGraphNegationBlock",C)}_polymorphicNeg(C){return N(C,(C=>-C))}}function z(C,c,d){switch((0,U.h)(C)){case"FlowGraphInteger":return new k.c(d(C.value,c.value));case"Vector2":return new p.Vector2(d(C.x,c.x),d(C.y,c.y));case"dd":return new p.dd(d(C.x,c.x),d(C.y,c.y),d(C.z,c.z));case"Vector4":return new p.Vector4(d(C.x,c.x),d(C.y,c.y),d(C.z,c.z),d(C.w,c.w));case"Quaternion":return new p.Quaternion(d(C.x,c.x),d(C.y,c.y),d(C.z,c.z),d(C.w,c.w));case"Matrix":return p.Matrix.jd(C.m.map(((C,b)=>d(C,c.m[b]))));case"Matrix2D":return new Z.c(C.m.map(((C,b)=>d(C,c.m[b]))));case"Matrix3D":return new Z.e(C.m.map(((C,b)=>d(C,c.m[b]))));default:return d((0,U.k)(C),(0,U.k)(c))}}(0,b.e)("FlowGraphNegationBlock",T);class w extends P.d{constructor(C){super(X.b,X.b,X.b,((C,c)=>this._polymorphicRemainder(C,c)),"FlowGraphModuloBlock",C)}_polymorphicRemainder(C,c){return z(C,c,((C,c)=>C%c))}}(0,b.e)("FlowGraphModuloBlock",w);class J extends P.d{constructor(C){super(X.b,X.b,X.b,((C,c)=>this._polymorphicMin(C,c)),"FlowGraphMinBlock",C)}_polymorphicMin(C,c){return z(C,c,Math.min)}}(0,b.e)("FlowGraphMinBlock",J);class y extends P.d{constructor(C){super(X.b,X.b,X.b,((C,c)=>this._polymorphicMax(C,c)),"FlowGraphMaxBlock",C)}_polymorphicMax(C,c){return z(C,c,Math.max)}}function x(C,c,d){return Math.min(Math.max(C,Math.min(c,d)),Math.max(c,d))}function H(C,c,d,b){switch((0,U.h)(C)){case"FlowGraphInteger":return new k.c(b(C.value,c.value,d.value));case"Vector2":return new p.Vector2(b(C.x,c.x,d.x),b(C.y,c.y,d.y));case"dd":return new p.dd(b(C.x,c.x,d.x),b(C.y,c.y,d.y),b(C.z,c.z,d.z));case"Vector4":return new p.Vector4(b(C.x,c.x,d.x),b(C.y,c.y,d.y),b(C.z,c.z,d.z),b(C.w,c.w,d.w));case"Quaternion":return new p.Quaternion(b(C.x,c.x,d.x),b(C.y,c.y,d.y),b(C.z,c.z,d.z),b(C.w,c.w,d.w));case"Matrix":return p.Matrix.jd(C.m.map(((C,X)=>b(C,c.m[X],d.m[X]))));case"Matrix2D":return new Z.c(C.m.map(((C,X)=>b(C,c.m[X],d.m[X]))));case"Matrix3D":return new Z.e(C.m.map(((C,X)=>b(C,c.m[X],d.m[X]))));default:return b((0,U.k)(C),(0,U.k)(c),(0,U.k)(d))}}(0,b.e)("FlowGraphMaxBlock",y);class v extends g{constructor(C){super(X.b,X.b,X.b,X.b,((C,c,d)=>this._polymorphicClamp(C,c,d)),"FlowGraphClampBlock",C)}_polymorphicClamp(C,c,d){return H(C,c,d,x)}}function D(C){return Math.min(Math.max(C,0),1)}(0,b.e)("FlowGraphClampBlock",v);class s extends j.c{constructor(C){super(X.b,X.b,(C=>this._polymorphicSaturate(C)),"FlowGraphSaturateBlock",C)}_polymorphicSaturate(C){return N(C,D)}}function mC(C,c,d){return(1-d)*C+d*c}(0,b.e)("FlowGraphSaturateBlock",s);class Q extends g{constructor(C){super(X.b,X.b,X.b,X.b,((C,c,d)=>this._polymorphicInterpolate(C,c,d)),"FlowGraphMathInterpolationBlock",C)}_polymorphicInterpolate(C,c,d){return H(C,c,d,mC)}}(0,b.e)("FlowGraphMathInterpolationBlock",Q);class I extends P.d{constructor(C){super(X.b,X.b,X.e,((C,c)=>this._polymorphicEq(C,c)),"FlowGraphEqualityBlock",C)}_polymorphicEq(C,c){const d=(0,U.h)(C),b=(0,U.h)(c);return typeof C===typeof c&&((0,U.g)(d,b)||(0,U.d)(d,b)||(0,U.b)(d,b)?C.equals(c):C===c)}}function o(C,c,d){if((0,U.n)(C)&&(0,U.n)(c))return d((0,U.k)(C),(0,U.k)(c));throw new Error(`Cannot compare ${C} and ${c}`)}(0,b.e)("FlowGraphEqualityBlock",I);class F extends P.d{constructor(C){super(X.b,X.b,X.e,((C,c)=>this._polymorphicLessThan(C,c)),"FlowGraphLessThanBlock",C)}_polymorphicLessThan(C,c){return o(C,c,((C,c)=>C<c))}}(0,b.e)("FlowGraphLessThanBlock",F);class Y extends P.d{constructor(C){super(X.b,X.b,X.e,((C,c)=>this._polymorphicLessThanOrEqual(C,c)),"FlowGraphLessThanOrEqualBlock",C)}_polymorphicLessThanOrEqual(C,c){return o(C,c,((C,c)=>C<=c))}}(0,b.e)("FlowGraphLessThanOrEqualBlock",Y);class l extends P.d{constructor(C){super(X.b,X.b,X.e,((C,c)=>this._polymorphicGreaterThan(C,c)),"FlowGraphGreaterThanBlock",C)}_polymorphicGreaterThan(C,c){return o(C,c,((C,c)=>C>c))}}(0,b.e)("FlowGraphGreaterThanBlock",l);class S extends P.d{constructor(C){super(X.b,X.b,X.e,((C,c)=>this._polymorphicGreaterThanOrEqual(C,c)),"FlowGraphGreaterThanOrEqualBlock",C)}_polymorphicGreaterThanOrEqual(C,c){return o(C,c,((C,c)=>C>=c))}}(0,b.e)("FlowGraphGreaterThanOrEqualBlock",S);class G extends j.c{constructor(C){super(X.b,X.e,(C=>this._polymorphicIsNan(C)),"FlowGraphIsNaNBlock",C)}_polymorphicIsNan(C){if((0,U.n)(C,!0))return isNaN((0,U.k)(C));throw new Error(`Cannot get NaN of ${C}`)}}(0,b.e)("FlowGraphIsNaNBlock",G);class a extends j.c{constructor(C){super(X.b,X.e,(C=>this._polymorphicIsInf(C)),"FlowGraphIsInfBlock",C)}_polymorphicIsInf(C){if((0,U.n)(C))return!isFinite((0,U.k)(C));throw new Error(`Cannot get isInf of ${C}`)}}(0,b.e)("FlowGraphIsInfBlock",a);class O extends j.c{constructor(C){super(X.b,X.b,(C=>this._polymorphicDegToRad(C)),"FlowGraphDegToRadBlock",C)}_degToRad(C){return C*Math.PI/180}_polymorphicDegToRad(C){return N(C,this._degToRad)}}(0,b.e)("FlowGraphDegToRadBlock",O);class CC extends j.c{constructor(C){super(X.b,X.b,(C=>this._polymorphicRadToDeg(C)),"FlowGraphRadToDegBlock",C)}_radToDeg(C){return 180*C/Math.PI}_polymorphicRadToDeg(C){return N(C,this._radToDeg)}}(0,b.e)("FlowGraphRadToDegBlock",CC);class cC extends j.c{constructor(C){super(X.q,X.q,(C=>this._polymorphicSin(C)),"FlowGraphSinBlock",C)}_polymorphicSin(C){return N(C,Math.sin)}}class dC extends j.c{constructor(C){super(X.q,X.q,(C=>this._polymorphicCos(C)),"FlowGraphCosBlock",C)}_polymorphicCos(C){return N(C,Math.cos)}}class bC extends j.c{constructor(C){super(X.q,X.q,(C=>this._polymorphicTan(C)),"FlowGraphTanBlock",C)}_polymorphicTan(C){return N(C,Math.tan)}}class XC extends j.c{constructor(C){super(X.q,X.q,(C=>this._polymorphicAsin(C)),"FlowGraphASinBlock",C)}_polymorphicAsin(C){return N(C,Math.asin)}}(0,b.e)("FlowGraphASinBlock",XC);class PC extends j.c{constructor(C){super(X.q,X.q,(C=>this._polymorphicAcos(C)),"FlowGraphACosBlock",C)}_polymorphicAcos(C){return N(C,Math.acos)}}(0,b.e)("FlowGraphACosBlock",PC);class VC extends j.c{constructor(C){super(X.q,X.q,(C=>this._polymorphicAtan(C)),"FlowGraphATanBlock",C)}_polymorphicAtan(C){return N(C,Math.atan)}}(0,b.e)("FlowGraphATanBlock",VC);class RC extends P.d{constructor(C){super(X.b,X.b,X.b,((C,c)=>this._polymorphicAtan2(C,c)),"FlowGraphATan2Block",C)}_polymorphicAtan2(C,c){return z(C,c,Math.atan2)}}(0,b.e)("FlowGraphATan2Block",RC);class pC extends j.c{constructor(C){super(X.b,X.b,(C=>this._polymorphicSinh(C)),"FlowGraphSinhBlock",C)}_polymorphicSinh(C){return N(C,Math.sinh)}}(0,b.e)("FlowGraphSinhBlock",pC);class jC extends j.c{constructor(C){super(X.b,X.b,(C=>this._polymorphicCosh(C)),"FlowGraphCoshBlock",C)}_polymorphicCosh(C){return N(C,Math.cosh)}}(0,b.e)("FlowGraphCoshBlock",jC);class gC extends j.c{constructor(C){super(X.b,X.b,(C=>this._polymorphicTanh(C)),"FlowGraphTanhBlock",C)}_polymorphicTanh(C){return N(C,Math.tanh)}}(0,b.e)("FlowGraphTanhBlock",gC);class kC extends j.c{constructor(C){super(X.b,X.q,(C=>this._polymorphicAsinh(C)),"FlowGraphASinhBlock",C)}_polymorphicAsinh(C){return N(C,Math.asinh)}}(0,b.e)("FlowGraphASinhBlock",kC);class ZC extends j.c{constructor(C){super(X.b,X.q,(C=>this._polymorphicAcosh(C)),"FlowGraphACoshBlock",C)}_polymorphicAcosh(C){return N(C,Math.acosh)}}(0,b.e)("FlowGraphACoshBlock",ZC);class UC extends j.c{constructor(C){super(X.b,X.q,(C=>this._polymorphicAtanh(C)),"FlowGraphATanhBlock",C)}_polymorphicAtanh(C){return N(C,Math.atanh)}}(0,b.e)("FlowGraphATanhBlock",UC);class AC extends j.c{constructor(C){super(X.b,X.q,(C=>this._polymorphicExp(C)),"FlowGraphExponentialBlock",C)}_polymorphicExp(C){return N(C,Math.exp)}}(0,b.e)("FlowGraphExponentialBlock",AC);class uC extends j.c{constructor(C){super(X.b,X.q,(C=>this._polymorphicLog(C)),"FlowGraphLogBlock",C)}_polymorphicLog(C){return N(C,Math.log)}}(0,b.e)("FlowGraphLogBlock",uC);class qC extends j.c{constructor(C){super(X.b,X.q,(C=>this._polymorphicLog2(C)),"FlowGraphLog2Block",C)}_polymorphicLog2(C){return N(C,Math.log2)}}(0,b.e)("FlowGraphLog2Block",qC);class BC extends j.c{constructor(C){super(X.b,X.q,(C=>this._polymorphicLog10(C)),"FlowGraphLog10Block",C)}_polymorphicLog10(C){return N(C,Math.log10)}}(0,b.e)("FlowGraphLog10Block",BC);class tC extends j.c{constructor(C){super(X.b,X.q,(C=>this._polymorphicSqrt(C)),"FlowGraphSquareRootBlock",C)}_polymorphicSqrt(C){return N(C,Math.sqrt)}}(0,b.e)("FlowGraphSquareRootBlock",tC);class eC extends j.c{constructor(C){super(X.b,X.q,(C=>this._polymorphicCubeRoot(C)),"FlowGraphCubeRootBlock",C)}_polymorphicCubeRoot(C){return N(C,Math.cbrt)}}(0,b.e)("FlowGraphCubeRootBlock",eC);class nC extends P.d{constructor(C){super(X.b,X.q,X.q,((C,c)=>this._polymorphicPow(C,c)),"FlowGraphPowerBlock",C)}_polymorphicPow(C,c){return z(C,c,Math.pow)}}(0,b.e)("FlowGraphPowerBlock",nC);class WC extends j.c{constructor(C){super((0,X.H)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),(0,X.H)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),(C=>"boolean"===typeof C?!C:"number"===typeof C?~C:new k.c(~C.value)),"FlowGraphBitwiseNotBlock",C)}}(0,b.e)("FlowGraphBitwiseNotBlock",WC);class EC extends P.d{constructor(C){super((0,X.H)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),(0,X.H)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),(0,X.H)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),((C,c)=>{if("boolean"===typeof C&&"boolean"===typeof c)return C&&c;if("number"===typeof C&&"number"===typeof c)return C&c;if("object"===typeof C&&"object"===typeof c)return new k.c(C.value&c.value);throw new Error(`Cannot perform bitwise AND on ${C} and ${c}`)}),"FlowGraphBitwiseAndBlock",C)}}(0,b.e)("FlowGraphBitwiseAndBlock",EC);class NC extends P.d{constructor(C){super((0,X.H)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),(0,X.H)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),(0,X.H)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),((C,c)=>{if("boolean"===typeof C&&"boolean"===typeof c)return C||c;if("number"===typeof C&&"number"===typeof c)return C|c;if("object"===typeof C&&"object"===typeof c)return new k.c(C.value|c.value);throw new Error(`Cannot perform bitwise OR on ${C} and ${c}`)}),"FlowGraphBitwiseOrBlock",C)}}(0,b.e)("FlowGraphBitwiseOrBlock",NC);class rC extends P.d{constructor(C){super((0,X.H)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),(0,X.H)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),(0,X.H)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),((C,c)=>{if("boolean"===typeof C&&"boolean"===typeof c)return C!==c;if("number"===typeof C&&"number"===typeof c)return C^c;if("object"===typeof C&&"object"===typeof c)return new k.c(C.value^c.value);throw new Error(`Cannot perform bitwise XOR on ${C} and ${c}`)}),"FlowGraphBitwiseXorBlock",C)}}(0,b.e)("FlowGraphBitwiseXorBlock",rC);class MC extends P.d{constructor(C){super(X.h,X.h,X.h,((C,c)=>new k.c(C.value<<c.value)),"FlowGraphBitwiseLeftShiftBlock",C)}}(0,b.e)("FlowGraphBitwiseLeftShiftBlock",MC);class KC extends P.d{constructor(C){super(X.h,X.h,X.h,((C,c)=>new k.c(C.value>>c.value)),"FlowGraphBitwiseRightShiftBlock",C)}}(0,b.e)("FlowGraphBitwiseRightShiftBlock",KC);class iC extends j.c{constructor(C){super(X.h,X.h,(C=>new k.c(Math.clz32(C.value))),"FlowGraphLeadingZerosBlock",C)}}(0,b.e)("FlowGraphLeadingZerosBlock",iC);class hC extends j.c{constructor(C){super(X.h,X.h,(C=>new k.c(C.value?31-Math.clz32(C.value&-C.value):32)),"FlowGraphTrailingZerosBlock",C)}}(0,b.e)("FlowGraphTrailingZerosBlock",hC);class LC extends j.c{constructor(C){super(X.h,X.h,(C=>new k.c(function(C){let c=0;for(;C;)c+=1&C,C>>=1;return c}(C.value))),"FlowGraphOneBitsCounterBlock",C)}}(0,b.e)("FlowGraphOneBitsCounterBlock",LC)},15608:(C,c,d)=>{d.d(c,{d:()=>X});var b=d(15611);class X extends b.e{constructor(C,c,d,b,X,P){super(d,P),this._operation=b,this._className=X,this.a=this.registerDataInput("a",C),this.b=this.registerDataInput("b",c)}_doOperation(C){const c=this.a.getValue(C),d=this.b.getValue(C);return this._operation(c,d)}getClassName(){return this._className}}},15611:(C,c,d)=>{d.d(c,{e:()=>R});var b=d(14158),X=d(14126);const P="cachedOperationValue",V="cachedExecutionId";class R extends b.e{constructor(C,c){super(c),this.value=this.registerDataOutput("value",C),this.isValid=this.registerDataOutput("isValid",X.e)}_updateOutputs(C){const c=C._getExecutionVariable(this,V,-1),d=C._getExecutionVariable(this,P,null);if(void 0!==d&&null!==d&&c===C.executionId)this.isValid.setValue(!0,C),this.value.setValue(d,C);else try{const c=this._doOperation(C);if(void 0===c||null===c)return void this.isValid.setValue(!1,C);C._setExecutionVariable(this,P,c),C._setExecutionVariable(this,V,C.executionId),this.value.setValue(c,C),this.isValid.setValue(!0,C)}catch(b){this.isValid.setValue(!1,C)}}}},15618:(C,c,d)=>{d.d(c,{c:()=>X});var b=d(15611);class X extends b.e{constructor(C,c,d,b,X){super(c,X),this._operation=d,this._className=b,this.a=this.registerDataInput("a",C)}_doOperation(C){return this._operation(this.a.getValue(C))}getClassName(){return this._className}}}}]);