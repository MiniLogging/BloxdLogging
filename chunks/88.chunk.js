"use strict";(self.uw9p3pwwsje=self.uw9p3pwwsje||[]).push([[88],{15897:(D,h,o)=>{o.r(h),o.d(h,{FlowGraphAbsBlock:()=>N,FlowGraphAcosBlock:()=>jD,FlowGraphAcoshBlock:()=>QD,FlowGraphAddBlock:()=>r,FlowGraphAsinBlock:()=>gD,FlowGraphAsinhBlock:()=>KD,FlowGraphAtan2Block:()=>RD,FlowGraphAtanBlock:()=>MD,FlowGraphAtanhBlock:()=>vD,FlowGraphBitwiseAndBlock:()=>iD,FlowGraphBitwiseLeftShiftBlock:()=>JD,FlowGraphBitwiseNotBlock:()=>bD,FlowGraphBitwiseOrBlock:()=>GD,FlowGraphBitwiseRightShiftBlock:()=>OD,FlowGraphBitwiseXorBlock:()=>ND,FlowGraphCeilBlock:()=>L,FlowGraphClampBlock:()=>n,FlowGraphCosBlock:()=>oD,FlowGraphCoshBlock:()=>SD,FlowGraphCubeRootBlock:()=>cD,FlowGraphDegToRadBlock:()=>x,FlowGraphDivideBlock:()=>U,FlowGraphEBlock:()=>c,FlowGraphEqualityBlock:()=>C,FlowGraphExpBlock:()=>rD,FlowGraphFloorBlock:()=>E,FlowGraphFractionBlock:()=>Z,FlowGraphGreaterThanBlock:()=>d,FlowGraphGreaterThanOrEqualBlock:()=>X,FlowGraphInfBlock:()=>b,FlowGraphIsInfinityBlock:()=>W,FlowGraphIsNanBlock:()=>A,FlowGraphLeadingZerosBlock:()=>ED,FlowGraphLessThanBlock:()=>f,FlowGraphLessThanOrEqualBlock:()=>V,FlowGraphLog10Block:()=>UD,FlowGraphLog2Block:()=>sD,FlowGraphLogBlock:()=>BD,FlowGraphMathInterpolationBlock:()=>l,FlowGraphMaxBlock:()=>u,FlowGraphMinBlock:()=>a,FlowGraphModuloBlock:()=>mD,FlowGraphMultiplyBlock:()=>s,FlowGraphNaNBlock:()=>i,FlowGraphNegationBlock:()=>e,FlowGraphOneBitsCounterBlock:()=>TD,FlowGraphPiBlock:()=>y,FlowGraphPowerBlock:()=>yD,FlowGraphRadToDegBlock:()=>DD,FlowGraphRandomBlock:()=>q,FlowGraphRoundBlock:()=>T,FlowGraphSaturateBlock:()=>w,FlowGraphSignBlock:()=>J,FlowGraphSinBlock:()=>hD,FlowGraphSinhBlock:()=>tD,FlowGraphSquareRootBlock:()=>qD,FlowGraphSubtractBlock:()=>B,FlowGraphTanBlock:()=>HD,FlowGraphTanhBlock:()=>kD,FlowGraphTrailingZerosBlock:()=>LD,FlowGraphTruncBlock:()=>O});var H=o(12793),g=o(14362),j=o(15901),M=o(15909);class R extends M.b{constructor(D,h,o,H){super(D,H),this._operation=h,this._className=o}_doOperation(D){return this._operation(D)}getClassName(){return this._className}}var t=o(12831),S=o(15918);class k extends M.b{constructor(D,h,o,H,g,j,M){super(H,M),this._operation=g,this._className=j,this.a=this.registerDataInput("a",D),this.b=this.registerDataInput("b",h),this.c=this.registerDataInput("c",o)}_doOperation(D){return this._operation(this.a.getValue(D),this.b.getValue(D),this.c.getValue(D))}getClassName(){return this._className}}var K=o(14360),Q=o(14366),v=o(14402);class r extends j.c{constructor(D){super((0,g.D)(null===D||void 0===D?void 0:D.type),(0,g.D)(null===D||void 0===D?void 0:D.type),(0,g.D)(null===D||void 0===D?void 0:D.type),((D,h)=>this._polymorphicAdd(D,h)),"FlowGraphAddBlock",D)}_polymorphicAdd(D,h){const o=(0,v.l)(D),H=(0,v.l)(h);if((0,v.h)(o,H)||(0,v.e)(o,H)||(0,v.b)(o,H))return D.add(h);if("Quaternion"===o||"Vector4"===H)return new t.Vector4(D.x,D.y,D.z,D.w).addInPlace(h);if("Vector4"===o||"Quaternion"===H)return D.add(h);var g;if(null!==(g=this.config)&&void 0!==g&&g.preventIntegerFloatArithmetic&&typeof D!==typeof h)throw new Error("Cannot add different types of numbers.");return(0,v.q)(D)+(0,v.q)(h)}}(0,H.g)("FlowGraphAddBlock",r);class B extends j.c{constructor(D){super((0,g.D)(null===D||void 0===D?void 0:D.type),(0,g.D)(null===D||void 0===D?void 0:D.type),(0,g.D)(null===D||void 0===D?void 0:D.type),((D,h)=>this._polymorphicSubtract(D,h)),"FlowGraphSubtractBlock",D)}_polymorphicSubtract(D,h){const o=(0,v.l)(D),H=(0,v.l)(h);if((0,v.h)(o,H)||(0,v.b)(o,H)||(0,v.e)(o,H))return D.Nh(h);if("Quaternion"===o||"Vector4"===H)return new t.Vector4(D.x,D.y,D.z,D.w).zK(h);if("Vector4"===o||"Quaternion"===H)return D.Nh(h);var g;if(null!==(g=this.config)&&void 0!==g&&g.preventIntegerFloatArithmetic&&typeof D!==typeof h)throw new Error("Cannot add different types of numbers.");return(0,v.q)(D)-(0,v.q)(h)}}(0,H.g)("FlowGraphSubtractBlock",B);class s extends j.c{constructor(D){super((0,g.D)(null===D||void 0===D?void 0:D.type),(0,g.D)(null===D||void 0===D?void 0:D.type),(0,g.D)(null===D||void 0===D?void 0:D.type),((D,h)=>this._polymorphicMultiply(D,h)),"FlowGraphMultiplyBlock",D)}_polymorphicMultiply(D,h){const o=(0,v.l)(D),H=(0,v.l)(h);if((0,v.h)(o,H)||(0,v.b)(o,H))return D.multiply(h);if("Quaternion"===o||"Vector4"===H)return new t.Vector4(D.x,D.y,D.z,D.w).multiplyInPlace(h);if("Vector4"===o||"Quaternion"===H)return D.multiply(h);if((0,v.e)(o,H)){var g;if(null!==(g=this.config)&&void 0!==g&&g.useMatrixPerComponent){const H=D.m;for(let D=0;D<H.length;D++)H[D]*=h.m[D];return"Matrix2D"===o?new Q.e(H):"Matrix3D"===o?new Q.h(H):t.Matrix.Ih(H)}return h.multiply(D)}var j;if(null!==(j=this.config)&&void 0!==j&&j.preventIntegerFloatArithmetic&&typeof D!==typeof h)throw new Error("Cannot add different types of numbers.");return(0,v.q)(D)*(0,v.q)(h)}}(0,H.g)("FlowGraphMultiplyBlock",s);class U extends j.c{constructor(D){super((0,g.D)(null===D||void 0===D?void 0:D.type),(0,g.D)(null===D||void 0===D?void 0:D.type),(0,g.D)(null===D||void 0===D?void 0:D.type),((D,h)=>this._polymorphicDivide(D,h)),"FlowGraphDivideBlock",D)}_polymorphicDivide(D,h){const o=(0,v.l)(D),H=(0,v.l)(h);if((0,v.h)(o,H)||(0,v.b)(o,H))return D.divide(h);if("Quaternion"===o||"Quaternion"===H){const o=D.clone();return o.x/=h.x,o.y/=h.y,o.z/=h.z,o.w/=h.w,o}if("Quaternion"===o||"Vector4"===H)return new t.Vector4(D.x,D.y,D.z,D.w).divideInPlace(h);if("Vector4"===o||"Quaternion"===H)return D.divide(h);if((0,v.e)(o,H)){var g;if(null!==(g=this.config)&&void 0!==g&&g.useMatrixPerComponent){const H=D.m;for(let D=0;D<H.length;D++)H[D]/=h.m[D];return"Matrix2D"===o?new Q.e(H):"Matrix3D"===o?new Q.h(H):t.Matrix.Ih(H)}return D.divide(h)}var j;if(null!==(j=this.config)&&void 0!==j&&j.preventIntegerFloatArithmetic&&typeof D!==typeof h)throw new Error("Cannot add different types of numbers.");return(0,v.q)(D)/(0,v.q)(h)}}(0,H.g)("FlowGraphDivideBlock",U);class q extends R{constructor(D){super(g.q,(D=>this._random(D)),"FlowGraphRandomBlock",D),this.min=this.registerDataInput("min",g.q,(null===D||void 0===D?void 0:D.min)??0),this.max=this.registerDataInput("max",g.q,(null===D||void 0===D?void 0:D.max)??1),null!==D&&void 0!==D&&D.seed&&(this._seed=D.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const D=1e4*Math.sin(this._seed++);return D-Math.floor(D)}return Math.random()}_random(D){const h=this.min.getValue(D),o=this.max.getValue(D);return this._getRandomValue()*(o-h)+h}}(0,H.g)("FlowGraphRandomBlock",q);class c extends R{constructor(D){super(g.q,(()=>Math.E),"FlowGraphEBlock",D)}}(0,H.g)("FlowGraphEBlock",c);class y extends R{constructor(D){super(g.q,(()=>Math.PI),"FlowGraphPIBlock",D)}}(0,H.g)("FlowGraphPIBlock",y);class b extends R{constructor(D){super(g.q,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",D)}}(0,H.g)("FlowGraphInfBlock",b);class i extends R{constructor(D){super(g.q,(()=>Number.NaN),"FlowGraphNaNBlock",D)}}function G(D,h){switch((0,v.l)(D)){case"FlowGraphInteger":return new K.b(h(D.value));case"Vector2":return new t.Vector2(h(D.x),h(D.y));case"Gh":return new t.Gh(h(D.x),h(D.y),h(D.z));case"Vector4":return new t.Vector4(h(D.x),h(D.y),h(D.z),h(D.w));case"Quaternion":return new t.Quaternion(h(D.x),h(D.y),h(D.z),h(D.w));case"Matrix":return t.Matrix.Ih(D.m.map(h));case"Matrix2D":return new Q.e(D.m.map(h));case"Matrix3D":return new Q.h(D.m.map(h));default:return h(D)}}(0,H.g)("FlowGraphNaNBlock",i);class N extends S.c{constructor(D){super(g.q,g.q,(D=>this._polymorphicAbs(D)),"FlowGraphAbsBlock",D)}_polymorphicAbs(D){return G(D,Math.abs)}}(0,H.g)("FlowGraphAbsBlock",N);class J extends S.c{constructor(D){super(g.q,g.q,(D=>this._polymorphicSign(D)),"FlowGraphSignBlock",D)}_polymorphicSign(D){return G(D,Math.sign)}}(0,H.g)("FlowGraphSignBlock",J);class O extends S.c{constructor(D){super(g.q,g.q,(D=>this._polymorphicTrunc(D)),"FlowGraphTruncBlock",D)}_polymorphicTrunc(D){return G(D,Math.trunc)}}(0,H.g)("FlowGraphTruncBlock",O);class E extends S.c{constructor(D){super(g.q,g.q,(D=>this._polymorphicFloor(D)),"FlowGraphFloorBlock",D)}_polymorphicFloor(D){return G(D,Math.floor)}}(0,H.g)("FlowGraphFloorBlock",E);class L extends S.c{constructor(D){super(g.c,g.c,(D=>this._polymorphicCeiling(D)),"FlowGraphCeilBlock",D)}_polymorphicCeiling(D){return G(D,Math.ceil)}}(0,H.g)("FlowGraphCeilBlock",L);class T extends S.c{constructor(D){super(g.c,g.c,(D=>this._polymorphicRound(D)),"FlowGraphRoundBlock",D)}_polymorphicRound(D){return G(D,(D=>{var h;return D<0&&null!==(h=this.config)&&void 0!==h&&h.roundHalfAwayFromZero?-Math.round(-D):Math.round(D)}))}}(0,H.g)("FlowGraphRoundBlock",T);class Z extends S.c{constructor(D){super(g.c,g.c,(D=>this._polymorphicFraction(D)),"FlowGraphFractBlock",D)}_polymorphicFraction(D){return G(D,(D=>D-Math.floor(D)))}}(0,H.g)("FlowGraphFractBlock",Z);class e extends S.c{constructor(D){super(g.c,g.c,(D=>this._polymorphicNeg(D)),"FlowGraphNegationBlock",D)}_polymorphicNeg(D){return G(D,(D=>-D))}}function p(D,h,o){switch((0,v.l)(D)){case"FlowGraphInteger":return new K.b(o(D.value,h.value));case"Vector2":return new t.Vector2(o(D.x,h.x),o(D.y,h.y));case"Gh":return new t.Gh(o(D.x,h.x),o(D.y,h.y),o(D.z,h.z));case"Vector4":return new t.Vector4(o(D.x,h.x),o(D.y,h.y),o(D.z,h.z),o(D.w,h.w));case"Quaternion":return new t.Quaternion(o(D.x,h.x),o(D.y,h.y),o(D.z,h.z),o(D.w,h.w));case"Matrix":return t.Matrix.Ih(D.m.map(((D,H)=>o(D,h.m[H]))));case"Matrix2D":return new Q.e(D.m.map(((D,H)=>o(D,h.m[H]))));case"Matrix3D":return new Q.h(D.m.map(((D,H)=>o(D,h.m[H]))));default:return o((0,v.q)(D),(0,v.q)(h))}}(0,H.g)("FlowGraphNegationBlock",e);class mD extends j.c{constructor(D){super(g.c,g.c,g.c,((D,h)=>this._polymorphicRemainder(D,h)),"FlowGraphModuloBlock",D)}_polymorphicRemainder(D,h){return p(D,h,((D,h)=>D%h))}}(0,H.g)("FlowGraphModuloBlock",mD);class a extends j.c{constructor(D){super(g.c,g.c,g.c,((D,h)=>this._polymorphicMin(D,h)),"FlowGraphMinBlock",D)}_polymorphicMin(D,h){return p(D,h,Math.min)}}(0,H.g)("FlowGraphMinBlock",a);class u extends j.c{constructor(D){super(g.c,g.c,g.c,((D,h)=>this._polymorphicMax(D,h)),"FlowGraphMaxBlock",D)}_polymorphicMax(D,h){return p(D,h,Math.max)}}function I(D,h,o){return Math.min(Math.max(D,Math.min(h,o)),Math.max(h,o))}function P(D,h,o,H){switch((0,v.l)(D)){case"FlowGraphInteger":return new K.b(H(D.value,h.value,o.value));case"Vector2":return new t.Vector2(H(D.x,h.x,o.x),H(D.y,h.y,o.y));case"Gh":return new t.Gh(H(D.x,h.x,o.x),H(D.y,h.y,o.y),H(D.z,h.z,o.z));case"Vector4":return new t.Vector4(H(D.x,h.x,o.x),H(D.y,h.y,o.y),H(D.z,h.z,o.z),H(D.w,h.w,o.w));case"Quaternion":return new t.Quaternion(H(D.x,h.x,o.x),H(D.y,h.y,o.y),H(D.z,h.z,o.z),H(D.w,h.w,o.w));case"Matrix":return t.Matrix.Ih(D.m.map(((D,g)=>H(D,h.m[g],o.m[g]))));case"Matrix2D":return new Q.e(D.m.map(((D,g)=>H(D,h.m[g],o.m[g]))));case"Matrix3D":return new Q.h(D.m.map(((D,g)=>H(D,h.m[g],o.m[g]))));default:return H((0,v.q)(D),(0,v.q)(h),(0,v.q)(o))}}(0,H.g)("FlowGraphMaxBlock",u);class n extends k{constructor(D){super(g.c,g.c,g.c,g.c,((D,h,o)=>this._polymorphicClamp(D,h,o)),"FlowGraphClampBlock",D)}_polymorphicClamp(D,h,o){return P(D,h,o,I)}}function F(D){return Math.min(Math.max(D,0),1)}(0,H.g)("FlowGraphClampBlock",n);class w extends S.c{constructor(D){super(g.c,g.c,(D=>this._polymorphicSaturate(D)),"FlowGraphSaturateBlock",D)}_polymorphicSaturate(D){return G(D,F)}}function Y(D,h,o){return(1-o)*D+o*h}(0,H.g)("FlowGraphSaturateBlock",w);class l extends k{constructor(D){super(g.c,g.c,g.c,g.c,((D,h,o)=>this._polymorphicInterpolate(D,h,o)),"FlowGraphMathInterpolationBlock",D)}_polymorphicInterpolate(D,h,o){return P(D,h,o,Y)}}(0,H.g)("FlowGraphMathInterpolationBlock",l);class C extends j.c{constructor(D){super(g.c,g.c,g.f,((D,h)=>this._polymorphicEq(D,h)),"FlowGraphEqualityBlock",D)}_polymorphicEq(D,h){const o=(0,v.l)(D),H=(0,v.l)(h);return typeof D===typeof h&&((0,v.h)(o,H)||(0,v.e)(o,H)||(0,v.b)(o,H)?D.equals(h):D===h)}}function z(D,h,o){if((0,v.s)(D)&&(0,v.s)(h))return o((0,v.q)(D),(0,v.q)(h));throw new Error(`Cannot compare ${D} and ${h}`)}(0,H.g)("FlowGraphEqualityBlock",C);class f extends j.c{constructor(D){super(g.c,g.c,g.f,((D,h)=>this._polymorphicLessThan(D,h)),"FlowGraphLessThanBlock",D)}_polymorphicLessThan(D,h){return z(D,h,((D,h)=>D<h))}}(0,H.g)("FlowGraphLessThanBlock",f);class V extends j.c{constructor(D){super(g.c,g.c,g.f,((D,h)=>this._polymorphicLessThanOrEqual(D,h)),"FlowGraphLessThanOrEqualBlock",D)}_polymorphicLessThanOrEqual(D,h){return z(D,h,((D,h)=>D<=h))}}(0,H.g)("FlowGraphLessThanOrEqualBlock",V);class d extends j.c{constructor(D){super(g.c,g.c,g.f,((D,h)=>this._polymorphicGreaterThan(D,h)),"FlowGraphGreaterThanBlock",D)}_polymorphicGreaterThan(D,h){return z(D,h,((D,h)=>D>h))}}(0,H.g)("FlowGraphGreaterThanBlock",d);class X extends j.c{constructor(D){super(g.c,g.c,g.f,((D,h)=>this._polymorphicGreaterThanOrEqual(D,h)),"FlowGraphGreaterThanOrEqualBlock",D)}_polymorphicGreaterThanOrEqual(D,h){return z(D,h,((D,h)=>D>=h))}}(0,H.g)("FlowGraphGreaterThanOrEqualBlock",X);class A extends S.c{constructor(D){super(g.c,g.f,(D=>this._polymorphicIsNan(D)),"FlowGraphIsNaNBlock",D)}_polymorphicIsNan(D){if((0,v.s)(D,!0))return isNaN((0,v.q)(D));throw new Error(`Cannot get NaN of ${D}`)}}(0,H.g)("FlowGraphIsNaNBlock",A);class W extends S.c{constructor(D){super(g.c,g.f,(D=>this._polymorphicIsInf(D)),"FlowGraphIsInfBlock",D)}_polymorphicIsInf(D){if((0,v.s)(D))return!isFinite((0,v.q)(D));throw new Error(`Cannot get isInf of ${D}`)}}(0,H.g)("FlowGraphIsInfBlock",W);class x extends S.c{constructor(D){super(g.c,g.c,(D=>this._polymorphicDegToRad(D)),"FlowGraphDegToRadBlock",D)}_degToRad(D){return D*Math.PI/180}_polymorphicDegToRad(D){return G(D,this._degToRad)}}(0,H.g)("FlowGraphDegToRadBlock",x);class DD extends S.c{constructor(D){super(g.c,g.c,(D=>this._polymorphicRadToDeg(D)),"FlowGraphRadToDegBlock",D)}_radToDeg(D){return 180*D/Math.PI}_polymorphicRadToDeg(D){return G(D,this._radToDeg)}}(0,H.g)("FlowGraphRadToDegBlock",DD);class hD extends S.c{constructor(D){super(g.q,g.q,(D=>this._polymorphicSin(D)),"FlowGraphSinBlock",D)}_polymorphicSin(D){return G(D,Math.sin)}}class oD extends S.c{constructor(D){super(g.q,g.q,(D=>this._polymorphicCos(D)),"FlowGraphCosBlock",D)}_polymorphicCos(D){return G(D,Math.cos)}}class HD extends S.c{constructor(D){super(g.q,g.q,(D=>this._polymorphicTan(D)),"FlowGraphTanBlock",D)}_polymorphicTan(D){return G(D,Math.tan)}}class gD extends S.c{constructor(D){super(g.q,g.q,(D=>this._polymorphicAsin(D)),"FlowGraphASinBlock",D)}_polymorphicAsin(D){return G(D,Math.asin)}}(0,H.g)("FlowGraphASinBlock",gD);class jD extends S.c{constructor(D){super(g.q,g.q,(D=>this._polymorphicAcos(D)),"FlowGraphACosBlock",D)}_polymorphicAcos(D){return G(D,Math.acos)}}(0,H.g)("FlowGraphACosBlock",jD);class MD extends S.c{constructor(D){super(g.q,g.q,(D=>this._polymorphicAtan(D)),"FlowGraphATanBlock",D)}_polymorphicAtan(D){return G(D,Math.atan)}}(0,H.g)("FlowGraphATanBlock",MD);class RD extends j.c{constructor(D){super(g.c,g.c,g.c,((D,h)=>this._polymorphicAtan2(D,h)),"FlowGraphATan2Block",D)}_polymorphicAtan2(D,h){return p(D,h,Math.atan2)}}(0,H.g)("FlowGraphATan2Block",RD);class tD extends S.c{constructor(D){super(g.c,g.c,(D=>this._polymorphicSinh(D)),"FlowGraphSinhBlock",D)}_polymorphicSinh(D){return G(D,Math.sinh)}}(0,H.g)("FlowGraphSinhBlock",tD);class SD extends S.c{constructor(D){super(g.c,g.c,(D=>this._polymorphicCosh(D)),"FlowGraphCoshBlock",D)}_polymorphicCosh(D){return G(D,Math.cosh)}}(0,H.g)("FlowGraphCoshBlock",SD);class kD extends S.c{constructor(D){super(g.c,g.c,(D=>this._polymorphicTanh(D)),"FlowGraphTanhBlock",D)}_polymorphicTanh(D){return G(D,Math.tanh)}}(0,H.g)("FlowGraphTanhBlock",kD);class KD extends S.c{constructor(D){super(g.c,g.q,(D=>this._polymorphicAsinh(D)),"FlowGraphASinhBlock",D)}_polymorphicAsinh(D){return G(D,Math.asinh)}}(0,H.g)("FlowGraphASinhBlock",KD);class QD extends S.c{constructor(D){super(g.c,g.q,(D=>this._polymorphicAcosh(D)),"FlowGraphACoshBlock",D)}_polymorphicAcosh(D){return G(D,Math.acosh)}}(0,H.g)("FlowGraphACoshBlock",QD);class vD extends S.c{constructor(D){super(g.c,g.q,(D=>this._polymorphicAtanh(D)),"FlowGraphATanhBlock",D)}_polymorphicAtanh(D){return G(D,Math.atanh)}}(0,H.g)("FlowGraphATanhBlock",vD);class rD extends S.c{constructor(D){super(g.c,g.q,(D=>this._polymorphicExp(D)),"FlowGraphExponentialBlock",D)}_polymorphicExp(D){return G(D,Math.exp)}}(0,H.g)("FlowGraphExponentialBlock",rD);class BD extends S.c{constructor(D){super(g.c,g.q,(D=>this._polymorphicLog(D)),"FlowGraphLogBlock",D)}_polymorphicLog(D){return G(D,Math.log)}}(0,H.g)("FlowGraphLogBlock",BD);class sD extends S.c{constructor(D){super(g.c,g.q,(D=>this._polymorphicLog2(D)),"FlowGraphLog2Block",D)}_polymorphicLog2(D){return G(D,Math.log2)}}(0,H.g)("FlowGraphLog2Block",sD);class UD extends S.c{constructor(D){super(g.c,g.q,(D=>this._polymorphicLog10(D)),"FlowGraphLog10Block",D)}_polymorphicLog10(D){return G(D,Math.log10)}}(0,H.g)("FlowGraphLog10Block",UD);class qD extends S.c{constructor(D){super(g.c,g.q,(D=>this._polymorphicSqrt(D)),"FlowGraphSquareRootBlock",D)}_polymorphicSqrt(D){return G(D,Math.sqrt)}}(0,H.g)("FlowGraphSquareRootBlock",qD);class cD extends S.c{constructor(D){super(g.c,g.q,(D=>this._polymorphicCubeRoot(D)),"FlowGraphCubeRootBlock",D)}_polymorphicCubeRoot(D){return G(D,Math.cbrt)}}(0,H.g)("FlowGraphCubeRootBlock",cD);class yD extends j.c{constructor(D){super(g.c,g.q,g.q,((D,h)=>this._polymorphicPow(D,h)),"FlowGraphPowerBlock",D)}_polymorphicPow(D,h){return p(D,h,Math.pow)}}(0,H.g)("FlowGraphPowerBlock",yD);class bD extends S.c{constructor(D){super((0,g.D)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),(0,g.D)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),(D=>"boolean"===typeof D?!D:"number"===typeof D?~D:new K.b(~D.value)),"FlowGraphBitwiseNotBlock",D)}}(0,H.g)("FlowGraphBitwiseNotBlock",bD);class iD extends j.c{constructor(D){super((0,g.D)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),(0,g.D)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),(0,g.D)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),((D,h)=>{if("boolean"===typeof D&&"boolean"===typeof h)return D&&h;if("number"===typeof D&&"number"===typeof h)return D&h;if("object"===typeof D&&"object"===typeof h)return new K.b(D.value&h.value);throw new Error(`Cannot perform bitwise AND on ${D} and ${h}`)}),"FlowGraphBitwiseAndBlock",D)}}(0,H.g)("FlowGraphBitwiseAndBlock",iD);class GD extends j.c{constructor(D){super((0,g.D)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),(0,g.D)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),(0,g.D)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),((D,h)=>{if("boolean"===typeof D&&"boolean"===typeof h)return D||h;if("number"===typeof D&&"number"===typeof h)return D|h;if("object"===typeof D&&"object"===typeof h)return new K.b(D.value|h.value);throw new Error(`Cannot perform bitwise OR on ${D} and ${h}`)}),"FlowGraphBitwiseOrBlock",D)}}(0,H.g)("FlowGraphBitwiseOrBlock",GD);class ND extends j.c{constructor(D){super((0,g.D)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),(0,g.D)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),(0,g.D)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),((D,h)=>{if("boolean"===typeof D&&"boolean"===typeof h)return D!==h;if("number"===typeof D&&"number"===typeof h)return D^h;if("object"===typeof D&&"object"===typeof h)return new K.b(D.value^h.value);throw new Error(`Cannot perform bitwise XOR on ${D} and ${h}`)}),"FlowGraphBitwiseXorBlock",D)}}(0,H.g)("FlowGraphBitwiseXorBlock",ND);class JD extends j.c{constructor(D){super(g.h,g.h,g.h,((D,h)=>new K.b(D.value<<h.value)),"FlowGraphBitwiseLeftShiftBlock",D)}}(0,H.g)("FlowGraphBitwiseLeftShiftBlock",JD);class OD extends j.c{constructor(D){super(g.h,g.h,g.h,((D,h)=>new K.b(D.value>>h.value)),"FlowGraphBitwiseRightShiftBlock",D)}}(0,H.g)("FlowGraphBitwiseRightShiftBlock",OD);class ED extends S.c{constructor(D){super(g.h,g.h,(D=>new K.b(Math.clz32(D.value))),"FlowGraphLeadingZerosBlock",D)}}(0,H.g)("FlowGraphLeadingZerosBlock",ED);class LD extends S.c{constructor(D){super(g.h,g.h,(D=>new K.b(D.value?31-Math.clz32(D.value&-D.value):32)),"FlowGraphTrailingZerosBlock",D)}}(0,H.g)("FlowGraphTrailingZerosBlock",LD);class TD extends S.c{constructor(D){super(g.h,g.h,(D=>new K.b(function(D){let h=0;for(;D;)h+=1&D,D>>=1;return h}(D.value))),"FlowGraphOneBitsCounterBlock",D)}}(0,H.g)("FlowGraphOneBitsCounterBlock",TD)},15901:(D,h,o)=>{o.d(h,{c:()=>g});var H=o(15909);class g extends H.b{constructor(D,h,o,H,g,j){super(o,j),this._operation=H,this._className=g,this.a=this.registerDataInput("a",D),this.b=this.registerDataInput("b",h)}_doOperation(D){const h=this.a.getValue(D),o=this.b.getValue(D);return this._operation(h,o)}getClassName(){return this._className}}},15909:(D,h,o)=>{o.d(h,{b:()=>R});var H=o(14386),g=o(14362);const j="cachedOperationValue",M="cachedExecutionId";class R extends H.e{constructor(D,h){super(h),this.value=this.registerDataOutput("value",D),this.isValid=this.registerDataOutput("isValid",g.f)}_updateOutputs(D){const h=D._getExecutionVariable(this,M,-1),o=D._getExecutionVariable(this,j,null);if(void 0!==o&&null!==o&&h===D.executionId)this.isValid.setValue(!0,D),this.value.setValue(o,D);else try{const h=this._doOperation(D);if(void 0===h||null===h)return void this.isValid.setValue(!1,D);D._setExecutionVariable(this,j,h),D._setExecutionVariable(this,M,D.executionId),this.value.setValue(h,D),this.isValid.setValue(!0,D)}catch(H){this.isValid.setValue(!1,D)}}}},15918:(D,h,o)=>{o.d(h,{c:()=>g});var H=o(15909);class g extends H.b{constructor(D,h,o,H,g){super(h,g),this._operation=o,this._className=H,this.a=this.registerDataInput("a",D)}_doOperation(D){return this._operation(this.a.getValue(D))}getClassName(){return this._className}}}}]);