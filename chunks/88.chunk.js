"use strict";(self.zcqpiao938m=self.zcqpiao938m||[]).push([[88],{14984:(C,U,K)=>{K.r(U),K.d(U,{FlowGraphAbsBlock:()=>T,FlowGraphAcosBlock:()=>XC,FlowGraphAcoshBlock:()=>EC,FlowGraphAddBlock:()=>b,FlowGraphAsinBlock:()=>OC,FlowGraphAsinhBlock:()=>pC,FlowGraphAtan2Block:()=>eC,FlowGraphAtanBlock:()=>AC,FlowGraphAtanhBlock:()=>uC,FlowGraphBitwiseAndBlock:()=>HC,FlowGraphBitwiseLeftShiftBlock:()=>yC,FlowGraphBitwiseNotBlock:()=>PC,FlowGraphBitwiseOrBlock:()=>dC,FlowGraphBitwiseRightShiftBlock:()=>aC,FlowGraphBitwiseXorBlock:()=>TC,FlowGraphCeilBlock:()=>i,FlowGraphClampBlock:()=>c,FlowGraphCosBlock:()=>KC,FlowGraphCoshBlock:()=>zC,FlowGraphCubeRootBlock:()=>FC,FlowGraphDegToRadBlock:()=>I,FlowGraphDivideBlock:()=>V,FlowGraphEBlock:()=>F,FlowGraphEqualityBlock:()=>Y,FlowGraphExpBlock:()=>bC,FlowGraphFloorBlock:()=>r,FlowGraphFractionBlock:()=>l,FlowGraphGreaterThanBlock:()=>S,FlowGraphGreaterThanOrEqualBlock:()=>s,FlowGraphInfBlock:()=>P,FlowGraphIsInfinityBlock:()=>q,FlowGraphIsNanBlock:()=>R,FlowGraphLeadingZerosBlock:()=>rC,FlowGraphLessThanBlock:()=>x,FlowGraphLessThanOrEqualBlock:()=>n,FlowGraphLog10Block:()=>VC,FlowGraphLog2Block:()=>QC,FlowGraphLogBlock:()=>vC,FlowGraphMathInterpolationBlock:()=>L,FlowGraphMaxBlock:()=>k,FlowGraphMinBlock:()=>B,FlowGraphModuloBlock:()=>o,FlowGraphMultiplyBlock:()=>Q,FlowGraphNaNBlock:()=>H,FlowGraphNegationBlock:()=>G,FlowGraphOneBitsCounterBlock:()=>DC,FlowGraphPiBlock:()=>Z,FlowGraphPowerBlock:()=>ZC,FlowGraphRadToDegBlock:()=>CC,FlowGraphRandomBlock:()=>f,FlowGraphRoundBlock:()=>D,FlowGraphSaturateBlock:()=>g,FlowGraphSignBlock:()=>y,FlowGraphSinBlock:()=>UC,FlowGraphSinhBlock:()=>tC,FlowGraphSquareRootBlock:()=>fC,FlowGraphSubtractBlock:()=>v,FlowGraphTanBlock:()=>mC,FlowGraphTanhBlock:()=>jC,FlowGraphTrailingZerosBlock:()=>iC,FlowGraphTruncBlock:()=>a});var m=K(11789),O=K(13514),X=K(14986),A=K(14989);class e extends A.b{constructor(C,U,K,m){super(C,m),this._operation=U,this._className=K}_doOperation(C){return this._operation(C)}getClassName(){return this._className}}var t=K(11827),z=K(14994);class j extends A.b{constructor(C,U,K,m,O,X,A){super(m,A),this._operation=O,this._className=X,this.a=this.registerDataInput("a",C),this.b=this.registerDataInput("b",U),this.c=this.registerDataInput("c",K)}_doOperation(C){return this._operation(this.a.getValue(C),this.b.getValue(C),this.c.getValue(C))}getClassName(){return this._className}}var p=K(13508),E=K(13517),u=K(13552);class b extends X.b{constructor(C){super((0,O.M)(null===C||void 0===C?void 0:C.type),(0,O.M)(null===C||void 0===C?void 0:C.type),(0,O.M)(null===C||void 0===C?void 0:C.type),((C,U)=>this._polymorphicAdd(C,U)),"FlowGraphAddBlock",C)}_polymorphicAdd(C,U){const K=(0,u.k)(C),m=(0,u.k)(U);if((0,u.j)(K,m)||(0,u.h)(K,m)||(0,u.e)(K,m))return C.add(U);if("Quaternion"===K||"Vector4"===m)return new t.Vector4(C.x,C.y,C.z,C.w).addInPlace(U);if("Vector4"===K||"Quaternion"===m)return C.add(U);var O;if(null!==(O=this.config)&&void 0!==O&&O.preventIntegerFloatArithmetic&&typeof C!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,u.o)(C)+(0,u.o)(U)}}(0,m.h)("FlowGraphAddBlock",b);class v extends X.b{constructor(C){super((0,O.M)(null===C||void 0===C?void 0:C.type),(0,O.M)(null===C||void 0===C?void 0:C.type),(0,O.M)(null===C||void 0===C?void 0:C.type),((C,U)=>this._polymorphicSubtract(C,U)),"FlowGraphSubtractBlock",C)}_polymorphicSubtract(C,U){const K=(0,u.k)(C),m=(0,u.k)(U);if((0,u.j)(K,m)||(0,u.e)(K,m)||(0,u.h)(K,m))return C.vU(U);if("Quaternion"===K||"Vector4"===m)return new t.Vector4(C.x,C.y,C.z,C.w).zp(U);if("Vector4"===K||"Quaternion"===m)return C.vU(U);var O;if(null!==(O=this.config)&&void 0!==O&&O.preventIntegerFloatArithmetic&&typeof C!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,u.o)(C)-(0,u.o)(U)}}(0,m.h)("FlowGraphSubtractBlock",v);class Q extends X.b{constructor(C){super((0,O.M)(null===C||void 0===C?void 0:C.type),(0,O.M)(null===C||void 0===C?void 0:C.type),(0,O.M)(null===C||void 0===C?void 0:C.type),((C,U)=>this._polymorphicMultiply(C,U)),"FlowGraphMultiplyBlock",C)}_polymorphicMultiply(C,U){const K=(0,u.k)(C),m=(0,u.k)(U);if((0,u.j)(K,m)||(0,u.e)(K,m))return C.multiply(U);if("Quaternion"===K||"Vector4"===m)return new t.Vector4(C.x,C.y,C.z,C.w).multiplyInPlace(U);if("Vector4"===K||"Quaternion"===m)return C.multiply(U);if((0,u.h)(K,m)){var O;if(null!==(O=this.config)&&void 0!==O&&O.useMatrixPerComponent){const m=C.m;for(let C=0;C<m.length;C++)m[C]*=U.m[C];return"Matrix2D"===K?new E.e(m):"Matrix3D"===K?new E.g(m):t.Matrix.FU(m)}return U.multiply(C)}var X;if(null!==(X=this.config)&&void 0!==X&&X.preventIntegerFloatArithmetic&&typeof C!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,u.o)(C)*(0,u.o)(U)}}(0,m.h)("FlowGraphMultiplyBlock",Q);class V extends X.b{constructor(C){super((0,O.M)(null===C||void 0===C?void 0:C.type),(0,O.M)(null===C||void 0===C?void 0:C.type),(0,O.M)(null===C||void 0===C?void 0:C.type),((C,U)=>this._polymorphicDivide(C,U)),"FlowGraphDivideBlock",C)}_polymorphicDivide(C,U){const K=(0,u.k)(C),m=(0,u.k)(U);if((0,u.j)(K,m)||(0,u.e)(K,m))return C.divide(U);if("Quaternion"===K||"Quaternion"===m){const K=C.clone();return K.x/=U.x,K.y/=U.y,K.z/=U.z,K.w/=U.w,K}if("Quaternion"===K||"Vector4"===m)return new t.Vector4(C.x,C.y,C.z,C.w).divideInPlace(U);if("Vector4"===K||"Quaternion"===m)return C.divide(U);if((0,u.h)(K,m)){var O;if(null!==(O=this.config)&&void 0!==O&&O.useMatrixPerComponent){const m=C.m;for(let C=0;C<m.length;C++)m[C]/=U.m[C];return"Matrix2D"===K?new E.e(m):"Matrix3D"===K?new E.g(m):t.Matrix.FU(m)}return C.divide(U)}var X;if(null!==(X=this.config)&&void 0!==X&&X.preventIntegerFloatArithmetic&&typeof C!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,u.o)(C)/(0,u.o)(U)}}(0,m.h)("FlowGraphDivideBlock",V);class f extends e{constructor(C){super(O.w,(C=>this._random(C)),"FlowGraphRandomBlock",C),this.min=this.registerDataInput("min",O.w,(null===C||void 0===C?void 0:C.min)??0),this.max=this.registerDataInput("max",O.w,(null===C||void 0===C?void 0:C.max)??1),null!==C&&void 0!==C&&C.seed&&(this._seed=C.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const C=1e4*Math.sin(this._seed++);return C-Math.floor(C)}return Math.random()}_random(C){const U=this.min.getValue(C),K=this.max.getValue(C);return this._getRandomValue()*(K-U)+U}}(0,m.h)("FlowGraphRandomBlock",f);class F extends e{constructor(C){super(O.w,(()=>Math.E),"FlowGraphEBlock",C)}}(0,m.h)("FlowGraphEBlock",F);class Z extends e{constructor(C){super(O.w,(()=>Math.PI),"FlowGraphPIBlock",C)}}(0,m.h)("FlowGraphPIBlock",Z);class P extends e{constructor(C){super(O.w,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",C)}}(0,m.h)("FlowGraphInfBlock",P);class H extends e{constructor(C){super(O.w,(()=>Number.NaN),"FlowGraphNaNBlock",C)}}function d(C,U){switch((0,u.k)(C)){case"FlowGraphInteger":return new p.d(U(C.value));case"Vector2":return new t.Vector2(U(C.x),U(C.y));case"bU":return new t.bU(U(C.x),U(C.y),U(C.z));case"Vector4":return new t.Vector4(U(C.x),U(C.y),U(C.z),U(C.w));case"Quaternion":return new t.Quaternion(U(C.x),U(C.y),U(C.z),U(C.w));case"Matrix":return t.Matrix.FU(C.m.map(U));case"Matrix2D":return new E.e(C.m.map(U));case"Matrix3D":return new E.g(C.m.map(U));default:return U(C)}}(0,m.h)("FlowGraphNaNBlock",H);class T extends z.d{constructor(C){super(O.w,O.w,(C=>this._polymorphicAbs(C)),"FlowGraphAbsBlock",C)}_polymorphicAbs(C){return d(C,Math.abs)}}(0,m.h)("FlowGraphAbsBlock",T);class y extends z.d{constructor(C){super(O.w,O.w,(C=>this._polymorphicSign(C)),"FlowGraphSignBlock",C)}_polymorphicSign(C){return d(C,Math.sign)}}(0,m.h)("FlowGraphSignBlock",y);class a extends z.d{constructor(C){super(O.w,O.w,(C=>this._polymorphicTrunc(C)),"FlowGraphTruncBlock",C)}_polymorphicTrunc(C){return d(C,Math.trunc)}}(0,m.h)("FlowGraphTruncBlock",a);class r extends z.d{constructor(C){super(O.w,O.w,(C=>this._polymorphicFloor(C)),"FlowGraphFloorBlock",C)}_polymorphicFloor(C){return d(C,Math.floor)}}(0,m.h)("FlowGraphFloorBlock",r);class i extends z.d{constructor(C){super(O.c,O.c,(C=>this._polymorphicCeiling(C)),"FlowGraphCeilBlock",C)}_polymorphicCeiling(C){return d(C,Math.ceil)}}(0,m.h)("FlowGraphCeilBlock",i);class D extends z.d{constructor(C){super(O.c,O.c,(C=>this._polymorphicRound(C)),"FlowGraphRoundBlock",C)}_polymorphicRound(C){return d(C,(C=>{var U;return C<0&&null!==(U=this.config)&&void 0!==U&&U.roundHalfAwayFromZero?-Math.round(-C):Math.round(C)}))}}(0,m.h)("FlowGraphRoundBlock",D);class l extends z.d{constructor(C){super(O.c,O.c,(C=>this._polymorphicFraction(C)),"FlowGraphFractBlock",C)}_polymorphicFraction(C){return d(C,(C=>C-Math.floor(C)))}}(0,m.h)("FlowGraphFractBlock",l);class G extends z.d{constructor(C){super(O.c,O.c,(C=>this._polymorphicNeg(C)),"FlowGraphNegationBlock",C)}_polymorphicNeg(C){return d(C,(C=>-C))}}function J(C,U,K){switch((0,u.k)(C)){case"FlowGraphInteger":return new p.d(K(C.value,U.value));case"Vector2":return new t.Vector2(K(C.x,U.x),K(C.y,U.y));case"bU":return new t.bU(K(C.x,U.x),K(C.y,U.y),K(C.z,U.z));case"Vector4":return new t.Vector4(K(C.x,U.x),K(C.y,U.y),K(C.z,U.z),K(C.w,U.w));case"Quaternion":return new t.Quaternion(K(C.x,U.x),K(C.y,U.y),K(C.z,U.z),K(C.w,U.w));case"Matrix":return t.Matrix.FU(C.m.map(((C,m)=>K(C,U.m[m]))));case"Matrix2D":return new E.e(C.m.map(((C,m)=>K(C,U.m[m]))));case"Matrix3D":return new E.g(C.m.map(((C,m)=>K(C,U.m[m]))));default:return K((0,u.o)(C),(0,u.o)(U))}}(0,m.h)("FlowGraphNegationBlock",G);class o extends X.b{constructor(C){super(O.c,O.c,O.c,((C,U)=>this._polymorphicRemainder(C,U)),"FlowGraphModuloBlock",C)}_polymorphicRemainder(C,U){return J(C,U,((C,U)=>C%U))}}(0,m.h)("FlowGraphModuloBlock",o);class B extends X.b{constructor(C){super(O.c,O.c,O.c,((C,U)=>this._polymorphicMin(C,U)),"FlowGraphMinBlock",C)}_polymorphicMin(C,U){return J(C,U,Math.min)}}(0,m.h)("FlowGraphMinBlock",B);class k extends X.b{constructor(C){super(O.c,O.c,O.c,((C,U)=>this._polymorphicMax(C,U)),"FlowGraphMaxBlock",C)}_polymorphicMax(C,U){return J(C,U,Math.max)}}function w(C,U,K){return Math.min(Math.max(C,Math.min(U,K)),Math.max(U,K))}function h(C,U,K,m){switch((0,u.k)(C)){case"FlowGraphInteger":return new p.d(m(C.value,U.value,K.value));case"Vector2":return new t.Vector2(m(C.x,U.x,K.x),m(C.y,U.y,K.y));case"bU":return new t.bU(m(C.x,U.x,K.x),m(C.y,U.y,K.y),m(C.z,U.z,K.z));case"Vector4":return new t.Vector4(m(C.x,U.x,K.x),m(C.y,U.y,K.y),m(C.z,U.z,K.z),m(C.w,U.w,K.w));case"Quaternion":return new t.Quaternion(m(C.x,U.x,K.x),m(C.y,U.y,K.y),m(C.z,U.z,K.z),m(C.w,U.w,K.w));case"Matrix":return t.Matrix.FU(C.m.map(((C,O)=>m(C,U.m[O],K.m[O]))));case"Matrix2D":return new E.e(C.m.map(((C,O)=>m(C,U.m[O],K.m[O]))));case"Matrix3D":return new E.g(C.m.map(((C,O)=>m(C,U.m[O],K.m[O]))));default:return m((0,u.o)(C),(0,u.o)(U),(0,u.o)(K))}}(0,m.h)("FlowGraphMaxBlock",k);class c extends j{constructor(C){super(O.c,O.c,O.c,O.c,((C,U,K)=>this._polymorphicClamp(C,U,K)),"FlowGraphClampBlock",C)}_polymorphicClamp(C,U,K){return h(C,U,K,w)}}function N(C){return Math.min(Math.max(C,0),1)}(0,m.h)("FlowGraphClampBlock",c);class g extends z.d{constructor(C){super(O.c,O.c,(C=>this._polymorphicSaturate(C)),"FlowGraphSaturateBlock",C)}_polymorphicSaturate(C){return d(C,N)}}function M(C,U,K){return(1-K)*C+K*U}(0,m.h)("FlowGraphSaturateBlock",g);class L extends j{constructor(C){super(O.c,O.c,O.c,O.c,((C,U,K)=>this._polymorphicInterpolate(C,U,K)),"FlowGraphMathInterpolationBlock",C)}_polymorphicInterpolate(C,U,K){return h(C,U,K,M)}}(0,m.h)("FlowGraphMathInterpolationBlock",L);class Y extends X.b{constructor(C){super(O.c,O.c,O.f,((C,U)=>this._polymorphicEq(C,U)),"FlowGraphEqualityBlock",C)}_polymorphicEq(C,U){const K=(0,u.k)(C),m=(0,u.k)(U);return typeof C===typeof U&&((0,u.j)(K,m)||(0,u.h)(K,m)||(0,u.e)(K,m)?C.equals(U):C===U)}}function W(C,U,K){if((0,u.p)(C)&&(0,u.p)(U))return K((0,u.o)(C),(0,u.o)(U));throw new Error(`Cannot compare ${C} and ${U}`)}(0,m.h)("FlowGraphEqualityBlock",Y);class x extends X.b{constructor(C){super(O.c,O.c,O.f,((C,U)=>this._polymorphicLessThan(C,U)),"FlowGraphLessThanBlock",C)}_polymorphicLessThan(C,U){return W(C,U,((C,U)=>C<U))}}(0,m.h)("FlowGraphLessThanBlock",x);class n extends X.b{constructor(C){super(O.c,O.c,O.f,((C,U)=>this._polymorphicLessThanOrEqual(C,U)),"FlowGraphLessThanOrEqualBlock",C)}_polymorphicLessThanOrEqual(C,U){return W(C,U,((C,U)=>C<=U))}}(0,m.h)("FlowGraphLessThanOrEqualBlock",n);class S extends X.b{constructor(C){super(O.c,O.c,O.f,((C,U)=>this._polymorphicGreaterThan(C,U)),"FlowGraphGreaterThanBlock",C)}_polymorphicGreaterThan(C,U){return W(C,U,((C,U)=>C>U))}}(0,m.h)("FlowGraphGreaterThanBlock",S);class s extends X.b{constructor(C){super(O.c,O.c,O.f,((C,U)=>this._polymorphicGreaterThanOrEqual(C,U)),"FlowGraphGreaterThanOrEqualBlock",C)}_polymorphicGreaterThanOrEqual(C,U){return W(C,U,((C,U)=>C>=U))}}(0,m.h)("FlowGraphGreaterThanOrEqualBlock",s);class R extends z.d{constructor(C){super(O.c,O.f,(C=>this._polymorphicIsNan(C)),"FlowGraphIsNaNBlock",C)}_polymorphicIsNan(C){if((0,u.p)(C,!0))return isNaN((0,u.o)(C));throw new Error(`Cannot get NaN of ${C}`)}}(0,m.h)("FlowGraphIsNaNBlock",R);class q extends z.d{constructor(C){super(O.c,O.f,(C=>this._polymorphicIsInf(C)),"FlowGraphIsInfBlock",C)}_polymorphicIsInf(C){if((0,u.p)(C))return!isFinite((0,u.o)(C));throw new Error(`Cannot get isInf of ${C}`)}}(0,m.h)("FlowGraphIsInfBlock",q);class I extends z.d{constructor(C){super(O.c,O.c,(C=>this._polymorphicDegToRad(C)),"FlowGraphDegToRadBlock",C)}_degToRad(C){return C*Math.PI/180}_polymorphicDegToRad(C){return d(C,this._degToRad)}}(0,m.h)("FlowGraphDegToRadBlock",I);class CC extends z.d{constructor(C){super(O.c,O.c,(C=>this._polymorphicRadToDeg(C)),"FlowGraphRadToDegBlock",C)}_radToDeg(C){return 180*C/Math.PI}_polymorphicRadToDeg(C){return d(C,this._radToDeg)}}(0,m.h)("FlowGraphRadToDegBlock",CC);class UC extends z.d{constructor(C){super(O.w,O.w,(C=>this._polymorphicSin(C)),"FlowGraphSinBlock",C)}_polymorphicSin(C){return d(C,Math.sin)}}class KC extends z.d{constructor(C){super(O.w,O.w,(C=>this._polymorphicCos(C)),"FlowGraphCosBlock",C)}_polymorphicCos(C){return d(C,Math.cos)}}class mC extends z.d{constructor(C){super(O.w,O.w,(C=>this._polymorphicTan(C)),"FlowGraphTanBlock",C)}_polymorphicTan(C){return d(C,Math.tan)}}class OC extends z.d{constructor(C){super(O.w,O.w,(C=>this._polymorphicAsin(C)),"FlowGraphASinBlock",C)}_polymorphicAsin(C){return d(C,Math.asin)}}(0,m.h)("FlowGraphASinBlock",OC);class XC extends z.d{constructor(C){super(O.w,O.w,(C=>this._polymorphicAcos(C)),"FlowGraphACosBlock",C)}_polymorphicAcos(C){return d(C,Math.acos)}}(0,m.h)("FlowGraphACosBlock",XC);class AC extends z.d{constructor(C){super(O.w,O.w,(C=>this._polymorphicAtan(C)),"FlowGraphATanBlock",C)}_polymorphicAtan(C){return d(C,Math.atan)}}(0,m.h)("FlowGraphATanBlock",AC);class eC extends X.b{constructor(C){super(O.c,O.c,O.c,((C,U)=>this._polymorphicAtan2(C,U)),"FlowGraphATan2Block",C)}_polymorphicAtan2(C,U){return J(C,U,Math.atan2)}}(0,m.h)("FlowGraphATan2Block",eC);class tC extends z.d{constructor(C){super(O.c,O.c,(C=>this._polymorphicSinh(C)),"FlowGraphSinhBlock",C)}_polymorphicSinh(C){return d(C,Math.sinh)}}(0,m.h)("FlowGraphSinhBlock",tC);class zC extends z.d{constructor(C){super(O.c,O.c,(C=>this._polymorphicCosh(C)),"FlowGraphCoshBlock",C)}_polymorphicCosh(C){return d(C,Math.cosh)}}(0,m.h)("FlowGraphCoshBlock",zC);class jC extends z.d{constructor(C){super(O.c,O.c,(C=>this._polymorphicTanh(C)),"FlowGraphTanhBlock",C)}_polymorphicTanh(C){return d(C,Math.tanh)}}(0,m.h)("FlowGraphTanhBlock",jC);class pC extends z.d{constructor(C){super(O.c,O.w,(C=>this._polymorphicAsinh(C)),"FlowGraphASinhBlock",C)}_polymorphicAsinh(C){return d(C,Math.asinh)}}(0,m.h)("FlowGraphASinhBlock",pC);class EC extends z.d{constructor(C){super(O.c,O.w,(C=>this._polymorphicAcosh(C)),"FlowGraphACoshBlock",C)}_polymorphicAcosh(C){return d(C,Math.acosh)}}(0,m.h)("FlowGraphACoshBlock",EC);class uC extends z.d{constructor(C){super(O.c,O.w,(C=>this._polymorphicAtanh(C)),"FlowGraphATanhBlock",C)}_polymorphicAtanh(C){return d(C,Math.atanh)}}(0,m.h)("FlowGraphATanhBlock",uC);class bC extends z.d{constructor(C){super(O.c,O.w,(C=>this._polymorphicExp(C)),"FlowGraphExponentialBlock",C)}_polymorphicExp(C){return d(C,Math.exp)}}(0,m.h)("FlowGraphExponentialBlock",bC);class vC extends z.d{constructor(C){super(O.c,O.w,(C=>this._polymorphicLog(C)),"FlowGraphLogBlock",C)}_polymorphicLog(C){return d(C,Math.log)}}(0,m.h)("FlowGraphLogBlock",vC);class QC extends z.d{constructor(C){super(O.c,O.w,(C=>this._polymorphicLog2(C)),"FlowGraphLog2Block",C)}_polymorphicLog2(C){return d(C,Math.log2)}}(0,m.h)("FlowGraphLog2Block",QC);class VC extends z.d{constructor(C){super(O.c,O.w,(C=>this._polymorphicLog10(C)),"FlowGraphLog10Block",C)}_polymorphicLog10(C){return d(C,Math.log10)}}(0,m.h)("FlowGraphLog10Block",VC);class fC extends z.d{constructor(C){super(O.c,O.w,(C=>this._polymorphicSqrt(C)),"FlowGraphSquareRootBlock",C)}_polymorphicSqrt(C){return d(C,Math.sqrt)}}(0,m.h)("FlowGraphSquareRootBlock",fC);class FC extends z.d{constructor(C){super(O.c,O.w,(C=>this._polymorphicCubeRoot(C)),"FlowGraphCubeRootBlock",C)}_polymorphicCubeRoot(C){return d(C,Math.cbrt)}}(0,m.h)("FlowGraphCubeRootBlock",FC);class ZC extends X.b{constructor(C){super(O.c,O.w,O.w,((C,U)=>this._polymorphicPow(C,U)),"FlowGraphPowerBlock",C)}_polymorphicPow(C,U){return J(C,U,Math.pow)}}(0,m.h)("FlowGraphPowerBlock",ZC);class PC extends z.d{constructor(C){super((0,O.M)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),(0,O.M)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),(C=>"boolean"===typeof C?!C:"number"===typeof C?~C:new p.d(~C.value)),"FlowGraphBitwiseNotBlock",C)}}(0,m.h)("FlowGraphBitwiseNotBlock",PC);class HC extends X.b{constructor(C){super((0,O.M)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),(0,O.M)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),(0,O.M)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),((C,U)=>{if("boolean"===typeof C&&"boolean"===typeof U)return C&&U;if("number"===typeof C&&"number"===typeof U)return C&U;if("object"===typeof C&&"object"===typeof U)return new p.d(C.value&U.value);throw new Error(`Cannot perform bitwise AND on ${C} and ${U}`)}),"FlowGraphBitwiseAndBlock",C)}}(0,m.h)("FlowGraphBitwiseAndBlock",HC);class dC extends X.b{constructor(C){super((0,O.M)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),(0,O.M)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),(0,O.M)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),((C,U)=>{if("boolean"===typeof C&&"boolean"===typeof U)return C||U;if("number"===typeof C&&"number"===typeof U)return C|U;if("object"===typeof C&&"object"===typeof U)return new p.d(C.value|U.value);throw new Error(`Cannot perform bitwise OR on ${C} and ${U}`)}),"FlowGraphBitwiseOrBlock",C)}}(0,m.h)("FlowGraphBitwiseOrBlock",dC);class TC extends X.b{constructor(C){super((0,O.M)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),(0,O.M)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),(0,O.M)((null===C||void 0===C?void 0:C.valueType)||"FlowGraphInteger"),((C,U)=>{if("boolean"===typeof C&&"boolean"===typeof U)return C!==U;if("number"===typeof C&&"number"===typeof U)return C^U;if("object"===typeof C&&"object"===typeof U)return new p.d(C.value^U.value);throw new Error(`Cannot perform bitwise XOR on ${C} and ${U}`)}),"FlowGraphBitwiseXorBlock",C)}}(0,m.h)("FlowGraphBitwiseXorBlock",TC);class yC extends X.b{constructor(C){super(O.i,O.i,O.i,((C,U)=>new p.d(C.value<<U.value)),"FlowGraphBitwiseLeftShiftBlock",C)}}(0,m.h)("FlowGraphBitwiseLeftShiftBlock",yC);class aC extends X.b{constructor(C){super(O.i,O.i,O.i,((C,U)=>new p.d(C.value>>U.value)),"FlowGraphBitwiseRightShiftBlock",C)}}(0,m.h)("FlowGraphBitwiseRightShiftBlock",aC);class rC extends z.d{constructor(C){super(O.i,O.i,(C=>new p.d(Math.clz32(C.value))),"FlowGraphLeadingZerosBlock",C)}}(0,m.h)("FlowGraphLeadingZerosBlock",rC);class iC extends z.d{constructor(C){super(O.i,O.i,(C=>new p.d(C.value?31-Math.clz32(C.value&-C.value):32)),"FlowGraphTrailingZerosBlock",C)}}(0,m.h)("FlowGraphTrailingZerosBlock",iC);class DC extends z.d{constructor(C){super(O.i,O.i,(C=>new p.d(function(C){let U=0;for(;C;)U+=1&C,C>>=1;return U}(C.value))),"FlowGraphOneBitsCounterBlock",C)}}(0,m.h)("FlowGraphOneBitsCounterBlock",DC)},14986:(C,U,K)=>{K.d(U,{b:()=>O});var m=K(14989);class O extends m.b{constructor(C,U,K,m,O,X){super(K,X),this._operation=m,this._className=O,this.a=this.registerDataInput("a",C),this.b=this.registerDataInput("b",U)}_doOperation(C){const U=this.a.getValue(C),K=this.b.getValue(C);return this._operation(U,K)}getClassName(){return this._className}}},14989:(C,U,K)=>{K.d(U,{b:()=>e});var m=K(13539),O=K(13514);const X="cachedOperationValue",A="cachedExecutionId";class e extends m.e{constructor(C,U){super(U),this.value=this.registerDataOutput("value",C),this.isValid=this.registerDataOutput("isValid",O.f)}_updateOutputs(C){const U=C._getExecutionVariable(this,A,-1),K=C._getExecutionVariable(this,X,null);if(void 0!==K&&null!==K&&U===C.executionId)this.isValid.setValue(!0,C),this.value.setValue(K,C);else try{const U=this._doOperation(C);if(void 0===U||null===U)return void this.isValid.setValue(!1,C);C._setExecutionVariable(this,X,U),C._setExecutionVariable(this,A,C.executionId),this.value.setValue(U,C),this.isValid.setValue(!0,C)}catch(m){this.isValid.setValue(!1,C)}}}},14994:(C,U,K)=>{K.d(U,{d:()=>O});var m=K(14989);class O extends m.b{constructor(C,U,K,m,O){super(U,O),this._operation=K,this._className=m,this.a=this.registerDataInput("a",C)}_doOperation(C){return this._operation(this.a.getValue(C))}getClassName(){return this._className}}}}]);