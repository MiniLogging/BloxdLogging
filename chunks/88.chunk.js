"use strict";(self["3nlrbof8msu"]=self["3nlrbof8msu"]||[]).push([[88],{15947:(t,b,Z)=>{Z.r(b),Z.d(b,{FlowGraphAbsBlock:()=>O,FlowGraphAcosBlock:()=>Pt,FlowGraphAcoshBlock:()=>rt,FlowGraphAddBlock:()=>T,FlowGraphAsinBlock:()=>St,FlowGraphAsinhBlock:()=>It,FlowGraphAtan2Block:()=>ht,FlowGraphAtanBlock:()=>vt,FlowGraphAtanhBlock:()=>Mt,FlowGraphBitwiseAndBlock:()=>Ht,FlowGraphBitwiseLeftShiftBlock:()=>pt,FlowGraphBitwiseNotBlock:()=>ct,FlowGraphBitwiseOrBlock:()=>ot,FlowGraphBitwiseRightShiftBlock:()=>et,FlowGraphBitwiseXorBlock:()=>Ot,FlowGraphCeilBlock:()=>j,FlowGraphClampBlock:()=>K,FlowGraphCosBlock:()=>Zt,FlowGraphCoshBlock:()=>Yt,FlowGraphCubeRootBlock:()=>Ut,FlowGraphDegToRadBlock:()=>G,FlowGraphDivideBlock:()=>u,FlowGraphEBlock:()=>U,FlowGraphEqualityBlock:()=>x,FlowGraphExpBlock:()=>Tt,FlowGraphFloorBlock:()=>W,FlowGraphFractionBlock:()=>n,FlowGraphGreaterThanBlock:()=>f,FlowGraphGreaterThanOrEqualBlock:()=>mt,FlowGraphInfBlock:()=>c,FlowGraphIsInfinityBlock:()=>w,FlowGraphIsNanBlock:()=>R,FlowGraphLeadingZerosBlock:()=>Wt,FlowGraphLessThanBlock:()=>z,FlowGraphLessThanOrEqualBlock:()=>D,FlowGraphLog10Block:()=>ut,FlowGraphLog2Block:()=>kt,FlowGraphLogBlock:()=>at,FlowGraphMathInterpolationBlock:()=>X,FlowGraphMaxBlock:()=>Q,FlowGraphMinBlock:()=>q,FlowGraphModuloBlock:()=>s,FlowGraphMultiplyBlock:()=>k,FlowGraphNaNBlock:()=>H,FlowGraphNegationBlock:()=>y,FlowGraphOneBitsCounterBlock:()=>Vt,FlowGraphPiBlock:()=>E,FlowGraphPowerBlock:()=>Et,FlowGraphRadToDegBlock:()=>tt,FlowGraphRandomBlock:()=>l,FlowGraphRoundBlock:()=>V,FlowGraphSaturateBlock:()=>F,FlowGraphSignBlock:()=>p,FlowGraphSinBlock:()=>bt,FlowGraphSinhBlock:()=>Ct,FlowGraphSquareRootBlock:()=>lt,FlowGraphSubtractBlock:()=>a,FlowGraphTanBlock:()=>Jt,FlowGraphTanhBlock:()=>gt,FlowGraphTrailingZerosBlock:()=>jt,FlowGraphTruncBlock:()=>e});var J=Z(12688),S=Z(14405),P=Z(15952),v=Z(15959);class h extends v.d{constructor(t,b,Z,J){super(t,J),this._operation=b,this._className=Z}_doOperation(t){return this._operation(t)}getClassName(){return this._className}}var C=Z(12735),Y=Z(15962);class g extends v.d{constructor(t,b,Z,J,S,P,v){super(J,v),this._operation=S,this._className=P,this.a=this.registerDataInput("a",t),this.b=this.registerDataInput("b",b),this.c=this.registerDataInput("c",Z)}_doOperation(t){return this._operation(this.a.getValue(t),this.b.getValue(t),this.c.getValue(t))}getClassName(){return this._className}}var I=Z(14397),r=Z(14414),M=Z(14449);class T extends P.d{constructor(t){super((0,S.O)(null===t||void 0===t?void 0:t.type),(0,S.O)(null===t||void 0===t?void 0:t.type),(0,S.O)(null===t||void 0===t?void 0:t.type),((t,b)=>this._polymorphicAdd(t,b)),"FlowGraphAddBlock",t)}_polymorphicAdd(t,b){const Z=(0,M.g)(t),J=(0,M.g)(b);if((0,M.e)(Z,J)||(0,M.c)(Z,J)||(0,M.b)(Z,J))return t.add(b);if("Quaternion"===Z||"Vector4"===J)return new C.Vector4(t.x,t.y,t.z,t.w).addInPlace(b);if("Vector4"===Z||"Quaternion"===J)return t.add(b);var S;if(null!==(S=this.config)&&void 0!==S&&S.preventIntegerFloatArithmetic&&typeof t!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,M.j)(t)+(0,M.j)(b)}}(0,J.f)("FlowGraphAddBlock",T);class a extends P.d{constructor(t){super((0,S.O)(null===t||void 0===t?void 0:t.type),(0,S.O)(null===t||void 0===t?void 0:t.type),(0,S.O)(null===t||void 0===t?void 0:t.type),((t,b)=>this._polymorphicSubtract(t,b)),"FlowGraphSubtractBlock",t)}_polymorphicSubtract(t,b){const Z=(0,M.g)(t),J=(0,M.g)(b);if((0,M.e)(Z,J)||(0,M.b)(Z,J)||(0,M.c)(Z,J))return t.SZ(b);if("Quaternion"===Z||"Vector4"===J)return new C.Vector4(t.x,t.y,t.z,t.w).XI(b);if("Vector4"===Z||"Quaternion"===J)return t.SZ(b);var S;if(null!==(S=this.config)&&void 0!==S&&S.preventIntegerFloatArithmetic&&typeof t!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,M.j)(t)-(0,M.j)(b)}}(0,J.f)("FlowGraphSubtractBlock",a);class k extends P.d{constructor(t){super((0,S.O)(null===t||void 0===t?void 0:t.type),(0,S.O)(null===t||void 0===t?void 0:t.type),(0,S.O)(null===t||void 0===t?void 0:t.type),((t,b)=>this._polymorphicMultiply(t,b)),"FlowGraphMultiplyBlock",t)}_polymorphicMultiply(t,b){const Z=(0,M.g)(t),J=(0,M.g)(b);if((0,M.e)(Z,J)||(0,M.b)(Z,J))return t.multiply(b);if("Quaternion"===Z||"Vector4"===J)return new C.Vector4(t.x,t.y,t.z,t.w).multiplyInPlace(b);if("Vector4"===Z||"Quaternion"===J)return t.multiply(b);if((0,M.c)(Z,J)){var S;if(null!==(S=this.config)&&void 0!==S&&S.useMatrixPerComponent){const J=t.m;for(let t=0;t<J.length;t++)J[t]*=b.m[t];return"Matrix2D"===Z?new r.c(J):"Matrix3D"===Z?new r.g(J):C.Matrix.CZ(J)}return b.multiply(t)}var P;if(null!==(P=this.config)&&void 0!==P&&P.preventIntegerFloatArithmetic&&typeof t!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,M.j)(t)*(0,M.j)(b)}}(0,J.f)("FlowGraphMultiplyBlock",k);class u extends P.d{constructor(t){super((0,S.O)(null===t||void 0===t?void 0:t.type),(0,S.O)(null===t||void 0===t?void 0:t.type),(0,S.O)(null===t||void 0===t?void 0:t.type),((t,b)=>this._polymorphicDivide(t,b)),"FlowGraphDivideBlock",t)}_polymorphicDivide(t,b){const Z=(0,M.g)(t),J=(0,M.g)(b);if((0,M.e)(Z,J)||(0,M.b)(Z,J))return t.divide(b);if("Quaternion"===Z||"Quaternion"===J){const Z=t.clone();return Z.x/=b.x,Z.y/=b.y,Z.z/=b.z,Z.w/=b.w,Z}if("Quaternion"===Z||"Vector4"===J)return new C.Vector4(t.x,t.y,t.z,t.w).divideInPlace(b);if("Vector4"===Z||"Quaternion"===J)return t.divide(b);if((0,M.c)(Z,J)){var S;if(null!==(S=this.config)&&void 0!==S&&S.useMatrixPerComponent){const J=t.m;for(let t=0;t<J.length;t++)J[t]/=b.m[t];return"Matrix2D"===Z?new r.c(J):"Matrix3D"===Z?new r.g(J):C.Matrix.CZ(J)}return t.divide(b)}var P;if(null!==(P=this.config)&&void 0!==P&&P.preventIntegerFloatArithmetic&&typeof t!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,M.j)(t)/(0,M.j)(b)}}(0,J.f)("FlowGraphDivideBlock",u);class l extends h{constructor(t){super(S.q,(t=>this._random(t)),"FlowGraphRandomBlock",t),this.min=this.registerDataInput("min",S.q,(null===t||void 0===t?void 0:t.min)??0),this.max=this.registerDataInput("max",S.q,(null===t||void 0===t?void 0:t.max)??1),null!==t&&void 0!==t&&t.seed&&(this._seed=t.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const t=1e4*Math.sin(this._seed++);return t-Math.floor(t)}return Math.random()}_random(t){const b=this.min.getValue(t),Z=this.max.getValue(t);return this._getRandomValue()*(Z-b)+b}}(0,J.f)("FlowGraphRandomBlock",l);class U extends h{constructor(t){super(S.q,(()=>Math.E),"FlowGraphEBlock",t)}}(0,J.f)("FlowGraphEBlock",U);class E extends h{constructor(t){super(S.q,(()=>Math.PI),"FlowGraphPIBlock",t)}}(0,J.f)("FlowGraphPIBlock",E);class c extends h{constructor(t){super(S.q,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",t)}}(0,J.f)("FlowGraphInfBlock",c);class H extends h{constructor(t){super(S.q,(()=>Number.NaN),"FlowGraphNaNBlock",t)}}function o(t,b){switch((0,M.g)(t)){case"FlowGraphInteger":return new I.b(b(t.value));case"Vector2":return new C.Vector2(b(t.x),b(t.y));case"JZ":return new C.JZ(b(t.x),b(t.y),b(t.z));case"Vector4":return new C.Vector4(b(t.x),b(t.y),b(t.z),b(t.w));case"Quaternion":return new C.Quaternion(b(t.x),b(t.y),b(t.z),b(t.w));case"Matrix":return C.Matrix.CZ(t.m.map(b));case"Matrix2D":return new r.c(t.m.map(b));case"Matrix3D":return new r.g(t.m.map(b));default:return b(t)}}(0,J.f)("FlowGraphNaNBlock",H);class O extends Y.c{constructor(t){super(S.q,S.q,(t=>this._polymorphicAbs(t)),"FlowGraphAbsBlock",t)}_polymorphicAbs(t){return o(t,Math.abs)}}(0,J.f)("FlowGraphAbsBlock",O);class p extends Y.c{constructor(t){super(S.q,S.q,(t=>this._polymorphicSign(t)),"FlowGraphSignBlock",t)}_polymorphicSign(t){return o(t,Math.sign)}}(0,J.f)("FlowGraphSignBlock",p);class e extends Y.c{constructor(t){super(S.q,S.q,(t=>this._polymorphicTrunc(t)),"FlowGraphTruncBlock",t)}_polymorphicTrunc(t){return o(t,Math.trunc)}}(0,J.f)("FlowGraphTruncBlock",e);class W extends Y.c{constructor(t){super(S.q,S.q,(t=>this._polymorphicFloor(t)),"FlowGraphFloorBlock",t)}_polymorphicFloor(t){return o(t,Math.floor)}}(0,J.f)("FlowGraphFloorBlock",W);class j extends Y.c{constructor(t){super(S.c,S.c,(t=>this._polymorphicCeiling(t)),"FlowGraphCeilBlock",t)}_polymorphicCeiling(t){return o(t,Math.ceil)}}(0,J.f)("FlowGraphCeilBlock",j);class V extends Y.c{constructor(t){super(S.c,S.c,(t=>this._polymorphicRound(t)),"FlowGraphRoundBlock",t)}_polymorphicRound(t){return o(t,(t=>{var b;return t<0&&null!==(b=this.config)&&void 0!==b&&b.roundHalfAwayFromZero?-Math.round(-t):Math.round(t)}))}}(0,J.f)("FlowGraphRoundBlock",V);class n extends Y.c{constructor(t){super(S.c,S.c,(t=>this._polymorphicFraction(t)),"FlowGraphFractBlock",t)}_polymorphicFraction(t){return o(t,(t=>t-Math.floor(t)))}}(0,J.f)("FlowGraphFractBlock",n);class y extends Y.c{constructor(t){super(S.c,S.c,(t=>this._polymorphicNeg(t)),"FlowGraphNegationBlock",t)}_polymorphicNeg(t){return o(t,(t=>-t))}}function d(t,b,Z){switch((0,M.g)(t)){case"FlowGraphInteger":return new I.b(Z(t.value,b.value));case"Vector2":return new C.Vector2(Z(t.x,b.x),Z(t.y,b.y));case"JZ":return new C.JZ(Z(t.x,b.x),Z(t.y,b.y),Z(t.z,b.z));case"Vector4":return new C.Vector4(Z(t.x,b.x),Z(t.y,b.y),Z(t.z,b.z),Z(t.w,b.w));case"Quaternion":return new C.Quaternion(Z(t.x,b.x),Z(t.y,b.y),Z(t.z,b.z),Z(t.w,b.w));case"Matrix":return C.Matrix.CZ(t.m.map(((t,J)=>Z(t,b.m[J]))));case"Matrix2D":return new r.c(t.m.map(((t,J)=>Z(t,b.m[J]))));case"Matrix3D":return new r.g(t.m.map(((t,J)=>Z(t,b.m[J]))));default:return Z((0,M.j)(t),(0,M.j)(b))}}(0,J.f)("FlowGraphNegationBlock",y);class s extends P.d{constructor(t){super(S.c,S.c,S.c,((t,b)=>this._polymorphicRemainder(t,b)),"FlowGraphModuloBlock",t)}_polymorphicRemainder(t,b){return d(t,b,((t,b)=>t%b))}}(0,J.f)("FlowGraphModuloBlock",s);class q extends P.d{constructor(t){super(S.c,S.c,S.c,((t,b)=>this._polymorphicMin(t,b)),"FlowGraphMinBlock",t)}_polymorphicMin(t,b){return d(t,b,Math.min)}}(0,J.f)("FlowGraphMinBlock",q);class Q extends P.d{constructor(t){super(S.c,S.c,S.c,((t,b)=>this._polymorphicMax(t,b)),"FlowGraphMaxBlock",t)}_polymorphicMax(t,b){return d(t,b,Math.max)}}function N(t,b,Z){return Math.min(Math.max(t,Math.min(b,Z)),Math.max(b,Z))}function A(t,b,Z,J){switch((0,M.g)(t)){case"FlowGraphInteger":return new I.b(J(t.value,b.value,Z.value));case"Vector2":return new C.Vector2(J(t.x,b.x,Z.x),J(t.y,b.y,Z.y));case"JZ":return new C.JZ(J(t.x,b.x,Z.x),J(t.y,b.y,Z.y),J(t.z,b.z,Z.z));case"Vector4":return new C.Vector4(J(t.x,b.x,Z.x),J(t.y,b.y,Z.y),J(t.z,b.z,Z.z),J(t.w,b.w,Z.w));case"Quaternion":return new C.Quaternion(J(t.x,b.x,Z.x),J(t.y,b.y,Z.y),J(t.z,b.z,Z.z),J(t.w,b.w,Z.w));case"Matrix":return C.Matrix.CZ(t.m.map(((t,S)=>J(t,b.m[S],Z.m[S]))));case"Matrix2D":return new r.c(t.m.map(((t,S)=>J(t,b.m[S],Z.m[S]))));case"Matrix3D":return new r.g(t.m.map(((t,S)=>J(t,b.m[S],Z.m[S]))));default:return J((0,M.j)(t),(0,M.j)(b),(0,M.j)(Z))}}(0,J.f)("FlowGraphMaxBlock",Q);class K extends g{constructor(t){super(S.c,S.c,S.c,S.c,((t,b,Z)=>this._polymorphicClamp(t,b,Z)),"FlowGraphClampBlock",t)}_polymorphicClamp(t,b,Z){return A(t,b,Z,N)}}function L(t){return Math.min(Math.max(t,0),1)}(0,J.f)("FlowGraphClampBlock",K);class F extends Y.c{constructor(t){super(S.c,S.c,(t=>this._polymorphicSaturate(t)),"FlowGraphSaturateBlock",t)}_polymorphicSaturate(t){return o(t,L)}}function B(t,b,Z){return(1-Z)*t+Z*b}(0,J.f)("FlowGraphSaturateBlock",F);class X extends g{constructor(t){super(S.c,S.c,S.c,S.c,((t,b,Z)=>this._polymorphicInterpolate(t,b,Z)),"FlowGraphMathInterpolationBlock",t)}_polymorphicInterpolate(t,b,Z){return A(t,b,Z,B)}}(0,J.f)("FlowGraphMathInterpolationBlock",X);class x extends P.d{constructor(t){super(S.c,S.c,S.f,((t,b)=>this._polymorphicEq(t,b)),"FlowGraphEqualityBlock",t)}_polymorphicEq(t,b){const Z=(0,M.g)(t),J=(0,M.g)(b);return typeof t===typeof b&&((0,M.e)(Z,J)||(0,M.c)(Z,J)||(0,M.b)(Z,J)?t.equals(b):t===b)}}function i(t,b,Z){if((0,M.n)(t)&&(0,M.n)(b))return Z((0,M.j)(t),(0,M.j)(b));throw new Error(`Cannot compare ${t} and ${b}`)}(0,J.f)("FlowGraphEqualityBlock",x);class z extends P.d{constructor(t){super(S.c,S.c,S.f,((t,b)=>this._polymorphicLessThan(t,b)),"FlowGraphLessThanBlock",t)}_polymorphicLessThan(t,b){return i(t,b,((t,b)=>t<b))}}(0,J.f)("FlowGraphLessThanBlock",z);class D extends P.d{constructor(t){super(S.c,S.c,S.f,((t,b)=>this._polymorphicLessThanOrEqual(t,b)),"FlowGraphLessThanOrEqualBlock",t)}_polymorphicLessThanOrEqual(t,b){return i(t,b,((t,b)=>t<=b))}}(0,J.f)("FlowGraphLessThanOrEqualBlock",D);class f extends P.d{constructor(t){super(S.c,S.c,S.f,((t,b)=>this._polymorphicGreaterThan(t,b)),"FlowGraphGreaterThanBlock",t)}_polymorphicGreaterThan(t,b){return i(t,b,((t,b)=>t>b))}}(0,J.f)("FlowGraphGreaterThanBlock",f);class mt extends P.d{constructor(t){super(S.c,S.c,S.f,((t,b)=>this._polymorphicGreaterThanOrEqual(t,b)),"FlowGraphGreaterThanOrEqualBlock",t)}_polymorphicGreaterThanOrEqual(t,b){return i(t,b,((t,b)=>t>=b))}}(0,J.f)("FlowGraphGreaterThanOrEqualBlock",mt);class R extends Y.c{constructor(t){super(S.c,S.f,(t=>this._polymorphicIsNan(t)),"FlowGraphIsNaNBlock",t)}_polymorphicIsNan(t){if((0,M.n)(t,!0))return isNaN((0,M.j)(t));throw new Error(`Cannot get NaN of ${t}`)}}(0,J.f)("FlowGraphIsNaNBlock",R);class w extends Y.c{constructor(t){super(S.c,S.f,(t=>this._polymorphicIsInf(t)),"FlowGraphIsInfBlock",t)}_polymorphicIsInf(t){if((0,M.n)(t))return!isFinite((0,M.j)(t));throw new Error(`Cannot get isInf of ${t}`)}}(0,J.f)("FlowGraphIsInfBlock",w);class G extends Y.c{constructor(t){super(S.c,S.c,(t=>this._polymorphicDegToRad(t)),"FlowGraphDegToRadBlock",t)}_degToRad(t){return t*Math.PI/180}_polymorphicDegToRad(t){return o(t,this._degToRad)}}(0,J.f)("FlowGraphDegToRadBlock",G);class tt extends Y.c{constructor(t){super(S.c,S.c,(t=>this._polymorphicRadToDeg(t)),"FlowGraphRadToDegBlock",t)}_radToDeg(t){return 180*t/Math.PI}_polymorphicRadToDeg(t){return o(t,this._radToDeg)}}(0,J.f)("FlowGraphRadToDegBlock",tt);class bt extends Y.c{constructor(t){super(S.q,S.q,(t=>this._polymorphicSin(t)),"FlowGraphSinBlock",t)}_polymorphicSin(t){return o(t,Math.sin)}}class Zt extends Y.c{constructor(t){super(S.q,S.q,(t=>this._polymorphicCos(t)),"FlowGraphCosBlock",t)}_polymorphicCos(t){return o(t,Math.cos)}}class Jt extends Y.c{constructor(t){super(S.q,S.q,(t=>this._polymorphicTan(t)),"FlowGraphTanBlock",t)}_polymorphicTan(t){return o(t,Math.tan)}}class St extends Y.c{constructor(t){super(S.q,S.q,(t=>this._polymorphicAsin(t)),"FlowGraphASinBlock",t)}_polymorphicAsin(t){return o(t,Math.asin)}}(0,J.f)("FlowGraphASinBlock",St);class Pt extends Y.c{constructor(t){super(S.q,S.q,(t=>this._polymorphicAcos(t)),"FlowGraphACosBlock",t)}_polymorphicAcos(t){return o(t,Math.acos)}}(0,J.f)("FlowGraphACosBlock",Pt);class vt extends Y.c{constructor(t){super(S.q,S.q,(t=>this._polymorphicAtan(t)),"FlowGraphATanBlock",t)}_polymorphicAtan(t){return o(t,Math.atan)}}(0,J.f)("FlowGraphATanBlock",vt);class ht extends P.d{constructor(t){super(S.c,S.c,S.c,((t,b)=>this._polymorphicAtan2(t,b)),"FlowGraphATan2Block",t)}_polymorphicAtan2(t,b){return d(t,b,Math.atan2)}}(0,J.f)("FlowGraphATan2Block",ht);class Ct extends Y.c{constructor(t){super(S.c,S.c,(t=>this._polymorphicSinh(t)),"FlowGraphSinhBlock",t)}_polymorphicSinh(t){return o(t,Math.sinh)}}(0,J.f)("FlowGraphSinhBlock",Ct);class Yt extends Y.c{constructor(t){super(S.c,S.c,(t=>this._polymorphicCosh(t)),"FlowGraphCoshBlock",t)}_polymorphicCosh(t){return o(t,Math.cosh)}}(0,J.f)("FlowGraphCoshBlock",Yt);class gt extends Y.c{constructor(t){super(S.c,S.c,(t=>this._polymorphicTanh(t)),"FlowGraphTanhBlock",t)}_polymorphicTanh(t){return o(t,Math.tanh)}}(0,J.f)("FlowGraphTanhBlock",gt);class It extends Y.c{constructor(t){super(S.c,S.q,(t=>this._polymorphicAsinh(t)),"FlowGraphASinhBlock",t)}_polymorphicAsinh(t){return o(t,Math.asinh)}}(0,J.f)("FlowGraphASinhBlock",It);class rt extends Y.c{constructor(t){super(S.c,S.q,(t=>this._polymorphicAcosh(t)),"FlowGraphACoshBlock",t)}_polymorphicAcosh(t){return o(t,Math.acosh)}}(0,J.f)("FlowGraphACoshBlock",rt);class Mt extends Y.c{constructor(t){super(S.c,S.q,(t=>this._polymorphicAtanh(t)),"FlowGraphATanhBlock",t)}_polymorphicAtanh(t){return o(t,Math.atanh)}}(0,J.f)("FlowGraphATanhBlock",Mt);class Tt extends Y.c{constructor(t){super(S.c,S.q,(t=>this._polymorphicExp(t)),"FlowGraphExponentialBlock",t)}_polymorphicExp(t){return o(t,Math.exp)}}(0,J.f)("FlowGraphExponentialBlock",Tt);class at extends Y.c{constructor(t){super(S.c,S.q,(t=>this._polymorphicLog(t)),"FlowGraphLogBlock",t)}_polymorphicLog(t){return o(t,Math.log)}}(0,J.f)("FlowGraphLogBlock",at);class kt extends Y.c{constructor(t){super(S.c,S.q,(t=>this._polymorphicLog2(t)),"FlowGraphLog2Block",t)}_polymorphicLog2(t){return o(t,Math.log2)}}(0,J.f)("FlowGraphLog2Block",kt);class ut extends Y.c{constructor(t){super(S.c,S.q,(t=>this._polymorphicLog10(t)),"FlowGraphLog10Block",t)}_polymorphicLog10(t){return o(t,Math.log10)}}(0,J.f)("FlowGraphLog10Block",ut);class lt extends Y.c{constructor(t){super(S.c,S.q,(t=>this._polymorphicSqrt(t)),"FlowGraphSquareRootBlock",t)}_polymorphicSqrt(t){return o(t,Math.sqrt)}}(0,J.f)("FlowGraphSquareRootBlock",lt);class Ut extends Y.c{constructor(t){super(S.c,S.q,(t=>this._polymorphicCubeRoot(t)),"FlowGraphCubeRootBlock",t)}_polymorphicCubeRoot(t){return o(t,Math.cbrt)}}(0,J.f)("FlowGraphCubeRootBlock",Ut);class Et extends P.d{constructor(t){super(S.c,S.q,S.q,((t,b)=>this._polymorphicPow(t,b)),"FlowGraphPowerBlock",t)}_polymorphicPow(t,b){return d(t,b,Math.pow)}}(0,J.f)("FlowGraphPowerBlock",Et);class ct extends Y.c{constructor(t){super((0,S.O)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,S.O)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(t=>"boolean"===typeof t?!t:"number"===typeof t?~t:new I.b(~t.value)),"FlowGraphBitwiseNotBlock",t)}}(0,J.f)("FlowGraphBitwiseNotBlock",ct);class Ht extends P.d{constructor(t){super((0,S.O)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,S.O)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,S.O)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),((t,b)=>{if("boolean"===typeof t&&"boolean"===typeof b)return t&&b;if("number"===typeof t&&"number"===typeof b)return t&b;if("object"===typeof t&&"object"===typeof b)return new I.b(t.value&b.value);throw new Error(`Cannot perform bitwise AND on ${t} and ${b}`)}),"FlowGraphBitwiseAndBlock",t)}}(0,J.f)("FlowGraphBitwiseAndBlock",Ht);class ot extends P.d{constructor(t){super((0,S.O)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,S.O)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,S.O)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),((t,b)=>{if("boolean"===typeof t&&"boolean"===typeof b)return t||b;if("number"===typeof t&&"number"===typeof b)return t|b;if("object"===typeof t&&"object"===typeof b)return new I.b(t.value|b.value);throw new Error(`Cannot perform bitwise OR on ${t} and ${b}`)}),"FlowGraphBitwiseOrBlock",t)}}(0,J.f)("FlowGraphBitwiseOrBlock",ot);class Ot extends P.d{constructor(t){super((0,S.O)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,S.O)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,S.O)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),((t,b)=>{if("boolean"===typeof t&&"boolean"===typeof b)return t!==b;if("number"===typeof t&&"number"===typeof b)return t^b;if("object"===typeof t&&"object"===typeof b)return new I.b(t.value^b.value);throw new Error(`Cannot perform bitwise XOR on ${t} and ${b}`)}),"FlowGraphBitwiseXorBlock",t)}}(0,J.f)("FlowGraphBitwiseXorBlock",Ot);class pt extends P.d{constructor(t){super(S.j,S.j,S.j,((t,b)=>new I.b(t.value<<b.value)),"FlowGraphBitwiseLeftShiftBlock",t)}}(0,J.f)("FlowGraphBitwiseLeftShiftBlock",pt);class et extends P.d{constructor(t){super(S.j,S.j,S.j,((t,b)=>new I.b(t.value>>b.value)),"FlowGraphBitwiseRightShiftBlock",t)}}(0,J.f)("FlowGraphBitwiseRightShiftBlock",et);class Wt extends Y.c{constructor(t){super(S.j,S.j,(t=>new I.b(Math.clz32(t.value))),"FlowGraphLeadingZerosBlock",t)}}(0,J.f)("FlowGraphLeadingZerosBlock",Wt);class jt extends Y.c{constructor(t){super(S.j,S.j,(t=>new I.b(t.value?31-Math.clz32(t.value&-t.value):32)),"FlowGraphTrailingZerosBlock",t)}}(0,J.f)("FlowGraphTrailingZerosBlock",jt);class Vt extends Y.c{constructor(t){super(S.j,S.j,(t=>new I.b(function(t){let b=0;for(;t;)b+=1&t,t>>=1;return b}(t.value))),"FlowGraphOneBitsCounterBlock",t)}}(0,J.f)("FlowGraphOneBitsCounterBlock",Vt)},15952:(t,b,Z)=>{Z.d(b,{d:()=>S});var J=Z(15959);class S extends J.d{constructor(t,b,Z,J,S,P){super(Z,P),this._operation=J,this._className=S,this.a=this.registerDataInput("a",t),this.b=this.registerDataInput("b",b)}_doOperation(t){const b=this.a.getValue(t),Z=this.b.getValue(t);return this._operation(b,Z)}getClassName(){return this._className}}},15959:(t,b,Z)=>{Z.d(b,{d:()=>h});var J=Z(14432),S=Z(14405);const P="cachedOperationValue",v="cachedExecutionId";class h extends J.e{constructor(t,b){super(b),this.value=this.registerDataOutput("value",t),this.isValid=this.registerDataOutput("isValid",S.f)}_updateOutputs(t){const b=t._getExecutionVariable(this,v,-1),Z=t._getExecutionVariable(this,P,null);if(void 0!==Z&&null!==Z&&b===t.executionId)this.isValid.setValue(!0,t),this.value.setValue(Z,t);else try{const b=this._doOperation(t);if(void 0===b||null===b)return void this.isValid.setValue(!1,t);t._setExecutionVariable(this,P,b),t._setExecutionVariable(this,v,t.executionId),this.value.setValue(b,t),this.isValid.setValue(!0,t)}catch(J){this.isValid.setValue(!1,t)}}}},15962:(t,b,Z)=>{Z.d(b,{c:()=>S});var J=Z(15959);class S extends J.d{constructor(t,b,Z,J,S){super(b,S),this._operation=Z,this._className=J,this.a=this.registerDataInput("a",t)}_doOperation(t){return this._operation(this.a.getValue(t))}getClassName(){return this._className}}}}]);