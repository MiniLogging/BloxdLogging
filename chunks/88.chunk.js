"use strict";(self.zjjkhojdx1=self.zjjkhojdx1||[]).push([[88],{14403:(k,h,o)=>{o.r(h),o.d(h,{FlowGraphAbsBlock:()=>i,FlowGraphAcosBlock:()=>qk,FlowGraphAcoshBlock:()=>ak,FlowGraphAddBlock:()=>X,FlowGraphAsinBlock:()=>Ik,FlowGraphAsinhBlock:()=>Kk,FlowGraphAtan2Block:()=>Jk,FlowGraphAtanBlock:()=>Yk,FlowGraphAtanhBlock:()=>Nk,FlowGraphBitwiseAndBlock:()=>bk,FlowGraphBitwiseLeftShiftBlock:()=>Fk,FlowGraphBitwiseNotBlock:()=>dk,FlowGraphBitwiseOrBlock:()=>Vk,FlowGraphBitwiseRightShiftBlock:()=>Rk,FlowGraphBitwiseXorBlock:()=>ik,FlowGraphCeilBlock:()=>Z,FlowGraphClampBlock:()=>O,FlowGraphCosBlock:()=>ok,FlowGraphCoshBlock:()=>lk,FlowGraphCubeRootBlock:()=>Tk,FlowGraphDegToRadBlock:()=>u,FlowGraphDivideBlock:()=>f,FlowGraphEBlock:()=>T,FlowGraphEqualityBlock:()=>L,FlowGraphExpBlock:()=>Xk,FlowGraphFloorBlock:()=>s,FlowGraphFractionBlock:()=>D,FlowGraphGreaterThanBlock:()=>S,FlowGraphGreaterThanOrEqualBlock:()=>C,FlowGraphInfBlock:()=>d,FlowGraphIsInfinityBlock:()=>e,FlowGraphIsNanBlock:()=>g,FlowGraphLeadingZerosBlock:()=>sk,FlowGraphLessThanBlock:()=>r,FlowGraphLessThanOrEqualBlock:()=>t,FlowGraphLog10Block:()=>fk,FlowGraphLog2Block:()=>Wk,FlowGraphLogBlock:()=>ck,FlowGraphMathInterpolationBlock:()=>m,FlowGraphMaxBlock:()=>n,FlowGraphMinBlock:()=>E,FlowGraphModuloBlock:()=>B,FlowGraphMultiplyBlock:()=>W,FlowGraphNaNBlock:()=>b,FlowGraphNegationBlock:()=>U,FlowGraphOneBitsCounterBlock:()=>wk,FlowGraphPiBlock:()=>j,FlowGraphPowerBlock:()=>jk,FlowGraphRadToDegBlock:()=>kk,FlowGraphRandomBlock:()=>M,FlowGraphRoundBlock:()=>w,FlowGraphSaturateBlock:()=>p,FlowGraphSignBlock:()=>F,FlowGraphSinBlock:()=>hk,FlowGraphSinhBlock:()=>Gk,FlowGraphSquareRootBlock:()=>Mk,FlowGraphSubtractBlock:()=>c,FlowGraphTanBlock:()=>xk,FlowGraphTanhBlock:()=>Ak,FlowGraphTrailingZerosBlock:()=>Zk,FlowGraphTruncBlock:()=>R});var x=o(11199),I=o(12936),q=o(14405),Y=o(14409);class J extends Y.c{constructor(k,h,o,x){super(k,x),this._operation=h,this._className=o}_doOperation(k){return this._operation(k)}getClassName(){return this._className}}var G=o(11239),l=o(14412);class A extends Y.c{constructor(k,h,o,x,I,q,Y){super(x,Y),this._operation=I,this._className=q,this.a=this.registerDataInput("a",k),this.b=this.registerDataInput("b",h),this.c=this.registerDataInput("c",o)}_doOperation(k){return this._operation(this.a.getValue(k),this.b.getValue(k),this.c.getValue(k))}getClassName(){return this._className}}var K=o(12928),a=o(12940),N=o(12972);class X extends q.b{constructor(k){super((0,I.D)(null===k||void 0===k?void 0:k.type),(0,I.D)(null===k||void 0===k?void 0:k.type),(0,I.D)(null===k||void 0===k?void 0:k.type),((k,h)=>this._polymorphicAdd(k,h)),"FlowGraphAddBlock",k)}_polymorphicAdd(k,h){const o=(0,N.m)(k),x=(0,N.m)(h);if((0,N.k)(o,x)||(0,N.g)(o,x)||(0,N.c)(o,x))return k.add(h);if("Quaternion"===o||"Vector4"===x)return new G.Vector4(k.x,k.y,k.z,k.w).addInPlace(h);if("Vector4"===o||"Quaternion"===x)return k.add(h);var I;if(null!==(I=this.config)&&void 0!==I&&I.preventIntegerFloatArithmetic&&typeof k!==typeof h)throw new Error("Cannot add different types of numbers.");return(0,N.s)(k)+(0,N.s)(h)}}(0,x.g)("FlowGraphAddBlock",X);class c extends q.b{constructor(k){super((0,I.D)(null===k||void 0===k?void 0:k.type),(0,I.D)(null===k||void 0===k?void 0:k.type),(0,I.D)(null===k||void 0===k?void 0:k.type),((k,h)=>this._polymorphicSubtract(k,h)),"FlowGraphSubtractBlock",k)}_polymorphicSubtract(k,h){const o=(0,N.m)(k),x=(0,N.m)(h);if((0,N.k)(o,x)||(0,N.c)(o,x)||(0,N.g)(o,x))return k.ih(h);if("Quaternion"===o||"Vector4"===x)return new G.Vector4(k.x,k.y,k.z,k.w).xK(h);if("Vector4"===o||"Quaternion"===x)return k.ih(h);var I;if(null!==(I=this.config)&&void 0!==I&&I.preventIntegerFloatArithmetic&&typeof k!==typeof h)throw new Error("Cannot add different types of numbers.");return(0,N.s)(k)-(0,N.s)(h)}}(0,x.g)("FlowGraphSubtractBlock",c);class W extends q.b{constructor(k){super((0,I.D)(null===k||void 0===k?void 0:k.type),(0,I.D)(null===k||void 0===k?void 0:k.type),(0,I.D)(null===k||void 0===k?void 0:k.type),((k,h)=>this._polymorphicMultiply(k,h)),"FlowGraphMultiplyBlock",k)}_polymorphicMultiply(k,h){const o=(0,N.m)(k),x=(0,N.m)(h);if((0,N.k)(o,x)||(0,N.c)(o,x))return k.multiply(h);if("Quaternion"===o||"Vector4"===x)return new G.Vector4(k.x,k.y,k.z,k.w).multiplyInPlace(h);if("Vector4"===o||"Quaternion"===x)return k.multiply(h);if((0,N.g)(o,x)){var I;if(null!==(I=this.config)&&void 0!==I&&I.useMatrixPerComponent){const x=k.m;for(let k=0;k<x.length;k++)x[k]*=h.m[k];return"Matrix2D"===o?new a.d(x):"Matrix3D"===o?new a.f(x):G.Matrix.Uh(x)}return h.multiply(k)}var q;if(null!==(q=this.config)&&void 0!==q&&q.preventIntegerFloatArithmetic&&typeof k!==typeof h)throw new Error("Cannot add different types of numbers.");return(0,N.s)(k)*(0,N.s)(h)}}(0,x.g)("FlowGraphMultiplyBlock",W);class f extends q.b{constructor(k){super((0,I.D)(null===k||void 0===k?void 0:k.type),(0,I.D)(null===k||void 0===k?void 0:k.type),(0,I.D)(null===k||void 0===k?void 0:k.type),((k,h)=>this._polymorphicDivide(k,h)),"FlowGraphDivideBlock",k)}_polymorphicDivide(k,h){const o=(0,N.m)(k),x=(0,N.m)(h);if((0,N.k)(o,x)||(0,N.c)(o,x))return k.divide(h);if("Quaternion"===o||"Quaternion"===x){const o=k.clone();return o.x/=h.x,o.y/=h.y,o.z/=h.z,o.w/=h.w,o}if("Quaternion"===o||"Vector4"===x)return new G.Vector4(k.x,k.y,k.z,k.w).divideInPlace(h);if("Vector4"===o||"Quaternion"===x)return k.divide(h);if((0,N.g)(o,x)){var I;if(null!==(I=this.config)&&void 0!==I&&I.useMatrixPerComponent){const x=k.m;for(let k=0;k<x.length;k++)x[k]/=h.m[k];return"Matrix2D"===o?new a.d(x):"Matrix3D"===o?new a.f(x):G.Matrix.Uh(x)}return k.divide(h)}var q;if(null!==(q=this.config)&&void 0!==q&&q.preventIntegerFloatArithmetic&&typeof k!==typeof h)throw new Error("Cannot add different types of numbers.");return(0,N.s)(k)/(0,N.s)(h)}}(0,x.g)("FlowGraphDivideBlock",f);class M extends J{constructor(k){super(I.o,(k=>this._random(k)),"FlowGraphRandomBlock",k),this.min=this.registerDataInput("min",I.o,(null===k||void 0===k?void 0:k.min)??0),this.max=this.registerDataInput("max",I.o,(null===k||void 0===k?void 0:k.max)??1),null!==k&&void 0!==k&&k.seed&&(this._seed=k.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const k=1e4*Math.sin(this._seed++);return k-Math.floor(k)}return Math.random()}_random(k){const h=this.min.getValue(k),o=this.max.getValue(k);return this._getRandomValue()*(o-h)+h}}(0,x.g)("FlowGraphRandomBlock",M);class T extends J{constructor(k){super(I.o,(()=>Math.E),"FlowGraphEBlock",k)}}(0,x.g)("FlowGraphEBlock",T);class j extends J{constructor(k){super(I.o,(()=>Math.PI),"FlowGraphPIBlock",k)}}(0,x.g)("FlowGraphPIBlock",j);class d extends J{constructor(k){super(I.o,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",k)}}(0,x.g)("FlowGraphInfBlock",d);class b extends J{constructor(k){super(I.o,(()=>Number.NaN),"FlowGraphNaNBlock",k)}}function V(k,h){switch((0,N.m)(k)){case"FlowGraphInteger":return new K.c(h(k.value));case"Vector2":return new G.Vector2(h(k.x),h(k.y));case"Vh":return new G.Vh(h(k.x),h(k.y),h(k.z));case"Vector4":return new G.Vector4(h(k.x),h(k.y),h(k.z),h(k.w));case"Quaternion":return new G.Quaternion(h(k.x),h(k.y),h(k.z),h(k.w));case"Matrix":return G.Matrix.Uh(k.m.map(h));case"Matrix2D":return new a.d(k.m.map(h));case"Matrix3D":return new a.f(k.m.map(h));default:return h(k)}}(0,x.g)("FlowGraphNaNBlock",b);class i extends l.c{constructor(k){super(I.o,I.o,(k=>this._polymorphicAbs(k)),"FlowGraphAbsBlock",k)}_polymorphicAbs(k){return V(k,Math.abs)}}(0,x.g)("FlowGraphAbsBlock",i);class F extends l.c{constructor(k){super(I.o,I.o,(k=>this._polymorphicSign(k)),"FlowGraphSignBlock",k)}_polymorphicSign(k){return V(k,Math.sign)}}(0,x.g)("FlowGraphSignBlock",F);class R extends l.c{constructor(k){super(I.o,I.o,(k=>this._polymorphicTrunc(k)),"FlowGraphTruncBlock",k)}_polymorphicTrunc(k){return V(k,Math.trunc)}}(0,x.g)("FlowGraphTruncBlock",R);class s extends l.c{constructor(k){super(I.o,I.o,(k=>this._polymorphicFloor(k)),"FlowGraphFloorBlock",k)}_polymorphicFloor(k){return V(k,Math.floor)}}(0,x.g)("FlowGraphFloorBlock",s);class Z extends l.c{constructor(k){super(I.d,I.d,(k=>this._polymorphicCeiling(k)),"FlowGraphCeilBlock",k)}_polymorphicCeiling(k){return V(k,Math.ceil)}}(0,x.g)("FlowGraphCeilBlock",Z);class w extends l.c{constructor(k){super(I.d,I.d,(k=>this._polymorphicRound(k)),"FlowGraphRoundBlock",k)}_polymorphicRound(k){return V(k,(k=>{var h;return k<0&&null!==(h=this.config)&&void 0!==h&&h.roundHalfAwayFromZero?-Math.round(-k):Math.round(k)}))}}(0,x.g)("FlowGraphRoundBlock",w);class D extends l.c{constructor(k){super(I.d,I.d,(k=>this._polymorphicFraction(k)),"FlowGraphFractBlock",k)}_polymorphicFraction(k){return V(k,(k=>k-Math.floor(k)))}}(0,x.g)("FlowGraphFractBlock",D);class U extends l.c{constructor(k){super(I.d,I.d,(k=>this._polymorphicNeg(k)),"FlowGraphNegationBlock",k)}_polymorphicNeg(k){return V(k,(k=>-k))}}function Q(k,h,o){switch((0,N.m)(k)){case"FlowGraphInteger":return new K.c(o(k.value,h.value));case"Vector2":return new G.Vector2(o(k.x,h.x),o(k.y,h.y));case"Vh":return new G.Vh(o(k.x,h.x),o(k.y,h.y),o(k.z,h.z));case"Vector4":return new G.Vector4(o(k.x,h.x),o(k.y,h.y),o(k.z,h.z),o(k.w,h.w));case"Quaternion":return new G.Quaternion(o(k.x,h.x),o(k.y,h.y),o(k.z,h.z),o(k.w,h.w));case"Matrix":return G.Matrix.Uh(k.m.map(((k,x)=>o(k,h.m[x]))));case"Matrix2D":return new a.d(k.m.map(((k,x)=>o(k,h.m[x]))));case"Matrix3D":return new a.f(k.m.map(((k,x)=>o(k,h.m[x]))));default:return o((0,N.s)(k),(0,N.s)(h))}}(0,x.g)("FlowGraphNegationBlock",U);class B extends q.b{constructor(k){super(I.d,I.d,I.d,((k,h)=>this._polymorphicRemainder(k,h)),"FlowGraphModuloBlock",k)}_polymorphicRemainder(k,h){return Q(k,h,((k,h)=>k%h))}}(0,x.g)("FlowGraphModuloBlock",B);class E extends q.b{constructor(k){super(I.d,I.d,I.d,((k,h)=>this._polymorphicMin(k,h)),"FlowGraphMinBlock",k)}_polymorphicMin(k,h){return Q(k,h,Math.min)}}(0,x.g)("FlowGraphMinBlock",E);class n extends q.b{constructor(k){super(I.d,I.d,I.d,((k,h)=>this._polymorphicMax(k,h)),"FlowGraphMaxBlock",k)}_polymorphicMax(k,h){return Q(k,h,Math.max)}}function H(k,h,o){return Math.min(Math.max(k,Math.min(h,o)),Math.max(h,o))}function y(k,h,o,x){switch((0,N.m)(k)){case"FlowGraphInteger":return new K.c(x(k.value,h.value,o.value));case"Vector2":return new G.Vector2(x(k.x,h.x,o.x),x(k.y,h.y,o.y));case"Vh":return new G.Vh(x(k.x,h.x,o.x),x(k.y,h.y,o.y),x(k.z,h.z,o.z));case"Vector4":return new G.Vector4(x(k.x,h.x,o.x),x(k.y,h.y,o.y),x(k.z,h.z,o.z),x(k.w,h.w,o.w));case"Quaternion":return new G.Quaternion(x(k.x,h.x,o.x),x(k.y,h.y,o.y),x(k.z,h.z,o.z),x(k.w,h.w,o.w));case"Matrix":return G.Matrix.Uh(k.m.map(((k,I)=>x(k,h.m[I],o.m[I]))));case"Matrix2D":return new a.d(k.m.map(((k,I)=>x(k,h.m[I],o.m[I]))));case"Matrix3D":return new a.f(k.m.map(((k,I)=>x(k,h.m[I],o.m[I]))));default:return x((0,N.s)(k),(0,N.s)(h),(0,N.s)(o))}}(0,x.g)("FlowGraphMaxBlock",n);class O extends A{constructor(k){super(I.d,I.d,I.d,I.d,((k,h,o)=>this._polymorphicClamp(k,h,o)),"FlowGraphClampBlock",k)}_polymorphicClamp(k,h,o){return y(k,h,o,H)}}function z(k){return Math.min(Math.max(k,0),1)}(0,x.g)("FlowGraphClampBlock",O);class p extends l.c{constructor(k){super(I.d,I.d,(k=>this._polymorphicSaturate(k)),"FlowGraphSaturateBlock",k)}_polymorphicSaturate(k){return V(k,z)}}function v(k,h,o){return(1-o)*k+o*h}(0,x.g)("FlowGraphSaturateBlock",p);class m extends A{constructor(k){super(I.d,I.d,I.d,I.d,((k,h,o)=>this._polymorphicInterpolate(k,h,o)),"FlowGraphMathInterpolationBlock",k)}_polymorphicInterpolate(k,h,o){return y(k,h,o,v)}}(0,x.g)("FlowGraphMathInterpolationBlock",m);class L extends q.b{constructor(k){super(I.d,I.d,I.h,((k,h)=>this._polymorphicEq(k,h)),"FlowGraphEqualityBlock",k)}_polymorphicEq(k,h){const o=(0,N.m)(k),x=(0,N.m)(h);return typeof k===typeof h&&((0,N.k)(o,x)||(0,N.g)(o,x)||(0,N.c)(o,x)?k.equals(h):k===h)}}function P(k,h,o){if((0,N.v)(k)&&(0,N.v)(h))return o((0,N.s)(k),(0,N.s)(h));throw new Error(`Cannot compare ${k} and ${h}`)}(0,x.g)("FlowGraphEqualityBlock",L);class r extends q.b{constructor(k){super(I.d,I.d,I.h,((k,h)=>this._polymorphicLessThan(k,h)),"FlowGraphLessThanBlock",k)}_polymorphicLessThan(k,h){return P(k,h,((k,h)=>k<h))}}(0,x.g)("FlowGraphLessThanBlock",r);class t extends q.b{constructor(k){super(I.d,I.d,I.h,((k,h)=>this._polymorphicLessThanOrEqual(k,h)),"FlowGraphLessThanOrEqualBlock",k)}_polymorphicLessThanOrEqual(k,h){return P(k,h,((k,h)=>k<=h))}}(0,x.g)("FlowGraphLessThanOrEqualBlock",t);class S extends q.b{constructor(k){super(I.d,I.d,I.h,((k,h)=>this._polymorphicGreaterThan(k,h)),"FlowGraphGreaterThanBlock",k)}_polymorphicGreaterThan(k,h){return P(k,h,((k,h)=>k>h))}}(0,x.g)("FlowGraphGreaterThanBlock",S);class C extends q.b{constructor(k){super(I.d,I.d,I.h,((k,h)=>this._polymorphicGreaterThanOrEqual(k,h)),"FlowGraphGreaterThanOrEqualBlock",k)}_polymorphicGreaterThanOrEqual(k,h){return P(k,h,((k,h)=>k>=h))}}(0,x.g)("FlowGraphGreaterThanOrEqualBlock",C);class g extends l.c{constructor(k){super(I.d,I.h,(k=>this._polymorphicIsNan(k)),"FlowGraphIsNaNBlock",k)}_polymorphicIsNan(k){if((0,N.v)(k,!0))return isNaN((0,N.s)(k));throw new Error(`Cannot get NaN of ${k}`)}}(0,x.g)("FlowGraphIsNaNBlock",g);class e extends l.c{constructor(k){super(I.d,I.h,(k=>this._polymorphicIsInf(k)),"FlowGraphIsInfBlock",k)}_polymorphicIsInf(k){if((0,N.v)(k))return!isFinite((0,N.s)(k));throw new Error(`Cannot get isInf of ${k}`)}}(0,x.g)("FlowGraphIsInfBlock",e);class u extends l.c{constructor(k){super(I.d,I.d,(k=>this._polymorphicDegToRad(k)),"FlowGraphDegToRadBlock",k)}_degToRad(k){return k*Math.PI/180}_polymorphicDegToRad(k){return V(k,this._degToRad)}}(0,x.g)("FlowGraphDegToRadBlock",u);class kk extends l.c{constructor(k){super(I.d,I.d,(k=>this._polymorphicRadToDeg(k)),"FlowGraphRadToDegBlock",k)}_radToDeg(k){return 180*k/Math.PI}_polymorphicRadToDeg(k){return V(k,this._radToDeg)}}(0,x.g)("FlowGraphRadToDegBlock",kk);class hk extends l.c{constructor(k){super(I.o,I.o,(k=>this._polymorphicSin(k)),"FlowGraphSinBlock",k)}_polymorphicSin(k){return V(k,Math.sin)}}class ok extends l.c{constructor(k){super(I.o,I.o,(k=>this._polymorphicCos(k)),"FlowGraphCosBlock",k)}_polymorphicCos(k){return V(k,Math.cos)}}class xk extends l.c{constructor(k){super(I.o,I.o,(k=>this._polymorphicTan(k)),"FlowGraphTanBlock",k)}_polymorphicTan(k){return V(k,Math.tan)}}class Ik extends l.c{constructor(k){super(I.o,I.o,(k=>this._polymorphicAsin(k)),"FlowGraphASinBlock",k)}_polymorphicAsin(k){return V(k,Math.asin)}}(0,x.g)("FlowGraphASinBlock",Ik);class qk extends l.c{constructor(k){super(I.o,I.o,(k=>this._polymorphicAcos(k)),"FlowGraphACosBlock",k)}_polymorphicAcos(k){return V(k,Math.acos)}}(0,x.g)("FlowGraphACosBlock",qk);class Yk extends l.c{constructor(k){super(I.o,I.o,(k=>this._polymorphicAtan(k)),"FlowGraphATanBlock",k)}_polymorphicAtan(k){return V(k,Math.atan)}}(0,x.g)("FlowGraphATanBlock",Yk);class Jk extends q.b{constructor(k){super(I.d,I.d,I.d,((k,h)=>this._polymorphicAtan2(k,h)),"FlowGraphATan2Block",k)}_polymorphicAtan2(k,h){return Q(k,h,Math.atan2)}}(0,x.g)("FlowGraphATan2Block",Jk);class Gk extends l.c{constructor(k){super(I.d,I.d,(k=>this._polymorphicSinh(k)),"FlowGraphSinhBlock",k)}_polymorphicSinh(k){return V(k,Math.sinh)}}(0,x.g)("FlowGraphSinhBlock",Gk);class lk extends l.c{constructor(k){super(I.d,I.d,(k=>this._polymorphicCosh(k)),"FlowGraphCoshBlock",k)}_polymorphicCosh(k){return V(k,Math.cosh)}}(0,x.g)("FlowGraphCoshBlock",lk);class Ak extends l.c{constructor(k){super(I.d,I.d,(k=>this._polymorphicTanh(k)),"FlowGraphTanhBlock",k)}_polymorphicTanh(k){return V(k,Math.tanh)}}(0,x.g)("FlowGraphTanhBlock",Ak);class Kk extends l.c{constructor(k){super(I.d,I.o,(k=>this._polymorphicAsinh(k)),"FlowGraphASinhBlock",k)}_polymorphicAsinh(k){return V(k,Math.asinh)}}(0,x.g)("FlowGraphASinhBlock",Kk);class ak extends l.c{constructor(k){super(I.d,I.o,(k=>this._polymorphicAcosh(k)),"FlowGraphACoshBlock",k)}_polymorphicAcosh(k){return V(k,Math.acosh)}}(0,x.g)("FlowGraphACoshBlock",ak);class Nk extends l.c{constructor(k){super(I.d,I.o,(k=>this._polymorphicAtanh(k)),"FlowGraphATanhBlock",k)}_polymorphicAtanh(k){return V(k,Math.atanh)}}(0,x.g)("FlowGraphATanhBlock",Nk);class Xk extends l.c{constructor(k){super(I.d,I.o,(k=>this._polymorphicExp(k)),"FlowGraphExponentialBlock",k)}_polymorphicExp(k){return V(k,Math.exp)}}(0,x.g)("FlowGraphExponentialBlock",Xk);class ck extends l.c{constructor(k){super(I.d,I.o,(k=>this._polymorphicLog(k)),"FlowGraphLogBlock",k)}_polymorphicLog(k){return V(k,Math.log)}}(0,x.g)("FlowGraphLogBlock",ck);class Wk extends l.c{constructor(k){super(I.d,I.o,(k=>this._polymorphicLog2(k)),"FlowGraphLog2Block",k)}_polymorphicLog2(k){return V(k,Math.log2)}}(0,x.g)("FlowGraphLog2Block",Wk);class fk extends l.c{constructor(k){super(I.d,I.o,(k=>this._polymorphicLog10(k)),"FlowGraphLog10Block",k)}_polymorphicLog10(k){return V(k,Math.log10)}}(0,x.g)("FlowGraphLog10Block",fk);class Mk extends l.c{constructor(k){super(I.d,I.o,(k=>this._polymorphicSqrt(k)),"FlowGraphSquareRootBlock",k)}_polymorphicSqrt(k){return V(k,Math.sqrt)}}(0,x.g)("FlowGraphSquareRootBlock",Mk);class Tk extends l.c{constructor(k){super(I.d,I.o,(k=>this._polymorphicCubeRoot(k)),"FlowGraphCubeRootBlock",k)}_polymorphicCubeRoot(k){return V(k,Math.cbrt)}}(0,x.g)("FlowGraphCubeRootBlock",Tk);class jk extends q.b{constructor(k){super(I.d,I.o,I.o,((k,h)=>this._polymorphicPow(k,h)),"FlowGraphPowerBlock",k)}_polymorphicPow(k,h){return Q(k,h,Math.pow)}}(0,x.g)("FlowGraphPowerBlock",jk);class dk extends l.c{constructor(k){super((0,I.D)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),(0,I.D)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),(k=>"boolean"===typeof k?!k:"number"===typeof k?~k:new K.c(~k.value)),"FlowGraphBitwiseNotBlock",k)}}(0,x.g)("FlowGraphBitwiseNotBlock",dk);class bk extends q.b{constructor(k){super((0,I.D)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),(0,I.D)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),(0,I.D)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),((k,h)=>{if("boolean"===typeof k&&"boolean"===typeof h)return k&&h;if("number"===typeof k&&"number"===typeof h)return k&h;if("object"===typeof k&&"object"===typeof h)return new K.c(k.value&h.value);throw new Error(`Cannot perform bitwise AND on ${k} and ${h}`)}),"FlowGraphBitwiseAndBlock",k)}}(0,x.g)("FlowGraphBitwiseAndBlock",bk);class Vk extends q.b{constructor(k){super((0,I.D)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),(0,I.D)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),(0,I.D)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),((k,h)=>{if("boolean"===typeof k&&"boolean"===typeof h)return k||h;if("number"===typeof k&&"number"===typeof h)return k|h;if("object"===typeof k&&"object"===typeof h)return new K.c(k.value|h.value);throw new Error(`Cannot perform bitwise OR on ${k} and ${h}`)}),"FlowGraphBitwiseOrBlock",k)}}(0,x.g)("FlowGraphBitwiseOrBlock",Vk);class ik extends q.b{constructor(k){super((0,I.D)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),(0,I.D)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),(0,I.D)((null===k||void 0===k?void 0:k.valueType)||"FlowGraphInteger"),((k,h)=>{if("boolean"===typeof k&&"boolean"===typeof h)return k!==h;if("number"===typeof k&&"number"===typeof h)return k^h;if("object"===typeof k&&"object"===typeof h)return new K.c(k.value^h.value);throw new Error(`Cannot perform bitwise XOR on ${k} and ${h}`)}),"FlowGraphBitwiseXorBlock",k)}}(0,x.g)("FlowGraphBitwiseXorBlock",ik);class Fk extends q.b{constructor(k){super(I.j,I.j,I.j,((k,h)=>new K.c(k.value<<h.value)),"FlowGraphBitwiseLeftShiftBlock",k)}}(0,x.g)("FlowGraphBitwiseLeftShiftBlock",Fk);class Rk extends q.b{constructor(k){super(I.j,I.j,I.j,((k,h)=>new K.c(k.value>>h.value)),"FlowGraphBitwiseRightShiftBlock",k)}}(0,x.g)("FlowGraphBitwiseRightShiftBlock",Rk);class sk extends l.c{constructor(k){super(I.j,I.j,(k=>new K.c(Math.clz32(k.value))),"FlowGraphLeadingZerosBlock",k)}}(0,x.g)("FlowGraphLeadingZerosBlock",sk);class Zk extends l.c{constructor(k){super(I.j,I.j,(k=>new K.c(k.value?31-Math.clz32(k.value&-k.value):32)),"FlowGraphTrailingZerosBlock",k)}}(0,x.g)("FlowGraphTrailingZerosBlock",Zk);class wk extends l.c{constructor(k){super(I.j,I.j,(k=>new K.c(function(k){let h=0;for(;k;)h+=1&k,k>>=1;return h}(k.value))),"FlowGraphOneBitsCounterBlock",k)}}(0,x.g)("FlowGraphOneBitsCounterBlock",wk)},14405:(k,h,o)=>{o.d(h,{b:()=>I});var x=o(14409);class I extends x.c{constructor(k,h,o,x,I,q){super(o,q),this._operation=x,this._className=I,this.a=this.registerDataInput("a",k),this.b=this.registerDataInput("b",h)}_doOperation(k){const h=this.a.getValue(k),o=this.b.getValue(k);return this._operation(h,o)}getClassName(){return this._className}}},14409:(k,h,o)=>{o.d(h,{c:()=>J});var x=o(12961),I=o(12936);const q="cachedOperationValue",Y="cachedExecutionId";class J extends x.b{constructor(k,h){super(h),this.value=this.registerDataOutput("value",k),this.isValid=this.registerDataOutput("isValid",I.h)}_updateOutputs(k){const h=k._getExecutionVariable(this,Y,-1),o=k._getExecutionVariable(this,q,null);if(void 0!==o&&null!==o&&h===k.executionId)this.isValid.setValue(!0,k),this.value.setValue(o,k);else try{const h=this._doOperation(k);if(void 0===h||null===h)return void this.isValid.setValue(!1,k);k._setExecutionVariable(this,q,h),k._setExecutionVariable(this,Y,k.executionId),this.value.setValue(h,k),this.isValid.setValue(!0,k)}catch(x){this.isValid.setValue(!1,k)}}}},14412:(k,h,o)=>{o.d(h,{c:()=>I});var x=o(14409);class I extends x.c{constructor(k,h,o,x,I){super(h,I),this._operation=o,this._className=x,this.a=this.registerDataInput("a",k)}_doOperation(k){return this._operation(this.a.getValue(k))}getClassName(){return this._className}}}}]);