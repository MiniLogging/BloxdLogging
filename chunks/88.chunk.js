"use strict";(self.wx5iyvo7rvn=self.wx5iyvo7rvn||[]).push([[88],{14281:(P,e,n)=>{n.r(e),n.d(e,{FlowGraphAbsBlock:()=>l,FlowGraphAcosBlock:()=>pP,FlowGraphAcoshBlock:()=>AP,FlowGraphAddBlock:()=>Y,FlowGraphAsinBlock:()=>SP,FlowGraphAsinhBlock:()=>qP,FlowGraphAtan2Block:()=>mP,FlowGraphAtanBlock:()=>kP,FlowGraphAtanhBlock:()=>FP,FlowGraphBitwiseAndBlock:()=>iP,FlowGraphBitwiseLeftShiftBlock:()=>bP,FlowGraphBitwiseNotBlock:()=>VP,FlowGraphBitwiseOrBlock:()=>BP,FlowGraphBitwiseRightShiftBlock:()=>TP,FlowGraphBitwiseXorBlock:()=>lP,FlowGraphCeilBlock:()=>N,FlowGraphClampBlock:()=>v,FlowGraphCosBlock:()=>nP,FlowGraphCoshBlock:()=>CP,FlowGraphCubeRootBlock:()=>IP,FlowGraphDegToRadBlock:()=>D,FlowGraphDivideBlock:()=>w,FlowGraphEBlock:()=>I,FlowGraphEqualityBlock:()=>L,FlowGraphExpBlock:()=>YP,FlowGraphFloorBlock:()=>d,FlowGraphFractionBlock:()=>c,FlowGraphGreaterThanBlock:()=>x,FlowGraphGreaterThanOrEqualBlock:()=>M,FlowGraphInfBlock:()=>V,FlowGraphIsInfinityBlock:()=>h,FlowGraphIsNanBlock:()=>K,FlowGraphLeadingZerosBlock:()=>dP,FlowGraphLessThanBlock:()=>E,FlowGraphLessThanOrEqualBlock:()=>X,FlowGraphLog10Block:()=>wP,FlowGraphLog2Block:()=>zP,FlowGraphLogBlock:()=>jP,FlowGraphMathInterpolationBlock:()=>a,FlowGraphMaxBlock:()=>y,FlowGraphMinBlock:()=>g,FlowGraphModuloBlock:()=>G,FlowGraphMultiplyBlock:()=>z,FlowGraphNaNBlock:()=>i,FlowGraphNegationBlock:()=>r,FlowGraphOneBitsCounterBlock:()=>QP,FlowGraphPiBlock:()=>O,FlowGraphPowerBlock:()=>OP,FlowGraphRadToDegBlock:()=>PP,FlowGraphRandomBlock:()=>J,FlowGraphRoundBlock:()=>Q,FlowGraphSaturateBlock:()=>W,FlowGraphSignBlock:()=>b,FlowGraphSinBlock:()=>eP,FlowGraphSinhBlock:()=>tP,FlowGraphSquareRootBlock:()=>JP,FlowGraphSubtractBlock:()=>j,FlowGraphTanBlock:()=>HP,FlowGraphTanhBlock:()=>RP,FlowGraphTrailingZerosBlock:()=>NP,FlowGraphTruncBlock:()=>T});var H=n(11096),S=n(12819),p=n(14283),k=n(14286);class m extends k.c{constructor(P,e,n,H){super(P,H),this._operation=e,this._className=n}_doOperation(P){return this._operation(P)}getClassName(){return this._className}}var t=n(11133),C=n(14293);class R extends k.c{constructor(P,e,n,H,S,p,k){super(H,k),this._operation=S,this._className=p,this.a=this.registerDataInput("a",P),this.b=this.registerDataInput("b",e),this.c=this.registerDataInput("c",n)}_doOperation(P){return this._operation(this.a.getValue(P),this.b.getValue(P),this.c.getValue(P))}getClassName(){return this._className}}var q=n(12812),A=n(12828),F=n(12850);class Y extends p.e{constructor(P){super((0,S.M)(null===P||void 0===P?void 0:P.type),(0,S.M)(null===P||void 0===P?void 0:P.type),(0,S.M)(null===P||void 0===P?void 0:P.type),((P,e)=>this._polymorphicAdd(P,e)),"FlowGraphAddBlock",P)}_polymorphicAdd(P,e){const n=(0,F.j)(P),H=(0,F.j)(e);if((0,F.g)(n,H)||(0,F.d)(n,H)||(0,F.b)(n,H))return P.add(e);if("Quaternion"===n||"Vector4"===H)return new t.Vector4(P.x,P.y,P.z,P.w).addInPlace(e);if("Vector4"===n||"Quaternion"===H)return P.add(e);var S;if(null!==(S=this.config)&&void 0!==S&&S.preventIntegerFloatArithmetic&&typeof P!==typeof e)throw new Error("Cannot add different types of numbers.");return(0,F.q)(P)+(0,F.q)(e)}}(0,H.h)("FlowGraphAddBlock",Y);class j extends p.e{constructor(P){super((0,S.M)(null===P||void 0===P?void 0:P.type),(0,S.M)(null===P||void 0===P?void 0:P.type),(0,S.M)(null===P||void 0===P?void 0:P.type),((P,e)=>this._polymorphicSubtract(P,e)),"FlowGraphSubtractBlock",P)}_polymorphicSubtract(P,e){const n=(0,F.j)(P),H=(0,F.j)(e);if((0,F.g)(n,H)||(0,F.b)(n,H)||(0,F.d)(n,H))return P.be(e);if("Quaternion"===n||"Vector4"===H)return new t.Vector4(P.x,P.y,P.z,P.w).MR(e);if("Vector4"===n||"Quaternion"===H)return P.be(e);var S;if(null!==(S=this.config)&&void 0!==S&&S.preventIntegerFloatArithmetic&&typeof P!==typeof e)throw new Error("Cannot add different types of numbers.");return(0,F.q)(P)-(0,F.q)(e)}}(0,H.h)("FlowGraphSubtractBlock",j);class z extends p.e{constructor(P){super((0,S.M)(null===P||void 0===P?void 0:P.type),(0,S.M)(null===P||void 0===P?void 0:P.type),(0,S.M)(null===P||void 0===P?void 0:P.type),((P,e)=>this._polymorphicMultiply(P,e)),"FlowGraphMultiplyBlock",P)}_polymorphicMultiply(P,e){const n=(0,F.j)(P),H=(0,F.j)(e);if((0,F.g)(n,H)||(0,F.b)(n,H))return P.multiply(e);if("Quaternion"===n||"Vector4"===H)return new t.Vector4(P.x,P.y,P.z,P.w).multiplyInPlace(e);if("Vector4"===n||"Quaternion"===H)return P.multiply(e);if((0,F.d)(n,H)){var S;if(null!==(S=this.config)&&void 0!==S&&S.useMatrixPerComponent){const H=P.m;for(let P=0;P<H.length;P++)H[P]*=e.m[P];return"Matrix2D"===n?new A.e(H):"Matrix3D"===n?new A.f(H):t.Matrix.Qe(H)}return e.multiply(P)}var p;if(null!==(p=this.config)&&void 0!==p&&p.preventIntegerFloatArithmetic&&typeof P!==typeof e)throw new Error("Cannot add different types of numbers.");return(0,F.q)(P)*(0,F.q)(e)}}(0,H.h)("FlowGraphMultiplyBlock",z);class w extends p.e{constructor(P){super((0,S.M)(null===P||void 0===P?void 0:P.type),(0,S.M)(null===P||void 0===P?void 0:P.type),(0,S.M)(null===P||void 0===P?void 0:P.type),((P,e)=>this._polymorphicDivide(P,e)),"FlowGraphDivideBlock",P)}_polymorphicDivide(P,e){const n=(0,F.j)(P),H=(0,F.j)(e);if((0,F.g)(n,H)||(0,F.b)(n,H))return P.divide(e);if("Quaternion"===n||"Quaternion"===H){const n=P.clone();return n.x/=e.x,n.y/=e.y,n.z/=e.z,n.w/=e.w,n}if("Quaternion"===n||"Vector4"===H)return new t.Vector4(P.x,P.y,P.z,P.w).divideInPlace(e);if("Vector4"===n||"Quaternion"===H)return P.divide(e);if((0,F.d)(n,H)){var S;if(null!==(S=this.config)&&void 0!==S&&S.useMatrixPerComponent){const H=P.m;for(let P=0;P<H.length;P++)H[P]/=e.m[P];return"Matrix2D"===n?new A.e(H):"Matrix3D"===n?new A.f(H):t.Matrix.Qe(H)}return P.divide(e)}var p;if(null!==(p=this.config)&&void 0!==p&&p.preventIntegerFloatArithmetic&&typeof P!==typeof e)throw new Error("Cannot add different types of numbers.");return(0,F.q)(P)/(0,F.q)(e)}}(0,H.h)("FlowGraphDivideBlock",w);class J extends m{constructor(P){super(S.r,(P=>this._random(P)),"FlowGraphRandomBlock",P),this.min=this.registerDataInput("min",S.r,(null===P||void 0===P?void 0:P.min)??0),this.max=this.registerDataInput("max",S.r,(null===P||void 0===P?void 0:P.max)??1),null!==P&&void 0!==P&&P.seed&&(this._seed=P.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const P=1e4*Math.sin(this._seed++);return P-Math.floor(P)}return Math.random()}_random(P){const e=this.min.getValue(P),n=this.max.getValue(P);return this._getRandomValue()*(n-e)+e}}(0,H.h)("FlowGraphRandomBlock",J);class I extends m{constructor(P){super(S.r,(()=>Math.E),"FlowGraphEBlock",P)}}(0,H.h)("FlowGraphEBlock",I);class O extends m{constructor(P){super(S.r,(()=>Math.PI),"FlowGraphPIBlock",P)}}(0,H.h)("FlowGraphPIBlock",O);class V extends m{constructor(P){super(S.r,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",P)}}(0,H.h)("FlowGraphInfBlock",V);class i extends m{constructor(P){super(S.r,(()=>Number.NaN),"FlowGraphNaNBlock",P)}}function B(P,e){switch((0,F.j)(P)){case"FlowGraphInteger":return new q.e(e(P.value));case"Vector2":return new t.Vector2(e(P.x),e(P.y));case"Ie":return new t.Ie(e(P.x),e(P.y),e(P.z));case"Vector4":return new t.Vector4(e(P.x),e(P.y),e(P.z),e(P.w));case"Quaternion":return new t.Quaternion(e(P.x),e(P.y),e(P.z),e(P.w));case"Matrix":return t.Matrix.Qe(P.m.map(e));case"Matrix2D":return new A.e(P.m.map(e));case"Matrix3D":return new A.f(P.m.map(e));default:return e(P)}}(0,H.h)("FlowGraphNaNBlock",i);class l extends C.b{constructor(P){super(S.r,S.r,(P=>this._polymorphicAbs(P)),"FlowGraphAbsBlock",P)}_polymorphicAbs(P){return B(P,Math.abs)}}(0,H.h)("FlowGraphAbsBlock",l);class b extends C.b{constructor(P){super(S.r,S.r,(P=>this._polymorphicSign(P)),"FlowGraphSignBlock",P)}_polymorphicSign(P){return B(P,Math.sign)}}(0,H.h)("FlowGraphSignBlock",b);class T extends C.b{constructor(P){super(S.r,S.r,(P=>this._polymorphicTrunc(P)),"FlowGraphTruncBlock",P)}_polymorphicTrunc(P){return B(P,Math.trunc)}}(0,H.h)("FlowGraphTruncBlock",T);class d extends C.b{constructor(P){super(S.r,S.r,(P=>this._polymorphicFloor(P)),"FlowGraphFloorBlock",P)}_polymorphicFloor(P){return B(P,Math.floor)}}(0,H.h)("FlowGraphFloorBlock",d);class N extends C.b{constructor(P){super(S.b,S.b,(P=>this._polymorphicCeiling(P)),"FlowGraphCeilBlock",P)}_polymorphicCeiling(P){return B(P,Math.ceil)}}(0,H.h)("FlowGraphCeilBlock",N);class Q extends C.b{constructor(P){super(S.b,S.b,(P=>this._polymorphicRound(P)),"FlowGraphRoundBlock",P)}_polymorphicRound(P){return B(P,(P=>{var e;return P<0&&null!==(e=this.config)&&void 0!==e&&e.roundHalfAwayFromZero?-Math.round(-P):Math.round(P)}))}}(0,H.h)("FlowGraphRoundBlock",Q);class c extends C.b{constructor(P){super(S.b,S.b,(P=>this._polymorphicFraction(P)),"FlowGraphFractBlock",P)}_polymorphicFraction(P){return B(P,(P=>P-Math.floor(P)))}}(0,H.h)("FlowGraphFractBlock",c);class r extends C.b{constructor(P){super(S.b,S.b,(P=>this._polymorphicNeg(P)),"FlowGraphNegationBlock",P)}_polymorphicNeg(P){return B(P,(P=>-P))}}function o(P,e,n){switch((0,F.j)(P)){case"FlowGraphInteger":return new q.e(n(P.value,e.value));case"Vector2":return new t.Vector2(n(P.x,e.x),n(P.y,e.y));case"Ie":return new t.Ie(n(P.x,e.x),n(P.y,e.y),n(P.z,e.z));case"Vector4":return new t.Vector4(n(P.x,e.x),n(P.y,e.y),n(P.z,e.z),n(P.w,e.w));case"Quaternion":return new t.Quaternion(n(P.x,e.x),n(P.y,e.y),n(P.z,e.z),n(P.w,e.w));case"Matrix":return t.Matrix.Qe(P.m.map(((P,H)=>n(P,e.m[H]))));case"Matrix2D":return new A.e(P.m.map(((P,H)=>n(P,e.m[H]))));case"Matrix3D":return new A.f(P.m.map(((P,H)=>n(P,e.m[H]))));default:return n((0,F.q)(P),(0,F.q)(e))}}(0,H.h)("FlowGraphNegationBlock",r);class G extends p.e{constructor(P){super(S.b,S.b,S.b,((P,e)=>this._polymorphicRemainder(P,e)),"FlowGraphModuloBlock",P)}_polymorphicRemainder(P,e){return o(P,e,((P,e)=>P%e))}}(0,H.h)("FlowGraphModuloBlock",G);class g extends p.e{constructor(P){super(S.b,S.b,S.b,((P,e)=>this._polymorphicMin(P,e)),"FlowGraphMinBlock",P)}_polymorphicMin(P,e){return o(P,e,Math.min)}}(0,H.h)("FlowGraphMinBlock",g);class y extends p.e{constructor(P){super(S.b,S.b,S.b,((P,e)=>this._polymorphicMax(P,e)),"FlowGraphMaxBlock",P)}_polymorphicMax(P,e){return o(P,e,Math.max)}}function f(P,e,n){return Math.min(Math.max(P,Math.min(e,n)),Math.max(e,n))}function Z(P,e,n,H){switch((0,F.j)(P)){case"FlowGraphInteger":return new q.e(H(P.value,e.value,n.value));case"Vector2":return new t.Vector2(H(P.x,e.x,n.x),H(P.y,e.y,n.y));case"Ie":return new t.Ie(H(P.x,e.x,n.x),H(P.y,e.y,n.y),H(P.z,e.z,n.z));case"Vector4":return new t.Vector4(H(P.x,e.x,n.x),H(P.y,e.y,n.y),H(P.z,e.z,n.z),H(P.w,e.w,n.w));case"Quaternion":return new t.Quaternion(H(P.x,e.x,n.x),H(P.y,e.y,n.y),H(P.z,e.z,n.z),H(P.w,e.w,n.w));case"Matrix":return t.Matrix.Qe(P.m.map(((P,S)=>H(P,e.m[S],n.m[S]))));case"Matrix2D":return new A.e(P.m.map(((P,S)=>H(P,e.m[S],n.m[S]))));case"Matrix3D":return new A.f(P.m.map(((P,S)=>H(P,e.m[S],n.m[S]))));default:return H((0,F.q)(P),(0,F.q)(e),(0,F.q)(n))}}(0,H.h)("FlowGraphMaxBlock",y);class v extends R{constructor(P){super(S.b,S.b,S.b,S.b,((P,e,n)=>this._polymorphicClamp(P,e,n)),"FlowGraphClampBlock",P)}_polymorphicClamp(P,e,n){return Z(P,e,n,f)}}function u(P){return Math.min(Math.max(P,0),1)}(0,H.h)("FlowGraphClampBlock",v);class W extends C.b{constructor(P){super(S.b,S.b,(P=>this._polymorphicSaturate(P)),"FlowGraphSaturateBlock",P)}_polymorphicSaturate(P){return B(P,u)}}function U(P,e,n){return(1-n)*P+n*e}(0,H.h)("FlowGraphSaturateBlock",W);class a extends R{constructor(P){super(S.b,S.b,S.b,S.b,((P,e,n)=>this._polymorphicInterpolate(P,e,n)),"FlowGraphMathInterpolationBlock",P)}_polymorphicInterpolate(P,e,n){return Z(P,e,n,U)}}(0,H.h)("FlowGraphMathInterpolationBlock",a);class L extends p.e{constructor(P){super(S.b,S.b,S.d,((P,e)=>this._polymorphicEq(P,e)),"FlowGraphEqualityBlock",P)}_polymorphicEq(P,e){const n=(0,F.j)(P),H=(0,F.j)(e);return typeof P===typeof e&&((0,F.g)(n,H)||(0,F.d)(n,H)||(0,F.b)(n,H)?P.equals(e):P===e)}}function s(P,e,n){if((0,F.t)(P)&&(0,F.t)(e))return n((0,F.q)(P),(0,F.q)(e));throw new Error(`Cannot compare ${P} and ${e}`)}(0,H.h)("FlowGraphEqualityBlock",L);class E extends p.e{constructor(P){super(S.b,S.b,S.d,((P,e)=>this._polymorphicLessThan(P,e)),"FlowGraphLessThanBlock",P)}_polymorphicLessThan(P,e){return s(P,e,((P,e)=>P<e))}}(0,H.h)("FlowGraphLessThanBlock",E);class X extends p.e{constructor(P){super(S.b,S.b,S.d,((P,e)=>this._polymorphicLessThanOrEqual(P,e)),"FlowGraphLessThanOrEqualBlock",P)}_polymorphicLessThanOrEqual(P,e){return s(P,e,((P,e)=>P<=e))}}(0,H.h)("FlowGraphLessThanOrEqualBlock",X);class x extends p.e{constructor(P){super(S.b,S.b,S.d,((P,e)=>this._polymorphicGreaterThan(P,e)),"FlowGraphGreaterThanBlock",P)}_polymorphicGreaterThan(P,e){return s(P,e,((P,e)=>P>e))}}(0,H.h)("FlowGraphGreaterThanBlock",x);class M extends p.e{constructor(P){super(S.b,S.b,S.d,((P,e)=>this._polymorphicGreaterThanOrEqual(P,e)),"FlowGraphGreaterThanOrEqualBlock",P)}_polymorphicGreaterThanOrEqual(P,e){return s(P,e,((P,e)=>P>=e))}}(0,H.h)("FlowGraphGreaterThanOrEqualBlock",M);class K extends C.b{constructor(P){super(S.b,S.d,(P=>this._polymorphicIsNan(P)),"FlowGraphIsNaNBlock",P)}_polymorphicIsNan(P){if((0,F.t)(P,!0))return isNaN((0,F.q)(P));throw new Error(`Cannot get NaN of ${P}`)}}(0,H.h)("FlowGraphIsNaNBlock",K);class h extends C.b{constructor(P){super(S.b,S.d,(P=>this._polymorphicIsInf(P)),"FlowGraphIsInfBlock",P)}_polymorphicIsInf(P){if((0,F.t)(P))return!isFinite((0,F.q)(P));throw new Error(`Cannot get isInf of ${P}`)}}(0,H.h)("FlowGraphIsInfBlock",h);class D extends C.b{constructor(P){super(S.b,S.b,(P=>this._polymorphicDegToRad(P)),"FlowGraphDegToRadBlock",P)}_degToRad(P){return P*Math.PI/180}_polymorphicDegToRad(P){return B(P,this._degToRad)}}(0,H.h)("FlowGraphDegToRadBlock",D);class PP extends C.b{constructor(P){super(S.b,S.b,(P=>this._polymorphicRadToDeg(P)),"FlowGraphRadToDegBlock",P)}_radToDeg(P){return 180*P/Math.PI}_polymorphicRadToDeg(P){return B(P,this._radToDeg)}}(0,H.h)("FlowGraphRadToDegBlock",PP);class eP extends C.b{constructor(P){super(S.r,S.r,(P=>this._polymorphicSin(P)),"FlowGraphSinBlock",P)}_polymorphicSin(P){return B(P,Math.sin)}}class nP extends C.b{constructor(P){super(S.r,S.r,(P=>this._polymorphicCos(P)),"FlowGraphCosBlock",P)}_polymorphicCos(P){return B(P,Math.cos)}}class HP extends C.b{constructor(P){super(S.r,S.r,(P=>this._polymorphicTan(P)),"FlowGraphTanBlock",P)}_polymorphicTan(P){return B(P,Math.tan)}}class SP extends C.b{constructor(P){super(S.r,S.r,(P=>this._polymorphicAsin(P)),"FlowGraphASinBlock",P)}_polymorphicAsin(P){return B(P,Math.asin)}}(0,H.h)("FlowGraphASinBlock",SP);class pP extends C.b{constructor(P){super(S.r,S.r,(P=>this._polymorphicAcos(P)),"FlowGraphACosBlock",P)}_polymorphicAcos(P){return B(P,Math.acos)}}(0,H.h)("FlowGraphACosBlock",pP);class kP extends C.b{constructor(P){super(S.r,S.r,(P=>this._polymorphicAtan(P)),"FlowGraphATanBlock",P)}_polymorphicAtan(P){return B(P,Math.atan)}}(0,H.h)("FlowGraphATanBlock",kP);class mP extends p.e{constructor(P){super(S.b,S.b,S.b,((P,e)=>this._polymorphicAtan2(P,e)),"FlowGraphATan2Block",P)}_polymorphicAtan2(P,e){return o(P,e,Math.atan2)}}(0,H.h)("FlowGraphATan2Block",mP);class tP extends C.b{constructor(P){super(S.b,S.b,(P=>this._polymorphicSinh(P)),"FlowGraphSinhBlock",P)}_polymorphicSinh(P){return B(P,Math.sinh)}}(0,H.h)("FlowGraphSinhBlock",tP);class CP extends C.b{constructor(P){super(S.b,S.b,(P=>this._polymorphicCosh(P)),"FlowGraphCoshBlock",P)}_polymorphicCosh(P){return B(P,Math.cosh)}}(0,H.h)("FlowGraphCoshBlock",CP);class RP extends C.b{constructor(P){super(S.b,S.b,(P=>this._polymorphicTanh(P)),"FlowGraphTanhBlock",P)}_polymorphicTanh(P){return B(P,Math.tanh)}}(0,H.h)("FlowGraphTanhBlock",RP);class qP extends C.b{constructor(P){super(S.b,S.r,(P=>this._polymorphicAsinh(P)),"FlowGraphASinhBlock",P)}_polymorphicAsinh(P){return B(P,Math.asinh)}}(0,H.h)("FlowGraphASinhBlock",qP);class AP extends C.b{constructor(P){super(S.b,S.r,(P=>this._polymorphicAcosh(P)),"FlowGraphACoshBlock",P)}_polymorphicAcosh(P){return B(P,Math.acosh)}}(0,H.h)("FlowGraphACoshBlock",AP);class FP extends C.b{constructor(P){super(S.b,S.r,(P=>this._polymorphicAtanh(P)),"FlowGraphATanhBlock",P)}_polymorphicAtanh(P){return B(P,Math.atanh)}}(0,H.h)("FlowGraphATanhBlock",FP);class YP extends C.b{constructor(P){super(S.b,S.r,(P=>this._polymorphicExp(P)),"FlowGraphExponentialBlock",P)}_polymorphicExp(P){return B(P,Math.exp)}}(0,H.h)("FlowGraphExponentialBlock",YP);class jP extends C.b{constructor(P){super(S.b,S.r,(P=>this._polymorphicLog(P)),"FlowGraphLogBlock",P)}_polymorphicLog(P){return B(P,Math.log)}}(0,H.h)("FlowGraphLogBlock",jP);class zP extends C.b{constructor(P){super(S.b,S.r,(P=>this._polymorphicLog2(P)),"FlowGraphLog2Block",P)}_polymorphicLog2(P){return B(P,Math.log2)}}(0,H.h)("FlowGraphLog2Block",zP);class wP extends C.b{constructor(P){super(S.b,S.r,(P=>this._polymorphicLog10(P)),"FlowGraphLog10Block",P)}_polymorphicLog10(P){return B(P,Math.log10)}}(0,H.h)("FlowGraphLog10Block",wP);class JP extends C.b{constructor(P){super(S.b,S.r,(P=>this._polymorphicSqrt(P)),"FlowGraphSquareRootBlock",P)}_polymorphicSqrt(P){return B(P,Math.sqrt)}}(0,H.h)("FlowGraphSquareRootBlock",JP);class IP extends C.b{constructor(P){super(S.b,S.r,(P=>this._polymorphicCubeRoot(P)),"FlowGraphCubeRootBlock",P)}_polymorphicCubeRoot(P){return B(P,Math.cbrt)}}(0,H.h)("FlowGraphCubeRootBlock",IP);class OP extends p.e{constructor(P){super(S.b,S.r,S.r,((P,e)=>this._polymorphicPow(P,e)),"FlowGraphPowerBlock",P)}_polymorphicPow(P,e){return o(P,e,Math.pow)}}(0,H.h)("FlowGraphPowerBlock",OP);class VP extends C.b{constructor(P){super((0,S.M)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,S.M)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(P=>"boolean"===typeof P?!P:"number"===typeof P?~P:new q.e(~P.value)),"FlowGraphBitwiseNotBlock",P)}}(0,H.h)("FlowGraphBitwiseNotBlock",VP);class iP extends p.e{constructor(P){super((0,S.M)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,S.M)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,S.M)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),((P,e)=>{if("boolean"===typeof P&&"boolean"===typeof e)return P&&e;if("number"===typeof P&&"number"===typeof e)return P&e;if("object"===typeof P&&"object"===typeof e)return new q.e(P.value&e.value);throw new Error(`Cannot perform bitwise AND on ${P} and ${e}`)}),"FlowGraphBitwiseAndBlock",P)}}(0,H.h)("FlowGraphBitwiseAndBlock",iP);class BP extends p.e{constructor(P){super((0,S.M)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,S.M)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,S.M)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),((P,e)=>{if("boolean"===typeof P&&"boolean"===typeof e)return P||e;if("number"===typeof P&&"number"===typeof e)return P|e;if("object"===typeof P&&"object"===typeof e)return new q.e(P.value|e.value);throw new Error(`Cannot perform bitwise OR on ${P} and ${e}`)}),"FlowGraphBitwiseOrBlock",P)}}(0,H.h)("FlowGraphBitwiseOrBlock",BP);class lP extends p.e{constructor(P){super((0,S.M)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,S.M)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,S.M)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),((P,e)=>{if("boolean"===typeof P&&"boolean"===typeof e)return P!==e;if("number"===typeof P&&"number"===typeof e)return P^e;if("object"===typeof P&&"object"===typeof e)return new q.e(P.value^e.value);throw new Error(`Cannot perform bitwise XOR on ${P} and ${e}`)}),"FlowGraphBitwiseXorBlock",P)}}(0,H.h)("FlowGraphBitwiseXorBlock",lP);class bP extends p.e{constructor(P){super(S.e,S.e,S.e,((P,e)=>new q.e(P.value<<e.value)),"FlowGraphBitwiseLeftShiftBlock",P)}}(0,H.h)("FlowGraphBitwiseLeftShiftBlock",bP);class TP extends p.e{constructor(P){super(S.e,S.e,S.e,((P,e)=>new q.e(P.value>>e.value)),"FlowGraphBitwiseRightShiftBlock",P)}}(0,H.h)("FlowGraphBitwiseRightShiftBlock",TP);class dP extends C.b{constructor(P){super(S.e,S.e,(P=>new q.e(Math.clz32(P.value))),"FlowGraphLeadingZerosBlock",P)}}(0,H.h)("FlowGraphLeadingZerosBlock",dP);class NP extends C.b{constructor(P){super(S.e,S.e,(P=>new q.e(P.value?31-Math.clz32(P.value&-P.value):32)),"FlowGraphTrailingZerosBlock",P)}}(0,H.h)("FlowGraphTrailingZerosBlock",NP);class QP extends C.b{constructor(P){super(S.e,S.e,(P=>new q.e(function(P){let e=0;for(;P;)e+=1&P,P>>=1;return e}(P.value))),"FlowGraphOneBitsCounterBlock",P)}}(0,H.h)("FlowGraphOneBitsCounterBlock",QP)},14283:(P,e,n)=>{n.d(e,{e:()=>S});var H=n(14286);class S extends H.c{constructor(P,e,n,H,S,p){super(n,p),this._operation=H,this._className=S,this.a=this.registerDataInput("a",P),this.b=this.registerDataInput("b",e)}_doOperation(P){const e=this.a.getValue(P),n=this.b.getValue(P);return this._operation(e,n)}getClassName(){return this._className}}},14286:(P,e,n)=>{n.d(e,{c:()=>m});var H=n(12841),S=n(12819);const p="cachedOperationValue",k="cachedExecutionId";class m extends H.c{constructor(P,e){super(e),this.value=this.registerDataOutput("value",P),this.isValid=this.registerDataOutput("isValid",S.d)}_updateOutputs(P){const e=P._getExecutionVariable(this,k,-1),n=P._getExecutionVariable(this,p,null);if(void 0!==n&&null!==n&&e===P.executionId)this.isValid.setValue(!0,P),this.value.setValue(n,P);else try{const e=this._doOperation(P);if(void 0===e||null===e)return void this.isValid.setValue(!1,P);P._setExecutionVariable(this,p,e),P._setExecutionVariable(this,k,P.executionId),this.value.setValue(e,P),this.isValid.setValue(!0,P)}catch(H){this.isValid.setValue(!1,P)}}}},14293:(P,e,n)=>{n.d(e,{b:()=>S});var H=n(14286);class S extends H.c{constructor(P,e,n,H,S){super(e,S),this._operation=n,this._className=H,this.a=this.registerDataInput("a",P)}_doOperation(P){return this._operation(this.a.getValue(P))}getClassName(){return this._className}}}}]);