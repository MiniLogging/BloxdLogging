"use strict";(self.h66iwo8dvgq=self.h66iwo8dvgq||[]).push([[88],{15195:(b,X,P)=>{P.r(X),P.d(X,{FlowGraphAbsBlock:()=>v,FlowGraphAcosBlock:()=>db,FlowGraphAcoshBlock:()=>eb,FlowGraphAddBlock:()=>D,FlowGraphAsinBlock:()=>Sb,FlowGraphAsinhBlock:()=>Ob,FlowGraphAtan2Block:()=>ab,FlowGraphAtanBlock:()=>Nb,FlowGraphAtanhBlock:()=>Yb,FlowGraphBitwiseAndBlock:()=>Lb,FlowGraphBitwiseLeftShiftBlock:()=>Ab,FlowGraphBitwiseNotBlock:()=>hb,FlowGraphBitwiseOrBlock:()=>Zb,FlowGraphBitwiseRightShiftBlock:()=>ob,FlowGraphBitwiseXorBlock:()=>vb,FlowGraphCeilBlock:()=>T,FlowGraphClampBlock:()=>U,FlowGraphCosBlock:()=>Pb,FlowGraphCoshBlock:()=>wb,FlowGraphCubeRootBlock:()=>nb,FlowGraphDegToRadBlock:()=>mb,FlowGraphDivideBlock:()=>B,FlowGraphEBlock:()=>n,FlowGraphEqualityBlock:()=>c,FlowGraphExpBlock:()=>Db,FlowGraphFloorBlock:()=>K,FlowGraphFractionBlock:()=>V,FlowGraphGreaterThanBlock:()=>R,FlowGraphGreaterThanOrEqualBlock:()=>r,FlowGraphInfBlock:()=>h,FlowGraphIsInfinityBlock:()=>G,FlowGraphIsNanBlock:()=>I,FlowGraphLeadingZerosBlock:()=>Kb,FlowGraphLessThanBlock:()=>F,FlowGraphLessThanOrEqualBlock:()=>M,FlowGraphLog10Block:()=>Bb,FlowGraphLog2Block:()=>tb,FlowGraphLogBlock:()=>Eb,FlowGraphMathInterpolationBlock:()=>J,FlowGraphMaxBlock:()=>p,FlowGraphMinBlock:()=>C,FlowGraphModuloBlock:()=>H,FlowGraphMultiplyBlock:()=>t,FlowGraphNaNBlock:()=>L,FlowGraphNegationBlock:()=>i,FlowGraphOneBitsCounterBlock:()=>qb,FlowGraphPiBlock:()=>y,FlowGraphPowerBlock:()=>yb,FlowGraphRadToDegBlock:()=>bb,FlowGraphRandomBlock:()=>W,FlowGraphRoundBlock:()=>q,FlowGraphSaturateBlock:()=>j,FlowGraphSignBlock:()=>A,FlowGraphSinBlock:()=>Xb,FlowGraphSinhBlock:()=>ub,FlowGraphSquareRootBlock:()=>Wb,FlowGraphSubtractBlock:()=>E,FlowGraphTanBlock:()=>Qb,FlowGraphTanhBlock:()=>fb,FlowGraphTrailingZerosBlock:()=>Tb,FlowGraphTruncBlock:()=>o});var Q=P(11802),S=P(13631),d=P(15202),N=P(15207);class a extends N.d{constructor(b,X,P,Q){super(b,Q),this._operation=X,this._className=P}_doOperation(b){return this._operation(b)}getClassName(){return this._className}}var u=P(11834),w=P(15213);class f extends N.d{constructor(b,X,P,Q,S,d,N){super(Q,N),this._operation=S,this._className=d,this.a=this.registerDataInput("a",b),this.b=this.registerDataInput("b",X),this.c=this.registerDataInput("c",P)}_doOperation(b){return this._operation(this.a.getValue(b),this.b.getValue(b),this.c.getValue(b))}getClassName(){return this._className}}var O=P(13623),e=P(13633),Y=P(13659);class D extends d.b{constructor(b){super((0,S.H)(null===b||void 0===b?void 0:b.type),(0,S.H)(null===b||void 0===b?void 0:b.type),(0,S.H)(null===b||void 0===b?void 0:b.type),((b,X)=>this._polymorphicAdd(b,X)),"FlowGraphAddBlock",b)}_polymorphicAdd(b,X){const P=(0,Y.i)(b),Q=(0,Y.i)(X);if((0,Y.f)(P,Q)||(0,Y.e)(P,Q)||(0,Y.c)(P,Q))return b.add(X);if("Quaternion"===P||"Vector4"===Q)return new u.Vector4(b.x,b.y,b.z,b.w).addInPlace(X);if("Vector4"===P||"Quaternion"===Q)return b.add(X);var S;if(null!==(S=this.config)&&void 0!==S&&S.preventIntegerFloatArithmetic&&typeof b!==typeof X)throw new Error("Cannot add different types of numbers.");return(0,Y.l)(b)+(0,Y.l)(X)}}(0,Q.h)("FlowGraphAddBlock",D);class E extends d.b{constructor(b){super((0,S.H)(null===b||void 0===b?void 0:b.type),(0,S.H)(null===b||void 0===b?void 0:b.type),(0,S.H)(null===b||void 0===b?void 0:b.type),((b,X)=>this._polymorphicSubtract(b,X)),"FlowGraphSubtractBlock",b)}_polymorphicSubtract(b,X){const P=(0,Y.i)(b),Q=(0,Y.i)(X);if((0,Y.f)(P,Q)||(0,Y.c)(P,Q)||(0,Y.e)(P,Q))return b.BX(X);if("Quaternion"===P||"Vector4"===Q)return new u.Vector4(b.x,b.y,b.z,b.w).fO(X);if("Vector4"===P||"Quaternion"===Q)return b.BX(X);var S;if(null!==(S=this.config)&&void 0!==S&&S.preventIntegerFloatArithmetic&&typeof b!==typeof X)throw new Error("Cannot add different types of numbers.");return(0,Y.l)(b)-(0,Y.l)(X)}}(0,Q.h)("FlowGraphSubtractBlock",E);class t extends d.b{constructor(b){super((0,S.H)(null===b||void 0===b?void 0:b.type),(0,S.H)(null===b||void 0===b?void 0:b.type),(0,S.H)(null===b||void 0===b?void 0:b.type),((b,X)=>this._polymorphicMultiply(b,X)),"FlowGraphMultiplyBlock",b)}_polymorphicMultiply(b,X){const P=(0,Y.i)(b),Q=(0,Y.i)(X);if((0,Y.f)(P,Q)||(0,Y.c)(P,Q))return b.multiply(X);if("Quaternion"===P||"Vector4"===Q)return new u.Vector4(b.x,b.y,b.z,b.w).multiplyInPlace(X);if("Vector4"===P||"Quaternion"===Q)return b.multiply(X);if((0,Y.e)(P,Q)){var S;if(null!==(S=this.config)&&void 0!==S&&S.useMatrixPerComponent){const Q=b.m;for(let b=0;b<Q.length;b++)Q[b]*=X.m[b];return"Matrix2D"===P?new e.d(Q):"Matrix3D"===P?new e.e(Q):u.Matrix.hX(Q)}return X.multiply(b)}var d;if(null!==(d=this.config)&&void 0!==d&&d.preventIntegerFloatArithmetic&&typeof b!==typeof X)throw new Error("Cannot add different types of numbers.");return(0,Y.l)(b)*(0,Y.l)(X)}}(0,Q.h)("FlowGraphMultiplyBlock",t);class B extends d.b{constructor(b){super((0,S.H)(null===b||void 0===b?void 0:b.type),(0,S.H)(null===b||void 0===b?void 0:b.type),(0,S.H)(null===b||void 0===b?void 0:b.type),((b,X)=>this._polymorphicDivide(b,X)),"FlowGraphDivideBlock",b)}_polymorphicDivide(b,X){const P=(0,Y.i)(b),Q=(0,Y.i)(X);if((0,Y.f)(P,Q)||(0,Y.c)(P,Q))return b.divide(X);if("Quaternion"===P||"Quaternion"===Q){const P=b.clone();return P.x/=X.x,P.y/=X.y,P.z/=X.z,P.w/=X.w,P}if("Quaternion"===P||"Vector4"===Q)return new u.Vector4(b.x,b.y,b.z,b.w).divideInPlace(X);if("Vector4"===P||"Quaternion"===Q)return b.divide(X);if((0,Y.e)(P,Q)){var S;if(null!==(S=this.config)&&void 0!==S&&S.useMatrixPerComponent){const Q=b.m;for(let b=0;b<Q.length;b++)Q[b]/=X.m[b];return"Matrix2D"===P?new e.d(Q):"Matrix3D"===P?new e.e(Q):u.Matrix.hX(Q)}return b.divide(X)}var d;if(null!==(d=this.config)&&void 0!==d&&d.preventIntegerFloatArithmetic&&typeof b!==typeof X)throw new Error("Cannot add different types of numbers.");return(0,Y.l)(b)/(0,Y.l)(X)}}(0,Q.h)("FlowGraphDivideBlock",B);class W extends a{constructor(b){super(S.t,(b=>this._random(b)),"FlowGraphRandomBlock",b),this.min=this.registerDataInput("min",S.t,(null===b||void 0===b?void 0:b.min)??0),this.max=this.registerDataInput("max",S.t,(null===b||void 0===b?void 0:b.max)??1),null!==b&&void 0!==b&&b.seed&&(this._seed=b.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const b=1e4*Math.sin(this._seed++);return b-Math.floor(b)}return Math.random()}_random(b){const X=this.min.getValue(b),P=this.max.getValue(b);return this._getRandomValue()*(P-X)+X}}(0,Q.h)("FlowGraphRandomBlock",W);class n extends a{constructor(b){super(S.t,(()=>Math.E),"FlowGraphEBlock",b)}}(0,Q.h)("FlowGraphEBlock",n);class y extends a{constructor(b){super(S.t,(()=>Math.PI),"FlowGraphPIBlock",b)}}(0,Q.h)("FlowGraphPIBlock",y);class h extends a{constructor(b){super(S.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",b)}}(0,Q.h)("FlowGraphInfBlock",h);class L extends a{constructor(b){super(S.t,(()=>Number.NaN),"FlowGraphNaNBlock",b)}}function Z(b,X){switch((0,Y.i)(b)){case"FlowGraphInteger":return new O.c(X(b.value));case"Vector2":return new u.Vector2(X(b.x),X(b.y));case"tX":return new u.tX(X(b.x),X(b.y),X(b.z));case"Vector4":return new u.Vector4(X(b.x),X(b.y),X(b.z),X(b.w));case"Quaternion":return new u.Quaternion(X(b.x),X(b.y),X(b.z),X(b.w));case"Matrix":return u.Matrix.hX(b.m.map(X));case"Matrix2D":return new e.d(b.m.map(X));case"Matrix3D":return new e.e(b.m.map(X));default:return X(b)}}(0,Q.h)("FlowGraphNaNBlock",L);class v extends w.d{constructor(b){super(S.t,S.t,(b=>this._polymorphicAbs(b)),"FlowGraphAbsBlock",b)}_polymorphicAbs(b){return Z(b,Math.abs)}}(0,Q.h)("FlowGraphAbsBlock",v);class A extends w.d{constructor(b){super(S.t,S.t,(b=>this._polymorphicSign(b)),"FlowGraphSignBlock",b)}_polymorphicSign(b){return Z(b,Math.sign)}}(0,Q.h)("FlowGraphSignBlock",A);class o extends w.d{constructor(b){super(S.t,S.t,(b=>this._polymorphicTrunc(b)),"FlowGraphTruncBlock",b)}_polymorphicTrunc(b){return Z(b,Math.trunc)}}(0,Q.h)("FlowGraphTruncBlock",o);class K extends w.d{constructor(b){super(S.t,S.t,(b=>this._polymorphicFloor(b)),"FlowGraphFloorBlock",b)}_polymorphicFloor(b){return Z(b,Math.floor)}}(0,Q.h)("FlowGraphFloorBlock",K);class T extends w.d{constructor(b){super(S.e,S.e,(b=>this._polymorphicCeiling(b)),"FlowGraphCeilBlock",b)}_polymorphicCeiling(b){return Z(b,Math.ceil)}}(0,Q.h)("FlowGraphCeilBlock",T);class q extends w.d{constructor(b){super(S.e,S.e,(b=>this._polymorphicRound(b)),"FlowGraphRoundBlock",b)}_polymorphicRound(b){return Z(b,(b=>{var X;return b<0&&null!==(X=this.config)&&void 0!==X&&X.roundHalfAwayFromZero?-Math.round(-b):Math.round(b)}))}}(0,Q.h)("FlowGraphRoundBlock",q);class V extends w.d{constructor(b){super(S.e,S.e,(b=>this._polymorphicFraction(b)),"FlowGraphFractBlock",b)}_polymorphicFraction(b){return Z(b,(b=>b-Math.floor(b)))}}(0,Q.h)("FlowGraphFractBlock",V);class i extends w.d{constructor(b){super(S.e,S.e,(b=>this._polymorphicNeg(b)),"FlowGraphNegationBlock",b)}_polymorphicNeg(b){return Z(b,(b=>-b))}}function x(b,X,P){switch((0,Y.i)(b)){case"FlowGraphInteger":return new O.c(P(b.value,X.value));case"Vector2":return new u.Vector2(P(b.x,X.x),P(b.y,X.y));case"tX":return new u.tX(P(b.x,X.x),P(b.y,X.y),P(b.z,X.z));case"Vector4":return new u.Vector4(P(b.x,X.x),P(b.y,X.y),P(b.z,X.z),P(b.w,X.w));case"Quaternion":return new u.Quaternion(P(b.x,X.x),P(b.y,X.y),P(b.z,X.z),P(b.w,X.w));case"Matrix":return u.Matrix.hX(b.m.map(((b,Q)=>P(b,X.m[Q]))));case"Matrix2D":return new e.d(b.m.map(((b,Q)=>P(b,X.m[Q]))));case"Matrix3D":return new e.e(b.m.map(((b,Q)=>P(b,X.m[Q]))));default:return P((0,Y.l)(b),(0,Y.l)(X))}}(0,Q.h)("FlowGraphNegationBlock",i);class H extends d.b{constructor(b){super(S.e,S.e,S.e,((b,X)=>this._polymorphicRemainder(b,X)),"FlowGraphModuloBlock",b)}_polymorphicRemainder(b,X){return x(b,X,((b,X)=>b%X))}}(0,Q.h)("FlowGraphModuloBlock",H);class C extends d.b{constructor(b){super(S.e,S.e,S.e,((b,X)=>this._polymorphicMin(b,X)),"FlowGraphMinBlock",b)}_polymorphicMin(b,X){return x(b,X,Math.min)}}(0,Q.h)("FlowGraphMinBlock",C);class p extends d.b{constructor(b){super(S.e,S.e,S.e,((b,X)=>this._polymorphicMax(b,X)),"FlowGraphMaxBlock",b)}_polymorphicMax(b,X){return x(b,X,Math.max)}}function k(b,X,P){return Math.min(Math.max(b,Math.min(X,P)),Math.max(X,P))}function z(b,X,P,Q){switch((0,Y.i)(b)){case"FlowGraphInteger":return new O.c(Q(b.value,X.value,P.value));case"Vector2":return new u.Vector2(Q(b.x,X.x,P.x),Q(b.y,X.y,P.y));case"tX":return new u.tX(Q(b.x,X.x,P.x),Q(b.y,X.y,P.y),Q(b.z,X.z,P.z));case"Vector4":return new u.Vector4(Q(b.x,X.x,P.x),Q(b.y,X.y,P.y),Q(b.z,X.z,P.z),Q(b.w,X.w,P.w));case"Quaternion":return new u.Quaternion(Q(b.x,X.x,P.x),Q(b.y,X.y,P.y),Q(b.z,X.z,P.z),Q(b.w,X.w,P.w));case"Matrix":return u.Matrix.hX(b.m.map(((b,S)=>Q(b,X.m[S],P.m[S]))));case"Matrix2D":return new e.d(b.m.map(((b,S)=>Q(b,X.m[S],P.m[S]))));case"Matrix3D":return new e.e(b.m.map(((b,S)=>Q(b,X.m[S],P.m[S]))));default:return Q((0,Y.l)(b),(0,Y.l)(X),(0,Y.l)(P))}}(0,Q.h)("FlowGraphMaxBlock",p);class U extends f{constructor(b){super(S.e,S.e,S.e,S.e,((b,X,P)=>this._polymorphicClamp(b,X,P)),"FlowGraphClampBlock",b)}_polymorphicClamp(b,X,P){return z(b,X,P,k)}}function g(b){return Math.min(Math.max(b,0),1)}(0,Q.h)("FlowGraphClampBlock",U);class j extends w.d{constructor(b){super(S.e,S.e,(b=>this._polymorphicSaturate(b)),"FlowGraphSaturateBlock",b)}_polymorphicSaturate(b){return Z(b,g)}}function l(b,X,P){return(1-P)*b+P*X}(0,Q.h)("FlowGraphSaturateBlock",j);class J extends f{constructor(b){super(S.e,S.e,S.e,S.e,((b,X,P)=>this._polymorphicInterpolate(b,X,P)),"FlowGraphMathInterpolationBlock",b)}_polymorphicInterpolate(b,X,P){return z(b,X,P,l)}}(0,Q.h)("FlowGraphMathInterpolationBlock",J);class c extends d.b{constructor(b){super(S.e,S.e,S.h,((b,X)=>this._polymorphicEq(b,X)),"FlowGraphEqualityBlock",b)}_polymorphicEq(b,X){const P=(0,Y.i)(b),Q=(0,Y.i)(X);return typeof b===typeof X&&((0,Y.f)(P,Q)||(0,Y.e)(P,Q)||(0,Y.c)(P,Q)?b.equals(X):b===X)}}function s(b,X,P){if((0,Y.m)(b)&&(0,Y.m)(X))return P((0,Y.l)(b),(0,Y.l)(X));throw new Error(`Cannot compare ${b} and ${X}`)}(0,Q.h)("FlowGraphEqualityBlock",c);class F extends d.b{constructor(b){super(S.e,S.e,S.h,((b,X)=>this._polymorphicLessThan(b,X)),"FlowGraphLessThanBlock",b)}_polymorphicLessThan(b,X){return s(b,X,((b,X)=>b<X))}}(0,Q.h)("FlowGraphLessThanBlock",F);class M extends d.b{constructor(b){super(S.e,S.e,S.h,((b,X)=>this._polymorphicLessThanOrEqual(b,X)),"FlowGraphLessThanOrEqualBlock",b)}_polymorphicLessThanOrEqual(b,X){return s(b,X,((b,X)=>b<=X))}}(0,Q.h)("FlowGraphLessThanOrEqualBlock",M);class R extends d.b{constructor(b){super(S.e,S.e,S.h,((b,X)=>this._polymorphicGreaterThan(b,X)),"FlowGraphGreaterThanBlock",b)}_polymorphicGreaterThan(b,X){return s(b,X,((b,X)=>b>X))}}(0,Q.h)("FlowGraphGreaterThanBlock",R);class r extends d.b{constructor(b){super(S.e,S.e,S.h,((b,X)=>this._polymorphicGreaterThanOrEqual(b,X)),"FlowGraphGreaterThanOrEqualBlock",b)}_polymorphicGreaterThanOrEqual(b,X){return s(b,X,((b,X)=>b>=X))}}(0,Q.h)("FlowGraphGreaterThanOrEqualBlock",r);class I extends w.d{constructor(b){super(S.e,S.h,(b=>this._polymorphicIsNan(b)),"FlowGraphIsNaNBlock",b)}_polymorphicIsNan(b){if((0,Y.m)(b,!0))return isNaN((0,Y.l)(b));throw new Error(`Cannot get NaN of ${b}`)}}(0,Q.h)("FlowGraphIsNaNBlock",I);class G extends w.d{constructor(b){super(S.e,S.h,(b=>this._polymorphicIsInf(b)),"FlowGraphIsInfBlock",b)}_polymorphicIsInf(b){if((0,Y.m)(b))return!isFinite((0,Y.l)(b));throw new Error(`Cannot get isInf of ${b}`)}}(0,Q.h)("FlowGraphIsInfBlock",G);class mb extends w.d{constructor(b){super(S.e,S.e,(b=>this._polymorphicDegToRad(b)),"FlowGraphDegToRadBlock",b)}_degToRad(b){return b*Math.PI/180}_polymorphicDegToRad(b){return Z(b,this._degToRad)}}(0,Q.h)("FlowGraphDegToRadBlock",mb);class bb extends w.d{constructor(b){super(S.e,S.e,(b=>this._polymorphicRadToDeg(b)),"FlowGraphRadToDegBlock",b)}_radToDeg(b){return 180*b/Math.PI}_polymorphicRadToDeg(b){return Z(b,this._radToDeg)}}(0,Q.h)("FlowGraphRadToDegBlock",bb);class Xb extends w.d{constructor(b){super(S.t,S.t,(b=>this._polymorphicSin(b)),"FlowGraphSinBlock",b)}_polymorphicSin(b){return Z(b,Math.sin)}}class Pb extends w.d{constructor(b){super(S.t,S.t,(b=>this._polymorphicCos(b)),"FlowGraphCosBlock",b)}_polymorphicCos(b){return Z(b,Math.cos)}}class Qb extends w.d{constructor(b){super(S.t,S.t,(b=>this._polymorphicTan(b)),"FlowGraphTanBlock",b)}_polymorphicTan(b){return Z(b,Math.tan)}}class Sb extends w.d{constructor(b){super(S.t,S.t,(b=>this._polymorphicAsin(b)),"FlowGraphASinBlock",b)}_polymorphicAsin(b){return Z(b,Math.asin)}}(0,Q.h)("FlowGraphASinBlock",Sb);class db extends w.d{constructor(b){super(S.t,S.t,(b=>this._polymorphicAcos(b)),"FlowGraphACosBlock",b)}_polymorphicAcos(b){return Z(b,Math.acos)}}(0,Q.h)("FlowGraphACosBlock",db);class Nb extends w.d{constructor(b){super(S.t,S.t,(b=>this._polymorphicAtan(b)),"FlowGraphATanBlock",b)}_polymorphicAtan(b){return Z(b,Math.atan)}}(0,Q.h)("FlowGraphATanBlock",Nb);class ab extends d.b{constructor(b){super(S.e,S.e,S.e,((b,X)=>this._polymorphicAtan2(b,X)),"FlowGraphATan2Block",b)}_polymorphicAtan2(b,X){return x(b,X,Math.atan2)}}(0,Q.h)("FlowGraphATan2Block",ab);class ub extends w.d{constructor(b){super(S.e,S.e,(b=>this._polymorphicSinh(b)),"FlowGraphSinhBlock",b)}_polymorphicSinh(b){return Z(b,Math.sinh)}}(0,Q.h)("FlowGraphSinhBlock",ub);class wb extends w.d{constructor(b){super(S.e,S.e,(b=>this._polymorphicCosh(b)),"FlowGraphCoshBlock",b)}_polymorphicCosh(b){return Z(b,Math.cosh)}}(0,Q.h)("FlowGraphCoshBlock",wb);class fb extends w.d{constructor(b){super(S.e,S.e,(b=>this._polymorphicTanh(b)),"FlowGraphTanhBlock",b)}_polymorphicTanh(b){return Z(b,Math.tanh)}}(0,Q.h)("FlowGraphTanhBlock",fb);class Ob extends w.d{constructor(b){super(S.e,S.t,(b=>this._polymorphicAsinh(b)),"FlowGraphASinhBlock",b)}_polymorphicAsinh(b){return Z(b,Math.asinh)}}(0,Q.h)("FlowGraphASinhBlock",Ob);class eb extends w.d{constructor(b){super(S.e,S.t,(b=>this._polymorphicAcosh(b)),"FlowGraphACoshBlock",b)}_polymorphicAcosh(b){return Z(b,Math.acosh)}}(0,Q.h)("FlowGraphACoshBlock",eb);class Yb extends w.d{constructor(b){super(S.e,S.t,(b=>this._polymorphicAtanh(b)),"FlowGraphATanhBlock",b)}_polymorphicAtanh(b){return Z(b,Math.atanh)}}(0,Q.h)("FlowGraphATanhBlock",Yb);class Db extends w.d{constructor(b){super(S.e,S.t,(b=>this._polymorphicExp(b)),"FlowGraphExponentialBlock",b)}_polymorphicExp(b){return Z(b,Math.exp)}}(0,Q.h)("FlowGraphExponentialBlock",Db);class Eb extends w.d{constructor(b){super(S.e,S.t,(b=>this._polymorphicLog(b)),"FlowGraphLogBlock",b)}_polymorphicLog(b){return Z(b,Math.log)}}(0,Q.h)("FlowGraphLogBlock",Eb);class tb extends w.d{constructor(b){super(S.e,S.t,(b=>this._polymorphicLog2(b)),"FlowGraphLog2Block",b)}_polymorphicLog2(b){return Z(b,Math.log2)}}(0,Q.h)("FlowGraphLog2Block",tb);class Bb extends w.d{constructor(b){super(S.e,S.t,(b=>this._polymorphicLog10(b)),"FlowGraphLog10Block",b)}_polymorphicLog10(b){return Z(b,Math.log10)}}(0,Q.h)("FlowGraphLog10Block",Bb);class Wb extends w.d{constructor(b){super(S.e,S.t,(b=>this._polymorphicSqrt(b)),"FlowGraphSquareRootBlock",b)}_polymorphicSqrt(b){return Z(b,Math.sqrt)}}(0,Q.h)("FlowGraphSquareRootBlock",Wb);class nb extends w.d{constructor(b){super(S.e,S.t,(b=>this._polymorphicCubeRoot(b)),"FlowGraphCubeRootBlock",b)}_polymorphicCubeRoot(b){return Z(b,Math.cbrt)}}(0,Q.h)("FlowGraphCubeRootBlock",nb);class yb extends d.b{constructor(b){super(S.e,S.t,S.t,((b,X)=>this._polymorphicPow(b,X)),"FlowGraphPowerBlock",b)}_polymorphicPow(b,X){return x(b,X,Math.pow)}}(0,Q.h)("FlowGraphPowerBlock",yb);class hb extends w.d{constructor(b){super((0,S.H)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,S.H)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(b=>"boolean"===typeof b?!b:"number"===typeof b?~b:new O.c(~b.value)),"FlowGraphBitwiseNotBlock",b)}}(0,Q.h)("FlowGraphBitwiseNotBlock",hb);class Lb extends d.b{constructor(b){super((0,S.H)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,S.H)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,S.H)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),((b,X)=>{if("boolean"===typeof b&&"boolean"===typeof X)return b&&X;if("number"===typeof b&&"number"===typeof X)return b&X;if("object"===typeof b&&"object"===typeof X)return new O.c(b.value&X.value);throw new Error(`Cannot perform bitwise AND on ${b} and ${X}`)}),"FlowGraphBitwiseAndBlock",b)}}(0,Q.h)("FlowGraphBitwiseAndBlock",Lb);class Zb extends d.b{constructor(b){super((0,S.H)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,S.H)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,S.H)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),((b,X)=>{if("boolean"===typeof b&&"boolean"===typeof X)return b||X;if("number"===typeof b&&"number"===typeof X)return b|X;if("object"===typeof b&&"object"===typeof X)return new O.c(b.value|X.value);throw new Error(`Cannot perform bitwise OR on ${b} and ${X}`)}),"FlowGraphBitwiseOrBlock",b)}}(0,Q.h)("FlowGraphBitwiseOrBlock",Zb);class vb extends d.b{constructor(b){super((0,S.H)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,S.H)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,S.H)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),((b,X)=>{if("boolean"===typeof b&&"boolean"===typeof X)return b!==X;if("number"===typeof b&&"number"===typeof X)return b^X;if("object"===typeof b&&"object"===typeof X)return new O.c(b.value^X.value);throw new Error(`Cannot perform bitwise XOR on ${b} and ${X}`)}),"FlowGraphBitwiseXorBlock",b)}}(0,Q.h)("FlowGraphBitwiseXorBlock",vb);class Ab extends d.b{constructor(b){super(S.i,S.i,S.i,((b,X)=>new O.c(b.value<<X.value)),"FlowGraphBitwiseLeftShiftBlock",b)}}(0,Q.h)("FlowGraphBitwiseLeftShiftBlock",Ab);class ob extends d.b{constructor(b){super(S.i,S.i,S.i,((b,X)=>new O.c(b.value>>X.value)),"FlowGraphBitwiseRightShiftBlock",b)}}(0,Q.h)("FlowGraphBitwiseRightShiftBlock",ob);class Kb extends w.d{constructor(b){super(S.i,S.i,(b=>new O.c(Math.clz32(b.value))),"FlowGraphLeadingZerosBlock",b)}}(0,Q.h)("FlowGraphLeadingZerosBlock",Kb);class Tb extends w.d{constructor(b){super(S.i,S.i,(b=>new O.c(b.value?31-Math.clz32(b.value&-b.value):32)),"FlowGraphTrailingZerosBlock",b)}}(0,Q.h)("FlowGraphTrailingZerosBlock",Tb);class qb extends w.d{constructor(b){super(S.i,S.i,(b=>new O.c(function(b){let X=0;for(;b;)X+=1&b,b>>=1;return X}(b.value))),"FlowGraphOneBitsCounterBlock",b)}}(0,Q.h)("FlowGraphOneBitsCounterBlock",qb)},15202:(b,X,P)=>{P.d(X,{b:()=>S});var Q=P(15207);class S extends Q.d{constructor(b,X,P,Q,S,d){super(P,d),this._operation=Q,this._className=S,this.a=this.registerDataInput("a",b),this.b=this.registerDataInput("b",X)}_doOperation(b){const X=this.a.getValue(b),P=this.b.getValue(b);return this._operation(X,P)}getClassName(){return this._className}}},15207:(b,X,P)=>{P.d(X,{d:()=>a});var Q=P(13647),S=P(13631);const d="cachedOperationValue",N="cachedExecutionId";class a extends Q.c{constructor(b,X){super(X),this.value=this.registerDataOutput("value",b),this.isValid=this.registerDataOutput("isValid",S.h)}_updateOutputs(b){const X=b._getExecutionVariable(this,N,-1),P=b._getExecutionVariable(this,d,null);if(void 0!==P&&null!==P&&X===b.executionId)this.isValid.setValue(!0,b),this.value.setValue(P,b);else try{const X=this._doOperation(b);if(void 0===X||null===X)return void this.isValid.setValue(!1,b);b._setExecutionVariable(this,d,X),b._setExecutionVariable(this,N,b.executionId),this.value.setValue(X,b),this.isValid.setValue(!0,b)}catch(Q){this.isValid.setValue(!1,b)}}}},15213:(b,X,P)=>{P.d(X,{d:()=>S});var Q=P(15207);class S extends Q.d{constructor(b,X,P,Q,S){super(X,S),this._operation=P,this._className=Q,this.a=this.registerDataInput("a",b)}_doOperation(b){return this._operation(this.a.getValue(b))}getClassName(){return this._className}}}}]);