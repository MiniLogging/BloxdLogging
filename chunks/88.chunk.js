"use strict";(self.z22hkk7o33f=self.z22hkk7o33f||[]).push([[88],{15658:(U,G,C)=>{C.r(G),C.d(G,{FlowGraphAbsBlock:()=>S,FlowGraphAcosBlock:()=>lU,FlowGraphAcoshBlock:()=>DU,FlowGraphAddBlock:()=>V,FlowGraphAsinBlock:()=>XU,FlowGraphAsinhBlock:()=>TU,FlowGraphAtan2Block:()=>EU,FlowGraphAtanBlock:()=>tU,FlowGraphAtanhBlock:()=>yU,FlowGraphBitwiseAndBlock:()=>oU,FlowGraphBitwiseLeftShiftBlock:()=>vU,FlowGraphBitwiseNotBlock:()=>bU,FlowGraphBitwiseOrBlock:()=>wU,FlowGraphBitwiseRightShiftBlock:()=>uU,FlowGraphBitwiseXorBlock:()=>SU,FlowGraphCeilBlock:()=>g,FlowGraphClampBlock:()=>M,FlowGraphCosBlock:()=>CU,FlowGraphCoshBlock:()=>PU,FlowGraphCubeRootBlock:()=>hU,FlowGraphDegToRadBlock:()=>J,FlowGraphDivideBlock:()=>H,FlowGraphEBlock:()=>h,FlowGraphEqualityBlock:()=>Y,FlowGraphExpBlock:()=>VU,FlowGraphFloorBlock:()=>d,FlowGraphFractionBlock:()=>F,FlowGraphGreaterThanBlock:()=>R,FlowGraphGreaterThanOrEqualBlock:()=>W,FlowGraphInfBlock:()=>b,FlowGraphIsInfinityBlock:()=>r,FlowGraphIsNanBlock:()=>f,FlowGraphLeadingZerosBlock:()=>dU,FlowGraphLessThanBlock:()=>i,FlowGraphLessThanOrEqualBlock:()=>c,FlowGraphLog10Block:()=>HU,FlowGraphLog2Block:()=>IU,FlowGraphLogBlock:()=>pU,FlowGraphMathInterpolationBlock:()=>A,FlowGraphMaxBlock:()=>Q,FlowGraphMinBlock:()=>n,FlowGraphModuloBlock:()=>k,FlowGraphMultiplyBlock:()=>I,FlowGraphNaNBlock:()=>o,FlowGraphNegationBlock:()=>q,FlowGraphOneBitsCounterBlock:()=>ZU,FlowGraphPiBlock:()=>N,FlowGraphPowerBlock:()=>NU,FlowGraphRadToDegBlock:()=>UU,FlowGraphRandomBlock:()=>x,FlowGraphRoundBlock:()=>Z,FlowGraphSaturateBlock:()=>s,FlowGraphSignBlock:()=>v,FlowGraphSinBlock:()=>GU,FlowGraphSinhBlock:()=>KU,FlowGraphSquareRootBlock:()=>xU,FlowGraphSubtractBlock:()=>p,FlowGraphTanBlock:()=>LU,FlowGraphTanhBlock:()=>OU,FlowGraphTrailingZerosBlock:()=>gU,FlowGraphTruncBlock:()=>u});var L=C(12850),X=C(14134),l=C(15666),t=C(15668);class E extends t.c{constructor(U,G,C,L){super(U,L),this._operation=G,this._className=C}_doOperation(U){return this._operation(U)}getClassName(){return this._className}}var K=C(12896),P=C(15674);class O extends t.c{constructor(U,G,C,L,X,l,t){super(L,t),this._operation=X,this._className=l,this.a=this.registerDataInput("a",U),this.b=this.registerDataInput("b",G),this.c=this.registerDataInput("c",C)}_doOperation(U){return this._operation(this.a.getValue(U),this.b.getValue(U),this.c.getValue(U))}getClassName(){return this._className}}var T=C(14130),D=C(14137),y=C(14166);class V extends l.d{constructor(U){super((0,X.V)(null===U||void 0===U?void 0:U.type),(0,X.V)(null===U||void 0===U?void 0:U.type),(0,X.V)(null===U||void 0===U?void 0:U.type),((U,G)=>this._polymorphicAdd(U,G)),"FlowGraphAddBlock",U)}_polymorphicAdd(U,G){const C=(0,y.g)(U),L=(0,y.g)(G);if((0,y.f)(C,L)||(0,y.d)(C,L)||(0,y.b)(C,L))return U.add(G);if("Quaternion"===C||"Vector4"===L)return new K.Vector4(U.x,U.y,U.z,U.w).addInPlace(G);if("Vector4"===C||"Quaternion"===L)return U.add(G);var X;if(null!==(X=this.config)&&void 0!==X&&X.preventIntegerFloatArithmetic&&typeof U!==typeof G)throw new Error("Cannot add different types of numbers.");return(0,y.m)(U)+(0,y.m)(G)}}(0,L.e)("FlowGraphAddBlock",V);class p extends l.d{constructor(U){super((0,X.V)(null===U||void 0===U?void 0:U.type),(0,X.V)(null===U||void 0===U?void 0:U.type),(0,X.V)(null===U||void 0===U?void 0:U.type),((U,G)=>this._polymorphicSubtract(U,G)),"FlowGraphSubtractBlock",U)}_polymorphicSubtract(U,G){const C=(0,y.g)(U),L=(0,y.g)(G);if((0,y.f)(C,L)||(0,y.b)(C,L)||(0,y.d)(C,L))return U.IG(G);if("Quaternion"===C||"Vector4"===L)return new K.Vector4(U.x,U.y,U.z,U.w).uT(G);if("Vector4"===C||"Quaternion"===L)return U.IG(G);var X;if(null!==(X=this.config)&&void 0!==X&&X.preventIntegerFloatArithmetic&&typeof U!==typeof G)throw new Error("Cannot add different types of numbers.");return(0,y.m)(U)-(0,y.m)(G)}}(0,L.e)("FlowGraphSubtractBlock",p);class I extends l.d{constructor(U){super((0,X.V)(null===U||void 0===U?void 0:U.type),(0,X.V)(null===U||void 0===U?void 0:U.type),(0,X.V)(null===U||void 0===U?void 0:U.type),((U,G)=>this._polymorphicMultiply(U,G)),"FlowGraphMultiplyBlock",U)}_polymorphicMultiply(U,G){const C=(0,y.g)(U),L=(0,y.g)(G);if((0,y.f)(C,L)||(0,y.b)(C,L))return U.multiply(G);if("Quaternion"===C||"Vector4"===L)return new K.Vector4(U.x,U.y,U.z,U.w).multiplyInPlace(G);if("Vector4"===C||"Quaternion"===L)return U.multiply(G);if((0,y.d)(C,L)){var X;if(null!==(X=this.config)&&void 0!==X&&X.useMatrixPerComponent){const L=U.m;for(let U=0;U<L.length;U++)L[U]*=G.m[U];return"Matrix2D"===C?new D.e(L):"Matrix3D"===C?new D.f(L):K.Matrix.NG(L)}return G.multiply(U)}var l;if(null!==(l=this.config)&&void 0!==l&&l.preventIntegerFloatArithmetic&&typeof U!==typeof G)throw new Error("Cannot add different types of numbers.");return(0,y.m)(U)*(0,y.m)(G)}}(0,L.e)("FlowGraphMultiplyBlock",I);class H extends l.d{constructor(U){super((0,X.V)(null===U||void 0===U?void 0:U.type),(0,X.V)(null===U||void 0===U?void 0:U.type),(0,X.V)(null===U||void 0===U?void 0:U.type),((U,G)=>this._polymorphicDivide(U,G)),"FlowGraphDivideBlock",U)}_polymorphicDivide(U,G){const C=(0,y.g)(U),L=(0,y.g)(G);if((0,y.f)(C,L)||(0,y.b)(C,L))return U.divide(G);if("Quaternion"===C||"Quaternion"===L){const C=U.clone();return C.x/=G.x,C.y/=G.y,C.z/=G.z,C.w/=G.w,C}if("Quaternion"===C||"Vector4"===L)return new K.Vector4(U.x,U.y,U.z,U.w).divideInPlace(G);if("Vector4"===C||"Quaternion"===L)return U.divide(G);if((0,y.d)(C,L)){var X;if(null!==(X=this.config)&&void 0!==X&&X.useMatrixPerComponent){const L=U.m;for(let U=0;U<L.length;U++)L[U]/=G.m[U];return"Matrix2D"===C?new D.e(L):"Matrix3D"===C?new D.f(L):K.Matrix.NG(L)}return U.divide(G)}var l;if(null!==(l=this.config)&&void 0!==l&&l.preventIntegerFloatArithmetic&&typeof U!==typeof G)throw new Error("Cannot add different types of numbers.");return(0,y.m)(U)/(0,y.m)(G)}}(0,L.e)("FlowGraphDivideBlock",H);class x extends E{constructor(U){var G,C;super(X.y,(U=>this._random(U)),"FlowGraphRandomBlock",U),this.min=this.registerDataInput("min",X.y,null!==(G=null===U||void 0===U?void 0:U.min)&&void 0!==G?G:0),this.max=this.registerDataInput("max",X.y,null!==(C=null===U||void 0===U?void 0:U.max)&&void 0!==C?C:1),null!==U&&void 0!==U&&U.seed&&(this._seed=U.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const U=1e4*Math.sin(this._seed++);return U-Math.floor(U)}return Math.random()}_random(U){const G=this.min.getValue(U),C=this.max.getValue(U);return this._getRandomValue()*(C-G)+G}}(0,L.e)("FlowGraphRandomBlock",x);class h extends E{constructor(U){super(X.y,(()=>Math.E),"FlowGraphEBlock",U)}}(0,L.e)("FlowGraphEBlock",h);class N extends E{constructor(U){super(X.y,(()=>Math.PI),"FlowGraphPIBlock",U)}}(0,L.e)("FlowGraphPIBlock",N);class b extends E{constructor(U){super(X.y,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",U)}}(0,L.e)("FlowGraphInfBlock",b);class o extends E{constructor(U){super(X.y,(()=>Number.NaN),"FlowGraphNaNBlock",U)}}function w(U,G){switch((0,y.g)(U)){case"FlowGraphInteger":return new T.c(G(U.value));case"Vector2":return new K.Vector2(G(U.x),G(U.y));case"pG":return new K.pG(G(U.x),G(U.y),G(U.z));case"Vector4":return new K.Vector4(G(U.x),G(U.y),G(U.z),G(U.w));case"Quaternion":return new K.Quaternion(G(U.x),G(U.y),G(U.z),G(U.w));case"Matrix":return K.Matrix.NG(U.m.map(G));case"Matrix2D":return new D.e(U.m.map(G));case"Matrix3D":return new D.f(U.m.map(G));default:return G(U)}}(0,L.e)("FlowGraphNaNBlock",o);class S extends P.b{constructor(U){super(X.y,X.y,(U=>this._polymorphicAbs(U)),"FlowGraphAbsBlock",U)}_polymorphicAbs(U){return w(U,Math.abs)}}(0,L.e)("FlowGraphAbsBlock",S);class v extends P.b{constructor(U){super(X.y,X.y,(U=>this._polymorphicSign(U)),"FlowGraphSignBlock",U)}_polymorphicSign(U){return w(U,Math.sign)}}(0,L.e)("FlowGraphSignBlock",v);class u extends P.b{constructor(U){super(X.y,X.y,(U=>this._polymorphicTrunc(U)),"FlowGraphTruncBlock",U)}_polymorphicTrunc(U){return w(U,Math.trunc)}}(0,L.e)("FlowGraphTruncBlock",u);class d extends P.b{constructor(U){super(X.y,X.y,(U=>this._polymorphicFloor(U)),"FlowGraphFloorBlock",U)}_polymorphicFloor(U){return w(U,Math.floor)}}(0,L.e)("FlowGraphFloorBlock",d);class g extends P.b{constructor(U){super(X.c,X.c,(U=>this._polymorphicCeiling(U)),"FlowGraphCeilBlock",U)}_polymorphicCeiling(U){return w(U,Math.ceil)}}(0,L.e)("FlowGraphCeilBlock",g);class Z extends P.b{constructor(U){super(X.c,X.c,(U=>this._polymorphicRound(U)),"FlowGraphRoundBlock",U)}_polymorphicRound(U){return w(U,(U=>{var G;return U<0&&null!==(G=this.config)&&void 0!==G&&G.roundHalfAwayFromZero?-Math.round(-U):Math.round(U)}))}}(0,L.e)("FlowGraphRoundBlock",Z);class F extends P.b{constructor(U){super(X.c,X.c,(U=>this._polymorphicFraction(U)),"FlowGraphFractBlock",U)}_polymorphicFraction(U){return w(U,(U=>U-Math.floor(U)))}}(0,L.e)("FlowGraphFractBlock",F);class q extends P.b{constructor(U){super(X.c,X.c,(U=>this._polymorphicNeg(U)),"FlowGraphNegationBlock",U)}_polymorphicNeg(U){return w(U,(U=>-U))}}function a(U,G,C){switch((0,y.g)(U)){case"FlowGraphInteger":return new T.c(C(U.value,G.value));case"Vector2":return new K.Vector2(C(U.x,G.x),C(U.y,G.y));case"pG":return new K.pG(C(U.x,G.x),C(U.y,G.y),C(U.z,G.z));case"Vector4":return new K.Vector4(C(U.x,G.x),C(U.y,G.y),C(U.z,G.z),C(U.w,G.w));case"Quaternion":return new K.Quaternion(C(U.x,G.x),C(U.y,G.y),C(U.z,G.z),C(U.w,G.w));case"Matrix":return K.Matrix.NG(U.m.map(((U,L)=>C(U,G.m[L]))));case"Matrix2D":return new D.e(U.m.map(((U,L)=>C(U,G.m[L]))));case"Matrix3D":return new D.f(U.m.map(((U,L)=>C(U,G.m[L]))));default:return C((0,y.m)(U),(0,y.m)(G))}}(0,L.e)("FlowGraphNegationBlock",q);class k extends l.d{constructor(U){super(X.c,X.c,X.c,((U,G)=>this._polymorphicRemainder(U,G)),"FlowGraphModuloBlock",U)}_polymorphicRemainder(U,G){return a(U,G,((U,G)=>U%G))}}(0,L.e)("FlowGraphModuloBlock",k);class n extends l.d{constructor(U){super(X.c,X.c,X.c,((U,G)=>this._polymorphicMin(U,G)),"FlowGraphMinBlock",U)}_polymorphicMin(U,G){return a(U,G,Math.min)}}(0,L.e)("FlowGraphMinBlock",n);class Q extends l.d{constructor(U){super(X.c,X.c,X.c,((U,G)=>this._polymorphicMax(U,G)),"FlowGraphMaxBlock",U)}_polymorphicMax(U,G){return a(U,G,Math.max)}}function mU(U,G,C){return Math.min(Math.max(U,Math.min(G,C)),Math.max(G,C))}function B(U,G,C,L){switch((0,y.g)(U)){case"FlowGraphInteger":return new T.c(L(U.value,G.value,C.value));case"Vector2":return new K.Vector2(L(U.x,G.x,C.x),L(U.y,G.y,C.y));case"pG":return new K.pG(L(U.x,G.x,C.x),L(U.y,G.y,C.y),L(U.z,G.z,C.z));case"Vector4":return new K.Vector4(L(U.x,G.x,C.x),L(U.y,G.y,C.y),L(U.z,G.z,C.z),L(U.w,G.w,C.w));case"Quaternion":return new K.Quaternion(L(U.x,G.x,C.x),L(U.y,G.y,C.y),L(U.z,G.z,C.z),L(U.w,G.w,C.w));case"Matrix":return K.Matrix.NG(U.m.map(((U,X)=>L(U,G.m[X],C.m[X]))));case"Matrix2D":return new D.e(U.m.map(((U,X)=>L(U,G.m[X],C.m[X]))));case"Matrix3D":return new D.f(U.m.map(((U,X)=>L(U,G.m[X],C.m[X]))));default:return L((0,y.m)(U),(0,y.m)(G),(0,y.m)(C))}}(0,L.e)("FlowGraphMaxBlock",Q);class M extends O{constructor(U){super(X.c,X.c,X.c,X.c,((U,G,C)=>this._polymorphicClamp(U,G,C)),"FlowGraphClampBlock",U)}_polymorphicClamp(U,G,C){return B(U,G,C,mU)}}function z(U){return Math.min(Math.max(U,0),1)}(0,L.e)("FlowGraphClampBlock",M);class s extends P.b{constructor(U){super(X.c,X.c,(U=>this._polymorphicSaturate(U)),"FlowGraphSaturateBlock",U)}_polymorphicSaturate(U){return w(U,z)}}function j(U,G,C){return(1-C)*U+C*G}(0,L.e)("FlowGraphSaturateBlock",s);class A extends O{constructor(U){super(X.c,X.c,X.c,X.c,((U,G,C)=>this._polymorphicInterpolate(U,G,C)),"FlowGraphMathInterpolationBlock",U)}_polymorphicInterpolate(U,G,C){return B(U,G,C,j)}}(0,L.e)("FlowGraphMathInterpolationBlock",A);class Y extends l.d{constructor(U){super(X.c,X.c,X.g,((U,G)=>this._polymorphicEq(U,G)),"FlowGraphEqualityBlock",U)}_polymorphicEq(U,G){const C=(0,y.g)(U),L=(0,y.g)(G);return typeof U===typeof G&&((0,y.f)(C,L)||(0,y.d)(C,L)||(0,y.b)(C,L)?U.equals(G):U===G)}}function e(U,G,C){if((0,y.n)(U)&&(0,y.n)(G))return C((0,y.m)(U),(0,y.m)(G));throw new Error("Cannot compare ".concat(U," and ").concat(G))}(0,L.e)("FlowGraphEqualityBlock",Y);class i extends l.d{constructor(U){super(X.c,X.c,X.g,((U,G)=>this._polymorphicLessThan(U,G)),"FlowGraphLessThanBlock",U)}_polymorphicLessThan(U,G){return e(U,G,((U,G)=>U<G))}}(0,L.e)("FlowGraphLessThanBlock",i);class c extends l.d{constructor(U){super(X.c,X.c,X.g,((U,G)=>this._polymorphicLessThanOrEqual(U,G)),"FlowGraphLessThanOrEqualBlock",U)}_polymorphicLessThanOrEqual(U,G){return e(U,G,((U,G)=>U<=G))}}(0,L.e)("FlowGraphLessThanOrEqualBlock",c);class R extends l.d{constructor(U){super(X.c,X.c,X.g,((U,G)=>this._polymorphicGreaterThan(U,G)),"FlowGraphGreaterThanBlock",U)}_polymorphicGreaterThan(U,G){return e(U,G,((U,G)=>U>G))}}(0,L.e)("FlowGraphGreaterThanBlock",R);class W extends l.d{constructor(U){super(X.c,X.c,X.g,((U,G)=>this._polymorphicGreaterThanOrEqual(U,G)),"FlowGraphGreaterThanOrEqualBlock",U)}_polymorphicGreaterThanOrEqual(U,G){return e(U,G,((U,G)=>U>=G))}}(0,L.e)("FlowGraphGreaterThanOrEqualBlock",W);class f extends P.b{constructor(U){super(X.c,X.g,(U=>this._polymorphicIsNan(U)),"FlowGraphIsNaNBlock",U)}_polymorphicIsNan(U){if((0,y.n)(U,!0))return isNaN((0,y.m)(U));throw new Error("Cannot get NaN of ".concat(U))}}(0,L.e)("FlowGraphIsNaNBlock",f);class r extends P.b{constructor(U){super(X.c,X.g,(U=>this._polymorphicIsInf(U)),"FlowGraphIsInfBlock",U)}_polymorphicIsInf(U){if((0,y.n)(U))return!isFinite((0,y.m)(U));throw new Error("Cannot get isInf of ".concat(U))}}(0,L.e)("FlowGraphIsInfBlock",r);class J extends P.b{constructor(U){super(X.c,X.c,(U=>this._polymorphicDegToRad(U)),"FlowGraphDegToRadBlock",U)}_degToRad(U){return U*Math.PI/180}_polymorphicDegToRad(U){return w(U,this._degToRad)}}(0,L.e)("FlowGraphDegToRadBlock",J);class UU extends P.b{constructor(U){super(X.c,X.c,(U=>this._polymorphicRadToDeg(U)),"FlowGraphRadToDegBlock",U)}_radToDeg(U){return 180*U/Math.PI}_polymorphicRadToDeg(U){return w(U,this._radToDeg)}}(0,L.e)("FlowGraphRadToDegBlock",UU);class GU extends P.b{constructor(U){super(X.y,X.y,(U=>this._polymorphicSin(U)),"FlowGraphSinBlock",U)}_polymorphicSin(U){return w(U,Math.sin)}}class CU extends P.b{constructor(U){super(X.y,X.y,(U=>this._polymorphicCos(U)),"FlowGraphCosBlock",U)}_polymorphicCos(U){return w(U,Math.cos)}}class LU extends P.b{constructor(U){super(X.y,X.y,(U=>this._polymorphicTan(U)),"FlowGraphTanBlock",U)}_polymorphicTan(U){return w(U,Math.tan)}}class XU extends P.b{constructor(U){super(X.y,X.y,(U=>this._polymorphicAsin(U)),"FlowGraphASinBlock",U)}_polymorphicAsin(U){return w(U,Math.asin)}}(0,L.e)("FlowGraphASinBlock",XU);class lU extends P.b{constructor(U){super(X.y,X.y,(U=>this._polymorphicAcos(U)),"FlowGraphACosBlock",U)}_polymorphicAcos(U){return w(U,Math.acos)}}(0,L.e)("FlowGraphACosBlock",lU);class tU extends P.b{constructor(U){super(X.y,X.y,(U=>this._polymorphicAtan(U)),"FlowGraphATanBlock",U)}_polymorphicAtan(U){return w(U,Math.atan)}}(0,L.e)("FlowGraphATanBlock",tU);class EU extends l.d{constructor(U){super(X.c,X.c,X.c,((U,G)=>this._polymorphicAtan2(U,G)),"FlowGraphATan2Block",U)}_polymorphicAtan2(U,G){return a(U,G,Math.atan2)}}(0,L.e)("FlowGraphATan2Block",EU);class KU extends P.b{constructor(U){super(X.c,X.c,(U=>this._polymorphicSinh(U)),"FlowGraphSinhBlock",U)}_polymorphicSinh(U){return w(U,Math.sinh)}}(0,L.e)("FlowGraphSinhBlock",KU);class PU extends P.b{constructor(U){super(X.c,X.c,(U=>this._polymorphicCosh(U)),"FlowGraphCoshBlock",U)}_polymorphicCosh(U){return w(U,Math.cosh)}}(0,L.e)("FlowGraphCoshBlock",PU);class OU extends P.b{constructor(U){super(X.c,X.c,(U=>this._polymorphicTanh(U)),"FlowGraphTanhBlock",U)}_polymorphicTanh(U){return w(U,Math.tanh)}}(0,L.e)("FlowGraphTanhBlock",OU);class TU extends P.b{constructor(U){super(X.c,X.y,(U=>this._polymorphicAsinh(U)),"FlowGraphASinhBlock",U)}_polymorphicAsinh(U){return w(U,Math.asinh)}}(0,L.e)("FlowGraphASinhBlock",TU);class DU extends P.b{constructor(U){super(X.c,X.y,(U=>this._polymorphicAcosh(U)),"FlowGraphACoshBlock",U)}_polymorphicAcosh(U){return w(U,Math.acosh)}}(0,L.e)("FlowGraphACoshBlock",DU);class yU extends P.b{constructor(U){super(X.c,X.y,(U=>this._polymorphicAtanh(U)),"FlowGraphATanhBlock",U)}_polymorphicAtanh(U){return w(U,Math.atanh)}}(0,L.e)("FlowGraphATanhBlock",yU);class VU extends P.b{constructor(U){super(X.c,X.y,(U=>this._polymorphicExp(U)),"FlowGraphExponentialBlock",U)}_polymorphicExp(U){return w(U,Math.exp)}}(0,L.e)("FlowGraphExponentialBlock",VU);class pU extends P.b{constructor(U){super(X.c,X.y,(U=>this._polymorphicLog(U)),"FlowGraphLogBlock",U)}_polymorphicLog(U){return w(U,Math.log)}}(0,L.e)("FlowGraphLogBlock",pU);class IU extends P.b{constructor(U){super(X.c,X.y,(U=>this._polymorphicLog2(U)),"FlowGraphLog2Block",U)}_polymorphicLog2(U){return w(U,Math.log2)}}(0,L.e)("FlowGraphLog2Block",IU);class HU extends P.b{constructor(U){super(X.c,X.y,(U=>this._polymorphicLog10(U)),"FlowGraphLog10Block",U)}_polymorphicLog10(U){return w(U,Math.log10)}}(0,L.e)("FlowGraphLog10Block",HU);class xU extends P.b{constructor(U){super(X.c,X.y,(U=>this._polymorphicSqrt(U)),"FlowGraphSquareRootBlock",U)}_polymorphicSqrt(U){return w(U,Math.sqrt)}}(0,L.e)("FlowGraphSquareRootBlock",xU);class hU extends P.b{constructor(U){super(X.c,X.y,(U=>this._polymorphicCubeRoot(U)),"FlowGraphCubeRootBlock",U)}_polymorphicCubeRoot(U){return w(U,Math.cbrt)}}(0,L.e)("FlowGraphCubeRootBlock",hU);class NU extends l.d{constructor(U){super(X.c,X.y,X.y,((U,G)=>this._polymorphicPow(U,G)),"FlowGraphPowerBlock",U)}_polymorphicPow(U,G){return a(U,G,Math.pow)}}(0,L.e)("FlowGraphPowerBlock",NU);class bU extends P.b{constructor(U){super((0,X.V)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,X.V)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(U=>"boolean"===typeof U?!U:"number"===typeof U?~U:new T.c(~U.value)),"FlowGraphBitwiseNotBlock",U)}}(0,L.e)("FlowGraphBitwiseNotBlock",bU);class oU extends l.d{constructor(U){super((0,X.V)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,X.V)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,X.V)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),((U,G)=>{if("boolean"===typeof U&&"boolean"===typeof G)return U&&G;if("number"===typeof U&&"number"===typeof G)return U&G;if("object"===typeof U&&"object"===typeof G)return new T.c(U.value&G.value);throw new Error("Cannot perform bitwise AND on ".concat(U," and ").concat(G))}),"FlowGraphBitwiseAndBlock",U)}}(0,L.e)("FlowGraphBitwiseAndBlock",oU);class wU extends l.d{constructor(U){super((0,X.V)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,X.V)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,X.V)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),((U,G)=>{if("boolean"===typeof U&&"boolean"===typeof G)return U||G;if("number"===typeof U&&"number"===typeof G)return U|G;if("object"===typeof U&&"object"===typeof G)return new T.c(U.value|G.value);throw new Error("Cannot perform bitwise OR on ".concat(U," and ").concat(G))}),"FlowGraphBitwiseOrBlock",U)}}(0,L.e)("FlowGraphBitwiseOrBlock",wU);class SU extends l.d{constructor(U){super((0,X.V)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,X.V)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,X.V)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),((U,G)=>{if("boolean"===typeof U&&"boolean"===typeof G)return U!==G;if("number"===typeof U&&"number"===typeof G)return U^G;if("object"===typeof U&&"object"===typeof G)return new T.c(U.value^G.value);throw new Error("Cannot perform bitwise XOR on ".concat(U," and ").concat(G))}),"FlowGraphBitwiseXorBlock",U)}}(0,L.e)("FlowGraphBitwiseXorBlock",SU);class vU extends l.d{constructor(U){super(X.k,X.k,X.k,((U,G)=>new T.c(U.value<<G.value)),"FlowGraphBitwiseLeftShiftBlock",U)}}(0,L.e)("FlowGraphBitwiseLeftShiftBlock",vU);class uU extends l.d{constructor(U){super(X.k,X.k,X.k,((U,G)=>new T.c(U.value>>G.value)),"FlowGraphBitwiseRightShiftBlock",U)}}(0,L.e)("FlowGraphBitwiseRightShiftBlock",uU);class dU extends P.b{constructor(U){super(X.k,X.k,(U=>new T.c(Math.clz32(U.value))),"FlowGraphLeadingZerosBlock",U)}}(0,L.e)("FlowGraphLeadingZerosBlock",dU);class gU extends P.b{constructor(U){super(X.k,X.k,(U=>new T.c(U.value?31-Math.clz32(U.value&-U.value):32)),"FlowGraphTrailingZerosBlock",U)}}(0,L.e)("FlowGraphTrailingZerosBlock",gU);class ZU extends P.b{constructor(U){super(X.k,X.k,(U=>new T.c(function(U){let G=0;for(;U;)G+=1&U,U>>=1;return G}(U.value))),"FlowGraphOneBitsCounterBlock",U)}}(0,L.e)("FlowGraphOneBitsCounterBlock",ZU)},15666:(U,G,C)=>{C.d(G,{d:()=>X});var L=C(15668);class X extends L.c{constructor(U,G,C,L,X,l){super(C,l),this._operation=L,this._className=X,this.a=this.registerDataInput("a",U),this.b=this.registerDataInput("b",G)}_doOperation(U){const G=this.a.getValue(U),C=this.b.getValue(U);return this._operation(G,C)}getClassName(){return this._className}}},15668:(U,G,C)=>{C.d(G,{c:()=>E});var L=C(14154),X=C(14134);const l="cachedOperationValue",t="cachedExecutionId";class E extends L.b{constructor(U,G){super(G),this.value=this.registerDataOutput("value",U),this.isValid=this.registerDataOutput("isValid",X.g)}_updateOutputs(U){const G=U._getExecutionVariable(this,t,-1),C=U._getExecutionVariable(this,l,null);if(void 0!==C&&null!==C&&G===U.executionId)this.isValid.setValue(!0,U),this.value.setValue(C,U);else try{const G=this._doOperation(U);if(void 0===G||null===G)return void this.isValid.setValue(!1,U);U._setExecutionVariable(this,l,G),U._setExecutionVariable(this,t,U.executionId),this.value.setValue(G,U),this.isValid.setValue(!0,U)}catch(L){this.isValid.setValue(!1,U)}}}},15674:(U,G,C)=>{C.d(G,{b:()=>X});var L=C(15668);class X extends L.c{constructor(U,G,C,L,X){super(G,X),this._operation=C,this._className=L,this.a=this.registerDataInput("a",U)}_doOperation(U){return this._operation(this.a.getValue(U))}getClassName(){return this._className}}}}]);