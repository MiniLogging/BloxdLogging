"use strict";(self["686i8587bmi"]=self["686i8587bmi"]||[]).push([[88],{16058:(h,d,T)=>{T.r(d),T.d(d,{FlowGraphAbsBlock:()=>E,FlowGraphAcosBlock:()=>Ch,FlowGraphAcoshBlock:()=>rh,FlowGraphAddBlock:()=>O,FlowGraphAsinBlock:()=>yh,FlowGraphAsinhBlock:()=>Sh,FlowGraphAtan2Block:()=>Xh,FlowGraphAtanBlock:()=>nh,FlowGraphAtanhBlock:()=>ch,FlowGraphBitwiseAndBlock:()=>wh,FlowGraphBitwiseLeftShiftBlock:()=>zh,FlowGraphBitwiseNotBlock:()=>ih,FlowGraphBitwiseOrBlock:()=>sh,FlowGraphBitwiseRightShiftBlock:()=>xh,FlowGraphBitwiseXorBlock:()=>Eh,FlowGraphCeilBlock:()=>H,FlowGraphClampBlock:()=>a,FlowGraphCosBlock:()=>Th,FlowGraphCoshBlock:()=>Uh,FlowGraphCubeRootBlock:()=>Dh,FlowGraphDegToRadBlock:()=>t,FlowGraphDivideBlock:()=>W,FlowGraphEBlock:()=>D,FlowGraphEqualityBlock:()=>B,FlowGraphExpBlock:()=>Oh,FlowGraphFloorBlock:()=>g,FlowGraphFractionBlock:()=>k,FlowGraphGreaterThanBlock:()=>Q,FlowGraphGreaterThanOrEqualBlock:()=>I,FlowGraphInfBlock:()=>i,FlowGraphIsInfinityBlock:()=>P,FlowGraphIsNanBlock:()=>A,FlowGraphLeadingZerosBlock:()=>gh,FlowGraphLessThanBlock:()=>mh,FlowGraphLessThanOrEqualBlock:()=>R,FlowGraphLog10Block:()=>Wh,FlowGraphLog2Block:()=>Jh,FlowGraphLogBlock:()=>fh,FlowGraphMathInterpolationBlock:()=>b,FlowGraphMaxBlock:()=>l,FlowGraphMinBlock:()=>K,FlowGraphModuloBlock:()=>N,FlowGraphMultiplyBlock:()=>J,FlowGraphNaNBlock:()=>w,FlowGraphNegationBlock:()=>o,FlowGraphOneBitsCounterBlock:()=>ph,FlowGraphPiBlock:()=>V,FlowGraphPowerBlock:()=>Vh,FlowGraphRadToDegBlock:()=>hh,FlowGraphRandomBlock:()=>L,FlowGraphRoundBlock:()=>p,FlowGraphSaturateBlock:()=>v,FlowGraphSignBlock:()=>z,FlowGraphSinBlock:()=>dh,FlowGraphSinhBlock:()=>Fh,FlowGraphSquareRootBlock:()=>Lh,FlowGraphSubtractBlock:()=>f,FlowGraphTanBlock:()=>Yh,FlowGraphTanhBlock:()=>Zh,FlowGraphTrailingZerosBlock:()=>Hh,FlowGraphTruncBlock:()=>x});var Y=T(12714),y=T(14528),C=T(16060),n=T(16064);class X extends n.c{constructor(h,d,T,Y){super(h,Y),this._operation=d,this._className=T}_doOperation(h){return this._operation(h)}getClassName(){return this._className}}var F=T(12765),U=T(16069);class Z extends n.c{constructor(h,d,T,Y,y,C,n){super(Y,n),this._operation=y,this._className=C,this.a=this.registerDataInput("a",h),this.b=this.registerDataInput("b",d),this.c=this.registerDataInput("c",T)}_doOperation(h){return this._operation(this.a.getValue(h),this.b.getValue(h),this.c.getValue(h))}getClassName(){return this._className}}var S=T(14519),r=T(14534),c=T(14563);class O extends C.e{constructor(h){super((0,y.K)(null===h||void 0===h?void 0:h.type),(0,y.K)(null===h||void 0===h?void 0:h.type),(0,y.K)(null===h||void 0===h?void 0:h.type),((h,d)=>this._polymorphicAdd(h,d)),"FlowGraphAddBlock",h)}_polymorphicAdd(h,d){const T=(0,c.h)(h),Y=(0,c.h)(d);if((0,c.g)(T,Y)||(0,c.d)(T,Y)||(0,c.b)(T,Y))return h.add(d);if("Quaternion"===T||"Vector4"===Y)return new F.Vector4(h.x,h.y,h.z,h.w).addInPlace(d);if("Vector4"===T||"Quaternion"===Y)return h.add(d);var y;if(null!==(y=this.config)&&void 0!==y&&y.preventIntegerFloatArithmetic&&typeof h!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,c.n)(h)+(0,c.n)(d)}}(0,Y.e)("FlowGraphAddBlock",O);class f extends C.e{constructor(h){super((0,y.K)(null===h||void 0===h?void 0:h.type),(0,y.K)(null===h||void 0===h?void 0:h.type),(0,y.K)(null===h||void 0===h?void 0:h.type),((h,d)=>this._polymorphicSubtract(h,d)),"FlowGraphSubtractBlock",h)}_polymorphicSubtract(h,d){const T=(0,c.h)(h),Y=(0,c.h)(d);if((0,c.g)(T,Y)||(0,c.b)(T,Y)||(0,c.d)(T,Y))return h.Nd(d);if("Quaternion"===T||"Vector4"===Y)return new F.Vector4(h.x,h.y,h.z,h.w).rS(d);if("Vector4"===T||"Quaternion"===Y)return h.Nd(d);var y;if(null!==(y=this.config)&&void 0!==y&&y.preventIntegerFloatArithmetic&&typeof h!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,c.n)(h)-(0,c.n)(d)}}(0,Y.e)("FlowGraphSubtractBlock",f);class J extends C.e{constructor(h){super((0,y.K)(null===h||void 0===h?void 0:h.type),(0,y.K)(null===h||void 0===h?void 0:h.type),(0,y.K)(null===h||void 0===h?void 0:h.type),((h,d)=>this._polymorphicMultiply(h,d)),"FlowGraphMultiplyBlock",h)}_polymorphicMultiply(h,d){const T=(0,c.h)(h),Y=(0,c.h)(d);if((0,c.g)(T,Y)||(0,c.b)(T,Y))return h.multiply(d);if("Quaternion"===T||"Vector4"===Y)return new F.Vector4(h.x,h.y,h.z,h.w).multiplyInPlace(d);if("Vector4"===T||"Quaternion"===Y)return h.multiply(d);if((0,c.d)(T,Y)){var y;if(null!==(y=this.config)&&void 0!==y&&y.useMatrixPerComponent){const Y=h.m;for(let h=0;h<Y.length;h++)Y[h]*=d.m[h];return"Matrix2D"===T?new r.e(Y):"Matrix3D"===T?new r.f(Y):F.Matrix.Bd(Y)}return d.multiply(h)}var C;if(null!==(C=this.config)&&void 0!==C&&C.preventIntegerFloatArithmetic&&typeof h!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,c.n)(h)*(0,c.n)(d)}}(0,Y.e)("FlowGraphMultiplyBlock",J);class W extends C.e{constructor(h){super((0,y.K)(null===h||void 0===h?void 0:h.type),(0,y.K)(null===h||void 0===h?void 0:h.type),(0,y.K)(null===h||void 0===h?void 0:h.type),((h,d)=>this._polymorphicDivide(h,d)),"FlowGraphDivideBlock",h)}_polymorphicDivide(h,d){const T=(0,c.h)(h),Y=(0,c.h)(d);if((0,c.g)(T,Y)||(0,c.b)(T,Y))return h.divide(d);if("Quaternion"===T||"Quaternion"===Y){const T=h.clone();return T.x/=d.x,T.y/=d.y,T.z/=d.z,T.w/=d.w,T}if("Quaternion"===T||"Vector4"===Y)return new F.Vector4(h.x,h.y,h.z,h.w).divideInPlace(d);if("Vector4"===T||"Quaternion"===Y)return h.divide(d);if((0,c.d)(T,Y)){var y;if(null!==(y=this.config)&&void 0!==y&&y.useMatrixPerComponent){const Y=h.m;for(let h=0;h<Y.length;h++)Y[h]/=d.m[h];return"Matrix2D"===T?new r.e(Y):"Matrix3D"===T?new r.f(Y):F.Matrix.Bd(Y)}return h.divide(d)}var C;if(null!==(C=this.config)&&void 0!==C&&C.preventIntegerFloatArithmetic&&typeof h!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,c.n)(h)/(0,c.n)(d)}}(0,Y.e)("FlowGraphDivideBlock",W);class L extends X{constructor(h){super(y.s,(h=>this._random(h)),"FlowGraphRandomBlock",h),this.min=this.registerDataInput("min",y.s,(null===h||void 0===h?void 0:h.min)??0),this.max=this.registerDataInput("max",y.s,(null===h||void 0===h?void 0:h.max)??1),null!==h&&void 0!==h&&h.seed&&(this._seed=h.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const h=1e4*Math.sin(this._seed++);return h-Math.floor(h)}return Math.random()}_random(h){const d=this.min.getValue(h),T=this.max.getValue(h);return this._getRandomValue()*(T-d)+d}}(0,Y.e)("FlowGraphRandomBlock",L);class D extends X{constructor(h){super(y.s,(()=>Math.E),"FlowGraphEBlock",h)}}(0,Y.e)("FlowGraphEBlock",D);class V extends X{constructor(h){super(y.s,(()=>Math.PI),"FlowGraphPIBlock",h)}}(0,Y.e)("FlowGraphPIBlock",V);class i extends X{constructor(h){super(y.s,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",h)}}(0,Y.e)("FlowGraphInfBlock",i);class w extends X{constructor(h){super(y.s,(()=>Number.NaN),"FlowGraphNaNBlock",h)}}function s(h,d){switch((0,c.h)(h)){case"FlowGraphInteger":return new S.e(d(h.value));case"Vector2":return new F.Vector2(d(h.x),d(h.y));case"pd":return new F.pd(d(h.x),d(h.y),d(h.z));case"Vector4":return new F.Vector4(d(h.x),d(h.y),d(h.z),d(h.w));case"Quaternion":return new F.Quaternion(d(h.x),d(h.y),d(h.z),d(h.w));case"Matrix":return F.Matrix.Bd(h.m.map(d));case"Matrix2D":return new r.e(h.m.map(d));case"Matrix3D":return new r.f(h.m.map(d));default:return d(h)}}(0,Y.e)("FlowGraphNaNBlock",w);class E extends U.c{constructor(h){super(y.s,y.s,(h=>this._polymorphicAbs(h)),"FlowGraphAbsBlock",h)}_polymorphicAbs(h){return s(h,Math.abs)}}(0,Y.e)("FlowGraphAbsBlock",E);class z extends U.c{constructor(h){super(y.s,y.s,(h=>this._polymorphicSign(h)),"FlowGraphSignBlock",h)}_polymorphicSign(h){return s(h,Math.sign)}}(0,Y.e)("FlowGraphSignBlock",z);class x extends U.c{constructor(h){super(y.s,y.s,(h=>this._polymorphicTrunc(h)),"FlowGraphTruncBlock",h)}_polymorphicTrunc(h){return s(h,Math.trunc)}}(0,Y.e)("FlowGraphTruncBlock",x);class g extends U.c{constructor(h){super(y.s,y.s,(h=>this._polymorphicFloor(h)),"FlowGraphFloorBlock",h)}_polymorphicFloor(h){return s(h,Math.floor)}}(0,Y.e)("FlowGraphFloorBlock",g);class H extends U.c{constructor(h){super(y.b,y.b,(h=>this._polymorphicCeiling(h)),"FlowGraphCeilBlock",h)}_polymorphicCeiling(h){return s(h,Math.ceil)}}(0,Y.e)("FlowGraphCeilBlock",H);class p extends U.c{constructor(h){super(y.b,y.b,(h=>this._polymorphicRound(h)),"FlowGraphRoundBlock",h)}_polymorphicRound(h){return s(h,(h=>{var d;return h<0&&null!==(d=this.config)&&void 0!==d&&d.roundHalfAwayFromZero?-Math.round(-h):Math.round(h)}))}}(0,Y.e)("FlowGraphRoundBlock",p);class k extends U.c{constructor(h){super(y.b,y.b,(h=>this._polymorphicFraction(h)),"FlowGraphFractBlock",h)}_polymorphicFraction(h){return s(h,(h=>h-Math.floor(h)))}}(0,Y.e)("FlowGraphFractBlock",k);class o extends U.c{constructor(h){super(y.b,y.b,(h=>this._polymorphicNeg(h)),"FlowGraphNegationBlock",h)}_polymorphicNeg(h){return s(h,(h=>-h))}}function u(h,d,T){switch((0,c.h)(h)){case"FlowGraphInteger":return new S.e(T(h.value,d.value));case"Vector2":return new F.Vector2(T(h.x,d.x),T(h.y,d.y));case"pd":return new F.pd(T(h.x,d.x),T(h.y,d.y),T(h.z,d.z));case"Vector4":return new F.Vector4(T(h.x,d.x),T(h.y,d.y),T(h.z,d.z),T(h.w,d.w));case"Quaternion":return new F.Quaternion(T(h.x,d.x),T(h.y,d.y),T(h.z,d.z),T(h.w,d.w));case"Matrix":return F.Matrix.Bd(h.m.map(((h,Y)=>T(h,d.m[Y]))));case"Matrix2D":return new r.e(h.m.map(((h,Y)=>T(h,d.m[Y]))));case"Matrix3D":return new r.f(h.m.map(((h,Y)=>T(h,d.m[Y]))));default:return T((0,c.n)(h),(0,c.n)(d))}}(0,Y.e)("FlowGraphNegationBlock",o);class N extends C.e{constructor(h){super(y.b,y.b,y.b,((h,d)=>this._polymorphicRemainder(h,d)),"FlowGraphModuloBlock",h)}_polymorphicRemainder(h,d){return u(h,d,((h,d)=>h%d))}}(0,Y.e)("FlowGraphModuloBlock",N);class K extends C.e{constructor(h){super(y.b,y.b,y.b,((h,d)=>this._polymorphicMin(h,d)),"FlowGraphMinBlock",h)}_polymorphicMin(h,d){return u(h,d,Math.min)}}(0,Y.e)("FlowGraphMinBlock",K);class l extends C.e{constructor(h){super(y.b,y.b,y.b,((h,d)=>this._polymorphicMax(h,d)),"FlowGraphMaxBlock",h)}_polymorphicMax(h,d){return u(h,d,Math.max)}}function q(h,d,T){return Math.min(Math.max(h,Math.min(d,T)),Math.max(d,T))}function j(h,d,T,Y){switch((0,c.h)(h)){case"FlowGraphInteger":return new S.e(Y(h.value,d.value,T.value));case"Vector2":return new F.Vector2(Y(h.x,d.x,T.x),Y(h.y,d.y,T.y));case"pd":return new F.pd(Y(h.x,d.x,T.x),Y(h.y,d.y,T.y),Y(h.z,d.z,T.z));case"Vector4":return new F.Vector4(Y(h.x,d.x,T.x),Y(h.y,d.y,T.y),Y(h.z,d.z,T.z),Y(h.w,d.w,T.w));case"Quaternion":return new F.Quaternion(Y(h.x,d.x,T.x),Y(h.y,d.y,T.y),Y(h.z,d.z,T.z),Y(h.w,d.w,T.w));case"Matrix":return F.Matrix.Bd(h.m.map(((h,y)=>Y(h,d.m[y],T.m[y]))));case"Matrix2D":return new r.e(h.m.map(((h,y)=>Y(h,d.m[y],T.m[y]))));case"Matrix3D":return new r.f(h.m.map(((h,y)=>Y(h,d.m[y],T.m[y]))));default:return Y((0,c.n)(h),(0,c.n)(d),(0,c.n)(T))}}(0,Y.e)("FlowGraphMaxBlock",l);class a extends Z{constructor(h){super(y.b,y.b,y.b,y.b,((h,d,T)=>this._polymorphicClamp(h,d,T)),"FlowGraphClampBlock",h)}_polymorphicClamp(h,d,T){return j(h,d,T,q)}}function e(h){return Math.min(Math.max(h,0),1)}(0,Y.e)("FlowGraphClampBlock",a);class v extends U.c{constructor(h){super(y.b,y.b,(h=>this._polymorphicSaturate(h)),"FlowGraphSaturateBlock",h)}_polymorphicSaturate(h){return s(h,e)}}function G(h,d,T){return(1-T)*h+T*d}(0,Y.e)("FlowGraphSaturateBlock",v);class b extends Z{constructor(h){super(y.b,y.b,y.b,y.b,((h,d,T)=>this._polymorphicInterpolate(h,d,T)),"FlowGraphMathInterpolationBlock",h)}_polymorphicInterpolate(h,d,T){return j(h,d,T,G)}}(0,Y.e)("FlowGraphMathInterpolationBlock",b);class B extends C.e{constructor(h){super(y.b,y.b,y.e,((h,d)=>this._polymorphicEq(h,d)),"FlowGraphEqualityBlock",h)}_polymorphicEq(h,d){const T=(0,c.h)(h),Y=(0,c.h)(d);return typeof h===typeof d&&((0,c.g)(T,Y)||(0,c.d)(T,Y)||(0,c.b)(T,Y)?h.equals(d):h===d)}}function M(h,d,T){if((0,c.o)(h)&&(0,c.o)(d))return T((0,c.n)(h),(0,c.n)(d));throw new Error(`Cannot compare ${h} and ${d}`)}(0,Y.e)("FlowGraphEqualityBlock",B);class mh extends C.e{constructor(h){super(y.b,y.b,y.e,((h,d)=>this._polymorphicLessThan(h,d)),"FlowGraphLessThanBlock",h)}_polymorphicLessThan(h,d){return M(h,d,((h,d)=>h<d))}}(0,Y.e)("FlowGraphLessThanBlock",mh);class R extends C.e{constructor(h){super(y.b,y.b,y.e,((h,d)=>this._polymorphicLessThanOrEqual(h,d)),"FlowGraphLessThanOrEqualBlock",h)}_polymorphicLessThanOrEqual(h,d){return M(h,d,((h,d)=>h<=d))}}(0,Y.e)("FlowGraphLessThanOrEqualBlock",R);class Q extends C.e{constructor(h){super(y.b,y.b,y.e,((h,d)=>this._polymorphicGreaterThan(h,d)),"FlowGraphGreaterThanBlock",h)}_polymorphicGreaterThan(h,d){return M(h,d,((h,d)=>h>d))}}(0,Y.e)("FlowGraphGreaterThanBlock",Q);class I extends C.e{constructor(h){super(y.b,y.b,y.e,((h,d)=>this._polymorphicGreaterThanOrEqual(h,d)),"FlowGraphGreaterThanOrEqualBlock",h)}_polymorphicGreaterThanOrEqual(h,d){return M(h,d,((h,d)=>h>=d))}}(0,Y.e)("FlowGraphGreaterThanOrEqualBlock",I);class A extends U.c{constructor(h){super(y.b,y.e,(h=>this._polymorphicIsNan(h)),"FlowGraphIsNaNBlock",h)}_polymorphicIsNan(h){if((0,c.o)(h,!0))return isNaN((0,c.n)(h));throw new Error(`Cannot get NaN of ${h}`)}}(0,Y.e)("FlowGraphIsNaNBlock",A);class P extends U.c{constructor(h){super(y.b,y.e,(h=>this._polymorphicIsInf(h)),"FlowGraphIsInfBlock",h)}_polymorphicIsInf(h){if((0,c.o)(h))return!isFinite((0,c.n)(h));throw new Error(`Cannot get isInf of ${h}`)}}(0,Y.e)("FlowGraphIsInfBlock",P);class t extends U.c{constructor(h){super(y.b,y.b,(h=>this._polymorphicDegToRad(h)),"FlowGraphDegToRadBlock",h)}_degToRad(h){return h*Math.PI/180}_polymorphicDegToRad(h){return s(h,this._degToRad)}}(0,Y.e)("FlowGraphDegToRadBlock",t);class hh extends U.c{constructor(h){super(y.b,y.b,(h=>this._polymorphicRadToDeg(h)),"FlowGraphRadToDegBlock",h)}_radToDeg(h){return 180*h/Math.PI}_polymorphicRadToDeg(h){return s(h,this._radToDeg)}}(0,Y.e)("FlowGraphRadToDegBlock",hh);class dh extends U.c{constructor(h){super(y.s,y.s,(h=>this._polymorphicSin(h)),"FlowGraphSinBlock",h)}_polymorphicSin(h){return s(h,Math.sin)}}class Th extends U.c{constructor(h){super(y.s,y.s,(h=>this._polymorphicCos(h)),"FlowGraphCosBlock",h)}_polymorphicCos(h){return s(h,Math.cos)}}class Yh extends U.c{constructor(h){super(y.s,y.s,(h=>this._polymorphicTan(h)),"FlowGraphTanBlock",h)}_polymorphicTan(h){return s(h,Math.tan)}}class yh extends U.c{constructor(h){super(y.s,y.s,(h=>this._polymorphicAsin(h)),"FlowGraphASinBlock",h)}_polymorphicAsin(h){return s(h,Math.asin)}}(0,Y.e)("FlowGraphASinBlock",yh);class Ch extends U.c{constructor(h){super(y.s,y.s,(h=>this._polymorphicAcos(h)),"FlowGraphACosBlock",h)}_polymorphicAcos(h){return s(h,Math.acos)}}(0,Y.e)("FlowGraphACosBlock",Ch);class nh extends U.c{constructor(h){super(y.s,y.s,(h=>this._polymorphicAtan(h)),"FlowGraphATanBlock",h)}_polymorphicAtan(h){return s(h,Math.atan)}}(0,Y.e)("FlowGraphATanBlock",nh);class Xh extends C.e{constructor(h){super(y.b,y.b,y.b,((h,d)=>this._polymorphicAtan2(h,d)),"FlowGraphATan2Block",h)}_polymorphicAtan2(h,d){return u(h,d,Math.atan2)}}(0,Y.e)("FlowGraphATan2Block",Xh);class Fh extends U.c{constructor(h){super(y.b,y.b,(h=>this._polymorphicSinh(h)),"FlowGraphSinhBlock",h)}_polymorphicSinh(h){return s(h,Math.sinh)}}(0,Y.e)("FlowGraphSinhBlock",Fh);class Uh extends U.c{constructor(h){super(y.b,y.b,(h=>this._polymorphicCosh(h)),"FlowGraphCoshBlock",h)}_polymorphicCosh(h){return s(h,Math.cosh)}}(0,Y.e)("FlowGraphCoshBlock",Uh);class Zh extends U.c{constructor(h){super(y.b,y.b,(h=>this._polymorphicTanh(h)),"FlowGraphTanhBlock",h)}_polymorphicTanh(h){return s(h,Math.tanh)}}(0,Y.e)("FlowGraphTanhBlock",Zh);class Sh extends U.c{constructor(h){super(y.b,y.s,(h=>this._polymorphicAsinh(h)),"FlowGraphASinhBlock",h)}_polymorphicAsinh(h){return s(h,Math.asinh)}}(0,Y.e)("FlowGraphASinhBlock",Sh);class rh extends U.c{constructor(h){super(y.b,y.s,(h=>this._polymorphicAcosh(h)),"FlowGraphACoshBlock",h)}_polymorphicAcosh(h){return s(h,Math.acosh)}}(0,Y.e)("FlowGraphACoshBlock",rh);class ch extends U.c{constructor(h){super(y.b,y.s,(h=>this._polymorphicAtanh(h)),"FlowGraphATanhBlock",h)}_polymorphicAtanh(h){return s(h,Math.atanh)}}(0,Y.e)("FlowGraphATanhBlock",ch);class Oh extends U.c{constructor(h){super(y.b,y.s,(h=>this._polymorphicExp(h)),"FlowGraphExponentialBlock",h)}_polymorphicExp(h){return s(h,Math.exp)}}(0,Y.e)("FlowGraphExponentialBlock",Oh);class fh extends U.c{constructor(h){super(y.b,y.s,(h=>this._polymorphicLog(h)),"FlowGraphLogBlock",h)}_polymorphicLog(h){return s(h,Math.log)}}(0,Y.e)("FlowGraphLogBlock",fh);class Jh extends U.c{constructor(h){super(y.b,y.s,(h=>this._polymorphicLog2(h)),"FlowGraphLog2Block",h)}_polymorphicLog2(h){return s(h,Math.log2)}}(0,Y.e)("FlowGraphLog2Block",Jh);class Wh extends U.c{constructor(h){super(y.b,y.s,(h=>this._polymorphicLog10(h)),"FlowGraphLog10Block",h)}_polymorphicLog10(h){return s(h,Math.log10)}}(0,Y.e)("FlowGraphLog10Block",Wh);class Lh extends U.c{constructor(h){super(y.b,y.s,(h=>this._polymorphicSqrt(h)),"FlowGraphSquareRootBlock",h)}_polymorphicSqrt(h){return s(h,Math.sqrt)}}(0,Y.e)("FlowGraphSquareRootBlock",Lh);class Dh extends U.c{constructor(h){super(y.b,y.s,(h=>this._polymorphicCubeRoot(h)),"FlowGraphCubeRootBlock",h)}_polymorphicCubeRoot(h){return s(h,Math.cbrt)}}(0,Y.e)("FlowGraphCubeRootBlock",Dh);class Vh extends C.e{constructor(h){super(y.b,y.s,y.s,((h,d)=>this._polymorphicPow(h,d)),"FlowGraphPowerBlock",h)}_polymorphicPow(h,d){return u(h,d,Math.pow)}}(0,Y.e)("FlowGraphPowerBlock",Vh);class ih extends U.c{constructor(h){super((0,y.K)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,y.K)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(h=>"boolean"===typeof h?!h:"number"===typeof h?~h:new S.e(~h.value)),"FlowGraphBitwiseNotBlock",h)}}(0,Y.e)("FlowGraphBitwiseNotBlock",ih);class wh extends C.e{constructor(h){super((0,y.K)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,y.K)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,y.K)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),((h,d)=>{if("boolean"===typeof h&&"boolean"===typeof d)return h&&d;if("number"===typeof h&&"number"===typeof d)return h&d;if("object"===typeof h&&"object"===typeof d)return new S.e(h.value&d.value);throw new Error(`Cannot perform bitwise AND on ${h} and ${d}`)}),"FlowGraphBitwiseAndBlock",h)}}(0,Y.e)("FlowGraphBitwiseAndBlock",wh);class sh extends C.e{constructor(h){super((0,y.K)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,y.K)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,y.K)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),((h,d)=>{if("boolean"===typeof h&&"boolean"===typeof d)return h||d;if("number"===typeof h&&"number"===typeof d)return h|d;if("object"===typeof h&&"object"===typeof d)return new S.e(h.value|d.value);throw new Error(`Cannot perform bitwise OR on ${h} and ${d}`)}),"FlowGraphBitwiseOrBlock",h)}}(0,Y.e)("FlowGraphBitwiseOrBlock",sh);class Eh extends C.e{constructor(h){super((0,y.K)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,y.K)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,y.K)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),((h,d)=>{if("boolean"===typeof h&&"boolean"===typeof d)return h!==d;if("number"===typeof h&&"number"===typeof d)return h^d;if("object"===typeof h&&"object"===typeof d)return new S.e(h.value^d.value);throw new Error(`Cannot perform bitwise XOR on ${h} and ${d}`)}),"FlowGraphBitwiseXorBlock",h)}}(0,Y.e)("FlowGraphBitwiseXorBlock",Eh);class zh extends C.e{constructor(h){super(y.h,y.h,y.h,((h,d)=>new S.e(h.value<<d.value)),"FlowGraphBitwiseLeftShiftBlock",h)}}(0,Y.e)("FlowGraphBitwiseLeftShiftBlock",zh);class xh extends C.e{constructor(h){super(y.h,y.h,y.h,((h,d)=>new S.e(h.value>>d.value)),"FlowGraphBitwiseRightShiftBlock",h)}}(0,Y.e)("FlowGraphBitwiseRightShiftBlock",xh);class gh extends U.c{constructor(h){super(y.h,y.h,(h=>new S.e(Math.clz32(h.value))),"FlowGraphLeadingZerosBlock",h)}}(0,Y.e)("FlowGraphLeadingZerosBlock",gh);class Hh extends U.c{constructor(h){super(y.h,y.h,(h=>new S.e(h.value?31-Math.clz32(h.value&-h.value):32)),"FlowGraphTrailingZerosBlock",h)}}(0,Y.e)("FlowGraphTrailingZerosBlock",Hh);class ph extends U.c{constructor(h){super(y.h,y.h,(h=>new S.e(function(h){let d=0;for(;h;)d+=1&h,h>>=1;return d}(h.value))),"FlowGraphOneBitsCounterBlock",h)}}(0,Y.e)("FlowGraphOneBitsCounterBlock",ph)},16060:(h,d,T)=>{T.d(d,{e:()=>y});var Y=T(16064);class y extends Y.c{constructor(h,d,T,Y,y,C){super(T,C),this._operation=Y,this._className=y,this.a=this.registerDataInput("a",h),this.b=this.registerDataInput("b",d)}_doOperation(h){const d=this.a.getValue(h),T=this.b.getValue(h);return this._operation(d,T)}getClassName(){return this._className}}},16064:(h,d,T)=>{T.d(d,{c:()=>X});var Y=T(14548),y=T(14528);const C="cachedOperationValue",n="cachedExecutionId";class X extends Y.e{constructor(h,d){super(d),this.value=this.registerDataOutput("value",h),this.isValid=this.registerDataOutput("isValid",y.e)}_updateOutputs(h){const d=h._getExecutionVariable(this,n,-1),T=h._getExecutionVariable(this,C,null);if(void 0!==T&&null!==T&&d===h.executionId)this.isValid.setValue(!0,h),this.value.setValue(T,h);else try{const d=this._doOperation(h);if(void 0===d||null===d)return void this.isValid.setValue(!1,h);h._setExecutionVariable(this,C,d),h._setExecutionVariable(this,n,h.executionId),this.value.setValue(d,h),this.isValid.setValue(!0,h)}catch(Y){this.isValid.setValue(!1,h)}}}},16069:(h,d,T)=>{T.d(d,{c:()=>y});var Y=T(16064);class y extends Y.c{constructor(h,d,T,Y,y){super(d,y),this._operation=T,this._className=Y,this.a=this.registerDataInput("a",h)}_doOperation(h){return this._operation(this.a.getValue(h))}getClassName(){return this._className}}}}]);