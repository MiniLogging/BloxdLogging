"use strict";(self.ufnpnb83drd=self.ufnpnb83drd||[]).push([[88],{15583:(E,U,g)=>{g.r(U),g.d(U,{FlowGraphAbsBlock:()=>G,FlowGraphAcosBlock:()=>DE,FlowGraphAcoshBlock:()=>FE,FlowGraphAddBlock:()=>d,FlowGraphAsinBlock:()=>LE,FlowGraphAsinhBlock:()=>PE,FlowGraphAtan2Block:()=>uE,FlowGraphAtanBlock:()=>SE,FlowGraphAtanhBlock:()=>fE,FlowGraphBitwiseAndBlock:()=>YE,FlowGraphBitwiseLeftShiftBlock:()=>bE,FlowGraphBitwiseNotBlock:()=>lE,FlowGraphBitwiseOrBlock:()=>tE,FlowGraphBitwiseRightShiftBlock:()=>TE,FlowGraphBitwiseXorBlock:()=>GE,FlowGraphCeilBlock:()=>o,FlowGraphClampBlock:()=>M,FlowGraphCosBlock:()=>gE,FlowGraphCoshBlock:()=>CE,FlowGraphCubeRootBlock:()=>eE,FlowGraphDegToRadBlock:()=>X,FlowGraphDivideBlock:()=>h,FlowGraphEBlock:()=>e,FlowGraphEqualityBlock:()=>R,FlowGraphExpBlock:()=>dE,FlowGraphFloorBlock:()=>v,FlowGraphFractionBlock:()=>r,FlowGraphGreaterThanBlock:()=>i,FlowGraphGreaterThanOrEqualBlock:()=>p,FlowGraphInfBlock:()=>l,FlowGraphIsInfinityBlock:()=>K,FlowGraphIsNanBlock:()=>H,FlowGraphLeadingZerosBlock:()=>vE,FlowGraphLessThanBlock:()=>k,FlowGraphLessThanOrEqualBlock:()=>z,FlowGraphLog10Block:()=>hE,FlowGraphLog2Block:()=>yE,FlowGraphLogBlock:()=>IE,FlowGraphMathInterpolationBlock:()=>Q,FlowGraphMaxBlock:()=>a,FlowGraphMinBlock:()=>w,FlowGraphModuloBlock:()=>A,FlowGraphMultiplyBlock:()=>y,FlowGraphNaNBlock:()=>Y,FlowGraphNegationBlock:()=>j,FlowGraphOneBitsCounterBlock:()=>cE,FlowGraphPiBlock:()=>x,FlowGraphPowerBlock:()=>xE,FlowGraphRadToDegBlock:()=>EE,FlowGraphRandomBlock:()=>V,FlowGraphRoundBlock:()=>c,FlowGraphSaturateBlock:()=>W,FlowGraphSignBlock:()=>b,FlowGraphSinBlock:()=>UE,FlowGraphSinhBlock:()=>sE,FlowGraphSquareRootBlock:()=>VE,FlowGraphSubtractBlock:()=>I,FlowGraphTanBlock:()=>NE,FlowGraphTanhBlock:()=>BE,FlowGraphTrailingZerosBlock:()=>oE,FlowGraphTruncBlock:()=>T});var N=g(12292),L=g(14058),D=g(15587),S=g(15596);class u extends S.b{constructor(E,U,g,N){super(E,N),this._operation=U,this._className=g}_doOperation(E){return this._operation(E)}getClassName(){return this._className}}var s=g(12334),C=g(15598);class B extends S.b{constructor(E,U,g,N,L,D,S){super(N,S),this._operation=L,this._className=D,this.a=this.registerDataInput("a",E),this.b=this.registerDataInput("b",U),this.c=this.registerDataInput("c",g)}_doOperation(E){return this._operation(this.a.getValue(E),this.b.getValue(E),this.c.getValue(E))}getClassName(){return this._className}}var P=g(14050),F=g(14062),f=g(14084);class d extends D.b{constructor(E){super((0,L.L)(null===E||void 0===E?void 0:E.type),(0,L.L)(null===E||void 0===E?void 0:E.type),(0,L.L)(null===E||void 0===E?void 0:E.type),((E,U)=>this._polymorphicAdd(E,U)),"FlowGraphAddBlock",E)}_polymorphicAdd(E,U){const g=(0,f.p)(E),N=(0,f.p)(U);if((0,f.m)(g,N)||(0,f.i)(g,N)||(0,f.e)(g,N))return E.add(U);if("Quaternion"===g||"Vector4"===N)return new s.Vector4(E.x,E.y,E.z,E.w).addInPlace(U);if("Vector4"===g||"Quaternion"===N)return E.add(U);var L;if(null!==(L=this.config)&&void 0!==L&&L.preventIntegerFloatArithmetic&&typeof E!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,f.v)(E)+(0,f.v)(U)}}(0,N.f)("FlowGraphAddBlock",d);class I extends D.b{constructor(E){super((0,L.L)(null===E||void 0===E?void 0:E.type),(0,L.L)(null===E||void 0===E?void 0:E.type),(0,L.L)(null===E||void 0===E?void 0:E.type),((E,U)=>this._polymorphicSubtract(E,U)),"FlowGraphSubtractBlock",E)}_polymorphicSubtract(E,U){const g=(0,f.p)(E),N=(0,f.p)(U);if((0,f.m)(g,N)||(0,f.e)(g,N)||(0,f.i)(g,N))return E.IU(U);if("Quaternion"===g||"Vector4"===N)return new s.Vector4(E.x,E.y,E.z,E.w).iB(U);if("Vector4"===g||"Quaternion"===N)return E.IU(U);var L;if(null!==(L=this.config)&&void 0!==L&&L.preventIntegerFloatArithmetic&&typeof E!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,f.v)(E)-(0,f.v)(U)}}(0,N.f)("FlowGraphSubtractBlock",I);class y extends D.b{constructor(E){super((0,L.L)(null===E||void 0===E?void 0:E.type),(0,L.L)(null===E||void 0===E?void 0:E.type),(0,L.L)(null===E||void 0===E?void 0:E.type),((E,U)=>this._polymorphicMultiply(E,U)),"FlowGraphMultiplyBlock",E)}_polymorphicMultiply(E,U){const g=(0,f.p)(E),N=(0,f.p)(U);if((0,f.m)(g,N)||(0,f.e)(g,N))return E.multiply(U);if("Quaternion"===g||"Vector4"===N)return new s.Vector4(E.x,E.y,E.z,E.w).multiplyInPlace(U);if("Vector4"===g||"Quaternion"===N)return E.multiply(U);if((0,f.i)(g,N)){var L;if(null!==(L=this.config)&&void 0!==L&&L.useMatrixPerComponent){const N=E.m;for(let E=0;E<N.length;E++)N[E]*=U.m[E];return"Matrix2D"===g?new F.c(N):"Matrix3D"===g?new F.e(N):s.Matrix.eU(N)}return U.multiply(E)}var D;if(null!==(D=this.config)&&void 0!==D&&D.preventIntegerFloatArithmetic&&typeof E!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,f.v)(E)*(0,f.v)(U)}}(0,N.f)("FlowGraphMultiplyBlock",y);class h extends D.b{constructor(E){super((0,L.L)(null===E||void 0===E?void 0:E.type),(0,L.L)(null===E||void 0===E?void 0:E.type),(0,L.L)(null===E||void 0===E?void 0:E.type),((E,U)=>this._polymorphicDivide(E,U)),"FlowGraphDivideBlock",E)}_polymorphicDivide(E,U){const g=(0,f.p)(E),N=(0,f.p)(U);if((0,f.m)(g,N)||(0,f.e)(g,N))return E.divide(U);if("Quaternion"===g||"Quaternion"===N){const g=E.clone();return g.x/=U.x,g.y/=U.y,g.z/=U.z,g.w/=U.w,g}if("Quaternion"===g||"Vector4"===N)return new s.Vector4(E.x,E.y,E.z,E.w).divideInPlace(U);if("Vector4"===g||"Quaternion"===N)return E.divide(U);if((0,f.i)(g,N)){var L;if(null!==(L=this.config)&&void 0!==L&&L.useMatrixPerComponent){const N=E.m;for(let E=0;E<N.length;E++)N[E]/=U.m[E];return"Matrix2D"===g?new F.c(N):"Matrix3D"===g?new F.e(N):s.Matrix.eU(N)}return E.divide(U)}var D;if(null!==(D=this.config)&&void 0!==D&&D.preventIntegerFloatArithmetic&&typeof E!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,f.v)(E)/(0,f.v)(U)}}(0,N.f)("FlowGraphDivideBlock",h);class V extends u{constructor(E){super(L.t,(E=>this._random(E)),"FlowGraphRandomBlock",E),this.min=this.registerDataInput("min",L.t,(null===E||void 0===E?void 0:E.min)??0),this.max=this.registerDataInput("max",L.t,(null===E||void 0===E?void 0:E.max)??1),null!==E&&void 0!==E&&E.seed&&(this._seed=E.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const E=1e4*Math.sin(this._seed++);return E-Math.floor(E)}return Math.random()}_random(E){const U=this.min.getValue(E),g=this.max.getValue(E);return this._getRandomValue()*(g-U)+U}}(0,N.f)("FlowGraphRandomBlock",V);class e extends u{constructor(E){super(L.t,(()=>Math.E),"FlowGraphEBlock",E)}}(0,N.f)("FlowGraphEBlock",e);class x extends u{constructor(E){super(L.t,(()=>Math.PI),"FlowGraphPIBlock",E)}}(0,N.f)("FlowGraphPIBlock",x);class l extends u{constructor(E){super(L.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",E)}}(0,N.f)("FlowGraphInfBlock",l);class Y extends u{constructor(E){super(L.t,(()=>Number.NaN),"FlowGraphNaNBlock",E)}}function t(E,U){switch((0,f.p)(E)){case"FlowGraphInteger":return new P.c(U(E.value));case"Vector2":return new s.Vector2(U(E.x),U(E.y));case"dU":return new s.dU(U(E.x),U(E.y),U(E.z));case"Vector4":return new s.Vector4(U(E.x),U(E.y),U(E.z),U(E.w));case"Quaternion":return new s.Quaternion(U(E.x),U(E.y),U(E.z),U(E.w));case"Matrix":return s.Matrix.eU(E.m.map(U));case"Matrix2D":return new F.c(E.m.map(U));case"Matrix3D":return new F.e(E.m.map(U));default:return U(E)}}(0,N.f)("FlowGraphNaNBlock",Y);class G extends C.d{constructor(E){super(L.t,L.t,(E=>this._polymorphicAbs(E)),"FlowGraphAbsBlock",E)}_polymorphicAbs(E){return t(E,Math.abs)}}(0,N.f)("FlowGraphAbsBlock",G);class b extends C.d{constructor(E){super(L.t,L.t,(E=>this._polymorphicSign(E)),"FlowGraphSignBlock",E)}_polymorphicSign(E){return t(E,Math.sign)}}(0,N.f)("FlowGraphSignBlock",b);class T extends C.d{constructor(E){super(L.t,L.t,(E=>this._polymorphicTrunc(E)),"FlowGraphTruncBlock",E)}_polymorphicTrunc(E){return t(E,Math.trunc)}}(0,N.f)("FlowGraphTruncBlock",T);class v extends C.d{constructor(E){super(L.t,L.t,(E=>this._polymorphicFloor(E)),"FlowGraphFloorBlock",E)}_polymorphicFloor(E){return t(E,Math.floor)}}(0,N.f)("FlowGraphFloorBlock",v);class o extends C.d{constructor(E){super(L.e,L.e,(E=>this._polymorphicCeiling(E)),"FlowGraphCeilBlock",E)}_polymorphicCeiling(E){return t(E,Math.ceil)}}(0,N.f)("FlowGraphCeilBlock",o);class c extends C.d{constructor(E){super(L.e,L.e,(E=>this._polymorphicRound(E)),"FlowGraphRoundBlock",E)}_polymorphicRound(E){return t(E,(E=>{var U;return E<0&&null!==(U=this.config)&&void 0!==U&&U.roundHalfAwayFromZero?-Math.round(-E):Math.round(E)}))}}(0,N.f)("FlowGraphRoundBlock",c);class r extends C.d{constructor(E){super(L.e,L.e,(E=>this._polymorphicFraction(E)),"FlowGraphFractBlock",E)}_polymorphicFraction(E){return t(E,(E=>E-Math.floor(E)))}}(0,N.f)("FlowGraphFractBlock",r);class j extends C.d{constructor(E){super(L.e,L.e,(E=>this._polymorphicNeg(E)),"FlowGraphNegationBlock",E)}_polymorphicNeg(E){return t(E,(E=>-E))}}function Z(E,U,g){switch((0,f.p)(E)){case"FlowGraphInteger":return new P.c(g(E.value,U.value));case"Vector2":return new s.Vector2(g(E.x,U.x),g(E.y,U.y));case"dU":return new s.dU(g(E.x,U.x),g(E.y,U.y),g(E.z,U.z));case"Vector4":return new s.Vector4(g(E.x,U.x),g(E.y,U.y),g(E.z,U.z),g(E.w,U.w));case"Quaternion":return new s.Quaternion(g(E.x,U.x),g(E.y,U.y),g(E.z,U.z),g(E.w,U.w));case"Matrix":return s.Matrix.eU(E.m.map(((E,N)=>g(E,U.m[N]))));case"Matrix2D":return new F.c(E.m.map(((E,N)=>g(E,U.m[N]))));case"Matrix3D":return new F.e(E.m.map(((E,N)=>g(E,U.m[N]))));default:return g((0,f.v)(E),(0,f.v)(U))}}(0,N.f)("FlowGraphNegationBlock",j);class A extends D.b{constructor(E){super(L.e,L.e,L.e,((E,U)=>this._polymorphicRemainder(E,U)),"FlowGraphModuloBlock",E)}_polymorphicRemainder(E,U){return Z(E,U,((E,U)=>E%U))}}(0,N.f)("FlowGraphModuloBlock",A);class w extends D.b{constructor(E){super(L.e,L.e,L.e,((E,U)=>this._polymorphicMin(E,U)),"FlowGraphMinBlock",E)}_polymorphicMin(E,U){return Z(E,U,Math.min)}}(0,N.f)("FlowGraphMinBlock",w);class a extends D.b{constructor(E){super(L.e,L.e,L.e,((E,U)=>this._polymorphicMax(E,U)),"FlowGraphMaxBlock",E)}_polymorphicMax(E,U){return Z(E,U,Math.max)}}function J(E,U,g){return Math.min(Math.max(E,Math.min(U,g)),Math.max(U,g))}function q(E,U,g,N){switch((0,f.p)(E)){case"FlowGraphInteger":return new P.c(N(E.value,U.value,g.value));case"Vector2":return new s.Vector2(N(E.x,U.x,g.x),N(E.y,U.y,g.y));case"dU":return new s.dU(N(E.x,U.x,g.x),N(E.y,U.y,g.y),N(E.z,U.z,g.z));case"Vector4":return new s.Vector4(N(E.x,U.x,g.x),N(E.y,U.y,g.y),N(E.z,U.z,g.z),N(E.w,U.w,g.w));case"Quaternion":return new s.Quaternion(N(E.x,U.x,g.x),N(E.y,U.y,g.y),N(E.z,U.z,g.z),N(E.w,U.w,g.w));case"Matrix":return s.Matrix.eU(E.m.map(((E,L)=>N(E,U.m[L],g.m[L]))));case"Matrix2D":return new F.c(E.m.map(((E,L)=>N(E,U.m[L],g.m[L]))));case"Matrix3D":return new F.e(E.m.map(((E,L)=>N(E,U.m[L],g.m[L]))));default:return N((0,f.v)(E),(0,f.v)(U),(0,f.v)(g))}}(0,N.f)("FlowGraphMaxBlock",a);class M extends B{constructor(E){super(L.e,L.e,L.e,L.e,((E,U,g)=>this._polymorphicClamp(E,U,g)),"FlowGraphClampBlock",E)}_polymorphicClamp(E,U,g){return q(E,U,g,J)}}function mE(E){return Math.min(Math.max(E,0),1)}(0,N.f)("FlowGraphClampBlock",M);class W extends C.d{constructor(E){super(L.e,L.e,(E=>this._polymorphicSaturate(E)),"FlowGraphSaturateBlock",E)}_polymorphicSaturate(E){return t(E,mE)}}function O(E,U,g){return(1-g)*E+g*U}(0,N.f)("FlowGraphSaturateBlock",W);class Q extends B{constructor(E){super(L.e,L.e,L.e,L.e,((E,U,g)=>this._polymorphicInterpolate(E,U,g)),"FlowGraphMathInterpolationBlock",E)}_polymorphicInterpolate(E,U,g){return q(E,U,g,O)}}(0,N.f)("FlowGraphMathInterpolationBlock",Q);class R extends D.b{constructor(E){super(L.e,L.e,L.g,((E,U)=>this._polymorphicEq(E,U)),"FlowGraphEqualityBlock",E)}_polymorphicEq(E,U){const g=(0,f.p)(E),N=(0,f.p)(U);return typeof E===typeof U&&((0,f.m)(g,N)||(0,f.i)(g,N)||(0,f.e)(g,N)?E.equals(U):E===U)}}function n(E,U,g){if((0,f.x)(E)&&(0,f.x)(U))return g((0,f.v)(E),(0,f.v)(U));throw new Error(`Cannot compare ${E} and ${U}`)}(0,N.f)("FlowGraphEqualityBlock",R);class k extends D.b{constructor(E){super(L.e,L.e,L.g,((E,U)=>this._polymorphicLessThan(E,U)),"FlowGraphLessThanBlock",E)}_polymorphicLessThan(E,U){return n(E,U,((E,U)=>E<U))}}(0,N.f)("FlowGraphLessThanBlock",k);class z extends D.b{constructor(E){super(L.e,L.e,L.g,((E,U)=>this._polymorphicLessThanOrEqual(E,U)),"FlowGraphLessThanOrEqualBlock",E)}_polymorphicLessThanOrEqual(E,U){return n(E,U,((E,U)=>E<=U))}}(0,N.f)("FlowGraphLessThanOrEqualBlock",z);class i extends D.b{constructor(E){super(L.e,L.e,L.g,((E,U)=>this._polymorphicGreaterThan(E,U)),"FlowGraphGreaterThanBlock",E)}_polymorphicGreaterThan(E,U){return n(E,U,((E,U)=>E>U))}}(0,N.f)("FlowGraphGreaterThanBlock",i);class p extends D.b{constructor(E){super(L.e,L.e,L.g,((E,U)=>this._polymorphicGreaterThanOrEqual(E,U)),"FlowGraphGreaterThanOrEqualBlock",E)}_polymorphicGreaterThanOrEqual(E,U){return n(E,U,((E,U)=>E>=U))}}(0,N.f)("FlowGraphGreaterThanOrEqualBlock",p);class H extends C.d{constructor(E){super(L.e,L.g,(E=>this._polymorphicIsNan(E)),"FlowGraphIsNaNBlock",E)}_polymorphicIsNan(E){if((0,f.x)(E,!0))return isNaN((0,f.v)(E));throw new Error(`Cannot get NaN of ${E}`)}}(0,N.f)("FlowGraphIsNaNBlock",H);class K extends C.d{constructor(E){super(L.e,L.g,(E=>this._polymorphicIsInf(E)),"FlowGraphIsInfBlock",E)}_polymorphicIsInf(E){if((0,f.x)(E))return!isFinite((0,f.v)(E));throw new Error(`Cannot get isInf of ${E}`)}}(0,N.f)("FlowGraphIsInfBlock",K);class X extends C.d{constructor(E){super(L.e,L.e,(E=>this._polymorphicDegToRad(E)),"FlowGraphDegToRadBlock",E)}_degToRad(E){return E*Math.PI/180}_polymorphicDegToRad(E){return t(E,this._degToRad)}}(0,N.f)("FlowGraphDegToRadBlock",X);class EE extends C.d{constructor(E){super(L.e,L.e,(E=>this._polymorphicRadToDeg(E)),"FlowGraphRadToDegBlock",E)}_radToDeg(E){return 180*E/Math.PI}_polymorphicRadToDeg(E){return t(E,this._radToDeg)}}(0,N.f)("FlowGraphRadToDegBlock",EE);class UE extends C.d{constructor(E){super(L.t,L.t,(E=>this._polymorphicSin(E)),"FlowGraphSinBlock",E)}_polymorphicSin(E){return t(E,Math.sin)}}class gE extends C.d{constructor(E){super(L.t,L.t,(E=>this._polymorphicCos(E)),"FlowGraphCosBlock",E)}_polymorphicCos(E){return t(E,Math.cos)}}class NE extends C.d{constructor(E){super(L.t,L.t,(E=>this._polymorphicTan(E)),"FlowGraphTanBlock",E)}_polymorphicTan(E){return t(E,Math.tan)}}class LE extends C.d{constructor(E){super(L.t,L.t,(E=>this._polymorphicAsin(E)),"FlowGraphASinBlock",E)}_polymorphicAsin(E){return t(E,Math.asin)}}(0,N.f)("FlowGraphASinBlock",LE);class DE extends C.d{constructor(E){super(L.t,L.t,(E=>this._polymorphicAcos(E)),"FlowGraphACosBlock",E)}_polymorphicAcos(E){return t(E,Math.acos)}}(0,N.f)("FlowGraphACosBlock",DE);class SE extends C.d{constructor(E){super(L.t,L.t,(E=>this._polymorphicAtan(E)),"FlowGraphATanBlock",E)}_polymorphicAtan(E){return t(E,Math.atan)}}(0,N.f)("FlowGraphATanBlock",SE);class uE extends D.b{constructor(E){super(L.e,L.e,L.e,((E,U)=>this._polymorphicAtan2(E,U)),"FlowGraphATan2Block",E)}_polymorphicAtan2(E,U){return Z(E,U,Math.atan2)}}(0,N.f)("FlowGraphATan2Block",uE);class sE extends C.d{constructor(E){super(L.e,L.e,(E=>this._polymorphicSinh(E)),"FlowGraphSinhBlock",E)}_polymorphicSinh(E){return t(E,Math.sinh)}}(0,N.f)("FlowGraphSinhBlock",sE);class CE extends C.d{constructor(E){super(L.e,L.e,(E=>this._polymorphicCosh(E)),"FlowGraphCoshBlock",E)}_polymorphicCosh(E){return t(E,Math.cosh)}}(0,N.f)("FlowGraphCoshBlock",CE);class BE extends C.d{constructor(E){super(L.e,L.e,(E=>this._polymorphicTanh(E)),"FlowGraphTanhBlock",E)}_polymorphicTanh(E){return t(E,Math.tanh)}}(0,N.f)("FlowGraphTanhBlock",BE);class PE extends C.d{constructor(E){super(L.e,L.t,(E=>this._polymorphicAsinh(E)),"FlowGraphASinhBlock",E)}_polymorphicAsinh(E){return t(E,Math.asinh)}}(0,N.f)("FlowGraphASinhBlock",PE);class FE extends C.d{constructor(E){super(L.e,L.t,(E=>this._polymorphicAcosh(E)),"FlowGraphACoshBlock",E)}_polymorphicAcosh(E){return t(E,Math.acosh)}}(0,N.f)("FlowGraphACoshBlock",FE);class fE extends C.d{constructor(E){super(L.e,L.t,(E=>this._polymorphicAtanh(E)),"FlowGraphATanhBlock",E)}_polymorphicAtanh(E){return t(E,Math.atanh)}}(0,N.f)("FlowGraphATanhBlock",fE);class dE extends C.d{constructor(E){super(L.e,L.t,(E=>this._polymorphicExp(E)),"FlowGraphExponentialBlock",E)}_polymorphicExp(E){return t(E,Math.exp)}}(0,N.f)("FlowGraphExponentialBlock",dE);class IE extends C.d{constructor(E){super(L.e,L.t,(E=>this._polymorphicLog(E)),"FlowGraphLogBlock",E)}_polymorphicLog(E){return t(E,Math.log)}}(0,N.f)("FlowGraphLogBlock",IE);class yE extends C.d{constructor(E){super(L.e,L.t,(E=>this._polymorphicLog2(E)),"FlowGraphLog2Block",E)}_polymorphicLog2(E){return t(E,Math.log2)}}(0,N.f)("FlowGraphLog2Block",yE);class hE extends C.d{constructor(E){super(L.e,L.t,(E=>this._polymorphicLog10(E)),"FlowGraphLog10Block",E)}_polymorphicLog10(E){return t(E,Math.log10)}}(0,N.f)("FlowGraphLog10Block",hE);class VE extends C.d{constructor(E){super(L.e,L.t,(E=>this._polymorphicSqrt(E)),"FlowGraphSquareRootBlock",E)}_polymorphicSqrt(E){return t(E,Math.sqrt)}}(0,N.f)("FlowGraphSquareRootBlock",VE);class eE extends C.d{constructor(E){super(L.e,L.t,(E=>this._polymorphicCubeRoot(E)),"FlowGraphCubeRootBlock",E)}_polymorphicCubeRoot(E){return t(E,Math.cbrt)}}(0,N.f)("FlowGraphCubeRootBlock",eE);class xE extends D.b{constructor(E){super(L.e,L.t,L.t,((E,U)=>this._polymorphicPow(E,U)),"FlowGraphPowerBlock",E)}_polymorphicPow(E,U){return Z(E,U,Math.pow)}}(0,N.f)("FlowGraphPowerBlock",xE);class lE extends C.d{constructor(E){super((0,L.L)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),(0,L.L)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),(E=>"boolean"===typeof E?!E:"number"===typeof E?~E:new P.c(~E.value)),"FlowGraphBitwiseNotBlock",E)}}(0,N.f)("FlowGraphBitwiseNotBlock",lE);class YE extends D.b{constructor(E){super((0,L.L)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),(0,L.L)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),(0,L.L)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),((E,U)=>{if("boolean"===typeof E&&"boolean"===typeof U)return E&&U;if("number"===typeof E&&"number"===typeof U)return E&U;if("object"===typeof E&&"object"===typeof U)return new P.c(E.value&U.value);throw new Error(`Cannot perform bitwise AND on ${E} and ${U}`)}),"FlowGraphBitwiseAndBlock",E)}}(0,N.f)("FlowGraphBitwiseAndBlock",YE);class tE extends D.b{constructor(E){super((0,L.L)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),(0,L.L)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),(0,L.L)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),((E,U)=>{if("boolean"===typeof E&&"boolean"===typeof U)return E||U;if("number"===typeof E&&"number"===typeof U)return E|U;if("object"===typeof E&&"object"===typeof U)return new P.c(E.value|U.value);throw new Error(`Cannot perform bitwise OR on ${E} and ${U}`)}),"FlowGraphBitwiseOrBlock",E)}}(0,N.f)("FlowGraphBitwiseOrBlock",tE);class GE extends D.b{constructor(E){super((0,L.L)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),(0,L.L)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),(0,L.L)((null===E||void 0===E?void 0:E.valueType)||"FlowGraphInteger"),((E,U)=>{if("boolean"===typeof E&&"boolean"===typeof U)return E!==U;if("number"===typeof E&&"number"===typeof U)return E^U;if("object"===typeof E&&"object"===typeof U)return new P.c(E.value^U.value);throw new Error(`Cannot perform bitwise XOR on ${E} and ${U}`)}),"FlowGraphBitwiseXorBlock",E)}}(0,N.f)("FlowGraphBitwiseXorBlock",GE);class bE extends D.b{constructor(E){super(L.j,L.j,L.j,((E,U)=>new P.c(E.value<<U.value)),"FlowGraphBitwiseLeftShiftBlock",E)}}(0,N.f)("FlowGraphBitwiseLeftShiftBlock",bE);class TE extends D.b{constructor(E){super(L.j,L.j,L.j,((E,U)=>new P.c(E.value>>U.value)),"FlowGraphBitwiseRightShiftBlock",E)}}(0,N.f)("FlowGraphBitwiseRightShiftBlock",TE);class vE extends C.d{constructor(E){super(L.j,L.j,(E=>new P.c(Math.clz32(E.value))),"FlowGraphLeadingZerosBlock",E)}}(0,N.f)("FlowGraphLeadingZerosBlock",vE);class oE extends C.d{constructor(E){super(L.j,L.j,(E=>new P.c(E.value?31-Math.clz32(E.value&-E.value):32)),"FlowGraphTrailingZerosBlock",E)}}(0,N.f)("FlowGraphTrailingZerosBlock",oE);class cE extends C.d{constructor(E){super(L.j,L.j,(E=>new P.c(function(E){let U=0;for(;E;)U+=1&E,E>>=1;return U}(E.value))),"FlowGraphOneBitsCounterBlock",E)}}(0,N.f)("FlowGraphOneBitsCounterBlock",cE)},15587:(E,U,g)=>{g.d(U,{b:()=>L});var N=g(15596);class L extends N.b{constructor(E,U,g,N,L,D){super(g,D),this._operation=N,this._className=L,this.a=this.registerDataInput("a",E),this.b=this.registerDataInput("b",U)}_doOperation(E){const U=this.a.getValue(E),g=this.b.getValue(E);return this._operation(U,g)}getClassName(){return this._className}}},15596:(E,U,g)=>{g.d(U,{b:()=>u});var N=g(14077),L=g(14058);const D="cachedOperationValue",S="cachedExecutionId";class u extends N.b{constructor(E,U){super(U),this.value=this.registerDataOutput("value",E),this.isValid=this.registerDataOutput("isValid",L.g)}_updateOutputs(E){const U=E._getExecutionVariable(this,S,-1),g=E._getExecutionVariable(this,D,null);if(void 0!==g&&null!==g&&U===E.executionId)this.isValid.setValue(!0,E),this.value.setValue(g,E);else try{const U=this._doOperation(E);if(void 0===U||null===U)return void this.isValid.setValue(!1,E);E._setExecutionVariable(this,D,U),E._setExecutionVariable(this,S,E.executionId),this.value.setValue(U,E),this.isValid.setValue(!0,E)}catch(N){this.isValid.setValue(!1,E)}}}},15598:(E,U,g)=>{g.d(U,{d:()=>L});var N=g(15596);class L extends N.b{constructor(E,U,g,N,L){super(U,L),this._operation=g,this._className=N,this.a=this.registerDataInput("a",E)}_doOperation(E){return this._operation(this.a.getValue(E))}getClassName(){return this._className}}}}]);