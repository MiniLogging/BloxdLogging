"use strict";(self.r00gjvkwa6=self.r00gjvkwa6||[]).push([[88],{14508:(H,O,S)=>{S.r(O),S.d(O,{FlowGraphAbsBlock:()=>l,FlowGraphAcosBlock:()=>pH,FlowGraphAcoshBlock:()=>aH,FlowGraphAddBlock:()=>e,FlowGraphAsinBlock:()=>qH,FlowGraphAsinhBlock:()=>hH,FlowGraphAtan2Block:()=>UH,FlowGraphAtanBlock:()=>GH,FlowGraphAtanhBlock:()=>jH,FlowGraphBitwiseAndBlock:()=>FH,FlowGraphBitwiseLeftShiftBlock:()=>dH,FlowGraphBitwiseNotBlock:()=>DH,FlowGraphBitwiseOrBlock:()=>YH,FlowGraphBitwiseRightShiftBlock:()=>vH,FlowGraphBitwiseXorBlock:()=>lH,FlowGraphCeilBlock:()=>m,FlowGraphClampBlock:()=>P,FlowGraphCosBlock:()=>SH,FlowGraphCoshBlock:()=>wH,FlowGraphCubeRootBlock:()=>KH,FlowGraphDegToRadBlock:()=>L,FlowGraphDivideBlock:()=>y,FlowGraphEBlock:()=>K,FlowGraphEqualityBlock:()=>Z,FlowGraphExpBlock:()=>eH,FlowGraphFloorBlock:()=>z,FlowGraphFractionBlock:()=>W,FlowGraphGreaterThanBlock:()=>M,FlowGraphGreaterThanOrEqualBlock:()=>C,FlowGraphInfBlock:()=>D,FlowGraphIsInfinityBlock:()=>Q,FlowGraphIsNanBlock:()=>n,FlowGraphLeadingZerosBlock:()=>zH,FlowGraphLessThanBlock:()=>s,FlowGraphLessThanOrEqualBlock:()=>i,FlowGraphLog10Block:()=>yH,FlowGraphLog2Block:()=>EH,FlowGraphLogBlock:()=>XH,FlowGraphMathInterpolationBlock:()=>B,FlowGraphMaxBlock:()=>A,FlowGraphMinBlock:()=>k,FlowGraphModuloBlock:()=>x,FlowGraphMultiplyBlock:()=>E,FlowGraphNaNBlock:()=>F,FlowGraphNegationBlock:()=>g,FlowGraphOneBitsCounterBlock:()=>rH,FlowGraphPiBlock:()=>b,FlowGraphPowerBlock:()=>bH,FlowGraphRadToDegBlock:()=>HH,FlowGraphRandomBlock:()=>T,FlowGraphRoundBlock:()=>r,FlowGraphSaturateBlock:()=>c,FlowGraphSignBlock:()=>d,FlowGraphSinBlock:()=>OH,FlowGraphSinhBlock:()=>VH,FlowGraphSquareRootBlock:()=>TH,FlowGraphSubtractBlock:()=>X,FlowGraphTanBlock:()=>tH,FlowGraphTanhBlock:()=>oH,FlowGraphTrailingZerosBlock:()=>mH,FlowGraphTruncBlock:()=>v});var t=S(11262),q=S(13035),p=S(14515),G=S(14517);class U extends G.e{constructor(H,O,S,t){super(H,t),this._operation=O,this._className=S}_doOperation(H){return this._operation(H)}getClassName(){return this._className}}var V=S(11301),w=S(14523);class o extends G.e{constructor(H,O,S,t,q,p,G){super(t,G),this._operation=q,this._className=p,this.a=this.registerDataInput("a",H),this.b=this.registerDataInput("b",O),this.c=this.registerDataInput("c",S)}_doOperation(H){return this._operation(this.a.getValue(H),this.b.getValue(H),this.c.getValue(H))}getClassName(){return this._className}}var h=S(13030),a=S(13043),j=S(13077);class e extends p.b{constructor(H){super((0,q.Q)(null===H||void 0===H?void 0:H.type),(0,q.Q)(null===H||void 0===H?void 0:H.type),(0,q.Q)(null===H||void 0===H?void 0:H.type),((H,O)=>this._polymorphicAdd(H,O)),"FlowGraphAddBlock",H)}_polymorphicAdd(H,O){const S=(0,j.j)(H),t=(0,j.j)(O);if((0,j.i)(S,t)||(0,j.f)(S,t)||(0,j.b)(S,t))return H.add(O);if("Quaternion"===S||"Vector4"===t)return new V.Vector4(H.x,H.y,H.z,H.w).addInPlace(O);if("Vector4"===S||"Quaternion"===t)return H.add(O);var q;if(null!==(q=this.config)&&void 0!==q&&q.preventIntegerFloatArithmetic&&typeof H!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,j.p)(H)+(0,j.p)(O)}}(0,t.g)("FlowGraphAddBlock",e);class X extends p.b{constructor(H){super((0,q.Q)(null===H||void 0===H?void 0:H.type),(0,q.Q)(null===H||void 0===H?void 0:H.type),(0,q.Q)(null===H||void 0===H?void 0:H.type),((H,O)=>this._polymorphicSubtract(H,O)),"FlowGraphSubtractBlock",H)}_polymorphicSubtract(H,O){const S=(0,j.j)(H),t=(0,j.j)(O);if((0,j.i)(S,t)||(0,j.b)(S,t)||(0,j.f)(S,t))return H.XO(O);if("Quaternion"===S||"Vector4"===t)return new V.Vector4(H.x,H.y,H.z,H.w).Mo(O);if("Vector4"===S||"Quaternion"===t)return H.XO(O);var q;if(null!==(q=this.config)&&void 0!==q&&q.preventIntegerFloatArithmetic&&typeof H!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,j.p)(H)-(0,j.p)(O)}}(0,t.g)("FlowGraphSubtractBlock",X);class E extends p.b{constructor(H){super((0,q.Q)(null===H||void 0===H?void 0:H.type),(0,q.Q)(null===H||void 0===H?void 0:H.type),(0,q.Q)(null===H||void 0===H?void 0:H.type),((H,O)=>this._polymorphicMultiply(H,O)),"FlowGraphMultiplyBlock",H)}_polymorphicMultiply(H,O){const S=(0,j.j)(H),t=(0,j.j)(O);if((0,j.i)(S,t)||(0,j.b)(S,t))return H.multiply(O);if("Quaternion"===S||"Vector4"===t)return new V.Vector4(H.x,H.y,H.z,H.w).multiplyInPlace(O);if("Vector4"===S||"Quaternion"===t)return H.multiply(O);if((0,j.f)(S,t)){var q;if(null!==(q=this.config)&&void 0!==q&&q.useMatrixPerComponent){const t=H.m;for(let H=0;H<t.length;H++)t[H]*=O.m[H];return"Matrix2D"===S?new a.b(t):"Matrix3D"===S?new a.c(t):V.Matrix.KO(t)}return O.multiply(H)}var p;if(null!==(p=this.config)&&void 0!==p&&p.preventIntegerFloatArithmetic&&typeof H!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,j.p)(H)*(0,j.p)(O)}}(0,t.g)("FlowGraphMultiplyBlock",E);class y extends p.b{constructor(H){super((0,q.Q)(null===H||void 0===H?void 0:H.type),(0,q.Q)(null===H||void 0===H?void 0:H.type),(0,q.Q)(null===H||void 0===H?void 0:H.type),((H,O)=>this._polymorphicDivide(H,O)),"FlowGraphDivideBlock",H)}_polymorphicDivide(H,O){const S=(0,j.j)(H),t=(0,j.j)(O);if((0,j.i)(S,t)||(0,j.b)(S,t))return H.divide(O);if("Quaternion"===S||"Quaternion"===t){const S=H.clone();return S.x/=O.x,S.y/=O.y,S.z/=O.z,S.w/=O.w,S}if("Quaternion"===S||"Vector4"===t)return new V.Vector4(H.x,H.y,H.z,H.w).divideInPlace(O);if("Vector4"===S||"Quaternion"===t)return H.divide(O);if((0,j.f)(S,t)){var q;if(null!==(q=this.config)&&void 0!==q&&q.useMatrixPerComponent){const t=H.m;for(let H=0;H<t.length;H++)t[H]/=O.m[H];return"Matrix2D"===S?new a.b(t):"Matrix3D"===S?new a.c(t):V.Matrix.KO(t)}return H.divide(O)}var p;if(null!==(p=this.config)&&void 0!==p&&p.preventIntegerFloatArithmetic&&typeof H!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,j.p)(H)/(0,j.p)(O)}}(0,t.g)("FlowGraphDivideBlock",y);class T extends U{constructor(H){super(q.t,(H=>this._random(H)),"FlowGraphRandomBlock",H),this.min=this.registerDataInput("min",q.t,(null===H||void 0===H?void 0:H.min)??0),this.max=this.registerDataInput("max",q.t,(null===H||void 0===H?void 0:H.max)??1),null!==H&&void 0!==H&&H.seed&&(this._seed=H.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const H=1e4*Math.sin(this._seed++);return H-Math.floor(H)}return Math.random()}_random(H){const O=this.min.getValue(H),S=this.max.getValue(H);return this._getRandomValue()*(S-O)+O}}(0,t.g)("FlowGraphRandomBlock",T);class K extends U{constructor(H){super(q.t,(()=>Math.E),"FlowGraphEBlock",H)}}(0,t.g)("FlowGraphEBlock",K);class b extends U{constructor(H){super(q.t,(()=>Math.PI),"FlowGraphPIBlock",H)}}(0,t.g)("FlowGraphPIBlock",b);class D extends U{constructor(H){super(q.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",H)}}(0,t.g)("FlowGraphInfBlock",D);class F extends U{constructor(H){super(q.t,(()=>Number.NaN),"FlowGraphNaNBlock",H)}}function Y(H,O){switch((0,j.j)(H)){case"FlowGraphInteger":return new h.d(O(H.value));case"Vector2":return new V.Vector2(O(H.x),O(H.y));case"eO":return new V.eO(O(H.x),O(H.y),O(H.z));case"Vector4":return new V.Vector4(O(H.x),O(H.y),O(H.z),O(H.w));case"Quaternion":return new V.Quaternion(O(H.x),O(H.y),O(H.z),O(H.w));case"Matrix":return V.Matrix.KO(H.m.map(O));case"Matrix2D":return new a.b(H.m.map(O));case"Matrix3D":return new a.c(H.m.map(O));default:return O(H)}}(0,t.g)("FlowGraphNaNBlock",F);class l extends w.b{constructor(H){super(q.t,q.t,(H=>this._polymorphicAbs(H)),"FlowGraphAbsBlock",H)}_polymorphicAbs(H){return Y(H,Math.abs)}}(0,t.g)("FlowGraphAbsBlock",l);class d extends w.b{constructor(H){super(q.t,q.t,(H=>this._polymorphicSign(H)),"FlowGraphSignBlock",H)}_polymorphicSign(H){return Y(H,Math.sign)}}(0,t.g)("FlowGraphSignBlock",d);class v extends w.b{constructor(H){super(q.t,q.t,(H=>this._polymorphicTrunc(H)),"FlowGraphTruncBlock",H)}_polymorphicTrunc(H){return Y(H,Math.trunc)}}(0,t.g)("FlowGraphTruncBlock",v);class z extends w.b{constructor(H){super(q.t,q.t,(H=>this._polymorphicFloor(H)),"FlowGraphFloorBlock",H)}_polymorphicFloor(H){return Y(H,Math.floor)}}(0,t.g)("FlowGraphFloorBlock",z);class m extends w.b{constructor(H){super(q.e,q.e,(H=>this._polymorphicCeiling(H)),"FlowGraphCeilBlock",H)}_polymorphicCeiling(H){return Y(H,Math.ceil)}}(0,t.g)("FlowGraphCeilBlock",m);class r extends w.b{constructor(H){super(q.e,q.e,(H=>this._polymorphicRound(H)),"FlowGraphRoundBlock",H)}_polymorphicRound(H){return Y(H,(H=>{var O;return H<0&&null!==(O=this.config)&&void 0!==O&&O.roundHalfAwayFromZero?-Math.round(-H):Math.round(H)}))}}(0,t.g)("FlowGraphRoundBlock",r);class W extends w.b{constructor(H){super(q.e,q.e,(H=>this._polymorphicFraction(H)),"FlowGraphFractBlock",H)}_polymorphicFraction(H){return Y(H,(H=>H-Math.floor(H)))}}(0,t.g)("FlowGraphFractBlock",W);class g extends w.b{constructor(H){super(q.e,q.e,(H=>this._polymorphicNeg(H)),"FlowGraphNegationBlock",H)}_polymorphicNeg(H){return Y(H,(H=>-H))}}function N(H,O,S){switch((0,j.j)(H)){case"FlowGraphInteger":return new h.d(S(H.value,O.value));case"Vector2":return new V.Vector2(S(H.x,O.x),S(H.y,O.y));case"eO":return new V.eO(S(H.x,O.x),S(H.y,O.y),S(H.z,O.z));case"Vector4":return new V.Vector4(S(H.x,O.x),S(H.y,O.y),S(H.z,O.z),S(H.w,O.w));case"Quaternion":return new V.Quaternion(S(H.x,O.x),S(H.y,O.y),S(H.z,O.z),S(H.w,O.w));case"Matrix":return V.Matrix.KO(H.m.map(((H,t)=>S(H,O.m[t]))));case"Matrix2D":return new a.b(H.m.map(((H,t)=>S(H,O.m[t]))));case"Matrix3D":return new a.c(H.m.map(((H,t)=>S(H,O.m[t]))));default:return S((0,j.p)(H),(0,j.p)(O))}}(0,t.g)("FlowGraphNegationBlock",g);class x extends p.b{constructor(H){super(q.e,q.e,q.e,((H,O)=>this._polymorphicRemainder(H,O)),"FlowGraphModuloBlock",H)}_polymorphicRemainder(H,O){return N(H,O,((H,O)=>H%O))}}(0,t.g)("FlowGraphModuloBlock",x);class k extends p.b{constructor(H){super(q.e,q.e,q.e,((H,O)=>this._polymorphicMin(H,O)),"FlowGraphMinBlock",H)}_polymorphicMin(H,O){return N(H,O,Math.min)}}(0,t.g)("FlowGraphMinBlock",k);class A extends p.b{constructor(H){super(q.e,q.e,q.e,((H,O)=>this._polymorphicMax(H,O)),"FlowGraphMaxBlock",H)}_polymorphicMax(H,O){return N(H,O,Math.max)}}function u(H,O,S){return Math.min(Math.max(H,Math.min(O,S)),Math.max(O,S))}function J(H,O,S,t){switch((0,j.j)(H)){case"FlowGraphInteger":return new h.d(t(H.value,O.value,S.value));case"Vector2":return new V.Vector2(t(H.x,O.x,S.x),t(H.y,O.y,S.y));case"eO":return new V.eO(t(H.x,O.x,S.x),t(H.y,O.y,S.y),t(H.z,O.z,S.z));case"Vector4":return new V.Vector4(t(H.x,O.x,S.x),t(H.y,O.y,S.y),t(H.z,O.z,S.z),t(H.w,O.w,S.w));case"Quaternion":return new V.Quaternion(t(H.x,O.x,S.x),t(H.y,O.y,S.y),t(H.z,O.z,S.z),t(H.w,O.w,S.w));case"Matrix":return V.Matrix.KO(H.m.map(((H,q)=>t(H,O.m[q],S.m[q]))));case"Matrix2D":return new a.b(H.m.map(((H,q)=>t(H,O.m[q],S.m[q]))));case"Matrix3D":return new a.c(H.m.map(((H,q)=>t(H,O.m[q],S.m[q]))));default:return t((0,j.p)(H),(0,j.p)(O),(0,j.p)(S))}}(0,t.g)("FlowGraphMaxBlock",A);class P extends o{constructor(H){super(q.e,q.e,q.e,q.e,((H,O,S)=>this._polymorphicClamp(H,O,S)),"FlowGraphClampBlock",H)}_polymorphicClamp(H,O,S){return J(H,O,S,u)}}function f(H){return Math.min(Math.max(H,0),1)}(0,t.g)("FlowGraphClampBlock",P);class c extends w.b{constructor(H){super(q.e,q.e,(H=>this._polymorphicSaturate(H)),"FlowGraphSaturateBlock",H)}_polymorphicSaturate(H){return Y(H,f)}}function R(H,O,S){return(1-S)*H+S*O}(0,t.g)("FlowGraphSaturateBlock",c);class B extends o{constructor(H){super(q.e,q.e,q.e,q.e,((H,O,S)=>this._polymorphicInterpolate(H,O,S)),"FlowGraphMathInterpolationBlock",H)}_polymorphicInterpolate(H,O,S){return J(H,O,S,R)}}(0,t.g)("FlowGraphMathInterpolationBlock",B);class Z extends p.b{constructor(H){super(q.e,q.e,q.i,((H,O)=>this._polymorphicEq(H,O)),"FlowGraphEqualityBlock",H)}_polymorphicEq(H,O){const S=(0,j.j)(H),t=(0,j.j)(O);return typeof H===typeof O&&((0,j.i)(S,t)||(0,j.f)(S,t)||(0,j.b)(S,t)?H.equals(O):H===O)}}function I(H,O,S){if((0,j.s)(H)&&(0,j.s)(O))return S((0,j.p)(H),(0,j.p)(O));throw new Error(`Cannot compare ${H} and ${O}`)}(0,t.g)("FlowGraphEqualityBlock",Z);class s extends p.b{constructor(H){super(q.e,q.e,q.i,((H,O)=>this._polymorphicLessThan(H,O)),"FlowGraphLessThanBlock",H)}_polymorphicLessThan(H,O){return I(H,O,((H,O)=>H<O))}}(0,t.g)("FlowGraphLessThanBlock",s);class i extends p.b{constructor(H){super(q.e,q.e,q.i,((H,O)=>this._polymorphicLessThanOrEqual(H,O)),"FlowGraphLessThanOrEqualBlock",H)}_polymorphicLessThanOrEqual(H,O){return I(H,O,((H,O)=>H<=O))}}(0,t.g)("FlowGraphLessThanOrEqualBlock",i);class M extends p.b{constructor(H){super(q.e,q.e,q.i,((H,O)=>this._polymorphicGreaterThan(H,O)),"FlowGraphGreaterThanBlock",H)}_polymorphicGreaterThan(H,O){return I(H,O,((H,O)=>H>O))}}(0,t.g)("FlowGraphGreaterThanBlock",M);class C extends p.b{constructor(H){super(q.e,q.e,q.i,((H,O)=>this._polymorphicGreaterThanOrEqual(H,O)),"FlowGraphGreaterThanOrEqualBlock",H)}_polymorphicGreaterThanOrEqual(H,O){return I(H,O,((H,O)=>H>=O))}}(0,t.g)("FlowGraphGreaterThanOrEqualBlock",C);class n extends w.b{constructor(H){super(q.e,q.i,(H=>this._polymorphicIsNan(H)),"FlowGraphIsNaNBlock",H)}_polymorphicIsNan(H){if((0,j.s)(H,!0))return isNaN((0,j.p)(H));throw new Error(`Cannot get NaN of ${H}`)}}(0,t.g)("FlowGraphIsNaNBlock",n);class Q extends w.b{constructor(H){super(q.e,q.i,(H=>this._polymorphicIsInf(H)),"FlowGraphIsInfBlock",H)}_polymorphicIsInf(H){if((0,j.s)(H))return!isFinite((0,j.p)(H));throw new Error(`Cannot get isInf of ${H}`)}}(0,t.g)("FlowGraphIsInfBlock",Q);class L extends w.b{constructor(H){super(q.e,q.e,(H=>this._polymorphicDegToRad(H)),"FlowGraphDegToRadBlock",H)}_degToRad(H){return H*Math.PI/180}_polymorphicDegToRad(H){return Y(H,this._degToRad)}}(0,t.g)("FlowGraphDegToRadBlock",L);class HH extends w.b{constructor(H){super(q.e,q.e,(H=>this._polymorphicRadToDeg(H)),"FlowGraphRadToDegBlock",H)}_radToDeg(H){return 180*H/Math.PI}_polymorphicRadToDeg(H){return Y(H,this._radToDeg)}}(0,t.g)("FlowGraphRadToDegBlock",HH);class OH extends w.b{constructor(H){super(q.t,q.t,(H=>this._polymorphicSin(H)),"FlowGraphSinBlock",H)}_polymorphicSin(H){return Y(H,Math.sin)}}class SH extends w.b{constructor(H){super(q.t,q.t,(H=>this._polymorphicCos(H)),"FlowGraphCosBlock",H)}_polymorphicCos(H){return Y(H,Math.cos)}}class tH extends w.b{constructor(H){super(q.t,q.t,(H=>this._polymorphicTan(H)),"FlowGraphTanBlock",H)}_polymorphicTan(H){return Y(H,Math.tan)}}class qH extends w.b{constructor(H){super(q.t,q.t,(H=>this._polymorphicAsin(H)),"FlowGraphASinBlock",H)}_polymorphicAsin(H){return Y(H,Math.asin)}}(0,t.g)("FlowGraphASinBlock",qH);class pH extends w.b{constructor(H){super(q.t,q.t,(H=>this._polymorphicAcos(H)),"FlowGraphACosBlock",H)}_polymorphicAcos(H){return Y(H,Math.acos)}}(0,t.g)("FlowGraphACosBlock",pH);class GH extends w.b{constructor(H){super(q.t,q.t,(H=>this._polymorphicAtan(H)),"FlowGraphATanBlock",H)}_polymorphicAtan(H){return Y(H,Math.atan)}}(0,t.g)("FlowGraphATanBlock",GH);class UH extends p.b{constructor(H){super(q.e,q.e,q.e,((H,O)=>this._polymorphicAtan2(H,O)),"FlowGraphATan2Block",H)}_polymorphicAtan2(H,O){return N(H,O,Math.atan2)}}(0,t.g)("FlowGraphATan2Block",UH);class VH extends w.b{constructor(H){super(q.e,q.e,(H=>this._polymorphicSinh(H)),"FlowGraphSinhBlock",H)}_polymorphicSinh(H){return Y(H,Math.sinh)}}(0,t.g)("FlowGraphSinhBlock",VH);class wH extends w.b{constructor(H){super(q.e,q.e,(H=>this._polymorphicCosh(H)),"FlowGraphCoshBlock",H)}_polymorphicCosh(H){return Y(H,Math.cosh)}}(0,t.g)("FlowGraphCoshBlock",wH);class oH extends w.b{constructor(H){super(q.e,q.e,(H=>this._polymorphicTanh(H)),"FlowGraphTanhBlock",H)}_polymorphicTanh(H){return Y(H,Math.tanh)}}(0,t.g)("FlowGraphTanhBlock",oH);class hH extends w.b{constructor(H){super(q.e,q.t,(H=>this._polymorphicAsinh(H)),"FlowGraphASinhBlock",H)}_polymorphicAsinh(H){return Y(H,Math.asinh)}}(0,t.g)("FlowGraphASinhBlock",hH);class aH extends w.b{constructor(H){super(q.e,q.t,(H=>this._polymorphicAcosh(H)),"FlowGraphACoshBlock",H)}_polymorphicAcosh(H){return Y(H,Math.acosh)}}(0,t.g)("FlowGraphACoshBlock",aH);class jH extends w.b{constructor(H){super(q.e,q.t,(H=>this._polymorphicAtanh(H)),"FlowGraphATanhBlock",H)}_polymorphicAtanh(H){return Y(H,Math.atanh)}}(0,t.g)("FlowGraphATanhBlock",jH);class eH extends w.b{constructor(H){super(q.e,q.t,(H=>this._polymorphicExp(H)),"FlowGraphExponentialBlock",H)}_polymorphicExp(H){return Y(H,Math.exp)}}(0,t.g)("FlowGraphExponentialBlock",eH);class XH extends w.b{constructor(H){super(q.e,q.t,(H=>this._polymorphicLog(H)),"FlowGraphLogBlock",H)}_polymorphicLog(H){return Y(H,Math.log)}}(0,t.g)("FlowGraphLogBlock",XH);class EH extends w.b{constructor(H){super(q.e,q.t,(H=>this._polymorphicLog2(H)),"FlowGraphLog2Block",H)}_polymorphicLog2(H){return Y(H,Math.log2)}}(0,t.g)("FlowGraphLog2Block",EH);class yH extends w.b{constructor(H){super(q.e,q.t,(H=>this._polymorphicLog10(H)),"FlowGraphLog10Block",H)}_polymorphicLog10(H){return Y(H,Math.log10)}}(0,t.g)("FlowGraphLog10Block",yH);class TH extends w.b{constructor(H){super(q.e,q.t,(H=>this._polymorphicSqrt(H)),"FlowGraphSquareRootBlock",H)}_polymorphicSqrt(H){return Y(H,Math.sqrt)}}(0,t.g)("FlowGraphSquareRootBlock",TH);class KH extends w.b{constructor(H){super(q.e,q.t,(H=>this._polymorphicCubeRoot(H)),"FlowGraphCubeRootBlock",H)}_polymorphicCubeRoot(H){return Y(H,Math.cbrt)}}(0,t.g)("FlowGraphCubeRootBlock",KH);class bH extends p.b{constructor(H){super(q.e,q.t,q.t,((H,O)=>this._polymorphicPow(H,O)),"FlowGraphPowerBlock",H)}_polymorphicPow(H,O){return N(H,O,Math.pow)}}(0,t.g)("FlowGraphPowerBlock",bH);class DH extends w.b{constructor(H){super((0,q.Q)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),(0,q.Q)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),(H=>"boolean"===typeof H?!H:"number"===typeof H?~H:new h.d(~H.value)),"FlowGraphBitwiseNotBlock",H)}}(0,t.g)("FlowGraphBitwiseNotBlock",DH);class FH extends p.b{constructor(H){super((0,q.Q)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),(0,q.Q)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),(0,q.Q)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),((H,O)=>{if("boolean"===typeof H&&"boolean"===typeof O)return H&&O;if("number"===typeof H&&"number"===typeof O)return H&O;if("object"===typeof H&&"object"===typeof O)return new h.d(H.value&O.value);throw new Error(`Cannot perform bitwise AND on ${H} and ${O}`)}),"FlowGraphBitwiseAndBlock",H)}}(0,t.g)("FlowGraphBitwiseAndBlock",FH);class YH extends p.b{constructor(H){super((0,q.Q)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),(0,q.Q)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),(0,q.Q)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),((H,O)=>{if("boolean"===typeof H&&"boolean"===typeof O)return H||O;if("number"===typeof H&&"number"===typeof O)return H|O;if("object"===typeof H&&"object"===typeof O)return new h.d(H.value|O.value);throw new Error(`Cannot perform bitwise OR on ${H} and ${O}`)}),"FlowGraphBitwiseOrBlock",H)}}(0,t.g)("FlowGraphBitwiseOrBlock",YH);class lH extends p.b{constructor(H){super((0,q.Q)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),(0,q.Q)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),(0,q.Q)((null===H||void 0===H?void 0:H.valueType)||"FlowGraphInteger"),((H,O)=>{if("boolean"===typeof H&&"boolean"===typeof O)return H!==O;if("number"===typeof H&&"number"===typeof O)return H^O;if("object"===typeof H&&"object"===typeof O)return new h.d(H.value^O.value);throw new Error(`Cannot perform bitwise XOR on ${H} and ${O}`)}),"FlowGraphBitwiseXorBlock",H)}}(0,t.g)("FlowGraphBitwiseXorBlock",lH);class dH extends p.b{constructor(H){super(q.l,q.l,q.l,((H,O)=>new h.d(H.value<<O.value)),"FlowGraphBitwiseLeftShiftBlock",H)}}(0,t.g)("FlowGraphBitwiseLeftShiftBlock",dH);class vH extends p.b{constructor(H){super(q.l,q.l,q.l,((H,O)=>new h.d(H.value>>O.value)),"FlowGraphBitwiseRightShiftBlock",H)}}(0,t.g)("FlowGraphBitwiseRightShiftBlock",vH);class zH extends w.b{constructor(H){super(q.l,q.l,(H=>new h.d(Math.clz32(H.value))),"FlowGraphLeadingZerosBlock",H)}}(0,t.g)("FlowGraphLeadingZerosBlock",zH);class mH extends w.b{constructor(H){super(q.l,q.l,(H=>new h.d(H.value?31-Math.clz32(H.value&-H.value):32)),"FlowGraphTrailingZerosBlock",H)}}(0,t.g)("FlowGraphTrailingZerosBlock",mH);class rH extends w.b{constructor(H){super(q.l,q.l,(H=>new h.d(function(H){let O=0;for(;H;)O+=1&H,H>>=1;return O}(H.value))),"FlowGraphOneBitsCounterBlock",H)}}(0,t.g)("FlowGraphOneBitsCounterBlock",rH)},14515:(H,O,S)=>{S.d(O,{b:()=>q});var t=S(14517);class q extends t.e{constructor(H,O,S,t,q,p){super(S,p),this._operation=t,this._className=q,this.a=this.registerDataInput("a",H),this.b=this.registerDataInput("b",O)}_doOperation(H){const O=this.a.getValue(H),S=this.b.getValue(H);return this._operation(O,S)}getClassName(){return this._className}}},14517:(H,O,S)=>{S.d(O,{e:()=>U});var t=S(13063),q=S(13035);const p="cachedOperationValue",G="cachedExecutionId";class U extends t.c{constructor(H,O){super(O),this.value=this.registerDataOutput("value",H),this.isValid=this.registerDataOutput("isValid",q.i)}_updateOutputs(H){const O=H._getExecutionVariable(this,G,-1),S=H._getExecutionVariable(this,p,null);if(void 0!==S&&null!==S&&O===H.executionId)this.isValid.setValue(!0,H),this.value.setValue(S,H);else try{const O=this._doOperation(H);if(void 0===O||null===O)return void this.isValid.setValue(!1,H);H._setExecutionVariable(this,p,O),H._setExecutionVariable(this,G,H.executionId),this.value.setValue(O,H),this.isValid.setValue(!0,H)}catch(t){this.isValid.setValue(!1,H)}}}},14523:(H,O,S)=>{S.d(O,{b:()=>q});var t=S(14517);class q extends t.e{constructor(H,O,S,t,q){super(O,q),this._operation=S,this._className=t,this.a=this.registerDataInput("a",H)}_doOperation(H){return this._operation(this.a.getValue(H))}getClassName(){return this._className}}}}]);