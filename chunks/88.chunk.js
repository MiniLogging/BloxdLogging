"use strict";(self.fwuvyyymhp8=self.fwuvyyymhp8||[]).push([[88],{15579:(N,U,V)=>{V.r(U),V.d(U,{FlowGraphAbsBlock:()=>W,FlowGraphAcosBlock:()=>nN,FlowGraphAcoshBlock:()=>kN,FlowGraphAddBlock:()=>C,FlowGraphAsinBlock:()=>tN,FlowGraphAsinhBlock:()=>pN,FlowGraphAtan2Block:()=>iN,FlowGraphAtanBlock:()=>qN,FlowGraphAtanhBlock:()=>BN,FlowGraphBitwiseAndBlock:()=>HN,FlowGraphBitwiseLeftShiftBlock:()=>sN,FlowGraphBitwiseNotBlock:()=>cN,FlowGraphBitwiseOrBlock:()=>YN,FlowGraphBitwiseRightShiftBlock:()=>MN,FlowGraphBitwiseXorBlock:()=>WN,FlowGraphCeilBlock:()=>mN,FlowGraphClampBlock:()=>D,FlowGraphCosBlock:()=>VN,FlowGraphCoshBlock:()=>SN,FlowGraphCubeRootBlock:()=>vN,FlowGraphDegToRadBlock:()=>y,FlowGraphDivideBlock:()=>d,FlowGraphEBlock:()=>v,FlowGraphEqualityBlock:()=>j,FlowGraphExpBlock:()=>CN,FlowGraphFloorBlock:()=>a,FlowGraphFractionBlock:()=>X,FlowGraphGreaterThanBlock:()=>f,FlowGraphGreaterThanOrEqualBlock:()=>O,FlowGraphInfBlock:()=>c,FlowGraphIsInfinityBlock:()=>b,FlowGraphIsNanBlock:()=>Z,FlowGraphLeadingZerosBlock:()=>aN,FlowGraphLessThanBlock:()=>P,FlowGraphLessThanOrEqualBlock:()=>T,FlowGraphLog10Block:()=>dN,FlowGraphLog2Block:()=>JN,FlowGraphLogBlock:()=>xN,FlowGraphMathInterpolationBlock:()=>K,FlowGraphMaxBlock:()=>I,FlowGraphMinBlock:()=>L,FlowGraphModuloBlock:()=>u,FlowGraphMultiplyBlock:()=>J,FlowGraphNaNBlock:()=>H,FlowGraphNegationBlock:()=>e,FlowGraphOneBitsCounterBlock:()=>wN,FlowGraphPiBlock:()=>h,FlowGraphPowerBlock:()=>hN,FlowGraphRadToDegBlock:()=>NN,FlowGraphRandomBlock:()=>r,FlowGraphRoundBlock:()=>w,FlowGraphSaturateBlock:()=>g,FlowGraphSignBlock:()=>s,FlowGraphSinBlock:()=>UN,FlowGraphSinhBlock:()=>zN,FlowGraphSquareRootBlock:()=>rN,FlowGraphSubtractBlock:()=>x,FlowGraphTanBlock:()=>AN,FlowGraphTanhBlock:()=>EN,FlowGraphTrailingZerosBlock:()=>mU,FlowGraphTruncBlock:()=>M});var A=V(12344),t=V(14036),n=V(15587),q=V(15590);class i extends q.c{constructor(N,U,V,A){super(N,A),this._operation=U,this._className=V}_doOperation(N){return this._operation(N)}getClassName(){return this._className}}var z=V(12383),S=V(15599);class E extends q.c{constructor(N,U,V,A,t,n,q){super(A,q),this._operation=t,this._className=n,this.a=this.registerDataInput("a",N),this.b=this.registerDataInput("b",U),this.c=this.registerDataInput("c",V)}_doOperation(N){return this._operation(this.a.getValue(N),this.b.getValue(N),this.c.getValue(N))}getClassName(){return this._className}}var p=V(14031),k=V(14045),B=V(14069);class C extends n.b{constructor(N){super((0,t.F)(null===N||void 0===N?void 0:N.type),(0,t.F)(null===N||void 0===N?void 0:N.type),(0,t.F)(null===N||void 0===N?void 0:N.type),((N,U)=>this._polymorphicAdd(N,U)),"FlowGraphAddBlock",N)}_polymorphicAdd(N,U){const V=(0,B.m)(N),A=(0,B.m)(U);if((0,B.i)(V,A)||(0,B.e)(V,A)||(0,B.c)(V,A))return N.add(U);if("Quaternion"===V||"Vector4"===A)return new z.Vector4(N.x,N.y,N.z,N.w).addInPlace(U);if("Vector4"===V||"Quaternion"===A)return N.add(U);var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof N!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,B.s)(N)+(0,B.s)(U)}}(0,A.e)("FlowGraphAddBlock",C);class x extends n.b{constructor(N){super((0,t.F)(null===N||void 0===N?void 0:N.type),(0,t.F)(null===N||void 0===N?void 0:N.type),(0,t.F)(null===N||void 0===N?void 0:N.type),((N,U)=>this._polymorphicSubtract(N,U)),"FlowGraphSubtractBlock",N)}_polymorphicSubtract(N,U){const V=(0,B.m)(N),A=(0,B.m)(U);if((0,B.i)(V,A)||(0,B.c)(V,A)||(0,B.e)(V,A))return N.xU(U);if("Quaternion"===V||"Vector4"===A)return new z.Vector4(N.x,N.y,N.z,N.w).Vp(U);if("Vector4"===V||"Quaternion"===A)return N.xU(U);var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof N!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,B.s)(N)-(0,B.s)(U)}}(0,A.e)("FlowGraphSubtractBlock",x);class J extends n.b{constructor(N){super((0,t.F)(null===N||void 0===N?void 0:N.type),(0,t.F)(null===N||void 0===N?void 0:N.type),(0,t.F)(null===N||void 0===N?void 0:N.type),((N,U)=>this._polymorphicMultiply(N,U)),"FlowGraphMultiplyBlock",N)}_polymorphicMultiply(N,U){const V=(0,B.m)(N),A=(0,B.m)(U);if((0,B.i)(V,A)||(0,B.c)(V,A))return N.multiply(U);if("Quaternion"===V||"Vector4"===A)return new z.Vector4(N.x,N.y,N.z,N.w).multiplyInPlace(U);if("Vector4"===V||"Quaternion"===A)return N.multiply(U);if((0,B.e)(V,A)){var t;if(null!==(t=this.config)&&void 0!==t&&t.useMatrixPerComponent){const A=N.m;for(let N=0;N<A.length;N++)A[N]*=U.m[N];return"Matrix2D"===V?new k.c(A):"Matrix3D"===V?new k.d(A):z.Matrix.vU(A)}return U.multiply(N)}var n;if(null!==(n=this.config)&&void 0!==n&&n.preventIntegerFloatArithmetic&&typeof N!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,B.s)(N)*(0,B.s)(U)}}(0,A.e)("FlowGraphMultiplyBlock",J);class d extends n.b{constructor(N){super((0,t.F)(null===N||void 0===N?void 0:N.type),(0,t.F)(null===N||void 0===N?void 0:N.type),(0,t.F)(null===N||void 0===N?void 0:N.type),((N,U)=>this._polymorphicDivide(N,U)),"FlowGraphDivideBlock",N)}_polymorphicDivide(N,U){const V=(0,B.m)(N),A=(0,B.m)(U);if((0,B.i)(V,A)||(0,B.c)(V,A))return N.divide(U);if("Quaternion"===V||"Quaternion"===A){const V=N.clone();return V.x/=U.x,V.y/=U.y,V.z/=U.z,V.w/=U.w,V}if("Quaternion"===V||"Vector4"===A)return new z.Vector4(N.x,N.y,N.z,N.w).divideInPlace(U);if("Vector4"===V||"Quaternion"===A)return N.divide(U);if((0,B.e)(V,A)){var t;if(null!==(t=this.config)&&void 0!==t&&t.useMatrixPerComponent){const A=N.m;for(let N=0;N<A.length;N++)A[N]/=U.m[N];return"Matrix2D"===V?new k.c(A):"Matrix3D"===V?new k.d(A):z.Matrix.vU(A)}return N.divide(U)}var n;if(null!==(n=this.config)&&void 0!==n&&n.preventIntegerFloatArithmetic&&typeof N!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,B.s)(N)/(0,B.s)(U)}}(0,A.e)("FlowGraphDivideBlock",d);class r extends i{constructor(N){super(t.p,(N=>this._random(N)),"FlowGraphRandomBlock",N),this.min=this.registerDataInput("min",t.p,(null===N||void 0===N?void 0:N.min)??0),this.max=this.registerDataInput("max",t.p,(null===N||void 0===N?void 0:N.max)??1),null!==N&&void 0!==N&&N.seed&&(this._seed=N.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const N=1e4*Math.sin(this._seed++);return N-Math.floor(N)}return Math.random()}_random(N){const U=this.min.getValue(N),V=this.max.getValue(N);return this._getRandomValue()*(V-U)+U}}(0,A.e)("FlowGraphRandomBlock",r);class v extends i{constructor(N){super(t.p,(()=>Math.E),"FlowGraphEBlock",N)}}(0,A.e)("FlowGraphEBlock",v);class h extends i{constructor(N){super(t.p,(()=>Math.PI),"FlowGraphPIBlock",N)}}(0,A.e)("FlowGraphPIBlock",h);class c extends i{constructor(N){super(t.p,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",N)}}(0,A.e)("FlowGraphInfBlock",c);class H extends i{constructor(N){super(t.p,(()=>Number.NaN),"FlowGraphNaNBlock",N)}}function Y(N,U){switch((0,B.m)(N)){case"FlowGraphInteger":return new p.b(U(N.value));case"Vector2":return new z.Vector2(U(N.x),U(N.y));case"CU":return new z.CU(U(N.x),U(N.y),U(N.z));case"Vector4":return new z.Vector4(U(N.x),U(N.y),U(N.z),U(N.w));case"Quaternion":return new z.Quaternion(U(N.x),U(N.y),U(N.z),U(N.w));case"Matrix":return z.Matrix.vU(N.m.map(U));case"Matrix2D":return new k.c(N.m.map(U));case"Matrix3D":return new k.d(N.m.map(U));default:return U(N)}}(0,A.e)("FlowGraphNaNBlock",H);class W extends S.e{constructor(N){super(t.p,t.p,(N=>this._polymorphicAbs(N)),"FlowGraphAbsBlock",N)}_polymorphicAbs(N){return Y(N,Math.abs)}}(0,A.e)("FlowGraphAbsBlock",W);class s extends S.e{constructor(N){super(t.p,t.p,(N=>this._polymorphicSign(N)),"FlowGraphSignBlock",N)}_polymorphicSign(N){return Y(N,Math.sign)}}(0,A.e)("FlowGraphSignBlock",s);class M extends S.e{constructor(N){super(t.p,t.p,(N=>this._polymorphicTrunc(N)),"FlowGraphTruncBlock",N)}_polymorphicTrunc(N){return Y(N,Math.trunc)}}(0,A.e)("FlowGraphTruncBlock",M);class a extends S.e{constructor(N){super(t.p,t.p,(N=>this._polymorphicFloor(N)),"FlowGraphFloorBlock",N)}_polymorphicFloor(N){return Y(N,Math.floor)}}(0,A.e)("FlowGraphFloorBlock",a);class mN extends S.e{constructor(N){super(t.b,t.b,(N=>this._polymorphicCeiling(N)),"FlowGraphCeilBlock",N)}_polymorphicCeiling(N){return Y(N,Math.ceil)}}(0,A.e)("FlowGraphCeilBlock",mN);class w extends S.e{constructor(N){super(t.b,t.b,(N=>this._polymorphicRound(N)),"FlowGraphRoundBlock",N)}_polymorphicRound(N){return Y(N,(N=>{var U;return N<0&&null!==(U=this.config)&&void 0!==U&&U.roundHalfAwayFromZero?-Math.round(-N):Math.round(N)}))}}(0,A.e)("FlowGraphRoundBlock",w);class X extends S.e{constructor(N){super(t.b,t.b,(N=>this._polymorphicFraction(N)),"FlowGraphFractBlock",N)}_polymorphicFraction(N){return Y(N,(N=>N-Math.floor(N)))}}(0,A.e)("FlowGraphFractBlock",X);class e extends S.e{constructor(N){super(t.b,t.b,(N=>this._polymorphicNeg(N)),"FlowGraphNegationBlock",N)}_polymorphicNeg(N){return Y(N,(N=>-N))}}function Q(N,U,V){switch((0,B.m)(N)){case"FlowGraphInteger":return new p.b(V(N.value,U.value));case"Vector2":return new z.Vector2(V(N.x,U.x),V(N.y,U.y));case"CU":return new z.CU(V(N.x,U.x),V(N.y,U.y),V(N.z,U.z));case"Vector4":return new z.Vector4(V(N.x,U.x),V(N.y,U.y),V(N.z,U.z),V(N.w,U.w));case"Quaternion":return new z.Quaternion(V(N.x,U.x),V(N.y,U.y),V(N.z,U.z),V(N.w,U.w));case"Matrix":return z.Matrix.vU(N.m.map(((N,A)=>V(N,U.m[A]))));case"Matrix2D":return new k.c(N.m.map(((N,A)=>V(N,U.m[A]))));case"Matrix3D":return new k.d(N.m.map(((N,A)=>V(N,U.m[A]))));default:return V((0,B.s)(N),(0,B.s)(U))}}(0,A.e)("FlowGraphNegationBlock",e);class u extends n.b{constructor(N){super(t.b,t.b,t.b,((N,U)=>this._polymorphicRemainder(N,U)),"FlowGraphModuloBlock",N)}_polymorphicRemainder(N,U){return Q(N,U,((N,U)=>N%U))}}(0,A.e)("FlowGraphModuloBlock",u);class L extends n.b{constructor(N){super(t.b,t.b,t.b,((N,U)=>this._polymorphicMin(N,U)),"FlowGraphMinBlock",N)}_polymorphicMin(N,U){return Q(N,U,Math.min)}}(0,A.e)("FlowGraphMinBlock",L);class I extends n.b{constructor(N){super(t.b,t.b,t.b,((N,U)=>this._polymorphicMax(N,U)),"FlowGraphMaxBlock",N)}_polymorphicMax(N,U){return Q(N,U,Math.max)}}function o(N,U,V){return Math.min(Math.max(N,Math.min(U,V)),Math.max(U,V))}function R(N,U,V,A){switch((0,B.m)(N)){case"FlowGraphInteger":return new p.b(A(N.value,U.value,V.value));case"Vector2":return new z.Vector2(A(N.x,U.x,V.x),A(N.y,U.y,V.y));case"CU":return new z.CU(A(N.x,U.x,V.x),A(N.y,U.y,V.y),A(N.z,U.z,V.z));case"Vector4":return new z.Vector4(A(N.x,U.x,V.x),A(N.y,U.y,V.y),A(N.z,U.z,V.z),A(N.w,U.w,V.w));case"Quaternion":return new z.Quaternion(A(N.x,U.x,V.x),A(N.y,U.y,V.y),A(N.z,U.z,V.z),A(N.w,U.w,V.w));case"Matrix":return z.Matrix.vU(N.m.map(((N,t)=>A(N,U.m[t],V.m[t]))));case"Matrix2D":return new k.c(N.m.map(((N,t)=>A(N,U.m[t],V.m[t]))));case"Matrix3D":return new k.d(N.m.map(((N,t)=>A(N,U.m[t],V.m[t]))));default:return A((0,B.s)(N),(0,B.s)(U),(0,B.s)(V))}}(0,A.e)("FlowGraphMaxBlock",I);class D extends E{constructor(N){super(t.b,t.b,t.b,t.b,((N,U,V)=>this._polymorphicClamp(N,U,V)),"FlowGraphClampBlock",N)}_polymorphicClamp(N,U,V){return R(N,U,V,o)}}function G(N){return Math.min(Math.max(N,0),1)}(0,A.e)("FlowGraphClampBlock",D);class g extends S.e{constructor(N){super(t.b,t.b,(N=>this._polymorphicSaturate(N)),"FlowGraphSaturateBlock",N)}_polymorphicSaturate(N){return Y(N,G)}}function l(N,U,V){return(1-V)*N+V*U}(0,A.e)("FlowGraphSaturateBlock",g);class K extends E{constructor(N){super(t.b,t.b,t.b,t.b,((N,U,V)=>this._polymorphicInterpolate(N,U,V)),"FlowGraphMathInterpolationBlock",N)}_polymorphicInterpolate(N,U,V){return R(N,U,V,l)}}(0,A.e)("FlowGraphMathInterpolationBlock",K);class j extends n.b{constructor(N){super(t.b,t.b,t.d,((N,U)=>this._polymorphicEq(N,U)),"FlowGraphEqualityBlock",N)}_polymorphicEq(N,U){const V=(0,B.m)(N),A=(0,B.m)(U);return typeof N===typeof U&&((0,B.i)(V,A)||(0,B.e)(V,A)||(0,B.c)(V,A)?N.equals(U):N===U)}}function F(N,U,V){if((0,B.t)(N)&&(0,B.t)(U))return V((0,B.s)(N),(0,B.s)(U));throw new Error(`Cannot compare ${N} and ${U}`)}(0,A.e)("FlowGraphEqualityBlock",j);class P extends n.b{constructor(N){super(t.b,t.b,t.d,((N,U)=>this._polymorphicLessThan(N,U)),"FlowGraphLessThanBlock",N)}_polymorphicLessThan(N,U){return F(N,U,((N,U)=>N<U))}}(0,A.e)("FlowGraphLessThanBlock",P);class T extends n.b{constructor(N){super(t.b,t.b,t.d,((N,U)=>this._polymorphicLessThanOrEqual(N,U)),"FlowGraphLessThanOrEqualBlock",N)}_polymorphicLessThanOrEqual(N,U){return F(N,U,((N,U)=>N<=U))}}(0,A.e)("FlowGraphLessThanOrEqualBlock",T);class f extends n.b{constructor(N){super(t.b,t.b,t.d,((N,U)=>this._polymorphicGreaterThan(N,U)),"FlowGraphGreaterThanBlock",N)}_polymorphicGreaterThan(N,U){return F(N,U,((N,U)=>N>U))}}(0,A.e)("FlowGraphGreaterThanBlock",f);class O extends n.b{constructor(N){super(t.b,t.b,t.d,((N,U)=>this._polymorphicGreaterThanOrEqual(N,U)),"FlowGraphGreaterThanOrEqualBlock",N)}_polymorphicGreaterThanOrEqual(N,U){return F(N,U,((N,U)=>N>=U))}}(0,A.e)("FlowGraphGreaterThanOrEqualBlock",O);class Z extends S.e{constructor(N){super(t.b,t.d,(N=>this._polymorphicIsNan(N)),"FlowGraphIsNaNBlock",N)}_polymorphicIsNan(N){if((0,B.t)(N,!0))return isNaN((0,B.s)(N));throw new Error(`Cannot get NaN of ${N}`)}}(0,A.e)("FlowGraphIsNaNBlock",Z);class b extends S.e{constructor(N){super(t.b,t.d,(N=>this._polymorphicIsInf(N)),"FlowGraphIsInfBlock",N)}_polymorphicIsInf(N){if((0,B.t)(N))return!isFinite((0,B.s)(N));throw new Error(`Cannot get isInf of ${N}`)}}(0,A.e)("FlowGraphIsInfBlock",b);class y extends S.e{constructor(N){super(t.b,t.b,(N=>this._polymorphicDegToRad(N)),"FlowGraphDegToRadBlock",N)}_degToRad(N){return N*Math.PI/180}_polymorphicDegToRad(N){return Y(N,this._degToRad)}}(0,A.e)("FlowGraphDegToRadBlock",y);class NN extends S.e{constructor(N){super(t.b,t.b,(N=>this._polymorphicRadToDeg(N)),"FlowGraphRadToDegBlock",N)}_radToDeg(N){return 180*N/Math.PI}_polymorphicRadToDeg(N){return Y(N,this._radToDeg)}}(0,A.e)("FlowGraphRadToDegBlock",NN);class UN extends S.e{constructor(N){super(t.p,t.p,(N=>this._polymorphicSin(N)),"FlowGraphSinBlock",N)}_polymorphicSin(N){return Y(N,Math.sin)}}class VN extends S.e{constructor(N){super(t.p,t.p,(N=>this._polymorphicCos(N)),"FlowGraphCosBlock",N)}_polymorphicCos(N){return Y(N,Math.cos)}}class AN extends S.e{constructor(N){super(t.p,t.p,(N=>this._polymorphicTan(N)),"FlowGraphTanBlock",N)}_polymorphicTan(N){return Y(N,Math.tan)}}class tN extends S.e{constructor(N){super(t.p,t.p,(N=>this._polymorphicAsin(N)),"FlowGraphASinBlock",N)}_polymorphicAsin(N){return Y(N,Math.asin)}}(0,A.e)("FlowGraphASinBlock",tN);class nN extends S.e{constructor(N){super(t.p,t.p,(N=>this._polymorphicAcos(N)),"FlowGraphACosBlock",N)}_polymorphicAcos(N){return Y(N,Math.acos)}}(0,A.e)("FlowGraphACosBlock",nN);class qN extends S.e{constructor(N){super(t.p,t.p,(N=>this._polymorphicAtan(N)),"FlowGraphATanBlock",N)}_polymorphicAtan(N){return Y(N,Math.atan)}}(0,A.e)("FlowGraphATanBlock",qN);class iN extends n.b{constructor(N){super(t.b,t.b,t.b,((N,U)=>this._polymorphicAtan2(N,U)),"FlowGraphATan2Block",N)}_polymorphicAtan2(N,U){return Q(N,U,Math.atan2)}}(0,A.e)("FlowGraphATan2Block",iN);class zN extends S.e{constructor(N){super(t.b,t.b,(N=>this._polymorphicSinh(N)),"FlowGraphSinhBlock",N)}_polymorphicSinh(N){return Y(N,Math.sinh)}}(0,A.e)("FlowGraphSinhBlock",zN);class SN extends S.e{constructor(N){super(t.b,t.b,(N=>this._polymorphicCosh(N)),"FlowGraphCoshBlock",N)}_polymorphicCosh(N){return Y(N,Math.cosh)}}(0,A.e)("FlowGraphCoshBlock",SN);class EN extends S.e{constructor(N){super(t.b,t.b,(N=>this._polymorphicTanh(N)),"FlowGraphTanhBlock",N)}_polymorphicTanh(N){return Y(N,Math.tanh)}}(0,A.e)("FlowGraphTanhBlock",EN);class pN extends S.e{constructor(N){super(t.b,t.p,(N=>this._polymorphicAsinh(N)),"FlowGraphASinhBlock",N)}_polymorphicAsinh(N){return Y(N,Math.asinh)}}(0,A.e)("FlowGraphASinhBlock",pN);class kN extends S.e{constructor(N){super(t.b,t.p,(N=>this._polymorphicAcosh(N)),"FlowGraphACoshBlock",N)}_polymorphicAcosh(N){return Y(N,Math.acosh)}}(0,A.e)("FlowGraphACoshBlock",kN);class BN extends S.e{constructor(N){super(t.b,t.p,(N=>this._polymorphicAtanh(N)),"FlowGraphATanhBlock",N)}_polymorphicAtanh(N){return Y(N,Math.atanh)}}(0,A.e)("FlowGraphATanhBlock",BN);class CN extends S.e{constructor(N){super(t.b,t.p,(N=>this._polymorphicExp(N)),"FlowGraphExponentialBlock",N)}_polymorphicExp(N){return Y(N,Math.exp)}}(0,A.e)("FlowGraphExponentialBlock",CN);class xN extends S.e{constructor(N){super(t.b,t.p,(N=>this._polymorphicLog(N)),"FlowGraphLogBlock",N)}_polymorphicLog(N){return Y(N,Math.log)}}(0,A.e)("FlowGraphLogBlock",xN);class JN extends S.e{constructor(N){super(t.b,t.p,(N=>this._polymorphicLog2(N)),"FlowGraphLog2Block",N)}_polymorphicLog2(N){return Y(N,Math.log2)}}(0,A.e)("FlowGraphLog2Block",JN);class dN extends S.e{constructor(N){super(t.b,t.p,(N=>this._polymorphicLog10(N)),"FlowGraphLog10Block",N)}_polymorphicLog10(N){return Y(N,Math.log10)}}(0,A.e)("FlowGraphLog10Block",dN);class rN extends S.e{constructor(N){super(t.b,t.p,(N=>this._polymorphicSqrt(N)),"FlowGraphSquareRootBlock",N)}_polymorphicSqrt(N){return Y(N,Math.sqrt)}}(0,A.e)("FlowGraphSquareRootBlock",rN);class vN extends S.e{constructor(N){super(t.b,t.p,(N=>this._polymorphicCubeRoot(N)),"FlowGraphCubeRootBlock",N)}_polymorphicCubeRoot(N){return Y(N,Math.cbrt)}}(0,A.e)("FlowGraphCubeRootBlock",vN);class hN extends n.b{constructor(N){super(t.b,t.p,t.p,((N,U)=>this._polymorphicPow(N,U)),"FlowGraphPowerBlock",N)}_polymorphicPow(N,U){return Q(N,U,Math.pow)}}(0,A.e)("FlowGraphPowerBlock",hN);class cN extends S.e{constructor(N){super((0,t.F)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,t.F)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(N=>"boolean"===typeof N?!N:"number"===typeof N?~N:new p.b(~N.value)),"FlowGraphBitwiseNotBlock",N)}}(0,A.e)("FlowGraphBitwiseNotBlock",cN);class HN extends n.b{constructor(N){super((0,t.F)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,t.F)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,t.F)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),((N,U)=>{if("boolean"===typeof N&&"boolean"===typeof U)return N&&U;if("number"===typeof N&&"number"===typeof U)return N&U;if("object"===typeof N&&"object"===typeof U)return new p.b(N.value&U.value);throw new Error(`Cannot perform bitwise AND on ${N} and ${U}`)}),"FlowGraphBitwiseAndBlock",N)}}(0,A.e)("FlowGraphBitwiseAndBlock",HN);class YN extends n.b{constructor(N){super((0,t.F)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,t.F)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,t.F)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),((N,U)=>{if("boolean"===typeof N&&"boolean"===typeof U)return N||U;if("number"===typeof N&&"number"===typeof U)return N|U;if("object"===typeof N&&"object"===typeof U)return new p.b(N.value|U.value);throw new Error(`Cannot perform bitwise OR on ${N} and ${U}`)}),"FlowGraphBitwiseOrBlock",N)}}(0,A.e)("FlowGraphBitwiseOrBlock",YN);class WN extends n.b{constructor(N){super((0,t.F)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,t.F)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,t.F)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),((N,U)=>{if("boolean"===typeof N&&"boolean"===typeof U)return N!==U;if("number"===typeof N&&"number"===typeof U)return N^U;if("object"===typeof N&&"object"===typeof U)return new p.b(N.value^U.value);throw new Error(`Cannot perform bitwise XOR on ${N} and ${U}`)}),"FlowGraphBitwiseXorBlock",N)}}(0,A.e)("FlowGraphBitwiseXorBlock",WN);class sN extends n.b{constructor(N){super(t.g,t.g,t.g,((N,U)=>new p.b(N.value<<U.value)),"FlowGraphBitwiseLeftShiftBlock",N)}}(0,A.e)("FlowGraphBitwiseLeftShiftBlock",sN);class MN extends n.b{constructor(N){super(t.g,t.g,t.g,((N,U)=>new p.b(N.value>>U.value)),"FlowGraphBitwiseRightShiftBlock",N)}}(0,A.e)("FlowGraphBitwiseRightShiftBlock",MN);class aN extends S.e{constructor(N){super(t.g,t.g,(N=>new p.b(Math.clz32(N.value))),"FlowGraphLeadingZerosBlock",N)}}(0,A.e)("FlowGraphLeadingZerosBlock",aN);class mU extends S.e{constructor(N){super(t.g,t.g,(N=>new p.b(N.value?31-Math.clz32(N.value&-N.value):32)),"FlowGraphTrailingZerosBlock",N)}}(0,A.e)("FlowGraphTrailingZerosBlock",mU);class wN extends S.e{constructor(N){super(t.g,t.g,(N=>new p.b(function(N){let U=0;for(;N;)U+=1&N,N>>=1;return U}(N.value))),"FlowGraphOneBitsCounterBlock",N)}}(0,A.e)("FlowGraphOneBitsCounterBlock",wN)},15587:(N,U,V)=>{V.d(U,{b:()=>t});var A=V(15590);class t extends A.c{constructor(N,U,V,A,t,n){super(V,n),this._operation=A,this._className=t,this.a=this.registerDataInput("a",N),this.b=this.registerDataInput("b",U)}_doOperation(N){const U=this.a.getValue(N),V=this.b.getValue(N);return this._operation(U,V)}getClassName(){return this._className}}},15590:(N,U,V)=>{V.d(U,{c:()=>i});var A=V(14058),t=V(14036);const n="cachedOperationValue",q="cachedExecutionId";class i extends A.c{constructor(N,U){super(U),this.value=this.registerDataOutput("value",N),this.isValid=this.registerDataOutput("isValid",t.d)}_updateOutputs(N){const U=N._getExecutionVariable(this,q,-1),V=N._getExecutionVariable(this,n,null);if(void 0!==V&&null!==V&&U===N.executionId)this.isValid.setValue(!0,N),this.value.setValue(V,N);else try{const U=this._doOperation(N);if(void 0===U||null===U)return void this.isValid.setValue(!1,N);N._setExecutionVariable(this,n,U),N._setExecutionVariable(this,q,N.executionId),this.value.setValue(U,N),this.isValid.setValue(!0,N)}catch(A){this.isValid.setValue(!1,N)}}}},15599:(N,U,V)=>{V.d(U,{e:()=>t});var A=V(15590);class t extends A.c{constructor(N,U,V,A,t){super(U,t),this._operation=V,this._className=A,this.a=this.registerDataInput("a",N)}_doOperation(N){return this._operation(this.a.getValue(N))}getClassName(){return this._className}}}}]);