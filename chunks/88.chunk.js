"use strict";(self.i6szn8jgzh=self.i6szn8jgzh||[]).push([[88],{15074:(b,n,i)=>{i.r(n),i.d(n,{FlowGraphAbsBlock:()=>a,FlowGraphAcosBlock:()=>Qb,FlowGraphAcoshBlock:()=>Zb,FlowGraphAddBlock:()=>z,FlowGraphAsinBlock:()=>Vb,FlowGraphAsinhBlock:()=>Nb,FlowGraphAtan2Block:()=>Yb,FlowGraphAtanBlock:()=>Ub,FlowGraphAtanhBlock:()=>Tb,FlowGraphBitwiseAndBlock:()=>Mb,FlowGraphBitwiseLeftShiftBlock:()=>Db,FlowGraphBitwiseNotBlock:()=>ob,FlowGraphBitwiseOrBlock:()=>jb,FlowGraphBitwiseRightShiftBlock:()=>xb,FlowGraphBitwiseXorBlock:()=>ab,FlowGraphCeilBlock:()=>s,FlowGraphClampBlock:()=>k,FlowGraphCosBlock:()=>ib,FlowGraphCoshBlock:()=>Bb,FlowGraphCubeRootBlock:()=>db,FlowGraphDegToRadBlock:()=>F,FlowGraphDivideBlock:()=>O,FlowGraphEBlock:()=>d,FlowGraphEqualityBlock:()=>c,FlowGraphExpBlock:()=>zb,FlowGraphFloorBlock:()=>y,FlowGraphFractionBlock:()=>E,FlowGraphGreaterThanBlock:()=>l,FlowGraphGreaterThanOrEqualBlock:()=>v,FlowGraphInfBlock:()=>o,FlowGraphIsInfinityBlock:()=>f,FlowGraphIsNanBlock:()=>p,FlowGraphLeadingZerosBlock:()=>yb,FlowGraphLessThanBlock:()=>S,FlowGraphLessThanOrEqualBlock:()=>H,FlowGraphLog10Block:()=>Ob,FlowGraphLog2Block:()=>Ib,FlowGraphLogBlock:()=>Kb,FlowGraphMathInterpolationBlock:()=>P,FlowGraphMaxBlock:()=>W,FlowGraphMinBlock:()=>h,FlowGraphModuloBlock:()=>w,FlowGraphMultiplyBlock:()=>I,FlowGraphNaNBlock:()=>M,FlowGraphNegationBlock:()=>C,FlowGraphOneBitsCounterBlock:()=>Ab,FlowGraphPiBlock:()=>G,FlowGraphPowerBlock:()=>Gb,FlowGraphRadToDegBlock:()=>bb,FlowGraphRandomBlock:()=>u,FlowGraphRoundBlock:()=>A,FlowGraphSaturateBlock:()=>X,FlowGraphSignBlock:()=>D,FlowGraphSinBlock:()=>nb,FlowGraphSinhBlock:()=>Lb,FlowGraphSquareRootBlock:()=>ub,FlowGraphSubtractBlock:()=>K,FlowGraphTanBlock:()=>eb,FlowGraphTanhBlock:()=>mn,FlowGraphTrailingZerosBlock:()=>sb,FlowGraphTruncBlock:()=>x});var e=i(11734),V=i(13522),Q=i(15081),U=i(15083);class Y extends U.b{constructor(b,n,i,e){super(b,e),this._operation=n,this._className=i}_doOperation(b){return this._operation(b)}getClassName(){return this._className}}var L=i(11778),B=i(15089);class mb extends U.b{constructor(b,n,i,e,V,Q,U){super(e,U),this._operation=V,this._className=Q,this.a=this.registerDataInput("a",b),this.b=this.registerDataInput("b",n),this.c=this.registerDataInput("c",i)}_doOperation(b){return this._operation(this.a.getValue(b),this.b.getValue(b),this.c.getValue(b))}getClassName(){return this._className}}var N=i(13513),Z=i(13527),T=i(13560);class z extends Q.d{constructor(b){super((0,V.M)(null===b||void 0===b?void 0:b.type),(0,V.M)(null===b||void 0===b?void 0:b.type),(0,V.M)(null===b||void 0===b?void 0:b.type),((b,n)=>this._polymorphicAdd(b,n)),"FlowGraphAddBlock",b)}_polymorphicAdd(b,n){const i=(0,T.k)(b),e=(0,T.k)(n);if((0,T.j)(i,e)||(0,T.f)(i,e)||(0,T.b)(i,e))return b.add(n);if("Quaternion"===i||"Vector4"===e)return new L.Vector4(b.x,b.y,b.z,b.w).addInPlace(n);if("Vector4"===i||"Quaternion"===e)return b.add(n);var V;if(null!==(V=this.config)&&void 0!==V&&V.preventIntegerFloatArithmetic&&typeof b!==typeof n)throw new Error("Cannot add different types of numbers.");return(0,T.o)(b)+(0,T.o)(n)}}(0,e.i)("FlowGraphAddBlock",z);class K extends Q.d{constructor(b){super((0,V.M)(null===b||void 0===b?void 0:b.type),(0,V.M)(null===b||void 0===b?void 0:b.type),(0,V.M)(null===b||void 0===b?void 0:b.type),((b,n)=>this._polymorphicSubtract(b,n)),"FlowGraphSubtractBlock",b)}_polymorphicSubtract(b,n){const i=(0,T.k)(b),e=(0,T.k)(n);if((0,T.j)(i,e)||(0,T.b)(i,e)||(0,T.f)(i,e))return b.un(n);if("Quaternion"===i||"Vector4"===e)return new L.Vector4(b.x,b.y,b.z,b.w).lm(n);if("Vector4"===i||"Quaternion"===e)return b.un(n);var V;if(null!==(V=this.config)&&void 0!==V&&V.preventIntegerFloatArithmetic&&typeof b!==typeof n)throw new Error("Cannot add different types of numbers.");return(0,T.o)(b)-(0,T.o)(n)}}(0,e.i)("FlowGraphSubtractBlock",K);class I extends Q.d{constructor(b){super((0,V.M)(null===b||void 0===b?void 0:b.type),(0,V.M)(null===b||void 0===b?void 0:b.type),(0,V.M)(null===b||void 0===b?void 0:b.type),((b,n)=>this._polymorphicMultiply(b,n)),"FlowGraphMultiplyBlock",b)}_polymorphicMultiply(b,n){const i=(0,T.k)(b),e=(0,T.k)(n);if((0,T.j)(i,e)||(0,T.b)(i,e))return b.multiply(n);if("Quaternion"===i||"Vector4"===e)return new L.Vector4(b.x,b.y,b.z,b.w).multiplyInPlace(n);if("Vector4"===i||"Quaternion"===e)return b.multiply(n);if((0,T.f)(i,e)){var V;if(null!==(V=this.config)&&void 0!==V&&V.useMatrixPerComponent){const e=b.m;for(let b=0;b<e.length;b++)e[b]*=n.m[b];return"Matrix2D"===i?new Z.c(e):"Matrix3D"===i?new Z.d(e):L.Matrix.jn(e)}return n.multiply(b)}var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.preventIntegerFloatArithmetic&&typeof b!==typeof n)throw new Error("Cannot add different types of numbers.");return(0,T.o)(b)*(0,T.o)(n)}}(0,e.i)("FlowGraphMultiplyBlock",I);class O extends Q.d{constructor(b){super((0,V.M)(null===b||void 0===b?void 0:b.type),(0,V.M)(null===b||void 0===b?void 0:b.type),(0,V.M)(null===b||void 0===b?void 0:b.type),((b,n)=>this._polymorphicDivide(b,n)),"FlowGraphDivideBlock",b)}_polymorphicDivide(b,n){const i=(0,T.k)(b),e=(0,T.k)(n);if((0,T.j)(i,e)||(0,T.b)(i,e))return b.divide(n);if("Quaternion"===i||"Quaternion"===e){const i=b.clone();return i.x/=n.x,i.y/=n.y,i.z/=n.z,i.w/=n.w,i}if("Quaternion"===i||"Vector4"===e)return new L.Vector4(b.x,b.y,b.z,b.w).divideInPlace(n);if("Vector4"===i||"Quaternion"===e)return b.divide(n);if((0,T.f)(i,e)){var V;if(null!==(V=this.config)&&void 0!==V&&V.useMatrixPerComponent){const e=b.m;for(let b=0;b<e.length;b++)e[b]/=n.m[b];return"Matrix2D"===i?new Z.c(e):"Matrix3D"===i?new Z.d(e):L.Matrix.jn(e)}return b.divide(n)}var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.preventIntegerFloatArithmetic&&typeof b!==typeof n)throw new Error("Cannot add different types of numbers.");return(0,T.o)(b)/(0,T.o)(n)}}(0,e.i)("FlowGraphDivideBlock",O);class u extends Y{constructor(b){super(V.q,(b=>this._random(b)),"FlowGraphRandomBlock",b),this.min=this.registerDataInput("min",V.q,(null===b||void 0===b?void 0:b.min)??0),this.max=this.registerDataInput("max",V.q,(null===b||void 0===b?void 0:b.max)??1),null!==b&&void 0!==b&&b.seed&&(this._seed=b.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const b=1e4*Math.sin(this._seed++);return b-Math.floor(b)}return Math.random()}_random(b){const n=this.min.getValue(b),i=this.max.getValue(b);return this._getRandomValue()*(i-n)+n}}(0,e.i)("FlowGraphRandomBlock",u);class d extends Y{constructor(b){super(V.q,(()=>Math.E),"FlowGraphEBlock",b)}}(0,e.i)("FlowGraphEBlock",d);class G extends Y{constructor(b){super(V.q,(()=>Math.PI),"FlowGraphPIBlock",b)}}(0,e.i)("FlowGraphPIBlock",G);class o extends Y{constructor(b){super(V.q,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",b)}}(0,e.i)("FlowGraphInfBlock",o);class M extends Y{constructor(b){super(V.q,(()=>Number.NaN),"FlowGraphNaNBlock",b)}}function j(b,n){switch((0,T.k)(b)){case"FlowGraphInteger":return new N.b(n(b.value));case"Vector2":return new L.Vector2(n(b.x),n(b.y));case"On":return new L.On(n(b.x),n(b.y),n(b.z));case"Vector4":return new L.Vector4(n(b.x),n(b.y),n(b.z),n(b.w));case"Quaternion":return new L.Quaternion(n(b.x),n(b.y),n(b.z),n(b.w));case"Matrix":return L.Matrix.jn(b.m.map(n));case"Matrix2D":return new Z.c(b.m.map(n));case"Matrix3D":return new Z.d(b.m.map(n));default:return n(b)}}(0,e.i)("FlowGraphNaNBlock",M);class a extends B.b{constructor(b){super(V.q,V.q,(b=>this._polymorphicAbs(b)),"FlowGraphAbsBlock",b)}_polymorphicAbs(b){return j(b,Math.abs)}}(0,e.i)("FlowGraphAbsBlock",a);class D extends B.b{constructor(b){super(V.q,V.q,(b=>this._polymorphicSign(b)),"FlowGraphSignBlock",b)}_polymorphicSign(b){return j(b,Math.sign)}}(0,e.i)("FlowGraphSignBlock",D);class x extends B.b{constructor(b){super(V.q,V.q,(b=>this._polymorphicTrunc(b)),"FlowGraphTruncBlock",b)}_polymorphicTrunc(b){return j(b,Math.trunc)}}(0,e.i)("FlowGraphTruncBlock",x);class y extends B.b{constructor(b){super(V.q,V.q,(b=>this._polymorphicFloor(b)),"FlowGraphFloorBlock",b)}_polymorphicFloor(b){return j(b,Math.floor)}}(0,e.i)("FlowGraphFloorBlock",y);class s extends B.b{constructor(b){super(V.c,V.c,(b=>this._polymorphicCeiling(b)),"FlowGraphCeilBlock",b)}_polymorphicCeiling(b){return j(b,Math.ceil)}}(0,e.i)("FlowGraphCeilBlock",s);class A extends B.b{constructor(b){super(V.c,V.c,(b=>this._polymorphicRound(b)),"FlowGraphRoundBlock",b)}_polymorphicRound(b){return j(b,(b=>{var n;return b<0&&null!==(n=this.config)&&void 0!==n&&n.roundHalfAwayFromZero?-Math.round(-b):Math.round(b)}))}}(0,e.i)("FlowGraphRoundBlock",A);class E extends B.b{constructor(b){super(V.c,V.c,(b=>this._polymorphicFraction(b)),"FlowGraphFractBlock",b)}_polymorphicFraction(b){return j(b,(b=>b-Math.floor(b)))}}(0,e.i)("FlowGraphFractBlock",E);class C extends B.b{constructor(b){super(V.c,V.c,(b=>this._polymorphicNeg(b)),"FlowGraphNegationBlock",b)}_polymorphicNeg(b){return j(b,(b=>-b))}}function t(b,n,i){switch((0,T.k)(b)){case"FlowGraphInteger":return new N.b(i(b.value,n.value));case"Vector2":return new L.Vector2(i(b.x,n.x),i(b.y,n.y));case"On":return new L.On(i(b.x,n.x),i(b.y,n.y),i(b.z,n.z));case"Vector4":return new L.Vector4(i(b.x,n.x),i(b.y,n.y),i(b.z,n.z),i(b.w,n.w));case"Quaternion":return new L.Quaternion(i(b.x,n.x),i(b.y,n.y),i(b.z,n.z),i(b.w,n.w));case"Matrix":return L.Matrix.jn(b.m.map(((b,e)=>i(b,n.m[e]))));case"Matrix2D":return new Z.c(b.m.map(((b,e)=>i(b,n.m[e]))));case"Matrix3D":return new Z.d(b.m.map(((b,e)=>i(b,n.m[e]))));default:return i((0,T.o)(b),(0,T.o)(n))}}(0,e.i)("FlowGraphNegationBlock",C);class w extends Q.d{constructor(b){super(V.c,V.c,V.c,((b,n)=>this._polymorphicRemainder(b,n)),"FlowGraphModuloBlock",b)}_polymorphicRemainder(b,n){return t(b,n,((b,n)=>b%n))}}(0,e.i)("FlowGraphModuloBlock",w);class h extends Q.d{constructor(b){super(V.c,V.c,V.c,((b,n)=>this._polymorphicMin(b,n)),"FlowGraphMinBlock",b)}_polymorphicMin(b,n){return t(b,n,Math.min)}}(0,e.i)("FlowGraphMinBlock",h);class W extends Q.d{constructor(b){super(V.c,V.c,V.c,((b,n)=>this._polymorphicMax(b,n)),"FlowGraphMaxBlock",b)}_polymorphicMax(b,n){return t(b,n,Math.max)}}function J(b,n,i){return Math.min(Math.max(b,Math.min(n,i)),Math.max(n,i))}function R(b,n,i,e){switch((0,T.k)(b)){case"FlowGraphInteger":return new N.b(e(b.value,n.value,i.value));case"Vector2":return new L.Vector2(e(b.x,n.x,i.x),e(b.y,n.y,i.y));case"On":return new L.On(e(b.x,n.x,i.x),e(b.y,n.y,i.y),e(b.z,n.z,i.z));case"Vector4":return new L.Vector4(e(b.x,n.x,i.x),e(b.y,n.y,i.y),e(b.z,n.z,i.z),e(b.w,n.w,i.w));case"Quaternion":return new L.Quaternion(e(b.x,n.x,i.x),e(b.y,n.y,i.y),e(b.z,n.z,i.z),e(b.w,n.w,i.w));case"Matrix":return L.Matrix.jn(b.m.map(((b,V)=>e(b,n.m[V],i.m[V]))));case"Matrix2D":return new Z.c(b.m.map(((b,V)=>e(b,n.m[V],i.m[V]))));case"Matrix3D":return new Z.d(b.m.map(((b,V)=>e(b,n.m[V],i.m[V]))));default:return e((0,T.o)(b),(0,T.o)(n),(0,T.o)(i))}}(0,e.i)("FlowGraphMaxBlock",W);class k extends mb{constructor(b){super(V.c,V.c,V.c,V.c,((b,n,i)=>this._polymorphicClamp(b,n,i)),"FlowGraphClampBlock",b)}_polymorphicClamp(b,n,i){return R(b,n,i,J)}}function r(b){return Math.min(Math.max(b,0),1)}(0,e.i)("FlowGraphClampBlock",k);class X extends B.b{constructor(b){super(V.c,V.c,(b=>this._polymorphicSaturate(b)),"FlowGraphSaturateBlock",b)}_polymorphicSaturate(b){return j(b,r)}}function g(b,n,i){return(1-i)*b+i*n}(0,e.i)("FlowGraphSaturateBlock",X);class P extends mb{constructor(b){super(V.c,V.c,V.c,V.c,((b,n,i)=>this._polymorphicInterpolate(b,n,i)),"FlowGraphMathInterpolationBlock",b)}_polymorphicInterpolate(b,n,i){return R(b,n,i,g)}}(0,e.i)("FlowGraphMathInterpolationBlock",P);class c extends Q.d{constructor(b){super(V.c,V.c,V.f,((b,n)=>this._polymorphicEq(b,n)),"FlowGraphEqualityBlock",b)}_polymorphicEq(b,n){const i=(0,T.k)(b),e=(0,T.k)(n);return typeof b===typeof n&&((0,T.j)(i,e)||(0,T.f)(i,e)||(0,T.b)(i,e)?b.equals(n):b===n)}}function q(b,n,i){if((0,T.r)(b)&&(0,T.r)(n))return i((0,T.o)(b),(0,T.o)(n));throw new Error(`Cannot compare ${b} and ${n}`)}(0,e.i)("FlowGraphEqualityBlock",c);class S extends Q.d{constructor(b){super(V.c,V.c,V.f,((b,n)=>this._polymorphicLessThan(b,n)),"FlowGraphLessThanBlock",b)}_polymorphicLessThan(b,n){return q(b,n,((b,n)=>b<n))}}(0,e.i)("FlowGraphLessThanBlock",S);class H extends Q.d{constructor(b){super(V.c,V.c,V.f,((b,n)=>this._polymorphicLessThanOrEqual(b,n)),"FlowGraphLessThanOrEqualBlock",b)}_polymorphicLessThanOrEqual(b,n){return q(b,n,((b,n)=>b<=n))}}(0,e.i)("FlowGraphLessThanOrEqualBlock",H);class l extends Q.d{constructor(b){super(V.c,V.c,V.f,((b,n)=>this._polymorphicGreaterThan(b,n)),"FlowGraphGreaterThanBlock",b)}_polymorphicGreaterThan(b,n){return q(b,n,((b,n)=>b>n))}}(0,e.i)("FlowGraphGreaterThanBlock",l);class v extends Q.d{constructor(b){super(V.c,V.c,V.f,((b,n)=>this._polymorphicGreaterThanOrEqual(b,n)),"FlowGraphGreaterThanOrEqualBlock",b)}_polymorphicGreaterThanOrEqual(b,n){return q(b,n,((b,n)=>b>=n))}}(0,e.i)("FlowGraphGreaterThanOrEqualBlock",v);class p extends B.b{constructor(b){super(V.c,V.f,(b=>this._polymorphicIsNan(b)),"FlowGraphIsNaNBlock",b)}_polymorphicIsNan(b){if((0,T.r)(b,!0))return isNaN((0,T.o)(b));throw new Error(`Cannot get NaN of ${b}`)}}(0,e.i)("FlowGraphIsNaNBlock",p);class f extends B.b{constructor(b){super(V.c,V.f,(b=>this._polymorphicIsInf(b)),"FlowGraphIsInfBlock",b)}_polymorphicIsInf(b){if((0,T.r)(b))return!isFinite((0,T.o)(b));throw new Error(`Cannot get isInf of ${b}`)}}(0,e.i)("FlowGraphIsInfBlock",f);class F extends B.b{constructor(b){super(V.c,V.c,(b=>this._polymorphicDegToRad(b)),"FlowGraphDegToRadBlock",b)}_degToRad(b){return b*Math.PI/180}_polymorphicDegToRad(b){return j(b,this._degToRad)}}(0,e.i)("FlowGraphDegToRadBlock",F);class bb extends B.b{constructor(b){super(V.c,V.c,(b=>this._polymorphicRadToDeg(b)),"FlowGraphRadToDegBlock",b)}_radToDeg(b){return 180*b/Math.PI}_polymorphicRadToDeg(b){return j(b,this._radToDeg)}}(0,e.i)("FlowGraphRadToDegBlock",bb);class nb extends B.b{constructor(b){super(V.q,V.q,(b=>this._polymorphicSin(b)),"FlowGraphSinBlock",b)}_polymorphicSin(b){return j(b,Math.sin)}}class ib extends B.b{constructor(b){super(V.q,V.q,(b=>this._polymorphicCos(b)),"FlowGraphCosBlock",b)}_polymorphicCos(b){return j(b,Math.cos)}}class eb extends B.b{constructor(b){super(V.q,V.q,(b=>this._polymorphicTan(b)),"FlowGraphTanBlock",b)}_polymorphicTan(b){return j(b,Math.tan)}}class Vb extends B.b{constructor(b){super(V.q,V.q,(b=>this._polymorphicAsin(b)),"FlowGraphASinBlock",b)}_polymorphicAsin(b){return j(b,Math.asin)}}(0,e.i)("FlowGraphASinBlock",Vb);class Qb extends B.b{constructor(b){super(V.q,V.q,(b=>this._polymorphicAcos(b)),"FlowGraphACosBlock",b)}_polymorphicAcos(b){return j(b,Math.acos)}}(0,e.i)("FlowGraphACosBlock",Qb);class Ub extends B.b{constructor(b){super(V.q,V.q,(b=>this._polymorphicAtan(b)),"FlowGraphATanBlock",b)}_polymorphicAtan(b){return j(b,Math.atan)}}(0,e.i)("FlowGraphATanBlock",Ub);class Yb extends Q.d{constructor(b){super(V.c,V.c,V.c,((b,n)=>this._polymorphicAtan2(b,n)),"FlowGraphATan2Block",b)}_polymorphicAtan2(b,n){return t(b,n,Math.atan2)}}(0,e.i)("FlowGraphATan2Block",Yb);class Lb extends B.b{constructor(b){super(V.c,V.c,(b=>this._polymorphicSinh(b)),"FlowGraphSinhBlock",b)}_polymorphicSinh(b){return j(b,Math.sinh)}}(0,e.i)("FlowGraphSinhBlock",Lb);class Bb extends B.b{constructor(b){super(V.c,V.c,(b=>this._polymorphicCosh(b)),"FlowGraphCoshBlock",b)}_polymorphicCosh(b){return j(b,Math.cosh)}}(0,e.i)("FlowGraphCoshBlock",Bb);class mn extends B.b{constructor(b){super(V.c,V.c,(b=>this._polymorphicTanh(b)),"FlowGraphTanhBlock",b)}_polymorphicTanh(b){return j(b,Math.tanh)}}(0,e.i)("FlowGraphTanhBlock",mn);class Nb extends B.b{constructor(b){super(V.c,V.q,(b=>this._polymorphicAsinh(b)),"FlowGraphASinhBlock",b)}_polymorphicAsinh(b){return j(b,Math.asinh)}}(0,e.i)("FlowGraphASinhBlock",Nb);class Zb extends B.b{constructor(b){super(V.c,V.q,(b=>this._polymorphicAcosh(b)),"FlowGraphACoshBlock",b)}_polymorphicAcosh(b){return j(b,Math.acosh)}}(0,e.i)("FlowGraphACoshBlock",Zb);class Tb extends B.b{constructor(b){super(V.c,V.q,(b=>this._polymorphicAtanh(b)),"FlowGraphATanhBlock",b)}_polymorphicAtanh(b){return j(b,Math.atanh)}}(0,e.i)("FlowGraphATanhBlock",Tb);class zb extends B.b{constructor(b){super(V.c,V.q,(b=>this._polymorphicExp(b)),"FlowGraphExponentialBlock",b)}_polymorphicExp(b){return j(b,Math.exp)}}(0,e.i)("FlowGraphExponentialBlock",zb);class Kb extends B.b{constructor(b){super(V.c,V.q,(b=>this._polymorphicLog(b)),"FlowGraphLogBlock",b)}_polymorphicLog(b){return j(b,Math.log)}}(0,e.i)("FlowGraphLogBlock",Kb);class Ib extends B.b{constructor(b){super(V.c,V.q,(b=>this._polymorphicLog2(b)),"FlowGraphLog2Block",b)}_polymorphicLog2(b){return j(b,Math.log2)}}(0,e.i)("FlowGraphLog2Block",Ib);class Ob extends B.b{constructor(b){super(V.c,V.q,(b=>this._polymorphicLog10(b)),"FlowGraphLog10Block",b)}_polymorphicLog10(b){return j(b,Math.log10)}}(0,e.i)("FlowGraphLog10Block",Ob);class ub extends B.b{constructor(b){super(V.c,V.q,(b=>this._polymorphicSqrt(b)),"FlowGraphSquareRootBlock",b)}_polymorphicSqrt(b){return j(b,Math.sqrt)}}(0,e.i)("FlowGraphSquareRootBlock",ub);class db extends B.b{constructor(b){super(V.c,V.q,(b=>this._polymorphicCubeRoot(b)),"FlowGraphCubeRootBlock",b)}_polymorphicCubeRoot(b){return j(b,Math.cbrt)}}(0,e.i)("FlowGraphCubeRootBlock",db);class Gb extends Q.d{constructor(b){super(V.c,V.q,V.q,((b,n)=>this._polymorphicPow(b,n)),"FlowGraphPowerBlock",b)}_polymorphicPow(b,n){return t(b,n,Math.pow)}}(0,e.i)("FlowGraphPowerBlock",Gb);class ob extends B.b{constructor(b){super((0,V.M)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,V.M)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(b=>"boolean"===typeof b?!b:"number"===typeof b?~b:new N.b(~b.value)),"FlowGraphBitwiseNotBlock",b)}}(0,e.i)("FlowGraphBitwiseNotBlock",ob);class Mb extends Q.d{constructor(b){super((0,V.M)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,V.M)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,V.M)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),((b,n)=>{if("boolean"===typeof b&&"boolean"===typeof n)return b&&n;if("number"===typeof b&&"number"===typeof n)return b&n;if("object"===typeof b&&"object"===typeof n)return new N.b(b.value&n.value);throw new Error(`Cannot perform bitwise AND on ${b} and ${n}`)}),"FlowGraphBitwiseAndBlock",b)}}(0,e.i)("FlowGraphBitwiseAndBlock",Mb);class jb extends Q.d{constructor(b){super((0,V.M)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,V.M)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,V.M)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),((b,n)=>{if("boolean"===typeof b&&"boolean"===typeof n)return b||n;if("number"===typeof b&&"number"===typeof n)return b|n;if("object"===typeof b&&"object"===typeof n)return new N.b(b.value|n.value);throw new Error(`Cannot perform bitwise OR on ${b} and ${n}`)}),"FlowGraphBitwiseOrBlock",b)}}(0,e.i)("FlowGraphBitwiseOrBlock",jb);class ab extends Q.d{constructor(b){super((0,V.M)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,V.M)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),(0,V.M)((null===b||void 0===b?void 0:b.valueType)||"FlowGraphInteger"),((b,n)=>{if("boolean"===typeof b&&"boolean"===typeof n)return b!==n;if("number"===typeof b&&"number"===typeof n)return b^n;if("object"===typeof b&&"object"===typeof n)return new N.b(b.value^n.value);throw new Error(`Cannot perform bitwise XOR on ${b} and ${n}`)}),"FlowGraphBitwiseXorBlock",b)}}(0,e.i)("FlowGraphBitwiseXorBlock",ab);class Db extends Q.d{constructor(b){super(V.h,V.h,V.h,((b,n)=>new N.b(b.value<<n.value)),"FlowGraphBitwiseLeftShiftBlock",b)}}(0,e.i)("FlowGraphBitwiseLeftShiftBlock",Db);class xb extends Q.d{constructor(b){super(V.h,V.h,V.h,((b,n)=>new N.b(b.value>>n.value)),"FlowGraphBitwiseRightShiftBlock",b)}}(0,e.i)("FlowGraphBitwiseRightShiftBlock",xb);class yb extends B.b{constructor(b){super(V.h,V.h,(b=>new N.b(Math.clz32(b.value))),"FlowGraphLeadingZerosBlock",b)}}(0,e.i)("FlowGraphLeadingZerosBlock",yb);class sb extends B.b{constructor(b){super(V.h,V.h,(b=>new N.b(b.value?31-Math.clz32(b.value&-b.value):32)),"FlowGraphTrailingZerosBlock",b)}}(0,e.i)("FlowGraphTrailingZerosBlock",sb);class Ab extends B.b{constructor(b){super(V.h,V.h,(b=>new N.b(function(b){let n=0;for(;b;)n+=1&b,b>>=1;return n}(b.value))),"FlowGraphOneBitsCounterBlock",b)}}(0,e.i)("FlowGraphOneBitsCounterBlock",Ab)},15081:(b,n,i)=>{i.d(n,{d:()=>V});var e=i(15083);class V extends e.b{constructor(b,n,i,e,V,Q){super(i,Q),this._operation=e,this._className=V,this.a=this.registerDataInput("a",b),this.b=this.registerDataInput("b",n)}_doOperation(b){const n=this.a.getValue(b),i=this.b.getValue(b);return this._operation(n,i)}getClassName(){return this._className}}},15083:(b,n,i)=>{i.d(n,{b:()=>Y});var e=i(13547),V=i(13522);const Q="cachedOperationValue",U="cachedExecutionId";class Y extends e.c{constructor(b,n){super(n),this.value=this.registerDataOutput("value",b),this.isValid=this.registerDataOutput("isValid",V.f)}_updateOutputs(b){const n=b._getExecutionVariable(this,U,-1),i=b._getExecutionVariable(this,Q,null);if(void 0!==i&&null!==i&&n===b.executionId)this.isValid.setValue(!0,b),this.value.setValue(i,b);else try{const n=this._doOperation(b);if(void 0===n||null===n)return void this.isValid.setValue(!1,b);b._setExecutionVariable(this,Q,n),b._setExecutionVariable(this,U,b.executionId),this.value.setValue(n,b),this.isValid.setValue(!0,b)}catch(e){this.isValid.setValue(!1,b)}}}},15089:(b,n,i)=>{i.d(n,{b:()=>V});var e=i(15083);class V extends e.b{constructor(b,n,i,e,V){super(n,V),this._operation=i,this._className=e,this.a=this.registerDataInput("a",b)}_doOperation(b){return this._operation(this.a.getValue(b))}getClassName(){return this._className}}}}]);