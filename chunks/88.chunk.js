"use strict";(self.vfdo5lmva5i=self.vfdo5lmva5i||[]).push([[88],{15037:(w,o,H)=>{H.r(o),H.d(o,{FlowGraphAbsBlock:()=>T,FlowGraphAcosBlock:()=>ew,FlowGraphAcoshBlock:()=>zw,FlowGraphAddBlock:()=>Q,FlowGraphAsinBlock:()=>Ew,FlowGraphAsinhBlock:()=>yw,FlowGraphAtan2Block:()=>tw,FlowGraphAtanBlock:()=>Dw,FlowGraphAtanhBlock:()=>Cw,FlowGraphBitwiseAndBlock:()=>lw,FlowGraphBitwiseLeftShiftBlock:()=>Sw,FlowGraphBitwiseNotBlock:()=>Pw,FlowGraphBitwiseOrBlock:()=>Ow,FlowGraphBitwiseRightShiftBlock:()=>cw,FlowGraphBitwiseXorBlock:()=>Tw,FlowGraphCeilBlock:()=>B,FlowGraphClampBlock:()=>n,FlowGraphCosBlock:()=>Hw,FlowGraphCoshBlock:()=>Lw,FlowGraphCubeRootBlock:()=>rw,FlowGraphDegToRadBlock:()=>x,FlowGraphDivideBlock:()=>s,FlowGraphEBlock:()=>r,FlowGraphEqualityBlock:()=>I,FlowGraphExpBlock:()=>Qw,FlowGraphFloorBlock:()=>W,FlowGraphFractionBlock:()=>g,FlowGraphGreaterThanBlock:()=>F,FlowGraphGreaterThanOrEqualBlock:()=>v,FlowGraphInfBlock:()=>P,FlowGraphIsInfinityBlock:()=>Y,FlowGraphIsNanBlock:()=>mw,FlowGraphLeadingZerosBlock:()=>Ww,FlowGraphLessThanBlock:()=>Z,FlowGraphLessThanOrEqualBlock:()=>K,FlowGraphLog10Block:()=>sw,FlowGraphLog2Block:()=>iw,FlowGraphLogBlock:()=>Mw,FlowGraphMathInterpolationBlock:()=>d,FlowGraphMaxBlock:()=>j,FlowGraphMinBlock:()=>N,FlowGraphModuloBlock:()=>f,FlowGraphMultiplyBlock:()=>i,FlowGraphNaNBlock:()=>l,FlowGraphNegationBlock:()=>b,FlowGraphOneBitsCounterBlock:()=>Jw,FlowGraphPiBlock:()=>k,FlowGraphPowerBlock:()=>kw,FlowGraphRadToDegBlock:()=>ww,FlowGraphRandomBlock:()=>V,FlowGraphRoundBlock:()=>J,FlowGraphSaturateBlock:()=>R,FlowGraphSignBlock:()=>S,FlowGraphSinBlock:()=>ow,FlowGraphSinhBlock:()=>Xw,FlowGraphSquareRootBlock:()=>Vw,FlowGraphSubtractBlock:()=>M,FlowGraphTanBlock:()=>hw,FlowGraphTanhBlock:()=>Aw,FlowGraphTrailingZerosBlock:()=>Bw,FlowGraphTruncBlock:()=>c});var h=H(11666),E=H(13455),e=H(15043),D=H(15051);class t extends D.c{constructor(w,o,H,h){super(w,h),this._operation=o,this._className=H}_doOperation(w){return this._operation(w)}getClassName(){return this._className}}var X=H(11720),L=H(15059);class A extends D.c{constructor(w,o,H,h,E,e,D){super(h,D),this._operation=E,this._className=e,this.a=this.registerDataInput("a",w),this.b=this.registerDataInput("b",o),this.c=this.registerDataInput("c",H)}_doOperation(w){return this._operation(this.a.getValue(w),this.b.getValue(w),this.c.getValue(w))}getClassName(){return this._className}}var y=H(13446),z=H(13462),C=H(13486);class Q extends e.b{constructor(w){super((0,E.F)(null===w||void 0===w?void 0:w.type),(0,E.F)(null===w||void 0===w?void 0:w.type),(0,E.F)(null===w||void 0===w?void 0:w.type),((w,o)=>this._polymorphicAdd(w,o)),"FlowGraphAddBlock",w)}_polymorphicAdd(w,o){const H=(0,C.i)(w),h=(0,C.i)(o);if((0,C.g)(H,h)||(0,C.e)(H,h)||(0,C.d)(H,h))return w.add(o);if("Quaternion"===H||"Vector4"===h)return new X.Vector4(w.x,w.y,w.z,w.w).addInPlace(o);if("Vector4"===H||"Quaternion"===h)return w.add(o);var E;if(null!==(E=this.config)&&void 0!==E&&E.preventIntegerFloatArithmetic&&typeof w!==typeof o)throw new Error("Cannot add different types of numbers.");return(0,C.n)(w)+(0,C.n)(o)}}(0,h.g)("FlowGraphAddBlock",Q);class M extends e.b{constructor(w){super((0,E.F)(null===w||void 0===w?void 0:w.type),(0,E.F)(null===w||void 0===w?void 0:w.type),(0,E.F)(null===w||void 0===w?void 0:w.type),((w,o)=>this._polymorphicSubtract(w,o)),"FlowGraphSubtractBlock",w)}_polymorphicSubtract(w,o){const H=(0,C.i)(w),h=(0,C.i)(o);if((0,C.g)(H,h)||(0,C.d)(H,h)||(0,C.e)(H,h))return w.so(o);if("Quaternion"===H||"Vector4"===h)return new X.Vector4(w.x,w.y,w.z,w.w).wy(o);if("Vector4"===H||"Quaternion"===h)return w.so(o);var E;if(null!==(E=this.config)&&void 0!==E&&E.preventIntegerFloatArithmetic&&typeof w!==typeof o)throw new Error("Cannot add different types of numbers.");return(0,C.n)(w)-(0,C.n)(o)}}(0,h.g)("FlowGraphSubtractBlock",M);class i extends e.b{constructor(w){super((0,E.F)(null===w||void 0===w?void 0:w.type),(0,E.F)(null===w||void 0===w?void 0:w.type),(0,E.F)(null===w||void 0===w?void 0:w.type),((w,o)=>this._polymorphicMultiply(w,o)),"FlowGraphMultiplyBlock",w)}_polymorphicMultiply(w,o){const H=(0,C.i)(w),h=(0,C.i)(o);if((0,C.g)(H,h)||(0,C.d)(H,h))return w.multiply(o);if("Quaternion"===H||"Vector4"===h)return new X.Vector4(w.x,w.y,w.z,w.w).multiplyInPlace(o);if("Vector4"===H||"Quaternion"===h)return w.multiply(o);if((0,C.e)(H,h)){var E;if(null!==(E=this.config)&&void 0!==E&&E.useMatrixPerComponent){const h=w.m;for(let w=0;w<h.length;w++)h[w]*=o.m[w];return"Matrix2D"===H?new z.d(h):"Matrix3D"===H?new z.g(h):X.Matrix.Po(h)}return o.multiply(w)}var e;if(null!==(e=this.config)&&void 0!==e&&e.preventIntegerFloatArithmetic&&typeof w!==typeof o)throw new Error("Cannot add different types of numbers.");return(0,C.n)(w)*(0,C.n)(o)}}(0,h.g)("FlowGraphMultiplyBlock",i);class s extends e.b{constructor(w){super((0,E.F)(null===w||void 0===w?void 0:w.type),(0,E.F)(null===w||void 0===w?void 0:w.type),(0,E.F)(null===w||void 0===w?void 0:w.type),((w,o)=>this._polymorphicDivide(w,o)),"FlowGraphDivideBlock",w)}_polymorphicDivide(w,o){const H=(0,C.i)(w),h=(0,C.i)(o);if((0,C.g)(H,h)||(0,C.d)(H,h))return w.divide(o);if("Quaternion"===H||"Quaternion"===h){const H=w.clone();return H.x/=o.x,H.y/=o.y,H.z/=o.z,H.w/=o.w,H}if("Quaternion"===H||"Vector4"===h)return new X.Vector4(w.x,w.y,w.z,w.w).divideInPlace(o);if("Vector4"===H||"Quaternion"===h)return w.divide(o);if((0,C.e)(H,h)){var E;if(null!==(E=this.config)&&void 0!==E&&E.useMatrixPerComponent){const h=w.m;for(let w=0;w<h.length;w++)h[w]/=o.m[w];return"Matrix2D"===H?new z.d(h):"Matrix3D"===H?new z.g(h):X.Matrix.Po(h)}return w.divide(o)}var e;if(null!==(e=this.config)&&void 0!==e&&e.preventIntegerFloatArithmetic&&typeof w!==typeof o)throw new Error("Cannot add different types of numbers.");return(0,C.n)(w)/(0,C.n)(o)}}(0,h.g)("FlowGraphDivideBlock",s);class V extends t{constructor(w){super(E.p,(w=>this._random(w)),"FlowGraphRandomBlock",w),this.min=this.registerDataInput("min",E.p,(null===w||void 0===w?void 0:w.min)??0),this.max=this.registerDataInput("max",E.p,(null===w||void 0===w?void 0:w.max)??1),null!==w&&void 0!==w&&w.seed&&(this._seed=w.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const w=1e4*Math.sin(this._seed++);return w-Math.floor(w)}return Math.random()}_random(w){const o=this.min.getValue(w),H=this.max.getValue(w);return this._getRandomValue()*(H-o)+o}}(0,h.g)("FlowGraphRandomBlock",V);class r extends t{constructor(w){super(E.p,(()=>Math.E),"FlowGraphEBlock",w)}}(0,h.g)("FlowGraphEBlock",r);class k extends t{constructor(w){super(E.p,(()=>Math.PI),"FlowGraphPIBlock",w)}}(0,h.g)("FlowGraphPIBlock",k);class P extends t{constructor(w){super(E.p,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",w)}}(0,h.g)("FlowGraphInfBlock",P);class l extends t{constructor(w){super(E.p,(()=>Number.NaN),"FlowGraphNaNBlock",w)}}function O(w,o){switch((0,C.i)(w)){case"FlowGraphInteger":return new y.d(o(w.value));case"Vector2":return new X.Vector2(o(w.x),o(w.y));case"io":return new X.io(o(w.x),o(w.y),o(w.z));case"Vector4":return new X.Vector4(o(w.x),o(w.y),o(w.z),o(w.w));case"Quaternion":return new X.Quaternion(o(w.x),o(w.y),o(w.z),o(w.w));case"Matrix":return X.Matrix.Po(w.m.map(o));case"Matrix2D":return new z.d(w.m.map(o));case"Matrix3D":return new z.g(w.m.map(o));default:return o(w)}}(0,h.g)("FlowGraphNaNBlock",l);class T extends L.d{constructor(w){super(E.p,E.p,(w=>this._polymorphicAbs(w)),"FlowGraphAbsBlock",w)}_polymorphicAbs(w){return O(w,Math.abs)}}(0,h.g)("FlowGraphAbsBlock",T);class S extends L.d{constructor(w){super(E.p,E.p,(w=>this._polymorphicSign(w)),"FlowGraphSignBlock",w)}_polymorphicSign(w){return O(w,Math.sign)}}(0,h.g)("FlowGraphSignBlock",S);class c extends L.d{constructor(w){super(E.p,E.p,(w=>this._polymorphicTrunc(w)),"FlowGraphTruncBlock",w)}_polymorphicTrunc(w){return O(w,Math.trunc)}}(0,h.g)("FlowGraphTruncBlock",c);class W extends L.d{constructor(w){super(E.p,E.p,(w=>this._polymorphicFloor(w)),"FlowGraphFloorBlock",w)}_polymorphicFloor(w){return O(w,Math.floor)}}(0,h.g)("FlowGraphFloorBlock",W);class B extends L.d{constructor(w){super(E.e,E.e,(w=>this._polymorphicCeiling(w)),"FlowGraphCeilBlock",w)}_polymorphicCeiling(w){return O(w,Math.ceil)}}(0,h.g)("FlowGraphCeilBlock",B);class J extends L.d{constructor(w){super(E.e,E.e,(w=>this._polymorphicRound(w)),"FlowGraphRoundBlock",w)}_polymorphicRound(w){return O(w,(w=>{var o;return w<0&&null!==(o=this.config)&&void 0!==o&&o.roundHalfAwayFromZero?-Math.round(-w):Math.round(w)}))}}(0,h.g)("FlowGraphRoundBlock",J);class g extends L.d{constructor(w){super(E.e,E.e,(w=>this._polymorphicFraction(w)),"FlowGraphFractBlock",w)}_polymorphicFraction(w){return O(w,(w=>w-Math.floor(w)))}}(0,h.g)("FlowGraphFractBlock",g);class b extends L.d{constructor(w){super(E.e,E.e,(w=>this._polymorphicNeg(w)),"FlowGraphNegationBlock",w)}_polymorphicNeg(w){return O(w,(w=>-w))}}function p(w,o,H){switch((0,C.i)(w)){case"FlowGraphInteger":return new y.d(H(w.value,o.value));case"Vector2":return new X.Vector2(H(w.x,o.x),H(w.y,o.y));case"io":return new X.io(H(w.x,o.x),H(w.y,o.y),H(w.z,o.z));case"Vector4":return new X.Vector4(H(w.x,o.x),H(w.y,o.y),H(w.z,o.z),H(w.w,o.w));case"Quaternion":return new X.Quaternion(H(w.x,o.x),H(w.y,o.y),H(w.z,o.z),H(w.w,o.w));case"Matrix":return X.Matrix.Po(w.m.map(((w,h)=>H(w,o.m[h]))));case"Matrix2D":return new z.d(w.m.map(((w,h)=>H(w,o.m[h]))));case"Matrix3D":return new z.g(w.m.map(((w,h)=>H(w,o.m[h]))));default:return H((0,C.n)(w),(0,C.n)(o))}}(0,h.g)("FlowGraphNegationBlock",b);class f extends e.b{constructor(w){super(E.e,E.e,E.e,((w,o)=>this._polymorphicRemainder(w,o)),"FlowGraphModuloBlock",w)}_polymorphicRemainder(w,o){return p(w,o,((w,o)=>w%o))}}(0,h.g)("FlowGraphModuloBlock",f);class N extends e.b{constructor(w){super(E.e,E.e,E.e,((w,o)=>this._polymorphicMin(w,o)),"FlowGraphMinBlock",w)}_polymorphicMin(w,o){return p(w,o,Math.min)}}(0,h.g)("FlowGraphMinBlock",N);class j extends e.b{constructor(w){super(E.e,E.e,E.e,((w,o)=>this._polymorphicMax(w,o)),"FlowGraphMaxBlock",w)}_polymorphicMax(w,o){return p(w,o,Math.max)}}function q(w,o,H){return Math.min(Math.max(w,Math.min(o,H)),Math.max(o,H))}function u(w,o,H,h){switch((0,C.i)(w)){case"FlowGraphInteger":return new y.d(h(w.value,o.value,H.value));case"Vector2":return new X.Vector2(h(w.x,o.x,H.x),h(w.y,o.y,H.y));case"io":return new X.io(h(w.x,o.x,H.x),h(w.y,o.y,H.y),h(w.z,o.z,H.z));case"Vector4":return new X.Vector4(h(w.x,o.x,H.x),h(w.y,o.y,H.y),h(w.z,o.z,H.z),h(w.w,o.w,H.w));case"Quaternion":return new X.Quaternion(h(w.x,o.x,H.x),h(w.y,o.y,H.y),h(w.z,o.z,H.z),h(w.w,o.w,H.w));case"Matrix":return X.Matrix.Po(w.m.map(((w,E)=>h(w,o.m[E],H.m[E]))));case"Matrix2D":return new z.d(w.m.map(((w,E)=>h(w,o.m[E],H.m[E]))));case"Matrix3D":return new z.g(w.m.map(((w,E)=>h(w,o.m[E],H.m[E]))));default:return h((0,C.n)(w),(0,C.n)(o),(0,C.n)(H))}}(0,h.g)("FlowGraphMaxBlock",j);class n extends A{constructor(w){super(E.e,E.e,E.e,E.e,((w,o,H)=>this._polymorphicClamp(w,o,H)),"FlowGraphClampBlock",w)}_polymorphicClamp(w,o,H){return u(w,o,H,q)}}function G(w){return Math.min(Math.max(w,0),1)}(0,h.g)("FlowGraphClampBlock",n);class R extends L.d{constructor(w){super(E.e,E.e,(w=>this._polymorphicSaturate(w)),"FlowGraphSaturateBlock",w)}_polymorphicSaturate(w){return O(w,G)}}function a(w,o,H){return(1-H)*w+H*o}(0,h.g)("FlowGraphSaturateBlock",R);class d extends A{constructor(w){super(E.e,E.e,E.e,E.e,((w,o,H)=>this._polymorphicInterpolate(w,o,H)),"FlowGraphMathInterpolationBlock",w)}_polymorphicInterpolate(w,o,H){return u(w,o,H,a)}}(0,h.g)("FlowGraphMathInterpolationBlock",d);class I extends e.b{constructor(w){super(E.e,E.e,E.f,((w,o)=>this._polymorphicEq(w,o)),"FlowGraphEqualityBlock",w)}_polymorphicEq(w,o){const H=(0,C.i)(w),h=(0,C.i)(o);return typeof w===typeof o&&((0,C.g)(H,h)||(0,C.e)(H,h)||(0,C.d)(H,h)?w.equals(o):w===o)}}function U(w,o,H){if((0,C.q)(w)&&(0,C.q)(o))return H((0,C.n)(w),(0,C.n)(o));throw new Error(`Cannot compare ${w} and ${o}`)}(0,h.g)("FlowGraphEqualityBlock",I);class Z extends e.b{constructor(w){super(E.e,E.e,E.f,((w,o)=>this._polymorphicLessThan(w,o)),"FlowGraphLessThanBlock",w)}_polymorphicLessThan(w,o){return U(w,o,((w,o)=>w<o))}}(0,h.g)("FlowGraphLessThanBlock",Z);class K extends e.b{constructor(w){super(E.e,E.e,E.f,((w,o)=>this._polymorphicLessThanOrEqual(w,o)),"FlowGraphLessThanOrEqualBlock",w)}_polymorphicLessThanOrEqual(w,o){return U(w,o,((w,o)=>w<=o))}}(0,h.g)("FlowGraphLessThanOrEqualBlock",K);class F extends e.b{constructor(w){super(E.e,E.e,E.f,((w,o)=>this._polymorphicGreaterThan(w,o)),"FlowGraphGreaterThanBlock",w)}_polymorphicGreaterThan(w,o){return U(w,o,((w,o)=>w>o))}}(0,h.g)("FlowGraphGreaterThanBlock",F);class v extends e.b{constructor(w){super(E.e,E.e,E.f,((w,o)=>this._polymorphicGreaterThanOrEqual(w,o)),"FlowGraphGreaterThanOrEqualBlock",w)}_polymorphicGreaterThanOrEqual(w,o){return U(w,o,((w,o)=>w>=o))}}(0,h.g)("FlowGraphGreaterThanOrEqualBlock",v);class mw extends L.d{constructor(w){super(E.e,E.f,(w=>this._polymorphicIsNan(w)),"FlowGraphIsNaNBlock",w)}_polymorphicIsNan(w){if((0,C.q)(w,!0))return isNaN((0,C.n)(w));throw new Error(`Cannot get NaN of ${w}`)}}(0,h.g)("FlowGraphIsNaNBlock",mw);class Y extends L.d{constructor(w){super(E.e,E.f,(w=>this._polymorphicIsInf(w)),"FlowGraphIsInfBlock",w)}_polymorphicIsInf(w){if((0,C.q)(w))return!isFinite((0,C.n)(w));throw new Error(`Cannot get isInf of ${w}`)}}(0,h.g)("FlowGraphIsInfBlock",Y);class x extends L.d{constructor(w){super(E.e,E.e,(w=>this._polymorphicDegToRad(w)),"FlowGraphDegToRadBlock",w)}_degToRad(w){return w*Math.PI/180}_polymorphicDegToRad(w){return O(w,this._degToRad)}}(0,h.g)("FlowGraphDegToRadBlock",x);class ww extends L.d{constructor(w){super(E.e,E.e,(w=>this._polymorphicRadToDeg(w)),"FlowGraphRadToDegBlock",w)}_radToDeg(w){return 180*w/Math.PI}_polymorphicRadToDeg(w){return O(w,this._radToDeg)}}(0,h.g)("FlowGraphRadToDegBlock",ww);class ow extends L.d{constructor(w){super(E.p,E.p,(w=>this._polymorphicSin(w)),"FlowGraphSinBlock",w)}_polymorphicSin(w){return O(w,Math.sin)}}class Hw extends L.d{constructor(w){super(E.p,E.p,(w=>this._polymorphicCos(w)),"FlowGraphCosBlock",w)}_polymorphicCos(w){return O(w,Math.cos)}}class hw extends L.d{constructor(w){super(E.p,E.p,(w=>this._polymorphicTan(w)),"FlowGraphTanBlock",w)}_polymorphicTan(w){return O(w,Math.tan)}}class Ew extends L.d{constructor(w){super(E.p,E.p,(w=>this._polymorphicAsin(w)),"FlowGraphASinBlock",w)}_polymorphicAsin(w){return O(w,Math.asin)}}(0,h.g)("FlowGraphASinBlock",Ew);class ew extends L.d{constructor(w){super(E.p,E.p,(w=>this._polymorphicAcos(w)),"FlowGraphACosBlock",w)}_polymorphicAcos(w){return O(w,Math.acos)}}(0,h.g)("FlowGraphACosBlock",ew);class Dw extends L.d{constructor(w){super(E.p,E.p,(w=>this._polymorphicAtan(w)),"FlowGraphATanBlock",w)}_polymorphicAtan(w){return O(w,Math.atan)}}(0,h.g)("FlowGraphATanBlock",Dw);class tw extends e.b{constructor(w){super(E.e,E.e,E.e,((w,o)=>this._polymorphicAtan2(w,o)),"FlowGraphATan2Block",w)}_polymorphicAtan2(w,o){return p(w,o,Math.atan2)}}(0,h.g)("FlowGraphATan2Block",tw);class Xw extends L.d{constructor(w){super(E.e,E.e,(w=>this._polymorphicSinh(w)),"FlowGraphSinhBlock",w)}_polymorphicSinh(w){return O(w,Math.sinh)}}(0,h.g)("FlowGraphSinhBlock",Xw);class Lw extends L.d{constructor(w){super(E.e,E.e,(w=>this._polymorphicCosh(w)),"FlowGraphCoshBlock",w)}_polymorphicCosh(w){return O(w,Math.cosh)}}(0,h.g)("FlowGraphCoshBlock",Lw);class Aw extends L.d{constructor(w){super(E.e,E.e,(w=>this._polymorphicTanh(w)),"FlowGraphTanhBlock",w)}_polymorphicTanh(w){return O(w,Math.tanh)}}(0,h.g)("FlowGraphTanhBlock",Aw);class yw extends L.d{constructor(w){super(E.e,E.p,(w=>this._polymorphicAsinh(w)),"FlowGraphASinhBlock",w)}_polymorphicAsinh(w){return O(w,Math.asinh)}}(0,h.g)("FlowGraphASinhBlock",yw);class zw extends L.d{constructor(w){super(E.e,E.p,(w=>this._polymorphicAcosh(w)),"FlowGraphACoshBlock",w)}_polymorphicAcosh(w){return O(w,Math.acosh)}}(0,h.g)("FlowGraphACoshBlock",zw);class Cw extends L.d{constructor(w){super(E.e,E.p,(w=>this._polymorphicAtanh(w)),"FlowGraphATanhBlock",w)}_polymorphicAtanh(w){return O(w,Math.atanh)}}(0,h.g)("FlowGraphATanhBlock",Cw);class Qw extends L.d{constructor(w){super(E.e,E.p,(w=>this._polymorphicExp(w)),"FlowGraphExponentialBlock",w)}_polymorphicExp(w){return O(w,Math.exp)}}(0,h.g)("FlowGraphExponentialBlock",Qw);class Mw extends L.d{constructor(w){super(E.e,E.p,(w=>this._polymorphicLog(w)),"FlowGraphLogBlock",w)}_polymorphicLog(w){return O(w,Math.log)}}(0,h.g)("FlowGraphLogBlock",Mw);class iw extends L.d{constructor(w){super(E.e,E.p,(w=>this._polymorphicLog2(w)),"FlowGraphLog2Block",w)}_polymorphicLog2(w){return O(w,Math.log2)}}(0,h.g)("FlowGraphLog2Block",iw);class sw extends L.d{constructor(w){super(E.e,E.p,(w=>this._polymorphicLog10(w)),"FlowGraphLog10Block",w)}_polymorphicLog10(w){return O(w,Math.log10)}}(0,h.g)("FlowGraphLog10Block",sw);class Vw extends L.d{constructor(w){super(E.e,E.p,(w=>this._polymorphicSqrt(w)),"FlowGraphSquareRootBlock",w)}_polymorphicSqrt(w){return O(w,Math.sqrt)}}(0,h.g)("FlowGraphSquareRootBlock",Vw);class rw extends L.d{constructor(w){super(E.e,E.p,(w=>this._polymorphicCubeRoot(w)),"FlowGraphCubeRootBlock",w)}_polymorphicCubeRoot(w){return O(w,Math.cbrt)}}(0,h.g)("FlowGraphCubeRootBlock",rw);class kw extends e.b{constructor(w){super(E.e,E.p,E.p,((w,o)=>this._polymorphicPow(w,o)),"FlowGraphPowerBlock",w)}_polymorphicPow(w,o){return p(w,o,Math.pow)}}(0,h.g)("FlowGraphPowerBlock",kw);class Pw extends L.d{constructor(w){super((0,E.F)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,E.F)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(w=>"boolean"===typeof w?!w:"number"===typeof w?~w:new y.d(~w.value)),"FlowGraphBitwiseNotBlock",w)}}(0,h.g)("FlowGraphBitwiseNotBlock",Pw);class lw extends e.b{constructor(w){super((0,E.F)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,E.F)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,E.F)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),((w,o)=>{if("boolean"===typeof w&&"boolean"===typeof o)return w&&o;if("number"===typeof w&&"number"===typeof o)return w&o;if("object"===typeof w&&"object"===typeof o)return new y.d(w.value&o.value);throw new Error(`Cannot perform bitwise AND on ${w} and ${o}`)}),"FlowGraphBitwiseAndBlock",w)}}(0,h.g)("FlowGraphBitwiseAndBlock",lw);class Ow extends e.b{constructor(w){super((0,E.F)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,E.F)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,E.F)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),((w,o)=>{if("boolean"===typeof w&&"boolean"===typeof o)return w||o;if("number"===typeof w&&"number"===typeof o)return w|o;if("object"===typeof w&&"object"===typeof o)return new y.d(w.value|o.value);throw new Error(`Cannot perform bitwise OR on ${w} and ${o}`)}),"FlowGraphBitwiseOrBlock",w)}}(0,h.g)("FlowGraphBitwiseOrBlock",Ow);class Tw extends e.b{constructor(w){super((0,E.F)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,E.F)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,E.F)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),((w,o)=>{if("boolean"===typeof w&&"boolean"===typeof o)return w!==o;if("number"===typeof w&&"number"===typeof o)return w^o;if("object"===typeof w&&"object"===typeof o)return new y.d(w.value^o.value);throw new Error(`Cannot perform bitwise XOR on ${w} and ${o}`)}),"FlowGraphBitwiseXorBlock",w)}}(0,h.g)("FlowGraphBitwiseXorBlock",Tw);class Sw extends e.b{constructor(w){super(E.g,E.g,E.g,((w,o)=>new y.d(w.value<<o.value)),"FlowGraphBitwiseLeftShiftBlock",w)}}(0,h.g)("FlowGraphBitwiseLeftShiftBlock",Sw);class cw extends e.b{constructor(w){super(E.g,E.g,E.g,((w,o)=>new y.d(w.value>>o.value)),"FlowGraphBitwiseRightShiftBlock",w)}}(0,h.g)("FlowGraphBitwiseRightShiftBlock",cw);class Ww extends L.d{constructor(w){super(E.g,E.g,(w=>new y.d(Math.clz32(w.value))),"FlowGraphLeadingZerosBlock",w)}}(0,h.g)("FlowGraphLeadingZerosBlock",Ww);class Bw extends L.d{constructor(w){super(E.g,E.g,(w=>new y.d(w.value?31-Math.clz32(w.value&-w.value):32)),"FlowGraphTrailingZerosBlock",w)}}(0,h.g)("FlowGraphTrailingZerosBlock",Bw);class Jw extends L.d{constructor(w){super(E.g,E.g,(w=>new y.d(function(w){let o=0;for(;w;)o+=1&w,w>>=1;return o}(w.value))),"FlowGraphOneBitsCounterBlock",w)}}(0,h.g)("FlowGraphOneBitsCounterBlock",Jw)},15043:(w,o,H)=>{H.d(o,{b:()=>E});var h=H(15051);class E extends h.c{constructor(w,o,H,h,E,e){super(H,e),this._operation=h,this._className=E,this.a=this.registerDataInput("a",w),this.b=this.registerDataInput("b",o)}_doOperation(w){const o=this.a.getValue(w),H=this.b.getValue(w);return this._operation(o,H)}getClassName(){return this._className}}},15051:(w,o,H)=>{H.d(o,{c:()=>t});var h=H(13475),E=H(13455);const e="cachedOperationValue",D="cachedExecutionId";class t extends h.c{constructor(w,o){super(o),this.value=this.registerDataOutput("value",w),this.isValid=this.registerDataOutput("isValid",E.f)}_updateOutputs(w){const o=w._getExecutionVariable(this,D,-1),H=w._getExecutionVariable(this,e,null);if(void 0!==H&&null!==H&&o===w.executionId)this.isValid.setValue(!0,w),this.value.setValue(H,w);else try{const o=this._doOperation(w);if(void 0===o||null===o)return void this.isValid.setValue(!1,w);w._setExecutionVariable(this,e,o),w._setExecutionVariable(this,D,w.executionId),this.value.setValue(o,w),this.isValid.setValue(!0,w)}catch(h){this.isValid.setValue(!1,w)}}}},15059:(w,o,H)=>{H.d(o,{d:()=>E});var h=H(15051);class E extends h.c{constructor(w,o,H,h,E){super(o,E),this._operation=H,this._className=h,this.a=this.registerDataInput("a",w)}_doOperation(w){return this._operation(this.a.getValue(w))}getClassName(){return this._className}}}}]);