"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[88],{14366:(h,V,i)=>{i.r(V),i.d(V,{FlowGraphAbsBlock:()=>O,FlowGraphAcosBlock:()=>Yh,FlowGraphAcoshBlock:()=>sh,FlowGraphAddBlock:()=>T,FlowGraphAsinBlock:()=>lh,FlowGraphAsinhBlock:()=>vh,FlowGraphAtan2Block:()=>qh,FlowGraphAtanBlock:()=>gh,FlowGraphAtanhBlock:()=>th,FlowGraphBitwiseAndBlock:()=>Xh,FlowGraphBitwiseLeftShiftBlock:()=>oh,FlowGraphBitwiseNotBlock:()=>Uh,FlowGraphBitwiseOrBlock:()=>Dh,FlowGraphBitwiseRightShiftBlock:()=>Mh,FlowGraphBitwiseXorBlock:()=>Oh,FlowGraphCeilBlock:()=>E,FlowGraphClampBlock:()=>Z,FlowGraphCosBlock:()=>ih,FlowGraphCoshBlock:()=>Jh,FlowGraphCubeRootBlock:()=>Ph,FlowGraphDegToRadBlock:()=>K,FlowGraphDivideBlock:()=>c,FlowGraphEBlock:()=>P,FlowGraphEqualityBlock:()=>Q,FlowGraphExpBlock:()=>Th,FlowGraphFloorBlock:()=>F,FlowGraphFractionBlock:()=>j,FlowGraphGreaterThanBlock:()=>u,FlowGraphGreaterThanOrEqualBlock:()=>p,FlowGraphInfBlock:()=>U,FlowGraphIsInfinityBlock:()=>a,FlowGraphIsNanBlock:()=>W,FlowGraphLeadingZerosBlock:()=>Fh,FlowGraphLessThanBlock:()=>b,FlowGraphLessThanOrEqualBlock:()=>C,FlowGraphLog10Block:()=>ch,FlowGraphLog2Block:()=>nh,FlowGraphLogBlock:()=>eh,FlowGraphMathInterpolationBlock:()=>y,FlowGraphMaxBlock:()=>r,FlowGraphMinBlock:()=>N,FlowGraphModuloBlock:()=>w,FlowGraphMultiplyBlock:()=>n,FlowGraphNaNBlock:()=>X,FlowGraphNegationBlock:()=>m,FlowGraphOneBitsCounterBlock:()=>Hh,FlowGraphPiBlock:()=>L,FlowGraphPowerBlock:()=>Lh,FlowGraphRadToDegBlock:()=>hh,FlowGraphRandomBlock:()=>f,FlowGraphRoundBlock:()=>H,FlowGraphSaturateBlock:()=>d,FlowGraphSignBlock:()=>o,FlowGraphSinBlock:()=>Vh,FlowGraphSinhBlock:()=>Bh,FlowGraphSquareRootBlock:()=>fh,FlowGraphSubtractBlock:()=>e,FlowGraphTanBlock:()=>Sh,FlowGraphTanhBlock:()=>Ih,FlowGraphTrailingZerosBlock:()=>Eh,FlowGraphTruncBlock:()=>M});var S=i(11091),l=i(12805),Y=i(14373),g=i(14382);class q extends g.d{constructor(h,V,i,S){super(h,S),this._operation=V,this._className=i}_doOperation(h){return this._operation(h)}getClassName(){return this._className}}var B=i(11138),J=i(14389);class I extends g.d{constructor(h,V,i,S,l,Y,g){super(S,g),this._operation=l,this._className=Y,this.a=this.registerDataInput("a",h),this.b=this.registerDataInput("b",V),this.c=this.registerDataInput("c",i)}_doOperation(h){return this._operation(this.a.getValue(h),this.b.getValue(h),this.c.getValue(h))}getClassName(){return this._className}}var v=i(12800),s=i(12814),t=i(12841);class T extends Y.d{constructor(h){super((0,l.M)(null===h||void 0===h?void 0:h.type),(0,l.M)(null===h||void 0===h?void 0:h.type),(0,l.M)(null===h||void 0===h?void 0:h.type),((h,V)=>this._polymorphicAdd(h,V)),"FlowGraphAddBlock",h)}_polymorphicAdd(h,V){const i=(0,t.h)(h),S=(0,t.h)(V);if((0,t.f)(i,S)||(0,t.c)(i,S)||(0,t.b)(i,S))return h.add(V);if("Quaternion"===i||"Vector4"===S)return new B.Vector4(h.x,h.y,h.z,h.w).addInPlace(V);if("Vector4"===i||"Quaternion"===S)return h.add(V);var l;if(null!==(l=this.config)&&void 0!==l&&l.preventIntegerFloatArithmetic&&typeof h!==typeof V)throw new Error("Cannot add different types of numbers.");return(0,t.o)(h)+(0,t.o)(V)}}(0,S.f)("FlowGraphAddBlock",T);class e extends Y.d{constructor(h){super((0,l.M)(null===h||void 0===h?void 0:h.type),(0,l.M)(null===h||void 0===h?void 0:h.type),(0,l.M)(null===h||void 0===h?void 0:h.type),((h,V)=>this._polymorphicSubtract(h,V)),"FlowGraphSubtractBlock",h)}_polymorphicSubtract(h,V){const i=(0,t.h)(h),S=(0,t.h)(V);if((0,t.f)(i,S)||(0,t.b)(i,S)||(0,t.c)(i,S))return h.cV(V);if("Quaternion"===i||"Vector4"===S)return new B.Vector4(h.x,h.y,h.z,h.w).mI(V);if("Vector4"===i||"Quaternion"===S)return h.cV(V);var l;if(null!==(l=this.config)&&void 0!==l&&l.preventIntegerFloatArithmetic&&typeof h!==typeof V)throw new Error("Cannot add different types of numbers.");return(0,t.o)(h)-(0,t.o)(V)}}(0,S.f)("FlowGraphSubtractBlock",e);class n extends Y.d{constructor(h){super((0,l.M)(null===h||void 0===h?void 0:h.type),(0,l.M)(null===h||void 0===h?void 0:h.type),(0,l.M)(null===h||void 0===h?void 0:h.type),((h,V)=>this._polymorphicMultiply(h,V)),"FlowGraphMultiplyBlock",h)}_polymorphicMultiply(h,V){const i=(0,t.h)(h),S=(0,t.h)(V);if((0,t.f)(i,S)||(0,t.b)(i,S))return h.multiply(V);if("Quaternion"===i||"Vector4"===S)return new B.Vector4(h.x,h.y,h.z,h.w).multiplyInPlace(V);if("Vector4"===i||"Quaternion"===S)return h.multiply(V);if((0,t.c)(i,S)){var l;if(null!==(l=this.config)&&void 0!==l&&l.useMatrixPerComponent){const S=h.m;for(let h=0;h<S.length;h++)S[h]*=V.m[h];return"Matrix2D"===i?new s.e(S):"Matrix3D"===i?new s.h(S):B.Matrix.UV(S)}return V.multiply(h)}var Y;if(null!==(Y=this.config)&&void 0!==Y&&Y.preventIntegerFloatArithmetic&&typeof h!==typeof V)throw new Error("Cannot add different types of numbers.");return(0,t.o)(h)*(0,t.o)(V)}}(0,S.f)("FlowGraphMultiplyBlock",n);class c extends Y.d{constructor(h){super((0,l.M)(null===h||void 0===h?void 0:h.type),(0,l.M)(null===h||void 0===h?void 0:h.type),(0,l.M)(null===h||void 0===h?void 0:h.type),((h,V)=>this._polymorphicDivide(h,V)),"FlowGraphDivideBlock",h)}_polymorphicDivide(h,V){const i=(0,t.h)(h),S=(0,t.h)(V);if((0,t.f)(i,S)||(0,t.b)(i,S))return h.divide(V);if("Quaternion"===i||"Quaternion"===S){const i=h.clone();return i.x/=V.x,i.y/=V.y,i.z/=V.z,i.w/=V.w,i}if("Quaternion"===i||"Vector4"===S)return new B.Vector4(h.x,h.y,h.z,h.w).divideInPlace(V);if("Vector4"===i||"Quaternion"===S)return h.divide(V);if((0,t.c)(i,S)){var l;if(null!==(l=this.config)&&void 0!==l&&l.useMatrixPerComponent){const S=h.m;for(let h=0;h<S.length;h++)S[h]/=V.m[h];return"Matrix2D"===i?new s.e(S):"Matrix3D"===i?new s.h(S):B.Matrix.UV(S)}return h.divide(V)}var Y;if(null!==(Y=this.config)&&void 0!==Y&&Y.preventIntegerFloatArithmetic&&typeof h!==typeof V)throw new Error("Cannot add different types of numbers.");return(0,t.o)(h)/(0,t.o)(V)}}(0,S.f)("FlowGraphDivideBlock",c);class f extends q{constructor(h){super(l.u,(h=>this._random(h)),"FlowGraphRandomBlock",h),this.min=this.registerDataInput("min",l.u,(null===h||void 0===h?void 0:h.min)??0),this.max=this.registerDataInput("max",l.u,(null===h||void 0===h?void 0:h.max)??1),null!==h&&void 0!==h&&h.seed&&(this._seed=h.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const h=1e4*Math.sin(this._seed++);return h-Math.floor(h)}return Math.random()}_random(h){const V=this.min.getValue(h),i=this.max.getValue(h);return this._getRandomValue()*(i-V)+V}}(0,S.f)("FlowGraphRandomBlock",f);class P extends q{constructor(h){super(l.u,(()=>Math.E),"FlowGraphEBlock",h)}}(0,S.f)("FlowGraphEBlock",P);class L extends q{constructor(h){super(l.u,(()=>Math.PI),"FlowGraphPIBlock",h)}}(0,S.f)("FlowGraphPIBlock",L);class U extends q{constructor(h){super(l.u,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",h)}}(0,S.f)("FlowGraphInfBlock",U);class X extends q{constructor(h){super(l.u,(()=>Number.NaN),"FlowGraphNaNBlock",h)}}function D(h,V){switch((0,t.h)(h)){case"FlowGraphInteger":return new v.b(V(h.value));case"Vector2":return new B.Vector2(V(h.x),V(h.y));case"nV":return new B.nV(V(h.x),V(h.y),V(h.z));case"Vector4":return new B.Vector4(V(h.x),V(h.y),V(h.z),V(h.w));case"Quaternion":return new B.Quaternion(V(h.x),V(h.y),V(h.z),V(h.w));case"Matrix":return B.Matrix.UV(h.m.map(V));case"Matrix2D":return new s.e(h.m.map(V));case"Matrix3D":return new s.h(h.m.map(V));default:return V(h)}}(0,S.f)("FlowGraphNaNBlock",X);class O extends J.b{constructor(h){super(l.u,l.u,(h=>this._polymorphicAbs(h)),"FlowGraphAbsBlock",h)}_polymorphicAbs(h){return D(h,Math.abs)}}(0,S.f)("FlowGraphAbsBlock",O);class o extends J.b{constructor(h){super(l.u,l.u,(h=>this._polymorphicSign(h)),"FlowGraphSignBlock",h)}_polymorphicSign(h){return D(h,Math.sign)}}(0,S.f)("FlowGraphSignBlock",o);class M extends J.b{constructor(h){super(l.u,l.u,(h=>this._polymorphicTrunc(h)),"FlowGraphTruncBlock",h)}_polymorphicTrunc(h){return D(h,Math.trunc)}}(0,S.f)("FlowGraphTruncBlock",M);class F extends J.b{constructor(h){super(l.u,l.u,(h=>this._polymorphicFloor(h)),"FlowGraphFloorBlock",h)}_polymorphicFloor(h){return D(h,Math.floor)}}(0,S.f)("FlowGraphFloorBlock",F);class E extends J.b{constructor(h){super(l.c,l.c,(h=>this._polymorphicCeiling(h)),"FlowGraphCeilBlock",h)}_polymorphicCeiling(h){return D(h,Math.ceil)}}(0,S.f)("FlowGraphCeilBlock",E);class H extends J.b{constructor(h){super(l.c,l.c,(h=>this._polymorphicRound(h)),"FlowGraphRoundBlock",h)}_polymorphicRound(h){return D(h,(h=>{var V;return h<0&&null!==(V=this.config)&&void 0!==V&&V.roundHalfAwayFromZero?-Math.round(-h):Math.round(h)}))}}(0,S.f)("FlowGraphRoundBlock",H);class j extends J.b{constructor(h){super(l.c,l.c,(h=>this._polymorphicFraction(h)),"FlowGraphFractBlock",h)}_polymorphicFraction(h){return D(h,(h=>h-Math.floor(h)))}}(0,S.f)("FlowGraphFractBlock",j);class m extends J.b{constructor(h){super(l.c,l.c,(h=>this._polymorphicNeg(h)),"FlowGraphNegationBlock",h)}_polymorphicNeg(h){return D(h,(h=>-h))}}function G(h,V,i){switch((0,t.h)(h)){case"FlowGraphInteger":return new v.b(i(h.value,V.value));case"Vector2":return new B.Vector2(i(h.x,V.x),i(h.y,V.y));case"nV":return new B.nV(i(h.x,V.x),i(h.y,V.y),i(h.z,V.z));case"Vector4":return new B.Vector4(i(h.x,V.x),i(h.y,V.y),i(h.z,V.z),i(h.w,V.w));case"Quaternion":return new B.Quaternion(i(h.x,V.x),i(h.y,V.y),i(h.z,V.z),i(h.w,V.w));case"Matrix":return B.Matrix.UV(h.m.map(((h,S)=>i(h,V.m[S]))));case"Matrix2D":return new s.e(h.m.map(((h,S)=>i(h,V.m[S]))));case"Matrix3D":return new s.h(h.m.map(((h,S)=>i(h,V.m[S]))));default:return i((0,t.o)(h),(0,t.o)(V))}}(0,S.f)("FlowGraphNegationBlock",m);class w extends Y.d{constructor(h){super(l.c,l.c,l.c,((h,V)=>this._polymorphicRemainder(h,V)),"FlowGraphModuloBlock",h)}_polymorphicRemainder(h,V){return G(h,V,((h,V)=>h%V))}}(0,S.f)("FlowGraphModuloBlock",w);class N extends Y.d{constructor(h){super(l.c,l.c,l.c,((h,V)=>this._polymorphicMin(h,V)),"FlowGraphMinBlock",h)}_polymorphicMin(h,V){return G(h,V,Math.min)}}(0,S.f)("FlowGraphMinBlock",N);class r extends Y.d{constructor(h){super(l.c,l.c,l.c,((h,V)=>this._polymorphicMax(h,V)),"FlowGraphMaxBlock",h)}_polymorphicMax(h,V){return G(h,V,Math.max)}}function k(h,V,i){return Math.min(Math.max(h,Math.min(V,i)),Math.max(V,i))}function R(h,V,i,S){switch((0,t.h)(h)){case"FlowGraphInteger":return new v.b(S(h.value,V.value,i.value));case"Vector2":return new B.Vector2(S(h.x,V.x,i.x),S(h.y,V.y,i.y));case"nV":return new B.nV(S(h.x,V.x,i.x),S(h.y,V.y,i.y),S(h.z,V.z,i.z));case"Vector4":return new B.Vector4(S(h.x,V.x,i.x),S(h.y,V.y,i.y),S(h.z,V.z,i.z),S(h.w,V.w,i.w));case"Quaternion":return new B.Quaternion(S(h.x,V.x,i.x),S(h.y,V.y,i.y),S(h.z,V.z,i.z),S(h.w,V.w,i.w));case"Matrix":return B.Matrix.UV(h.m.map(((h,l)=>S(h,V.m[l],i.m[l]))));case"Matrix2D":return new s.e(h.m.map(((h,l)=>S(h,V.m[l],i.m[l]))));case"Matrix3D":return new s.h(h.m.map(((h,l)=>S(h,V.m[l],i.m[l]))));default:return S((0,t.o)(h),(0,t.o)(V),(0,t.o)(i))}}(0,S.f)("FlowGraphMaxBlock",r);class Z extends I{constructor(h){super(l.c,l.c,l.c,l.c,((h,V,i)=>this._polymorphicClamp(h,V,i)),"FlowGraphClampBlock",h)}_polymorphicClamp(h,V,i){return R(h,V,i,k)}}function z(h){return Math.min(Math.max(h,0),1)}(0,S.f)("FlowGraphClampBlock",Z);class d extends J.b{constructor(h){super(l.c,l.c,(h=>this._polymorphicSaturate(h)),"FlowGraphSaturateBlock",h)}_polymorphicSaturate(h){return D(h,z)}}function x(h,V,i){return(1-i)*h+i*V}(0,S.f)("FlowGraphSaturateBlock",d);class y extends I{constructor(h){super(l.c,l.c,l.c,l.c,((h,V,i)=>this._polymorphicInterpolate(h,V,i)),"FlowGraphMathInterpolationBlock",h)}_polymorphicInterpolate(h,V,i){return R(h,V,i,x)}}(0,S.f)("FlowGraphMathInterpolationBlock",y);class Q extends Y.d{constructor(h){super(l.c,l.c,l.f,((h,V)=>this._polymorphicEq(h,V)),"FlowGraphEqualityBlock",h)}_polymorphicEq(h,V){const i=(0,t.h)(h),S=(0,t.h)(V);return typeof h===typeof V&&((0,t.f)(i,S)||(0,t.c)(i,S)||(0,t.b)(i,S)?h.equals(V):h===V)}}function A(h,V,i){if((0,t.r)(h)&&(0,t.r)(V))return i((0,t.o)(h),(0,t.o)(V));throw new Error(`Cannot compare ${h} and ${V}`)}(0,S.f)("FlowGraphEqualityBlock",Q);class b extends Y.d{constructor(h){super(l.c,l.c,l.f,((h,V)=>this._polymorphicLessThan(h,V)),"FlowGraphLessThanBlock",h)}_polymorphicLessThan(h,V){return A(h,V,((h,V)=>h<V))}}(0,S.f)("FlowGraphLessThanBlock",b);class C extends Y.d{constructor(h){super(l.c,l.c,l.f,((h,V)=>this._polymorphicLessThanOrEqual(h,V)),"FlowGraphLessThanOrEqualBlock",h)}_polymorphicLessThanOrEqual(h,V){return A(h,V,((h,V)=>h<=V))}}(0,S.f)("FlowGraphLessThanOrEqualBlock",C);class u extends Y.d{constructor(h){super(l.c,l.c,l.f,((h,V)=>this._polymorphicGreaterThan(h,V)),"FlowGraphGreaterThanBlock",h)}_polymorphicGreaterThan(h,V){return A(h,V,((h,V)=>h>V))}}(0,S.f)("FlowGraphGreaterThanBlock",u);class p extends Y.d{constructor(h){super(l.c,l.c,l.f,((h,V)=>this._polymorphicGreaterThanOrEqual(h,V)),"FlowGraphGreaterThanOrEqualBlock",h)}_polymorphicGreaterThanOrEqual(h,V){return A(h,V,((h,V)=>h>=V))}}(0,S.f)("FlowGraphGreaterThanOrEqualBlock",p);class W extends J.b{constructor(h){super(l.c,l.f,(h=>this._polymorphicIsNan(h)),"FlowGraphIsNaNBlock",h)}_polymorphicIsNan(h){if((0,t.r)(h,!0))return isNaN((0,t.o)(h));throw new Error(`Cannot get NaN of ${h}`)}}(0,S.f)("FlowGraphIsNaNBlock",W);class a extends J.b{constructor(h){super(l.c,l.f,(h=>this._polymorphicIsInf(h)),"FlowGraphIsInfBlock",h)}_polymorphicIsInf(h){if((0,t.r)(h))return!isFinite((0,t.o)(h));throw new Error(`Cannot get isInf of ${h}`)}}(0,S.f)("FlowGraphIsInfBlock",a);class K extends J.b{constructor(h){super(l.c,l.c,(h=>this._polymorphicDegToRad(h)),"FlowGraphDegToRadBlock",h)}_degToRad(h){return h*Math.PI/180}_polymorphicDegToRad(h){return D(h,this._degToRad)}}(0,S.f)("FlowGraphDegToRadBlock",K);class hh extends J.b{constructor(h){super(l.c,l.c,(h=>this._polymorphicRadToDeg(h)),"FlowGraphRadToDegBlock",h)}_radToDeg(h){return 180*h/Math.PI}_polymorphicRadToDeg(h){return D(h,this._radToDeg)}}(0,S.f)("FlowGraphRadToDegBlock",hh);class Vh extends J.b{constructor(h){super(l.u,l.u,(h=>this._polymorphicSin(h)),"FlowGraphSinBlock",h)}_polymorphicSin(h){return D(h,Math.sin)}}class ih extends J.b{constructor(h){super(l.u,l.u,(h=>this._polymorphicCos(h)),"FlowGraphCosBlock",h)}_polymorphicCos(h){return D(h,Math.cos)}}class Sh extends J.b{constructor(h){super(l.u,l.u,(h=>this._polymorphicTan(h)),"FlowGraphTanBlock",h)}_polymorphicTan(h){return D(h,Math.tan)}}class lh extends J.b{constructor(h){super(l.u,l.u,(h=>this._polymorphicAsin(h)),"FlowGraphASinBlock",h)}_polymorphicAsin(h){return D(h,Math.asin)}}(0,S.f)("FlowGraphASinBlock",lh);class Yh extends J.b{constructor(h){super(l.u,l.u,(h=>this._polymorphicAcos(h)),"FlowGraphACosBlock",h)}_polymorphicAcos(h){return D(h,Math.acos)}}(0,S.f)("FlowGraphACosBlock",Yh);class gh extends J.b{constructor(h){super(l.u,l.u,(h=>this._polymorphicAtan(h)),"FlowGraphATanBlock",h)}_polymorphicAtan(h){return D(h,Math.atan)}}(0,S.f)("FlowGraphATanBlock",gh);class qh extends Y.d{constructor(h){super(l.c,l.c,l.c,((h,V)=>this._polymorphicAtan2(h,V)),"FlowGraphATan2Block",h)}_polymorphicAtan2(h,V){return G(h,V,Math.atan2)}}(0,S.f)("FlowGraphATan2Block",qh);class Bh extends J.b{constructor(h){super(l.c,l.c,(h=>this._polymorphicSinh(h)),"FlowGraphSinhBlock",h)}_polymorphicSinh(h){return D(h,Math.sinh)}}(0,S.f)("FlowGraphSinhBlock",Bh);class Jh extends J.b{constructor(h){super(l.c,l.c,(h=>this._polymorphicCosh(h)),"FlowGraphCoshBlock",h)}_polymorphicCosh(h){return D(h,Math.cosh)}}(0,S.f)("FlowGraphCoshBlock",Jh);class Ih extends J.b{constructor(h){super(l.c,l.c,(h=>this._polymorphicTanh(h)),"FlowGraphTanhBlock",h)}_polymorphicTanh(h){return D(h,Math.tanh)}}(0,S.f)("FlowGraphTanhBlock",Ih);class vh extends J.b{constructor(h){super(l.c,l.u,(h=>this._polymorphicAsinh(h)),"FlowGraphASinhBlock",h)}_polymorphicAsinh(h){return D(h,Math.asinh)}}(0,S.f)("FlowGraphASinhBlock",vh);class sh extends J.b{constructor(h){super(l.c,l.u,(h=>this._polymorphicAcosh(h)),"FlowGraphACoshBlock",h)}_polymorphicAcosh(h){return D(h,Math.acosh)}}(0,S.f)("FlowGraphACoshBlock",sh);class th extends J.b{constructor(h){super(l.c,l.u,(h=>this._polymorphicAtanh(h)),"FlowGraphATanhBlock",h)}_polymorphicAtanh(h){return D(h,Math.atanh)}}(0,S.f)("FlowGraphATanhBlock",th);class Th extends J.b{constructor(h){super(l.c,l.u,(h=>this._polymorphicExp(h)),"FlowGraphExponentialBlock",h)}_polymorphicExp(h){return D(h,Math.exp)}}(0,S.f)("FlowGraphExponentialBlock",Th);class eh extends J.b{constructor(h){super(l.c,l.u,(h=>this._polymorphicLog(h)),"FlowGraphLogBlock",h)}_polymorphicLog(h){return D(h,Math.log)}}(0,S.f)("FlowGraphLogBlock",eh);class nh extends J.b{constructor(h){super(l.c,l.u,(h=>this._polymorphicLog2(h)),"FlowGraphLog2Block",h)}_polymorphicLog2(h){return D(h,Math.log2)}}(0,S.f)("FlowGraphLog2Block",nh);class ch extends J.b{constructor(h){super(l.c,l.u,(h=>this._polymorphicLog10(h)),"FlowGraphLog10Block",h)}_polymorphicLog10(h){return D(h,Math.log10)}}(0,S.f)("FlowGraphLog10Block",ch);class fh extends J.b{constructor(h){super(l.c,l.u,(h=>this._polymorphicSqrt(h)),"FlowGraphSquareRootBlock",h)}_polymorphicSqrt(h){return D(h,Math.sqrt)}}(0,S.f)("FlowGraphSquareRootBlock",fh);class Ph extends J.b{constructor(h){super(l.c,l.u,(h=>this._polymorphicCubeRoot(h)),"FlowGraphCubeRootBlock",h)}_polymorphicCubeRoot(h){return D(h,Math.cbrt)}}(0,S.f)("FlowGraphCubeRootBlock",Ph);class Lh extends Y.d{constructor(h){super(l.c,l.u,l.u,((h,V)=>this._polymorphicPow(h,V)),"FlowGraphPowerBlock",h)}_polymorphicPow(h,V){return G(h,V,Math.pow)}}(0,S.f)("FlowGraphPowerBlock",Lh);class Uh extends J.b{constructor(h){super((0,l.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,l.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(h=>"boolean"===typeof h?!h:"number"===typeof h?~h:new v.b(~h.value)),"FlowGraphBitwiseNotBlock",h)}}(0,S.f)("FlowGraphBitwiseNotBlock",Uh);class Xh extends Y.d{constructor(h){super((0,l.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,l.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,l.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),((h,V)=>{if("boolean"===typeof h&&"boolean"===typeof V)return h&&V;if("number"===typeof h&&"number"===typeof V)return h&V;if("object"===typeof h&&"object"===typeof V)return new v.b(h.value&V.value);throw new Error(`Cannot perform bitwise AND on ${h} and ${V}`)}),"FlowGraphBitwiseAndBlock",h)}}(0,S.f)("FlowGraphBitwiseAndBlock",Xh);class Dh extends Y.d{constructor(h){super((0,l.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,l.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,l.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),((h,V)=>{if("boolean"===typeof h&&"boolean"===typeof V)return h||V;if("number"===typeof h&&"number"===typeof V)return h|V;if("object"===typeof h&&"object"===typeof V)return new v.b(h.value|V.value);throw new Error(`Cannot perform bitwise OR on ${h} and ${V}`)}),"FlowGraphBitwiseOrBlock",h)}}(0,S.f)("FlowGraphBitwiseOrBlock",Dh);class Oh extends Y.d{constructor(h){super((0,l.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,l.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,l.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),((h,V)=>{if("boolean"===typeof h&&"boolean"===typeof V)return h!==V;if("number"===typeof h&&"number"===typeof V)return h^V;if("object"===typeof h&&"object"===typeof V)return new v.b(h.value^V.value);throw new Error(`Cannot perform bitwise XOR on ${h} and ${V}`)}),"FlowGraphBitwiseXorBlock",h)}}(0,S.f)("FlowGraphBitwiseXorBlock",Oh);class oh extends Y.d{constructor(h){super(l.i,l.i,l.i,((h,V)=>new v.b(h.value<<V.value)),"FlowGraphBitwiseLeftShiftBlock",h)}}(0,S.f)("FlowGraphBitwiseLeftShiftBlock",oh);class Mh extends Y.d{constructor(h){super(l.i,l.i,l.i,((h,V)=>new v.b(h.value>>V.value)),"FlowGraphBitwiseRightShiftBlock",h)}}(0,S.f)("FlowGraphBitwiseRightShiftBlock",Mh);class Fh extends J.b{constructor(h){super(l.i,l.i,(h=>new v.b(Math.clz32(h.value))),"FlowGraphLeadingZerosBlock",h)}}(0,S.f)("FlowGraphLeadingZerosBlock",Fh);class Eh extends J.b{constructor(h){super(l.i,l.i,(h=>new v.b(h.value?31-Math.clz32(h.value&-h.value):32)),"FlowGraphTrailingZerosBlock",h)}}(0,S.f)("FlowGraphTrailingZerosBlock",Eh);class Hh extends J.b{constructor(h){super(l.i,l.i,(h=>new v.b(function(h){let V=0;for(;h;)V+=1&h,h>>=1;return V}(h.value))),"FlowGraphOneBitsCounterBlock",h)}}(0,S.f)("FlowGraphOneBitsCounterBlock",Hh)},14373:(h,V,i)=>{i.d(V,{d:()=>l});var S=i(14382);class l extends S.d{constructor(h,V,i,S,l,Y){super(i,Y),this._operation=S,this._className=l,this.a=this.registerDataInput("a",h),this.b=this.registerDataInput("b",V)}_doOperation(h){const V=this.a.getValue(h),i=this.b.getValue(h);return this._operation(V,i)}getClassName(){return this._className}}},14382:(h,V,i)=>{i.d(V,{d:()=>q});var S=i(12827),l=i(12805);const Y="cachedOperationValue",g="cachedExecutionId";class q extends S.c{constructor(h,V){super(V),this.value=this.registerDataOutput("value",h),this.isValid=this.registerDataOutput("isValid",l.f)}_updateOutputs(h){const V=h._getExecutionVariable(this,g,-1),i=h._getExecutionVariable(this,Y,null);if(void 0!==i&&null!==i&&V===h.executionId)this.isValid.setValue(!0,h),this.value.setValue(i,h);else try{const V=this._doOperation(h);if(void 0===V||null===V)return void this.isValid.setValue(!1,h);h._setExecutionVariable(this,Y,V),h._setExecutionVariable(this,g,h.executionId),this.value.setValue(V,h),this.isValid.setValue(!0,h)}catch(S){this.isValid.setValue(!1,h)}}}},14389:(h,V,i)=>{i.d(V,{b:()=>l});var S=i(14382);class l extends S.d{constructor(h,V,i,S,l){super(V,l),this._operation=i,this._className=S,this.a=this.registerDataInput("a",h)}_doOperation(h){return this._operation(this.a.getValue(h))}getClassName(){return this._className}}}}]);