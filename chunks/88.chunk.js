"use strict";(self.ra6kpa9z1sg=self.ra6kpa9z1sg||[]).push([[88],{15992:(p,b,M)=>{M.r(b),M.d(b,{FlowGraphAbsBlock:()=>e,FlowGraphAcosBlock:()=>mb,FlowGraphAcoshBlock:()=>Sp,FlowGraphAddBlock:()=>c,FlowGraphAsinBlock:()=>Qp,FlowGraphAsinhBlock:()=>xp,FlowGraphAtan2Block:()=>Pp,FlowGraphAtanBlock:()=>yp,FlowGraphAtanhBlock:()=>Xp,FlowGraphBitwiseAndBlock:()=>Lp,FlowGraphBitwiseLeftShiftBlock:()=>dp,FlowGraphBitwiseNotBlock:()=>lp,FlowGraphBitwiseOrBlock:()=>upp,FlowGraphBitwiseRightShiftBlock:()=>Ip,FlowGraphBitwiseXorBlock:()=>ep,FlowGraphCeilBlock:()=>v,FlowGraphClampBlock:()=>E,FlowGraphCosBlock:()=>Mp,FlowGraphCoshBlock:()=>tp,FlowGraphCubeRootBlock:()=>ap,FlowGraphDegToRadBlock:()=>F,FlowGraphDivideBlock:()=>f,FlowGraphEBlock:()=>a,FlowGraphEqualityBlock:()=>O,FlowGraphExpBlock:()=>cp,FlowGraphFloorBlock:()=>G,FlowGraphFractionBlock:()=>U,FlowGraphGreaterThanBlock:()=>k,FlowGraphGreaterThanOrEqualBlock:()=>A,FlowGraphInfBlock:()=>l,FlowGraphIsInfinityBlock:()=>C,FlowGraphIsNanBlock:()=>n,FlowGraphLeadingZerosBlock:()=>Gp,FlowGraphLessThanBlock:()=>K,FlowGraphLessThanOrEqualBlock:()=>r,FlowGraphLog10Block:()=>fp,FlowGraphLog2Block:()=>gp,FlowGraphLogBlock:()=>Jp,FlowGraphMathInterpolationBlock:()=>N,FlowGraphMaxBlock:()=>T,FlowGraphMinBlock:()=>i,FlowGraphModuloBlock:()=>s,FlowGraphMultiplyBlock:()=>g,FlowGraphNaNBlock:()=>L,FlowGraphNegationBlock:()=>q,FlowGraphOneBitsCounterBlock:()=>Zp,FlowGraphPiBlock:()=>o,FlowGraphPowerBlock:()=>op,FlowGraphRadToDegBlock:()=>pp,FlowGraphRandomBlock:()=>Y,FlowGraphRoundBlock:()=>Z,FlowGraphSaturateBlock:()=>V,FlowGraphSignBlock:()=>d,FlowGraphSinBlock:()=>bp,FlowGraphSinhBlock:()=>wp,FlowGraphSquareRootBlock:()=>Yp,FlowGraphSubtractBlock:()=>J,FlowGraphTanBlock:()=>hp,FlowGraphTanhBlock:()=>zp,FlowGraphTrailingZerosBlock:()=>vp,FlowGraphTruncBlock:()=>I});var h=M(12730),Q=M(14316),mp=M(16001),y=M(16006);class P extends y.e{constructor(p,b,M,h){super(p,h),this._operation=b,this._className=M}_doOperation(p){return this._operation(p)}getClassName(){return this._className}}var w=M(12777),t=M(16015);class z extends y.e{constructor(p,b,M,h,Q,mp,y){super(h,y),this._operation=Q,this._className=mp,this.a=this.registerDataInput("a",p),this.b=this.registerDataInput("b",b),this.c=this.registerDataInput("c",M)}_doOperation(p){return this._operation(this.a.getValue(p),this.b.getValue(p),this.c.getValue(p))}getClassName(){return this._className}}var x=M(14311),S=M(14321),X=M(14351);class c extends mp.e{constructor(p){super((0,Q.L)(null===p||void 0===p?void 0:p.type),(0,Q.L)(null===p||void 0===p?void 0:p.type),(0,Q.L)(null===p||void 0===p?void 0:p.type),((p,b)=>this._polymorphicAdd(p,b)),"FlowGraphAddBlock",p)}_polymorphicAdd(p,b){const M=(0,X.n)(p),h=(0,X.n)(b);if((0,X.k)(M,h)||(0,X.h)(M,h)||(0,X.e)(M,h))return p.add(b);if("Quaternion"===M||"Vector4"===h)return new w.Vector4(p.x,p.y,p.z,p.w).addInPlace(b);if("Vector4"===M||"Quaternion"===h)return p.add(b);var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.preventIntegerFloatArithmetic&&typeof p!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,X.v)(p)+(0,X.v)(b)}}(0,h.c)("FlowGraphAddBlock",c);class J extends mp.e{constructor(p){super((0,Q.L)(null===p||void 0===p?void 0:p.type),(0,Q.L)(null===p||void 0===p?void 0:p.type),(0,Q.L)(null===p||void 0===p?void 0:p.type),((p,b)=>this._polymorphicSubtract(p,b)),"FlowGraphSubtractBlock",p)}_polymorphicSubtract(p,b){const M=(0,X.n)(p),h=(0,X.n)(b);if((0,X.k)(M,h)||(0,X.e)(M,h)||(0,X.h)(M,h))return p.mh(b);if("Quaternion"===M||"Vector4"===h)return new w.Vector4(p.x,p.y,p.z,p.w).eS(b);if("Vector4"===M||"Quaternion"===h)return p.mh(b);var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.preventIntegerFloatArithmetic&&typeof p!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,X.v)(p)-(0,X.v)(b)}}(0,h.c)("FlowGraphSubtractBlock",J);class g extends mp.e{constructor(p){super((0,Q.L)(null===p||void 0===p?void 0:p.type),(0,Q.L)(null===p||void 0===p?void 0:p.type),(0,Q.L)(null===p||void 0===p?void 0:p.type),((p,b)=>this._polymorphicMultiply(p,b)),"FlowGraphMultiplyBlock",p)}_polymorphicMultiply(p,b){const M=(0,X.n)(p),h=(0,X.n)(b);if((0,X.k)(M,h)||(0,X.e)(M,h))return p.multiply(b);if("Quaternion"===M||"Vector4"===h)return new w.Vector4(p.x,p.y,p.z,p.w).multiplyInPlace(b);if("Vector4"===M||"Quaternion"===h)return p.multiply(b);if((0,X.h)(M,h)){var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.useMatrixPerComponent){const h=p.m;for(let p=0;p<h.length;p++)h[p]*=b.m[p];return"Matrix2D"===M?new S.c(h):"Matrix3D"===M?new S.e(h):w.Matrix.tM(h)}return b.multiply(p)}var mp;if(null!==(mp=this.config)&&void 0!==mp&&mp.preventIntegerFloatArithmetic&&typeof p!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,X.v)(p)*(0,X.v)(b)}}(0,h.c)("FlowGraphMultiplyBlock",g);class f extends mp.e{constructor(p){super((0,Q.L)(null===p||void 0===p?void 0:p.type),(0,Q.L)(null===p||void 0===p?void 0:p.type),(0,Q.L)(null===p||void 0===p?void 0:p.type),((p,b)=>this._polymorphicDivide(p,b)),"FlowGraphDivideBlock",p)}_polymorphicDivide(p,b){const M=(0,X.n)(p),h=(0,X.n)(b);if((0,X.k)(M,h)||(0,X.e)(M,h))return p.divide(b);if("Quaternion"===M||"Quaternion"===h){const M=p.clone();return M.x/=b.x,M.y/=b.y,M.z/=b.z,M.w/=b.w,M}if("Quaternion"===M||"Vector4"===h)return new w.Vector4(p.x,p.y,p.z,p.w).divideInPlace(b);if("Vector4"===M||"Quaternion"===h)return p.divide(b);if((0,X.h)(M,h)){var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.useMatrixPerComponent){const h=p.m;for(let p=0;p<h.length;p++)h[p]/=b.m[p];return"Matrix2D"===M?new S.c(h):"Matrix3D"===M?new S.e(h):w.Matrix.tM(h)}return p.divide(b)}var mp;if(null!==(mp=this.config)&&void 0!==mp&&mp.preventIntegerFloatArithmetic&&typeof p!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,X.v)(p)/(0,X.v)(b)}}(0,h.c)("FlowGraphDivideBlock",f);class Y extends P{constructor(p){super(Q.t,(p=>this._random(p)),"FlowGraphRandomBlock",p),this.min=this.registerDataInput("min",Q.t,(null===p||void 0===p?void 0:p.min)??0),this.max=this.registerDataInput("max",Q.t,(null===p||void 0===p?void 0:p.max)??1),null!==p&&void 0!==p&&p.seed&&(this._seed=p.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const p=1e4*Math.sin(this._seed++);return p-Math.floor(p)}return Math.random()}_random(p){const b=this.min.getValue(p),M=this.max.getValue(p);return this._getRandomValue()*(M-b)+b}}(0,h.c)("FlowGraphRandomBlock",Y);class a extends P{constructor(p){super(Q.t,(()=>Math.E),"FlowGraphEBlock",p)}}(0,h.c)("FlowGraphEBlock",a);class o extends P{constructor(p){super(Q.t,(()=>Math.PI),"FlowGraphPIBlock",p)}}(0,h.c)("FlowGraphPIBlock",o);class l extends P{constructor(p){super(Q.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",p)}}(0,h.c)("FlowGraphInfBlock",l);class L extends P{constructor(p){super(Q.t,(()=>Number.NaN),"FlowGraphNaNBlock",p)}}function u(p,b){switch((0,X.n)(p)){case"FlowGraphInteger":return new x.e(b(p.value));case"Vector2":return new w.Vector2(b(p.x),b(p.y));case"QM":return new w.QM(b(p.x),b(p.y),b(p.z));case"Vector4":return new w.Vector4(b(p.x),b(p.y),b(p.z),b(p.w));case"Quaternion":return new w.Quaternion(b(p.x),b(p.y),b(p.z),b(p.w));case"Matrix":return w.Matrix.tM(p.m.map(b));case"Matrix2D":return new S.c(p.m.map(b));case"Matrix3D":return new S.e(p.m.map(b));default:return b(p)}}(0,h.c)("FlowGraphNaNBlock",L);class e extends t.c{constructor(p){super(Q.t,Q.t,(p=>this._polymorphicAbs(p)),"FlowGraphAbsBlock",p)}_polymorphicAbs(p){return u(p,Math.abs)}}(0,h.c)("FlowGraphAbsBlock",e);class d extends t.c{constructor(p){super(Q.t,Q.t,(p=>this._polymorphicSign(p)),"FlowGraphSignBlock",p)}_polymorphicSign(p){return u(p,Math.sign)}}(0,h.c)("FlowGraphSignBlock",d);class I extends t.c{constructor(p){super(Q.t,Q.t,(p=>this._polymorphicTrunc(p)),"FlowGraphTruncBlock",p)}_polymorphicTrunc(p){return u(p,Math.trunc)}}(0,h.c)("FlowGraphTruncBlock",I);class G extends t.c{constructor(p){super(Q.t,Q.t,(p=>this._polymorphicFloor(p)),"FlowGraphFloorBlock",p)}_polymorphicFloor(p){return u(p,Math.floor)}}(0,h.c)("FlowGraphFloorBlock",G);class v extends t.c{constructor(p){super(Q.e,Q.e,(p=>this._polymorphicCeiling(p)),"FlowGraphCeilBlock",p)}_polymorphicCeiling(p){return u(p,Math.ceil)}}(0,h.c)("FlowGraphCeilBlock",v);class Z extends t.c{constructor(p){super(Q.e,Q.e,(p=>this._polymorphicRound(p)),"FlowGraphRoundBlock",p)}_polymorphicRound(p){return u(p,(p=>{var b;return p<0&&null!==(b=this.config)&&void 0!==b&&b.roundHalfAwayFromZero?-Math.round(-p):Math.round(p)}))}}(0,h.c)("FlowGraphRoundBlock",Z);class U extends t.c{constructor(p){super(Q.e,Q.e,(p=>this._polymorphicFraction(p)),"FlowGraphFractBlock",p)}_polymorphicFraction(p){return u(p,(p=>p-Math.floor(p)))}}(0,h.c)("FlowGraphFractBlock",U);class q extends t.c{constructor(p){super(Q.e,Q.e,(p=>this._polymorphicNeg(p)),"FlowGraphNegationBlock",p)}_polymorphicNeg(p){return u(p,(p=>-p))}}function B(p,b,M){switch((0,X.n)(p)){case"FlowGraphInteger":return new x.e(M(p.value,b.value));case"Vector2":return new w.Vector2(M(p.x,b.x),M(p.y,b.y));case"QM":return new w.QM(M(p.x,b.x),M(p.y,b.y),M(p.z,b.z));case"Vector4":return new w.Vector4(M(p.x,b.x),M(p.y,b.y),M(p.z,b.z),M(p.w,b.w));case"Quaternion":return new w.Quaternion(M(p.x,b.x),M(p.y,b.y),M(p.z,b.z),M(p.w,b.w));case"Matrix":return w.Matrix.tM(p.m.map(((p,h)=>M(p,b.m[h]))));case"Matrix2D":return new S.c(p.m.map(((p,h)=>M(p,b.m[h]))));case"Matrix3D":return new S.e(p.m.map(((p,h)=>M(p,b.m[h]))));default:return M((0,X.v)(p),(0,X.v)(b))}}(0,h.c)("FlowGraphNegationBlock",q);class s extends mp.e{constructor(p){super(Q.e,Q.e,Q.e,((p,b)=>this._polymorphicRemainder(p,b)),"FlowGraphModuloBlock",p)}_polymorphicRemainder(p,b){return B(p,b,((p,b)=>p%b))}}(0,h.c)("FlowGraphModuloBlock",s);class i extends mp.e{constructor(p){super(Q.e,Q.e,Q.e,((p,b)=>this._polymorphicMin(p,b)),"FlowGraphMinBlock",p)}_polymorphicMin(p,b){return B(p,b,Math.min)}}(0,h.c)("FlowGraphMinBlock",i);class T extends mp.e{constructor(p){super(Q.e,Q.e,Q.e,((p,b)=>this._polymorphicMax(p,b)),"FlowGraphMaxBlock",p)}_polymorphicMax(p,b){return B(p,b,Math.max)}}function W(p,b,M){return Math.min(Math.max(p,Math.min(b,M)),Math.max(b,M))}function H(p,b,M,h){switch((0,X.n)(p)){case"FlowGraphInteger":return new x.e(h(p.value,b.value,M.value));case"Vector2":return new w.Vector2(h(p.x,b.x,M.x),h(p.y,b.y,M.y));case"QM":return new w.QM(h(p.x,b.x,M.x),h(p.y,b.y,M.y),h(p.z,b.z,M.z));case"Vector4":return new w.Vector4(h(p.x,b.x,M.x),h(p.y,b.y,M.y),h(p.z,b.z,M.z),h(p.w,b.w,M.w));case"Quaternion":return new w.Quaternion(h(p.x,b.x,M.x),h(p.y,b.y,M.y),h(p.z,b.z,M.z),h(p.w,b.w,M.w));case"Matrix":return w.Matrix.tM(p.m.map(((p,Q)=>h(p,b.m[Q],M.m[Q]))));case"Matrix2D":return new S.c(p.m.map(((p,Q)=>h(p,b.m[Q],M.m[Q]))));case"Matrix3D":return new S.e(p.m.map(((p,Q)=>h(p,b.m[Q],M.m[Q]))));default:return h((0,X.v)(p),(0,X.v)(b),(0,X.v)(M))}}(0,h.c)("FlowGraphMaxBlock",T);class E extends z{constructor(p){super(Q.e,Q.e,Q.e,Q.e,((p,b,M)=>this._polymorphicClamp(p,b,M)),"FlowGraphClampBlock",p)}_polymorphicClamp(p,b,M){return H(p,b,M,W)}}function j(p){return Math.min(Math.max(p,0),1)}(0,h.c)("FlowGraphClampBlock",E);class V extends t.c{constructor(p){super(Q.e,Q.e,(p=>this._polymorphicSaturate(p)),"FlowGraphSaturateBlock",p)}_polymorphicSaturate(p){return u(p,j)}}function D(p,b,M){return(1-M)*p+M*b}(0,h.c)("FlowGraphSaturateBlock",V);class N extends z{constructor(p){super(Q.e,Q.e,Q.e,Q.e,((p,b,M)=>this._polymorphicInterpolate(p,b,M)),"FlowGraphMathInterpolationBlock",p)}_polymorphicInterpolate(p,b,M){return H(p,b,M,D)}}(0,h.c)("FlowGraphMathInterpolationBlock",N);class O extends mp.e{constructor(p){super(Q.e,Q.e,Q.g,((p,b)=>this._polymorphicEq(p,b)),"FlowGraphEqualityBlock",p)}_polymorphicEq(p,b){const M=(0,X.n)(p),h=(0,X.n)(b);return typeof p===typeof b&&((0,X.k)(M,h)||(0,X.h)(M,h)||(0,X.e)(M,h)?p.equals(b):p===b)}}function R(p,b,M){if((0,X.x)(p)&&(0,X.x)(b))return M((0,X.v)(p),(0,X.v)(b));throw new Error(`Cannot compare ${p} and ${b}`)}(0,h.c)("FlowGraphEqualityBlock",O);class K extends mp.e{constructor(p){super(Q.e,Q.e,Q.g,((p,b)=>this._polymorphicLessThan(p,b)),"FlowGraphLessThanBlock",p)}_polymorphicLessThan(p,b){return R(p,b,((p,b)=>p<b))}}(0,h.c)("FlowGraphLessThanBlock",K);class r extends mp.e{constructor(p){super(Q.e,Q.e,Q.g,((p,b)=>this._polymorphicLessThanOrEqual(p,b)),"FlowGraphLessThanOrEqualBlock",p)}_polymorphicLessThanOrEqual(p,b){return R(p,b,((p,b)=>p<=b))}}(0,h.c)("FlowGraphLessThanOrEqualBlock",r);class k extends mp.e{constructor(p){super(Q.e,Q.e,Q.g,((p,b)=>this._polymorphicGreaterThan(p,b)),"FlowGraphGreaterThanBlock",p)}_polymorphicGreaterThan(p,b){return R(p,b,((p,b)=>p>b))}}(0,h.c)("FlowGraphGreaterThanBlock",k);class A extends mp.e{constructor(p){super(Q.e,Q.e,Q.g,((p,b)=>this._polymorphicGreaterThanOrEqual(p,b)),"FlowGraphGreaterThanOrEqualBlock",p)}_polymorphicGreaterThanOrEqual(p,b){return R(p,b,((p,b)=>p>=b))}}(0,h.c)("FlowGraphGreaterThanOrEqualBlock",A);class n extends t.c{constructor(p){super(Q.e,Q.g,(p=>this._polymorphicIsNan(p)),"FlowGraphIsNaNBlock",p)}_polymorphicIsNan(p){if((0,X.x)(p,!0))return isNaN((0,X.v)(p));throw new Error(`Cannot get NaN of ${p}`)}}(0,h.c)("FlowGraphIsNaNBlock",n);class C extends t.c{constructor(p){super(Q.e,Q.g,(p=>this._polymorphicIsInf(p)),"FlowGraphIsInfBlock",p)}_polymorphicIsInf(p){if((0,X.x)(p))return!isFinite((0,X.v)(p));throw new Error(`Cannot get isInf of ${p}`)}}(0,h.c)("FlowGraphIsInfBlock",C);class F extends t.c{constructor(p){super(Q.e,Q.e,(p=>this._polymorphicDegToRad(p)),"FlowGraphDegToRadBlock",p)}_degToRad(p){return p*Math.PI/180}_polymorphicDegToRad(p){return u(p,this._degToRad)}}(0,h.c)("FlowGraphDegToRadBlock",F);class pp extends t.c{constructor(p){super(Q.e,Q.e,(p=>this._polymorphicRadToDeg(p)),"FlowGraphRadToDegBlock",p)}_radToDeg(p){return 180*p/Math.PI}_polymorphicRadToDeg(p){return u(p,this._radToDeg)}}(0,h.c)("FlowGraphRadToDegBlock",pp);class bp extends t.c{constructor(p){super(Q.t,Q.t,(p=>this._polymorphicSin(p)),"FlowGraphSinBlock",p)}_polymorphicSin(p){return u(p,Math.sin)}}class Mp extends t.c{constructor(p){super(Q.t,Q.t,(p=>this._polymorphicCos(p)),"FlowGraphCosBlock",p)}_polymorphicCos(p){return u(p,Math.cos)}}class hp extends t.c{constructor(p){super(Q.t,Q.t,(p=>this._polymorphicTan(p)),"FlowGraphTanBlock",p)}_polymorphicTan(p){return u(p,Math.tan)}}class Qp extends t.c{constructor(p){super(Q.t,Q.t,(p=>this._polymorphicAsin(p)),"FlowGraphASinBlock",p)}_polymorphicAsin(p){return u(p,Math.asin)}}(0,h.c)("FlowGraphASinBlock",Qp);class mb extends t.c{constructor(p){super(Q.t,Q.t,(p=>this._polymorphicAcos(p)),"FlowGraphACosBlock",p)}_polymorphicAcos(p){return u(p,Math.acos)}}(0,h.c)("FlowGraphACosBlock",mb);class yp extends t.c{constructor(p){super(Q.t,Q.t,(p=>this._polymorphicAtan(p)),"FlowGraphATanBlock",p)}_polymorphicAtan(p){return u(p,Math.atan)}}(0,h.c)("FlowGraphATanBlock",yp);class Pp extends mp.e{constructor(p){super(Q.e,Q.e,Q.e,((p,b)=>this._polymorphicAtan2(p,b)),"FlowGraphATan2Block",p)}_polymorphicAtan2(p,b){return B(p,b,Math.atan2)}}(0,h.c)("FlowGraphATan2Block",Pp);class wp extends t.c{constructor(p){super(Q.e,Q.e,(p=>this._polymorphicSinh(p)),"FlowGraphSinhBlock",p)}_polymorphicSinh(p){return u(p,Math.sinh)}}(0,h.c)("FlowGraphSinhBlock",wp);class tp extends t.c{constructor(p){super(Q.e,Q.e,(p=>this._polymorphicCosh(p)),"FlowGraphCoshBlock",p)}_polymorphicCosh(p){return u(p,Math.cosh)}}(0,h.c)("FlowGraphCoshBlock",tp);class zp extends t.c{constructor(p){super(Q.e,Q.e,(p=>this._polymorphicTanh(p)),"FlowGraphTanhBlock",p)}_polymorphicTanh(p){return u(p,Math.tanh)}}(0,h.c)("FlowGraphTanhBlock",zp);class xp extends t.c{constructor(p){super(Q.e,Q.t,(p=>this._polymorphicAsinh(p)),"FlowGraphASinhBlock",p)}_polymorphicAsinh(p){return u(p,Math.asinh)}}(0,h.c)("FlowGraphASinhBlock",xp);class Sp extends t.c{constructor(p){super(Q.e,Q.t,(p=>this._polymorphicAcosh(p)),"FlowGraphACoshBlock",p)}_polymorphicAcosh(p){return u(p,Math.acosh)}}(0,h.c)("FlowGraphACoshBlock",Sp);class Xp extends t.c{constructor(p){super(Q.e,Q.t,(p=>this._polymorphicAtanh(p)),"FlowGraphATanhBlock",p)}_polymorphicAtanh(p){return u(p,Math.atanh)}}(0,h.c)("FlowGraphATanhBlock",Xp);class cp extends t.c{constructor(p){super(Q.e,Q.t,(p=>this._polymorphicExp(p)),"FlowGraphExponentialBlock",p)}_polymorphicExp(p){return u(p,Math.exp)}}(0,h.c)("FlowGraphExponentialBlock",cp);class Jp extends t.c{constructor(p){super(Q.e,Q.t,(p=>this._polymorphicLog(p)),"FlowGraphLogBlock",p)}_polymorphicLog(p){return u(p,Math.log)}}(0,h.c)("FlowGraphLogBlock",Jp);class gp extends t.c{constructor(p){super(Q.e,Q.t,(p=>this._polymorphicLog2(p)),"FlowGraphLog2Block",p)}_polymorphicLog2(p){return u(p,Math.log2)}}(0,h.c)("FlowGraphLog2Block",gp);class fp extends t.c{constructor(p){super(Q.e,Q.t,(p=>this._polymorphicLog10(p)),"FlowGraphLog10Block",p)}_polymorphicLog10(p){return u(p,Math.log10)}}(0,h.c)("FlowGraphLog10Block",fp);class Yp extends t.c{constructor(p){super(Q.e,Q.t,(p=>this._polymorphicSqrt(p)),"FlowGraphSquareRootBlock",p)}_polymorphicSqrt(p){return u(p,Math.sqrt)}}(0,h.c)("FlowGraphSquareRootBlock",Yp);class ap extends t.c{constructor(p){super(Q.e,Q.t,(p=>this._polymorphicCubeRoot(p)),"FlowGraphCubeRootBlock",p)}_polymorphicCubeRoot(p){return u(p,Math.cbrt)}}(0,h.c)("FlowGraphCubeRootBlock",ap);class op extends mp.e{constructor(p){super(Q.e,Q.t,Q.t,((p,b)=>this._polymorphicPow(p,b)),"FlowGraphPowerBlock",p)}_polymorphicPow(p,b){return B(p,b,Math.pow)}}(0,h.c)("FlowGraphPowerBlock",op);class lp extends t.c{constructor(p){super((0,Q.L)((null===p||void 0===p?void 0:p.valueType)||"FlowGraphInteger"),(0,Q.L)((null===p||void 0===p?void 0:p.valueType)||"FlowGraphInteger"),(p=>"boolean"===typeof p?!p:"number"===typeof p?~p:new x.e(~p.value)),"FlowGraphBitwiseNotBlock",p)}}(0,h.c)("FlowGraphBitwiseNotBlock",lp);class Lp extends mp.e{constructor(p){super((0,Q.L)((null===p||void 0===p?void 0:p.valueType)||"FlowGraphInteger"),(0,Q.L)((null===p||void 0===p?void 0:p.valueType)||"FlowGraphInteger"),(0,Q.L)((null===p||void 0===p?void 0:p.valueType)||"FlowGraphInteger"),((p,b)=>{if("boolean"===typeof p&&"boolean"===typeof b)return p&&b;if("number"===typeof p&&"number"===typeof b)return p&b;if("object"===typeof p&&"object"===typeof b)return new x.e(p.value&b.value);throw new Error(`Cannot perform bitwise AND on ${p} and ${b}`)}),"FlowGraphBitwiseAndBlock",p)}}(0,h.c)("FlowGraphBitwiseAndBlock",Lp);class upp extends mp.e{constructor(p){super((0,Q.L)((null===p||void 0===p?void 0:p.valueType)||"FlowGraphInteger"),(0,Q.L)((null===p||void 0===p?void 0:p.valueType)||"FlowGraphInteger"),(0,Q.L)((null===p||void 0===p?void 0:p.valueType)||"FlowGraphInteger"),((p,b)=>{if("boolean"===typeof p&&"boolean"===typeof b)return p||b;if("number"===typeof p&&"number"===typeof b)return p|b;if("object"===typeof p&&"object"===typeof b)return new x.e(p.value|b.value);throw new Error(`Cannot perform bitwise OR on ${p} and ${b}`)}),"FlowGraphBitwiseOrBlock",p)}}(0,h.c)("FlowGraphBitwiseOrBlock",upp);class ep extends mp.e{constructor(p){super((0,Q.L)((null===p||void 0===p?void 0:p.valueType)||"FlowGraphInteger"),(0,Q.L)((null===p||void 0===p?void 0:p.valueType)||"FlowGraphInteger"),(0,Q.L)((null===p||void 0===p?void 0:p.valueType)||"FlowGraphInteger"),((p,b)=>{if("boolean"===typeof p&&"boolean"===typeof b)return p!==b;if("number"===typeof p&&"number"===typeof b)return p^b;if("object"===typeof p&&"object"===typeof b)return new x.e(p.value^b.value);throw new Error(`Cannot perform bitwise XOR on ${p} and ${b}`)}),"FlowGraphBitwiseXorBlock",p)}}(0,h.c)("FlowGraphBitwiseXorBlock",ep);class dp extends mp.e{constructor(p){super(Q.k,Q.k,Q.k,((p,b)=>new x.e(p.value<<b.value)),"FlowGraphBitwiseLeftShiftBlock",p)}}(0,h.c)("FlowGraphBitwiseLeftShiftBlock",dp);class Ip extends mp.e{constructor(p){super(Q.k,Q.k,Q.k,((p,b)=>new x.e(p.value>>b.value)),"FlowGraphBitwiseRightShiftBlock",p)}}(0,h.c)("FlowGraphBitwiseRightShiftBlock",Ip);class Gp extends t.c{constructor(p){super(Q.k,Q.k,(p=>new x.e(Math.clz32(p.value))),"FlowGraphLeadingZerosBlock",p)}}(0,h.c)("FlowGraphLeadingZerosBlock",Gp);class vp extends t.c{constructor(p){super(Q.k,Q.k,(p=>new x.e(p.value?31-Math.clz32(p.value&-p.value):32)),"FlowGraphTrailingZerosBlock",p)}}(0,h.c)("FlowGraphTrailingZerosBlock",vp);class Zp extends t.c{constructor(p){super(Q.k,Q.k,(p=>new x.e(function(p){let b=0;for(;p;)b+=1&p,p>>=1;return b}(p.value))),"FlowGraphOneBitsCounterBlock",p)}}(0,h.c)("FlowGraphOneBitsCounterBlock",Zp)},16001:(p,b,M)=>{M.d(b,{e:()=>Q});var h=M(16006);class Q extends h.e{constructor(p,b,M,h,Q,mp){super(M,mp),this._operation=h,this._className=Q,this.a=this.registerDataInput("a",p),this.b=this.registerDataInput("b",b)}_doOperation(p){const b=this.a.getValue(p),M=this.b.getValue(p);return this._operation(b,M)}getClassName(){return this._className}}},16006:(p,b,M)=>{M.d(b,{e:()=>P});var h=M(14341),Q=M(14316);const mp="cachedOperationValue",y="cachedExecutionId";class P extends h.d{constructor(p,b){super(b),this.value=this.registerDataOutput("value",p),this.isValid=this.registerDataOutput("isValid",Q.g)}_updateOutputs(p){const b=p._getExecutionVariable(this,y,-1),M=p._getExecutionVariable(this,mp,null);if(void 0!==M&&null!==M&&b===p.executionId)this.isValid.setValue(!0,p),this.value.setValue(M,p);else try{const b=this._doOperation(p);if(void 0===b||null===b)return void this.isValid.setValue(!1,p);p._setExecutionVariable(this,mp,b),p._setExecutionVariable(this,y,p.executionId),this.value.setValue(b,p),this.isValid.setValue(!0,p)}catch(h){this.isValid.setValue(!1,p)}}}},16015:(p,b,M)=>{M.d(b,{c:()=>Q});var h=M(16006);class Q extends h.e{constructor(p,b,M,h,Q){super(b,Q),this._operation=M,this._className=h,this.a=this.registerDataInput("a",p)}_doOperation(p){return this._operation(this.a.getValue(p))}getClassName(){return this._className}}}}]);