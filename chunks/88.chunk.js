"use strict";(self.v2pspxy442l=self.v2pspxy442l||[]).push([[88],{15640:(l,a,N)=>{N.r(a),N.d(a,{FlowGraphAbsBlock:()=>z,FlowGraphAcosBlock:()=>Kl,FlowGraphAcoshBlock:()=>yl,FlowGraphAddBlock:()=>u,FlowGraphAsinBlock:()=>cl,FlowGraphAsinhBlock:()=>nl,FlowGraphAtan2Block:()=>wl,FlowGraphAtanBlock:()=>Zl,FlowGraphAtanhBlock:()=>Hl,FlowGraphBitwiseAndBlock:()=>ql,FlowGraphBitwiseLeftShiftBlock:()=>Il,FlowGraphBitwiseNotBlock:()=>El,FlowGraphBitwiseOrBlock:()=>bl,FlowGraphBitwiseRightShiftBlock:()=>tl,FlowGraphBitwiseXorBlock:()=>zl,FlowGraphCeilBlock:()=>h,FlowGraphClampBlock:()=>X,FlowGraphCosBlock:()=>Nl,FlowGraphCoshBlock:()=>Tl,FlowGraphCubeRootBlock:()=>Ml,FlowGraphDegToRadBlock:()=>g,FlowGraphDivideBlock:()=>Y,FlowGraphEBlock:()=>M,FlowGraphEqualityBlock:()=>s,FlowGraphExpBlock:()=>ul,FlowGraphFloorBlock:()=>O,FlowGraphFractionBlock:()=>k,FlowGraphGreaterThanBlock:()=>x,FlowGraphGreaterThanOrEqualBlock:()=>V,FlowGraphInfBlock:()=>E,FlowGraphIsInfinityBlock:()=>v,FlowGraphIsNanBlock:()=>D,FlowGraphLeadingZerosBlock:()=>Ol,FlowGraphLessThanBlock:()=>G,FlowGraphLessThanOrEqualBlock:()=>ml,FlowGraphLog10Block:()=>Yl,FlowGraphLog2Block:()=>Bl,FlowGraphLogBlock:()=>Wl,FlowGraphMathInterpolationBlock:()=>e,FlowGraphMaxBlock:()=>R,FlowGraphMinBlock:()=>p,FlowGraphModuloBlock:()=>f,FlowGraphMultiplyBlock:()=>B,FlowGraphNaNBlock:()=>q,FlowGraphNegationBlock:()=>Q,FlowGraphOneBitsCounterBlock:()=>il,FlowGraphPiBlock:()=>A,FlowGraphPowerBlock:()=>Al,FlowGraphRadToDegBlock:()=>ll,FlowGraphRandomBlock:()=>C,FlowGraphRoundBlock:()=>i,FlowGraphSaturateBlock:()=>d,FlowGraphSignBlock:()=>I,FlowGraphSinBlock:()=>al,FlowGraphSinhBlock:()=>Sl,FlowGraphSquareRootBlock:()=>Cl,FlowGraphSubtractBlock:()=>W,FlowGraphTanBlock:()=>Ul,FlowGraphTanhBlock:()=>Jl,FlowGraphTrailingZerosBlock:()=>hl,FlowGraphTruncBlock:()=>t});var U=N(12394),c=N(14145),K=N(15645),Z=N(15648);class w extends Z.e{constructor(l,a,N,U){super(l,U),this._operation=a,this._className=N}_doOperation(l){return this._operation(l)}getClassName(){return this._className}}var S=N(12447),T=N(15650);class J extends Z.e{constructor(l,a,N,U,c,K,Z){super(U,Z),this._operation=c,this._className=K,this.a=this.registerDataInput("a",l),this.b=this.registerDataInput("b",a),this.c=this.registerDataInput("c",N)}_doOperation(l){return this._operation(this.a.getValue(l),this.b.getValue(l),this.c.getValue(l))}getClassName(){return this._className}}var n=N(14138),y=N(14154),H=N(14179);class u extends K.d{constructor(l){super((0,c.M)(null===l||void 0===l?void 0:l.type),(0,c.M)(null===l||void 0===l?void 0:l.type),(0,c.M)(null===l||void 0===l?void 0:l.type),((l,a)=>this._polymorphicAdd(l,a)),"FlowGraphAddBlock",l)}_polymorphicAdd(l,a){const N=(0,H.h)(l),U=(0,H.h)(a);if((0,H.e)(N,U)||(0,H.c)(N,U)||(0,H.b)(N,U))return l.add(a);if("Quaternion"===N||"Vector4"===U)return new S.Vector4(l.x,l.y,l.z,l.w).addInPlace(a);if("Vector4"===N||"Quaternion"===U)return l.add(a);var c;if(null!==(c=this.config)&&void 0!==c&&c.preventIntegerFloatArithmetic&&typeof l!==typeof a)throw new Error("Cannot add different types of numbers.");return(0,H.n)(l)+(0,H.n)(a)}}(0,U.g)("FlowGraphAddBlock",u);class W extends K.d{constructor(l){super((0,c.M)(null===l||void 0===l?void 0:l.type),(0,c.M)(null===l||void 0===l?void 0:l.type),(0,c.M)(null===l||void 0===l?void 0:l.type),((l,a)=>this._polymorphicSubtract(l,a)),"FlowGraphSubtractBlock",l)}_polymorphicSubtract(l,a){const N=(0,H.h)(l),U=(0,H.h)(a);if((0,H.e)(N,U)||(0,H.b)(N,U)||(0,H.c)(N,U))return l.Wa(a);if("Quaternion"===N||"Vector4"===U)return new S.Vector4(l.x,l.y,l.z,l.w).wn(a);if("Vector4"===N||"Quaternion"===U)return l.Wa(a);var c;if(null!==(c=this.config)&&void 0!==c&&c.preventIntegerFloatArithmetic&&typeof l!==typeof a)throw new Error("Cannot add different types of numbers.");return(0,H.n)(l)-(0,H.n)(a)}}(0,U.g)("FlowGraphSubtractBlock",W);class B extends K.d{constructor(l){super((0,c.M)(null===l||void 0===l?void 0:l.type),(0,c.M)(null===l||void 0===l?void 0:l.type),(0,c.M)(null===l||void 0===l?void 0:l.type),((l,a)=>this._polymorphicMultiply(l,a)),"FlowGraphMultiplyBlock",l)}_polymorphicMultiply(l,a){const N=(0,H.h)(l),U=(0,H.h)(a);if((0,H.e)(N,U)||(0,H.b)(N,U))return l.multiply(a);if("Quaternion"===N||"Vector4"===U)return new S.Vector4(l.x,l.y,l.z,l.w).multiplyInPlace(a);if("Vector4"===N||"Quaternion"===U)return l.multiply(a);if((0,H.c)(N,U)){var c;if(null!==(c=this.config)&&void 0!==c&&c.useMatrixPerComponent){const U=l.m;for(let l=0;l<U.length;l++)U[l]*=a.m[l];return"Matrix2D"===N?new y.e(U):"Matrix3D"===N?new y.i(U):S.Matrix.Ma(U)}return a.multiply(l)}var K;if(null!==(K=this.config)&&void 0!==K&&K.preventIntegerFloatArithmetic&&typeof l!==typeof a)throw new Error("Cannot add different types of numbers.");return(0,H.n)(l)*(0,H.n)(a)}}(0,U.g)("FlowGraphMultiplyBlock",B);class Y extends K.d{constructor(l){super((0,c.M)(null===l||void 0===l?void 0:l.type),(0,c.M)(null===l||void 0===l?void 0:l.type),(0,c.M)(null===l||void 0===l?void 0:l.type),((l,a)=>this._polymorphicDivide(l,a)),"FlowGraphDivideBlock",l)}_polymorphicDivide(l,a){const N=(0,H.h)(l),U=(0,H.h)(a);if((0,H.e)(N,U)||(0,H.b)(N,U))return l.divide(a);if("Quaternion"===N||"Quaternion"===U){const N=l.clone();return N.x/=a.x,N.y/=a.y,N.z/=a.z,N.w/=a.w,N}if("Quaternion"===N||"Vector4"===U)return new S.Vector4(l.x,l.y,l.z,l.w).divideInPlace(a);if("Vector4"===N||"Quaternion"===U)return l.divide(a);if((0,H.c)(N,U)){var c;if(null!==(c=this.config)&&void 0!==c&&c.useMatrixPerComponent){const U=l.m;for(let l=0;l<U.length;l++)U[l]/=a.m[l];return"Matrix2D"===N?new y.e(U):"Matrix3D"===N?new y.i(U):S.Matrix.Ma(U)}return l.divide(a)}var K;if(null!==(K=this.config)&&void 0!==K&&K.preventIntegerFloatArithmetic&&typeof l!==typeof a)throw new Error("Cannot add different types of numbers.");return(0,H.n)(l)/(0,H.n)(a)}}(0,U.g)("FlowGraphDivideBlock",Y);class C extends w{constructor(l){super(c.t,(l=>this._random(l)),"FlowGraphRandomBlock",l),this.min=this.registerDataInput("min",c.t,(null===l||void 0===l?void 0:l.min)??0),this.max=this.registerDataInput("max",c.t,(null===l||void 0===l?void 0:l.max)??1),null!==l&&void 0!==l&&l.seed&&(this._seed=l.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const l=1e4*Math.sin(this._seed++);return l-Math.floor(l)}return Math.random()}_random(l){const a=this.min.getValue(l),N=this.max.getValue(l);return this._getRandomValue()*(N-a)+a}}(0,U.g)("FlowGraphRandomBlock",C);class M extends w{constructor(l){super(c.t,(()=>Math.E),"FlowGraphEBlock",l)}}(0,U.g)("FlowGraphEBlock",M);class A extends w{constructor(l){super(c.t,(()=>Math.PI),"FlowGraphPIBlock",l)}}(0,U.g)("FlowGraphPIBlock",A);class E extends w{constructor(l){super(c.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",l)}}(0,U.g)("FlowGraphInfBlock",E);class q extends w{constructor(l){super(c.t,(()=>Number.NaN),"FlowGraphNaNBlock",l)}}function b(l,a){switch((0,H.h)(l)){case"FlowGraphInteger":return new n.d(a(l.value));case"Vector2":return new S.Vector2(a(l.x),a(l.y));case"ua":return new S.ua(a(l.x),a(l.y),a(l.z));case"Vector4":return new S.Vector4(a(l.x),a(l.y),a(l.z),a(l.w));case"Quaternion":return new S.Quaternion(a(l.x),a(l.y),a(l.z),a(l.w));case"Matrix":return S.Matrix.Ma(l.m.map(a));case"Matrix2D":return new y.e(l.m.map(a));case"Matrix3D":return new y.i(l.m.map(a));default:return a(l)}}(0,U.g)("FlowGraphNaNBlock",q);class z extends T.c{constructor(l){super(c.t,c.t,(l=>this._polymorphicAbs(l)),"FlowGraphAbsBlock",l)}_polymorphicAbs(l){return b(l,Math.abs)}}(0,U.g)("FlowGraphAbsBlock",z);class I extends T.c{constructor(l){super(c.t,c.t,(l=>this._polymorphicSign(l)),"FlowGraphSignBlock",l)}_polymorphicSign(l){return b(l,Math.sign)}}(0,U.g)("FlowGraphSignBlock",I);class t extends T.c{constructor(l){super(c.t,c.t,(l=>this._polymorphicTrunc(l)),"FlowGraphTruncBlock",l)}_polymorphicTrunc(l){return b(l,Math.trunc)}}(0,U.g)("FlowGraphTruncBlock",t);class O extends T.c{constructor(l){super(c.t,c.t,(l=>this._polymorphicFloor(l)),"FlowGraphFloorBlock",l)}_polymorphicFloor(l){return b(l,Math.floor)}}(0,U.g)("FlowGraphFloorBlock",O);class h extends T.c{constructor(l){super(c.d,c.d,(l=>this._polymorphicCeiling(l)),"FlowGraphCeilBlock",l)}_polymorphicCeiling(l){return b(l,Math.ceil)}}(0,U.g)("FlowGraphCeilBlock",h);class i extends T.c{constructor(l){super(c.d,c.d,(l=>this._polymorphicRound(l)),"FlowGraphRoundBlock",l)}_polymorphicRound(l){return b(l,(l=>{var a;return l<0&&null!==(a=this.config)&&void 0!==a&&a.roundHalfAwayFromZero?-Math.round(-l):Math.round(l)}))}}(0,U.g)("FlowGraphRoundBlock",i);class k extends T.c{constructor(l){super(c.d,c.d,(l=>this._polymorphicFraction(l)),"FlowGraphFractBlock",l)}_polymorphicFraction(l){return b(l,(l=>l-Math.floor(l)))}}(0,U.g)("FlowGraphFractBlock",k);class Q extends T.c{constructor(l){super(c.d,c.d,(l=>this._polymorphicNeg(l)),"FlowGraphNegationBlock",l)}_polymorphicNeg(l){return b(l,(l=>-l))}}function j(l,a,N){switch((0,H.h)(l)){case"FlowGraphInteger":return new n.d(N(l.value,a.value));case"Vector2":return new S.Vector2(N(l.x,a.x),N(l.y,a.y));case"ua":return new S.ua(N(l.x,a.x),N(l.y,a.y),N(l.z,a.z));case"Vector4":return new S.Vector4(N(l.x,a.x),N(l.y,a.y),N(l.z,a.z),N(l.w,a.w));case"Quaternion":return new S.Quaternion(N(l.x,a.x),N(l.y,a.y),N(l.z,a.z),N(l.w,a.w));case"Matrix":return S.Matrix.Ma(l.m.map(((l,U)=>N(l,a.m[U]))));case"Matrix2D":return new y.e(l.m.map(((l,U)=>N(l,a.m[U]))));case"Matrix3D":return new y.i(l.m.map(((l,U)=>N(l,a.m[U]))));default:return N((0,H.n)(l),(0,H.n)(a))}}(0,U.g)("FlowGraphNegationBlock",Q);class f extends K.d{constructor(l){super(c.d,c.d,c.d,((l,a)=>this._polymorphicRemainder(l,a)),"FlowGraphModuloBlock",l)}_polymorphicRemainder(l,a){return j(l,a,((l,a)=>l%a))}}(0,U.g)("FlowGraphModuloBlock",f);class p extends K.d{constructor(l){super(c.d,c.d,c.d,((l,a)=>this._polymorphicMin(l,a)),"FlowGraphMinBlock",l)}_polymorphicMin(l,a){return j(l,a,Math.min)}}(0,U.g)("FlowGraphMinBlock",p);class R extends K.d{constructor(l){super(c.d,c.d,c.d,((l,a)=>this._polymorphicMax(l,a)),"FlowGraphMaxBlock",l)}_polymorphicMax(l,a){return j(l,a,Math.max)}}function L(l,a,N){return Math.min(Math.max(l,Math.min(a,N)),Math.max(a,N))}function r(l,a,N,U){switch((0,H.h)(l)){case"FlowGraphInteger":return new n.d(U(l.value,a.value,N.value));case"Vector2":return new S.Vector2(U(l.x,a.x,N.x),U(l.y,a.y,N.y));case"ua":return new S.ua(U(l.x,a.x,N.x),U(l.y,a.y,N.y),U(l.z,a.z,N.z));case"Vector4":return new S.Vector4(U(l.x,a.x,N.x),U(l.y,a.y,N.y),U(l.z,a.z,N.z),U(l.w,a.w,N.w));case"Quaternion":return new S.Quaternion(U(l.x,a.x,N.x),U(l.y,a.y,N.y),U(l.z,a.z,N.z),U(l.w,a.w,N.w));case"Matrix":return S.Matrix.Ma(l.m.map(((l,c)=>U(l,a.m[c],N.m[c]))));case"Matrix2D":return new y.e(l.m.map(((l,c)=>U(l,a.m[c],N.m[c]))));case"Matrix3D":return new y.i(l.m.map(((l,c)=>U(l,a.m[c],N.m[c]))));default:return U((0,H.n)(l),(0,H.n)(a),(0,H.n)(N))}}(0,U.g)("FlowGraphMaxBlock",R);class X extends J{constructor(l){super(c.d,c.d,c.d,c.d,((l,a,N)=>this._polymorphicClamp(l,a,N)),"FlowGraphClampBlock",l)}_polymorphicClamp(l,a,N){return r(l,a,N,L)}}function P(l){return Math.min(Math.max(l,0),1)}(0,U.g)("FlowGraphClampBlock",X);class d extends T.c{constructor(l){super(c.d,c.d,(l=>this._polymorphicSaturate(l)),"FlowGraphSaturateBlock",l)}_polymorphicSaturate(l){return b(l,P)}}function F(l,a,N){return(1-N)*l+N*a}(0,U.g)("FlowGraphSaturateBlock",d);class e extends J{constructor(l){super(c.d,c.d,c.d,c.d,((l,a,N)=>this._polymorphicInterpolate(l,a,N)),"FlowGraphMathInterpolationBlock",l)}_polymorphicInterpolate(l,a,N){return r(l,a,N,F)}}(0,U.g)("FlowGraphMathInterpolationBlock",e);class s extends K.d{constructor(l){super(c.d,c.d,c.h,((l,a)=>this._polymorphicEq(l,a)),"FlowGraphEqualityBlock",l)}_polymorphicEq(l,a){const N=(0,H.h)(l),U=(0,H.h)(a);return typeof l===typeof a&&((0,H.e)(N,U)||(0,H.c)(N,U)||(0,H.b)(N,U)?l.equals(a):l===a)}}function o(l,a,N){if((0,H.o)(l)&&(0,H.o)(a))return N((0,H.n)(l),(0,H.n)(a));throw new Error(`Cannot compare ${l} and ${a}`)}(0,U.g)("FlowGraphEqualityBlock",s);class G extends K.d{constructor(l){super(c.d,c.d,c.h,((l,a)=>this._polymorphicLessThan(l,a)),"FlowGraphLessThanBlock",l)}_polymorphicLessThan(l,a){return o(l,a,((l,a)=>l<a))}}(0,U.g)("FlowGraphLessThanBlock",G);class ml extends K.d{constructor(l){super(c.d,c.d,c.h,((l,a)=>this._polymorphicLessThanOrEqual(l,a)),"FlowGraphLessThanOrEqualBlock",l)}_polymorphicLessThanOrEqual(l,a){return o(l,a,((l,a)=>l<=a))}}(0,U.g)("FlowGraphLessThanOrEqualBlock",ml);class x extends K.d{constructor(l){super(c.d,c.d,c.h,((l,a)=>this._polymorphicGreaterThan(l,a)),"FlowGraphGreaterThanBlock",l)}_polymorphicGreaterThan(l,a){return o(l,a,((l,a)=>l>a))}}(0,U.g)("FlowGraphGreaterThanBlock",x);class V extends K.d{constructor(l){super(c.d,c.d,c.h,((l,a)=>this._polymorphicGreaterThanOrEqual(l,a)),"FlowGraphGreaterThanOrEqualBlock",l)}_polymorphicGreaterThanOrEqual(l,a){return o(l,a,((l,a)=>l>=a))}}(0,U.g)("FlowGraphGreaterThanOrEqualBlock",V);class D extends T.c{constructor(l){super(c.d,c.h,(l=>this._polymorphicIsNan(l)),"FlowGraphIsNaNBlock",l)}_polymorphicIsNan(l){if((0,H.o)(l,!0))return isNaN((0,H.n)(l));throw new Error(`Cannot get NaN of ${l}`)}}(0,U.g)("FlowGraphIsNaNBlock",D);class v extends T.c{constructor(l){super(c.d,c.h,(l=>this._polymorphicIsInf(l)),"FlowGraphIsInfBlock",l)}_polymorphicIsInf(l){if((0,H.o)(l))return!isFinite((0,H.n)(l));throw new Error(`Cannot get isInf of ${l}`)}}(0,U.g)("FlowGraphIsInfBlock",v);class g extends T.c{constructor(l){super(c.d,c.d,(l=>this._polymorphicDegToRad(l)),"FlowGraphDegToRadBlock",l)}_degToRad(l){return l*Math.PI/180}_polymorphicDegToRad(l){return b(l,this._degToRad)}}(0,U.g)("FlowGraphDegToRadBlock",g);class ll extends T.c{constructor(l){super(c.d,c.d,(l=>this._polymorphicRadToDeg(l)),"FlowGraphRadToDegBlock",l)}_radToDeg(l){return 180*l/Math.PI}_polymorphicRadToDeg(l){return b(l,this._radToDeg)}}(0,U.g)("FlowGraphRadToDegBlock",ll);class al extends T.c{constructor(l){super(c.t,c.t,(l=>this._polymorphicSin(l)),"FlowGraphSinBlock",l)}_polymorphicSin(l){return b(l,Math.sin)}}class Nl extends T.c{constructor(l){super(c.t,c.t,(l=>this._polymorphicCos(l)),"FlowGraphCosBlock",l)}_polymorphicCos(l){return b(l,Math.cos)}}class Ul extends T.c{constructor(l){super(c.t,c.t,(l=>this._polymorphicTan(l)),"FlowGraphTanBlock",l)}_polymorphicTan(l){return b(l,Math.tan)}}class cl extends T.c{constructor(l){super(c.t,c.t,(l=>this._polymorphicAsin(l)),"FlowGraphASinBlock",l)}_polymorphicAsin(l){return b(l,Math.asin)}}(0,U.g)("FlowGraphASinBlock",cl);class Kl extends T.c{constructor(l){super(c.t,c.t,(l=>this._polymorphicAcos(l)),"FlowGraphACosBlock",l)}_polymorphicAcos(l){return b(l,Math.acos)}}(0,U.g)("FlowGraphACosBlock",Kl);class Zl extends T.c{constructor(l){super(c.t,c.t,(l=>this._polymorphicAtan(l)),"FlowGraphATanBlock",l)}_polymorphicAtan(l){return b(l,Math.atan)}}(0,U.g)("FlowGraphATanBlock",Zl);class wl extends K.d{constructor(l){super(c.d,c.d,c.d,((l,a)=>this._polymorphicAtan2(l,a)),"FlowGraphATan2Block",l)}_polymorphicAtan2(l,a){return j(l,a,Math.atan2)}}(0,U.g)("FlowGraphATan2Block",wl);class Sl extends T.c{constructor(l){super(c.d,c.d,(l=>this._polymorphicSinh(l)),"FlowGraphSinhBlock",l)}_polymorphicSinh(l){return b(l,Math.sinh)}}(0,U.g)("FlowGraphSinhBlock",Sl);class Tl extends T.c{constructor(l){super(c.d,c.d,(l=>this._polymorphicCosh(l)),"FlowGraphCoshBlock",l)}_polymorphicCosh(l){return b(l,Math.cosh)}}(0,U.g)("FlowGraphCoshBlock",Tl);class Jl extends T.c{constructor(l){super(c.d,c.d,(l=>this._polymorphicTanh(l)),"FlowGraphTanhBlock",l)}_polymorphicTanh(l){return b(l,Math.tanh)}}(0,U.g)("FlowGraphTanhBlock",Jl);class nl extends T.c{constructor(l){super(c.d,c.t,(l=>this._polymorphicAsinh(l)),"FlowGraphASinhBlock",l)}_polymorphicAsinh(l){return b(l,Math.asinh)}}(0,U.g)("FlowGraphASinhBlock",nl);class yl extends T.c{constructor(l){super(c.d,c.t,(l=>this._polymorphicAcosh(l)),"FlowGraphACoshBlock",l)}_polymorphicAcosh(l){return b(l,Math.acosh)}}(0,U.g)("FlowGraphACoshBlock",yl);class Hl extends T.c{constructor(l){super(c.d,c.t,(l=>this._polymorphicAtanh(l)),"FlowGraphATanhBlock",l)}_polymorphicAtanh(l){return b(l,Math.atanh)}}(0,U.g)("FlowGraphATanhBlock",Hl);class ul extends T.c{constructor(l){super(c.d,c.t,(l=>this._polymorphicExp(l)),"FlowGraphExponentialBlock",l)}_polymorphicExp(l){return b(l,Math.exp)}}(0,U.g)("FlowGraphExponentialBlock",ul);class Wl extends T.c{constructor(l){super(c.d,c.t,(l=>this._polymorphicLog(l)),"FlowGraphLogBlock",l)}_polymorphicLog(l){return b(l,Math.log)}}(0,U.g)("FlowGraphLogBlock",Wl);class Bl extends T.c{constructor(l){super(c.d,c.t,(l=>this._polymorphicLog2(l)),"FlowGraphLog2Block",l)}_polymorphicLog2(l){return b(l,Math.log2)}}(0,U.g)("FlowGraphLog2Block",Bl);class Yl extends T.c{constructor(l){super(c.d,c.t,(l=>this._polymorphicLog10(l)),"FlowGraphLog10Block",l)}_polymorphicLog10(l){return b(l,Math.log10)}}(0,U.g)("FlowGraphLog10Block",Yl);class Cl extends T.c{constructor(l){super(c.d,c.t,(l=>this._polymorphicSqrt(l)),"FlowGraphSquareRootBlock",l)}_polymorphicSqrt(l){return b(l,Math.sqrt)}}(0,U.g)("FlowGraphSquareRootBlock",Cl);class Ml extends T.c{constructor(l){super(c.d,c.t,(l=>this._polymorphicCubeRoot(l)),"FlowGraphCubeRootBlock",l)}_polymorphicCubeRoot(l){return b(l,Math.cbrt)}}(0,U.g)("FlowGraphCubeRootBlock",Ml);class Al extends K.d{constructor(l){super(c.d,c.t,c.t,((l,a)=>this._polymorphicPow(l,a)),"FlowGraphPowerBlock",l)}_polymorphicPow(l,a){return j(l,a,Math.pow)}}(0,U.g)("FlowGraphPowerBlock",Al);class El extends T.c{constructor(l){super((0,c.M)((null===l||void 0===l?void 0:l.valueType)||"FlowGraphInteger"),(0,c.M)((null===l||void 0===l?void 0:l.valueType)||"FlowGraphInteger"),(l=>"boolean"===typeof l?!l:"number"===typeof l?~l:new n.d(~l.value)),"FlowGraphBitwiseNotBlock",l)}}(0,U.g)("FlowGraphBitwiseNotBlock",El);class ql extends K.d{constructor(l){super((0,c.M)((null===l||void 0===l?void 0:l.valueType)||"FlowGraphInteger"),(0,c.M)((null===l||void 0===l?void 0:l.valueType)||"FlowGraphInteger"),(0,c.M)((null===l||void 0===l?void 0:l.valueType)||"FlowGraphInteger"),((l,a)=>{if("boolean"===typeof l&&"boolean"===typeof a)return l&&a;if("number"===typeof l&&"number"===typeof a)return l&a;if("object"===typeof l&&"object"===typeof a)return new n.d(l.value&a.value);throw new Error(`Cannot perform bitwise AND on ${l} and ${a}`)}),"FlowGraphBitwiseAndBlock",l)}}(0,U.g)("FlowGraphBitwiseAndBlock",ql);class bl extends K.d{constructor(l){super((0,c.M)((null===l||void 0===l?void 0:l.valueType)||"FlowGraphInteger"),(0,c.M)((null===l||void 0===l?void 0:l.valueType)||"FlowGraphInteger"),(0,c.M)((null===l||void 0===l?void 0:l.valueType)||"FlowGraphInteger"),((l,a)=>{if("boolean"===typeof l&&"boolean"===typeof a)return l||a;if("number"===typeof l&&"number"===typeof a)return l|a;if("object"===typeof l&&"object"===typeof a)return new n.d(l.value|a.value);throw new Error(`Cannot perform bitwise OR on ${l} and ${a}`)}),"FlowGraphBitwiseOrBlock",l)}}(0,U.g)("FlowGraphBitwiseOrBlock",bl);class zl extends K.d{constructor(l){super((0,c.M)((null===l||void 0===l?void 0:l.valueType)||"FlowGraphInteger"),(0,c.M)((null===l||void 0===l?void 0:l.valueType)||"FlowGraphInteger"),(0,c.M)((null===l||void 0===l?void 0:l.valueType)||"FlowGraphInteger"),((l,a)=>{if("boolean"===typeof l&&"boolean"===typeof a)return l!==a;if("number"===typeof l&&"number"===typeof a)return l^a;if("object"===typeof l&&"object"===typeof a)return new n.d(l.value^a.value);throw new Error(`Cannot perform bitwise XOR on ${l} and ${a}`)}),"FlowGraphBitwiseXorBlock",l)}}(0,U.g)("FlowGraphBitwiseXorBlock",zl);class Il extends K.d{constructor(l){super(c.l,c.l,c.l,((l,a)=>new n.d(l.value<<a.value)),"FlowGraphBitwiseLeftShiftBlock",l)}}(0,U.g)("FlowGraphBitwiseLeftShiftBlock",Il);class tl extends K.d{constructor(l){super(c.l,c.l,c.l,((l,a)=>new n.d(l.value>>a.value)),"FlowGraphBitwiseRightShiftBlock",l)}}(0,U.g)("FlowGraphBitwiseRightShiftBlock",tl);class Ol extends T.c{constructor(l){super(c.l,c.l,(l=>new n.d(Math.clz32(l.value))),"FlowGraphLeadingZerosBlock",l)}}(0,U.g)("FlowGraphLeadingZerosBlock",Ol);class hl extends T.c{constructor(l){super(c.l,c.l,(l=>new n.d(l.value?31-Math.clz32(l.value&-l.value):32)),"FlowGraphTrailingZerosBlock",l)}}(0,U.g)("FlowGraphTrailingZerosBlock",hl);class il extends T.c{constructor(l){super(c.l,c.l,(l=>new n.d(function(l){let a=0;for(;l;)a+=1&l,l>>=1;return a}(l.value))),"FlowGraphOneBitsCounterBlock",l)}}(0,U.g)("FlowGraphOneBitsCounterBlock",il)},15645:(l,a,N)=>{N.d(a,{d:()=>c});var U=N(15648);class c extends U.e{constructor(l,a,N,U,c,K){super(N,K),this._operation=U,this._className=c,this.a=this.registerDataInput("a",l),this.b=this.registerDataInput("b",a)}_doOperation(l){const a=this.a.getValue(l),N=this.b.getValue(l);return this._operation(a,N)}getClassName(){return this._className}}},15648:(l,a,N)=>{N.d(a,{e:()=>w});var U=N(14171),c=N(14145);const K="cachedOperationValue",Z="cachedExecutionId";class w extends U.e{constructor(l,a){super(a),this.value=this.registerDataOutput("value",l),this.isValid=this.registerDataOutput("isValid",c.h)}_updateOutputs(l){const a=l._getExecutionVariable(this,Z,-1),N=l._getExecutionVariable(this,K,null);if(void 0!==N&&null!==N&&a===l.executionId)this.isValid.setValue(!0,l),this.value.setValue(N,l);else try{const a=this._doOperation(l);if(void 0===a||null===a)return void this.isValid.setValue(!1,l);l._setExecutionVariable(this,K,a),l._setExecutionVariable(this,Z,l.executionId),this.value.setValue(a,l),this.isValid.setValue(!0,l)}catch(U){this.isValid.setValue(!1,l)}}}},15650:(l,a,N)=>{N.d(a,{c:()=>c});var U=N(15648);class c extends U.e{constructor(l,a,N,U,c){super(a,c),this._operation=N,this._className=U,this.a=this.registerDataInput("a",l)}_doOperation(l){return this._operation(this.a.getValue(l))}getClassName(){return this._className}}}}]);