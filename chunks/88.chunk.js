"use strict";(self.lfntwv94xlc=self.lfntwv94xlc||[]).push([[88],{14615:(m,S,h)=>{h.r(S),h.d(S,{FlowGraphAbsBlock:()=>s,FlowGraphAcosBlock:()=>Om,FlowGraphAcoshBlock:()=>Zm,FlowGraphAddBlock:()=>B,FlowGraphAsinBlock:()=>Mm,FlowGraphAsinhBlock:()=>Im,FlowGraphAtan2Block:()=>bm,FlowGraphAtanBlock:()=>um,FlowGraphAtanhBlock:()=>Cm,FlowGraphBitwiseAndBlock:()=>ym,FlowGraphBitwiseLeftShiftBlock:()=>vm,FlowGraphBitwiseNotBlock:()=>Rm,FlowGraphBitwiseOrBlock:()=>om,FlowGraphBitwiseRightShiftBlock:()=>Tm,FlowGraphBitwiseXorBlock:()=>sm,FlowGraphCeilBlock:()=>g,FlowGraphClampBlock:()=>K,FlowGraphCosBlock:()=>hm,FlowGraphCoshBlock:()=>Ym,FlowGraphCubeRootBlock:()=>Um,FlowGraphDegToRadBlock:()=>W,FlowGraphDivideBlock:()=>n,FlowGraphEBlock:()=>U,FlowGraphEqualityBlock:()=>r,FlowGraphExpBlock:()=>Bm,FlowGraphFloorBlock:()=>X,FlowGraphFractionBlock:()=>e,FlowGraphGreaterThanBlock:()=>w,FlowGraphGreaterThanOrEqualBlock:()=>t,FlowGraphInfBlock:()=>R,FlowGraphIsInfinityBlock:()=>i,FlowGraphIsNanBlock:()=>A,FlowGraphLeadingZerosBlock:()=>Xm,FlowGraphLessThanBlock:()=>Q,FlowGraphLessThanOrEqualBlock:()=>F,FlowGraphLog10Block:()=>nm,FlowGraphLog2Block:()=>Em,FlowGraphLogBlock:()=>Dm,FlowGraphMathInterpolationBlock:()=>k,FlowGraphMaxBlock:()=>J,FlowGraphMinBlock:()=>d,FlowGraphModuloBlock:()=>P,FlowGraphMultiplyBlock:()=>E,FlowGraphNaNBlock:()=>y,FlowGraphNegationBlock:()=>a,FlowGraphOneBitsCounterBlock:()=>Gm,FlowGraphPiBlock:()=>H,FlowGraphPowerBlock:()=>Hm,FlowGraphRadToDegBlock:()=>mm,FlowGraphRandomBlock:()=>L,FlowGraphRoundBlock:()=>G,FlowGraphSaturateBlock:()=>f,FlowGraphSignBlock:()=>v,FlowGraphSinBlock:()=>Sm,FlowGraphSinhBlock:()=>qm,FlowGraphSquareRootBlock:()=>Lm,FlowGraphSubtractBlock:()=>D,FlowGraphTanBlock:()=>lm,FlowGraphTanhBlock:()=>Vm,FlowGraphTrailingZerosBlock:()=>gm,FlowGraphTruncBlock:()=>T});var l=h(11293),M=h(13060),O=h(14618),u=h(14620);class b extends u.d{constructor(m,S,h,l){super(m,l),this._operation=S,this._className=h}_doOperation(m){return this._operation(m)}getClassName(){return this._className}}var q=h(11347),Y=h(14629);class V extends u.d{constructor(m,S,h,l,M,O,u){super(l,u),this._operation=M,this._className=O,this.a=this.registerDataInput("a",m),this.b=this.registerDataInput("b",S),this.c=this.registerDataInput("c",h)}_doOperation(m){return this._operation(this.a.getValue(m),this.b.getValue(m),this.c.getValue(m))}getClassName(){return this._className}}var I=h(13056),Z=h(13065),C=h(13090);class B extends O.c{constructor(m){super((0,M.J)(null===m||void 0===m?void 0:m.type),(0,M.J)(null===m||void 0===m?void 0:m.type),(0,M.J)(null===m||void 0===m?void 0:m.type),((m,S)=>this._polymorphicAdd(m,S)),"FlowGraphAddBlock",m)}_polymorphicAdd(m,S){const h=(0,C.k)(m),l=(0,C.k)(S);if((0,C.h)(h,l)||(0,C.g)(h,l)||(0,C.e)(h,l))return m.add(S);if("Quaternion"===h||"Vector4"===l)return new q.Vector4(m.x,m.y,m.z,m.w).addInPlace(S);if("Vector4"===h||"Quaternion"===l)return m.add(S);var M;if(null!==(M=this.config)&&void 0!==M&&M.preventIntegerFloatArithmetic&&typeof m!==typeof S)throw new Error("Cannot add different types of numbers.");return(0,C.p)(m)+(0,C.p)(S)}}(0,l.e)("FlowGraphAddBlock",B);class D extends O.c{constructor(m){super((0,M.J)(null===m||void 0===m?void 0:m.type),(0,M.J)(null===m||void 0===m?void 0:m.type),(0,M.J)(null===m||void 0===m?void 0:m.type),((m,S)=>this._polymorphicSubtract(m,S)),"FlowGraphSubtractBlock",m)}_polymorphicSubtract(m,S){const h=(0,C.k)(m),l=(0,C.k)(S);if((0,C.h)(h,l)||(0,C.e)(h,l)||(0,C.g)(h,l))return m.LS(S);if("Quaternion"===h||"Vector4"===l)return new q.Vector4(m.x,m.y,m.z,m.w).yI(S);if("Vector4"===h||"Quaternion"===l)return m.LS(S);var M;if(null!==(M=this.config)&&void 0!==M&&M.preventIntegerFloatArithmetic&&typeof m!==typeof S)throw new Error("Cannot add different types of numbers.");return(0,C.p)(m)-(0,C.p)(S)}}(0,l.e)("FlowGraphSubtractBlock",D);class E extends O.c{constructor(m){super((0,M.J)(null===m||void 0===m?void 0:m.type),(0,M.J)(null===m||void 0===m?void 0:m.type),(0,M.J)(null===m||void 0===m?void 0:m.type),((m,S)=>this._polymorphicMultiply(m,S)),"FlowGraphMultiplyBlock",m)}_polymorphicMultiply(m,S){const h=(0,C.k)(m),l=(0,C.k)(S);if((0,C.h)(h,l)||(0,C.e)(h,l))return m.multiply(S);if("Quaternion"===h||"Vector4"===l)return new q.Vector4(m.x,m.y,m.z,m.w).multiplyInPlace(S);if("Vector4"===h||"Quaternion"===l)return m.multiply(S);if((0,C.g)(h,l)){var M;if(null!==(M=this.config)&&void 0!==M&&M.useMatrixPerComponent){const l=m.m;for(let m=0;m<l.length;m++)l[m]*=S.m[m];return"Matrix2D"===h?new Z.d(l):"Matrix3D"===h?new Z.e(l):q.Matrix.yS(l)}return S.multiply(m)}var O;if(null!==(O=this.config)&&void 0!==O&&O.preventIntegerFloatArithmetic&&typeof m!==typeof S)throw new Error("Cannot add different types of numbers.");return(0,C.p)(m)*(0,C.p)(S)}}(0,l.e)("FlowGraphMultiplyBlock",E);class n extends O.c{constructor(m){super((0,M.J)(null===m||void 0===m?void 0:m.type),(0,M.J)(null===m||void 0===m?void 0:m.type),(0,M.J)(null===m||void 0===m?void 0:m.type),((m,S)=>this._polymorphicDivide(m,S)),"FlowGraphDivideBlock",m)}_polymorphicDivide(m,S){const h=(0,C.k)(m),l=(0,C.k)(S);if((0,C.h)(h,l)||(0,C.e)(h,l))return m.divide(S);if("Quaternion"===h||"Quaternion"===l){const h=m.clone();return h.x/=S.x,h.y/=S.y,h.z/=S.z,h.w/=S.w,h}if("Quaternion"===h||"Vector4"===l)return new q.Vector4(m.x,m.y,m.z,m.w).divideInPlace(S);if("Vector4"===h||"Quaternion"===l)return m.divide(S);if((0,C.g)(h,l)){var M;if(null!==(M=this.config)&&void 0!==M&&M.useMatrixPerComponent){const l=m.m;for(let m=0;m<l.length;m++)l[m]/=S.m[m];return"Matrix2D"===h?new Z.d(l):"Matrix3D"===h?new Z.e(l):q.Matrix.yS(l)}return m.divide(S)}var O;if(null!==(O=this.config)&&void 0!==O&&O.preventIntegerFloatArithmetic&&typeof m!==typeof S)throw new Error("Cannot add different types of numbers.");return(0,C.p)(m)/(0,C.p)(S)}}(0,l.e)("FlowGraphDivideBlock",n);class L extends b{constructor(m){super(M.p,(m=>this._random(m)),"FlowGraphRandomBlock",m),this.min=this.registerDataInput("min",M.p,(null===m||void 0===m?void 0:m.min)??0),this.max=this.registerDataInput("max",M.p,(null===m||void 0===m?void 0:m.max)??1),null!==m&&void 0!==m&&m.seed&&(this._seed=m.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const m=1e4*Math.sin(this._seed++);return m-Math.floor(m)}return Math.random()}_random(m){const S=this.min.getValue(m),h=this.max.getValue(m);return this._getRandomValue()*(h-S)+S}}(0,l.e)("FlowGraphRandomBlock",L);class U extends b{constructor(m){super(M.p,(()=>Math.E),"FlowGraphEBlock",m)}}(0,l.e)("FlowGraphEBlock",U);class H extends b{constructor(m){super(M.p,(()=>Math.PI),"FlowGraphPIBlock",m)}}(0,l.e)("FlowGraphPIBlock",H);class R extends b{constructor(m){super(M.p,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",m)}}(0,l.e)("FlowGraphInfBlock",R);class y extends b{constructor(m){super(M.p,(()=>Number.NaN),"FlowGraphNaNBlock",m)}}function o(m,S){switch((0,C.k)(m)){case"FlowGraphInteger":return new I.b(S(m.value));case"Vector2":return new q.Vector2(S(m.x),S(m.y));case"nS":return new q.nS(S(m.x),S(m.y),S(m.z));case"Vector4":return new q.Vector4(S(m.x),S(m.y),S(m.z),S(m.w));case"Quaternion":return new q.Quaternion(S(m.x),S(m.y),S(m.z),S(m.w));case"Matrix":return q.Matrix.yS(m.m.map(S));case"Matrix2D":return new Z.d(m.m.map(S));case"Matrix3D":return new Z.e(m.m.map(S));default:return S(m)}}(0,l.e)("FlowGraphNaNBlock",y);class s extends Y.b{constructor(m){super(M.p,M.p,(m=>this._polymorphicAbs(m)),"FlowGraphAbsBlock",m)}_polymorphicAbs(m){return o(m,Math.abs)}}(0,l.e)("FlowGraphAbsBlock",s);class v extends Y.b{constructor(m){super(M.p,M.p,(m=>this._polymorphicSign(m)),"FlowGraphSignBlock",m)}_polymorphicSign(m){return o(m,Math.sign)}}(0,l.e)("FlowGraphSignBlock",v);class T extends Y.b{constructor(m){super(M.p,M.p,(m=>this._polymorphicTrunc(m)),"FlowGraphTruncBlock",m)}_polymorphicTrunc(m){return o(m,Math.trunc)}}(0,l.e)("FlowGraphTruncBlock",T);class X extends Y.b{constructor(m){super(M.p,M.p,(m=>this._polymorphicFloor(m)),"FlowGraphFloorBlock",m)}_polymorphicFloor(m){return o(m,Math.floor)}}(0,l.e)("FlowGraphFloorBlock",X);class g extends Y.b{constructor(m){super(M.b,M.b,(m=>this._polymorphicCeiling(m)),"FlowGraphCeilBlock",m)}_polymorphicCeiling(m){return o(m,Math.ceil)}}(0,l.e)("FlowGraphCeilBlock",g);class G extends Y.b{constructor(m){super(M.b,M.b,(m=>this._polymorphicRound(m)),"FlowGraphRoundBlock",m)}_polymorphicRound(m){return o(m,(m=>{var S;return m<0&&null!==(S=this.config)&&void 0!==S&&S.roundHalfAwayFromZero?-Math.round(-m):Math.round(m)}))}}(0,l.e)("FlowGraphRoundBlock",G);class e extends Y.b{constructor(m){super(M.b,M.b,(m=>this._polymorphicFraction(m)),"FlowGraphFractBlock",m)}_polymorphicFraction(m){return o(m,(m=>m-Math.floor(m)))}}(0,l.e)("FlowGraphFractBlock",e);class a extends Y.b{constructor(m){super(M.b,M.b,(m=>this._polymorphicNeg(m)),"FlowGraphNegationBlock",m)}_polymorphicNeg(m){return o(m,(m=>-m))}}function x(m,S,h){switch((0,C.k)(m)){case"FlowGraphInteger":return new I.b(h(m.value,S.value));case"Vector2":return new q.Vector2(h(m.x,S.x),h(m.y,S.y));case"nS":return new q.nS(h(m.x,S.x),h(m.y,S.y),h(m.z,S.z));case"Vector4":return new q.Vector4(h(m.x,S.x),h(m.y,S.y),h(m.z,S.z),h(m.w,S.w));case"Quaternion":return new q.Quaternion(h(m.x,S.x),h(m.y,S.y),h(m.z,S.z),h(m.w,S.w));case"Matrix":return q.Matrix.yS(m.m.map(((m,l)=>h(m,S.m[l]))));case"Matrix2D":return new Z.d(m.m.map(((m,l)=>h(m,S.m[l]))));case"Matrix3D":return new Z.e(m.m.map(((m,l)=>h(m,S.m[l]))));default:return h((0,C.p)(m),(0,C.p)(S))}}(0,l.e)("FlowGraphNegationBlock",a);class P extends O.c{constructor(m){super(M.b,M.b,M.b,((m,S)=>this._polymorphicRemainder(m,S)),"FlowGraphModuloBlock",m)}_polymorphicRemainder(m,S){return x(m,S,((m,S)=>m%S))}}(0,l.e)("FlowGraphModuloBlock",P);class d extends O.c{constructor(m){super(M.b,M.b,M.b,((m,S)=>this._polymorphicMin(m,S)),"FlowGraphMinBlock",m)}_polymorphicMin(m,S){return x(m,S,Math.min)}}(0,l.e)("FlowGraphMinBlock",d);class J extends O.c{constructor(m){super(M.b,M.b,M.b,((m,S)=>this._polymorphicMax(m,S)),"FlowGraphMaxBlock",m)}_polymorphicMax(m,S){return x(m,S,Math.max)}}function N(m,S,h){return Math.min(Math.max(m,Math.min(S,h)),Math.max(S,h))}function j(m,S,h,l){switch((0,C.k)(m)){case"FlowGraphInteger":return new I.b(l(m.value,S.value,h.value));case"Vector2":return new q.Vector2(l(m.x,S.x,h.x),l(m.y,S.y,h.y));case"nS":return new q.nS(l(m.x,S.x,h.x),l(m.y,S.y,h.y),l(m.z,S.z,h.z));case"Vector4":return new q.Vector4(l(m.x,S.x,h.x),l(m.y,S.y,h.y),l(m.z,S.z,h.z),l(m.w,S.w,h.w));case"Quaternion":return new q.Quaternion(l(m.x,S.x,h.x),l(m.y,S.y,h.y),l(m.z,S.z,h.z),l(m.w,S.w,h.w));case"Matrix":return q.Matrix.yS(m.m.map(((m,M)=>l(m,S.m[M],h.m[M]))));case"Matrix2D":return new Z.d(m.m.map(((m,M)=>l(m,S.m[M],h.m[M]))));case"Matrix3D":return new Z.e(m.m.map(((m,M)=>l(m,S.m[M],h.m[M]))));default:return l((0,C.p)(m),(0,C.p)(S),(0,C.p)(h))}}(0,l.e)("FlowGraphMaxBlock",J);class K extends V{constructor(m){super(M.b,M.b,M.b,M.b,((m,S,h)=>this._polymorphicClamp(m,S,h)),"FlowGraphClampBlock",m)}_polymorphicClamp(m,S,h){return j(m,S,h,N)}}function c(m){return Math.min(Math.max(m,0),1)}(0,l.e)("FlowGraphClampBlock",K);class f extends Y.b{constructor(m){super(M.b,M.b,(m=>this._polymorphicSaturate(m)),"FlowGraphSaturateBlock",m)}_polymorphicSaturate(m){return o(m,c)}}function p(m,S,h){return(1-h)*m+h*S}(0,l.e)("FlowGraphSaturateBlock",f);class k extends V{constructor(m){super(M.b,M.b,M.b,M.b,((m,S,h)=>this._polymorphicInterpolate(m,S,h)),"FlowGraphMathInterpolationBlock",m)}_polymorphicInterpolate(m,S,h){return j(m,S,h,p)}}(0,l.e)("FlowGraphMathInterpolationBlock",k);class r extends O.c{constructor(m){super(M.b,M.b,M.e,((m,S)=>this._polymorphicEq(m,S)),"FlowGraphEqualityBlock",m)}_polymorphicEq(m,S){const h=(0,C.k)(m),l=(0,C.k)(S);return typeof m===typeof S&&((0,C.h)(h,l)||(0,C.g)(h,l)||(0,C.e)(h,l)?m.equals(S):m===S)}}function z(m,S,h){if((0,C.t)(m)&&(0,C.t)(S))return h((0,C.p)(m),(0,C.p)(S));throw new Error(`Cannot compare ${m} and ${S}`)}(0,l.e)("FlowGraphEqualityBlock",r);class Q extends O.c{constructor(m){super(M.b,M.b,M.e,((m,S)=>this._polymorphicLessThan(m,S)),"FlowGraphLessThanBlock",m)}_polymorphicLessThan(m,S){return z(m,S,((m,S)=>m<S))}}(0,l.e)("FlowGraphLessThanBlock",Q);class F extends O.c{constructor(m){super(M.b,M.b,M.e,((m,S)=>this._polymorphicLessThanOrEqual(m,S)),"FlowGraphLessThanOrEqualBlock",m)}_polymorphicLessThanOrEqual(m,S){return z(m,S,((m,S)=>m<=S))}}(0,l.e)("FlowGraphLessThanOrEqualBlock",F);class w extends O.c{constructor(m){super(M.b,M.b,M.e,((m,S)=>this._polymorphicGreaterThan(m,S)),"FlowGraphGreaterThanBlock",m)}_polymorphicGreaterThan(m,S){return z(m,S,((m,S)=>m>S))}}(0,l.e)("FlowGraphGreaterThanBlock",w);class t extends O.c{constructor(m){super(M.b,M.b,M.e,((m,S)=>this._polymorphicGreaterThanOrEqual(m,S)),"FlowGraphGreaterThanOrEqualBlock",m)}_polymorphicGreaterThanOrEqual(m,S){return z(m,S,((m,S)=>m>=S))}}(0,l.e)("FlowGraphGreaterThanOrEqualBlock",t);class A extends Y.b{constructor(m){super(M.b,M.e,(m=>this._polymorphicIsNan(m)),"FlowGraphIsNaNBlock",m)}_polymorphicIsNan(m){if((0,C.t)(m,!0))return isNaN((0,C.p)(m));throw new Error(`Cannot get NaN of ${m}`)}}(0,l.e)("FlowGraphIsNaNBlock",A);class i extends Y.b{constructor(m){super(M.b,M.e,(m=>this._polymorphicIsInf(m)),"FlowGraphIsInfBlock",m)}_polymorphicIsInf(m){if((0,C.t)(m))return!isFinite((0,C.p)(m));throw new Error(`Cannot get isInf of ${m}`)}}(0,l.e)("FlowGraphIsInfBlock",i);class W extends Y.b{constructor(m){super(M.b,M.b,(m=>this._polymorphicDegToRad(m)),"FlowGraphDegToRadBlock",m)}_degToRad(m){return m*Math.PI/180}_polymorphicDegToRad(m){return o(m,this._degToRad)}}(0,l.e)("FlowGraphDegToRadBlock",W);class mm extends Y.b{constructor(m){super(M.b,M.b,(m=>this._polymorphicRadToDeg(m)),"FlowGraphRadToDegBlock",m)}_radToDeg(m){return 180*m/Math.PI}_polymorphicRadToDeg(m){return o(m,this._radToDeg)}}(0,l.e)("FlowGraphRadToDegBlock",mm);class Sm extends Y.b{constructor(m){super(M.p,M.p,(m=>this._polymorphicSin(m)),"FlowGraphSinBlock",m)}_polymorphicSin(m){return o(m,Math.sin)}}class hm extends Y.b{constructor(m){super(M.p,M.p,(m=>this._polymorphicCos(m)),"FlowGraphCosBlock",m)}_polymorphicCos(m){return o(m,Math.cos)}}class lm extends Y.b{constructor(m){super(M.p,M.p,(m=>this._polymorphicTan(m)),"FlowGraphTanBlock",m)}_polymorphicTan(m){return o(m,Math.tan)}}class Mm extends Y.b{constructor(m){super(M.p,M.p,(m=>this._polymorphicAsin(m)),"FlowGraphASinBlock",m)}_polymorphicAsin(m){return o(m,Math.asin)}}(0,l.e)("FlowGraphASinBlock",Mm);class Om extends Y.b{constructor(m){super(M.p,M.p,(m=>this._polymorphicAcos(m)),"FlowGraphACosBlock",m)}_polymorphicAcos(m){return o(m,Math.acos)}}(0,l.e)("FlowGraphACosBlock",Om);class um extends Y.b{constructor(m){super(M.p,M.p,(m=>this._polymorphicAtan(m)),"FlowGraphATanBlock",m)}_polymorphicAtan(m){return o(m,Math.atan)}}(0,l.e)("FlowGraphATanBlock",um);class bm extends O.c{constructor(m){super(M.b,M.b,M.b,((m,S)=>this._polymorphicAtan2(m,S)),"FlowGraphATan2Block",m)}_polymorphicAtan2(m,S){return x(m,S,Math.atan2)}}(0,l.e)("FlowGraphATan2Block",bm);class qm extends Y.b{constructor(m){super(M.b,M.b,(m=>this._polymorphicSinh(m)),"FlowGraphSinhBlock",m)}_polymorphicSinh(m){return o(m,Math.sinh)}}(0,l.e)("FlowGraphSinhBlock",qm);class Ym extends Y.b{constructor(m){super(M.b,M.b,(m=>this._polymorphicCosh(m)),"FlowGraphCoshBlock",m)}_polymorphicCosh(m){return o(m,Math.cosh)}}(0,l.e)("FlowGraphCoshBlock",Ym);class Vm extends Y.b{constructor(m){super(M.b,M.b,(m=>this._polymorphicTanh(m)),"FlowGraphTanhBlock",m)}_polymorphicTanh(m){return o(m,Math.tanh)}}(0,l.e)("FlowGraphTanhBlock",Vm);class Im extends Y.b{constructor(m){super(M.b,M.p,(m=>this._polymorphicAsinh(m)),"FlowGraphASinhBlock",m)}_polymorphicAsinh(m){return o(m,Math.asinh)}}(0,l.e)("FlowGraphASinhBlock",Im);class Zm extends Y.b{constructor(m){super(M.b,M.p,(m=>this._polymorphicAcosh(m)),"FlowGraphACoshBlock",m)}_polymorphicAcosh(m){return o(m,Math.acosh)}}(0,l.e)("FlowGraphACoshBlock",Zm);class Cm extends Y.b{constructor(m){super(M.b,M.p,(m=>this._polymorphicAtanh(m)),"FlowGraphATanhBlock",m)}_polymorphicAtanh(m){return o(m,Math.atanh)}}(0,l.e)("FlowGraphATanhBlock",Cm);class Bm extends Y.b{constructor(m){super(M.b,M.p,(m=>this._polymorphicExp(m)),"FlowGraphExponentialBlock",m)}_polymorphicExp(m){return o(m,Math.exp)}}(0,l.e)("FlowGraphExponentialBlock",Bm);class Dm extends Y.b{constructor(m){super(M.b,M.p,(m=>this._polymorphicLog(m)),"FlowGraphLogBlock",m)}_polymorphicLog(m){return o(m,Math.log)}}(0,l.e)("FlowGraphLogBlock",Dm);class Em extends Y.b{constructor(m){super(M.b,M.p,(m=>this._polymorphicLog2(m)),"FlowGraphLog2Block",m)}_polymorphicLog2(m){return o(m,Math.log2)}}(0,l.e)("FlowGraphLog2Block",Em);class nm extends Y.b{constructor(m){super(M.b,M.p,(m=>this._polymorphicLog10(m)),"FlowGraphLog10Block",m)}_polymorphicLog10(m){return o(m,Math.log10)}}(0,l.e)("FlowGraphLog10Block",nm);class Lm extends Y.b{constructor(m){super(M.b,M.p,(m=>this._polymorphicSqrt(m)),"FlowGraphSquareRootBlock",m)}_polymorphicSqrt(m){return o(m,Math.sqrt)}}(0,l.e)("FlowGraphSquareRootBlock",Lm);class Um extends Y.b{constructor(m){super(M.b,M.p,(m=>this._polymorphicCubeRoot(m)),"FlowGraphCubeRootBlock",m)}_polymorphicCubeRoot(m){return o(m,Math.cbrt)}}(0,l.e)("FlowGraphCubeRootBlock",Um);class Hm extends O.c{constructor(m){super(M.b,M.p,M.p,((m,S)=>this._polymorphicPow(m,S)),"FlowGraphPowerBlock",m)}_polymorphicPow(m,S){return x(m,S,Math.pow)}}(0,l.e)("FlowGraphPowerBlock",Hm);class Rm extends Y.b{constructor(m){super((0,M.J)((null===m||void 0===m?void 0:m.valueType)||"FlowGraphInteger"),(0,M.J)((null===m||void 0===m?void 0:m.valueType)||"FlowGraphInteger"),(m=>"boolean"===typeof m?!m:"number"===typeof m?~m:new I.b(~m.value)),"FlowGraphBitwiseNotBlock",m)}}(0,l.e)("FlowGraphBitwiseNotBlock",Rm);class ym extends O.c{constructor(m){super((0,M.J)((null===m||void 0===m?void 0:m.valueType)||"FlowGraphInteger"),(0,M.J)((null===m||void 0===m?void 0:m.valueType)||"FlowGraphInteger"),(0,M.J)((null===m||void 0===m?void 0:m.valueType)||"FlowGraphInteger"),((m,S)=>{if("boolean"===typeof m&&"boolean"===typeof S)return m&&S;if("number"===typeof m&&"number"===typeof S)return m&S;if("object"===typeof m&&"object"===typeof S)return new I.b(m.value&S.value);throw new Error(`Cannot perform bitwise AND on ${m} and ${S}`)}),"FlowGraphBitwiseAndBlock",m)}}(0,l.e)("FlowGraphBitwiseAndBlock",ym);class om extends O.c{constructor(m){super((0,M.J)((null===m||void 0===m?void 0:m.valueType)||"FlowGraphInteger"),(0,M.J)((null===m||void 0===m?void 0:m.valueType)||"FlowGraphInteger"),(0,M.J)((null===m||void 0===m?void 0:m.valueType)||"FlowGraphInteger"),((m,S)=>{if("boolean"===typeof m&&"boolean"===typeof S)return m||S;if("number"===typeof m&&"number"===typeof S)return m|S;if("object"===typeof m&&"object"===typeof S)return new I.b(m.value|S.value);throw new Error(`Cannot perform bitwise OR on ${m} and ${S}`)}),"FlowGraphBitwiseOrBlock",m)}}(0,l.e)("FlowGraphBitwiseOrBlock",om);class sm extends O.c{constructor(m){super((0,M.J)((null===m||void 0===m?void 0:m.valueType)||"FlowGraphInteger"),(0,M.J)((null===m||void 0===m?void 0:m.valueType)||"FlowGraphInteger"),(0,M.J)((null===m||void 0===m?void 0:m.valueType)||"FlowGraphInteger"),((m,S)=>{if("boolean"===typeof m&&"boolean"===typeof S)return m!==S;if("number"===typeof m&&"number"===typeof S)return m^S;if("object"===typeof m&&"object"===typeof S)return new I.b(m.value^S.value);throw new Error(`Cannot perform bitwise XOR on ${m} and ${S}`)}),"FlowGraphBitwiseXorBlock",m)}}(0,l.e)("FlowGraphBitwiseXorBlock",sm);class vm extends O.c{constructor(m){super(M.f,M.f,M.f,((m,S)=>new I.b(m.value<<S.value)),"FlowGraphBitwiseLeftShiftBlock",m)}}(0,l.e)("FlowGraphBitwiseLeftShiftBlock",vm);class Tm extends O.c{constructor(m){super(M.f,M.f,M.f,((m,S)=>new I.b(m.value>>S.value)),"FlowGraphBitwiseRightShiftBlock",m)}}(0,l.e)("FlowGraphBitwiseRightShiftBlock",Tm);class Xm extends Y.b{constructor(m){super(M.f,M.f,(m=>new I.b(Math.clz32(m.value))),"FlowGraphLeadingZerosBlock",m)}}(0,l.e)("FlowGraphLeadingZerosBlock",Xm);class gm extends Y.b{constructor(m){super(M.f,M.f,(m=>new I.b(m.value?31-Math.clz32(m.value&-m.value):32)),"FlowGraphTrailingZerosBlock",m)}}(0,l.e)("FlowGraphTrailingZerosBlock",gm);class Gm extends Y.b{constructor(m){super(M.f,M.f,(m=>new I.b(function(m){let S=0;for(;m;)S+=1&m,m>>=1;return S}(m.value))),"FlowGraphOneBitsCounterBlock",m)}}(0,l.e)("FlowGraphOneBitsCounterBlock",Gm)},14618:(m,S,h)=>{h.d(S,{c:()=>M});var l=h(14620);class M extends l.d{constructor(m,S,h,l,M,O){super(h,O),this._operation=l,this._className=M,this.a=this.registerDataInput("a",m),this.b=this.registerDataInput("b",S)}_doOperation(m){const S=this.a.getValue(m),h=this.b.getValue(m);return this._operation(S,h)}getClassName(){return this._className}}},14620:(m,S,h)=>{h.d(S,{d:()=>b});var l=h(13074),M=h(13060);const O="cachedOperationValue",u="cachedExecutionId";class b extends l.d{constructor(m,S){super(S),this.value=this.registerDataOutput("value",m),this.isValid=this.registerDataOutput("isValid",M.e)}_updateOutputs(m){const S=m._getExecutionVariable(this,u,-1),h=m._getExecutionVariable(this,O,null);if(void 0!==h&&null!==h&&S===m.executionId)this.isValid.setValue(!0,m),this.value.setValue(h,m);else try{const S=this._doOperation(m);if(void 0===S||null===S)return void this.isValid.setValue(!1,m);m._setExecutionVariable(this,O,S),m._setExecutionVariable(this,u,m.executionId),this.value.setValue(S,m),this.isValid.setValue(!0,m)}catch(l){this.isValid.setValue(!1,m)}}}},14629:(m,S,h)=>{h.d(S,{b:()=>M});var l=h(14620);class M extends l.d{constructor(m,S,h,l,M){super(S,M),this._operation=h,this._className=l,this.a=this.registerDataInput("a",m)}_doOperation(m){return this._operation(this.a.getValue(m))}getClassName(){return this._className}}}}]);