"use strict";(self.wj3aziuz228=self.wj3aziuz228||[]).push([[88],{15681:(u,R,I)=>{I.r(R),I.d(R,{FlowGraphAbsBlock:()=>Y,FlowGraphAcosBlock:()=>Ku,FlowGraphAcoshBlock:()=>bu,FlowGraphAddBlock:()=>P,FlowGraphAsinBlock:()=>Uu,FlowGraphAsinhBlock:()=>Su,FlowGraphAtan2Block:()=>Du,FlowGraphAtanBlock:()=>Cu,FlowGraphAtanhBlock:()=>ru,FlowGraphBitwiseAndBlock:()=>qu,FlowGraphBitwiseLeftShiftBlock:()=>Mu,FlowGraphBitwiseNotBlock:()=>Vu,FlowGraphBitwiseOrBlock:()=>eu,FlowGraphBitwiseRightShiftBlock:()=>ou,FlowGraphBitwiseXorBlock:()=>Yu,FlowGraphCeilBlock:()=>h,FlowGraphClampBlock:()=>i,FlowGraphCosBlock:()=>Iu,FlowGraphCoshBlock:()=>tu,FlowGraphCubeRootBlock:()=>Tu,FlowGraphDegToRadBlock:()=>d,FlowGraphDivideBlock:()=>z,FlowGraphEBlock:()=>T,FlowGraphEqualityBlock:()=>N,FlowGraphExpBlock:()=>Pu,FlowGraphFloorBlock:()=>j,FlowGraphFractionBlock:()=>g,FlowGraphGreaterThanBlock:()=>H,FlowGraphGreaterThanOrEqualBlock:()=>y,FlowGraphInfBlock:()=>V,FlowGraphIsInfinityBlock:()=>n,FlowGraphIsNanBlock:()=>F,FlowGraphLeadingZerosBlock:()=>ju,FlowGraphLessThanBlock:()=>mu,FlowGraphLessThanOrEqualBlock:()=>L,FlowGraphLog10Block:()=>zu,FlowGraphLog2Block:()=>Eu,FlowGraphLogBlock:()=>Xu,FlowGraphMathInterpolationBlock:()=>O,FlowGraphMaxBlock:()=>c,FlowGraphMinBlock:()=>Z,FlowGraphModuloBlock:()=>l,FlowGraphMultiplyBlock:()=>E,FlowGraphNaNBlock:()=>q,FlowGraphNegationBlock:()=>v,FlowGraphOneBitsCounterBlock:()=>xu,FlowGraphPiBlock:()=>Q,FlowGraphPowerBlock:()=>Qu,FlowGraphRadToDegBlock:()=>uu,FlowGraphRandomBlock:()=>f,FlowGraphRoundBlock:()=>x,FlowGraphSaturateBlock:()=>a,FlowGraphSignBlock:()=>M,FlowGraphSinBlock:()=>Ru,FlowGraphSinhBlock:()=>su,FlowGraphSquareRootBlock:()=>fu,FlowGraphSubtractBlock:()=>X,FlowGraphTanBlock:()=>Bu,FlowGraphTanhBlock:()=>Gu,FlowGraphTrailingZerosBlock:()=>hu,FlowGraphTruncBlock:()=>o});var B=I(12433),U=I(14160),K=I(15687),C=I(15694);class D extends C.e{constructor(u,R,I,B){super(u,B),this._operation=R,this._className=I}_doOperation(u){return this._operation(u)}getClassName(){return this._className}}var s=I(12481),t=I(15698);class G extends C.e{constructor(u,R,I,B,U,K,C){super(B,C),this._operation=U,this._className=K,this.a=this.registerDataInput("a",u),this.b=this.registerDataInput("b",R),this.c=this.registerDataInput("c",I)}_doOperation(u){return this._operation(this.a.getValue(u),this.b.getValue(u),this.c.getValue(u))}getClassName(){return this._className}}var S=I(14157),b=I(14164),r=I(14199);class P extends K.b{constructor(u){super((0,U.N)(null===u||void 0===u?void 0:u.type),(0,U.N)(null===u||void 0===u?void 0:u.type),(0,U.N)(null===u||void 0===u?void 0:u.type),((u,R)=>this._polymorphicAdd(u,R)),"FlowGraphAddBlock",u)}_polymorphicAdd(u,R){const I=(0,r.k)(u),B=(0,r.k)(R);if((0,r.h)(I,B)||(0,r.g)(I,B)||(0,r.d)(I,B))return u.add(R);if("Quaternion"===I||"Vector4"===B)return new s.Vector4(u.x,u.y,u.z,u.w).addInPlace(R);if("Vector4"===I||"Quaternion"===B)return u.add(R);var U;if(null!==(U=this.config)&&void 0!==U&&U.preventIntegerFloatArithmetic&&typeof u!==typeof R)throw new Error("Cannot add different types of numbers.");return(0,r.s)(u)+(0,r.s)(R)}}(0,B.e)("FlowGraphAddBlock",P);class X extends K.b{constructor(u){super((0,U.N)(null===u||void 0===u?void 0:u.type),(0,U.N)(null===u||void 0===u?void 0:u.type),(0,U.N)(null===u||void 0===u?void 0:u.type),((u,R)=>this._polymorphicSubtract(u,R)),"FlowGraphSubtractBlock",u)}_polymorphicSubtract(u,R){const I=(0,r.k)(u),B=(0,r.k)(R);if((0,r.h)(I,B)||(0,r.d)(I,B)||(0,r.g)(I,B))return u.XR(R);if("Quaternion"===I||"Vector4"===B)return new s.Vector4(u.x,u.y,u.z,u.w).RS(R);if("Vector4"===I||"Quaternion"===B)return u.XR(R);var U;if(null!==(U=this.config)&&void 0!==U&&U.preventIntegerFloatArithmetic&&typeof u!==typeof R)throw new Error("Cannot add different types of numbers.");return(0,r.s)(u)-(0,r.s)(R)}}(0,B.e)("FlowGraphSubtractBlock",X);class E extends K.b{constructor(u){super((0,U.N)(null===u||void 0===u?void 0:u.type),(0,U.N)(null===u||void 0===u?void 0:u.type),(0,U.N)(null===u||void 0===u?void 0:u.type),((u,R)=>this._polymorphicMultiply(u,R)),"FlowGraphMultiplyBlock",u)}_polymorphicMultiply(u,R){const I=(0,r.k)(u),B=(0,r.k)(R);if((0,r.h)(I,B)||(0,r.d)(I,B))return u.multiply(R);if("Quaternion"===I||"Vector4"===B)return new s.Vector4(u.x,u.y,u.z,u.w).multiplyInPlace(R);if("Vector4"===I||"Quaternion"===B)return u.multiply(R);if((0,r.g)(I,B)){var U;if(null!==(U=this.config)&&void 0!==U&&U.useMatrixPerComponent){const B=u.m;for(let u=0;u<B.length;u++)B[u]*=R.m[u];return"Matrix2D"===I?new b.c(B):"Matrix3D"===I?new b.f(B):s.Matrix.TR(B)}return R.multiply(u)}var K;if(null!==(K=this.config)&&void 0!==K&&K.preventIntegerFloatArithmetic&&typeof u!==typeof R)throw new Error("Cannot add different types of numbers.");return(0,r.s)(u)*(0,r.s)(R)}}(0,B.e)("FlowGraphMultiplyBlock",E);class z extends K.b{constructor(u){super((0,U.N)(null===u||void 0===u?void 0:u.type),(0,U.N)(null===u||void 0===u?void 0:u.type),(0,U.N)(null===u||void 0===u?void 0:u.type),((u,R)=>this._polymorphicDivide(u,R)),"FlowGraphDivideBlock",u)}_polymorphicDivide(u,R){const I=(0,r.k)(u),B=(0,r.k)(R);if((0,r.h)(I,B)||(0,r.d)(I,B))return u.divide(R);if("Quaternion"===I||"Quaternion"===B){const I=u.clone();return I.x/=R.x,I.y/=R.y,I.z/=R.z,I.w/=R.w,I}if("Quaternion"===I||"Vector4"===B)return new s.Vector4(u.x,u.y,u.z,u.w).divideInPlace(R);if("Vector4"===I||"Quaternion"===B)return u.divide(R);if((0,r.g)(I,B)){var U;if(null!==(U=this.config)&&void 0!==U&&U.useMatrixPerComponent){const B=u.m;for(let u=0;u<B.length;u++)B[u]/=R.m[u];return"Matrix2D"===I?new b.c(B):"Matrix3D"===I?new b.f(B):s.Matrix.TR(B)}return u.divide(R)}var K;if(null!==(K=this.config)&&void 0!==K&&K.preventIntegerFloatArithmetic&&typeof u!==typeof R)throw new Error("Cannot add different types of numbers.");return(0,r.s)(u)/(0,r.s)(R)}}(0,B.e)("FlowGraphDivideBlock",z);class f extends D{constructor(u){super(U.u,(u=>this._random(u)),"FlowGraphRandomBlock",u),this.min=this.registerDataInput("min",U.u,(null===u||void 0===u?void 0:u.min)??0),this.max=this.registerDataInput("max",U.u,(null===u||void 0===u?void 0:u.max)??1),null!==u&&void 0!==u&&u.seed&&(this._seed=u.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const u=1e4*Math.sin(this._seed++);return u-Math.floor(u)}return Math.random()}_random(u){const R=this.min.getValue(u),I=this.max.getValue(u);return this._getRandomValue()*(I-R)+R}}(0,B.e)("FlowGraphRandomBlock",f);class T extends D{constructor(u){super(U.u,(()=>Math.E),"FlowGraphEBlock",u)}}(0,B.e)("FlowGraphEBlock",T);class Q extends D{constructor(u){super(U.u,(()=>Math.PI),"FlowGraphPIBlock",u)}}(0,B.e)("FlowGraphPIBlock",Q);class V extends D{constructor(u){super(U.u,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",u)}}(0,B.e)("FlowGraphInfBlock",V);class q extends D{constructor(u){super(U.u,(()=>Number.NaN),"FlowGraphNaNBlock",u)}}function e(u,R){switch((0,r.k)(u)){case"FlowGraphInteger":return new S.d(R(u.value));case"Vector2":return new s.Vector2(R(u.x),R(u.y));case"PR":return new s.PR(R(u.x),R(u.y),R(u.z));case"Vector4":return new s.Vector4(R(u.x),R(u.y),R(u.z),R(u.w));case"Quaternion":return new s.Quaternion(R(u.x),R(u.y),R(u.z),R(u.w));case"Matrix":return s.Matrix.TR(u.m.map(R));case"Matrix2D":return new b.c(u.m.map(R));case"Matrix3D":return new b.f(u.m.map(R));default:return R(u)}}(0,B.e)("FlowGraphNaNBlock",q);class Y extends t.e{constructor(u){super(U.u,U.u,(u=>this._polymorphicAbs(u)),"FlowGraphAbsBlock",u)}_polymorphicAbs(u){return e(u,Math.abs)}}(0,B.e)("FlowGraphAbsBlock",Y);class M extends t.e{constructor(u){super(U.u,U.u,(u=>this._polymorphicSign(u)),"FlowGraphSignBlock",u)}_polymorphicSign(u){return e(u,Math.sign)}}(0,B.e)("FlowGraphSignBlock",M);class o extends t.e{constructor(u){super(U.u,U.u,(u=>this._polymorphicTrunc(u)),"FlowGraphTruncBlock",u)}_polymorphicTrunc(u){return e(u,Math.trunc)}}(0,B.e)("FlowGraphTruncBlock",o);class j extends t.e{constructor(u){super(U.u,U.u,(u=>this._polymorphicFloor(u)),"FlowGraphFloorBlock",u)}_polymorphicFloor(u){return e(u,Math.floor)}}(0,B.e)("FlowGraphFloorBlock",j);class h extends t.e{constructor(u){super(U.c,U.c,(u=>this._polymorphicCeiling(u)),"FlowGraphCeilBlock",u)}_polymorphicCeiling(u){return e(u,Math.ceil)}}(0,B.e)("FlowGraphCeilBlock",h);class x extends t.e{constructor(u){super(U.c,U.c,(u=>this._polymorphicRound(u)),"FlowGraphRoundBlock",u)}_polymorphicRound(u){return e(u,(u=>{var R;return u<0&&null!==(R=this.config)&&void 0!==R&&R.roundHalfAwayFromZero?-Math.round(-u):Math.round(u)}))}}(0,B.e)("FlowGraphRoundBlock",x);class g extends t.e{constructor(u){super(U.c,U.c,(u=>this._polymorphicFraction(u)),"FlowGraphFractBlock",u)}_polymorphicFraction(u){return e(u,(u=>u-Math.floor(u)))}}(0,B.e)("FlowGraphFractBlock",g);class v extends t.e{constructor(u){super(U.c,U.c,(u=>this._polymorphicNeg(u)),"FlowGraphNegationBlock",u)}_polymorphicNeg(u){return e(u,(u=>-u))}}function p(u,R,I){switch((0,r.k)(u)){case"FlowGraphInteger":return new S.d(I(u.value,R.value));case"Vector2":return new s.Vector2(I(u.x,R.x),I(u.y,R.y));case"PR":return new s.PR(I(u.x,R.x),I(u.y,R.y),I(u.z,R.z));case"Vector4":return new s.Vector4(I(u.x,R.x),I(u.y,R.y),I(u.z,R.z),I(u.w,R.w));case"Quaternion":return new s.Quaternion(I(u.x,R.x),I(u.y,R.y),I(u.z,R.z),I(u.w,R.w));case"Matrix":return s.Matrix.TR(u.m.map(((u,B)=>I(u,R.m[B]))));case"Matrix2D":return new b.c(u.m.map(((u,B)=>I(u,R.m[B]))));case"Matrix3D":return new b.f(u.m.map(((u,B)=>I(u,R.m[B]))));default:return I((0,r.s)(u),(0,r.s)(R))}}(0,B.e)("FlowGraphNegationBlock",v);class l extends K.b{constructor(u){super(U.c,U.c,U.c,((u,R)=>this._polymorphicRemainder(u,R)),"FlowGraphModuloBlock",u)}_polymorphicRemainder(u,R){return p(u,R,((u,R)=>u%R))}}(0,B.e)("FlowGraphModuloBlock",l);class Z extends K.b{constructor(u){super(U.c,U.c,U.c,((u,R)=>this._polymorphicMin(u,R)),"FlowGraphMinBlock",u)}_polymorphicMin(u,R){return p(u,R,Math.min)}}(0,B.e)("FlowGraphMinBlock",Z);class c extends K.b{constructor(u){super(U.c,U.c,U.c,((u,R)=>this._polymorphicMax(u,R)),"FlowGraphMaxBlock",u)}_polymorphicMax(u,R){return p(u,R,Math.max)}}function k(u,R,I){return Math.min(Math.max(u,Math.min(R,I)),Math.max(R,I))}function w(u,R,I,B){switch((0,r.k)(u)){case"FlowGraphInteger":return new S.d(B(u.value,R.value,I.value));case"Vector2":return new s.Vector2(B(u.x,R.x,I.x),B(u.y,R.y,I.y));case"PR":return new s.PR(B(u.x,R.x,I.x),B(u.y,R.y,I.y),B(u.z,R.z,I.z));case"Vector4":return new s.Vector4(B(u.x,R.x,I.x),B(u.y,R.y,I.y),B(u.z,R.z,I.z),B(u.w,R.w,I.w));case"Quaternion":return new s.Quaternion(B(u.x,R.x,I.x),B(u.y,R.y,I.y),B(u.z,R.z,I.z),B(u.w,R.w,I.w));case"Matrix":return s.Matrix.TR(u.m.map(((u,U)=>B(u,R.m[U],I.m[U]))));case"Matrix2D":return new b.c(u.m.map(((u,U)=>B(u,R.m[U],I.m[U]))));case"Matrix3D":return new b.f(u.m.map(((u,U)=>B(u,R.m[U],I.m[U]))));default:return B((0,r.s)(u),(0,r.s)(R),(0,r.s)(I))}}(0,B.e)("FlowGraphMaxBlock",c);class i extends G{constructor(u){super(U.c,U.c,U.c,U.c,((u,R,I)=>this._polymorphicClamp(u,R,I)),"FlowGraphClampBlock",u)}_polymorphicClamp(u,R,I){return w(u,R,I,k)}}function W(u){return Math.min(Math.max(u,0),1)}(0,B.e)("FlowGraphClampBlock",i);class a extends t.e{constructor(u){super(U.c,U.c,(u=>this._polymorphicSaturate(u)),"FlowGraphSaturateBlock",u)}_polymorphicSaturate(u){return e(u,W)}}function A(u,R,I){return(1-I)*u+I*R}(0,B.e)("FlowGraphSaturateBlock",a);class O extends G{constructor(u){super(U.c,U.c,U.c,U.c,((u,R,I)=>this._polymorphicInterpolate(u,R,I)),"FlowGraphMathInterpolationBlock",u)}_polymorphicInterpolate(u,R,I){return w(u,R,I,A)}}(0,B.e)("FlowGraphMathInterpolationBlock",O);class N extends K.b{constructor(u){super(U.c,U.c,U.g,((u,R)=>this._polymorphicEq(u,R)),"FlowGraphEqualityBlock",u)}_polymorphicEq(u,R){const I=(0,r.k)(u),B=(0,r.k)(R);return typeof u===typeof R&&((0,r.h)(I,B)||(0,r.g)(I,B)||(0,r.d)(I,B)?u.equals(R):u===R)}}function J(u,R,I){if((0,r.u)(u)&&(0,r.u)(R))return I((0,r.s)(u),(0,r.s)(R));throw new Error(`Cannot compare ${u} and ${R}`)}(0,B.e)("FlowGraphEqualityBlock",N);class mu extends K.b{constructor(u){super(U.c,U.c,U.g,((u,R)=>this._polymorphicLessThan(u,R)),"FlowGraphLessThanBlock",u)}_polymorphicLessThan(u,R){return J(u,R,((u,R)=>u<R))}}(0,B.e)("FlowGraphLessThanBlock",mu);class L extends K.b{constructor(u){super(U.c,U.c,U.g,((u,R)=>this._polymorphicLessThanOrEqual(u,R)),"FlowGraphLessThanOrEqualBlock",u)}_polymorphicLessThanOrEqual(u,R){return J(u,R,((u,R)=>u<=R))}}(0,B.e)("FlowGraphLessThanOrEqualBlock",L);class H extends K.b{constructor(u){super(U.c,U.c,U.g,((u,R)=>this._polymorphicGreaterThan(u,R)),"FlowGraphGreaterThanBlock",u)}_polymorphicGreaterThan(u,R){return J(u,R,((u,R)=>u>R))}}(0,B.e)("FlowGraphGreaterThanBlock",H);class y extends K.b{constructor(u){super(U.c,U.c,U.g,((u,R)=>this._polymorphicGreaterThanOrEqual(u,R)),"FlowGraphGreaterThanOrEqualBlock",u)}_polymorphicGreaterThanOrEqual(u,R){return J(u,R,((u,R)=>u>=R))}}(0,B.e)("FlowGraphGreaterThanOrEqualBlock",y);class F extends t.e{constructor(u){super(U.c,U.g,(u=>this._polymorphicIsNan(u)),"FlowGraphIsNaNBlock",u)}_polymorphicIsNan(u){if((0,r.u)(u,!0))return isNaN((0,r.s)(u));throw new Error(`Cannot get NaN of ${u}`)}}(0,B.e)("FlowGraphIsNaNBlock",F);class n extends t.e{constructor(u){super(U.c,U.g,(u=>this._polymorphicIsInf(u)),"FlowGraphIsInfBlock",u)}_polymorphicIsInf(u){if((0,r.u)(u))return!isFinite((0,r.s)(u));throw new Error(`Cannot get isInf of ${u}`)}}(0,B.e)("FlowGraphIsInfBlock",n);class d extends t.e{constructor(u){super(U.c,U.c,(u=>this._polymorphicDegToRad(u)),"FlowGraphDegToRadBlock",u)}_degToRad(u){return u*Math.PI/180}_polymorphicDegToRad(u){return e(u,this._degToRad)}}(0,B.e)("FlowGraphDegToRadBlock",d);class uu extends t.e{constructor(u){super(U.c,U.c,(u=>this._polymorphicRadToDeg(u)),"FlowGraphRadToDegBlock",u)}_radToDeg(u){return 180*u/Math.PI}_polymorphicRadToDeg(u){return e(u,this._radToDeg)}}(0,B.e)("FlowGraphRadToDegBlock",uu);class Ru extends t.e{constructor(u){super(U.u,U.u,(u=>this._polymorphicSin(u)),"FlowGraphSinBlock",u)}_polymorphicSin(u){return e(u,Math.sin)}}class Iu extends t.e{constructor(u){super(U.u,U.u,(u=>this._polymorphicCos(u)),"FlowGraphCosBlock",u)}_polymorphicCos(u){return e(u,Math.cos)}}class Bu extends t.e{constructor(u){super(U.u,U.u,(u=>this._polymorphicTan(u)),"FlowGraphTanBlock",u)}_polymorphicTan(u){return e(u,Math.tan)}}class Uu extends t.e{constructor(u){super(U.u,U.u,(u=>this._polymorphicAsin(u)),"FlowGraphASinBlock",u)}_polymorphicAsin(u){return e(u,Math.asin)}}(0,B.e)("FlowGraphASinBlock",Uu);class Ku extends t.e{constructor(u){super(U.u,U.u,(u=>this._polymorphicAcos(u)),"FlowGraphACosBlock",u)}_polymorphicAcos(u){return e(u,Math.acos)}}(0,B.e)("FlowGraphACosBlock",Ku);class Cu extends t.e{constructor(u){super(U.u,U.u,(u=>this._polymorphicAtan(u)),"FlowGraphATanBlock",u)}_polymorphicAtan(u){return e(u,Math.atan)}}(0,B.e)("FlowGraphATanBlock",Cu);class Du extends K.b{constructor(u){super(U.c,U.c,U.c,((u,R)=>this._polymorphicAtan2(u,R)),"FlowGraphATan2Block",u)}_polymorphicAtan2(u,R){return p(u,R,Math.atan2)}}(0,B.e)("FlowGraphATan2Block",Du);class su extends t.e{constructor(u){super(U.c,U.c,(u=>this._polymorphicSinh(u)),"FlowGraphSinhBlock",u)}_polymorphicSinh(u){return e(u,Math.sinh)}}(0,B.e)("FlowGraphSinhBlock",su);class tu extends t.e{constructor(u){super(U.c,U.c,(u=>this._polymorphicCosh(u)),"FlowGraphCoshBlock",u)}_polymorphicCosh(u){return e(u,Math.cosh)}}(0,B.e)("FlowGraphCoshBlock",tu);class Gu extends t.e{constructor(u){super(U.c,U.c,(u=>this._polymorphicTanh(u)),"FlowGraphTanhBlock",u)}_polymorphicTanh(u){return e(u,Math.tanh)}}(0,B.e)("FlowGraphTanhBlock",Gu);class Su extends t.e{constructor(u){super(U.c,U.u,(u=>this._polymorphicAsinh(u)),"FlowGraphASinhBlock",u)}_polymorphicAsinh(u){return e(u,Math.asinh)}}(0,B.e)("FlowGraphASinhBlock",Su);class bu extends t.e{constructor(u){super(U.c,U.u,(u=>this._polymorphicAcosh(u)),"FlowGraphACoshBlock",u)}_polymorphicAcosh(u){return e(u,Math.acosh)}}(0,B.e)("FlowGraphACoshBlock",bu);class ru extends t.e{constructor(u){super(U.c,U.u,(u=>this._polymorphicAtanh(u)),"FlowGraphATanhBlock",u)}_polymorphicAtanh(u){return e(u,Math.atanh)}}(0,B.e)("FlowGraphATanhBlock",ru);class Pu extends t.e{constructor(u){super(U.c,U.u,(u=>this._polymorphicExp(u)),"FlowGraphExponentialBlock",u)}_polymorphicExp(u){return e(u,Math.exp)}}(0,B.e)("FlowGraphExponentialBlock",Pu);class Xu extends t.e{constructor(u){super(U.c,U.u,(u=>this._polymorphicLog(u)),"FlowGraphLogBlock",u)}_polymorphicLog(u){return e(u,Math.log)}}(0,B.e)("FlowGraphLogBlock",Xu);class Eu extends t.e{constructor(u){super(U.c,U.u,(u=>this._polymorphicLog2(u)),"FlowGraphLog2Block",u)}_polymorphicLog2(u){return e(u,Math.log2)}}(0,B.e)("FlowGraphLog2Block",Eu);class zu extends t.e{constructor(u){super(U.c,U.u,(u=>this._polymorphicLog10(u)),"FlowGraphLog10Block",u)}_polymorphicLog10(u){return e(u,Math.log10)}}(0,B.e)("FlowGraphLog10Block",zu);class fu extends t.e{constructor(u){super(U.c,U.u,(u=>this._polymorphicSqrt(u)),"FlowGraphSquareRootBlock",u)}_polymorphicSqrt(u){return e(u,Math.sqrt)}}(0,B.e)("FlowGraphSquareRootBlock",fu);class Tu extends t.e{constructor(u){super(U.c,U.u,(u=>this._polymorphicCubeRoot(u)),"FlowGraphCubeRootBlock",u)}_polymorphicCubeRoot(u){return e(u,Math.cbrt)}}(0,B.e)("FlowGraphCubeRootBlock",Tu);class Qu extends K.b{constructor(u){super(U.c,U.u,U.u,((u,R)=>this._polymorphicPow(u,R)),"FlowGraphPowerBlock",u)}_polymorphicPow(u,R){return p(u,R,Math.pow)}}(0,B.e)("FlowGraphPowerBlock",Qu);class Vu extends t.e{constructor(u){super((0,U.N)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),(0,U.N)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),(u=>"boolean"===typeof u?!u:"number"===typeof u?~u:new S.d(~u.value)),"FlowGraphBitwiseNotBlock",u)}}(0,B.e)("FlowGraphBitwiseNotBlock",Vu);class qu extends K.b{constructor(u){super((0,U.N)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),(0,U.N)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),(0,U.N)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),((u,R)=>{if("boolean"===typeof u&&"boolean"===typeof R)return u&&R;if("number"===typeof u&&"number"===typeof R)return u&R;if("object"===typeof u&&"object"===typeof R)return new S.d(u.value&R.value);throw new Error(`Cannot perform bitwise AND on ${u} and ${R}`)}),"FlowGraphBitwiseAndBlock",u)}}(0,B.e)("FlowGraphBitwiseAndBlock",qu);class eu extends K.b{constructor(u){super((0,U.N)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),(0,U.N)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),(0,U.N)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),((u,R)=>{if("boolean"===typeof u&&"boolean"===typeof R)return u||R;if("number"===typeof u&&"number"===typeof R)return u|R;if("object"===typeof u&&"object"===typeof R)return new S.d(u.value|R.value);throw new Error(`Cannot perform bitwise OR on ${u} and ${R}`)}),"FlowGraphBitwiseOrBlock",u)}}(0,B.e)("FlowGraphBitwiseOrBlock",eu);class Yu extends K.b{constructor(u){super((0,U.N)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),(0,U.N)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),(0,U.N)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),((u,R)=>{if("boolean"===typeof u&&"boolean"===typeof R)return u!==R;if("number"===typeof u&&"number"===typeof R)return u^R;if("object"===typeof u&&"object"===typeof R)return new S.d(u.value^R.value);throw new Error(`Cannot perform bitwise XOR on ${u} and ${R}`)}),"FlowGraphBitwiseXorBlock",u)}}(0,B.e)("FlowGraphBitwiseXorBlock",Yu);class Mu extends K.b{constructor(u){super(U.j,U.j,U.j,((u,R)=>new S.d(u.value<<R.value)),"FlowGraphBitwiseLeftShiftBlock",u)}}(0,B.e)("FlowGraphBitwiseLeftShiftBlock",Mu);class ou extends K.b{constructor(u){super(U.j,U.j,U.j,((u,R)=>new S.d(u.value>>R.value)),"FlowGraphBitwiseRightShiftBlock",u)}}(0,B.e)("FlowGraphBitwiseRightShiftBlock",ou);class ju extends t.e{constructor(u){super(U.j,U.j,(u=>new S.d(Math.clz32(u.value))),"FlowGraphLeadingZerosBlock",u)}}(0,B.e)("FlowGraphLeadingZerosBlock",ju);class hu extends t.e{constructor(u){super(U.j,U.j,(u=>new S.d(u.value?31-Math.clz32(u.value&-u.value):32)),"FlowGraphTrailingZerosBlock",u)}}(0,B.e)("FlowGraphTrailingZerosBlock",hu);class xu extends t.e{constructor(u){super(U.j,U.j,(u=>new S.d(function(u){let R=0;for(;u;)R+=1&u,u>>=1;return R}(u.value))),"FlowGraphOneBitsCounterBlock",u)}}(0,B.e)("FlowGraphOneBitsCounterBlock",xu)},15687:(u,R,I)=>{I.d(R,{b:()=>U});var B=I(15694);class U extends B.e{constructor(u,R,I,B,U,K){super(I,K),this._operation=B,this._className=U,this.a=this.registerDataInput("a",u),this.b=this.registerDataInput("b",R)}_doOperation(u){const R=this.a.getValue(u),I=this.b.getValue(u);return this._operation(R,I)}getClassName(){return this._className}}},15694:(u,R,I)=>{I.d(R,{e:()=>D});var B=I(14181),U=I(14160);const K="cachedOperationValue",C="cachedExecutionId";class D extends B.d{constructor(u,R){super(R),this.value=this.registerDataOutput("value",u),this.isValid=this.registerDataOutput("isValid",U.g)}_updateOutputs(u){const R=u._getExecutionVariable(this,C,-1),I=u._getExecutionVariable(this,K,null);if(void 0!==I&&null!==I&&R===u.executionId)this.isValid.setValue(!0,u),this.value.setValue(I,u);else try{const R=this._doOperation(u);if(void 0===R||null===R)return void this.isValid.setValue(!1,u);u._setExecutionVariable(this,K,R),u._setExecutionVariable(this,C,u.executionId),this.value.setValue(R,u),this.isValid.setValue(!0,u)}catch(B){this.isValid.setValue(!1,u)}}}},15698:(u,R,I)=>{I.d(R,{e:()=>U});var B=I(15694);class U extends B.e{constructor(u,R,I,B,U){super(R,U),this._operation=I,this._className=B,this.a=this.registerDataInput("a",u)}_doOperation(u){return this._operation(this.a.getValue(u))}getClassName(){return this._className}}}}]);