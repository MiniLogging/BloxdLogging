"use strict";(self["9x1utqq1axc"]=self["9x1utqq1axc"]||[]).push([[88],{15497:(y,c,A)=>{A.r(c),A.d(c,{FlowGraphAbsBlock:()=>my,FlowGraphAcosBlock:()=>Ny,FlowGraphAcoshBlock:()=>Oy,FlowGraphAddBlock:()=>i,FlowGraphAsinBlock:()=>wy,FlowGraphAsinhBlock:()=>oy,FlowGraphAtan2Block:()=>Wy,FlowGraphAtanBlock:()=>py,FlowGraphAtanhBlock:()=>Ly,FlowGraphBitwiseAndBlock:()=>Cy,FlowGraphBitwiseLeftShiftBlock:()=>Ty,FlowGraphBitwiseNotBlock:()=>Xy,FlowGraphBitwiseOrBlock:()=>Ky,FlowGraphBitwiseRightShiftBlock:()=>zy,FlowGraphBitwiseXorBlock:()=>mc,FlowGraphCeilBlock:()=>M,FlowGraphClampBlock:()=>e,FlowGraphCosBlock:()=>Ay,FlowGraphCoshBlock:()=>Iy,FlowGraphCubeRootBlock:()=>sy,FlowGraphDegToRadBlock:()=>d,FlowGraphDivideBlock:()=>D,FlowGraphEBlock:()=>s,FlowGraphEqualityBlock:()=>F,FlowGraphExpBlock:()=>iy,FlowGraphFloorBlock:()=>S,FlowGraphFractionBlock:()=>a,FlowGraphGreaterThanBlock:()=>E,FlowGraphGreaterThanOrEqualBlock:()=>b,FlowGraphInfBlock:()=>X,FlowGraphIsInfinityBlock:()=>v,FlowGraphIsNanBlock:()=>Z,FlowGraphLeadingZerosBlock:()=>Sy,FlowGraphLessThanBlock:()=>r,FlowGraphLessThanOrEqualBlock:()=>n,FlowGraphLog10Block:()=>Dy,FlowGraphLog2Block:()=>Py,FlowGraphLogBlock:()=>Hy,FlowGraphMathInterpolationBlock:()=>x,FlowGraphMaxBlock:()=>V,FlowGraphMinBlock:()=>f,FlowGraphModuloBlock:()=>j,FlowGraphMultiplyBlock:()=>P,FlowGraphNaNBlock:()=>C,FlowGraphNegationBlock:()=>u,FlowGraphOneBitsCounterBlock:()=>ky,FlowGraphPiBlock:()=>B,FlowGraphPowerBlock:()=>By,FlowGraphRadToDegBlock:()=>yy,FlowGraphRandomBlock:()=>t,FlowGraphRoundBlock:()=>k,FlowGraphSaturateBlock:()=>Y,FlowGraphSignBlock:()=>T,FlowGraphSinBlock:()=>cy,FlowGraphSinhBlock:()=>hy,FlowGraphSquareRootBlock:()=>ty,FlowGraphSubtractBlock:()=>H,FlowGraphTanBlock:()=>ly,FlowGraphTanhBlock:()=>qy,FlowGraphTrailingZerosBlock:()=>My,FlowGraphTruncBlock:()=>z});var l=A(12283),w=A(13993),N=A(15500),p=A(15507);class W extends p.d{constructor(y,c,A,l){super(y,l),this._operation=c,this._className=A}_doOperation(y){return this._operation(y)}getClassName(){return this._className}}var h=A(12325),I=A(15516);class q extends p.d{constructor(y,c,A,l,w,N,p){super(l,p),this._operation=w,this._className=N,this.a=this.registerDataInput("a",y),this.b=this.registerDataInput("b",c),this.c=this.registerDataInput("c",A)}_doOperation(y){return this._operation(this.a.getValue(y),this.b.getValue(y),this.c.getValue(y))}getClassName(){return this._className}}var o=A(13986),O=A(13995),L=A(14021);class i extends N.c{constructor(y){super((0,w.S)(null===y||void 0===y?void 0:y.type),(0,w.S)(null===y||void 0===y?void 0:y.type),(0,w.S)(null===y||void 0===y?void 0:y.type),((y,c)=>this._polymorphicAdd(y,c)),"FlowGraphAddBlock",y)}_polymorphicAdd(y,c){const A=(0,L.g)(y),l=(0,L.g)(c);if((0,L.d)(A,l)||(0,L.c)(A,l)||(0,L.b)(A,l))return y.add(c);if("Quaternion"===A||"Vector4"===l)return new h.Vector4(y.x,y.y,y.z,y.w).addInPlace(c);if("Vector4"===A||"Quaternion"===l)return y.add(c);var w;if(null!==(w=this.config)&&void 0!==w&&w.preventIntegerFloatArithmetic&&typeof y!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,L.j)(y)+(0,L.j)(c)}}(0,l.f)("FlowGraphAddBlock",i);class H extends N.c{constructor(y){super((0,w.S)(null===y||void 0===y?void 0:y.type),(0,w.S)(null===y||void 0===y?void 0:y.type),(0,w.S)(null===y||void 0===y?void 0:y.type),((y,c)=>this._polymorphicSubtract(y,c)),"FlowGraphSubtractBlock",y)}_polymorphicSubtract(y,c){const A=(0,L.g)(y),l=(0,L.g)(c);if((0,L.d)(A,l)||(0,L.b)(A,l)||(0,L.c)(A,l))return y.xc(c);if("Quaternion"===A||"Vector4"===l)return new h.Vector4(y.x,y.y,y.z,y.w).uo(c);if("Vector4"===A||"Quaternion"===l)return y.xc(c);var w;if(null!==(w=this.config)&&void 0!==w&&w.preventIntegerFloatArithmetic&&typeof y!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,L.j)(y)-(0,L.j)(c)}}(0,l.f)("FlowGraphSubtractBlock",H);class P extends N.c{constructor(y){super((0,w.S)(null===y||void 0===y?void 0:y.type),(0,w.S)(null===y||void 0===y?void 0:y.type),(0,w.S)(null===y||void 0===y?void 0:y.type),((y,c)=>this._polymorphicMultiply(y,c)),"FlowGraphMultiplyBlock",y)}_polymorphicMultiply(y,c){const A=(0,L.g)(y),l=(0,L.g)(c);if((0,L.d)(A,l)||(0,L.b)(A,l))return y.multiply(c);if("Quaternion"===A||"Vector4"===l)return new h.Vector4(y.x,y.y,y.z,y.w).multiplyInPlace(c);if("Vector4"===A||"Quaternion"===l)return y.multiply(c);if((0,L.c)(A,l)){var w;if(null!==(w=this.config)&&void 0!==w&&w.useMatrixPerComponent){const l=y.m;for(let y=0;y<l.length;y++)l[y]*=c.m[y];return"Matrix2D"===A?new O.d(l):"Matrix3D"===A?new O.f(l):h.Matrix.yA(l)}return c.multiply(y)}var N;if(null!==(N=this.config)&&void 0!==N&&N.preventIntegerFloatArithmetic&&typeof y!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,L.j)(y)*(0,L.j)(c)}}(0,l.f)("FlowGraphMultiplyBlock",P);class D extends N.c{constructor(y){super((0,w.S)(null===y||void 0===y?void 0:y.type),(0,w.S)(null===y||void 0===y?void 0:y.type),(0,w.S)(null===y||void 0===y?void 0:y.type),((y,c)=>this._polymorphicDivide(y,c)),"FlowGraphDivideBlock",y)}_polymorphicDivide(y,c){const A=(0,L.g)(y),l=(0,L.g)(c);if((0,L.d)(A,l)||(0,L.b)(A,l))return y.divide(c);if("Quaternion"===A||"Quaternion"===l){const A=y.clone();return A.x/=c.x,A.y/=c.y,A.z/=c.z,A.w/=c.w,A}if("Quaternion"===A||"Vector4"===l)return new h.Vector4(y.x,y.y,y.z,y.w).divideInPlace(c);if("Vector4"===A||"Quaternion"===l)return y.divide(c);if((0,L.c)(A,l)){var w;if(null!==(w=this.config)&&void 0!==w&&w.useMatrixPerComponent){const l=y.m;for(let y=0;y<l.length;y++)l[y]/=c.m[y];return"Matrix2D"===A?new O.d(l):"Matrix3D"===A?new O.f(l):h.Matrix.yA(l)}return y.divide(c)}var N;if(null!==(N=this.config)&&void 0!==N&&N.preventIntegerFloatArithmetic&&typeof y!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,L.j)(y)/(0,L.j)(c)}}(0,l.f)("FlowGraphDivideBlock",D);class t extends W{constructor(y){super(w.s,(y=>this._random(y)),"FlowGraphRandomBlock",y),this.min=this.registerDataInput("min",w.s,(null===y||void 0===y?void 0:y.min)??0),this.max=this.registerDataInput("max",w.s,(null===y||void 0===y?void 0:y.max)??1),null!==y&&void 0!==y&&y.seed&&(this._seed=y.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const y=1e4*Math.sin(this._seed++);return y-Math.floor(y)}return Math.random()}_random(y){const c=this.min.getValue(y),A=this.max.getValue(y);return this._getRandomValue()*(A-c)+c}}(0,l.f)("FlowGraphRandomBlock",t);class s extends W{constructor(y){super(w.s,(()=>Math.E),"FlowGraphEBlock",y)}}(0,l.f)("FlowGraphEBlock",s);class B extends W{constructor(y){super(w.s,(()=>Math.PI),"FlowGraphPIBlock",y)}}(0,l.f)("FlowGraphPIBlock",B);class X extends W{constructor(y){super(w.s,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",y)}}(0,l.f)("FlowGraphInfBlock",X);class C extends W{constructor(y){super(w.s,(()=>Number.NaN),"FlowGraphNaNBlock",y)}}function K(y,c){switch((0,L.g)(y)){case"FlowGraphInteger":return new o.b(c(y.value));case"Vector2":return new h.Vector2(c(y.x),c(y.y));case"gc":return new h.gc(c(y.x),c(y.y),c(y.z));case"Vector4":return new h.Vector4(c(y.x),c(y.y),c(y.z),c(y.w));case"Quaternion":return new h.Quaternion(c(y.x),c(y.y),c(y.z),c(y.w));case"Matrix":return h.Matrix.yA(y.m.map(c));case"Matrix2D":return new O.d(y.m.map(c));case"Matrix3D":return new O.f(y.m.map(c));default:return c(y)}}(0,l.f)("FlowGraphNaNBlock",C);class my extends I.b{constructor(y){super(w.s,w.s,(y=>this._polymorphicAbs(y)),"FlowGraphAbsBlock",y)}_polymorphicAbs(y){return K(y,Math.abs)}}(0,l.f)("FlowGraphAbsBlock",my);class T extends I.b{constructor(y){super(w.s,w.s,(y=>this._polymorphicSign(y)),"FlowGraphSignBlock",y)}_polymorphicSign(y){return K(y,Math.sign)}}(0,l.f)("FlowGraphSignBlock",T);class z extends I.b{constructor(y){super(w.s,w.s,(y=>this._polymorphicTrunc(y)),"FlowGraphTruncBlock",y)}_polymorphicTrunc(y){return K(y,Math.trunc)}}(0,l.f)("FlowGraphTruncBlock",z);class S extends I.b{constructor(y){super(w.s,w.s,(y=>this._polymorphicFloor(y)),"FlowGraphFloorBlock",y)}_polymorphicFloor(y){return K(y,Math.floor)}}(0,l.f)("FlowGraphFloorBlock",S);class M extends I.b{constructor(y){super(w.e,w.e,(y=>this._polymorphicCeiling(y)),"FlowGraphCeilBlock",y)}_polymorphicCeiling(y){return K(y,Math.ceil)}}(0,l.f)("FlowGraphCeilBlock",M);class k extends I.b{constructor(y){super(w.e,w.e,(y=>this._polymorphicRound(y)),"FlowGraphRoundBlock",y)}_polymorphicRound(y){return K(y,(y=>{var c;return y<0&&null!==(c=this.config)&&void 0!==c&&c.roundHalfAwayFromZero?-Math.round(-y):Math.round(y)}))}}(0,l.f)("FlowGraphRoundBlock",k);class a extends I.b{constructor(y){super(w.e,w.e,(y=>this._polymorphicFraction(y)),"FlowGraphFractBlock",y)}_polymorphicFraction(y){return K(y,(y=>y-Math.floor(y)))}}(0,l.f)("FlowGraphFractBlock",a);class u extends I.b{constructor(y){super(w.e,w.e,(y=>this._polymorphicNeg(y)),"FlowGraphNegationBlock",y)}_polymorphicNeg(y){return K(y,(y=>-y))}}function G(y,c,A){switch((0,L.g)(y)){case"FlowGraphInteger":return new o.b(A(y.value,c.value));case"Vector2":return new h.Vector2(A(y.x,c.x),A(y.y,c.y));case"gc":return new h.gc(A(y.x,c.x),A(y.y,c.y),A(y.z,c.z));case"Vector4":return new h.Vector4(A(y.x,c.x),A(y.y,c.y),A(y.z,c.z),A(y.w,c.w));case"Quaternion":return new h.Quaternion(A(y.x,c.x),A(y.y,c.y),A(y.z,c.z),A(y.w,c.w));case"Matrix":return h.Matrix.yA(y.m.map(((y,l)=>A(y,c.m[l]))));case"Matrix2D":return new O.d(y.m.map(((y,l)=>A(y,c.m[l]))));case"Matrix3D":return new O.f(y.m.map(((y,l)=>A(y,c.m[l]))));default:return A((0,L.j)(y),(0,L.j)(c))}}(0,l.f)("FlowGraphNegationBlock",u);class j extends N.c{constructor(y){super(w.e,w.e,w.e,((y,c)=>this._polymorphicRemainder(y,c)),"FlowGraphModuloBlock",y)}_polymorphicRemainder(y,c){return G(y,c,((y,c)=>y%c))}}(0,l.f)("FlowGraphModuloBlock",j);class f extends N.c{constructor(y){super(w.e,w.e,w.e,((y,c)=>this._polymorphicMin(y,c)),"FlowGraphMinBlock",y)}_polymorphicMin(y,c){return G(y,c,Math.min)}}(0,l.f)("FlowGraphMinBlock",f);class V extends N.c{constructor(y){super(w.e,w.e,w.e,((y,c)=>this._polymorphicMax(y,c)),"FlowGraphMaxBlock",y)}_polymorphicMax(y,c){return G(y,c,Math.max)}}function J(y,c,A){return Math.min(Math.max(y,Math.min(c,A)),Math.max(c,A))}function U(y,c,A,l){switch((0,L.g)(y)){case"FlowGraphInteger":return new o.b(l(y.value,c.value,A.value));case"Vector2":return new h.Vector2(l(y.x,c.x,A.x),l(y.y,c.y,A.y));case"gc":return new h.gc(l(y.x,c.x,A.x),l(y.y,c.y,A.y),l(y.z,c.z,A.z));case"Vector4":return new h.Vector4(l(y.x,c.x,A.x),l(y.y,c.y,A.y),l(y.z,c.z,A.z),l(y.w,c.w,A.w));case"Quaternion":return new h.Quaternion(l(y.x,c.x,A.x),l(y.y,c.y,A.y),l(y.z,c.z,A.z),l(y.w,c.w,A.w));case"Matrix":return h.Matrix.yA(y.m.map(((y,w)=>l(y,c.m[w],A.m[w]))));case"Matrix2D":return new O.d(y.m.map(((y,w)=>l(y,c.m[w],A.m[w]))));case"Matrix3D":return new O.f(y.m.map(((y,w)=>l(y,c.m[w],A.m[w]))));default:return l((0,L.j)(y),(0,L.j)(c),(0,L.j)(A))}}(0,l.f)("FlowGraphMaxBlock",V);class e extends q{constructor(y){super(w.e,w.e,w.e,w.e,((y,c,A)=>this._polymorphicClamp(y,c,A)),"FlowGraphClampBlock",y)}_polymorphicClamp(y,c,A){return U(y,c,A,J)}}function Q(y){return Math.min(Math.max(y,0),1)}(0,l.f)("FlowGraphClampBlock",e);class Y extends I.b{constructor(y){super(w.e,w.e,(y=>this._polymorphicSaturate(y)),"FlowGraphSaturateBlock",y)}_polymorphicSaturate(y){return K(y,Q)}}function g(y,c,A){return(1-A)*y+A*c}(0,l.f)("FlowGraphSaturateBlock",Y);class x extends q{constructor(y){super(w.e,w.e,w.e,w.e,((y,c,A)=>this._polymorphicInterpolate(y,c,A)),"FlowGraphMathInterpolationBlock",y)}_polymorphicInterpolate(y,c,A){return U(y,c,A,g)}}(0,l.f)("FlowGraphMathInterpolationBlock",x);class F extends N.c{constructor(y){super(w.e,w.e,w.f,((y,c)=>this._polymorphicEq(y,c)),"FlowGraphEqualityBlock",y)}_polymorphicEq(y,c){const A=(0,L.g)(y),l=(0,L.g)(c);return typeof y===typeof c&&((0,L.d)(A,l)||(0,L.c)(A,l)||(0,L.b)(A,l)?y.equals(c):y===c)}}function R(y,c,A){if((0,L.l)(y)&&(0,L.l)(c))return A((0,L.j)(y),(0,L.j)(c));throw new Error(`Cannot compare ${y} and ${c}`)}(0,l.f)("FlowGraphEqualityBlock",F);class r extends N.c{constructor(y){super(w.e,w.e,w.f,((y,c)=>this._polymorphicLessThan(y,c)),"FlowGraphLessThanBlock",y)}_polymorphicLessThan(y,c){return R(y,c,((y,c)=>y<c))}}(0,l.f)("FlowGraphLessThanBlock",r);class n extends N.c{constructor(y){super(w.e,w.e,w.f,((y,c)=>this._polymorphicLessThanOrEqual(y,c)),"FlowGraphLessThanOrEqualBlock",y)}_polymorphicLessThanOrEqual(y,c){return R(y,c,((y,c)=>y<=c))}}(0,l.f)("FlowGraphLessThanOrEqualBlock",n);class E extends N.c{constructor(y){super(w.e,w.e,w.f,((y,c)=>this._polymorphicGreaterThan(y,c)),"FlowGraphGreaterThanBlock",y)}_polymorphicGreaterThan(y,c){return R(y,c,((y,c)=>y>c))}}(0,l.f)("FlowGraphGreaterThanBlock",E);class b extends N.c{constructor(y){super(w.e,w.e,w.f,((y,c)=>this._polymorphicGreaterThanOrEqual(y,c)),"FlowGraphGreaterThanOrEqualBlock",y)}_polymorphicGreaterThanOrEqual(y,c){return R(y,c,((y,c)=>y>=c))}}(0,l.f)("FlowGraphGreaterThanOrEqualBlock",b);class Z extends I.b{constructor(y){super(w.e,w.f,(y=>this._polymorphicIsNan(y)),"FlowGraphIsNaNBlock",y)}_polymorphicIsNan(y){if((0,L.l)(y,!0))return isNaN((0,L.j)(y));throw new Error(`Cannot get NaN of ${y}`)}}(0,l.f)("FlowGraphIsNaNBlock",Z);class v extends I.b{constructor(y){super(w.e,w.f,(y=>this._polymorphicIsInf(y)),"FlowGraphIsInfBlock",y)}_polymorphicIsInf(y){if((0,L.l)(y))return!isFinite((0,L.j)(y));throw new Error(`Cannot get isInf of ${y}`)}}(0,l.f)("FlowGraphIsInfBlock",v);class d extends I.b{constructor(y){super(w.e,w.e,(y=>this._polymorphicDegToRad(y)),"FlowGraphDegToRadBlock",y)}_degToRad(y){return y*Math.PI/180}_polymorphicDegToRad(y){return K(y,this._degToRad)}}(0,l.f)("FlowGraphDegToRadBlock",d);class yy extends I.b{constructor(y){super(w.e,w.e,(y=>this._polymorphicRadToDeg(y)),"FlowGraphRadToDegBlock",y)}_radToDeg(y){return 180*y/Math.PI}_polymorphicRadToDeg(y){return K(y,this._radToDeg)}}(0,l.f)("FlowGraphRadToDegBlock",yy);class cy extends I.b{constructor(y){super(w.s,w.s,(y=>this._polymorphicSin(y)),"FlowGraphSinBlock",y)}_polymorphicSin(y){return K(y,Math.sin)}}class Ay extends I.b{constructor(y){super(w.s,w.s,(y=>this._polymorphicCos(y)),"FlowGraphCosBlock",y)}_polymorphicCos(y){return K(y,Math.cos)}}class ly extends I.b{constructor(y){super(w.s,w.s,(y=>this._polymorphicTan(y)),"FlowGraphTanBlock",y)}_polymorphicTan(y){return K(y,Math.tan)}}class wy extends I.b{constructor(y){super(w.s,w.s,(y=>this._polymorphicAsin(y)),"FlowGraphASinBlock",y)}_polymorphicAsin(y){return K(y,Math.asin)}}(0,l.f)("FlowGraphASinBlock",wy);class Ny extends I.b{constructor(y){super(w.s,w.s,(y=>this._polymorphicAcos(y)),"FlowGraphACosBlock",y)}_polymorphicAcos(y){return K(y,Math.acos)}}(0,l.f)("FlowGraphACosBlock",Ny);class py extends I.b{constructor(y){super(w.s,w.s,(y=>this._polymorphicAtan(y)),"FlowGraphATanBlock",y)}_polymorphicAtan(y){return K(y,Math.atan)}}(0,l.f)("FlowGraphATanBlock",py);class Wy extends N.c{constructor(y){super(w.e,w.e,w.e,((y,c)=>this._polymorphicAtan2(y,c)),"FlowGraphATan2Block",y)}_polymorphicAtan2(y,c){return G(y,c,Math.atan2)}}(0,l.f)("FlowGraphATan2Block",Wy);class hy extends I.b{constructor(y){super(w.e,w.e,(y=>this._polymorphicSinh(y)),"FlowGraphSinhBlock",y)}_polymorphicSinh(y){return K(y,Math.sinh)}}(0,l.f)("FlowGraphSinhBlock",hy);class Iy extends I.b{constructor(y){super(w.e,w.e,(y=>this._polymorphicCosh(y)),"FlowGraphCoshBlock",y)}_polymorphicCosh(y){return K(y,Math.cosh)}}(0,l.f)("FlowGraphCoshBlock",Iy);class qy extends I.b{constructor(y){super(w.e,w.e,(y=>this._polymorphicTanh(y)),"FlowGraphTanhBlock",y)}_polymorphicTanh(y){return K(y,Math.tanh)}}(0,l.f)("FlowGraphTanhBlock",qy);class oy extends I.b{constructor(y){super(w.e,w.s,(y=>this._polymorphicAsinh(y)),"FlowGraphASinhBlock",y)}_polymorphicAsinh(y){return K(y,Math.asinh)}}(0,l.f)("FlowGraphASinhBlock",oy);class Oy extends I.b{constructor(y){super(w.e,w.s,(y=>this._polymorphicAcosh(y)),"FlowGraphACoshBlock",y)}_polymorphicAcosh(y){return K(y,Math.acosh)}}(0,l.f)("FlowGraphACoshBlock",Oy);class Ly extends I.b{constructor(y){super(w.e,w.s,(y=>this._polymorphicAtanh(y)),"FlowGraphATanhBlock",y)}_polymorphicAtanh(y){return K(y,Math.atanh)}}(0,l.f)("FlowGraphATanhBlock",Ly);class iy extends I.b{constructor(y){super(w.e,w.s,(y=>this._polymorphicExp(y)),"FlowGraphExponentialBlock",y)}_polymorphicExp(y){return K(y,Math.exp)}}(0,l.f)("FlowGraphExponentialBlock",iy);class Hy extends I.b{constructor(y){super(w.e,w.s,(y=>this._polymorphicLog(y)),"FlowGraphLogBlock",y)}_polymorphicLog(y){return K(y,Math.log)}}(0,l.f)("FlowGraphLogBlock",Hy);class Py extends I.b{constructor(y){super(w.e,w.s,(y=>this._polymorphicLog2(y)),"FlowGraphLog2Block",y)}_polymorphicLog2(y){return K(y,Math.log2)}}(0,l.f)("FlowGraphLog2Block",Py);class Dy extends I.b{constructor(y){super(w.e,w.s,(y=>this._polymorphicLog10(y)),"FlowGraphLog10Block",y)}_polymorphicLog10(y){return K(y,Math.log10)}}(0,l.f)("FlowGraphLog10Block",Dy);class ty extends I.b{constructor(y){super(w.e,w.s,(y=>this._polymorphicSqrt(y)),"FlowGraphSquareRootBlock",y)}_polymorphicSqrt(y){return K(y,Math.sqrt)}}(0,l.f)("FlowGraphSquareRootBlock",ty);class sy extends I.b{constructor(y){super(w.e,w.s,(y=>this._polymorphicCubeRoot(y)),"FlowGraphCubeRootBlock",y)}_polymorphicCubeRoot(y){return K(y,Math.cbrt)}}(0,l.f)("FlowGraphCubeRootBlock",sy);class By extends N.c{constructor(y){super(w.e,w.s,w.s,((y,c)=>this._polymorphicPow(y,c)),"FlowGraphPowerBlock",y)}_polymorphicPow(y,c){return G(y,c,Math.pow)}}(0,l.f)("FlowGraphPowerBlock",By);class Xy extends I.b{constructor(y){super((0,w.S)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),(0,w.S)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),(y=>"boolean"===typeof y?!y:"number"===typeof y?~y:new o.b(~y.value)),"FlowGraphBitwiseNotBlock",y)}}(0,l.f)("FlowGraphBitwiseNotBlock",Xy);class Cy extends N.c{constructor(y){super((0,w.S)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),(0,w.S)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),(0,w.S)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),((y,c)=>{if("boolean"===typeof y&&"boolean"===typeof c)return y&&c;if("number"===typeof y&&"number"===typeof c)return y&c;if("object"===typeof y&&"object"===typeof c)return new o.b(y.value&c.value);throw new Error(`Cannot perform bitwise AND on ${y} and ${c}`)}),"FlowGraphBitwiseAndBlock",y)}}(0,l.f)("FlowGraphBitwiseAndBlock",Cy);class Ky extends N.c{constructor(y){super((0,w.S)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),(0,w.S)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),(0,w.S)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),((y,c)=>{if("boolean"===typeof y&&"boolean"===typeof c)return y||c;if("number"===typeof y&&"number"===typeof c)return y|c;if("object"===typeof y&&"object"===typeof c)return new o.b(y.value|c.value);throw new Error(`Cannot perform bitwise OR on ${y} and ${c}`)}),"FlowGraphBitwiseOrBlock",y)}}(0,l.f)("FlowGraphBitwiseOrBlock",Ky);class mc extends N.c{constructor(y){super((0,w.S)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),(0,w.S)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),(0,w.S)((null===y||void 0===y?void 0:y.valueType)||"FlowGraphInteger"),((y,c)=>{if("boolean"===typeof y&&"boolean"===typeof c)return y!==c;if("number"===typeof y&&"number"===typeof c)return y^c;if("object"===typeof y&&"object"===typeof c)return new o.b(y.value^c.value);throw new Error(`Cannot perform bitwise XOR on ${y} and ${c}`)}),"FlowGraphBitwiseXorBlock",y)}}(0,l.f)("FlowGraphBitwiseXorBlock",mc);class Ty extends N.c{constructor(y){super(w.j,w.j,w.j,((y,c)=>new o.b(y.value<<c.value)),"FlowGraphBitwiseLeftShiftBlock",y)}}(0,l.f)("FlowGraphBitwiseLeftShiftBlock",Ty);class zy extends N.c{constructor(y){super(w.j,w.j,w.j,((y,c)=>new o.b(y.value>>c.value)),"FlowGraphBitwiseRightShiftBlock",y)}}(0,l.f)("FlowGraphBitwiseRightShiftBlock",zy);class Sy extends I.b{constructor(y){super(w.j,w.j,(y=>new o.b(Math.clz32(y.value))),"FlowGraphLeadingZerosBlock",y)}}(0,l.f)("FlowGraphLeadingZerosBlock",Sy);class My extends I.b{constructor(y){super(w.j,w.j,(y=>new o.b(y.value?31-Math.clz32(y.value&-y.value):32)),"FlowGraphTrailingZerosBlock",y)}}(0,l.f)("FlowGraphTrailingZerosBlock",My);class ky extends I.b{constructor(y){super(w.j,w.j,(y=>new o.b(function(y){let c=0;for(;y;)c+=1&y,y>>=1;return c}(y.value))),"FlowGraphOneBitsCounterBlock",y)}}(0,l.f)("FlowGraphOneBitsCounterBlock",ky)},15500:(y,c,A)=>{A.d(c,{c:()=>w});var l=A(15507);class w extends l.d{constructor(y,c,A,l,w,N){super(A,N),this._operation=l,this._className=w,this.a=this.registerDataInput("a",y),this.b=this.registerDataInput("b",c)}_doOperation(y){const c=this.a.getValue(y),A=this.b.getValue(y);return this._operation(c,A)}getClassName(){return this._className}}},15507:(y,c,A)=>{A.d(c,{d:()=>W});var l=A(14010),w=A(13993);const N="cachedOperationValue",p="cachedExecutionId";class W extends l.e{constructor(y,c){super(c),this.value=this.registerDataOutput("value",y),this.isValid=this.registerDataOutput("isValid",w.f)}_updateOutputs(y){const c=y._getExecutionVariable(this,p,-1),A=y._getExecutionVariable(this,N,null);if(void 0!==A&&null!==A&&c===y.executionId)this.isValid.setValue(!0,y),this.value.setValue(A,y);else try{const c=this._doOperation(y);if(void 0===c||null===c)return void this.isValid.setValue(!1,y);y._setExecutionVariable(this,N,c),y._setExecutionVariable(this,p,y.executionId),this.value.setValue(c,y),this.isValid.setValue(!0,y)}catch(l){this.isValid.setValue(!1,y)}}}},15516:(y,c,A)=>{A.d(c,{b:()=>w});var l=A(15507);class w extends l.d{constructor(y,c,A,l,w){super(c,w),this._operation=A,this._className=l,this.a=this.registerDataInput("a",y)}_doOperation(y){return this._operation(this.a.getValue(y))}getClassName(){return this._className}}}}]);