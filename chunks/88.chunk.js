"use strict";(self.fyqbdzs5tyo=self.fyqbdzs5tyo||[]).push([[88],{14354:(V,I,A)=>{A.r(I),A.d(I,{FlowGraphAbsBlock:()=>e,FlowGraphAcosBlock:()=>EV,FlowGraphAcoshBlock:()=>JV,FlowGraphAddBlock:()=>w,FlowGraphAsinBlock:()=>FV,FlowGraphAsinhBlock:()=>PV,FlowGraphAtan2Block:()=>HV,FlowGraphAtanBlock:()=>YV,FlowGraphAtanhBlock:()=>GV,FlowGraphBitwiseAndBlock:()=>mV,FlowGraphBitwiseLeftShiftBlock:()=>SV,FlowGraphBitwiseNotBlock:()=>zV,FlowGraphBitwiseOrBlock:()=>sV,FlowGraphBitwiseRightShiftBlock:()=>QV,FlowGraphBitwiseXorBlock:()=>eV,FlowGraphCeilBlock:()=>r,FlowGraphClampBlock:()=>v,FlowGraphCosBlock:()=>AV,FlowGraphCoshBlock:()=>bV,FlowGraphCubeRootBlock:()=>oV,FlowGraphDegToRadBlock:()=>n,FlowGraphDivideBlock:()=>W,FlowGraphEBlock:()=>o,FlowGraphEqualityBlock:()=>T,FlowGraphExpBlock:()=>wV,FlowGraphFloorBlock:()=>h,FlowGraphFractionBlock:()=>x,FlowGraphGreaterThanBlock:()=>Z,FlowGraphGreaterThanOrEqualBlock:()=>a,FlowGraphInfBlock:()=>z,FlowGraphIsInfinityBlock:()=>U,FlowGraphIsNanBlock:()=>k,FlowGraphLeadingZerosBlock:()=>hV,FlowGraphLessThanBlock:()=>D,FlowGraphLessThanOrEqualBlock:()=>O,FlowGraphLog10Block:()=>WV,FlowGraphLog2Block:()=>uV,FlowGraphLogBlock:()=>tV,FlowGraphMathInterpolationBlock:()=>j,FlowGraphMaxBlock:()=>l,FlowGraphMinBlock:()=>N,FlowGraphModuloBlock:()=>q,FlowGraphMultiplyBlock:()=>u,FlowGraphNaNBlock:()=>m,FlowGraphNegationBlock:()=>f,FlowGraphOneBitsCounterBlock:()=>MV,FlowGraphPiBlock:()=>L,FlowGraphPowerBlock:()=>LV,FlowGraphRadToDegBlock:()=>VV,FlowGraphRandomBlock:()=>g,FlowGraphRoundBlock:()=>M,FlowGraphSaturateBlock:()=>K,FlowGraphSignBlock:()=>S,FlowGraphSinBlock:()=>IV,FlowGraphSinhBlock:()=>cV,FlowGraphSquareRootBlock:()=>gV,FlowGraphSubtractBlock:()=>t,FlowGraphTanBlock:()=>BV,FlowGraphTanhBlock:()=>XV,FlowGraphTrailingZerosBlock:()=>rV,FlowGraphTruncBlock:()=>Q});var B=A(11189),F=A(12954),E=A(14360),Y=A(14369);class H extends Y.d{constructor(V,I,A,B){super(V,B),this._operation=I,this._className=A}_doOperation(V){return this._operation(V)}getClassName(){return this._className}}var c=A(11231),b=A(14373);class X extends Y.d{constructor(V,I,A,B,F,E,Y){super(B,Y),this._operation=F,this._className=E,this.a=this.registerDataInput("a",V),this.b=this.registerDataInput("b",I),this.c=this.registerDataInput("c",A)}_doOperation(V){return this._operation(this.a.getValue(V),this.b.getValue(V),this.c.getValue(V))}getClassName(){return this._className}}var P=A(12948),J=A(12963),G=A(12989);class w extends E.d{constructor(V){super((0,F.P)(null===V||void 0===V?void 0:V.type),(0,F.P)(null===V||void 0===V?void 0:V.type),(0,F.P)(null===V||void 0===V?void 0:V.type),((V,I)=>this._polymorphicAdd(V,I)),"FlowGraphAddBlock",V)}_polymorphicAdd(V,I){const A=(0,G.n)(V),B=(0,G.n)(I);if((0,G.j)(A,B)||(0,G.h)(A,B)||(0,G.e)(A,B))return V.add(I);if("Quaternion"===A||"Vector4"===B)return new c.Vector4(V.x,V.y,V.z,V.w).addInPlace(I);if("Vector4"===A||"Quaternion"===B)return V.add(I);var F;if(null!==(F=this.config)&&void 0!==F&&F.preventIntegerFloatArithmetic&&typeof V!==typeof I)throw new Error("Cannot add different types of numbers.");return(0,G.s)(V)+(0,G.s)(I)}}(0,B.e)("FlowGraphAddBlock",w);class t extends E.d{constructor(V){super((0,F.P)(null===V||void 0===V?void 0:V.type),(0,F.P)(null===V||void 0===V?void 0:V.type),(0,F.P)(null===V||void 0===V?void 0:V.type),((V,I)=>this._polymorphicSubtract(V,I)),"FlowGraphSubtractBlock",V)}_polymorphicSubtract(V,I){const A=(0,G.n)(V),B=(0,G.n)(I);if((0,G.j)(A,B)||(0,G.e)(A,B)||(0,G.h)(A,B))return V.uI(I);if("Quaternion"===A||"Vector4"===B)return new c.Vector4(V.x,V.y,V.z,V.w).wJ(I);if("Vector4"===A||"Quaternion"===B)return V.uI(I);var F;if(null!==(F=this.config)&&void 0!==F&&F.preventIntegerFloatArithmetic&&typeof V!==typeof I)throw new Error("Cannot add different types of numbers.");return(0,G.s)(V)-(0,G.s)(I)}}(0,B.e)("FlowGraphSubtractBlock",t);class u extends E.d{constructor(V){super((0,F.P)(null===V||void 0===V?void 0:V.type),(0,F.P)(null===V||void 0===V?void 0:V.type),(0,F.P)(null===V||void 0===V?void 0:V.type),((V,I)=>this._polymorphicMultiply(V,I)),"FlowGraphMultiplyBlock",V)}_polymorphicMultiply(V,I){const A=(0,G.n)(V),B=(0,G.n)(I);if((0,G.j)(A,B)||(0,G.e)(A,B))return V.multiply(I);if("Quaternion"===A||"Vector4"===B)return new c.Vector4(V.x,V.y,V.z,V.w).multiplyInPlace(I);if("Vector4"===A||"Quaternion"===B)return V.multiply(I);if((0,G.h)(A,B)){var F;if(null!==(F=this.config)&&void 0!==F&&F.useMatrixPerComponent){const B=V.m;for(let V=0;V<B.length;V++)B[V]*=I.m[V];return"Matrix2D"===A?new J.d(B):"Matrix3D"===A?new J.e(B):c.Matrix.LI(B)}return I.multiply(V)}var E;if(null!==(E=this.config)&&void 0!==E&&E.preventIntegerFloatArithmetic&&typeof V!==typeof I)throw new Error("Cannot add different types of numbers.");return(0,G.s)(V)*(0,G.s)(I)}}(0,B.e)("FlowGraphMultiplyBlock",u);class W extends E.d{constructor(V){super((0,F.P)(null===V||void 0===V?void 0:V.type),(0,F.P)(null===V||void 0===V?void 0:V.type),(0,F.P)(null===V||void 0===V?void 0:V.type),((V,I)=>this._polymorphicDivide(V,I)),"FlowGraphDivideBlock",V)}_polymorphicDivide(V,I){const A=(0,G.n)(V),B=(0,G.n)(I);if((0,G.j)(A,B)||(0,G.e)(A,B))return V.divide(I);if("Quaternion"===A||"Quaternion"===B){const A=V.clone();return A.x/=I.x,A.y/=I.y,A.z/=I.z,A.w/=I.w,A}if("Quaternion"===A||"Vector4"===B)return new c.Vector4(V.x,V.y,V.z,V.w).divideInPlace(I);if("Vector4"===A||"Quaternion"===B)return V.divide(I);if((0,G.h)(A,B)){var F;if(null!==(F=this.config)&&void 0!==F&&F.useMatrixPerComponent){const B=V.m;for(let V=0;V<B.length;V++)B[V]/=I.m[V];return"Matrix2D"===A?new J.d(B):"Matrix3D"===A?new J.e(B):c.Matrix.LI(B)}return V.divide(I)}var E;if(null!==(E=this.config)&&void 0!==E&&E.preventIntegerFloatArithmetic&&typeof V!==typeof I)throw new Error("Cannot add different types of numbers.");return(0,G.s)(V)/(0,G.s)(I)}}(0,B.e)("FlowGraphDivideBlock",W);class g extends H{constructor(V){super(F.v,(V=>this._random(V)),"FlowGraphRandomBlock",V),this.min=this.registerDataInput("min",F.v,(null===V||void 0===V?void 0:V.min)??0),this.max=this.registerDataInput("max",F.v,(null===V||void 0===V?void 0:V.max)??1),null!==V&&void 0!==V&&V.seed&&(this._seed=V.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const V=1e4*Math.sin(this._seed++);return V-Math.floor(V)}return Math.random()}_random(V){const I=this.min.getValue(V),A=this.max.getValue(V);return this._getRandomValue()*(A-I)+I}}(0,B.e)("FlowGraphRandomBlock",g);class o extends H{constructor(V){super(F.v,(()=>Math.E),"FlowGraphEBlock",V)}}(0,B.e)("FlowGraphEBlock",o);class L extends H{constructor(V){super(F.v,(()=>Math.PI),"FlowGraphPIBlock",V)}}(0,B.e)("FlowGraphPIBlock",L);class z extends H{constructor(V){super(F.v,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",V)}}(0,B.e)("FlowGraphInfBlock",z);class m extends H{constructor(V){super(F.v,(()=>Number.NaN),"FlowGraphNaNBlock",V)}}function s(V,I){switch((0,G.n)(V)){case"FlowGraphInteger":return new P.e(I(V.value));case"Vector2":return new c.Vector2(I(V.x),I(V.y));case"tI":return new c.tI(I(V.x),I(V.y),I(V.z));case"Vector4":return new c.Vector4(I(V.x),I(V.y),I(V.z),I(V.w));case"Quaternion":return new c.Quaternion(I(V.x),I(V.y),I(V.z),I(V.w));case"Matrix":return c.Matrix.LI(V.m.map(I));case"Matrix2D":return new J.d(V.m.map(I));case"Matrix3D":return new J.e(V.m.map(I));default:return I(V)}}(0,B.e)("FlowGraphNaNBlock",m);class e extends b.e{constructor(V){super(F.v,F.v,(V=>this._polymorphicAbs(V)),"FlowGraphAbsBlock",V)}_polymorphicAbs(V){return s(V,Math.abs)}}(0,B.e)("FlowGraphAbsBlock",e);class S extends b.e{constructor(V){super(F.v,F.v,(V=>this._polymorphicSign(V)),"FlowGraphSignBlock",V)}_polymorphicSign(V){return s(V,Math.sign)}}(0,B.e)("FlowGraphSignBlock",S);class Q extends b.e{constructor(V){super(F.v,F.v,(V=>this._polymorphicTrunc(V)),"FlowGraphTruncBlock",V)}_polymorphicTrunc(V){return s(V,Math.trunc)}}(0,B.e)("FlowGraphTruncBlock",Q);class h extends b.e{constructor(V){super(F.v,F.v,(V=>this._polymorphicFloor(V)),"FlowGraphFloorBlock",V)}_polymorphicFloor(V){return s(V,Math.floor)}}(0,B.e)("FlowGraphFloorBlock",h);class r extends b.e{constructor(V){super(F.e,F.e,(V=>this._polymorphicCeiling(V)),"FlowGraphCeilBlock",V)}_polymorphicCeiling(V){return s(V,Math.ceil)}}(0,B.e)("FlowGraphCeilBlock",r);class M extends b.e{constructor(V){super(F.e,F.e,(V=>this._polymorphicRound(V)),"FlowGraphRoundBlock",V)}_polymorphicRound(V){return s(V,(V=>{var I;return V<0&&null!==(I=this.config)&&void 0!==I&&I.roundHalfAwayFromZero?-Math.round(-V):Math.round(V)}))}}(0,B.e)("FlowGraphRoundBlock",M);class x extends b.e{constructor(V){super(F.e,F.e,(V=>this._polymorphicFraction(V)),"FlowGraphFractBlock",V)}_polymorphicFraction(V){return s(V,(V=>V-Math.floor(V)))}}(0,B.e)("FlowGraphFractBlock",x);class f extends b.e{constructor(V){super(F.e,F.e,(V=>this._polymorphicNeg(V)),"FlowGraphNegationBlock",V)}_polymorphicNeg(V){return s(V,(V=>-V))}}function R(V,I,A){switch((0,G.n)(V)){case"FlowGraphInteger":return new P.e(A(V.value,I.value));case"Vector2":return new c.Vector2(A(V.x,I.x),A(V.y,I.y));case"tI":return new c.tI(A(V.x,I.x),A(V.y,I.y),A(V.z,I.z));case"Vector4":return new c.Vector4(A(V.x,I.x),A(V.y,I.y),A(V.z,I.z),A(V.w,I.w));case"Quaternion":return new c.Quaternion(A(V.x,I.x),A(V.y,I.y),A(V.z,I.z),A(V.w,I.w));case"Matrix":return c.Matrix.LI(V.m.map(((V,B)=>A(V,I.m[B]))));case"Matrix2D":return new J.d(V.m.map(((V,B)=>A(V,I.m[B]))));case"Matrix3D":return new J.e(V.m.map(((V,B)=>A(V,I.m[B]))));default:return A((0,G.s)(V),(0,G.s)(I))}}(0,B.e)("FlowGraphNegationBlock",f);class q extends E.d{constructor(V){super(F.e,F.e,F.e,((V,I)=>this._polymorphicRemainder(V,I)),"FlowGraphModuloBlock",V)}_polymorphicRemainder(V,I){return R(V,I,((V,I)=>V%I))}}(0,B.e)("FlowGraphModuloBlock",q);class N extends E.d{constructor(V){super(F.e,F.e,F.e,((V,I)=>this._polymorphicMin(V,I)),"FlowGraphMinBlock",V)}_polymorphicMin(V,I){return R(V,I,Math.min)}}(0,B.e)("FlowGraphMinBlock",N);class l extends E.d{constructor(V){super(F.e,F.e,F.e,((V,I)=>this._polymorphicMax(V,I)),"FlowGraphMaxBlock",V)}_polymorphicMax(V,I){return R(V,I,Math.max)}}function i(V,I,A){return Math.min(Math.max(V,Math.min(I,A)),Math.max(I,A))}function y(V,I,A,B){switch((0,G.n)(V)){case"FlowGraphInteger":return new P.e(B(V.value,I.value,A.value));case"Vector2":return new c.Vector2(B(V.x,I.x,A.x),B(V.y,I.y,A.y));case"tI":return new c.tI(B(V.x,I.x,A.x),B(V.y,I.y,A.y),B(V.z,I.z,A.z));case"Vector4":return new c.Vector4(B(V.x,I.x,A.x),B(V.y,I.y,A.y),B(V.z,I.z,A.z),B(V.w,I.w,A.w));case"Quaternion":return new c.Quaternion(B(V.x,I.x,A.x),B(V.y,I.y,A.y),B(V.z,I.z,A.z),B(V.w,I.w,A.w));case"Matrix":return c.Matrix.LI(V.m.map(((V,F)=>B(V,I.m[F],A.m[F]))));case"Matrix2D":return new J.d(V.m.map(((V,F)=>B(V,I.m[F],A.m[F]))));case"Matrix3D":return new J.e(V.m.map(((V,F)=>B(V,I.m[F],A.m[F]))));default:return B((0,G.s)(V),(0,G.s)(I),(0,G.s)(A))}}(0,B.e)("FlowGraphMaxBlock",l);class v extends X{constructor(V){super(F.e,F.e,F.e,F.e,((V,I,A)=>this._polymorphicClamp(V,I,A)),"FlowGraphClampBlock",V)}_polymorphicClamp(V,I,A){return y(V,I,A,i)}}function C(V){return Math.min(Math.max(V,0),1)}(0,B.e)("FlowGraphClampBlock",v);class K extends b.e{constructor(V){super(F.e,F.e,(V=>this._polymorphicSaturate(V)),"FlowGraphSaturateBlock",V)}_polymorphicSaturate(V){return s(V,C)}}function p(V,I,A){return(1-A)*V+A*I}(0,B.e)("FlowGraphSaturateBlock",K);class j extends X{constructor(V){super(F.e,F.e,F.e,F.e,((V,I,A)=>this._polymorphicInterpolate(V,I,A)),"FlowGraphMathInterpolationBlock",V)}_polymorphicInterpolate(V,I,A){return y(V,I,A,p)}}(0,B.e)("FlowGraphMathInterpolationBlock",j);class T extends E.d{constructor(V){super(F.e,F.e,F.g,((V,I)=>this._polymorphicEq(V,I)),"FlowGraphEqualityBlock",V)}_polymorphicEq(V,I){const A=(0,G.n)(V),B=(0,G.n)(I);return typeof V===typeof I&&((0,G.j)(A,B)||(0,G.h)(A,B)||(0,G.e)(A,B)?V.equals(I):V===I)}}function d(V,I,A){if((0,G.u)(V)&&(0,G.u)(I))return A((0,G.s)(V),(0,G.s)(I));throw new Error(`Cannot compare ${V} and ${I}`)}(0,B.e)("FlowGraphEqualityBlock",T);class D extends E.d{constructor(V){super(F.e,F.e,F.g,((V,I)=>this._polymorphicLessThan(V,I)),"FlowGraphLessThanBlock",V)}_polymorphicLessThan(V,I){return d(V,I,((V,I)=>V<I))}}(0,B.e)("FlowGraphLessThanBlock",D);class O extends E.d{constructor(V){super(F.e,F.e,F.g,((V,I)=>this._polymorphicLessThanOrEqual(V,I)),"FlowGraphLessThanOrEqualBlock",V)}_polymorphicLessThanOrEqual(V,I){return d(V,I,((V,I)=>V<=I))}}(0,B.e)("FlowGraphLessThanOrEqualBlock",O);class Z extends E.d{constructor(V){super(F.e,F.e,F.g,((V,I)=>this._polymorphicGreaterThan(V,I)),"FlowGraphGreaterThanBlock",V)}_polymorphicGreaterThan(V,I){return d(V,I,((V,I)=>V>I))}}(0,B.e)("FlowGraphGreaterThanBlock",Z);class a extends E.d{constructor(V){super(F.e,F.e,F.g,((V,I)=>this._polymorphicGreaterThanOrEqual(V,I)),"FlowGraphGreaterThanOrEqualBlock",V)}_polymorphicGreaterThanOrEqual(V,I){return d(V,I,((V,I)=>V>=I))}}(0,B.e)("FlowGraphGreaterThanOrEqualBlock",a);class k extends b.e{constructor(V){super(F.e,F.g,(V=>this._polymorphicIsNan(V)),"FlowGraphIsNaNBlock",V)}_polymorphicIsNan(V){if((0,G.u)(V,!0))return isNaN((0,G.s)(V));throw new Error(`Cannot get NaN of ${V}`)}}(0,B.e)("FlowGraphIsNaNBlock",k);class U extends b.e{constructor(V){super(F.e,F.g,(V=>this._polymorphicIsInf(V)),"FlowGraphIsInfBlock",V)}_polymorphicIsInf(V){if((0,G.u)(V))return!isFinite((0,G.s)(V));throw new Error(`Cannot get isInf of ${V}`)}}(0,B.e)("FlowGraphIsInfBlock",U);class n extends b.e{constructor(V){super(F.e,F.e,(V=>this._polymorphicDegToRad(V)),"FlowGraphDegToRadBlock",V)}_degToRad(V){return V*Math.PI/180}_polymorphicDegToRad(V){return s(V,this._degToRad)}}(0,B.e)("FlowGraphDegToRadBlock",n);class VV extends b.e{constructor(V){super(F.e,F.e,(V=>this._polymorphicRadToDeg(V)),"FlowGraphRadToDegBlock",V)}_radToDeg(V){return 180*V/Math.PI}_polymorphicRadToDeg(V){return s(V,this._radToDeg)}}(0,B.e)("FlowGraphRadToDegBlock",VV);class IV extends b.e{constructor(V){super(F.v,F.v,(V=>this._polymorphicSin(V)),"FlowGraphSinBlock",V)}_polymorphicSin(V){return s(V,Math.sin)}}class AV extends b.e{constructor(V){super(F.v,F.v,(V=>this._polymorphicCos(V)),"FlowGraphCosBlock",V)}_polymorphicCos(V){return s(V,Math.cos)}}class BV extends b.e{constructor(V){super(F.v,F.v,(V=>this._polymorphicTan(V)),"FlowGraphTanBlock",V)}_polymorphicTan(V){return s(V,Math.tan)}}class FV extends b.e{constructor(V){super(F.v,F.v,(V=>this._polymorphicAsin(V)),"FlowGraphASinBlock",V)}_polymorphicAsin(V){return s(V,Math.asin)}}(0,B.e)("FlowGraphASinBlock",FV);class EV extends b.e{constructor(V){super(F.v,F.v,(V=>this._polymorphicAcos(V)),"FlowGraphACosBlock",V)}_polymorphicAcos(V){return s(V,Math.acos)}}(0,B.e)("FlowGraphACosBlock",EV);class YV extends b.e{constructor(V){super(F.v,F.v,(V=>this._polymorphicAtan(V)),"FlowGraphATanBlock",V)}_polymorphicAtan(V){return s(V,Math.atan)}}(0,B.e)("FlowGraphATanBlock",YV);class HV extends E.d{constructor(V){super(F.e,F.e,F.e,((V,I)=>this._polymorphicAtan2(V,I)),"FlowGraphATan2Block",V)}_polymorphicAtan2(V,I){return R(V,I,Math.atan2)}}(0,B.e)("FlowGraphATan2Block",HV);class cV extends b.e{constructor(V){super(F.e,F.e,(V=>this._polymorphicSinh(V)),"FlowGraphSinhBlock",V)}_polymorphicSinh(V){return s(V,Math.sinh)}}(0,B.e)("FlowGraphSinhBlock",cV);class bV extends b.e{constructor(V){super(F.e,F.e,(V=>this._polymorphicCosh(V)),"FlowGraphCoshBlock",V)}_polymorphicCosh(V){return s(V,Math.cosh)}}(0,B.e)("FlowGraphCoshBlock",bV);class XV extends b.e{constructor(V){super(F.e,F.e,(V=>this._polymorphicTanh(V)),"FlowGraphTanhBlock",V)}_polymorphicTanh(V){return s(V,Math.tanh)}}(0,B.e)("FlowGraphTanhBlock",XV);class PV extends b.e{constructor(V){super(F.e,F.v,(V=>this._polymorphicAsinh(V)),"FlowGraphASinhBlock",V)}_polymorphicAsinh(V){return s(V,Math.asinh)}}(0,B.e)("FlowGraphASinhBlock",PV);class JV extends b.e{constructor(V){super(F.e,F.v,(V=>this._polymorphicAcosh(V)),"FlowGraphACoshBlock",V)}_polymorphicAcosh(V){return s(V,Math.acosh)}}(0,B.e)("FlowGraphACoshBlock",JV);class GV extends b.e{constructor(V){super(F.e,F.v,(V=>this._polymorphicAtanh(V)),"FlowGraphATanhBlock",V)}_polymorphicAtanh(V){return s(V,Math.atanh)}}(0,B.e)("FlowGraphATanhBlock",GV);class wV extends b.e{constructor(V){super(F.e,F.v,(V=>this._polymorphicExp(V)),"FlowGraphExponentialBlock",V)}_polymorphicExp(V){return s(V,Math.exp)}}(0,B.e)("FlowGraphExponentialBlock",wV);class tV extends b.e{constructor(V){super(F.e,F.v,(V=>this._polymorphicLog(V)),"FlowGraphLogBlock",V)}_polymorphicLog(V){return s(V,Math.log)}}(0,B.e)("FlowGraphLogBlock",tV);class uV extends b.e{constructor(V){super(F.e,F.v,(V=>this._polymorphicLog2(V)),"FlowGraphLog2Block",V)}_polymorphicLog2(V){return s(V,Math.log2)}}(0,B.e)("FlowGraphLog2Block",uV);class WV extends b.e{constructor(V){super(F.e,F.v,(V=>this._polymorphicLog10(V)),"FlowGraphLog10Block",V)}_polymorphicLog10(V){return s(V,Math.log10)}}(0,B.e)("FlowGraphLog10Block",WV);class gV extends b.e{constructor(V){super(F.e,F.v,(V=>this._polymorphicSqrt(V)),"FlowGraphSquareRootBlock",V)}_polymorphicSqrt(V){return s(V,Math.sqrt)}}(0,B.e)("FlowGraphSquareRootBlock",gV);class oV extends b.e{constructor(V){super(F.e,F.v,(V=>this._polymorphicCubeRoot(V)),"FlowGraphCubeRootBlock",V)}_polymorphicCubeRoot(V){return s(V,Math.cbrt)}}(0,B.e)("FlowGraphCubeRootBlock",oV);class LV extends E.d{constructor(V){super(F.e,F.v,F.v,((V,I)=>this._polymorphicPow(V,I)),"FlowGraphPowerBlock",V)}_polymorphicPow(V,I){return R(V,I,Math.pow)}}(0,B.e)("FlowGraphPowerBlock",LV);class zV extends b.e{constructor(V){super((0,F.P)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,F.P)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(V=>"boolean"===typeof V?!V:"number"===typeof V?~V:new P.e(~V.value)),"FlowGraphBitwiseNotBlock",V)}}(0,B.e)("FlowGraphBitwiseNotBlock",zV);class mV extends E.d{constructor(V){super((0,F.P)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,F.P)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,F.P)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),((V,I)=>{if("boolean"===typeof V&&"boolean"===typeof I)return V&&I;if("number"===typeof V&&"number"===typeof I)return V&I;if("object"===typeof V&&"object"===typeof I)return new P.e(V.value&I.value);throw new Error(`Cannot perform bitwise AND on ${V} and ${I}`)}),"FlowGraphBitwiseAndBlock",V)}}(0,B.e)("FlowGraphBitwiseAndBlock",mV);class sV extends E.d{constructor(V){super((0,F.P)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,F.P)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,F.P)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),((V,I)=>{if("boolean"===typeof V&&"boolean"===typeof I)return V||I;if("number"===typeof V&&"number"===typeof I)return V|I;if("object"===typeof V&&"object"===typeof I)return new P.e(V.value|I.value);throw new Error(`Cannot perform bitwise OR on ${V} and ${I}`)}),"FlowGraphBitwiseOrBlock",V)}}(0,B.e)("FlowGraphBitwiseOrBlock",sV);class eV extends E.d{constructor(V){super((0,F.P)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,F.P)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,F.P)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),((V,I)=>{if("boolean"===typeof V&&"boolean"===typeof I)return V!==I;if("number"===typeof V&&"number"===typeof I)return V^I;if("object"===typeof V&&"object"===typeof I)return new P.e(V.value^I.value);throw new Error(`Cannot perform bitwise XOR on ${V} and ${I}`)}),"FlowGraphBitwiseXorBlock",V)}}(0,B.e)("FlowGraphBitwiseXorBlock",eV);class SV extends E.d{constructor(V){super(F.i,F.i,F.i,((V,I)=>new P.e(V.value<<I.value)),"FlowGraphBitwiseLeftShiftBlock",V)}}(0,B.e)("FlowGraphBitwiseLeftShiftBlock",SV);class QV extends E.d{constructor(V){super(F.i,F.i,F.i,((V,I)=>new P.e(V.value>>I.value)),"FlowGraphBitwiseRightShiftBlock",V)}}(0,B.e)("FlowGraphBitwiseRightShiftBlock",QV);class hV extends b.e{constructor(V){super(F.i,F.i,(V=>new P.e(Math.clz32(V.value))),"FlowGraphLeadingZerosBlock",V)}}(0,B.e)("FlowGraphLeadingZerosBlock",hV);class rV extends b.e{constructor(V){super(F.i,F.i,(V=>new P.e(V.value?31-Math.clz32(V.value&-V.value):32)),"FlowGraphTrailingZerosBlock",V)}}(0,B.e)("FlowGraphTrailingZerosBlock",rV);class MV extends b.e{constructor(V){super(F.i,F.i,(V=>new P.e(function(V){let I=0;for(;V;)I+=1&V,V>>=1;return I}(V.value))),"FlowGraphOneBitsCounterBlock",V)}}(0,B.e)("FlowGraphOneBitsCounterBlock",MV)},14360:(V,I,A)=>{A.d(I,{d:()=>F});var B=A(14369);class F extends B.d{constructor(V,I,A,B,F,E){super(A,E),this._operation=B,this._className=F,this.a=this.registerDataInput("a",V),this.b=this.registerDataInput("b",I)}_doOperation(V){const I=this.a.getValue(V),A=this.b.getValue(V);return this._operation(I,A)}getClassName(){return this._className}}},14369:(V,I,A)=>{A.d(I,{d:()=>H});var B=A(12979),F=A(12954);const E="cachedOperationValue",Y="cachedExecutionId";class H extends B.d{constructor(V,I){super(I),this.value=this.registerDataOutput("value",V),this.isValid=this.registerDataOutput("isValid",F.g)}_updateOutputs(V){const I=V._getExecutionVariable(this,Y,-1),A=V._getExecutionVariable(this,E,null);if(void 0!==A&&null!==A&&I===V.executionId)this.isValid.setValue(!0,V),this.value.setValue(A,V);else try{const I=this._doOperation(V);if(void 0===I||null===I)return void this.isValid.setValue(!1,V);V._setExecutionVariable(this,E,I),V._setExecutionVariable(this,Y,V.executionId),this.value.setValue(I,V),this.isValid.setValue(!0,V)}catch(B){this.isValid.setValue(!1,V)}}}},14373:(V,I,A)=>{A.d(I,{e:()=>F});var B=A(14369);class F extends B.d{constructor(V,I,A,B,F){super(I,F),this._operation=A,this._className=B,this.a=this.registerDataInput("a",V)}_doOperation(V){return this._operation(this.a.getValue(V))}getClassName(){return this._className}}}}]);