"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[88],{14231:(t,q,S)=>{S.r(q),S.d(q,{FlowGraphMultiGateBlock:()=>r});var o=S(622),B=S(12942),z=S(12927),L=S(12922);class r extends B.d{constructor(t){super(t),this.config=t,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",z.h,new L.e(-1)),this.setNumberOfOutputSignals(null===t||void 0===t?void 0:t.outputSignalCount)}_getNextIndex(t){if(t.includes(!1)||this.config.isLoop&&t.fill(!1),this.config.isRandom){const q=t.map(((t,q)=>t?-1:q)).filter((t=>-1!==t));return q.length?q[Math.floor(Math.random()*q.length)]:-1}return t.indexOf(!1)}setNumberOfOutputSignals(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>t;){const t=this.outputSignals.pop();t&&(t.disconnectFromAll(),this._unregisterSignalOutput(t.name))}for(;this.outputSignals.length<t;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(t,q){if(t._hasExecutionVariable(this,"indexesUsed")||t._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),q===this.reset)return t._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new L.e(-1),t);const S=t._getExecutionVariable(this,"indexesUsed",[]),o=this._getNextIndex(S);o>-1&&(this.lastIndex.setValue(new L.e(o),t),S[o]=!0,t._setExecutionVariable(this,"indexesUsed",S),this.outputSignals[o]._activateSignal(t))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(t){super.serialize(t),t.config.outputSignalCount=this.config.outputSignalCount,t.config.isRandom=this.config.isRandom,t.config.loop=this.config.isLoop,t.config.startIndex=this.config.startIndex}}(0,o.c)("FlowGraphMultiGateBlock",r)}}]);