"use strict";(self.gpkvekif0vo=self.gpkvekif0vo||[]).push([[88],{15626:(a,O,i)=>{i.r(O),i.d(O,{FlowGraphAbsBlock:()=>y,FlowGraphAcosBlock:()=>Ga,FlowGraphAcoshBlock:()=>ha,FlowGraphAddBlock:()=>Z,FlowGraphAsinBlock:()=>ba,FlowGraphAsinhBlock:()=>ea,FlowGraphAtan2Block:()=>Qa,FlowGraphAtanBlock:()=>qa,FlowGraphAtanhBlock:()=>ja,FlowGraphBitwiseAndBlock:()=>Da,FlowGraphBitwiseLeftShiftBlock:()=>wa,FlowGraphBitwiseNotBlock:()=>na,FlowGraphBitwiseOrBlock:()=>Ua,FlowGraphBitwiseRightShiftBlock:()=>Ka,FlowGraphBitwiseXorBlock:()=>ya,FlowGraphCeilBlock:()=>f,FlowGraphClampBlock:()=>z,FlowGraphCosBlock:()=>ia,FlowGraphCoshBlock:()=>Ia,FlowGraphCubeRootBlock:()=>Ma,FlowGraphDegToRadBlock:()=>V,FlowGraphDivideBlock:()=>J,FlowGraphEBlock:()=>M,FlowGraphEqualityBlock:()=>X,FlowGraphExpBlock:()=>Za,FlowGraphFloorBlock:()=>S,FlowGraphFractionBlock:()=>T,FlowGraphGreaterThanBlock:()=>Y,FlowGraphGreaterThanOrEqualBlock:()=>L,FlowGraphInfBlock:()=>n,FlowGraphIsInfinityBlock:()=>t,FlowGraphIsNanBlock:()=>s,FlowGraphLeadingZerosBlock:()=>Sa,FlowGraphLessThanBlock:()=>o,FlowGraphLessThanOrEqualBlock:()=>d,FlowGraphLog10Block:()=>Ja,FlowGraphLog2Block:()=>ra,FlowGraphLogBlock:()=>Fa,FlowGraphMathInterpolationBlock:()=>v,FlowGraphMaxBlock:()=>u,FlowGraphMinBlock:()=>W,FlowGraphModuloBlock:()=>l,FlowGraphMultiplyBlock:()=>r,FlowGraphNaNBlock:()=>D,FlowGraphNegationBlock:()=>A,FlowGraphOneBitsCounterBlock:()=>Ba,FlowGraphPiBlock:()=>C,FlowGraphPowerBlock:()=>Ca,FlowGraphRadToDegBlock:()=>aa,FlowGraphRandomBlock:()=>ma,FlowGraphRoundBlock:()=>B,FlowGraphSaturateBlock:()=>g,FlowGraphSignBlock:()=>w,FlowGraphSinBlock:()=>Oa,FlowGraphSinhBlock:()=>ka,FlowGraphSquareRootBlock:()=>mO,FlowGraphSubtractBlock:()=>F,FlowGraphTanBlock:()=>Ha,FlowGraphTanhBlock:()=>Pa,FlowGraphTrailingZerosBlock:()=>fa,FlowGraphTruncBlock:()=>K});var H=i(12346),b=i(14124),G=i(15628),q=i(15631);class Q extends q.b{constructor(a,O,i,H){super(a,H),this._operation=O,this._className=i}_doOperation(a){return this._operation(a)}getClassName(){return this._className}}var k=i(12395),I=i(15635);class P extends q.b{constructor(a,O,i,H,b,G,q){super(H,q),this._operation=b,this._className=G,this.a=this.registerDataInput("a",a),this.b=this.registerDataInput("b",O),this.c=this.registerDataInput("c",i)}_doOperation(a){return this._operation(this.a.getValue(a),this.b.getValue(a),this.c.getValue(a))}getClassName(){return this._className}}var e=i(14115),h=i(14126),j=i(14152);class Z extends G.e{constructor(a){super((0,b.T)(null===a||void 0===a?void 0:a.type),(0,b.T)(null===a||void 0===a?void 0:a.type),(0,b.T)(null===a||void 0===a?void 0:a.type),((a,O)=>this._polymorphicAdd(a,O)),"FlowGraphAddBlock",a)}_polymorphicAdd(a,O){const i=(0,j.i)(a),H=(0,j.i)(O);if((0,j.f)(i,H)||(0,j.c)(i,H)||(0,j.b)(i,H))return a.add(O);if("Quaternion"===i||"Vector4"===H)return new k.Vector4(a.x,a.y,a.z,a.w).addInPlace(O);if("Vector4"===i||"Quaternion"===H)return a.add(O);var b;if(null!==(b=this.config)&&void 0!==b&&b.preventIntegerFloatArithmetic&&typeof a!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,j.n)(a)+(0,j.n)(O)}}(0,H.h)("FlowGraphAddBlock",Z);class F extends G.e{constructor(a){super((0,b.T)(null===a||void 0===a?void 0:a.type),(0,b.T)(null===a||void 0===a?void 0:a.type),(0,b.T)(null===a||void 0===a?void 0:a.type),((a,O)=>this._polymorphicSubtract(a,O)),"FlowGraphSubtractBlock",a)}_polymorphicSubtract(a,O){const i=(0,j.i)(a),H=(0,j.i)(O);if((0,j.f)(i,H)||(0,j.b)(i,H)||(0,j.c)(i,H))return a.FO(O);if("Quaternion"===i||"Vector4"===H)return new k.Vector4(a.x,a.y,a.z,a.w).ne(O);if("Vector4"===i||"Quaternion"===H)return a.FO(O);var b;if(null!==(b=this.config)&&void 0!==b&&b.preventIntegerFloatArithmetic&&typeof a!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,j.n)(a)-(0,j.n)(O)}}(0,H.h)("FlowGraphSubtractBlock",F);class r extends G.e{constructor(a){super((0,b.T)(null===a||void 0===a?void 0:a.type),(0,b.T)(null===a||void 0===a?void 0:a.type),(0,b.T)(null===a||void 0===a?void 0:a.type),((a,O)=>this._polymorphicMultiply(a,O)),"FlowGraphMultiplyBlock",a)}_polymorphicMultiply(a,O){const i=(0,j.i)(a),H=(0,j.i)(O);if((0,j.f)(i,H)||(0,j.b)(i,H))return a.multiply(O);if("Quaternion"===i||"Vector4"===H)return new k.Vector4(a.x,a.y,a.z,a.w).multiplyInPlace(O);if("Vector4"===i||"Quaternion"===H)return a.multiply(O);if((0,j.c)(i,H)){var b;if(null!==(b=this.config)&&void 0!==b&&b.useMatrixPerComponent){const H=a.m;for(let a=0;a<H.length;a++)H[a]*=O.m[a];return"Matrix2D"===i?new h.c(H):"Matrix3D"===i?new h.d(H):k.Matrix.MO(H)}return O.multiply(a)}var G;if(null!==(G=this.config)&&void 0!==G&&G.preventIntegerFloatArithmetic&&typeof a!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,j.n)(a)*(0,j.n)(O)}}(0,H.h)("FlowGraphMultiplyBlock",r);class J extends G.e{constructor(a){super((0,b.T)(null===a||void 0===a?void 0:a.type),(0,b.T)(null===a||void 0===a?void 0:a.type),(0,b.T)(null===a||void 0===a?void 0:a.type),((a,O)=>this._polymorphicDivide(a,O)),"FlowGraphDivideBlock",a)}_polymorphicDivide(a,O){const i=(0,j.i)(a),H=(0,j.i)(O);if((0,j.f)(i,H)||(0,j.b)(i,H))return a.divide(O);if("Quaternion"===i||"Quaternion"===H){const i=a.clone();return i.x/=O.x,i.y/=O.y,i.z/=O.z,i.w/=O.w,i}if("Quaternion"===i||"Vector4"===H)return new k.Vector4(a.x,a.y,a.z,a.w).divideInPlace(O);if("Vector4"===i||"Quaternion"===H)return a.divide(O);if((0,j.c)(i,H)){var b;if(null!==(b=this.config)&&void 0!==b&&b.useMatrixPerComponent){const H=a.m;for(let a=0;a<H.length;a++)H[a]/=O.m[a];return"Matrix2D"===i?new h.c(H):"Matrix3D"===i?new h.d(H):k.Matrix.MO(H)}return a.divide(O)}var G;if(null!==(G=this.config)&&void 0!==G&&G.preventIntegerFloatArithmetic&&typeof a!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,j.n)(a)/(0,j.n)(O)}}(0,H.h)("FlowGraphDivideBlock",J);class ma extends Q{constructor(a){super(b.t,(a=>this._random(a)),"FlowGraphRandomBlock",a),this.min=this.registerDataInput("min",b.t,(null===a||void 0===a?void 0:a.min)??0),this.max=this.registerDataInput("max",b.t,(null===a||void 0===a?void 0:a.max)??1),null!==a&&void 0!==a&&a.seed&&(this._seed=a.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const a=1e4*Math.sin(this._seed++);return a-Math.floor(a)}return Math.random()}_random(a){const O=this.min.getValue(a),i=this.max.getValue(a);return this._getRandomValue()*(i-O)+O}}(0,H.h)("FlowGraphRandomBlock",ma);class M extends Q{constructor(a){super(b.t,(()=>Math.E),"FlowGraphEBlock",a)}}(0,H.h)("FlowGraphEBlock",M);class C extends Q{constructor(a){super(b.t,(()=>Math.PI),"FlowGraphPIBlock",a)}}(0,H.h)("FlowGraphPIBlock",C);class n extends Q{constructor(a){super(b.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",a)}}(0,H.h)("FlowGraphInfBlock",n);class D extends Q{constructor(a){super(b.t,(()=>Number.NaN),"FlowGraphNaNBlock",a)}}function U(a,O){switch((0,j.i)(a)){case"FlowGraphInteger":return new e.d(O(a.value));case"Vector2":return new k.Vector2(O(a.x),O(a.y));case"ZO":return new k.ZO(O(a.x),O(a.y),O(a.z));case"Vector4":return new k.Vector4(O(a.x),O(a.y),O(a.z),O(a.w));case"Quaternion":return new k.Quaternion(O(a.x),O(a.y),O(a.z),O(a.w));case"Matrix":return k.Matrix.MO(a.m.map(O));case"Matrix2D":return new h.c(a.m.map(O));case"Matrix3D":return new h.d(a.m.map(O));default:return O(a)}}(0,H.h)("FlowGraphNaNBlock",D);class y extends I.c{constructor(a){super(b.t,b.t,(a=>this._polymorphicAbs(a)),"FlowGraphAbsBlock",a)}_polymorphicAbs(a){return U(a,Math.abs)}}(0,H.h)("FlowGraphAbsBlock",y);class w extends I.c{constructor(a){super(b.t,b.t,(a=>this._polymorphicSign(a)),"FlowGraphSignBlock",a)}_polymorphicSign(a){return U(a,Math.sign)}}(0,H.h)("FlowGraphSignBlock",w);class K extends I.c{constructor(a){super(b.t,b.t,(a=>this._polymorphicTrunc(a)),"FlowGraphTruncBlock",a)}_polymorphicTrunc(a){return U(a,Math.trunc)}}(0,H.h)("FlowGraphTruncBlock",K);class S extends I.c{constructor(a){super(b.t,b.t,(a=>this._polymorphicFloor(a)),"FlowGraphFloorBlock",a)}_polymorphicFloor(a){return U(a,Math.floor)}}(0,H.h)("FlowGraphFloorBlock",S);class f extends I.c{constructor(a){super(b.e,b.e,(a=>this._polymorphicCeiling(a)),"FlowGraphCeilBlock",a)}_polymorphicCeiling(a){return U(a,Math.ceil)}}(0,H.h)("FlowGraphCeilBlock",f);class B extends I.c{constructor(a){super(b.e,b.e,(a=>this._polymorphicRound(a)),"FlowGraphRoundBlock",a)}_polymorphicRound(a){return U(a,(a=>{var O;return a<0&&null!==(O=this.config)&&void 0!==O&&O.roundHalfAwayFromZero?-Math.round(-a):Math.round(a)}))}}(0,H.h)("FlowGraphRoundBlock",B);class T extends I.c{constructor(a){super(b.e,b.e,(a=>this._polymorphicFraction(a)),"FlowGraphFractBlock",a)}_polymorphicFraction(a){return U(a,(a=>a-Math.floor(a)))}}(0,H.h)("FlowGraphFractBlock",T);class A extends I.c{constructor(a){super(b.e,b.e,(a=>this._polymorphicNeg(a)),"FlowGraphNegationBlock",a)}_polymorphicNeg(a){return U(a,(a=>-a))}}function E(a,O,i){switch((0,j.i)(a)){case"FlowGraphInteger":return new e.d(i(a.value,O.value));case"Vector2":return new k.Vector2(i(a.x,O.x),i(a.y,O.y));case"ZO":return new k.ZO(i(a.x,O.x),i(a.y,O.y),i(a.z,O.z));case"Vector4":return new k.Vector4(i(a.x,O.x),i(a.y,O.y),i(a.z,O.z),i(a.w,O.w));case"Quaternion":return new k.Quaternion(i(a.x,O.x),i(a.y,O.y),i(a.z,O.z),i(a.w,O.w));case"Matrix":return k.Matrix.MO(a.m.map(((a,H)=>i(a,O.m[H]))));case"Matrix2D":return new h.c(a.m.map(((a,H)=>i(a,O.m[H]))));case"Matrix3D":return new h.d(a.m.map(((a,H)=>i(a,O.m[H]))));default:return i((0,j.n)(a),(0,j.n)(O))}}(0,H.h)("FlowGraphNegationBlock",A);class l extends G.e{constructor(a){super(b.e,b.e,b.e,((a,O)=>this._polymorphicRemainder(a,O)),"FlowGraphModuloBlock",a)}_polymorphicRemainder(a,O){return E(a,O,((a,O)=>a%O))}}(0,H.h)("FlowGraphModuloBlock",l);class W extends G.e{constructor(a){super(b.e,b.e,b.e,((a,O)=>this._polymorphicMin(a,O)),"FlowGraphMinBlock",a)}_polymorphicMin(a,O){return E(a,O,Math.min)}}(0,H.h)("FlowGraphMinBlock",W);class u extends G.e{constructor(a){super(b.e,b.e,b.e,((a,O)=>this._polymorphicMax(a,O)),"FlowGraphMaxBlock",a)}_polymorphicMax(a,O){return E(a,O,Math.max)}}function c(a,O,i){return Math.min(Math.max(a,Math.min(O,i)),Math.max(O,i))}function R(a,O,i,H){switch((0,j.i)(a)){case"FlowGraphInteger":return new e.d(H(a.value,O.value,i.value));case"Vector2":return new k.Vector2(H(a.x,O.x,i.x),H(a.y,O.y,i.y));case"ZO":return new k.ZO(H(a.x,O.x,i.x),H(a.y,O.y,i.y),H(a.z,O.z,i.z));case"Vector4":return new k.Vector4(H(a.x,O.x,i.x),H(a.y,O.y,i.y),H(a.z,O.z,i.z),H(a.w,O.w,i.w));case"Quaternion":return new k.Quaternion(H(a.x,O.x,i.x),H(a.y,O.y,i.y),H(a.z,O.z,i.z),H(a.w,O.w,i.w));case"Matrix":return k.Matrix.MO(a.m.map(((a,b)=>H(a,O.m[b],i.m[b]))));case"Matrix2D":return new h.c(a.m.map(((a,b)=>H(a,O.m[b],i.m[b]))));case"Matrix3D":return new h.d(a.m.map(((a,b)=>H(a,O.m[b],i.m[b]))));default:return H((0,j.n)(a),(0,j.n)(O),(0,j.n)(i))}}(0,H.h)("FlowGraphMaxBlock",u);class z extends P{constructor(a){super(b.e,b.e,b.e,b.e,((a,O,i)=>this._polymorphicClamp(a,O,i)),"FlowGraphClampBlock",a)}_polymorphicClamp(a,O,i){return R(a,O,i,c)}}function x(a){return Math.min(Math.max(a,0),1)}(0,H.h)("FlowGraphClampBlock",z);class g extends I.c{constructor(a){super(b.e,b.e,(a=>this._polymorphicSaturate(a)),"FlowGraphSaturateBlock",a)}_polymorphicSaturate(a){return U(a,x)}}function N(a,O,i){return(1-i)*a+i*O}(0,H.h)("FlowGraphSaturateBlock",g);class v extends P{constructor(a){super(b.e,b.e,b.e,b.e,((a,O,i)=>this._polymorphicInterpolate(a,O,i)),"FlowGraphMathInterpolationBlock",a)}_polymorphicInterpolate(a,O,i){return R(a,O,i,N)}}(0,H.h)("FlowGraphMathInterpolationBlock",v);class X extends G.e{constructor(a){super(b.e,b.e,b.h,((a,O)=>this._polymorphicEq(a,O)),"FlowGraphEqualityBlock",a)}_polymorphicEq(a,O){const i=(0,j.i)(a),H=(0,j.i)(O);return typeof a===typeof O&&((0,j.f)(i,H)||(0,j.c)(i,H)||(0,j.b)(i,H)?a.equals(O):a===O)}}function p(a,O,i){if((0,j.r)(a)&&(0,j.r)(O))return i((0,j.n)(a),(0,j.n)(O));throw new Error(`Cannot compare ${a} and ${O}`)}(0,H.h)("FlowGraphEqualityBlock",X);class o extends G.e{constructor(a){super(b.e,b.e,b.h,((a,O)=>this._polymorphicLessThan(a,O)),"FlowGraphLessThanBlock",a)}_polymorphicLessThan(a,O){return p(a,O,((a,O)=>a<O))}}(0,H.h)("FlowGraphLessThanBlock",o);class d extends G.e{constructor(a){super(b.e,b.e,b.h,((a,O)=>this._polymorphicLessThanOrEqual(a,O)),"FlowGraphLessThanOrEqualBlock",a)}_polymorphicLessThanOrEqual(a,O){return p(a,O,((a,O)=>a<=O))}}(0,H.h)("FlowGraphLessThanOrEqualBlock",d);class Y extends G.e{constructor(a){super(b.e,b.e,b.h,((a,O)=>this._polymorphicGreaterThan(a,O)),"FlowGraphGreaterThanBlock",a)}_polymorphicGreaterThan(a,O){return p(a,O,((a,O)=>a>O))}}(0,H.h)("FlowGraphGreaterThanBlock",Y);class L extends G.e{constructor(a){super(b.e,b.e,b.h,((a,O)=>this._polymorphicGreaterThanOrEqual(a,O)),"FlowGraphGreaterThanOrEqualBlock",a)}_polymorphicGreaterThanOrEqual(a,O){return p(a,O,((a,O)=>a>=O))}}(0,H.h)("FlowGraphGreaterThanOrEqualBlock",L);class s extends I.c{constructor(a){super(b.e,b.h,(a=>this._polymorphicIsNan(a)),"FlowGraphIsNaNBlock",a)}_polymorphicIsNan(a){if((0,j.r)(a,!0))return isNaN((0,j.n)(a));throw new Error(`Cannot get NaN of ${a}`)}}(0,H.h)("FlowGraphIsNaNBlock",s);class t extends I.c{constructor(a){super(b.e,b.h,(a=>this._polymorphicIsInf(a)),"FlowGraphIsInfBlock",a)}_polymorphicIsInf(a){if((0,j.r)(a))return!isFinite((0,j.n)(a));throw new Error(`Cannot get isInf of ${a}`)}}(0,H.h)("FlowGraphIsInfBlock",t);class V extends I.c{constructor(a){super(b.e,b.e,(a=>this._polymorphicDegToRad(a)),"FlowGraphDegToRadBlock",a)}_degToRad(a){return a*Math.PI/180}_polymorphicDegToRad(a){return U(a,this._degToRad)}}(0,H.h)("FlowGraphDegToRadBlock",V);class aa extends I.c{constructor(a){super(b.e,b.e,(a=>this._polymorphicRadToDeg(a)),"FlowGraphRadToDegBlock",a)}_radToDeg(a){return 180*a/Math.PI}_polymorphicRadToDeg(a){return U(a,this._radToDeg)}}(0,H.h)("FlowGraphRadToDegBlock",aa);class Oa extends I.c{constructor(a){super(b.t,b.t,(a=>this._polymorphicSin(a)),"FlowGraphSinBlock",a)}_polymorphicSin(a){return U(a,Math.sin)}}class ia extends I.c{constructor(a){super(b.t,b.t,(a=>this._polymorphicCos(a)),"FlowGraphCosBlock",a)}_polymorphicCos(a){return U(a,Math.cos)}}class Ha extends I.c{constructor(a){super(b.t,b.t,(a=>this._polymorphicTan(a)),"FlowGraphTanBlock",a)}_polymorphicTan(a){return U(a,Math.tan)}}class ba extends I.c{constructor(a){super(b.t,b.t,(a=>this._polymorphicAsin(a)),"FlowGraphASinBlock",a)}_polymorphicAsin(a){return U(a,Math.asin)}}(0,H.h)("FlowGraphASinBlock",ba);class Ga extends I.c{constructor(a){super(b.t,b.t,(a=>this._polymorphicAcos(a)),"FlowGraphACosBlock",a)}_polymorphicAcos(a){return U(a,Math.acos)}}(0,H.h)("FlowGraphACosBlock",Ga);class qa extends I.c{constructor(a){super(b.t,b.t,(a=>this._polymorphicAtan(a)),"FlowGraphATanBlock",a)}_polymorphicAtan(a){return U(a,Math.atan)}}(0,H.h)("FlowGraphATanBlock",qa);class Qa extends G.e{constructor(a){super(b.e,b.e,b.e,((a,O)=>this._polymorphicAtan2(a,O)),"FlowGraphATan2Block",a)}_polymorphicAtan2(a,O){return E(a,O,Math.atan2)}}(0,H.h)("FlowGraphATan2Block",Qa);class ka extends I.c{constructor(a){super(b.e,b.e,(a=>this._polymorphicSinh(a)),"FlowGraphSinhBlock",a)}_polymorphicSinh(a){return U(a,Math.sinh)}}(0,H.h)("FlowGraphSinhBlock",ka);class Ia extends I.c{constructor(a){super(b.e,b.e,(a=>this._polymorphicCosh(a)),"FlowGraphCoshBlock",a)}_polymorphicCosh(a){return U(a,Math.cosh)}}(0,H.h)("FlowGraphCoshBlock",Ia);class Pa extends I.c{constructor(a){super(b.e,b.e,(a=>this._polymorphicTanh(a)),"FlowGraphTanhBlock",a)}_polymorphicTanh(a){return U(a,Math.tanh)}}(0,H.h)("FlowGraphTanhBlock",Pa);class ea extends I.c{constructor(a){super(b.e,b.t,(a=>this._polymorphicAsinh(a)),"FlowGraphASinhBlock",a)}_polymorphicAsinh(a){return U(a,Math.asinh)}}(0,H.h)("FlowGraphASinhBlock",ea);class ha extends I.c{constructor(a){super(b.e,b.t,(a=>this._polymorphicAcosh(a)),"FlowGraphACoshBlock",a)}_polymorphicAcosh(a){return U(a,Math.acosh)}}(0,H.h)("FlowGraphACoshBlock",ha);class ja extends I.c{constructor(a){super(b.e,b.t,(a=>this._polymorphicAtanh(a)),"FlowGraphATanhBlock",a)}_polymorphicAtanh(a){return U(a,Math.atanh)}}(0,H.h)("FlowGraphATanhBlock",ja);class Za extends I.c{constructor(a){super(b.e,b.t,(a=>this._polymorphicExp(a)),"FlowGraphExponentialBlock",a)}_polymorphicExp(a){return U(a,Math.exp)}}(0,H.h)("FlowGraphExponentialBlock",Za);class Fa extends I.c{constructor(a){super(b.e,b.t,(a=>this._polymorphicLog(a)),"FlowGraphLogBlock",a)}_polymorphicLog(a){return U(a,Math.log)}}(0,H.h)("FlowGraphLogBlock",Fa);class ra extends I.c{constructor(a){super(b.e,b.t,(a=>this._polymorphicLog2(a)),"FlowGraphLog2Block",a)}_polymorphicLog2(a){return U(a,Math.log2)}}(0,H.h)("FlowGraphLog2Block",ra);class Ja extends I.c{constructor(a){super(b.e,b.t,(a=>this._polymorphicLog10(a)),"FlowGraphLog10Block",a)}_polymorphicLog10(a){return U(a,Math.log10)}}(0,H.h)("FlowGraphLog10Block",Ja);class mO extends I.c{constructor(a){super(b.e,b.t,(a=>this._polymorphicSqrt(a)),"FlowGraphSquareRootBlock",a)}_polymorphicSqrt(a){return U(a,Math.sqrt)}}(0,H.h)("FlowGraphSquareRootBlock",mO);class Ma extends I.c{constructor(a){super(b.e,b.t,(a=>this._polymorphicCubeRoot(a)),"FlowGraphCubeRootBlock",a)}_polymorphicCubeRoot(a){return U(a,Math.cbrt)}}(0,H.h)("FlowGraphCubeRootBlock",Ma);class Ca extends G.e{constructor(a){super(b.e,b.t,b.t,((a,O)=>this._polymorphicPow(a,O)),"FlowGraphPowerBlock",a)}_polymorphicPow(a,O){return E(a,O,Math.pow)}}(0,H.h)("FlowGraphPowerBlock",Ca);class na extends I.c{constructor(a){super((0,b.T)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),(0,b.T)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),(a=>"boolean"===typeof a?!a:"number"===typeof a?~a:new e.d(~a.value)),"FlowGraphBitwiseNotBlock",a)}}(0,H.h)("FlowGraphBitwiseNotBlock",na);class Da extends G.e{constructor(a){super((0,b.T)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),(0,b.T)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),(0,b.T)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),((a,O)=>{if("boolean"===typeof a&&"boolean"===typeof O)return a&&O;if("number"===typeof a&&"number"===typeof O)return a&O;if("object"===typeof a&&"object"===typeof O)return new e.d(a.value&O.value);throw new Error(`Cannot perform bitwise AND on ${a} and ${O}`)}),"FlowGraphBitwiseAndBlock",a)}}(0,H.h)("FlowGraphBitwiseAndBlock",Da);class Ua extends G.e{constructor(a){super((0,b.T)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),(0,b.T)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),(0,b.T)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),((a,O)=>{if("boolean"===typeof a&&"boolean"===typeof O)return a||O;if("number"===typeof a&&"number"===typeof O)return a|O;if("object"===typeof a&&"object"===typeof O)return new e.d(a.value|O.value);throw new Error(`Cannot perform bitwise OR on ${a} and ${O}`)}),"FlowGraphBitwiseOrBlock",a)}}(0,H.h)("FlowGraphBitwiseOrBlock",Ua);class ya extends G.e{constructor(a){super((0,b.T)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),(0,b.T)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),(0,b.T)((null===a||void 0===a?void 0:a.valueType)||"FlowGraphInteger"),((a,O)=>{if("boolean"===typeof a&&"boolean"===typeof O)return a!==O;if("number"===typeof a&&"number"===typeof O)return a^O;if("object"===typeof a&&"object"===typeof O)return new e.d(a.value^O.value);throw new Error(`Cannot perform bitwise XOR on ${a} and ${O}`)}),"FlowGraphBitwiseXorBlock",a)}}(0,H.h)("FlowGraphBitwiseXorBlock",ya);class wa extends G.e{constructor(a){super(b.l,b.l,b.l,((a,O)=>new e.d(a.value<<O.value)),"FlowGraphBitwiseLeftShiftBlock",a)}}(0,H.h)("FlowGraphBitwiseLeftShiftBlock",wa);class Ka extends G.e{constructor(a){super(b.l,b.l,b.l,((a,O)=>new e.d(a.value>>O.value)),"FlowGraphBitwiseRightShiftBlock",a)}}(0,H.h)("FlowGraphBitwiseRightShiftBlock",Ka);class Sa extends I.c{constructor(a){super(b.l,b.l,(a=>new e.d(Math.clz32(a.value))),"FlowGraphLeadingZerosBlock",a)}}(0,H.h)("FlowGraphLeadingZerosBlock",Sa);class fa extends I.c{constructor(a){super(b.l,b.l,(a=>new e.d(a.value?31-Math.clz32(a.value&-a.value):32)),"FlowGraphTrailingZerosBlock",a)}}(0,H.h)("FlowGraphTrailingZerosBlock",fa);class Ba extends I.c{constructor(a){super(b.l,b.l,(a=>new e.d(function(a){let O=0;for(;a;)O+=1&a,a>>=1;return O}(a.value))),"FlowGraphOneBitsCounterBlock",a)}}(0,H.h)("FlowGraphOneBitsCounterBlock",Ba)},15628:(a,O,i)=>{i.d(O,{e:()=>b});var H=i(15631);class b extends H.b{constructor(a,O,i,H,b,G){super(i,G),this._operation=H,this._className=b,this.a=this.registerDataInput("a",a),this.b=this.registerDataInput("b",O)}_doOperation(a){const O=this.a.getValue(a),i=this.b.getValue(a);return this._operation(O,i)}getClassName(){return this._className}}},15631:(a,O,i)=>{i.d(O,{b:()=>Q});var H=i(14139),b=i(14124);const G="cachedOperationValue",q="cachedExecutionId";class Q extends H.c{constructor(a,O){super(O),this.value=this.registerDataOutput("value",a),this.isValid=this.registerDataOutput("isValid",b.h)}_updateOutputs(a){const O=a._getExecutionVariable(this,q,-1),i=a._getExecutionVariable(this,G,null);if(void 0!==i&&null!==i&&O===a.executionId)this.isValid.setValue(!0,a),this.value.setValue(i,a);else try{const O=this._doOperation(a);if(void 0===O||null===O)return void this.isValid.setValue(!1,a);a._setExecutionVariable(this,G,O),a._setExecutionVariable(this,q,a.executionId),this.value.setValue(O,a),this.isValid.setValue(!0,a)}catch(H){this.isValid.setValue(!1,a)}}}},15635:(a,O,i)=>{i.d(O,{c:()=>b});var H=i(15631);class b extends H.b{constructor(a,O,i,H,b){super(O,b),this._operation=i,this._className=H,this.a=this.registerDataInput("a",a)}_doOperation(a){return this._operation(this.a.getValue(a))}getClassName(){return this._className}}}}]);