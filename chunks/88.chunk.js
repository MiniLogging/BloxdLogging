"use strict";(self.ex92n20nlz8=self.ex92n20nlz8||[]).push([[88],{15765:(I,g,b)=>{b.r(g),b.d(g,{FlowGraphAbsBlock:()=>mI,FlowGraphAcosBlock:()=>zI,FlowGraphAcoshBlock:()=>pI,FlowGraphAddBlock:()=>Z,FlowGraphAsinBlock:()=>cI,FlowGraphAsinhBlock:()=>DI,FlowGraphAtan2Block:()=>JI,FlowGraphAtanBlock:()=>MI,FlowGraphAtanhBlock:()=>xI,FlowGraphBitwiseAndBlock:()=>RI,FlowGraphBitwiseLeftShiftBlock:()=>sI,FlowGraphBitwiseNotBlock:()=>XI,FlowGraphBitwiseOrBlock:()=>EI,FlowGraphBitwiseRightShiftBlock:()=>FI,FlowGraphBitwiseXorBlock:()=>mg,FlowGraphCeilBlock:()=>d,FlowGraphClampBlock:()=>Q,FlowGraphCosBlock:()=>bI,FlowGraphCoshBlock:()=>nI,FlowGraphCubeRootBlock:()=>aI,FlowGraphDegToRadBlock:()=>W,FlowGraphDivideBlock:()=>f,FlowGraphEBlock:()=>a,FlowGraphEqualityBlock:()=>P,FlowGraphExpBlock:()=>ZI,FlowGraphFloorBlock:()=>Y,FlowGraphFractionBlock:()=>r,FlowGraphGreaterThanBlock:()=>q,FlowGraphGreaterThanOrEqualBlock:()=>l,FlowGraphInfBlock:()=>X,FlowGraphIsInfinityBlock:()=>T,FlowGraphIsNanBlock:()=>w,FlowGraphLeadingZerosBlock:()=>YI,FlowGraphLessThanBlock:()=>t,FlowGraphLessThanOrEqualBlock:()=>y,FlowGraphLog10Block:()=>fI,FlowGraphLog2Block:()=>SI,FlowGraphLogBlock:()=>kI,FlowGraphMathInterpolationBlock:()=>B,FlowGraphMaxBlock:()=>h,FlowGraphMinBlock:()=>U,FlowGraphModuloBlock:()=>i,FlowGraphMultiplyBlock:()=>S,FlowGraphNaNBlock:()=>R,FlowGraphNegationBlock:()=>O,FlowGraphOneBitsCounterBlock:()=>CI,FlowGraphPiBlock:()=>v,FlowGraphPowerBlock:()=>vI,FlowGraphRadToDegBlock:()=>II,FlowGraphRandomBlock:()=>V,FlowGraphRoundBlock:()=>C,FlowGraphSaturateBlock:()=>N,FlowGraphSignBlock:()=>s,FlowGraphSinBlock:()=>gI,FlowGraphSinhBlock:()=>oI,FlowGraphSquareRootBlock:()=>VI,FlowGraphSubtractBlock:()=>k,FlowGraphTanBlock:()=>eI,FlowGraphTanhBlock:()=>GI,FlowGraphTrailingZerosBlock:()=>dI,FlowGraphTruncBlock:()=>F});var e=b(12558),c=b(14282),z=b(15771),M=b(15776);class J extends M.d{constructor(I,g,b,e){super(I,e),this._operation=g,this._className=b}_doOperation(I){return this._operation(I)}getClassName(){return this._className}}var o=b(12590),n=b(15778);class G extends M.d{constructor(I,g,b,e,c,z,M){super(e,M),this._operation=c,this._className=z,this.a=this.registerDataInput("a",I),this.b=this.registerDataInput("b",g),this.c=this.registerDataInput("c",b)}_doOperation(I){return this._operation(this.a.getValue(I),this.b.getValue(I),this.c.getValue(I))}getClassName(){return this._className}}var D=b(14278),p=b(14284),x=b(14302);class Z extends z.d{constructor(I){super((0,c.I)(null===I||void 0===I?void 0:I.type),(0,c.I)(null===I||void 0===I?void 0:I.type),(0,c.I)(null===I||void 0===I?void 0:I.type),((I,g)=>this._polymorphicAdd(I,g)),"FlowGraphAddBlock",I)}_polymorphicAdd(I,g){const b=(0,x.j)(I),e=(0,x.j)(g);if((0,x.f)(b,e)||(0,x.e)(b,e)||(0,x.b)(b,e))return I.add(g);if("Quaternion"===b||"Vector4"===e)return new o.Vector4(I.x,I.y,I.z,I.w).addInPlace(g);if("Vector4"===b||"Quaternion"===e)return I.add(g);var c;if(null!==(c=this.config)&&void 0!==c&&c.preventIntegerFloatArithmetic&&typeof I!==typeof g)throw new Error("Cannot add different types of numbers.");return(0,x.p)(I)+(0,x.p)(g)}}(0,e.g)("FlowGraphAddBlock",Z);class k extends z.d{constructor(I){super((0,c.I)(null===I||void 0===I?void 0:I.type),(0,c.I)(null===I||void 0===I?void 0:I.type),(0,c.I)(null===I||void 0===I?void 0:I.type),((I,g)=>this._polymorphicSubtract(I,g)),"FlowGraphSubtractBlock",I)}_polymorphicSubtract(I,g){const b=(0,x.j)(I),e=(0,x.j)(g);if((0,x.f)(b,e)||(0,x.b)(b,e)||(0,x.e)(b,e))return I.ag(g);if("Quaternion"===b||"Vector4"===e)return new o.Vector4(I.x,I.y,I.z,I.w).Op(g);if("Vector4"===b||"Quaternion"===e)return I.ag(g);var c;if(null!==(c=this.config)&&void 0!==c&&c.preventIntegerFloatArithmetic&&typeof I!==typeof g)throw new Error("Cannot add different types of numbers.");return(0,x.p)(I)-(0,x.p)(g)}}(0,e.g)("FlowGraphSubtractBlock",k);class S extends z.d{constructor(I){super((0,c.I)(null===I||void 0===I?void 0:I.type),(0,c.I)(null===I||void 0===I?void 0:I.type),(0,c.I)(null===I||void 0===I?void 0:I.type),((I,g)=>this._polymorphicMultiply(I,g)),"FlowGraphMultiplyBlock",I)}_polymorphicMultiply(I,g){const b=(0,x.j)(I),e=(0,x.j)(g);if((0,x.f)(b,e)||(0,x.b)(b,e))return I.multiply(g);if("Quaternion"===b||"Vector4"===e)return new o.Vector4(I.x,I.y,I.z,I.w).multiplyInPlace(g);if("Vector4"===b||"Quaternion"===e)return I.multiply(g);if((0,x.e)(b,e)){var c;if(null!==(c=this.config)&&void 0!==c&&c.useMatrixPerComponent){const e=I.m;for(let I=0;I<e.length;I++)e[I]*=g.m[I];return"Matrix2D"===b?new p.d(e):"Matrix3D"===b?new p.e(e):o.Matrix.mb(e)}return g.multiply(I)}var z;if(null!==(z=this.config)&&void 0!==z&&z.preventIntegerFloatArithmetic&&typeof I!==typeof g)throw new Error("Cannot add different types of numbers.");return(0,x.p)(I)*(0,x.p)(g)}}(0,e.g)("FlowGraphMultiplyBlock",S);class f extends z.d{constructor(I){super((0,c.I)(null===I||void 0===I?void 0:I.type),(0,c.I)(null===I||void 0===I?void 0:I.type),(0,c.I)(null===I||void 0===I?void 0:I.type),((I,g)=>this._polymorphicDivide(I,g)),"FlowGraphDivideBlock",I)}_polymorphicDivide(I,g){const b=(0,x.j)(I),e=(0,x.j)(g);if((0,x.f)(b,e)||(0,x.b)(b,e))return I.divide(g);if("Quaternion"===b||"Quaternion"===e){const b=I.clone();return b.x/=g.x,b.y/=g.y,b.z/=g.z,b.w/=g.w,b}if("Quaternion"===b||"Vector4"===e)return new o.Vector4(I.x,I.y,I.z,I.w).divideInPlace(g);if("Vector4"===b||"Quaternion"===e)return I.divide(g);if((0,x.e)(b,e)){var c;if(null!==(c=this.config)&&void 0!==c&&c.useMatrixPerComponent){const e=I.m;for(let I=0;I<e.length;I++)e[I]/=g.m[I];return"Matrix2D"===b?new p.d(e):"Matrix3D"===b?new p.e(e):o.Matrix.mb(e)}return I.divide(g)}var z;if(null!==(z=this.config)&&void 0!==z&&z.preventIntegerFloatArithmetic&&typeof I!==typeof g)throw new Error("Cannot add different types of numbers.");return(0,x.p)(I)/(0,x.p)(g)}}(0,e.g)("FlowGraphDivideBlock",f);class V extends J{constructor(I){super(c.t,(I=>this._random(I)),"FlowGraphRandomBlock",I),this.min=this.registerDataInput("min",c.t,(null===I||void 0===I?void 0:I.min)??0),this.max=this.registerDataInput("max",c.t,(null===I||void 0===I?void 0:I.max)??1),null!==I&&void 0!==I&&I.seed&&(this._seed=I.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const I=1e4*Math.sin(this._seed++);return I-Math.floor(I)}return Math.random()}_random(I){const g=this.min.getValue(I),b=this.max.getValue(I);return this._getRandomValue()*(b-g)+g}}(0,e.g)("FlowGraphRandomBlock",V);class a extends J{constructor(I){super(c.t,(()=>Math.E),"FlowGraphEBlock",I)}}(0,e.g)("FlowGraphEBlock",a);class v extends J{constructor(I){super(c.t,(()=>Math.PI),"FlowGraphPIBlock",I)}}(0,e.g)("FlowGraphPIBlock",v);class X extends J{constructor(I){super(c.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",I)}}(0,e.g)("FlowGraphInfBlock",X);class R extends J{constructor(I){super(c.t,(()=>Number.NaN),"FlowGraphNaNBlock",I)}}function E(I,g){switch((0,x.j)(I)){case"FlowGraphInteger":return new D.d(g(I.value));case"Vector2":return new o.Vector2(g(I.x),g(I.y));case"Vg":return new o.Vg(g(I.x),g(I.y),g(I.z));case"Vector4":return new o.Vector4(g(I.x),g(I.y),g(I.z),g(I.w));case"Quaternion":return new o.Quaternion(g(I.x),g(I.y),g(I.z),g(I.w));case"Matrix":return o.Matrix.mb(I.m.map(g));case"Matrix2D":return new p.d(I.m.map(g));case"Matrix3D":return new p.e(I.m.map(g));default:return g(I)}}(0,e.g)("FlowGraphNaNBlock",R);class mI extends n.b{constructor(I){super(c.t,c.t,(I=>this._polymorphicAbs(I)),"FlowGraphAbsBlock",I)}_polymorphicAbs(I){return E(I,Math.abs)}}(0,e.g)("FlowGraphAbsBlock",mI);class s extends n.b{constructor(I){super(c.t,c.t,(I=>this._polymorphicSign(I)),"FlowGraphSignBlock",I)}_polymorphicSign(I){return E(I,Math.sign)}}(0,e.g)("FlowGraphSignBlock",s);class F extends n.b{constructor(I){super(c.t,c.t,(I=>this._polymorphicTrunc(I)),"FlowGraphTruncBlock",I)}_polymorphicTrunc(I){return E(I,Math.trunc)}}(0,e.g)("FlowGraphTruncBlock",F);class Y extends n.b{constructor(I){super(c.t,c.t,(I=>this._polymorphicFloor(I)),"FlowGraphFloorBlock",I)}_polymorphicFloor(I){return E(I,Math.floor)}}(0,e.g)("FlowGraphFloorBlock",Y);class d extends n.b{constructor(I){super(c.c,c.c,(I=>this._polymorphicCeiling(I)),"FlowGraphCeilBlock",I)}_polymorphicCeiling(I){return E(I,Math.ceil)}}(0,e.g)("FlowGraphCeilBlock",d);class C extends n.b{constructor(I){super(c.c,c.c,(I=>this._polymorphicRound(I)),"FlowGraphRoundBlock",I)}_polymorphicRound(I){return E(I,(I=>{var g;return I<0&&null!==(g=this.config)&&void 0!==g&&g.roundHalfAwayFromZero?-Math.round(-I):Math.round(I)}))}}(0,e.g)("FlowGraphRoundBlock",C);class r extends n.b{constructor(I){super(c.c,c.c,(I=>this._polymorphicFraction(I)),"FlowGraphFractBlock",I)}_polymorphicFraction(I){return E(I,(I=>I-Math.floor(I)))}}(0,e.g)("FlowGraphFractBlock",r);class O extends n.b{constructor(I){super(c.c,c.c,(I=>this._polymorphicNeg(I)),"FlowGraphNegationBlock",I)}_polymorphicNeg(I){return E(I,(I=>-I))}}function H(I,g,b){switch((0,x.j)(I)){case"FlowGraphInteger":return new D.d(b(I.value,g.value));case"Vector2":return new o.Vector2(b(I.x,g.x),b(I.y,g.y));case"Vg":return new o.Vg(b(I.x,g.x),b(I.y,g.y),b(I.z,g.z));case"Vector4":return new o.Vector4(b(I.x,g.x),b(I.y,g.y),b(I.z,g.z),b(I.w,g.w));case"Quaternion":return new o.Quaternion(b(I.x,g.x),b(I.y,g.y),b(I.z,g.z),b(I.w,g.w));case"Matrix":return o.Matrix.mb(I.m.map(((I,e)=>b(I,g.m[e]))));case"Matrix2D":return new p.d(I.m.map(((I,e)=>b(I,g.m[e]))));case"Matrix3D":return new p.e(I.m.map(((I,e)=>b(I,g.m[e]))));default:return b((0,x.p)(I),(0,x.p)(g))}}(0,e.g)("FlowGraphNegationBlock",O);class i extends z.d{constructor(I){super(c.c,c.c,c.c,((I,g)=>this._polymorphicRemainder(I,g)),"FlowGraphModuloBlock",I)}_polymorphicRemainder(I,g){return H(I,g,((I,g)=>I%g))}}(0,e.g)("FlowGraphModuloBlock",i);class U extends z.d{constructor(I){super(c.c,c.c,c.c,((I,g)=>this._polymorphicMin(I,g)),"FlowGraphMinBlock",I)}_polymorphicMin(I,g){return H(I,g,Math.min)}}(0,e.g)("FlowGraphMinBlock",U);class h extends z.d{constructor(I){super(c.c,c.c,c.c,((I,g)=>this._polymorphicMax(I,g)),"FlowGraphMaxBlock",I)}_polymorphicMax(I,g){return H(I,g,Math.max)}}function A(I,g,b){return Math.min(Math.max(I,Math.min(g,b)),Math.max(g,b))}function j(I,g,b,e){switch((0,x.j)(I)){case"FlowGraphInteger":return new D.d(e(I.value,g.value,b.value));case"Vector2":return new o.Vector2(e(I.x,g.x,b.x),e(I.y,g.y,b.y));case"Vg":return new o.Vg(e(I.x,g.x,b.x),e(I.y,g.y,b.y),e(I.z,g.z,b.z));case"Vector4":return new o.Vector4(e(I.x,g.x,b.x),e(I.y,g.y,b.y),e(I.z,g.z,b.z),e(I.w,g.w,b.w));case"Quaternion":return new o.Quaternion(e(I.x,g.x,b.x),e(I.y,g.y,b.y),e(I.z,g.z,b.z),e(I.w,g.w,b.w));case"Matrix":return o.Matrix.mb(I.m.map(((I,c)=>e(I,g.m[c],b.m[c]))));case"Matrix2D":return new p.d(I.m.map(((I,c)=>e(I,g.m[c],b.m[c]))));case"Matrix3D":return new p.e(I.m.map(((I,c)=>e(I,g.m[c],b.m[c]))));default:return e((0,x.p)(I),(0,x.p)(g),(0,x.p)(b))}}(0,e.g)("FlowGraphMaxBlock",h);class Q extends G{constructor(I){super(c.c,c.c,c.c,c.c,((I,g,b)=>this._polymorphicClamp(I,g,b)),"FlowGraphClampBlock",I)}_polymorphicClamp(I,g,b){return j(I,g,b,A)}}function L(I){return Math.min(Math.max(I,0),1)}(0,e.g)("FlowGraphClampBlock",Q);class N extends n.b{constructor(I){super(c.c,c.c,(I=>this._polymorphicSaturate(I)),"FlowGraphSaturateBlock",I)}_polymorphicSaturate(I){return E(I,L)}}function K(I,g,b){return(1-b)*I+b*g}(0,e.g)("FlowGraphSaturateBlock",N);class B extends G{constructor(I){super(c.c,c.c,c.c,c.c,((I,g,b)=>this._polymorphicInterpolate(I,g,b)),"FlowGraphMathInterpolationBlock",I)}_polymorphicInterpolate(I,g,b){return j(I,g,b,K)}}(0,e.g)("FlowGraphMathInterpolationBlock",B);class P extends z.d{constructor(I){super(c.c,c.c,c.g,((I,g)=>this._polymorphicEq(I,g)),"FlowGraphEqualityBlock",I)}_polymorphicEq(I,g){const b=(0,x.j)(I),e=(0,x.j)(g);return typeof I===typeof g&&((0,x.f)(b,e)||(0,x.e)(b,e)||(0,x.b)(b,e)?I.equals(g):I===g)}}function u(I,g,b){if((0,x.q)(I)&&(0,x.q)(g))return b((0,x.p)(I),(0,x.p)(g));throw new Error(`Cannot compare ${I} and ${g}`)}(0,e.g)("FlowGraphEqualityBlock",P);class t extends z.d{constructor(I){super(c.c,c.c,c.g,((I,g)=>this._polymorphicLessThan(I,g)),"FlowGraphLessThanBlock",I)}_polymorphicLessThan(I,g){return u(I,g,((I,g)=>I<g))}}(0,e.g)("FlowGraphLessThanBlock",t);class y extends z.d{constructor(I){super(c.c,c.c,c.g,((I,g)=>this._polymorphicLessThanOrEqual(I,g)),"FlowGraphLessThanOrEqualBlock",I)}_polymorphicLessThanOrEqual(I,g){return u(I,g,((I,g)=>I<=g))}}(0,e.g)("FlowGraphLessThanOrEqualBlock",y);class q extends z.d{constructor(I){super(c.c,c.c,c.g,((I,g)=>this._polymorphicGreaterThan(I,g)),"FlowGraphGreaterThanBlock",I)}_polymorphicGreaterThan(I,g){return u(I,g,((I,g)=>I>g))}}(0,e.g)("FlowGraphGreaterThanBlock",q);class l extends z.d{constructor(I){super(c.c,c.c,c.g,((I,g)=>this._polymorphicGreaterThanOrEqual(I,g)),"FlowGraphGreaterThanOrEqualBlock",I)}_polymorphicGreaterThanOrEqual(I,g){return u(I,g,((I,g)=>I>=g))}}(0,e.g)("FlowGraphGreaterThanOrEqualBlock",l);class w extends n.b{constructor(I){super(c.c,c.g,(I=>this._polymorphicIsNan(I)),"FlowGraphIsNaNBlock",I)}_polymorphicIsNan(I){if((0,x.q)(I,!0))return isNaN((0,x.p)(I));throw new Error(`Cannot get NaN of ${I}`)}}(0,e.g)("FlowGraphIsNaNBlock",w);class T extends n.b{constructor(I){super(c.c,c.g,(I=>this._polymorphicIsInf(I)),"FlowGraphIsInfBlock",I)}_polymorphicIsInf(I){if((0,x.q)(I))return!isFinite((0,x.p)(I));throw new Error(`Cannot get isInf of ${I}`)}}(0,e.g)("FlowGraphIsInfBlock",T);class W extends n.b{constructor(I){super(c.c,c.c,(I=>this._polymorphicDegToRad(I)),"FlowGraphDegToRadBlock",I)}_degToRad(I){return I*Math.PI/180}_polymorphicDegToRad(I){return E(I,this._degToRad)}}(0,e.g)("FlowGraphDegToRadBlock",W);class II extends n.b{constructor(I){super(c.c,c.c,(I=>this._polymorphicRadToDeg(I)),"FlowGraphRadToDegBlock",I)}_radToDeg(I){return 180*I/Math.PI}_polymorphicRadToDeg(I){return E(I,this._radToDeg)}}(0,e.g)("FlowGraphRadToDegBlock",II);class gI extends n.b{constructor(I){super(c.t,c.t,(I=>this._polymorphicSin(I)),"FlowGraphSinBlock",I)}_polymorphicSin(I){return E(I,Math.sin)}}class bI extends n.b{constructor(I){super(c.t,c.t,(I=>this._polymorphicCos(I)),"FlowGraphCosBlock",I)}_polymorphicCos(I){return E(I,Math.cos)}}class eI extends n.b{constructor(I){super(c.t,c.t,(I=>this._polymorphicTan(I)),"FlowGraphTanBlock",I)}_polymorphicTan(I){return E(I,Math.tan)}}class cI extends n.b{constructor(I){super(c.t,c.t,(I=>this._polymorphicAsin(I)),"FlowGraphASinBlock",I)}_polymorphicAsin(I){return E(I,Math.asin)}}(0,e.g)("FlowGraphASinBlock",cI);class zI extends n.b{constructor(I){super(c.t,c.t,(I=>this._polymorphicAcos(I)),"FlowGraphACosBlock",I)}_polymorphicAcos(I){return E(I,Math.acos)}}(0,e.g)("FlowGraphACosBlock",zI);class MI extends n.b{constructor(I){super(c.t,c.t,(I=>this._polymorphicAtan(I)),"FlowGraphATanBlock",I)}_polymorphicAtan(I){return E(I,Math.atan)}}(0,e.g)("FlowGraphATanBlock",MI);class JI extends z.d{constructor(I){super(c.c,c.c,c.c,((I,g)=>this._polymorphicAtan2(I,g)),"FlowGraphATan2Block",I)}_polymorphicAtan2(I,g){return H(I,g,Math.atan2)}}(0,e.g)("FlowGraphATan2Block",JI);class oI extends n.b{constructor(I){super(c.c,c.c,(I=>this._polymorphicSinh(I)),"FlowGraphSinhBlock",I)}_polymorphicSinh(I){return E(I,Math.sinh)}}(0,e.g)("FlowGraphSinhBlock",oI);class nI extends n.b{constructor(I){super(c.c,c.c,(I=>this._polymorphicCosh(I)),"FlowGraphCoshBlock",I)}_polymorphicCosh(I){return E(I,Math.cosh)}}(0,e.g)("FlowGraphCoshBlock",nI);class GI extends n.b{constructor(I){super(c.c,c.c,(I=>this._polymorphicTanh(I)),"FlowGraphTanhBlock",I)}_polymorphicTanh(I){return E(I,Math.tanh)}}(0,e.g)("FlowGraphTanhBlock",GI);class DI extends n.b{constructor(I){super(c.c,c.t,(I=>this._polymorphicAsinh(I)),"FlowGraphASinhBlock",I)}_polymorphicAsinh(I){return E(I,Math.asinh)}}(0,e.g)("FlowGraphASinhBlock",DI);class pI extends n.b{constructor(I){super(c.c,c.t,(I=>this._polymorphicAcosh(I)),"FlowGraphACoshBlock",I)}_polymorphicAcosh(I){return E(I,Math.acosh)}}(0,e.g)("FlowGraphACoshBlock",pI);class xI extends n.b{constructor(I){super(c.c,c.t,(I=>this._polymorphicAtanh(I)),"FlowGraphATanhBlock",I)}_polymorphicAtanh(I){return E(I,Math.atanh)}}(0,e.g)("FlowGraphATanhBlock",xI);class ZI extends n.b{constructor(I){super(c.c,c.t,(I=>this._polymorphicExp(I)),"FlowGraphExponentialBlock",I)}_polymorphicExp(I){return E(I,Math.exp)}}(0,e.g)("FlowGraphExponentialBlock",ZI);class kI extends n.b{constructor(I){super(c.c,c.t,(I=>this._polymorphicLog(I)),"FlowGraphLogBlock",I)}_polymorphicLog(I){return E(I,Math.log)}}(0,e.g)("FlowGraphLogBlock",kI);class SI extends n.b{constructor(I){super(c.c,c.t,(I=>this._polymorphicLog2(I)),"FlowGraphLog2Block",I)}_polymorphicLog2(I){return E(I,Math.log2)}}(0,e.g)("FlowGraphLog2Block",SI);class fI extends n.b{constructor(I){super(c.c,c.t,(I=>this._polymorphicLog10(I)),"FlowGraphLog10Block",I)}_polymorphicLog10(I){return E(I,Math.log10)}}(0,e.g)("FlowGraphLog10Block",fI);class VI extends n.b{constructor(I){super(c.c,c.t,(I=>this._polymorphicSqrt(I)),"FlowGraphSquareRootBlock",I)}_polymorphicSqrt(I){return E(I,Math.sqrt)}}(0,e.g)("FlowGraphSquareRootBlock",VI);class aI extends n.b{constructor(I){super(c.c,c.t,(I=>this._polymorphicCubeRoot(I)),"FlowGraphCubeRootBlock",I)}_polymorphicCubeRoot(I){return E(I,Math.cbrt)}}(0,e.g)("FlowGraphCubeRootBlock",aI);class vI extends z.d{constructor(I){super(c.c,c.t,c.t,((I,g)=>this._polymorphicPow(I,g)),"FlowGraphPowerBlock",I)}_polymorphicPow(I,g){return H(I,g,Math.pow)}}(0,e.g)("FlowGraphPowerBlock",vI);class XI extends n.b{constructor(I){super((0,c.I)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,c.I)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(I=>"boolean"===typeof I?!I:"number"===typeof I?~I:new D.d(~I.value)),"FlowGraphBitwiseNotBlock",I)}}(0,e.g)("FlowGraphBitwiseNotBlock",XI);class RI extends z.d{constructor(I){super((0,c.I)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,c.I)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,c.I)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),((I,g)=>{if("boolean"===typeof I&&"boolean"===typeof g)return I&&g;if("number"===typeof I&&"number"===typeof g)return I&g;if("object"===typeof I&&"object"===typeof g)return new D.d(I.value&g.value);throw new Error(`Cannot perform bitwise AND on ${I} and ${g}`)}),"FlowGraphBitwiseAndBlock",I)}}(0,e.g)("FlowGraphBitwiseAndBlock",RI);class EI extends z.d{constructor(I){super((0,c.I)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,c.I)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,c.I)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),((I,g)=>{if("boolean"===typeof I&&"boolean"===typeof g)return I||g;if("number"===typeof I&&"number"===typeof g)return I|g;if("object"===typeof I&&"object"===typeof g)return new D.d(I.value|g.value);throw new Error(`Cannot perform bitwise OR on ${I} and ${g}`)}),"FlowGraphBitwiseOrBlock",I)}}(0,e.g)("FlowGraphBitwiseOrBlock",EI);class mg extends z.d{constructor(I){super((0,c.I)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,c.I)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),(0,c.I)((null===I||void 0===I?void 0:I.valueType)||"FlowGraphInteger"),((I,g)=>{if("boolean"===typeof I&&"boolean"===typeof g)return I!==g;if("number"===typeof I&&"number"===typeof g)return I^g;if("object"===typeof I&&"object"===typeof g)return new D.d(I.value^g.value);throw new Error(`Cannot perform bitwise XOR on ${I} and ${g}`)}),"FlowGraphBitwiseXorBlock",I)}}(0,e.g)("FlowGraphBitwiseXorBlock",mg);class sI extends z.d{constructor(I){super(c.h,c.h,c.h,((I,g)=>new D.d(I.value<<g.value)),"FlowGraphBitwiseLeftShiftBlock",I)}}(0,e.g)("FlowGraphBitwiseLeftShiftBlock",sI);class FI extends z.d{constructor(I){super(c.h,c.h,c.h,((I,g)=>new D.d(I.value>>g.value)),"FlowGraphBitwiseRightShiftBlock",I)}}(0,e.g)("FlowGraphBitwiseRightShiftBlock",FI);class YI extends n.b{constructor(I){super(c.h,c.h,(I=>new D.d(Math.clz32(I.value))),"FlowGraphLeadingZerosBlock",I)}}(0,e.g)("FlowGraphLeadingZerosBlock",YI);class dI extends n.b{constructor(I){super(c.h,c.h,(I=>new D.d(I.value?31-Math.clz32(I.value&-I.value):32)),"FlowGraphTrailingZerosBlock",I)}}(0,e.g)("FlowGraphTrailingZerosBlock",dI);class CI extends n.b{constructor(I){super(c.h,c.h,(I=>new D.d(function(I){let g=0;for(;I;)g+=1&I,I>>=1;return g}(I.value))),"FlowGraphOneBitsCounterBlock",I)}}(0,e.g)("FlowGraphOneBitsCounterBlock",CI)},15771:(I,g,b)=>{b.d(g,{d:()=>c});var e=b(15776);class c extends e.d{constructor(I,g,b,e,c,z){super(b,z),this._operation=e,this._className=c,this.a=this.registerDataInput("a",I),this.b=this.registerDataInput("b",g)}_doOperation(I){const g=this.a.getValue(I),b=this.b.getValue(I);return this._operation(g,b)}getClassName(){return this._className}}},15776:(I,g,b)=>{b.d(g,{d:()=>J});var e=b(14295),c=b(14282);const z="cachedOperationValue",M="cachedExecutionId";class J extends e.d{constructor(I,g){super(g),this.value=this.registerDataOutput("value",I),this.isValid=this.registerDataOutput("isValid",c.g)}_updateOutputs(I){const g=I._getExecutionVariable(this,M,-1),b=I._getExecutionVariable(this,z,null);if(void 0!==b&&null!==b&&g===I.executionId)this.isValid.setValue(!0,I),this.value.setValue(b,I);else try{const g=this._doOperation(I);if(void 0===g||null===g)return void this.isValid.setValue(!1,I);I._setExecutionVariable(this,z,g),I._setExecutionVariable(this,M,I.executionId),this.value.setValue(g,I),this.isValid.setValue(!0,I)}catch(e){this.isValid.setValue(!1,I)}}}},15778:(I,g,b)=>{b.d(g,{b:()=>c});var e=b(15776);class c extends e.d{constructor(I,g,b,e,c){super(g,c),this._operation=b,this._className=e,this.a=this.registerDataInput("a",I)}_doOperation(I){return this._operation(this.a.getValue(I))}getClassName(){return this._className}}}}]);