"use strict";(self.fkqm0epoq5=self.fkqm0epoq5||[]).push([[88],{14863:(D,l,G)=>{G.r(l),G.d(l,{FlowGraphAbsBlock:()=>B,FlowGraphAcosBlock:()=>MD,FlowGraphAcoshBlock:()=>jD,FlowGraphAddBlock:()=>K,FlowGraphAsinBlock:()=>ND,FlowGraphAsinhBlock:()=>gD,FlowGraphAtan2Block:()=>XD,FlowGraphAtanBlock:()=>bD,FlowGraphAtanhBlock:()=>eD,FlowGraphBitwiseAndBlock:()=>LD,FlowGraphBitwiseLeftShiftBlock:()=>ID,FlowGraphBitwiseNotBlock:()=>oD,FlowGraphBitwiseOrBlock:()=>uD,FlowGraphBitwiseRightShiftBlock:()=>WD,FlowGraphBitwiseXorBlock:()=>BD,FlowGraphCeilBlock:()=>y,FlowGraphClampBlock:()=>J,FlowGraphCosBlock:()=>GD,FlowGraphCoshBlock:()=>RD,FlowGraphCubeRootBlock:()=>xD,FlowGraphDegToRadBlock:()=>Q,FlowGraphDivideBlock:()=>H,FlowGraphEBlock:()=>x,FlowGraphEqualityBlock:()=>p,FlowGraphExpBlock:()=>KD,FlowGraphFloorBlock:()=>i,FlowGraphFractionBlock:()=>O,FlowGraphGreaterThanBlock:()=>C,FlowGraphGreaterThanOrEqualBlock:()=>w,FlowGraphInfBlock:()=>o,FlowGraphIsInfinityBlock:()=>a,FlowGraphIsNanBlock:()=>A,FlowGraphLeadingZerosBlock:()=>iD,FlowGraphLessThanBlock:()=>m,FlowGraphLessThanOrEqualBlock:()=>T,FlowGraphLog10Block:()=>HD,FlowGraphLog2Block:()=>dD,FlowGraphLogBlock:()=>FD,FlowGraphMathInterpolationBlock:()=>P,FlowGraphMaxBlock:()=>c,FlowGraphMinBlock:()=>q,FlowGraphModuloBlock:()=>f,FlowGraphMultiplyBlock:()=>d,FlowGraphNaNBlock:()=>L,FlowGraphNegationBlock:()=>s,FlowGraphOneBitsCounterBlock:()=>SD,FlowGraphPiBlock:()=>r,FlowGraphPowerBlock:()=>rD,FlowGraphRadToDegBlock:()=>DD,FlowGraphRandomBlock:()=>h,FlowGraphRoundBlock:()=>S,FlowGraphSaturateBlock:()=>z,FlowGraphSignBlock:()=>I,FlowGraphSinBlock:()=>lD,FlowGraphSinhBlock:()=>tD,FlowGraphSquareRootBlock:()=>hD,FlowGraphSubtractBlock:()=>F,FlowGraphTanBlock:()=>VD,FlowGraphTanhBlock:()=>nD,FlowGraphTrailingZerosBlock:()=>yD,FlowGraphTruncBlock:()=>W});var V=G(11667),N=G(13423),M=G(14865),b=G(14869);class X extends b.d{constructor(D,l,G,V){super(D,V),this._operation=l,this._className=G}_doOperation(D){return this._operation(D)}getClassName(){return this._className}}var t=G(11710),R=G(14872);class n extends b.d{constructor(D,l,G,V,N,M,b){super(V,b),this._operation=N,this._className=M,this.a=this.registerDataInput("a",D),this.b=this.registerDataInput("b",l),this.c=this.registerDataInput("c",G)}_doOperation(D){return this._operation(this.a.getValue(D),this.b.getValue(D),this.c.getValue(D))}getClassName(){return this._className}}var g=G(13418),j=G(13426),e=G(13454);class K extends M.c{constructor(D){super((0,N.A)(null===D||void 0===D?void 0:D.type),(0,N.A)(null===D||void 0===D?void 0:D.type),(0,N.A)(null===D||void 0===D?void 0:D.type),((D,l)=>this._polymorphicAdd(D,l)),"FlowGraphAddBlock",D)}_polymorphicAdd(D,l){const G=(0,e.g)(D),V=(0,e.g)(l);if((0,e.f)(G,V)||(0,e.e)(G,V)||(0,e.b)(G,V))return D.add(l);if("Quaternion"===G||"Vector4"===V)return new t.Vector4(D.x,D.y,D.z,D.w).addInPlace(l);if("Vector4"===G||"Quaternion"===V)return D.add(l);var N;if(null!==(N=this.config)&&void 0!==N&&N.preventIntegerFloatArithmetic&&typeof D!==typeof l)throw new Error("Cannot add different types of numbers.");return(0,e.o)(D)+(0,e.o)(l)}}(0,V.c)("FlowGraphAddBlock",K);class F extends M.c{constructor(D){super((0,N.A)(null===D||void 0===D?void 0:D.type),(0,N.A)(null===D||void 0===D?void 0:D.type),(0,N.A)(null===D||void 0===D?void 0:D.type),((D,l)=>this._polymorphicSubtract(D,l)),"FlowGraphSubtractBlock",D)}_polymorphicSubtract(D,l){const G=(0,e.g)(D),V=(0,e.g)(l);if((0,e.f)(G,V)||(0,e.b)(G,V)||(0,e.e)(G,V))return D.Fl(l);if("Quaternion"===G||"Vector4"===V)return new t.Vector4(D.x,D.y,D.z,D.w).Kg(l);if("Vector4"===G||"Quaternion"===V)return D.Fl(l);var N;if(null!==(N=this.config)&&void 0!==N&&N.preventIntegerFloatArithmetic&&typeof D!==typeof l)throw new Error("Cannot add different types of numbers.");return(0,e.o)(D)-(0,e.o)(l)}}(0,V.c)("FlowGraphSubtractBlock",F);class d extends M.c{constructor(D){super((0,N.A)(null===D||void 0===D?void 0:D.type),(0,N.A)(null===D||void 0===D?void 0:D.type),(0,N.A)(null===D||void 0===D?void 0:D.type),((D,l)=>this._polymorphicMultiply(D,l)),"FlowGraphMultiplyBlock",D)}_polymorphicMultiply(D,l){const G=(0,e.g)(D),V=(0,e.g)(l);if((0,e.f)(G,V)||(0,e.b)(G,V))return D.multiply(l);if("Quaternion"===G||"Vector4"===V)return new t.Vector4(D.x,D.y,D.z,D.w).multiplyInPlace(l);if("Vector4"===G||"Quaternion"===V)return D.multiply(l);if((0,e.e)(G,V)){var N;if(null!==(N=this.config)&&void 0!==N&&N.useMatrixPerComponent){const V=D.m;for(let D=0;D<V.length;D++)V[D]*=l.m[D];return"Matrix2D"===G?new j.d(V):"Matrix3D"===G?new j.g(V):t.Matrix.xl(V)}return l.multiply(D)}var M;if(null!==(M=this.config)&&void 0!==M&&M.preventIntegerFloatArithmetic&&typeof D!==typeof l)throw new Error("Cannot add different types of numbers.");return(0,e.o)(D)*(0,e.o)(l)}}(0,V.c)("FlowGraphMultiplyBlock",d);class H extends M.c{constructor(D){super((0,N.A)(null===D||void 0===D?void 0:D.type),(0,N.A)(null===D||void 0===D?void 0:D.type),(0,N.A)(null===D||void 0===D?void 0:D.type),((D,l)=>this._polymorphicDivide(D,l)),"FlowGraphDivideBlock",D)}_polymorphicDivide(D,l){const G=(0,e.g)(D),V=(0,e.g)(l);if((0,e.f)(G,V)||(0,e.b)(G,V))return D.divide(l);if("Quaternion"===G||"Quaternion"===V){const G=D.clone();return G.x/=l.x,G.y/=l.y,G.z/=l.z,G.w/=l.w,G}if("Quaternion"===G||"Vector4"===V)return new t.Vector4(D.x,D.y,D.z,D.w).divideInPlace(l);if("Vector4"===G||"Quaternion"===V)return D.divide(l);if((0,e.e)(G,V)){var N;if(null!==(N=this.config)&&void 0!==N&&N.useMatrixPerComponent){const V=D.m;for(let D=0;D<V.length;D++)V[D]/=l.m[D];return"Matrix2D"===G?new j.d(V):"Matrix3D"===G?new j.g(V):t.Matrix.xl(V)}return D.divide(l)}var M;if(null!==(M=this.config)&&void 0!==M&&M.preventIntegerFloatArithmetic&&typeof D!==typeof l)throw new Error("Cannot add different types of numbers.");return(0,e.o)(D)/(0,e.o)(l)}}(0,V.c)("FlowGraphDivideBlock",H);class h extends X{constructor(D){super(N.o,(D=>this._random(D)),"FlowGraphRandomBlock",D),this.min=this.registerDataInput("min",N.o,(null===D||void 0===D?void 0:D.min)??0),this.max=this.registerDataInput("max",N.o,(null===D||void 0===D?void 0:D.max)??1),null!==D&&void 0!==D&&D.seed&&(this._seed=D.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const D=1e4*Math.sin(this._seed++);return D-Math.floor(D)}return Math.random()}_random(D){const l=this.min.getValue(D),G=this.max.getValue(D);return this._getRandomValue()*(G-l)+l}}(0,V.c)("FlowGraphRandomBlock",h);class x extends X{constructor(D){super(N.o,(()=>Math.E),"FlowGraphEBlock",D)}}(0,V.c)("FlowGraphEBlock",x);class r extends X{constructor(D){super(N.o,(()=>Math.PI),"FlowGraphPIBlock",D)}}(0,V.c)("FlowGraphPIBlock",r);class o extends X{constructor(D){super(N.o,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",D)}}(0,V.c)("FlowGraphInfBlock",o);class L extends X{constructor(D){super(N.o,(()=>Number.NaN),"FlowGraphNaNBlock",D)}}function u(D,l){switch((0,e.g)(D)){case"FlowGraphInteger":return new g.d(l(D.value));case"Vector2":return new t.Vector2(l(D.x),l(D.y));case"Kl":return new t.Kl(l(D.x),l(D.y),l(D.z));case"Vector4":return new t.Vector4(l(D.x),l(D.y),l(D.z),l(D.w));case"Quaternion":return new t.Quaternion(l(D.x),l(D.y),l(D.z),l(D.w));case"Matrix":return t.Matrix.xl(D.m.map(l));case"Matrix2D":return new j.d(D.m.map(l));case"Matrix3D":return new j.g(D.m.map(l));default:return l(D)}}(0,V.c)("FlowGraphNaNBlock",L);class B extends R.b{constructor(D){super(N.o,N.o,(D=>this._polymorphicAbs(D)),"FlowGraphAbsBlock",D)}_polymorphicAbs(D){return u(D,Math.abs)}}(0,V.c)("FlowGraphAbsBlock",B);class I extends R.b{constructor(D){super(N.o,N.o,(D=>this._polymorphicSign(D)),"FlowGraphSignBlock",D)}_polymorphicSign(D){return u(D,Math.sign)}}(0,V.c)("FlowGraphSignBlock",I);class W extends R.b{constructor(D){super(N.o,N.o,(D=>this._polymorphicTrunc(D)),"FlowGraphTruncBlock",D)}_polymorphicTrunc(D){return u(D,Math.trunc)}}(0,V.c)("FlowGraphTruncBlock",W);class i extends R.b{constructor(D){super(N.o,N.o,(D=>this._polymorphicFloor(D)),"FlowGraphFloorBlock",D)}_polymorphicFloor(D){return u(D,Math.floor)}}(0,V.c)("FlowGraphFloorBlock",i);class y extends R.b{constructor(D){super(N.d,N.d,(D=>this._polymorphicCeiling(D)),"FlowGraphCeilBlock",D)}_polymorphicCeiling(D){return u(D,Math.ceil)}}(0,V.c)("FlowGraphCeilBlock",y);class S extends R.b{constructor(D){super(N.d,N.d,(D=>this._polymorphicRound(D)),"FlowGraphRoundBlock",D)}_polymorphicRound(D){return u(D,(D=>{var l;return D<0&&null!==(l=this.config)&&void 0!==l&&l.roundHalfAwayFromZero?-Math.round(-D):Math.round(D)}))}}(0,V.c)("FlowGraphRoundBlock",S);class O extends R.b{constructor(D){super(N.d,N.d,(D=>this._polymorphicFraction(D)),"FlowGraphFractBlock",D)}_polymorphicFraction(D){return u(D,(D=>D-Math.floor(D)))}}(0,V.c)("FlowGraphFractBlock",O);class s extends R.b{constructor(D){super(N.d,N.d,(D=>this._polymorphicNeg(D)),"FlowGraphNegationBlock",D)}_polymorphicNeg(D){return u(D,(D=>-D))}}function U(D,l,G){switch((0,e.g)(D)){case"FlowGraphInteger":return new g.d(G(D.value,l.value));case"Vector2":return new t.Vector2(G(D.x,l.x),G(D.y,l.y));case"Kl":return new t.Kl(G(D.x,l.x),G(D.y,l.y),G(D.z,l.z));case"Vector4":return new t.Vector4(G(D.x,l.x),G(D.y,l.y),G(D.z,l.z),G(D.w,l.w));case"Quaternion":return new t.Quaternion(G(D.x,l.x),G(D.y,l.y),G(D.z,l.z),G(D.w,l.w));case"Matrix":return t.Matrix.xl(D.m.map(((D,V)=>G(D,l.m[V]))));case"Matrix2D":return new j.d(D.m.map(((D,V)=>G(D,l.m[V]))));case"Matrix3D":return new j.g(D.m.map(((D,V)=>G(D,l.m[V]))));default:return G((0,e.o)(D),(0,e.o)(l))}}(0,V.c)("FlowGraphNegationBlock",s);class f extends M.c{constructor(D){super(N.d,N.d,N.d,((D,l)=>this._polymorphicRemainder(D,l)),"FlowGraphModuloBlock",D)}_polymorphicRemainder(D,l){return U(D,l,((D,l)=>D%l))}}(0,V.c)("FlowGraphModuloBlock",f);class q extends M.c{constructor(D){super(N.d,N.d,N.d,((D,l)=>this._polymorphicMin(D,l)),"FlowGraphMinBlock",D)}_polymorphicMin(D,l){return U(D,l,Math.min)}}(0,V.c)("FlowGraphMinBlock",q);class c extends M.c{constructor(D){super(N.d,N.d,N.d,((D,l)=>this._polymorphicMax(D,l)),"FlowGraphMaxBlock",D)}_polymorphicMax(D,l){return U(D,l,Math.max)}}function v(D,l,G){return Math.min(Math.max(D,Math.min(l,G)),Math.max(l,G))}function Z(D,l,G,V){switch((0,e.g)(D)){case"FlowGraphInteger":return new g.d(V(D.value,l.value,G.value));case"Vector2":return new t.Vector2(V(D.x,l.x,G.x),V(D.y,l.y,G.y));case"Kl":return new t.Kl(V(D.x,l.x,G.x),V(D.y,l.y,G.y),V(D.z,l.z,G.z));case"Vector4":return new t.Vector4(V(D.x,l.x,G.x),V(D.y,l.y,G.y),V(D.z,l.z,G.z),V(D.w,l.w,G.w));case"Quaternion":return new t.Quaternion(V(D.x,l.x,G.x),V(D.y,l.y,G.y),V(D.z,l.z,G.z),V(D.w,l.w,G.w));case"Matrix":return t.Matrix.xl(D.m.map(((D,N)=>V(D,l.m[N],G.m[N]))));case"Matrix2D":return new j.d(D.m.map(((D,N)=>V(D,l.m[N],G.m[N]))));case"Matrix3D":return new j.g(D.m.map(((D,N)=>V(D,l.m[N],G.m[N]))));default:return V((0,e.o)(D),(0,e.o)(l),(0,e.o)(G))}}(0,V.c)("FlowGraphMaxBlock",c);class J extends n{constructor(D){super(N.d,N.d,N.d,N.d,((D,l,G)=>this._polymorphicClamp(D,l,G)),"FlowGraphClampBlock",D)}_polymorphicClamp(D,l,G){return Z(D,l,G,v)}}function Y(D){return Math.min(Math.max(D,0),1)}(0,V.c)("FlowGraphClampBlock",J);class z extends R.b{constructor(D){super(N.d,N.d,(D=>this._polymorphicSaturate(D)),"FlowGraphSaturateBlock",D)}_polymorphicSaturate(D){return u(D,Y)}}function E(D,l,G){return(1-G)*D+G*l}(0,V.c)("FlowGraphSaturateBlock",z);class P extends n{constructor(D){super(N.d,N.d,N.d,N.d,((D,l,G)=>this._polymorphicInterpolate(D,l,G)),"FlowGraphMathInterpolationBlock",D)}_polymorphicInterpolate(D,l,G){return Z(D,l,G,E)}}(0,V.c)("FlowGraphMathInterpolationBlock",P);class p extends M.c{constructor(D){super(N.d,N.d,N.g,((D,l)=>this._polymorphicEq(D,l)),"FlowGraphEqualityBlock",D)}_polymorphicEq(D,l){const G=(0,e.g)(D),V=(0,e.g)(l);return typeof D===typeof l&&((0,e.f)(G,V)||(0,e.e)(G,V)||(0,e.b)(G,V)?D.equals(l):D===l)}}function k(D,l,G){if((0,e.q)(D)&&(0,e.q)(l))return G((0,e.o)(D),(0,e.o)(l));throw new Error(`Cannot compare ${D} and ${l}`)}(0,V.c)("FlowGraphEqualityBlock",p);class m extends M.c{constructor(D){super(N.d,N.d,N.g,((D,l)=>this._polymorphicLessThan(D,l)),"FlowGraphLessThanBlock",D)}_polymorphicLessThan(D,l){return k(D,l,((D,l)=>D<l))}}(0,V.c)("FlowGraphLessThanBlock",m);class T extends M.c{constructor(D){super(N.d,N.d,N.g,((D,l)=>this._polymorphicLessThanOrEqual(D,l)),"FlowGraphLessThanOrEqualBlock",D)}_polymorphicLessThanOrEqual(D,l){return k(D,l,((D,l)=>D<=l))}}(0,V.c)("FlowGraphLessThanOrEqualBlock",T);class C extends M.c{constructor(D){super(N.d,N.d,N.g,((D,l)=>this._polymorphicGreaterThan(D,l)),"FlowGraphGreaterThanBlock",D)}_polymorphicGreaterThan(D,l){return k(D,l,((D,l)=>D>l))}}(0,V.c)("FlowGraphGreaterThanBlock",C);class w extends M.c{constructor(D){super(N.d,N.d,N.g,((D,l)=>this._polymorphicGreaterThanOrEqual(D,l)),"FlowGraphGreaterThanOrEqualBlock",D)}_polymorphicGreaterThanOrEqual(D,l){return k(D,l,((D,l)=>D>=l))}}(0,V.c)("FlowGraphGreaterThanOrEqualBlock",w);class A extends R.b{constructor(D){super(N.d,N.g,(D=>this._polymorphicIsNan(D)),"FlowGraphIsNaNBlock",D)}_polymorphicIsNan(D){if((0,e.q)(D,!0))return isNaN((0,e.o)(D));throw new Error(`Cannot get NaN of ${D}`)}}(0,V.c)("FlowGraphIsNaNBlock",A);class a extends R.b{constructor(D){super(N.d,N.g,(D=>this._polymorphicIsInf(D)),"FlowGraphIsInfBlock",D)}_polymorphicIsInf(D){if((0,e.q)(D))return!isFinite((0,e.o)(D));throw new Error(`Cannot get isInf of ${D}`)}}(0,V.c)("FlowGraphIsInfBlock",a);class Q extends R.b{constructor(D){super(N.d,N.d,(D=>this._polymorphicDegToRad(D)),"FlowGraphDegToRadBlock",D)}_degToRad(D){return D*Math.PI/180}_polymorphicDegToRad(D){return u(D,this._degToRad)}}(0,V.c)("FlowGraphDegToRadBlock",Q);class DD extends R.b{constructor(D){super(N.d,N.d,(D=>this._polymorphicRadToDeg(D)),"FlowGraphRadToDegBlock",D)}_radToDeg(D){return 180*D/Math.PI}_polymorphicRadToDeg(D){return u(D,this._radToDeg)}}(0,V.c)("FlowGraphRadToDegBlock",DD);class lD extends R.b{constructor(D){super(N.o,N.o,(D=>this._polymorphicSin(D)),"FlowGraphSinBlock",D)}_polymorphicSin(D){return u(D,Math.sin)}}class GD extends R.b{constructor(D){super(N.o,N.o,(D=>this._polymorphicCos(D)),"FlowGraphCosBlock",D)}_polymorphicCos(D){return u(D,Math.cos)}}class VD extends R.b{constructor(D){super(N.o,N.o,(D=>this._polymorphicTan(D)),"FlowGraphTanBlock",D)}_polymorphicTan(D){return u(D,Math.tan)}}class ND extends R.b{constructor(D){super(N.o,N.o,(D=>this._polymorphicAsin(D)),"FlowGraphASinBlock",D)}_polymorphicAsin(D){return u(D,Math.asin)}}(0,V.c)("FlowGraphASinBlock",ND);class MD extends R.b{constructor(D){super(N.o,N.o,(D=>this._polymorphicAcos(D)),"FlowGraphACosBlock",D)}_polymorphicAcos(D){return u(D,Math.acos)}}(0,V.c)("FlowGraphACosBlock",MD);class bD extends R.b{constructor(D){super(N.o,N.o,(D=>this._polymorphicAtan(D)),"FlowGraphATanBlock",D)}_polymorphicAtan(D){return u(D,Math.atan)}}(0,V.c)("FlowGraphATanBlock",bD);class XD extends M.c{constructor(D){super(N.d,N.d,N.d,((D,l)=>this._polymorphicAtan2(D,l)),"FlowGraphATan2Block",D)}_polymorphicAtan2(D,l){return U(D,l,Math.atan2)}}(0,V.c)("FlowGraphATan2Block",XD);class tD extends R.b{constructor(D){super(N.d,N.d,(D=>this._polymorphicSinh(D)),"FlowGraphSinhBlock",D)}_polymorphicSinh(D){return u(D,Math.sinh)}}(0,V.c)("FlowGraphSinhBlock",tD);class RD extends R.b{constructor(D){super(N.d,N.d,(D=>this._polymorphicCosh(D)),"FlowGraphCoshBlock",D)}_polymorphicCosh(D){return u(D,Math.cosh)}}(0,V.c)("FlowGraphCoshBlock",RD);class nD extends R.b{constructor(D){super(N.d,N.d,(D=>this._polymorphicTanh(D)),"FlowGraphTanhBlock",D)}_polymorphicTanh(D){return u(D,Math.tanh)}}(0,V.c)("FlowGraphTanhBlock",nD);class gD extends R.b{constructor(D){super(N.d,N.o,(D=>this._polymorphicAsinh(D)),"FlowGraphASinhBlock",D)}_polymorphicAsinh(D){return u(D,Math.asinh)}}(0,V.c)("FlowGraphASinhBlock",gD);class jD extends R.b{constructor(D){super(N.d,N.o,(D=>this._polymorphicAcosh(D)),"FlowGraphACoshBlock",D)}_polymorphicAcosh(D){return u(D,Math.acosh)}}(0,V.c)("FlowGraphACoshBlock",jD);class eD extends R.b{constructor(D){super(N.d,N.o,(D=>this._polymorphicAtanh(D)),"FlowGraphATanhBlock",D)}_polymorphicAtanh(D){return u(D,Math.atanh)}}(0,V.c)("FlowGraphATanhBlock",eD);class KD extends R.b{constructor(D){super(N.d,N.o,(D=>this._polymorphicExp(D)),"FlowGraphExponentialBlock",D)}_polymorphicExp(D){return u(D,Math.exp)}}(0,V.c)("FlowGraphExponentialBlock",KD);class FD extends R.b{constructor(D){super(N.d,N.o,(D=>this._polymorphicLog(D)),"FlowGraphLogBlock",D)}_polymorphicLog(D){return u(D,Math.log)}}(0,V.c)("FlowGraphLogBlock",FD);class dD extends R.b{constructor(D){super(N.d,N.o,(D=>this._polymorphicLog2(D)),"FlowGraphLog2Block",D)}_polymorphicLog2(D){return u(D,Math.log2)}}(0,V.c)("FlowGraphLog2Block",dD);class HD extends R.b{constructor(D){super(N.d,N.o,(D=>this._polymorphicLog10(D)),"FlowGraphLog10Block",D)}_polymorphicLog10(D){return u(D,Math.log10)}}(0,V.c)("FlowGraphLog10Block",HD);class hD extends R.b{constructor(D){super(N.d,N.o,(D=>this._polymorphicSqrt(D)),"FlowGraphSquareRootBlock",D)}_polymorphicSqrt(D){return u(D,Math.sqrt)}}(0,V.c)("FlowGraphSquareRootBlock",hD);class xD extends R.b{constructor(D){super(N.d,N.o,(D=>this._polymorphicCubeRoot(D)),"FlowGraphCubeRootBlock",D)}_polymorphicCubeRoot(D){return u(D,Math.cbrt)}}(0,V.c)("FlowGraphCubeRootBlock",xD);class rD extends M.c{constructor(D){super(N.d,N.o,N.o,((D,l)=>this._polymorphicPow(D,l)),"FlowGraphPowerBlock",D)}_polymorphicPow(D,l){return U(D,l,Math.pow)}}(0,V.c)("FlowGraphPowerBlock",rD);class oD extends R.b{constructor(D){super((0,N.A)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),(0,N.A)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),(D=>"boolean"===typeof D?!D:"number"===typeof D?~D:new g.d(~D.value)),"FlowGraphBitwiseNotBlock",D)}}(0,V.c)("FlowGraphBitwiseNotBlock",oD);class LD extends M.c{constructor(D){super((0,N.A)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),(0,N.A)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),(0,N.A)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),((D,l)=>{if("boolean"===typeof D&&"boolean"===typeof l)return D&&l;if("number"===typeof D&&"number"===typeof l)return D&l;if("object"===typeof D&&"object"===typeof l)return new g.d(D.value&l.value);throw new Error(`Cannot perform bitwise AND on ${D} and ${l}`)}),"FlowGraphBitwiseAndBlock",D)}}(0,V.c)("FlowGraphBitwiseAndBlock",LD);class uD extends M.c{constructor(D){super((0,N.A)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),(0,N.A)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),(0,N.A)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),((D,l)=>{if("boolean"===typeof D&&"boolean"===typeof l)return D||l;if("number"===typeof D&&"number"===typeof l)return D|l;if("object"===typeof D&&"object"===typeof l)return new g.d(D.value|l.value);throw new Error(`Cannot perform bitwise OR on ${D} and ${l}`)}),"FlowGraphBitwiseOrBlock",D)}}(0,V.c)("FlowGraphBitwiseOrBlock",uD);class BD extends M.c{constructor(D){super((0,N.A)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),(0,N.A)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),(0,N.A)((null===D||void 0===D?void 0:D.valueType)||"FlowGraphInteger"),((D,l)=>{if("boolean"===typeof D&&"boolean"===typeof l)return D!==l;if("number"===typeof D&&"number"===typeof l)return D^l;if("object"===typeof D&&"object"===typeof l)return new g.d(D.value^l.value);throw new Error(`Cannot perform bitwise XOR on ${D} and ${l}`)}),"FlowGraphBitwiseXorBlock",D)}}(0,V.c)("FlowGraphBitwiseXorBlock",BD);class ID extends M.c{constructor(D){super(N.i,N.i,N.i,((D,l)=>new g.d(D.value<<l.value)),"FlowGraphBitwiseLeftShiftBlock",D)}}(0,V.c)("FlowGraphBitwiseLeftShiftBlock",ID);class WD extends M.c{constructor(D){super(N.i,N.i,N.i,((D,l)=>new g.d(D.value>>l.value)),"FlowGraphBitwiseRightShiftBlock",D)}}(0,V.c)("FlowGraphBitwiseRightShiftBlock",WD);class iD extends R.b{constructor(D){super(N.i,N.i,(D=>new g.d(Math.clz32(D.value))),"FlowGraphLeadingZerosBlock",D)}}(0,V.c)("FlowGraphLeadingZerosBlock",iD);class yD extends R.b{constructor(D){super(N.i,N.i,(D=>new g.d(D.value?31-Math.clz32(D.value&-D.value):32)),"FlowGraphTrailingZerosBlock",D)}}(0,V.c)("FlowGraphTrailingZerosBlock",yD);class SD extends R.b{constructor(D){super(N.i,N.i,(D=>new g.d(function(D){let l=0;for(;D;)l+=1&D,D>>=1;return l}(D.value))),"FlowGraphOneBitsCounterBlock",D)}}(0,V.c)("FlowGraphOneBitsCounterBlock",SD)},14865:(D,l,G)=>{G.d(l,{c:()=>N});var V=G(14869);class N extends V.d{constructor(D,l,G,V,N,M){super(G,M),this._operation=V,this._className=N,this.a=this.registerDataInput("a",D),this.b=this.registerDataInput("b",l)}_doOperation(D){const l=this.a.getValue(D),G=this.b.getValue(D);return this._operation(l,G)}getClassName(){return this._className}}},14869:(D,l,G)=>{G.d(l,{d:()=>X});var V=G(13442),N=G(13423);const M="cachedOperationValue",b="cachedExecutionId";class X extends V.c{constructor(D,l){super(l),this.value=this.registerDataOutput("value",D),this.isValid=this.registerDataOutput("isValid",N.g)}_updateOutputs(D){const l=D._getExecutionVariable(this,b,-1),G=D._getExecutionVariable(this,M,null);if(void 0!==G&&null!==G&&l===D.executionId)this.isValid.setValue(!0,D),this.value.setValue(G,D);else try{const l=this._doOperation(D);if(void 0===l||null===l)return void this.isValid.setValue(!1,D);D._setExecutionVariable(this,M,l),D._setExecutionVariable(this,b,D.executionId),this.value.setValue(l,D),this.isValid.setValue(!0,D)}catch(V){this.isValid.setValue(!1,D)}}}},14872:(D,l,G)=>{G.d(l,{b:()=>N});var V=G(14869);class N extends V.d{constructor(D,l,G,V,N){super(l,N),this._operation=G,this._className=V,this.a=this.registerDataInput("a",D)}_doOperation(D){return this._operation(this.a.getValue(D))}getClassName(){return this._className}}}}]);