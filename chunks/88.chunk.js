"use strict";(self.bjbkv7h3qsd=self.bjbkv7h3qsd||[]).push([[88],{14452:(G,A,j)=>{j.r(A),j.d(A,{FlowGraphAbsBlock:()=>g,FlowGraphAcosBlock:()=>BG,FlowGraphAcoshBlock:()=>FG,FlowGraphAddBlock:()=>U,FlowGraphAsinBlock:()=>kG,FlowGraphAsinhBlock:()=>HG,FlowGraphAtan2Block:()=>sG,FlowGraphAtanBlock:()=>xG,FlowGraphAtanhBlock:()=>RG,FlowGraphBitwiseAndBlock:()=>IG,FlowGraphBitwiseLeftShiftBlock:()=>cG,FlowGraphBitwiseNotBlock:()=>XG,FlowGraphBitwiseOrBlock:()=>DG,FlowGraphBitwiseRightShiftBlock:()=>EG,FlowGraphBitwiseXorBlock:()=>gG,FlowGraphCeilBlock:()=>b,FlowGraphClampBlock:()=>P,FlowGraphCosBlock:()=>jG,FlowGraphCoshBlock:()=>dG,FlowGraphCubeRootBlock:()=>nG,FlowGraphDegToRadBlock:()=>m,FlowGraphDivideBlock:()=>t,FlowGraphEBlock:()=>n,FlowGraphEqualityBlock:()=>z,FlowGraphExpBlock:()=>UG,FlowGraphFloorBlock:()=>r,FlowGraphFractionBlock:()=>o,FlowGraphGreaterThanBlock:()=>L,FlowGraphGreaterThanOrEqualBlock:()=>V,FlowGraphInfBlock:()=>X,FlowGraphIsInfinityBlock:()=>T,FlowGraphIsNanBlock:()=>K,FlowGraphLeadingZerosBlock:()=>rG,FlowGraphLessThanBlock:()=>v,FlowGraphLessThanOrEqualBlock:()=>i,FlowGraphLog10Block:()=>tG,FlowGraphLog2Block:()=>CG,FlowGraphLogBlock:()=>SG,FlowGraphMathInterpolationBlock:()=>y,FlowGraphMaxBlock:()=>l,FlowGraphMinBlock:()=>e,FlowGraphModuloBlock:()=>p,FlowGraphMultiplyBlock:()=>C,FlowGraphNaNBlock:()=>I,FlowGraphNegationBlock:()=>W,FlowGraphOneBitsCounterBlock:()=>MG,FlowGraphPiBlock:()=>Q,FlowGraphPowerBlock:()=>QG,FlowGraphRadToDegBlock:()=>GG,FlowGraphRandomBlock:()=>Y,FlowGraphRoundBlock:()=>M,FlowGraphSaturateBlock:()=>q,FlowGraphSignBlock:()=>c,FlowGraphSinBlock:()=>AG,FlowGraphSinhBlock:()=>OG,FlowGraphSquareRootBlock:()=>YG,FlowGraphSubtractBlock:()=>S,FlowGraphTanBlock:()=>uG,FlowGraphTanhBlock:()=>hG,FlowGraphTrailingZerosBlock:()=>bG,FlowGraphTruncBlock:()=>E});var u=j(11181),k=j(12880),B=j(14459),x=j(14465);class s extends x.c{constructor(G,A,j,u){super(G,u),this._operation=A,this._className=j}_doOperation(G){return this._operation(G)}getClassName(){return this._className}}var O=j(11218),d=j(14471);class h extends x.c{constructor(G,A,j,u,k,B,x){super(u,x),this._operation=k,this._className=B,this.a=this.registerDataInput("a",G),this.b=this.registerDataInput("b",A),this.c=this.registerDataInput("c",j)}_doOperation(G){return this._operation(this.a.getValue(G),this.b.getValue(G),this.c.getValue(G))}getClassName(){return this._className}}var H=j(12873),F=j(12884),R=j(12916);class U extends B.c{constructor(G){super((0,k.L)(null===G||void 0===G?void 0:G.type),(0,k.L)(null===G||void 0===G?void 0:G.type),(0,k.L)(null===G||void 0===G?void 0:G.type),((G,A)=>this._polymorphicAdd(G,A)),"FlowGraphAddBlock",G)}_polymorphicAdd(G,A){const j=(0,R.l)(G),u=(0,R.l)(A);if((0,R.h)(j,u)||(0,R.g)(j,u)||(0,R.e)(j,u))return G.add(A);if("Quaternion"===j||"Vector4"===u)return new O.Vector4(G.x,G.y,G.z,G.w).addInPlace(A);if("Vector4"===j||"Quaternion"===u)return G.add(A);var k;if(null!==(k=this.config)&&void 0!==k&&k.preventIntegerFloatArithmetic&&typeof G!==typeof A)throw new Error("Cannot add different types of numbers.");return(0,R.t)(G)+(0,R.t)(A)}}(0,u.h)("FlowGraphAddBlock",U);class S extends B.c{constructor(G){super((0,k.L)(null===G||void 0===G?void 0:G.type),(0,k.L)(null===G||void 0===G?void 0:G.type),(0,k.L)(null===G||void 0===G?void 0:G.type),((G,A)=>this._polymorphicSubtract(G,A)),"FlowGraphSubtractBlock",G)}_polymorphicSubtract(G,A){const j=(0,R.l)(G),u=(0,R.l)(A);if((0,R.h)(j,u)||(0,R.e)(j,u)||(0,R.g)(j,u))return G.CA(A);if("Quaternion"===j||"Vector4"===u)return new O.Vector4(G.x,G.y,G.z,G.w).LH(A);if("Vector4"===j||"Quaternion"===u)return G.CA(A);var k;if(null!==(k=this.config)&&void 0!==k&&k.preventIntegerFloatArithmetic&&typeof G!==typeof A)throw new Error("Cannot add different types of numbers.");return(0,R.t)(G)-(0,R.t)(A)}}(0,u.h)("FlowGraphSubtractBlock",S);class C extends B.c{constructor(G){super((0,k.L)(null===G||void 0===G?void 0:G.type),(0,k.L)(null===G||void 0===G?void 0:G.type),(0,k.L)(null===G||void 0===G?void 0:G.type),((G,A)=>this._polymorphicMultiply(G,A)),"FlowGraphMultiplyBlock",G)}_polymorphicMultiply(G,A){const j=(0,R.l)(G),u=(0,R.l)(A);if((0,R.h)(j,u)||(0,R.e)(j,u))return G.multiply(A);if("Quaternion"===j||"Vector4"===u)return new O.Vector4(G.x,G.y,G.z,G.w).multiplyInPlace(A);if("Vector4"===j||"Quaternion"===u)return G.multiply(A);if((0,R.g)(j,u)){var k;if(null!==(k=this.config)&&void 0!==k&&k.useMatrixPerComponent){const u=G.m;for(let G=0;G<u.length;G++)u[G]*=A.m[G];return"Matrix2D"===j?new F.c(u):"Matrix3D"===j?new F.g(u):O.Matrix.QA(u)}return A.multiply(G)}var B;if(null!==(B=this.config)&&void 0!==B&&B.preventIntegerFloatArithmetic&&typeof G!==typeof A)throw new Error("Cannot add different types of numbers.");return(0,R.t)(G)*(0,R.t)(A)}}(0,u.h)("FlowGraphMultiplyBlock",C);class t extends B.c{constructor(G){super((0,k.L)(null===G||void 0===G?void 0:G.type),(0,k.L)(null===G||void 0===G?void 0:G.type),(0,k.L)(null===G||void 0===G?void 0:G.type),((G,A)=>this._polymorphicDivide(G,A)),"FlowGraphDivideBlock",G)}_polymorphicDivide(G,A){const j=(0,R.l)(G),u=(0,R.l)(A);if((0,R.h)(j,u)||(0,R.e)(j,u))return G.divide(A);if("Quaternion"===j||"Quaternion"===u){const j=G.clone();return j.x/=A.x,j.y/=A.y,j.z/=A.z,j.w/=A.w,j}if("Quaternion"===j||"Vector4"===u)return new O.Vector4(G.x,G.y,G.z,G.w).divideInPlace(A);if("Vector4"===j||"Quaternion"===u)return G.divide(A);if((0,R.g)(j,u)){var k;if(null!==(k=this.config)&&void 0!==k&&k.useMatrixPerComponent){const u=G.m;for(let G=0;G<u.length;G++)u[G]/=A.m[G];return"Matrix2D"===j?new F.c(u):"Matrix3D"===j?new F.g(u):O.Matrix.QA(u)}return G.divide(A)}var B;if(null!==(B=this.config)&&void 0!==B&&B.preventIntegerFloatArithmetic&&typeof G!==typeof A)throw new Error("Cannot add different types of numbers.");return(0,R.t)(G)/(0,R.t)(A)}}(0,u.h)("FlowGraphDivideBlock",t);class Y extends s{constructor(G){super(k.s,(G=>this._random(G)),"FlowGraphRandomBlock",G),this.min=this.registerDataInput("min",k.s,(null===G||void 0===G?void 0:G.min)??0),this.max=this.registerDataInput("max",k.s,(null===G||void 0===G?void 0:G.max)??1),null!==G&&void 0!==G&&G.seed&&(this._seed=G.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const G=1e4*Math.sin(this._seed++);return G-Math.floor(G)}return Math.random()}_random(G){const A=this.min.getValue(G),j=this.max.getValue(G);return this._getRandomValue()*(j-A)+A}}(0,u.h)("FlowGraphRandomBlock",Y);class n extends s{constructor(G){super(k.s,(()=>Math.E),"FlowGraphEBlock",G)}}(0,u.h)("FlowGraphEBlock",n);class Q extends s{constructor(G){super(k.s,(()=>Math.PI),"FlowGraphPIBlock",G)}}(0,u.h)("FlowGraphPIBlock",Q);class X extends s{constructor(G){super(k.s,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",G)}}(0,u.h)("FlowGraphInfBlock",X);class I extends s{constructor(G){super(k.s,(()=>Number.NaN),"FlowGraphNaNBlock",G)}}function D(G,A){switch((0,R.l)(G)){case"FlowGraphInteger":return new H.d(A(G.value));case"Vector2":return new O.Vector2(A(G.x),A(G.y));case"SA":return new O.SA(A(G.x),A(G.y),A(G.z));case"Vector4":return new O.Vector4(A(G.x),A(G.y),A(G.z),A(G.w));case"Quaternion":return new O.Quaternion(A(G.x),A(G.y),A(G.z),A(G.w));case"Matrix":return O.Matrix.QA(G.m.map(A));case"Matrix2D":return new F.c(G.m.map(A));case"Matrix3D":return new F.g(G.m.map(A));default:return A(G)}}(0,u.h)("FlowGraphNaNBlock",I);class g extends d.b{constructor(G){super(k.s,k.s,(G=>this._polymorphicAbs(G)),"FlowGraphAbsBlock",G)}_polymorphicAbs(G){return D(G,Math.abs)}}(0,u.h)("FlowGraphAbsBlock",g);class c extends d.b{constructor(G){super(k.s,k.s,(G=>this._polymorphicSign(G)),"FlowGraphSignBlock",G)}_polymorphicSign(G){return D(G,Math.sign)}}(0,u.h)("FlowGraphSignBlock",c);class E extends d.b{constructor(G){super(k.s,k.s,(G=>this._polymorphicTrunc(G)),"FlowGraphTruncBlock",G)}_polymorphicTrunc(G){return D(G,Math.trunc)}}(0,u.h)("FlowGraphTruncBlock",E);class r extends d.b{constructor(G){super(k.s,k.s,(G=>this._polymorphicFloor(G)),"FlowGraphFloorBlock",G)}_polymorphicFloor(G){return D(G,Math.floor)}}(0,u.h)("FlowGraphFloorBlock",r);class b extends d.b{constructor(G){super(k.c,k.c,(G=>this._polymorphicCeiling(G)),"FlowGraphCeilBlock",G)}_polymorphicCeiling(G){return D(G,Math.ceil)}}(0,u.h)("FlowGraphCeilBlock",b);class M extends d.b{constructor(G){super(k.c,k.c,(G=>this._polymorphicRound(G)),"FlowGraphRoundBlock",G)}_polymorphicRound(G){return D(G,(G=>{var A;return G<0&&null!==(A=this.config)&&void 0!==A&&A.roundHalfAwayFromZero?-Math.round(-G):Math.round(G)}))}}(0,u.h)("FlowGraphRoundBlock",M);class o extends d.b{constructor(G){super(k.c,k.c,(G=>this._polymorphicFraction(G)),"FlowGraphFractBlock",G)}_polymorphicFraction(G){return D(G,(G=>G-Math.floor(G)))}}(0,u.h)("FlowGraphFractBlock",o);class W extends d.b{constructor(G){super(k.c,k.c,(G=>this._polymorphicNeg(G)),"FlowGraphNegationBlock",G)}_polymorphicNeg(G){return D(G,(G=>-G))}}function J(G,A,j){switch((0,R.l)(G)){case"FlowGraphInteger":return new H.d(j(G.value,A.value));case"Vector2":return new O.Vector2(j(G.x,A.x),j(G.y,A.y));case"SA":return new O.SA(j(G.x,A.x),j(G.y,A.y),j(G.z,A.z));case"Vector4":return new O.Vector4(j(G.x,A.x),j(G.y,A.y),j(G.z,A.z),j(G.w,A.w));case"Quaternion":return new O.Quaternion(j(G.x,A.x),j(G.y,A.y),j(G.z,A.z),j(G.w,A.w));case"Matrix":return O.Matrix.QA(G.m.map(((G,u)=>j(G,A.m[u]))));case"Matrix2D":return new F.c(G.m.map(((G,u)=>j(G,A.m[u]))));case"Matrix3D":return new F.g(G.m.map(((G,u)=>j(G,A.m[u]))));default:return j((0,R.t)(G),(0,R.t)(A))}}(0,u.h)("FlowGraphNegationBlock",W);class p extends B.c{constructor(G){super(k.c,k.c,k.c,((G,A)=>this._polymorphicRemainder(G,A)),"FlowGraphModuloBlock",G)}_polymorphicRemainder(G,A){return J(G,A,((G,A)=>G%A))}}(0,u.h)("FlowGraphModuloBlock",p);class e extends B.c{constructor(G){super(k.c,k.c,k.c,((G,A)=>this._polymorphicMin(G,A)),"FlowGraphMinBlock",G)}_polymorphicMin(G,A){return J(G,A,Math.min)}}(0,u.h)("FlowGraphMinBlock",e);class l extends B.c{constructor(G){super(k.c,k.c,k.c,((G,A)=>this._polymorphicMax(G,A)),"FlowGraphMaxBlock",G)}_polymorphicMax(G,A){return J(G,A,Math.max)}}function w(G,A,j){return Math.min(Math.max(G,Math.min(A,j)),Math.max(A,j))}function Z(G,A,j,u){switch((0,R.l)(G)){case"FlowGraphInteger":return new H.d(u(G.value,A.value,j.value));case"Vector2":return new O.Vector2(u(G.x,A.x,j.x),u(G.y,A.y,j.y));case"SA":return new O.SA(u(G.x,A.x,j.x),u(G.y,A.y,j.y),u(G.z,A.z,j.z));case"Vector4":return new O.Vector4(u(G.x,A.x,j.x),u(G.y,A.y,j.y),u(G.z,A.z,j.z),u(G.w,A.w,j.w));case"Quaternion":return new O.Quaternion(u(G.x,A.x,j.x),u(G.y,A.y,j.y),u(G.z,A.z,j.z),u(G.w,A.w,j.w));case"Matrix":return O.Matrix.QA(G.m.map(((G,k)=>u(G,A.m[k],j.m[k]))));case"Matrix2D":return new F.c(G.m.map(((G,k)=>u(G,A.m[k],j.m[k]))));case"Matrix3D":return new F.g(G.m.map(((G,k)=>u(G,A.m[k],j.m[k]))));default:return u((0,R.t)(G),(0,R.t)(A),(0,R.t)(j))}}(0,u.h)("FlowGraphMaxBlock",l);class P extends h{constructor(G){super(k.c,k.c,k.c,k.c,((G,A,j)=>this._polymorphicClamp(G,A,j)),"FlowGraphClampBlock",G)}_polymorphicClamp(G,A,j){return Z(G,A,j,w)}}function N(G){return Math.min(Math.max(G,0),1)}(0,u.h)("FlowGraphClampBlock",P);class q extends d.b{constructor(G){super(k.c,k.c,(G=>this._polymorphicSaturate(G)),"FlowGraphSaturateBlock",G)}_polymorphicSaturate(G){return D(G,N)}}function a(G,A,j){return(1-j)*G+j*A}(0,u.h)("FlowGraphSaturateBlock",q);class y extends h{constructor(G){super(k.c,k.c,k.c,k.c,((G,A,j)=>this._polymorphicInterpolate(G,A,j)),"FlowGraphMathInterpolationBlock",G)}_polymorphicInterpolate(G,A,j){return Z(G,A,j,a)}}(0,u.h)("FlowGraphMathInterpolationBlock",y);class z extends B.c{constructor(G){super(k.c,k.c,k.e,((G,A)=>this._polymorphicEq(G,A)),"FlowGraphEqualityBlock",G)}_polymorphicEq(G,A){const j=(0,R.l)(G),u=(0,R.l)(A);return typeof G===typeof A&&((0,R.h)(j,u)||(0,R.g)(j,u)||(0,R.e)(j,u)?G.equals(A):G===A)}}function f(G,A,j){if((0,R.u)(G)&&(0,R.u)(A))return j((0,R.t)(G),(0,R.t)(A));throw new Error(`Cannot compare ${G} and ${A}`)}(0,u.h)("FlowGraphEqualityBlock",z);class v extends B.c{constructor(G){super(k.c,k.c,k.e,((G,A)=>this._polymorphicLessThan(G,A)),"FlowGraphLessThanBlock",G)}_polymorphicLessThan(G,A){return f(G,A,((G,A)=>G<A))}}(0,u.h)("FlowGraphLessThanBlock",v);class i extends B.c{constructor(G){super(k.c,k.c,k.e,((G,A)=>this._polymorphicLessThanOrEqual(G,A)),"FlowGraphLessThanOrEqualBlock",G)}_polymorphicLessThanOrEqual(G,A){return f(G,A,((G,A)=>G<=A))}}(0,u.h)("FlowGraphLessThanOrEqualBlock",i);class L extends B.c{constructor(G){super(k.c,k.c,k.e,((G,A)=>this._polymorphicGreaterThan(G,A)),"FlowGraphGreaterThanBlock",G)}_polymorphicGreaterThan(G,A){return f(G,A,((G,A)=>G>A))}}(0,u.h)("FlowGraphGreaterThanBlock",L);class V extends B.c{constructor(G){super(k.c,k.c,k.e,((G,A)=>this._polymorphicGreaterThanOrEqual(G,A)),"FlowGraphGreaterThanOrEqualBlock",G)}_polymorphicGreaterThanOrEqual(G,A){return f(G,A,((G,A)=>G>=A))}}(0,u.h)("FlowGraphGreaterThanOrEqualBlock",V);class K extends d.b{constructor(G){super(k.c,k.e,(G=>this._polymorphicIsNan(G)),"FlowGraphIsNaNBlock",G)}_polymorphicIsNan(G){if((0,R.u)(G,!0))return isNaN((0,R.t)(G));throw new Error(`Cannot get NaN of ${G}`)}}(0,u.h)("FlowGraphIsNaNBlock",K);class T extends d.b{constructor(G){super(k.c,k.e,(G=>this._polymorphicIsInf(G)),"FlowGraphIsInfBlock",G)}_polymorphicIsInf(G){if((0,R.u)(G))return!isFinite((0,R.t)(G));throw new Error(`Cannot get isInf of ${G}`)}}(0,u.h)("FlowGraphIsInfBlock",T);class m extends d.b{constructor(G){super(k.c,k.c,(G=>this._polymorphicDegToRad(G)),"FlowGraphDegToRadBlock",G)}_degToRad(G){return G*Math.PI/180}_polymorphicDegToRad(G){return D(G,this._degToRad)}}(0,u.h)("FlowGraphDegToRadBlock",m);class GG extends d.b{constructor(G){super(k.c,k.c,(G=>this._polymorphicRadToDeg(G)),"FlowGraphRadToDegBlock",G)}_radToDeg(G){return 180*G/Math.PI}_polymorphicRadToDeg(G){return D(G,this._radToDeg)}}(0,u.h)("FlowGraphRadToDegBlock",GG);class AG extends d.b{constructor(G){super(k.s,k.s,(G=>this._polymorphicSin(G)),"FlowGraphSinBlock",G)}_polymorphicSin(G){return D(G,Math.sin)}}class jG extends d.b{constructor(G){super(k.s,k.s,(G=>this._polymorphicCos(G)),"FlowGraphCosBlock",G)}_polymorphicCos(G){return D(G,Math.cos)}}class uG extends d.b{constructor(G){super(k.s,k.s,(G=>this._polymorphicTan(G)),"FlowGraphTanBlock",G)}_polymorphicTan(G){return D(G,Math.tan)}}class kG extends d.b{constructor(G){super(k.s,k.s,(G=>this._polymorphicAsin(G)),"FlowGraphASinBlock",G)}_polymorphicAsin(G){return D(G,Math.asin)}}(0,u.h)("FlowGraphASinBlock",kG);class BG extends d.b{constructor(G){super(k.s,k.s,(G=>this._polymorphicAcos(G)),"FlowGraphACosBlock",G)}_polymorphicAcos(G){return D(G,Math.acos)}}(0,u.h)("FlowGraphACosBlock",BG);class xG extends d.b{constructor(G){super(k.s,k.s,(G=>this._polymorphicAtan(G)),"FlowGraphATanBlock",G)}_polymorphicAtan(G){return D(G,Math.atan)}}(0,u.h)("FlowGraphATanBlock",xG);class sG extends B.c{constructor(G){super(k.c,k.c,k.c,((G,A)=>this._polymorphicAtan2(G,A)),"FlowGraphATan2Block",G)}_polymorphicAtan2(G,A){return J(G,A,Math.atan2)}}(0,u.h)("FlowGraphATan2Block",sG);class OG extends d.b{constructor(G){super(k.c,k.c,(G=>this._polymorphicSinh(G)),"FlowGraphSinhBlock",G)}_polymorphicSinh(G){return D(G,Math.sinh)}}(0,u.h)("FlowGraphSinhBlock",OG);class dG extends d.b{constructor(G){super(k.c,k.c,(G=>this._polymorphicCosh(G)),"FlowGraphCoshBlock",G)}_polymorphicCosh(G){return D(G,Math.cosh)}}(0,u.h)("FlowGraphCoshBlock",dG);class hG extends d.b{constructor(G){super(k.c,k.c,(G=>this._polymorphicTanh(G)),"FlowGraphTanhBlock",G)}_polymorphicTanh(G){return D(G,Math.tanh)}}(0,u.h)("FlowGraphTanhBlock",hG);class HG extends d.b{constructor(G){super(k.c,k.s,(G=>this._polymorphicAsinh(G)),"FlowGraphASinhBlock",G)}_polymorphicAsinh(G){return D(G,Math.asinh)}}(0,u.h)("FlowGraphASinhBlock",HG);class FG extends d.b{constructor(G){super(k.c,k.s,(G=>this._polymorphicAcosh(G)),"FlowGraphACoshBlock",G)}_polymorphicAcosh(G){return D(G,Math.acosh)}}(0,u.h)("FlowGraphACoshBlock",FG);class RG extends d.b{constructor(G){super(k.c,k.s,(G=>this._polymorphicAtanh(G)),"FlowGraphATanhBlock",G)}_polymorphicAtanh(G){return D(G,Math.atanh)}}(0,u.h)("FlowGraphATanhBlock",RG);class UG extends d.b{constructor(G){super(k.c,k.s,(G=>this._polymorphicExp(G)),"FlowGraphExponentialBlock",G)}_polymorphicExp(G){return D(G,Math.exp)}}(0,u.h)("FlowGraphExponentialBlock",UG);class SG extends d.b{constructor(G){super(k.c,k.s,(G=>this._polymorphicLog(G)),"FlowGraphLogBlock",G)}_polymorphicLog(G){return D(G,Math.log)}}(0,u.h)("FlowGraphLogBlock",SG);class CG extends d.b{constructor(G){super(k.c,k.s,(G=>this._polymorphicLog2(G)),"FlowGraphLog2Block",G)}_polymorphicLog2(G){return D(G,Math.log2)}}(0,u.h)("FlowGraphLog2Block",CG);class tG extends d.b{constructor(G){super(k.c,k.s,(G=>this._polymorphicLog10(G)),"FlowGraphLog10Block",G)}_polymorphicLog10(G){return D(G,Math.log10)}}(0,u.h)("FlowGraphLog10Block",tG);class YG extends d.b{constructor(G){super(k.c,k.s,(G=>this._polymorphicSqrt(G)),"FlowGraphSquareRootBlock",G)}_polymorphicSqrt(G){return D(G,Math.sqrt)}}(0,u.h)("FlowGraphSquareRootBlock",YG);class nG extends d.b{constructor(G){super(k.c,k.s,(G=>this._polymorphicCubeRoot(G)),"FlowGraphCubeRootBlock",G)}_polymorphicCubeRoot(G){return D(G,Math.cbrt)}}(0,u.h)("FlowGraphCubeRootBlock",nG);class QG extends B.c{constructor(G){super(k.c,k.s,k.s,((G,A)=>this._polymorphicPow(G,A)),"FlowGraphPowerBlock",G)}_polymorphicPow(G,A){return J(G,A,Math.pow)}}(0,u.h)("FlowGraphPowerBlock",QG);class XG extends d.b{constructor(G){super((0,k.L)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),(0,k.L)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),(G=>"boolean"===typeof G?!G:"number"===typeof G?~G:new H.d(~G.value)),"FlowGraphBitwiseNotBlock",G)}}(0,u.h)("FlowGraphBitwiseNotBlock",XG);class IG extends B.c{constructor(G){super((0,k.L)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),(0,k.L)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),(0,k.L)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),((G,A)=>{if("boolean"===typeof G&&"boolean"===typeof A)return G&&A;if("number"===typeof G&&"number"===typeof A)return G&A;if("object"===typeof G&&"object"===typeof A)return new H.d(G.value&A.value);throw new Error(`Cannot perform bitwise AND on ${G} and ${A}`)}),"FlowGraphBitwiseAndBlock",G)}}(0,u.h)("FlowGraphBitwiseAndBlock",IG);class DG extends B.c{constructor(G){super((0,k.L)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),(0,k.L)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),(0,k.L)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),((G,A)=>{if("boolean"===typeof G&&"boolean"===typeof A)return G||A;if("number"===typeof G&&"number"===typeof A)return G|A;if("object"===typeof G&&"object"===typeof A)return new H.d(G.value|A.value);throw new Error(`Cannot perform bitwise OR on ${G} and ${A}`)}),"FlowGraphBitwiseOrBlock",G)}}(0,u.h)("FlowGraphBitwiseOrBlock",DG);class gG extends B.c{constructor(G){super((0,k.L)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),(0,k.L)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),(0,k.L)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),((G,A)=>{if("boolean"===typeof G&&"boolean"===typeof A)return G!==A;if("number"===typeof G&&"number"===typeof A)return G^A;if("object"===typeof G&&"object"===typeof A)return new H.d(G.value^A.value);throw new Error(`Cannot perform bitwise XOR on ${G} and ${A}`)}),"FlowGraphBitwiseXorBlock",G)}}(0,u.h)("FlowGraphBitwiseXorBlock",gG);class cG extends B.c{constructor(G){super(k.f,k.f,k.f,((G,A)=>new H.d(G.value<<A.value)),"FlowGraphBitwiseLeftShiftBlock",G)}}(0,u.h)("FlowGraphBitwiseLeftShiftBlock",cG);class EG extends B.c{constructor(G){super(k.f,k.f,k.f,((G,A)=>new H.d(G.value>>A.value)),"FlowGraphBitwiseRightShiftBlock",G)}}(0,u.h)("FlowGraphBitwiseRightShiftBlock",EG);class rG extends d.b{constructor(G){super(k.f,k.f,(G=>new H.d(Math.clz32(G.value))),"FlowGraphLeadingZerosBlock",G)}}(0,u.h)("FlowGraphLeadingZerosBlock",rG);class bG extends d.b{constructor(G){super(k.f,k.f,(G=>new H.d(G.value?31-Math.clz32(G.value&-G.value):32)),"FlowGraphTrailingZerosBlock",G)}}(0,u.h)("FlowGraphTrailingZerosBlock",bG);class MG extends d.b{constructor(G){super(k.f,k.f,(G=>new H.d(function(G){let A=0;for(;G;)A+=1&G,G>>=1;return A}(G.value))),"FlowGraphOneBitsCounterBlock",G)}}(0,u.h)("FlowGraphOneBitsCounterBlock",MG)},14459:(G,A,j)=>{j.d(A,{c:()=>k});var u=j(14465);class k extends u.c{constructor(G,A,j,u,k,B){super(j,B),this._operation=u,this._className=k,this.a=this.registerDataInput("a",G),this.b=this.registerDataInput("b",A)}_doOperation(G){const A=this.a.getValue(G),j=this.b.getValue(G);return this._operation(A,j)}getClassName(){return this._className}}},14465:(G,A,j)=>{j.d(A,{c:()=>s});var u=j(12905),k=j(12880);const B="cachedOperationValue",x="cachedExecutionId";class s extends u.c{constructor(G,A){super(A),this.value=this.registerDataOutput("value",G),this.isValid=this.registerDataOutput("isValid",k.e)}_updateOutputs(G){const A=G._getExecutionVariable(this,x,-1),j=G._getExecutionVariable(this,B,null);if(void 0!==j&&null!==j&&A===G.executionId)this.isValid.setValue(!0,G),this.value.setValue(j,G);else try{const A=this._doOperation(G);if(void 0===A||null===A)return void this.isValid.setValue(!1,G);G._setExecutionVariable(this,B,A),G._setExecutionVariable(this,x,G.executionId),this.value.setValue(A,G),this.isValid.setValue(!0,G)}catch(u){this.isValid.setValue(!1,G)}}}},14471:(G,A,j)=>{j.d(A,{b:()=>k});var u=j(14465);class k extends u.c{constructor(G,A,j,u,k){super(A,k),this._operation=j,this._className=u,this.a=this.registerDataInput("a",G)}_doOperation(G){return this._operation(this.a.getValue(G))}getClassName(){return this._className}}}}]);