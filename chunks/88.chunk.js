"use strict";(self.rvold1i0ywi=self.rvold1i0ywi||[]).push([[88],{14464:(F,b,Q)=>{Q.r(b),Q.d(b,{FlowGraphAbsBlock:()=>p,FlowGraphAcosBlock:()=>tF,FlowGraphAcoshBlock:()=>eF,FlowGraphAddBlock:()=>y,FlowGraphAsinBlock:()=>zF,FlowGraphAsinhBlock:()=>KF,FlowGraphAtan2Block:()=>WF,FlowGraphAtanBlock:()=>gF,FlowGraphAtanhBlock:()=>NF,FlowGraphBitwiseAndBlock:()=>mF,FlowGraphBitwiseLeftShiftBlock:()=>DF,FlowGraphBitwiseNotBlock:()=>kF,FlowGraphBitwiseOrBlock:()=>RF,FlowGraphBitwiseRightShiftBlock:()=>PF,FlowGraphBitwiseXorBlock:()=>pF,FlowGraphCeilBlock:()=>j,FlowGraphClampBlock:()=>O,FlowGraphCosBlock:()=>QF,FlowGraphCoshBlock:()=>qF,FlowGraphCubeRootBlock:()=>iF,FlowGraphDegToRadBlock:()=>d,FlowGraphDivideBlock:()=>X,FlowGraphEBlock:()=>i,FlowGraphEqualityBlock:()=>u,FlowGraphExpBlock:()=>yF,FlowGraphFloorBlock:()=>n,FlowGraphFractionBlock:()=>Y,FlowGraphGreaterThanBlock:()=>M,FlowGraphGreaterThanOrEqualBlock:()=>r,FlowGraphInfBlock:()=>k,FlowGraphIsInfinityBlock:()=>B,FlowGraphIsNanBlock:()=>H,FlowGraphLeadingZerosBlock:()=>nF,FlowGraphLessThanBlock:()=>J,FlowGraphLessThanOrEqualBlock:()=>I,FlowGraphLog10Block:()=>XF,FlowGraphLog2Block:()=>cF,FlowGraphLogBlock:()=>EF,FlowGraphMathInterpolationBlock:()=>U,FlowGraphMaxBlock:()=>T,FlowGraphMinBlock:()=>l,FlowGraphModuloBlock:()=>h,FlowGraphMultiplyBlock:()=>c,FlowGraphNaNBlock:()=>m,FlowGraphNegationBlock:()=>s,FlowGraphOneBitsCounterBlock:()=>wF,FlowGraphPiBlock:()=>f,FlowGraphPowerBlock:()=>fF,FlowGraphRadToDegBlock:()=>FF,FlowGraphRandomBlock:()=>L,FlowGraphRoundBlock:()=>w,FlowGraphSaturateBlock:()=>a,FlowGraphSignBlock:()=>D,FlowGraphSinBlock:()=>bF,FlowGraphSinhBlock:()=>ZF,FlowGraphSquareRootBlock:()=>LF,FlowGraphSubtractBlock:()=>E,FlowGraphTanBlock:()=>CF,FlowGraphTanhBlock:()=>GF,FlowGraphTrailingZerosBlock:()=>jF,FlowGraphTruncBlock:()=>P});var C=Q(11265),z=Q(12951),t=Q(14467),g=Q(14472);class W extends g.b{constructor(F,b,Q,C){super(F,C),this._operation=b,this._className=Q}_doOperation(F){return this._operation(F)}getClassName(){return this._className}}var Z=Q(11309),q=Q(14476);class G extends g.b{constructor(F,b,Q,C,z,t,g){super(C,g),this._operation=z,this._className=t,this.a=this.registerDataInput("a",F),this.b=this.registerDataInput("b",b),this.c=this.registerDataInput("c",Q)}_doOperation(F){return this._operation(this.a.getValue(F),this.b.getValue(F),this.c.getValue(F))}getClassName(){return this._className}}var K=Q(12948),e=Q(12958),N=Q(12985);class y extends t.e{constructor(F){super((0,z.F)(null===F||void 0===F?void 0:F.type),(0,z.F)(null===F||void 0===F?void 0:F.type),(0,z.F)(null===F||void 0===F?void 0:F.type),((F,b)=>this._polymorphicAdd(F,b)),"FlowGraphAddBlock",F)}_polymorphicAdd(F,b){const Q=(0,N.j)(F),C=(0,N.j)(b);if((0,N.g)(Q,C)||(0,N.e)(Q,C)||(0,N.b)(Q,C))return F.add(b);if("Quaternion"===Q||"Vector4"===C)return new Z.Vector4(F.x,F.y,F.z,F.w).addInPlace(b);if("Vector4"===Q||"Quaternion"===C)return F.add(b);var z;if(null!==(z=this.config)&&void 0!==z&&z.preventIntegerFloatArithmetic&&typeof F!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,N.n)(F)+(0,N.n)(b)}}(0,C.g)("FlowGraphAddBlock",y);class E extends t.e{constructor(F){super((0,z.F)(null===F||void 0===F?void 0:F.type),(0,z.F)(null===F||void 0===F?void 0:F.type),(0,z.F)(null===F||void 0===F?void 0:F.type),((F,b)=>this._polymorphicSubtract(F,b)),"FlowGraphSubtractBlock",F)}_polymorphicSubtract(F,b){const Q=(0,N.j)(F),C=(0,N.j)(b);if((0,N.g)(Q,C)||(0,N.b)(Q,C)||(0,N.e)(Q,C))return F.WQ(b);if("Quaternion"===Q||"Vector4"===C)return new Z.Vector4(F.x,F.y,F.z,F.w).PK(b);if("Vector4"===Q||"Quaternion"===C)return F.WQ(b);var z;if(null!==(z=this.config)&&void 0!==z&&z.preventIntegerFloatArithmetic&&typeof F!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,N.n)(F)-(0,N.n)(b)}}(0,C.g)("FlowGraphSubtractBlock",E);class c extends t.e{constructor(F){super((0,z.F)(null===F||void 0===F?void 0:F.type),(0,z.F)(null===F||void 0===F?void 0:F.type),(0,z.F)(null===F||void 0===F?void 0:F.type),((F,b)=>this._polymorphicMultiply(F,b)),"FlowGraphMultiplyBlock",F)}_polymorphicMultiply(F,b){const Q=(0,N.j)(F),C=(0,N.j)(b);if((0,N.g)(Q,C)||(0,N.b)(Q,C))return F.multiply(b);if("Quaternion"===Q||"Vector4"===C)return new Z.Vector4(F.x,F.y,F.z,F.w).multiplyInPlace(b);if("Vector4"===Q||"Quaternion"===C)return F.multiply(b);if((0,N.e)(Q,C)){var z;if(null!==(z=this.config)&&void 0!==z&&z.useMatrixPerComponent){const C=F.m;for(let F=0;F<C.length;F++)C[F]*=b.m[F];return"Matrix2D"===Q?new e.b(C):"Matrix3D"===Q?new e.e(C):Z.Matrix.KQ(C)}return b.multiply(F)}var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof F!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,N.n)(F)*(0,N.n)(b)}}(0,C.g)("FlowGraphMultiplyBlock",c);class X extends t.e{constructor(F){super((0,z.F)(null===F||void 0===F?void 0:F.type),(0,z.F)(null===F||void 0===F?void 0:F.type),(0,z.F)(null===F||void 0===F?void 0:F.type),((F,b)=>this._polymorphicDivide(F,b)),"FlowGraphDivideBlock",F)}_polymorphicDivide(F,b){const Q=(0,N.j)(F),C=(0,N.j)(b);if((0,N.g)(Q,C)||(0,N.b)(Q,C))return F.divide(b);if("Quaternion"===Q||"Quaternion"===C){const Q=F.clone();return Q.x/=b.x,Q.y/=b.y,Q.z/=b.z,Q.w/=b.w,Q}if("Quaternion"===Q||"Vector4"===C)return new Z.Vector4(F.x,F.y,F.z,F.w).divideInPlace(b);if("Vector4"===Q||"Quaternion"===C)return F.divide(b);if((0,N.e)(Q,C)){var z;if(null!==(z=this.config)&&void 0!==z&&z.useMatrixPerComponent){const C=F.m;for(let F=0;F<C.length;F++)C[F]/=b.m[F];return"Matrix2D"===Q?new e.b(C):"Matrix3D"===Q?new e.e(C):Z.Matrix.KQ(C)}return F.divide(b)}var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof F!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,N.n)(F)/(0,N.n)(b)}}(0,C.g)("FlowGraphDivideBlock",X);class L extends W{constructor(F){super(z.m,(F=>this._random(F)),"FlowGraphRandomBlock",F),this.min=this.registerDataInput("min",z.m,(null===F||void 0===F?void 0:F.min)??0),this.max=this.registerDataInput("max",z.m,(null===F||void 0===F?void 0:F.max)??1),null!==F&&void 0!==F&&F.seed&&(this._seed=F.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const F=1e4*Math.sin(this._seed++);return F-Math.floor(F)}return Math.random()}_random(F){const b=this.min.getValue(F),Q=this.max.getValue(F);return this._getRandomValue()*(Q-b)+b}}(0,C.g)("FlowGraphRandomBlock",L);class i extends W{constructor(F){super(z.m,(()=>Math.E),"FlowGraphEBlock",F)}}(0,C.g)("FlowGraphEBlock",i);class f extends W{constructor(F){super(z.m,(()=>Math.PI),"FlowGraphPIBlock",F)}}(0,C.g)("FlowGraphPIBlock",f);class k extends W{constructor(F){super(z.m,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",F)}}(0,C.g)("FlowGraphInfBlock",k);class m extends W{constructor(F){super(z.m,(()=>Number.NaN),"FlowGraphNaNBlock",F)}}function R(F,b){switch((0,N.j)(F)){case"FlowGraphInteger":return new K.b(b(F.value));case"Vector2":return new Z.Vector2(b(F.x),b(F.y));case"gQ":return new Z.gQ(b(F.x),b(F.y),b(F.z));case"Vector4":return new Z.Vector4(b(F.x),b(F.y),b(F.z),b(F.w));case"Quaternion":return new Z.Quaternion(b(F.x),b(F.y),b(F.z),b(F.w));case"Matrix":return Z.Matrix.KQ(F.m.map(b));case"Matrix2D":return new e.b(F.m.map(b));case"Matrix3D":return new e.e(F.m.map(b));default:return b(F)}}(0,C.g)("FlowGraphNaNBlock",m);class p extends q.d{constructor(F){super(z.m,z.m,(F=>this._polymorphicAbs(F)),"FlowGraphAbsBlock",F)}_polymorphicAbs(F){return R(F,Math.abs)}}(0,C.g)("FlowGraphAbsBlock",p);class D extends q.d{constructor(F){super(z.m,z.m,(F=>this._polymorphicSign(F)),"FlowGraphSignBlock",F)}_polymorphicSign(F){return R(F,Math.sign)}}(0,C.g)("FlowGraphSignBlock",D);class P extends q.d{constructor(F){super(z.m,z.m,(F=>this._polymorphicTrunc(F)),"FlowGraphTruncBlock",F)}_polymorphicTrunc(F){return R(F,Math.trunc)}}(0,C.g)("FlowGraphTruncBlock",P);class n extends q.d{constructor(F){super(z.m,z.m,(F=>this._polymorphicFloor(F)),"FlowGraphFloorBlock",F)}_polymorphicFloor(F){return R(F,Math.floor)}}(0,C.g)("FlowGraphFloorBlock",n);class j extends q.d{constructor(F){super(z.b,z.b,(F=>this._polymorphicCeiling(F)),"FlowGraphCeilBlock",F)}_polymorphicCeiling(F){return R(F,Math.ceil)}}(0,C.g)("FlowGraphCeilBlock",j);class w extends q.d{constructor(F){super(z.b,z.b,(F=>this._polymorphicRound(F)),"FlowGraphRoundBlock",F)}_polymorphicRound(F){return R(F,(F=>{var b;return F<0&&null!==(b=this.config)&&void 0!==b&&b.roundHalfAwayFromZero?-Math.round(-F):Math.round(F)}))}}(0,C.g)("FlowGraphRoundBlock",w);class Y extends q.d{constructor(F){super(z.b,z.b,(F=>this._polymorphicFraction(F)),"FlowGraphFractBlock",F)}_polymorphicFraction(F){return R(F,(F=>F-Math.floor(F)))}}(0,C.g)("FlowGraphFractBlock",Y);class s extends q.d{constructor(F){super(z.b,z.b,(F=>this._polymorphicNeg(F)),"FlowGraphNegationBlock",F)}_polymorphicNeg(F){return R(F,(F=>-F))}}function V(F,b,Q){switch((0,N.j)(F)){case"FlowGraphInteger":return new K.b(Q(F.value,b.value));case"Vector2":return new Z.Vector2(Q(F.x,b.x),Q(F.y,b.y));case"gQ":return new Z.gQ(Q(F.x,b.x),Q(F.y,b.y),Q(F.z,b.z));case"Vector4":return new Z.Vector4(Q(F.x,b.x),Q(F.y,b.y),Q(F.z,b.z),Q(F.w,b.w));case"Quaternion":return new Z.Quaternion(Q(F.x,b.x),Q(F.y,b.y),Q(F.z,b.z),Q(F.w,b.w));case"Matrix":return Z.Matrix.KQ(F.m.map(((F,C)=>Q(F,b.m[C]))));case"Matrix2D":return new e.b(F.m.map(((F,C)=>Q(F,b.m[C]))));case"Matrix3D":return new e.e(F.m.map(((F,C)=>Q(F,b.m[C]))));default:return Q((0,N.n)(F),(0,N.n)(b))}}(0,C.g)("FlowGraphNegationBlock",s);class h extends t.e{constructor(F){super(z.b,z.b,z.b,((F,b)=>this._polymorphicRemainder(F,b)),"FlowGraphModuloBlock",F)}_polymorphicRemainder(F,b){return V(F,b,((F,b)=>F%b))}}(0,C.g)("FlowGraphModuloBlock",h);class l extends t.e{constructor(F){super(z.b,z.b,z.b,((F,b)=>this._polymorphicMin(F,b)),"FlowGraphMinBlock",F)}_polymorphicMin(F,b){return V(F,b,Math.min)}}(0,C.g)("FlowGraphMinBlock",l);class T extends t.e{constructor(F){super(z.b,z.b,z.b,((F,b)=>this._polymorphicMax(F,b)),"FlowGraphMaxBlock",F)}_polymorphicMax(F,b){return V(F,b,Math.max)}}function o(F,b,Q){return Math.min(Math.max(F,Math.min(b,Q)),Math.max(b,Q))}function S(F,b,Q,C){switch((0,N.j)(F)){case"FlowGraphInteger":return new K.b(C(F.value,b.value,Q.value));case"Vector2":return new Z.Vector2(C(F.x,b.x,Q.x),C(F.y,b.y,Q.y));case"gQ":return new Z.gQ(C(F.x,b.x,Q.x),C(F.y,b.y,Q.y),C(F.z,b.z,Q.z));case"Vector4":return new Z.Vector4(C(F.x,b.x,Q.x),C(F.y,b.y,Q.y),C(F.z,b.z,Q.z),C(F.w,b.w,Q.w));case"Quaternion":return new Z.Quaternion(C(F.x,b.x,Q.x),C(F.y,b.y,Q.y),C(F.z,b.z,Q.z),C(F.w,b.w,Q.w));case"Matrix":return Z.Matrix.KQ(F.m.map(((F,z)=>C(F,b.m[z],Q.m[z]))));case"Matrix2D":return new e.b(F.m.map(((F,z)=>C(F,b.m[z],Q.m[z]))));case"Matrix3D":return new e.e(F.m.map(((F,z)=>C(F,b.m[z],Q.m[z]))));default:return C((0,N.n)(F),(0,N.n)(b),(0,N.n)(Q))}}(0,C.g)("FlowGraphMaxBlock",T);class O extends G{constructor(F){super(z.b,z.b,z.b,z.b,((F,b,Q)=>this._polymorphicClamp(F,b,Q)),"FlowGraphClampBlock",F)}_polymorphicClamp(F,b,Q){return S(F,b,Q,o)}}function x(F){return Math.min(Math.max(F,0),1)}(0,C.g)("FlowGraphClampBlock",O);class a extends q.d{constructor(F){super(z.b,z.b,(F=>this._polymorphicSaturate(F)),"FlowGraphSaturateBlock",F)}_polymorphicSaturate(F){return R(F,x)}}function A(F,b,Q){return(1-Q)*F+Q*b}(0,C.g)("FlowGraphSaturateBlock",a);class U extends G{constructor(F){super(z.b,z.b,z.b,z.b,((F,b,Q)=>this._polymorphicInterpolate(F,b,Q)),"FlowGraphMathInterpolationBlock",F)}_polymorphicInterpolate(F,b,Q){return S(F,b,Q,A)}}(0,C.g)("FlowGraphMathInterpolationBlock",U);class u extends t.e{constructor(F){super(z.b,z.b,z.e,((F,b)=>this._polymorphicEq(F,b)),"FlowGraphEqualityBlock",F)}_polymorphicEq(F,b){const Q=(0,N.j)(F),C=(0,N.j)(b);return typeof F===typeof b&&((0,N.g)(Q,C)||(0,N.e)(Q,C)||(0,N.b)(Q,C)?F.equals(b):F===b)}}function v(F,b,Q){if((0,N.q)(F)&&(0,N.q)(b))return Q((0,N.n)(F),(0,N.n)(b));throw new Error(`Cannot compare ${F} and ${b}`)}(0,C.g)("FlowGraphEqualityBlock",u);class J extends t.e{constructor(F){super(z.b,z.b,z.e,((F,b)=>this._polymorphicLessThan(F,b)),"FlowGraphLessThanBlock",F)}_polymorphicLessThan(F,b){return v(F,b,((F,b)=>F<b))}}(0,C.g)("FlowGraphLessThanBlock",J);class I extends t.e{constructor(F){super(z.b,z.b,z.e,((F,b)=>this._polymorphicLessThanOrEqual(F,b)),"FlowGraphLessThanOrEqualBlock",F)}_polymorphicLessThanOrEqual(F,b){return v(F,b,((F,b)=>F<=b))}}(0,C.g)("FlowGraphLessThanOrEqualBlock",I);class M extends t.e{constructor(F){super(z.b,z.b,z.e,((F,b)=>this._polymorphicGreaterThan(F,b)),"FlowGraphGreaterThanBlock",F)}_polymorphicGreaterThan(F,b){return v(F,b,((F,b)=>F>b))}}(0,C.g)("FlowGraphGreaterThanBlock",M);class r extends t.e{constructor(F){super(z.b,z.b,z.e,((F,b)=>this._polymorphicGreaterThanOrEqual(F,b)),"FlowGraphGreaterThanOrEqualBlock",F)}_polymorphicGreaterThanOrEqual(F,b){return v(F,b,((F,b)=>F>=b))}}(0,C.g)("FlowGraphGreaterThanOrEqualBlock",r);class H extends q.d{constructor(F){super(z.b,z.e,(F=>this._polymorphicIsNan(F)),"FlowGraphIsNaNBlock",F)}_polymorphicIsNan(F){if((0,N.q)(F,!0))return isNaN((0,N.n)(F));throw new Error(`Cannot get NaN of ${F}`)}}(0,C.g)("FlowGraphIsNaNBlock",H);class B extends q.d{constructor(F){super(z.b,z.e,(F=>this._polymorphicIsInf(F)),"FlowGraphIsInfBlock",F)}_polymorphicIsInf(F){if((0,N.q)(F))return!isFinite((0,N.n)(F));throw new Error(`Cannot get isInf of ${F}`)}}(0,C.g)("FlowGraphIsInfBlock",B);class d extends q.d{constructor(F){super(z.b,z.b,(F=>this._polymorphicDegToRad(F)),"FlowGraphDegToRadBlock",F)}_degToRad(F){return F*Math.PI/180}_polymorphicDegToRad(F){return R(F,this._degToRad)}}(0,C.g)("FlowGraphDegToRadBlock",d);class FF extends q.d{constructor(F){super(z.b,z.b,(F=>this._polymorphicRadToDeg(F)),"FlowGraphRadToDegBlock",F)}_radToDeg(F){return 180*F/Math.PI}_polymorphicRadToDeg(F){return R(F,this._radToDeg)}}(0,C.g)("FlowGraphRadToDegBlock",FF);class bF extends q.d{constructor(F){super(z.m,z.m,(F=>this._polymorphicSin(F)),"FlowGraphSinBlock",F)}_polymorphicSin(F){return R(F,Math.sin)}}class QF extends q.d{constructor(F){super(z.m,z.m,(F=>this._polymorphicCos(F)),"FlowGraphCosBlock",F)}_polymorphicCos(F){return R(F,Math.cos)}}class CF extends q.d{constructor(F){super(z.m,z.m,(F=>this._polymorphicTan(F)),"FlowGraphTanBlock",F)}_polymorphicTan(F){return R(F,Math.tan)}}class zF extends q.d{constructor(F){super(z.m,z.m,(F=>this._polymorphicAsin(F)),"FlowGraphASinBlock",F)}_polymorphicAsin(F){return R(F,Math.asin)}}(0,C.g)("FlowGraphASinBlock",zF);class tF extends q.d{constructor(F){super(z.m,z.m,(F=>this._polymorphicAcos(F)),"FlowGraphACosBlock",F)}_polymorphicAcos(F){return R(F,Math.acos)}}(0,C.g)("FlowGraphACosBlock",tF);class gF extends q.d{constructor(F){super(z.m,z.m,(F=>this._polymorphicAtan(F)),"FlowGraphATanBlock",F)}_polymorphicAtan(F){return R(F,Math.atan)}}(0,C.g)("FlowGraphATanBlock",gF);class WF extends t.e{constructor(F){super(z.b,z.b,z.b,((F,b)=>this._polymorphicAtan2(F,b)),"FlowGraphATan2Block",F)}_polymorphicAtan2(F,b){return V(F,b,Math.atan2)}}(0,C.g)("FlowGraphATan2Block",WF);class ZF extends q.d{constructor(F){super(z.b,z.b,(F=>this._polymorphicSinh(F)),"FlowGraphSinhBlock",F)}_polymorphicSinh(F){return R(F,Math.sinh)}}(0,C.g)("FlowGraphSinhBlock",ZF);class qF extends q.d{constructor(F){super(z.b,z.b,(F=>this._polymorphicCosh(F)),"FlowGraphCoshBlock",F)}_polymorphicCosh(F){return R(F,Math.cosh)}}(0,C.g)("FlowGraphCoshBlock",qF);class GF extends q.d{constructor(F){super(z.b,z.b,(F=>this._polymorphicTanh(F)),"FlowGraphTanhBlock",F)}_polymorphicTanh(F){return R(F,Math.tanh)}}(0,C.g)("FlowGraphTanhBlock",GF);class KF extends q.d{constructor(F){super(z.b,z.m,(F=>this._polymorphicAsinh(F)),"FlowGraphASinhBlock",F)}_polymorphicAsinh(F){return R(F,Math.asinh)}}(0,C.g)("FlowGraphASinhBlock",KF);class eF extends q.d{constructor(F){super(z.b,z.m,(F=>this._polymorphicAcosh(F)),"FlowGraphACoshBlock",F)}_polymorphicAcosh(F){return R(F,Math.acosh)}}(0,C.g)("FlowGraphACoshBlock",eF);class NF extends q.d{constructor(F){super(z.b,z.m,(F=>this._polymorphicAtanh(F)),"FlowGraphATanhBlock",F)}_polymorphicAtanh(F){return R(F,Math.atanh)}}(0,C.g)("FlowGraphATanhBlock",NF);class yF extends q.d{constructor(F){super(z.b,z.m,(F=>this._polymorphicExp(F)),"FlowGraphExponentialBlock",F)}_polymorphicExp(F){return R(F,Math.exp)}}(0,C.g)("FlowGraphExponentialBlock",yF);class EF extends q.d{constructor(F){super(z.b,z.m,(F=>this._polymorphicLog(F)),"FlowGraphLogBlock",F)}_polymorphicLog(F){return R(F,Math.log)}}(0,C.g)("FlowGraphLogBlock",EF);class cF extends q.d{constructor(F){super(z.b,z.m,(F=>this._polymorphicLog2(F)),"FlowGraphLog2Block",F)}_polymorphicLog2(F){return R(F,Math.log2)}}(0,C.g)("FlowGraphLog2Block",cF);class XF extends q.d{constructor(F){super(z.b,z.m,(F=>this._polymorphicLog10(F)),"FlowGraphLog10Block",F)}_polymorphicLog10(F){return R(F,Math.log10)}}(0,C.g)("FlowGraphLog10Block",XF);class LF extends q.d{constructor(F){super(z.b,z.m,(F=>this._polymorphicSqrt(F)),"FlowGraphSquareRootBlock",F)}_polymorphicSqrt(F){return R(F,Math.sqrt)}}(0,C.g)("FlowGraphSquareRootBlock",LF);class iF extends q.d{constructor(F){super(z.b,z.m,(F=>this._polymorphicCubeRoot(F)),"FlowGraphCubeRootBlock",F)}_polymorphicCubeRoot(F){return R(F,Math.cbrt)}}(0,C.g)("FlowGraphCubeRootBlock",iF);class fF extends t.e{constructor(F){super(z.b,z.m,z.m,((F,b)=>this._polymorphicPow(F,b)),"FlowGraphPowerBlock",F)}_polymorphicPow(F,b){return V(F,b,Math.pow)}}(0,C.g)("FlowGraphPowerBlock",fF);class kF extends q.d{constructor(F){super((0,z.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),(0,z.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),(F=>"boolean"===typeof F?!F:"number"===typeof F?~F:new K.b(~F.value)),"FlowGraphBitwiseNotBlock",F)}}(0,C.g)("FlowGraphBitwiseNotBlock",kF);class mF extends t.e{constructor(F){super((0,z.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),(0,z.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),(0,z.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),((F,b)=>{if("boolean"===typeof F&&"boolean"===typeof b)return F&&b;if("number"===typeof F&&"number"===typeof b)return F&b;if("object"===typeof F&&"object"===typeof b)return new K.b(F.value&b.value);throw new Error(`Cannot perform bitwise AND on ${F} and ${b}`)}),"FlowGraphBitwiseAndBlock",F)}}(0,C.g)("FlowGraphBitwiseAndBlock",mF);class RF extends t.e{constructor(F){super((0,z.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),(0,z.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),(0,z.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),((F,b)=>{if("boolean"===typeof F&&"boolean"===typeof b)return F||b;if("number"===typeof F&&"number"===typeof b)return F|b;if("object"===typeof F&&"object"===typeof b)return new K.b(F.value|b.value);throw new Error(`Cannot perform bitwise OR on ${F} and ${b}`)}),"FlowGraphBitwiseOrBlock",F)}}(0,C.g)("FlowGraphBitwiseOrBlock",RF);class pF extends t.e{constructor(F){super((0,z.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),(0,z.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),(0,z.F)((null===F||void 0===F?void 0:F.valueType)||"FlowGraphInteger"),((F,b)=>{if("boolean"===typeof F&&"boolean"===typeof b)return F!==b;if("number"===typeof F&&"number"===typeof b)return F^b;if("object"===typeof F&&"object"===typeof b)return new K.b(F.value^b.value);throw new Error(`Cannot perform bitwise XOR on ${F} and ${b}`)}),"FlowGraphBitwiseXorBlock",F)}}(0,C.g)("FlowGraphBitwiseXorBlock",pF);class DF extends t.e{constructor(F){super(z.g,z.g,z.g,((F,b)=>new K.b(F.value<<b.value)),"FlowGraphBitwiseLeftShiftBlock",F)}}(0,C.g)("FlowGraphBitwiseLeftShiftBlock",DF);class PF extends t.e{constructor(F){super(z.g,z.g,z.g,((F,b)=>new K.b(F.value>>b.value)),"FlowGraphBitwiseRightShiftBlock",F)}}(0,C.g)("FlowGraphBitwiseRightShiftBlock",PF);class nF extends q.d{constructor(F){super(z.g,z.g,(F=>new K.b(Math.clz32(F.value))),"FlowGraphLeadingZerosBlock",F)}}(0,C.g)("FlowGraphLeadingZerosBlock",nF);class jF extends q.d{constructor(F){super(z.g,z.g,(F=>new K.b(F.value?31-Math.clz32(F.value&-F.value):32)),"FlowGraphTrailingZerosBlock",F)}}(0,C.g)("FlowGraphTrailingZerosBlock",jF);class wF extends q.d{constructor(F){super(z.g,z.g,(F=>new K.b(function(F){let b=0;for(;F;)b+=1&F,F>>=1;return b}(F.value))),"FlowGraphOneBitsCounterBlock",F)}}(0,C.g)("FlowGraphOneBitsCounterBlock",wF)},14467:(F,b,Q)=>{Q.d(b,{e:()=>z});var C=Q(14472);class z extends C.b{constructor(F,b,Q,C,z,t){super(Q,t),this._operation=C,this._className=z,this.a=this.registerDataInput("a",F),this.b=this.registerDataInput("b",b)}_doOperation(F){const b=this.a.getValue(F),Q=this.b.getValue(F);return this._operation(b,Q)}getClassName(){return this._className}}},14472:(F,b,Q)=>{Q.d(b,{b:()=>W});var C=Q(12972),z=Q(12951);const t="cachedOperationValue",g="cachedExecutionId";class W extends C.b{constructor(F,b){super(b),this.value=this.registerDataOutput("value",F),this.isValid=this.registerDataOutput("isValid",z.e)}_updateOutputs(F){const b=F._getExecutionVariable(this,g,-1),Q=F._getExecutionVariable(this,t,null);if(void 0!==Q&&null!==Q&&b===F.executionId)this.isValid.setValue(!0,F),this.value.setValue(Q,F);else try{const b=this._doOperation(F);if(void 0===b||null===b)return void this.isValid.setValue(!1,F);F._setExecutionVariable(this,t,b),F._setExecutionVariable(this,g,F.executionId),this.value.setValue(b,F),this.isValid.setValue(!0,F)}catch(C){this.isValid.setValue(!1,F)}}}},14476:(F,b,Q)=>{Q.d(b,{d:()=>z});var C=Q(14472);class z extends C.b{constructor(F,b,Q,C,z){super(b,z),this._operation=Q,this._className=C,this.a=this.registerDataInput("a",F)}_doOperation(F){return this._operation(this.a.getValue(F))}getClassName(){return this._className}}}}]);