"use strict";(self.zy41qorie9=self.zy41qorie9||[]).push([[88],{15361:(Z,l,C)=>{C.r(l),C.d(l,{FlowGraphAbsBlock:()=>U,FlowGraphAcosBlock:()=>bZ,FlowGraphAcoshBlock:()=>GZ,FlowGraphAddBlock:()=>q,FlowGraphAsinBlock:()=>xZ,FlowGraphAsinhBlock:()=>EZ,FlowGraphAtan2Block:()=>fZ,FlowGraphAtanBlock:()=>KZ,FlowGraphAtanhBlock:()=>aZ,FlowGraphBitwiseAndBlock:()=>nZ,FlowGraphBitwiseLeftShiftBlock:()=>tZ,FlowGraphBitwiseNotBlock:()=>FZ,FlowGraphBitwiseOrBlock:()=>cZ,FlowGraphBitwiseRightShiftBlock:()=>rZ,FlowGraphBitwiseXorBlock:()=>UZ,FlowGraphCeilBlock:()=>o,FlowGraphClampBlock:()=>O,FlowGraphCosBlock:()=>CZ,FlowGraphCoshBlock:()=>JZ,FlowGraphCubeRootBlock:()=>iZ,FlowGraphDegToRadBlock:()=>mZ,FlowGraphDivideBlock:()=>P,FlowGraphEBlock:()=>i,FlowGraphEqualityBlock:()=>u,FlowGraphExpBlock:()=>qZ,FlowGraphFloorBlock:()=>e,FlowGraphFractionBlock:()=>R,FlowGraphGreaterThanBlock:()=>A,FlowGraphGreaterThanOrEqualBlock:()=>L,FlowGraphInfBlock:()=>F,FlowGraphIsInfinityBlock:()=>N,FlowGraphIsNanBlock:()=>p,FlowGraphLeadingZerosBlock:()=>eZ,FlowGraphLessThanBlock:()=>Q,FlowGraphLessThanOrEqualBlock:()=>h,FlowGraphLog10Block:()=>PZ,FlowGraphLog2Block:()=>YZ,FlowGraphLogBlock:()=>zZ,FlowGraphMathInterpolationBlock:()=>T,FlowGraphMaxBlock:()=>M,FlowGraphMinBlock:()=>j,FlowGraphModuloBlock:()=>g,FlowGraphMultiplyBlock:()=>Y,FlowGraphNaNBlock:()=>n,FlowGraphNegationBlock:()=>k,FlowGraphOneBitsCounterBlock:()=>vZ,FlowGraphPiBlock:()=>s,FlowGraphPowerBlock:()=>sZ,FlowGraphRadToDegBlock:()=>ZZ,FlowGraphRandomBlock:()=>S,FlowGraphRoundBlock:()=>v,FlowGraphSaturateBlock:()=>y,FlowGraphSignBlock:()=>t,FlowGraphSinBlock:()=>lZ,FlowGraphSinhBlock:()=>WZ,FlowGraphSquareRootBlock:()=>SZ,FlowGraphSubtractBlock:()=>z,FlowGraphTanBlock:()=>BZ,FlowGraphTanhBlock:()=>dZ,FlowGraphTrailingZerosBlock:()=>oZ,FlowGraphTruncBlock:()=>r});var B=C(12400),x=C(13830),b=C(15370),K=C(15377);class f extends K.b{constructor(Z,l,C,B){super(Z,B),this._operation=l,this._className=C}_doOperation(Z){return this._operation(Z)}getClassName(){return this._className}}var W=C(12442),J=C(15383);class d extends K.b{constructor(Z,l,C,B,x,b,K){super(B,K),this._operation=x,this._className=b,this.a=this.registerDataInput("a",Z),this.b=this.registerDataInput("b",l),this.c=this.registerDataInput("c",C)}_doOperation(Z){return this._operation(this.a.getValue(Z),this.b.getValue(Z),this.c.getValue(Z))}getClassName(){return this._className}}var E=C(13828),G=C(13838),a=C(13861);class q extends b.b{constructor(Z){super((0,x.I)(null===Z||void 0===Z?void 0:Z.type),(0,x.I)(null===Z||void 0===Z?void 0:Z.type),(0,x.I)(null===Z||void 0===Z?void 0:Z.type),((Z,l)=>this._polymorphicAdd(Z,l)),"FlowGraphAddBlock",Z)}_polymorphicAdd(Z,l){const C=(0,a.i)(Z),B=(0,a.i)(l);if((0,a.h)(C,B)||(0,a.e)(C,B)||(0,a.c)(C,B))return Z.add(l);if("Quaternion"===C||"Vector4"===B)return new W.Vector4(Z.x,Z.y,Z.z,Z.w).addInPlace(l);if("Vector4"===C||"Quaternion"===B)return Z.add(l);var x;if(null!==(x=this.config)&&void 0!==x&&x.preventIntegerFloatArithmetic&&typeof Z!==typeof l)throw new Error("Cannot add different types of numbers.");return(0,a.n)(Z)+(0,a.n)(l)}}(0,B.c)("FlowGraphAddBlock",q);class z extends b.b{constructor(Z){super((0,x.I)(null===Z||void 0===Z?void 0:Z.type),(0,x.I)(null===Z||void 0===Z?void 0:Z.type),(0,x.I)(null===Z||void 0===Z?void 0:Z.type),((Z,l)=>this._polymorphicSubtract(Z,l)),"FlowGraphSubtractBlock",Z)}_polymorphicSubtract(Z,l){const C=(0,a.i)(Z),B=(0,a.i)(l);if((0,a.h)(C,B)||(0,a.c)(C,B)||(0,a.e)(C,B))return Z.zl(l);if("Quaternion"===C||"Vector4"===B)return new W.Vector4(Z.x,Z.y,Z.z,Z.w).JG(l);if("Vector4"===C||"Quaternion"===B)return Z.zl(l);var x;if(null!==(x=this.config)&&void 0!==x&&x.preventIntegerFloatArithmetic&&typeof Z!==typeof l)throw new Error("Cannot add different types of numbers.");return(0,a.n)(Z)-(0,a.n)(l)}}(0,B.c)("FlowGraphSubtractBlock",z);class Y extends b.b{constructor(Z){super((0,x.I)(null===Z||void 0===Z?void 0:Z.type),(0,x.I)(null===Z||void 0===Z?void 0:Z.type),(0,x.I)(null===Z||void 0===Z?void 0:Z.type),((Z,l)=>this._polymorphicMultiply(Z,l)),"FlowGraphMultiplyBlock",Z)}_polymorphicMultiply(Z,l){const C=(0,a.i)(Z),B=(0,a.i)(l);if((0,a.h)(C,B)||(0,a.c)(C,B))return Z.multiply(l);if("Quaternion"===C||"Vector4"===B)return new W.Vector4(Z.x,Z.y,Z.z,Z.w).multiplyInPlace(l);if("Vector4"===C||"Quaternion"===B)return Z.multiply(l);if((0,a.e)(C,B)){var x;if(null!==(x=this.config)&&void 0!==x&&x.useMatrixPerComponent){const B=Z.m;for(let Z=0;Z<B.length;Z++)B[Z]*=l.m[Z];return"Matrix2D"===C?new G.b(B):"Matrix3D"===C?new G.f(B):W.Matrix.il(B)}return l.multiply(Z)}var b;if(null!==(b=this.config)&&void 0!==b&&b.preventIntegerFloatArithmetic&&typeof Z!==typeof l)throw new Error("Cannot add different types of numbers.");return(0,a.n)(Z)*(0,a.n)(l)}}(0,B.c)("FlowGraphMultiplyBlock",Y);class P extends b.b{constructor(Z){super((0,x.I)(null===Z||void 0===Z?void 0:Z.type),(0,x.I)(null===Z||void 0===Z?void 0:Z.type),(0,x.I)(null===Z||void 0===Z?void 0:Z.type),((Z,l)=>this._polymorphicDivide(Z,l)),"FlowGraphDivideBlock",Z)}_polymorphicDivide(Z,l){const C=(0,a.i)(Z),B=(0,a.i)(l);if((0,a.h)(C,B)||(0,a.c)(C,B))return Z.divide(l);if("Quaternion"===C||"Quaternion"===B){const C=Z.clone();return C.x/=l.x,C.y/=l.y,C.z/=l.z,C.w/=l.w,C}if("Quaternion"===C||"Vector4"===B)return new W.Vector4(Z.x,Z.y,Z.z,Z.w).divideInPlace(l);if("Vector4"===C||"Quaternion"===B)return Z.divide(l);if((0,a.e)(C,B)){var x;if(null!==(x=this.config)&&void 0!==x&&x.useMatrixPerComponent){const B=Z.m;for(let Z=0;Z<B.length;Z++)B[Z]/=l.m[Z];return"Matrix2D"===C?new G.b(B):"Matrix3D"===C?new G.f(B):W.Matrix.il(B)}return Z.divide(l)}var b;if(null!==(b=this.config)&&void 0!==b&&b.preventIntegerFloatArithmetic&&typeof Z!==typeof l)throw new Error("Cannot add different types of numbers.");return(0,a.n)(Z)/(0,a.n)(l)}}(0,B.c)("FlowGraphDivideBlock",P);class S extends f{constructor(Z){super(x.o,(Z=>this._random(Z)),"FlowGraphRandomBlock",Z),this.min=this.registerDataInput("min",x.o,(null===Z||void 0===Z?void 0:Z.min)??0),this.max=this.registerDataInput("max",x.o,(null===Z||void 0===Z?void 0:Z.max)??1),null!==Z&&void 0!==Z&&Z.seed&&(this._seed=Z.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const Z=1e4*Math.sin(this._seed++);return Z-Math.floor(Z)}return Math.random()}_random(Z){const l=this.min.getValue(Z),C=this.max.getValue(Z);return this._getRandomValue()*(C-l)+l}}(0,B.c)("FlowGraphRandomBlock",S);class i extends f{constructor(Z){super(x.o,(()=>Math.E),"FlowGraphEBlock",Z)}}(0,B.c)("FlowGraphEBlock",i);class s extends f{constructor(Z){super(x.o,(()=>Math.PI),"FlowGraphPIBlock",Z)}}(0,B.c)("FlowGraphPIBlock",s);class F extends f{constructor(Z){super(x.o,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",Z)}}(0,B.c)("FlowGraphInfBlock",F);class n extends f{constructor(Z){super(x.o,(()=>Number.NaN),"FlowGraphNaNBlock",Z)}}function c(Z,l){switch((0,a.i)(Z)){case"FlowGraphInteger":return new E.b(l(Z.value));case"Vector2":return new W.Vector2(l(Z.x),l(Z.y));case"ql":return new W.ql(l(Z.x),l(Z.y),l(Z.z));case"Vector4":return new W.Vector4(l(Z.x),l(Z.y),l(Z.z),l(Z.w));case"Quaternion":return new W.Quaternion(l(Z.x),l(Z.y),l(Z.z),l(Z.w));case"Matrix":return W.Matrix.il(Z.m.map(l));case"Matrix2D":return new G.b(Z.m.map(l));case"Matrix3D":return new G.f(Z.m.map(l));default:return l(Z)}}(0,B.c)("FlowGraphNaNBlock",n);class U extends J.c{constructor(Z){super(x.o,x.o,(Z=>this._polymorphicAbs(Z)),"FlowGraphAbsBlock",Z)}_polymorphicAbs(Z){return c(Z,Math.abs)}}(0,B.c)("FlowGraphAbsBlock",U);class t extends J.c{constructor(Z){super(x.o,x.o,(Z=>this._polymorphicSign(Z)),"FlowGraphSignBlock",Z)}_polymorphicSign(Z){return c(Z,Math.sign)}}(0,B.c)("FlowGraphSignBlock",t);class r extends J.c{constructor(Z){super(x.o,x.o,(Z=>this._polymorphicTrunc(Z)),"FlowGraphTruncBlock",Z)}_polymorphicTrunc(Z){return c(Z,Math.trunc)}}(0,B.c)("FlowGraphTruncBlock",r);class e extends J.c{constructor(Z){super(x.o,x.o,(Z=>this._polymorphicFloor(Z)),"FlowGraphFloorBlock",Z)}_polymorphicFloor(Z){return c(Z,Math.floor)}}(0,B.c)("FlowGraphFloorBlock",e);class o extends J.c{constructor(Z){super(x.c,x.c,(Z=>this._polymorphicCeiling(Z)),"FlowGraphCeilBlock",Z)}_polymorphicCeiling(Z){return c(Z,Math.ceil)}}(0,B.c)("FlowGraphCeilBlock",o);class v extends J.c{constructor(Z){super(x.c,x.c,(Z=>this._polymorphicRound(Z)),"FlowGraphRoundBlock",Z)}_polymorphicRound(Z){return c(Z,(Z=>{var l;return Z<0&&null!==(l=this.config)&&void 0!==l&&l.roundHalfAwayFromZero?-Math.round(-Z):Math.round(Z)}))}}(0,B.c)("FlowGraphRoundBlock",v);class R extends J.c{constructor(Z){super(x.c,x.c,(Z=>this._polymorphicFraction(Z)),"FlowGraphFractBlock",Z)}_polymorphicFraction(Z){return c(Z,(Z=>Z-Math.floor(Z)))}}(0,B.c)("FlowGraphFractBlock",R);class k extends J.c{constructor(Z){super(x.c,x.c,(Z=>this._polymorphicNeg(Z)),"FlowGraphNegationBlock",Z)}_polymorphicNeg(Z){return c(Z,(Z=>-Z))}}function V(Z,l,C){switch((0,a.i)(Z)){case"FlowGraphInteger":return new E.b(C(Z.value,l.value));case"Vector2":return new W.Vector2(C(Z.x,l.x),C(Z.y,l.y));case"ql":return new W.ql(C(Z.x,l.x),C(Z.y,l.y),C(Z.z,l.z));case"Vector4":return new W.Vector4(C(Z.x,l.x),C(Z.y,l.y),C(Z.z,l.z),C(Z.w,l.w));case"Quaternion":return new W.Quaternion(C(Z.x,l.x),C(Z.y,l.y),C(Z.z,l.z),C(Z.w,l.w));case"Matrix":return W.Matrix.il(Z.m.map(((Z,B)=>C(Z,l.m[B]))));case"Matrix2D":return new G.b(Z.m.map(((Z,B)=>C(Z,l.m[B]))));case"Matrix3D":return new G.f(Z.m.map(((Z,B)=>C(Z,l.m[B]))));default:return C((0,a.n)(Z),(0,a.n)(l))}}(0,B.c)("FlowGraphNegationBlock",k);class g extends b.b{constructor(Z){super(x.c,x.c,x.c,((Z,l)=>this._polymorphicRemainder(Z,l)),"FlowGraphModuloBlock",Z)}_polymorphicRemainder(Z,l){return V(Z,l,((Z,l)=>Z%l))}}(0,B.c)("FlowGraphModuloBlock",g);class j extends b.b{constructor(Z){super(x.c,x.c,x.c,((Z,l)=>this._polymorphicMin(Z,l)),"FlowGraphMinBlock",Z)}_polymorphicMin(Z,l){return V(Z,l,Math.min)}}(0,B.c)("FlowGraphMinBlock",j);class M extends b.b{constructor(Z){super(x.c,x.c,x.c,((Z,l)=>this._polymorphicMax(Z,l)),"FlowGraphMaxBlock",Z)}_polymorphicMax(Z,l){return V(Z,l,Math.max)}}function I(Z,l,C){return Math.min(Math.max(Z,Math.min(l,C)),Math.max(l,C))}function w(Z,l,C,B){switch((0,a.i)(Z)){case"FlowGraphInteger":return new E.b(B(Z.value,l.value,C.value));case"Vector2":return new W.Vector2(B(Z.x,l.x,C.x),B(Z.y,l.y,C.y));case"ql":return new W.ql(B(Z.x,l.x,C.x),B(Z.y,l.y,C.y),B(Z.z,l.z,C.z));case"Vector4":return new W.Vector4(B(Z.x,l.x,C.x),B(Z.y,l.y,C.y),B(Z.z,l.z,C.z),B(Z.w,l.w,C.w));case"Quaternion":return new W.Quaternion(B(Z.x,l.x,C.x),B(Z.y,l.y,C.y),B(Z.z,l.z,C.z),B(Z.w,l.w,C.w));case"Matrix":return W.Matrix.il(Z.m.map(((Z,x)=>B(Z,l.m[x],C.m[x]))));case"Matrix2D":return new G.b(Z.m.map(((Z,x)=>B(Z,l.m[x],C.m[x]))));case"Matrix3D":return new G.f(Z.m.map(((Z,x)=>B(Z,l.m[x],C.m[x]))));default:return B((0,a.n)(Z),(0,a.n)(l),(0,a.n)(C))}}(0,B.c)("FlowGraphMaxBlock",M);class O extends d{constructor(Z){super(x.c,x.c,x.c,x.c,((Z,l,C)=>this._polymorphicClamp(Z,l,C)),"FlowGraphClampBlock",Z)}_polymorphicClamp(Z,l,C){return w(Z,l,C,I)}}function D(Z){return Math.min(Math.max(Z,0),1)}(0,B.c)("FlowGraphClampBlock",O);class y extends J.c{constructor(Z){super(x.c,x.c,(Z=>this._polymorphicSaturate(Z)),"FlowGraphSaturateBlock",Z)}_polymorphicSaturate(Z){return c(Z,D)}}function X(Z,l,C){return(1-C)*Z+C*l}(0,B.c)("FlowGraphSaturateBlock",y);class T extends d{constructor(Z){super(x.c,x.c,x.c,x.c,((Z,l,C)=>this._polymorphicInterpolate(Z,l,C)),"FlowGraphMathInterpolationBlock",Z)}_polymorphicInterpolate(Z,l,C){return w(Z,l,C,X)}}(0,B.c)("FlowGraphMathInterpolationBlock",T);class u extends b.b{constructor(Z){super(x.c,x.c,x.e,((Z,l)=>this._polymorphicEq(Z,l)),"FlowGraphEqualityBlock",Z)}_polymorphicEq(Z,l){const C=(0,a.i)(Z),B=(0,a.i)(l);return typeof Z===typeof l&&((0,a.h)(C,B)||(0,a.e)(C,B)||(0,a.c)(C,B)?Z.equals(l):Z===l)}}function H(Z,l,C){if((0,a.p)(Z)&&(0,a.p)(l))return C((0,a.n)(Z),(0,a.n)(l));throw new Error(`Cannot compare ${Z} and ${l}`)}(0,B.c)("FlowGraphEqualityBlock",u);class Q extends b.b{constructor(Z){super(x.c,x.c,x.e,((Z,l)=>this._polymorphicLessThan(Z,l)),"FlowGraphLessThanBlock",Z)}_polymorphicLessThan(Z,l){return H(Z,l,((Z,l)=>Z<l))}}(0,B.c)("FlowGraphLessThanBlock",Q);class h extends b.b{constructor(Z){super(x.c,x.c,x.e,((Z,l)=>this._polymorphicLessThanOrEqual(Z,l)),"FlowGraphLessThanOrEqualBlock",Z)}_polymorphicLessThanOrEqual(Z,l){return H(Z,l,((Z,l)=>Z<=l))}}(0,B.c)("FlowGraphLessThanOrEqualBlock",h);class A extends b.b{constructor(Z){super(x.c,x.c,x.e,((Z,l)=>this._polymorphicGreaterThan(Z,l)),"FlowGraphGreaterThanBlock",Z)}_polymorphicGreaterThan(Z,l){return H(Z,l,((Z,l)=>Z>l))}}(0,B.c)("FlowGraphGreaterThanBlock",A);class L extends b.b{constructor(Z){super(x.c,x.c,x.e,((Z,l)=>this._polymorphicGreaterThanOrEqual(Z,l)),"FlowGraphGreaterThanOrEqualBlock",Z)}_polymorphicGreaterThanOrEqual(Z,l){return H(Z,l,((Z,l)=>Z>=l))}}(0,B.c)("FlowGraphGreaterThanOrEqualBlock",L);class p extends J.c{constructor(Z){super(x.c,x.e,(Z=>this._polymorphicIsNan(Z)),"FlowGraphIsNaNBlock",Z)}_polymorphicIsNan(Z){if((0,a.p)(Z,!0))return isNaN((0,a.n)(Z));throw new Error(`Cannot get NaN of ${Z}`)}}(0,B.c)("FlowGraphIsNaNBlock",p);class N extends J.c{constructor(Z){super(x.c,x.e,(Z=>this._polymorphicIsInf(Z)),"FlowGraphIsInfBlock",Z)}_polymorphicIsInf(Z){if((0,a.p)(Z))return!isFinite((0,a.n)(Z));throw new Error(`Cannot get isInf of ${Z}`)}}(0,B.c)("FlowGraphIsInfBlock",N);class mZ extends J.c{constructor(Z){super(x.c,x.c,(Z=>this._polymorphicDegToRad(Z)),"FlowGraphDegToRadBlock",Z)}_degToRad(Z){return Z*Math.PI/180}_polymorphicDegToRad(Z){return c(Z,this._degToRad)}}(0,B.c)("FlowGraphDegToRadBlock",mZ);class ZZ extends J.c{constructor(Z){super(x.c,x.c,(Z=>this._polymorphicRadToDeg(Z)),"FlowGraphRadToDegBlock",Z)}_radToDeg(Z){return 180*Z/Math.PI}_polymorphicRadToDeg(Z){return c(Z,this._radToDeg)}}(0,B.c)("FlowGraphRadToDegBlock",ZZ);class lZ extends J.c{constructor(Z){super(x.o,x.o,(Z=>this._polymorphicSin(Z)),"FlowGraphSinBlock",Z)}_polymorphicSin(Z){return c(Z,Math.sin)}}class CZ extends J.c{constructor(Z){super(x.o,x.o,(Z=>this._polymorphicCos(Z)),"FlowGraphCosBlock",Z)}_polymorphicCos(Z){return c(Z,Math.cos)}}class BZ extends J.c{constructor(Z){super(x.o,x.o,(Z=>this._polymorphicTan(Z)),"FlowGraphTanBlock",Z)}_polymorphicTan(Z){return c(Z,Math.tan)}}class xZ extends J.c{constructor(Z){super(x.o,x.o,(Z=>this._polymorphicAsin(Z)),"FlowGraphASinBlock",Z)}_polymorphicAsin(Z){return c(Z,Math.asin)}}(0,B.c)("FlowGraphASinBlock",xZ);class bZ extends J.c{constructor(Z){super(x.o,x.o,(Z=>this._polymorphicAcos(Z)),"FlowGraphACosBlock",Z)}_polymorphicAcos(Z){return c(Z,Math.acos)}}(0,B.c)("FlowGraphACosBlock",bZ);class KZ extends J.c{constructor(Z){super(x.o,x.o,(Z=>this._polymorphicAtan(Z)),"FlowGraphATanBlock",Z)}_polymorphicAtan(Z){return c(Z,Math.atan)}}(0,B.c)("FlowGraphATanBlock",KZ);class fZ extends b.b{constructor(Z){super(x.c,x.c,x.c,((Z,l)=>this._polymorphicAtan2(Z,l)),"FlowGraphATan2Block",Z)}_polymorphicAtan2(Z,l){return V(Z,l,Math.atan2)}}(0,B.c)("FlowGraphATan2Block",fZ);class WZ extends J.c{constructor(Z){super(x.c,x.c,(Z=>this._polymorphicSinh(Z)),"FlowGraphSinhBlock",Z)}_polymorphicSinh(Z){return c(Z,Math.sinh)}}(0,B.c)("FlowGraphSinhBlock",WZ);class JZ extends J.c{constructor(Z){super(x.c,x.c,(Z=>this._polymorphicCosh(Z)),"FlowGraphCoshBlock",Z)}_polymorphicCosh(Z){return c(Z,Math.cosh)}}(0,B.c)("FlowGraphCoshBlock",JZ);class dZ extends J.c{constructor(Z){super(x.c,x.c,(Z=>this._polymorphicTanh(Z)),"FlowGraphTanhBlock",Z)}_polymorphicTanh(Z){return c(Z,Math.tanh)}}(0,B.c)("FlowGraphTanhBlock",dZ);class EZ extends J.c{constructor(Z){super(x.c,x.o,(Z=>this._polymorphicAsinh(Z)),"FlowGraphASinhBlock",Z)}_polymorphicAsinh(Z){return c(Z,Math.asinh)}}(0,B.c)("FlowGraphASinhBlock",EZ);class GZ extends J.c{constructor(Z){super(x.c,x.o,(Z=>this._polymorphicAcosh(Z)),"FlowGraphACoshBlock",Z)}_polymorphicAcosh(Z){return c(Z,Math.acosh)}}(0,B.c)("FlowGraphACoshBlock",GZ);class aZ extends J.c{constructor(Z){super(x.c,x.o,(Z=>this._polymorphicAtanh(Z)),"FlowGraphATanhBlock",Z)}_polymorphicAtanh(Z){return c(Z,Math.atanh)}}(0,B.c)("FlowGraphATanhBlock",aZ);class qZ extends J.c{constructor(Z){super(x.c,x.o,(Z=>this._polymorphicExp(Z)),"FlowGraphExponentialBlock",Z)}_polymorphicExp(Z){return c(Z,Math.exp)}}(0,B.c)("FlowGraphExponentialBlock",qZ);class zZ extends J.c{constructor(Z){super(x.c,x.o,(Z=>this._polymorphicLog(Z)),"FlowGraphLogBlock",Z)}_polymorphicLog(Z){return c(Z,Math.log)}}(0,B.c)("FlowGraphLogBlock",zZ);class YZ extends J.c{constructor(Z){super(x.c,x.o,(Z=>this._polymorphicLog2(Z)),"FlowGraphLog2Block",Z)}_polymorphicLog2(Z){return c(Z,Math.log2)}}(0,B.c)("FlowGraphLog2Block",YZ);class PZ extends J.c{constructor(Z){super(x.c,x.o,(Z=>this._polymorphicLog10(Z)),"FlowGraphLog10Block",Z)}_polymorphicLog10(Z){return c(Z,Math.log10)}}(0,B.c)("FlowGraphLog10Block",PZ);class SZ extends J.c{constructor(Z){super(x.c,x.o,(Z=>this._polymorphicSqrt(Z)),"FlowGraphSquareRootBlock",Z)}_polymorphicSqrt(Z){return c(Z,Math.sqrt)}}(0,B.c)("FlowGraphSquareRootBlock",SZ);class iZ extends J.c{constructor(Z){super(x.c,x.o,(Z=>this._polymorphicCubeRoot(Z)),"FlowGraphCubeRootBlock",Z)}_polymorphicCubeRoot(Z){return c(Z,Math.cbrt)}}(0,B.c)("FlowGraphCubeRootBlock",iZ);class sZ extends b.b{constructor(Z){super(x.c,x.o,x.o,((Z,l)=>this._polymorphicPow(Z,l)),"FlowGraphPowerBlock",Z)}_polymorphicPow(Z,l){return V(Z,l,Math.pow)}}(0,B.c)("FlowGraphPowerBlock",sZ);class FZ extends J.c{constructor(Z){super((0,x.I)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,x.I)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(Z=>"boolean"===typeof Z?!Z:"number"===typeof Z?~Z:new E.b(~Z.value)),"FlowGraphBitwiseNotBlock",Z)}}(0,B.c)("FlowGraphBitwiseNotBlock",FZ);class nZ extends b.b{constructor(Z){super((0,x.I)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,x.I)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,x.I)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),((Z,l)=>{if("boolean"===typeof Z&&"boolean"===typeof l)return Z&&l;if("number"===typeof Z&&"number"===typeof l)return Z&l;if("object"===typeof Z&&"object"===typeof l)return new E.b(Z.value&l.value);throw new Error(`Cannot perform bitwise AND on ${Z} and ${l}`)}),"FlowGraphBitwiseAndBlock",Z)}}(0,B.c)("FlowGraphBitwiseAndBlock",nZ);class cZ extends b.b{constructor(Z){super((0,x.I)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,x.I)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,x.I)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),((Z,l)=>{if("boolean"===typeof Z&&"boolean"===typeof l)return Z||l;if("number"===typeof Z&&"number"===typeof l)return Z|l;if("object"===typeof Z&&"object"===typeof l)return new E.b(Z.value|l.value);throw new Error(`Cannot perform bitwise OR on ${Z} and ${l}`)}),"FlowGraphBitwiseOrBlock",Z)}}(0,B.c)("FlowGraphBitwiseOrBlock",cZ);class UZ extends b.b{constructor(Z){super((0,x.I)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,x.I)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,x.I)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),((Z,l)=>{if("boolean"===typeof Z&&"boolean"===typeof l)return Z!==l;if("number"===typeof Z&&"number"===typeof l)return Z^l;if("object"===typeof Z&&"object"===typeof l)return new E.b(Z.value^l.value);throw new Error(`Cannot perform bitwise XOR on ${Z} and ${l}`)}),"FlowGraphBitwiseXorBlock",Z)}}(0,B.c)("FlowGraphBitwiseXorBlock",UZ);class tZ extends b.b{constructor(Z){super(x.i,x.i,x.i,((Z,l)=>new E.b(Z.value<<l.value)),"FlowGraphBitwiseLeftShiftBlock",Z)}}(0,B.c)("FlowGraphBitwiseLeftShiftBlock",tZ);class rZ extends b.b{constructor(Z){super(x.i,x.i,x.i,((Z,l)=>new E.b(Z.value>>l.value)),"FlowGraphBitwiseRightShiftBlock",Z)}}(0,B.c)("FlowGraphBitwiseRightShiftBlock",rZ);class eZ extends J.c{constructor(Z){super(x.i,x.i,(Z=>new E.b(Math.clz32(Z.value))),"FlowGraphLeadingZerosBlock",Z)}}(0,B.c)("FlowGraphLeadingZerosBlock",eZ);class oZ extends J.c{constructor(Z){super(x.i,x.i,(Z=>new E.b(Z.value?31-Math.clz32(Z.value&-Z.value):32)),"FlowGraphTrailingZerosBlock",Z)}}(0,B.c)("FlowGraphTrailingZerosBlock",oZ);class vZ extends J.c{constructor(Z){super(x.i,x.i,(Z=>new E.b(function(Z){let l=0;for(;Z;)l+=1&Z,Z>>=1;return l}(Z.value))),"FlowGraphOneBitsCounterBlock",Z)}}(0,B.c)("FlowGraphOneBitsCounterBlock",vZ)},15370:(Z,l,C)=>{C.d(l,{b:()=>x});var B=C(15377);class x extends B.b{constructor(Z,l,C,B,x,b){super(C,b),this._operation=B,this._className=x,this.a=this.registerDataInput("a",Z),this.b=this.registerDataInput("b",l)}_doOperation(Z){const l=this.a.getValue(Z),C=this.b.getValue(Z);return this._operation(l,C)}getClassName(){return this._className}}},15377:(Z,l,C)=>{C.d(l,{b:()=>f});var B=C(13853),x=C(13830);const b="cachedOperationValue",K="cachedExecutionId";class f extends B.d{constructor(Z,l){super(l),this.value=this.registerDataOutput("value",Z),this.isValid=this.registerDataOutput("isValid",x.e)}_updateOutputs(Z){const l=Z._getExecutionVariable(this,K,-1),C=Z._getExecutionVariable(this,b,null);if(void 0!==C&&null!==C&&l===Z.executionId)this.isValid.setValue(!0,Z),this.value.setValue(C,Z);else try{const l=this._doOperation(Z);if(void 0===l||null===l)return void this.isValid.setValue(!1,Z);Z._setExecutionVariable(this,b,l),Z._setExecutionVariable(this,K,Z.executionId),this.value.setValue(l,Z),this.isValid.setValue(!0,Z)}catch(B){this.isValid.setValue(!1,Z)}}}},15383:(Z,l,C)=>{C.d(l,{c:()=>x});var B=C(15377);class x extends B.b{constructor(Z,l,C,B,x){super(l,x),this._operation=C,this._className=B,this.a=this.registerDataInput("a",Z)}_doOperation(Z){return this._operation(this.a.getValue(Z))}getClassName(){return this._className}}}}]);