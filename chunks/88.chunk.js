"use strict";(self.bbj0x35f849=self.bbj0x35f849||[]).push([[88],{14320:(N,q,C)=>{C.r(q),C.d(q,{FlowGraphAbsBlock:()=>T,FlowGraphAcosBlock:()=>WN,FlowGraphAcoshBlock:()=>VN,FlowGraphAddBlock:()=>J,FlowGraphAsinBlock:()=>UN,FlowGraphAsinhBlock:()=>tN,FlowGraphAtan2Block:()=>FN,FlowGraphAtanBlock:()=>aN,FlowGraphAtanhBlock:()=>ZN,FlowGraphBitwiseAndBlock:()=>jN,FlowGraphBitwiseLeftShiftBlock:()=>zN,FlowGraphBitwiseNotBlock:()=>IN,FlowGraphBitwiseOrBlock:()=>lN,FlowGraphBitwiseRightShiftBlock:()=>pN,FlowGraphBitwiseXorBlock:()=>TN,FlowGraphCeilBlock:()=>X,FlowGraphClampBlock:()=>D,FlowGraphCosBlock:()=>CN,FlowGraphCoshBlock:()=>AN,FlowGraphCubeRootBlock:()=>KN,FlowGraphDegToRadBlock:()=>x,FlowGraphDivideBlock:()=>r,FlowGraphEBlock:()=>K,FlowGraphEqualityBlock:()=>B,FlowGraphExpBlock:()=>JN,FlowGraphFloorBlock:()=>s,FlowGraphFractionBlock:()=>M,FlowGraphGreaterThanBlock:()=>m,FlowGraphGreaterThanOrEqualBlock:()=>f,FlowGraphInfBlock:()=>I,FlowGraphIsInfinityBlock:()=>g,FlowGraphIsNanBlock:()=>k,FlowGraphLeadingZerosBlock:()=>sN,FlowGraphLessThanBlock:()=>R,FlowGraphLessThanOrEqualBlock:()=>u,FlowGraphLog10Block:()=>rN,FlowGraphLog2Block:()=>vN,FlowGraphLogBlock:()=>QN,FlowGraphMathInterpolationBlock:()=>h,FlowGraphMaxBlock:()=>b,FlowGraphMinBlock:()=>e,FlowGraphModuloBlock:()=>H,FlowGraphMultiplyBlock:()=>v,FlowGraphNaNBlock:()=>j,FlowGraphNegationBlock:()=>Y,FlowGraphOneBitsCounterBlock:()=>PN,FlowGraphPiBlock:()=>i,FlowGraphPowerBlock:()=>iN,FlowGraphRadToDegBlock:()=>NN,FlowGraphRandomBlock:()=>O,FlowGraphRoundBlock:()=>P,FlowGraphSaturateBlock:()=>L,FlowGraphSignBlock:()=>z,FlowGraphSinBlock:()=>qN,FlowGraphSinhBlock:()=>wN,FlowGraphSquareRootBlock:()=>ON,FlowGraphSubtractBlock:()=>Q,FlowGraphTanBlock:()=>dN,FlowGraphTanhBlock:()=>nN,FlowGraphTrailingZerosBlock:()=>XN,FlowGraphTruncBlock:()=>p});var d=C(11076),U=C(12831),W=C(14327),a=C(14333);class F extends a.e{constructor(N,q,C,d){super(N,d),this._operation=q,this._className=C}_doOperation(N){return this._operation(N)}getClassName(){return this._className}}var w=C(11122),A=C(14340);class n extends a.e{constructor(N,q,C,d,U,W,a){super(d,a),this._operation=U,this._className=W,this.a=this.registerDataInput("a",N),this.b=this.registerDataInput("b",q),this.c=this.registerDataInput("c",C)}_doOperation(N){return this._operation(this.a.getValue(N),this.b.getValue(N),this.c.getValue(N))}getClassName(){return this._className}}var t=C(12825),V=C(12839),Z=C(12863);class J extends W.c{constructor(N){super((0,U.O)(null===N||void 0===N?void 0:N.type),(0,U.O)(null===N||void 0===N?void 0:N.type),(0,U.O)(null===N||void 0===N?void 0:N.type),((N,q)=>this._polymorphicAdd(N,q)),"FlowGraphAddBlock",N)}_polymorphicAdd(N,q){const C=(0,Z.m)(N),d=(0,Z.m)(q);if((0,Z.i)(C,d)||(0,Z.e)(C,d)||(0,Z.d)(C,d))return N.add(q);if("Quaternion"===C||"Vector4"===d)return new w.Vector4(N.x,N.y,N.z,N.w).addInPlace(q);if("Vector4"===C||"Quaternion"===d)return N.add(q);var U;if(null!==(U=this.config)&&void 0!==U&&U.preventIntegerFloatArithmetic&&typeof N!==typeof q)throw new Error("Cannot add different types of numbers.");return(0,Z.q)(N)+(0,Z.q)(q)}}(0,d.h)("FlowGraphAddBlock",J);class Q extends W.c{constructor(N){super((0,U.O)(null===N||void 0===N?void 0:N.type),(0,U.O)(null===N||void 0===N?void 0:N.type),(0,U.O)(null===N||void 0===N?void 0:N.type),((N,q)=>this._polymorphicSubtract(N,q)),"FlowGraphSubtractBlock",N)}_polymorphicSubtract(N,q){const C=(0,Z.m)(N),d=(0,Z.m)(q);if((0,Z.i)(C,d)||(0,Z.d)(C,d)||(0,Z.e)(C,d))return N.Qq(q);if("Quaternion"===C||"Vector4"===d)return new w.Vector4(N.x,N.y,N.z,N.w).Rn(q);if("Vector4"===C||"Quaternion"===d)return N.Qq(q);var U;if(null!==(U=this.config)&&void 0!==U&&U.preventIntegerFloatArithmetic&&typeof N!==typeof q)throw new Error("Cannot add different types of numbers.");return(0,Z.q)(N)-(0,Z.q)(q)}}(0,d.h)("FlowGraphSubtractBlock",Q);class v extends W.c{constructor(N){super((0,U.O)(null===N||void 0===N?void 0:N.type),(0,U.O)(null===N||void 0===N?void 0:N.type),(0,U.O)(null===N||void 0===N?void 0:N.type),((N,q)=>this._polymorphicMultiply(N,q)),"FlowGraphMultiplyBlock",N)}_polymorphicMultiply(N,q){const C=(0,Z.m)(N),d=(0,Z.m)(q);if((0,Z.i)(C,d)||(0,Z.d)(C,d))return N.multiply(q);if("Quaternion"===C||"Vector4"===d)return new w.Vector4(N.x,N.y,N.z,N.w).multiplyInPlace(q);if("Vector4"===C||"Quaternion"===d)return N.multiply(q);if((0,Z.e)(C,d)){var U;if(null!==(U=this.config)&&void 0!==U&&U.useMatrixPerComponent){const d=N.m;for(let N=0;N<d.length;N++)d[N]*=q.m[N];return"Matrix2D"===C?new V.d(d):"Matrix3D"===C?new V.h(d):w.Matrix.Kq(d)}return q.multiply(N)}var W;if(null!==(W=this.config)&&void 0!==W&&W.preventIntegerFloatArithmetic&&typeof N!==typeof q)throw new Error("Cannot add different types of numbers.");return(0,Z.q)(N)*(0,Z.q)(q)}}(0,d.h)("FlowGraphMultiplyBlock",v);class r extends W.c{constructor(N){super((0,U.O)(null===N||void 0===N?void 0:N.type),(0,U.O)(null===N||void 0===N?void 0:N.type),(0,U.O)(null===N||void 0===N?void 0:N.type),((N,q)=>this._polymorphicDivide(N,q)),"FlowGraphDivideBlock",N)}_polymorphicDivide(N,q){const C=(0,Z.m)(N),d=(0,Z.m)(q);if((0,Z.i)(C,d)||(0,Z.d)(C,d))return N.divide(q);if("Quaternion"===C||"Quaternion"===d){const C=N.clone();return C.x/=q.x,C.y/=q.y,C.z/=q.z,C.w/=q.w,C}if("Quaternion"===C||"Vector4"===d)return new w.Vector4(N.x,N.y,N.z,N.w).divideInPlace(q);if("Vector4"===C||"Quaternion"===d)return N.divide(q);if((0,Z.e)(C,d)){var U;if(null!==(U=this.config)&&void 0!==U&&U.useMatrixPerComponent){const d=N.m;for(let N=0;N<d.length;N++)d[N]/=q.m[N];return"Matrix2D"===C?new V.d(d):"Matrix3D"===C?new V.h(d):w.Matrix.Kq(d)}return N.divide(q)}var W;if(null!==(W=this.config)&&void 0!==W&&W.preventIntegerFloatArithmetic&&typeof N!==typeof q)throw new Error("Cannot add different types of numbers.");return(0,Z.q)(N)/(0,Z.q)(q)}}(0,d.h)("FlowGraphDivideBlock",r);class O extends F{constructor(N){super(U.r,(N=>this._random(N)),"FlowGraphRandomBlock",N),this.min=this.registerDataInput("min",U.r,(null===N||void 0===N?void 0:N.min)??0),this.max=this.registerDataInput("max",U.r,(null===N||void 0===N?void 0:N.max)??1),null!==N&&void 0!==N&&N.seed&&(this._seed=N.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const N=1e4*Math.sin(this._seed++);return N-Math.floor(N)}return Math.random()}_random(N){const q=this.min.getValue(N),C=this.max.getValue(N);return this._getRandomValue()*(C-q)+q}}(0,d.h)("FlowGraphRandomBlock",O);class K extends F{constructor(N){super(U.r,(()=>Math.E),"FlowGraphEBlock",N)}}(0,d.h)("FlowGraphEBlock",K);class i extends F{constructor(N){super(U.r,(()=>Math.PI),"FlowGraphPIBlock",N)}}(0,d.h)("FlowGraphPIBlock",i);class I extends F{constructor(N){super(U.r,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",N)}}(0,d.h)("FlowGraphInfBlock",I);class j extends F{constructor(N){super(U.r,(()=>Number.NaN),"FlowGraphNaNBlock",N)}}function l(N,q){switch((0,Z.m)(N)){case"FlowGraphInteger":return new t.b(q(N.value));case"Vector2":return new w.Vector2(q(N.x),q(N.y));case"Jq":return new w.Jq(q(N.x),q(N.y),q(N.z));case"Vector4":return new w.Vector4(q(N.x),q(N.y),q(N.z),q(N.w));case"Quaternion":return new w.Quaternion(q(N.x),q(N.y),q(N.z),q(N.w));case"Matrix":return w.Matrix.Kq(N.m.map(q));case"Matrix2D":return new V.d(N.m.map(q));case"Matrix3D":return new V.h(N.m.map(q));default:return q(N)}}(0,d.h)("FlowGraphNaNBlock",j);class T extends A.b{constructor(N){super(U.r,U.r,(N=>this._polymorphicAbs(N)),"FlowGraphAbsBlock",N)}_polymorphicAbs(N){return l(N,Math.abs)}}(0,d.h)("FlowGraphAbsBlock",T);class z extends A.b{constructor(N){super(U.r,U.r,(N=>this._polymorphicSign(N)),"FlowGraphSignBlock",N)}_polymorphicSign(N){return l(N,Math.sign)}}(0,d.h)("FlowGraphSignBlock",z);class p extends A.b{constructor(N){super(U.r,U.r,(N=>this._polymorphicTrunc(N)),"FlowGraphTruncBlock",N)}_polymorphicTrunc(N){return l(N,Math.trunc)}}(0,d.h)("FlowGraphTruncBlock",p);class s extends A.b{constructor(N){super(U.r,U.r,(N=>this._polymorphicFloor(N)),"FlowGraphFloorBlock",N)}_polymorphicFloor(N){return l(N,Math.floor)}}(0,d.h)("FlowGraphFloorBlock",s);class X extends A.b{constructor(N){super(U.b,U.b,(N=>this._polymorphicCeiling(N)),"FlowGraphCeilBlock",N)}_polymorphicCeiling(N){return l(N,Math.ceil)}}(0,d.h)("FlowGraphCeilBlock",X);class P extends A.b{constructor(N){super(U.b,U.b,(N=>this._polymorphicRound(N)),"FlowGraphRoundBlock",N)}_polymorphicRound(N){return l(N,(N=>{var q;return N<0&&null!==(q=this.config)&&void 0!==q&&q.roundHalfAwayFromZero?-Math.round(-N):Math.round(N)}))}}(0,d.h)("FlowGraphRoundBlock",P);class M extends A.b{constructor(N){super(U.b,U.b,(N=>this._polymorphicFraction(N)),"FlowGraphFractBlock",N)}_polymorphicFraction(N){return l(N,(N=>N-Math.floor(N)))}}(0,d.h)("FlowGraphFractBlock",M);class Y extends A.b{constructor(N){super(U.b,U.b,(N=>this._polymorphicNeg(N)),"FlowGraphNegationBlock",N)}_polymorphicNeg(N){return l(N,(N=>-N))}}function E(N,q,C){switch((0,Z.m)(N)){case"FlowGraphInteger":return new t.b(C(N.value,q.value));case"Vector2":return new w.Vector2(C(N.x,q.x),C(N.y,q.y));case"Jq":return new w.Jq(C(N.x,q.x),C(N.y,q.y),C(N.z,q.z));case"Vector4":return new w.Vector4(C(N.x,q.x),C(N.y,q.y),C(N.z,q.z),C(N.w,q.w));case"Quaternion":return new w.Quaternion(C(N.x,q.x),C(N.y,q.y),C(N.z,q.z),C(N.w,q.w));case"Matrix":return w.Matrix.Kq(N.m.map(((N,d)=>C(N,q.m[d]))));case"Matrix2D":return new V.d(N.m.map(((N,d)=>C(N,q.m[d]))));case"Matrix3D":return new V.h(N.m.map(((N,d)=>C(N,q.m[d]))));default:return C((0,Z.q)(N),(0,Z.q)(q))}}(0,d.h)("FlowGraphNegationBlock",Y);class H extends W.c{constructor(N){super(U.b,U.b,U.b,((N,q)=>this._polymorphicRemainder(N,q)),"FlowGraphModuloBlock",N)}_polymorphicRemainder(N,q){return E(N,q,((N,q)=>N%q))}}(0,d.h)("FlowGraphModuloBlock",H);class e extends W.c{constructor(N){super(U.b,U.b,U.b,((N,q)=>this._polymorphicMin(N,q)),"FlowGraphMinBlock",N)}_polymorphicMin(N,q){return E(N,q,Math.min)}}(0,d.h)("FlowGraphMinBlock",e);class b extends W.c{constructor(N){super(U.b,U.b,U.b,((N,q)=>this._polymorphicMax(N,q)),"FlowGraphMaxBlock",N)}_polymorphicMax(N,q){return E(N,q,Math.max)}}function o(N,q,C){return Math.min(Math.max(N,Math.min(q,C)),Math.max(q,C))}function S(N,q,C,d){switch((0,Z.m)(N)){case"FlowGraphInteger":return new t.b(d(N.value,q.value,C.value));case"Vector2":return new w.Vector2(d(N.x,q.x,C.x),d(N.y,q.y,C.y));case"Jq":return new w.Jq(d(N.x,q.x,C.x),d(N.y,q.y,C.y),d(N.z,q.z,C.z));case"Vector4":return new w.Vector4(d(N.x,q.x,C.x),d(N.y,q.y,C.y),d(N.z,q.z,C.z),d(N.w,q.w,C.w));case"Quaternion":return new w.Quaternion(d(N.x,q.x,C.x),d(N.y,q.y,C.y),d(N.z,q.z,C.z),d(N.w,q.w,C.w));case"Matrix":return w.Matrix.Kq(N.m.map(((N,U)=>d(N,q.m[U],C.m[U]))));case"Matrix2D":return new V.d(N.m.map(((N,U)=>d(N,q.m[U],C.m[U]))));case"Matrix3D":return new V.h(N.m.map(((N,U)=>d(N,q.m[U],C.m[U]))));default:return d((0,Z.q)(N),(0,Z.q)(q),(0,Z.q)(C))}}(0,d.h)("FlowGraphMaxBlock",b);class D extends n{constructor(N){super(U.b,U.b,U.b,U.b,((N,q,C)=>this._polymorphicClamp(N,q,C)),"FlowGraphClampBlock",N)}_polymorphicClamp(N,q,C){return S(N,q,C,o)}}function c(N){return Math.min(Math.max(N,0),1)}(0,d.h)("FlowGraphClampBlock",D);class L extends A.b{constructor(N){super(U.b,U.b,(N=>this._polymorphicSaturate(N)),"FlowGraphSaturateBlock",N)}_polymorphicSaturate(N){return l(N,c)}}function G(N,q,C){return(1-C)*N+C*q}(0,d.h)("FlowGraphSaturateBlock",L);class h extends n{constructor(N){super(U.b,U.b,U.b,U.b,((N,q,C)=>this._polymorphicInterpolate(N,q,C)),"FlowGraphMathInterpolationBlock",N)}_polymorphicInterpolate(N,q,C){return S(N,q,C,G)}}(0,d.h)("FlowGraphMathInterpolationBlock",h);class B extends W.c{constructor(N){super(U.b,U.b,U.e,((N,q)=>this._polymorphicEq(N,q)),"FlowGraphEqualityBlock",N)}_polymorphicEq(N,q){const C=(0,Z.m)(N),d=(0,Z.m)(q);return typeof N===typeof q&&((0,Z.i)(C,d)||(0,Z.e)(C,d)||(0,Z.d)(C,d)?N.equals(q):N===q)}}function y(N,q,C){if((0,Z.r)(N)&&(0,Z.r)(q))return C((0,Z.q)(N),(0,Z.q)(q));throw new Error(`Cannot compare ${N} and ${q}`)}(0,d.h)("FlowGraphEqualityBlock",B);class R extends W.c{constructor(N){super(U.b,U.b,U.e,((N,q)=>this._polymorphicLessThan(N,q)),"FlowGraphLessThanBlock",N)}_polymorphicLessThan(N,q){return y(N,q,((N,q)=>N<q))}}(0,d.h)("FlowGraphLessThanBlock",R);class u extends W.c{constructor(N){super(U.b,U.b,U.e,((N,q)=>this._polymorphicLessThanOrEqual(N,q)),"FlowGraphLessThanOrEqualBlock",N)}_polymorphicLessThanOrEqual(N,q){return y(N,q,((N,q)=>N<=q))}}(0,d.h)("FlowGraphLessThanOrEqualBlock",u);class m extends W.c{constructor(N){super(U.b,U.b,U.e,((N,q)=>this._polymorphicGreaterThan(N,q)),"FlowGraphGreaterThanBlock",N)}_polymorphicGreaterThan(N,q){return y(N,q,((N,q)=>N>q))}}(0,d.h)("FlowGraphGreaterThanBlock",m);class f extends W.c{constructor(N){super(U.b,U.b,U.e,((N,q)=>this._polymorphicGreaterThanOrEqual(N,q)),"FlowGraphGreaterThanOrEqualBlock",N)}_polymorphicGreaterThanOrEqual(N,q){return y(N,q,((N,q)=>N>=q))}}(0,d.h)("FlowGraphGreaterThanOrEqualBlock",f);class k extends A.b{constructor(N){super(U.b,U.e,(N=>this._polymorphicIsNan(N)),"FlowGraphIsNaNBlock",N)}_polymorphicIsNan(N){if((0,Z.r)(N,!0))return isNaN((0,Z.q)(N));throw new Error(`Cannot get NaN of ${N}`)}}(0,d.h)("FlowGraphIsNaNBlock",k);class g extends A.b{constructor(N){super(U.b,U.e,(N=>this._polymorphicIsInf(N)),"FlowGraphIsInfBlock",N)}_polymorphicIsInf(N){if((0,Z.r)(N))return!isFinite((0,Z.q)(N));throw new Error(`Cannot get isInf of ${N}`)}}(0,d.h)("FlowGraphIsInfBlock",g);class x extends A.b{constructor(N){super(U.b,U.b,(N=>this._polymorphicDegToRad(N)),"FlowGraphDegToRadBlock",N)}_degToRad(N){return N*Math.PI/180}_polymorphicDegToRad(N){return l(N,this._degToRad)}}(0,d.h)("FlowGraphDegToRadBlock",x);class NN extends A.b{constructor(N){super(U.b,U.b,(N=>this._polymorphicRadToDeg(N)),"FlowGraphRadToDegBlock",N)}_radToDeg(N){return 180*N/Math.PI}_polymorphicRadToDeg(N){return l(N,this._radToDeg)}}(0,d.h)("FlowGraphRadToDegBlock",NN);class qN extends A.b{constructor(N){super(U.r,U.r,(N=>this._polymorphicSin(N)),"FlowGraphSinBlock",N)}_polymorphicSin(N){return l(N,Math.sin)}}class CN extends A.b{constructor(N){super(U.r,U.r,(N=>this._polymorphicCos(N)),"FlowGraphCosBlock",N)}_polymorphicCos(N){return l(N,Math.cos)}}class dN extends A.b{constructor(N){super(U.r,U.r,(N=>this._polymorphicTan(N)),"FlowGraphTanBlock",N)}_polymorphicTan(N){return l(N,Math.tan)}}class UN extends A.b{constructor(N){super(U.r,U.r,(N=>this._polymorphicAsin(N)),"FlowGraphASinBlock",N)}_polymorphicAsin(N){return l(N,Math.asin)}}(0,d.h)("FlowGraphASinBlock",UN);class WN extends A.b{constructor(N){super(U.r,U.r,(N=>this._polymorphicAcos(N)),"FlowGraphACosBlock",N)}_polymorphicAcos(N){return l(N,Math.acos)}}(0,d.h)("FlowGraphACosBlock",WN);class aN extends A.b{constructor(N){super(U.r,U.r,(N=>this._polymorphicAtan(N)),"FlowGraphATanBlock",N)}_polymorphicAtan(N){return l(N,Math.atan)}}(0,d.h)("FlowGraphATanBlock",aN);class FN extends W.c{constructor(N){super(U.b,U.b,U.b,((N,q)=>this._polymorphicAtan2(N,q)),"FlowGraphATan2Block",N)}_polymorphicAtan2(N,q){return E(N,q,Math.atan2)}}(0,d.h)("FlowGraphATan2Block",FN);class wN extends A.b{constructor(N){super(U.b,U.b,(N=>this._polymorphicSinh(N)),"FlowGraphSinhBlock",N)}_polymorphicSinh(N){return l(N,Math.sinh)}}(0,d.h)("FlowGraphSinhBlock",wN);class AN extends A.b{constructor(N){super(U.b,U.b,(N=>this._polymorphicCosh(N)),"FlowGraphCoshBlock",N)}_polymorphicCosh(N){return l(N,Math.cosh)}}(0,d.h)("FlowGraphCoshBlock",AN);class nN extends A.b{constructor(N){super(U.b,U.b,(N=>this._polymorphicTanh(N)),"FlowGraphTanhBlock",N)}_polymorphicTanh(N){return l(N,Math.tanh)}}(0,d.h)("FlowGraphTanhBlock",nN);class tN extends A.b{constructor(N){super(U.b,U.r,(N=>this._polymorphicAsinh(N)),"FlowGraphASinhBlock",N)}_polymorphicAsinh(N){return l(N,Math.asinh)}}(0,d.h)("FlowGraphASinhBlock",tN);class VN extends A.b{constructor(N){super(U.b,U.r,(N=>this._polymorphicAcosh(N)),"FlowGraphACoshBlock",N)}_polymorphicAcosh(N){return l(N,Math.acosh)}}(0,d.h)("FlowGraphACoshBlock",VN);class ZN extends A.b{constructor(N){super(U.b,U.r,(N=>this._polymorphicAtanh(N)),"FlowGraphATanhBlock",N)}_polymorphicAtanh(N){return l(N,Math.atanh)}}(0,d.h)("FlowGraphATanhBlock",ZN);class JN extends A.b{constructor(N){super(U.b,U.r,(N=>this._polymorphicExp(N)),"FlowGraphExponentialBlock",N)}_polymorphicExp(N){return l(N,Math.exp)}}(0,d.h)("FlowGraphExponentialBlock",JN);class QN extends A.b{constructor(N){super(U.b,U.r,(N=>this._polymorphicLog(N)),"FlowGraphLogBlock",N)}_polymorphicLog(N){return l(N,Math.log)}}(0,d.h)("FlowGraphLogBlock",QN);class vN extends A.b{constructor(N){super(U.b,U.r,(N=>this._polymorphicLog2(N)),"FlowGraphLog2Block",N)}_polymorphicLog2(N){return l(N,Math.log2)}}(0,d.h)("FlowGraphLog2Block",vN);class rN extends A.b{constructor(N){super(U.b,U.r,(N=>this._polymorphicLog10(N)),"FlowGraphLog10Block",N)}_polymorphicLog10(N){return l(N,Math.log10)}}(0,d.h)("FlowGraphLog10Block",rN);class ON extends A.b{constructor(N){super(U.b,U.r,(N=>this._polymorphicSqrt(N)),"FlowGraphSquareRootBlock",N)}_polymorphicSqrt(N){return l(N,Math.sqrt)}}(0,d.h)("FlowGraphSquareRootBlock",ON);class KN extends A.b{constructor(N){super(U.b,U.r,(N=>this._polymorphicCubeRoot(N)),"FlowGraphCubeRootBlock",N)}_polymorphicCubeRoot(N){return l(N,Math.cbrt)}}(0,d.h)("FlowGraphCubeRootBlock",KN);class iN extends W.c{constructor(N){super(U.b,U.r,U.r,((N,q)=>this._polymorphicPow(N,q)),"FlowGraphPowerBlock",N)}_polymorphicPow(N,q){return E(N,q,Math.pow)}}(0,d.h)("FlowGraphPowerBlock",iN);class IN extends A.b{constructor(N){super((0,U.O)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,U.O)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(N=>"boolean"===typeof N?!N:"number"===typeof N?~N:new t.b(~N.value)),"FlowGraphBitwiseNotBlock",N)}}(0,d.h)("FlowGraphBitwiseNotBlock",IN);class jN extends W.c{constructor(N){super((0,U.O)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,U.O)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,U.O)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),((N,q)=>{if("boolean"===typeof N&&"boolean"===typeof q)return N&&q;if("number"===typeof N&&"number"===typeof q)return N&q;if("object"===typeof N&&"object"===typeof q)return new t.b(N.value&q.value);throw new Error(`Cannot perform bitwise AND on ${N} and ${q}`)}),"FlowGraphBitwiseAndBlock",N)}}(0,d.h)("FlowGraphBitwiseAndBlock",jN);class lN extends W.c{constructor(N){super((0,U.O)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,U.O)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,U.O)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),((N,q)=>{if("boolean"===typeof N&&"boolean"===typeof q)return N||q;if("number"===typeof N&&"number"===typeof q)return N|q;if("object"===typeof N&&"object"===typeof q)return new t.b(N.value|q.value);throw new Error(`Cannot perform bitwise OR on ${N} and ${q}`)}),"FlowGraphBitwiseOrBlock",N)}}(0,d.h)("FlowGraphBitwiseOrBlock",lN);class TN extends W.c{constructor(N){super((0,U.O)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,U.O)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),(0,U.O)((null===N||void 0===N?void 0:N.valueType)||"FlowGraphInteger"),((N,q)=>{if("boolean"===typeof N&&"boolean"===typeof q)return N!==q;if("number"===typeof N&&"number"===typeof q)return N^q;if("object"===typeof N&&"object"===typeof q)return new t.b(N.value^q.value);throw new Error(`Cannot perform bitwise XOR on ${N} and ${q}`)}),"FlowGraphBitwiseXorBlock",N)}}(0,d.h)("FlowGraphBitwiseXorBlock",TN);class zN extends W.c{constructor(N){super(U.g,U.g,U.g,((N,q)=>new t.b(N.value<<q.value)),"FlowGraphBitwiseLeftShiftBlock",N)}}(0,d.h)("FlowGraphBitwiseLeftShiftBlock",zN);class pN extends W.c{constructor(N){super(U.g,U.g,U.g,((N,q)=>new t.b(N.value>>q.value)),"FlowGraphBitwiseRightShiftBlock",N)}}(0,d.h)("FlowGraphBitwiseRightShiftBlock",pN);class sN extends A.b{constructor(N){super(U.g,U.g,(N=>new t.b(Math.clz32(N.value))),"FlowGraphLeadingZerosBlock",N)}}(0,d.h)("FlowGraphLeadingZerosBlock",sN);class XN extends A.b{constructor(N){super(U.g,U.g,(N=>new t.b(N.value?31-Math.clz32(N.value&-N.value):32)),"FlowGraphTrailingZerosBlock",N)}}(0,d.h)("FlowGraphTrailingZerosBlock",XN);class PN extends A.b{constructor(N){super(U.g,U.g,(N=>new t.b(function(N){let q=0;for(;N;)q+=1&N,N>>=1;return q}(N.value))),"FlowGraphOneBitsCounterBlock",N)}}(0,d.h)("FlowGraphOneBitsCounterBlock",PN)},14327:(N,q,C)=>{C.d(q,{c:()=>U});var d=C(14333);class U extends d.e{constructor(N,q,C,d,U,W){super(C,W),this._operation=d,this._className=U,this.a=this.registerDataInput("a",N),this.b=this.registerDataInput("b",q)}_doOperation(N){const q=this.a.getValue(N),C=this.b.getValue(N);return this._operation(q,C)}getClassName(){return this._className}}},14333:(N,q,C)=>{C.d(q,{e:()=>F});var d=C(12856),U=C(12831);const W="cachedOperationValue",a="cachedExecutionId";class F extends d.d{constructor(N,q){super(q),this.value=this.registerDataOutput("value",N),this.isValid=this.registerDataOutput("isValid",U.e)}_updateOutputs(N){const q=N._getExecutionVariable(this,a,-1),C=N._getExecutionVariable(this,W,null);if(void 0!==C&&null!==C&&q===N.executionId)this.isValid.setValue(!0,N),this.value.setValue(C,N);else try{const q=this._doOperation(N);if(void 0===q||null===q)return void this.isValid.setValue(!1,N);N._setExecutionVariable(this,W,q),N._setExecutionVariable(this,a,N.executionId),this.value.setValue(q,N),this.isValid.setValue(!0,N)}catch(d){this.isValid.setValue(!1,N)}}}},14340:(N,q,C)=>{C.d(q,{b:()=>U});var d=C(14333);class U extends d.e{constructor(N,q,C,d,U){super(q,U),this._operation=C,this._className=d,this.a=this.registerDataInput("a",N)}_doOperation(N){return this._operation(this.a.getValue(N))}getClassName(){return this._className}}}}]);