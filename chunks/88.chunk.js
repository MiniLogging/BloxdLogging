"use strict";(self.b15p7b72fr8=self.b15p7b72fr8||[]).push([[88],{15854:(s,k,h)=>{h.r(k),h.d(k,{FlowGraphAbsBlock:()=>Q,FlowGraphAcosBlock:()=>mk,FlowGraphAcoshBlock:()=>as,FlowGraphAddBlock:()=>d,FlowGraphAsinBlock:()=>gs,FlowGraphAsinhBlock:()=>Ss,FlowGraphAtan2Block:()=>Ks,FlowGraphAtanBlock:()=>is,FlowGraphAtanhBlock:()=>rs,FlowGraphBitwiseAndBlock:()=>us,FlowGraphBitwiseLeftShiftBlock:()=>ps,FlowGraphBitwiseNotBlock:()=>Bs,FlowGraphBitwiseOrBlock:()=>Gs,FlowGraphBitwiseRightShiftBlock:()=>Is,FlowGraphBitwiseXorBlock:()=>Qs,FlowGraphCeilBlock:()=>b,FlowGraphClampBlock:()=>M,FlowGraphCosBlock:()=>hs,FlowGraphCoshBlock:()=>Os,FlowGraphCubeRootBlock:()=>Ds,FlowGraphDegToRadBlock:()=>e,FlowGraphDivideBlock:()=>P,FlowGraphEBlock:()=>D,FlowGraphEqualityBlock:()=>x,FlowGraphExpBlock:()=>ds,FlowGraphFloorBlock:()=>N,FlowGraphFractionBlock:()=>z,FlowGraphGreaterThanBlock:()=>F,FlowGraphGreaterThanOrEqualBlock:()=>o,FlowGraphInfBlock:()=>B,FlowGraphIsInfinityBlock:()=>f,FlowGraphIsNanBlock:()=>l,FlowGraphLeadingZerosBlock:()=>Ns,FlowGraphLessThanBlock:()=>W,FlowGraphLessThanOrEqualBlock:()=>J,FlowGraphLog10Block:()=>Ps,FlowGraphLog2Block:()=>js,FlowGraphLogBlock:()=>Es,FlowGraphMathInterpolationBlock:()=>Z,FlowGraphMaxBlock:()=>T,FlowGraphMinBlock:()=>n,FlowGraphModuloBlock:()=>Y,FlowGraphMultiplyBlock:()=>j,FlowGraphNaNBlock:()=>u,FlowGraphNegationBlock:()=>C,FlowGraphOneBitsCounterBlock:()=>ts,FlowGraphPiBlock:()=>w,FlowGraphPowerBlock:()=>ws,FlowGraphRadToDegBlock:()=>ss,FlowGraphRandomBlock:()=>R,FlowGraphRoundBlock:()=>t,FlowGraphSaturateBlock:()=>X,FlowGraphSignBlock:()=>p,FlowGraphSinBlock:()=>ks,FlowGraphSinhBlock:()=>Hs,FlowGraphSquareRootBlock:()=>Rs,FlowGraphSubtractBlock:()=>E,FlowGraphTanBlock:()=>As,FlowGraphTanhBlock:()=>cs,FlowGraphTrailingZerosBlock:()=>bs,FlowGraphTruncBlock:()=>I});var A=h(12543),g=h(14315),ms=h(15863),i=h(15871);class K extends i.e{constructor(s,k,h,A){super(s,A),this._operation=k,this._className=h}_doOperation(s){return this._operation(s)}getClassName(){return this._className}}var H=h(12590),O=h(15876);class c extends i.e{constructor(s,k,h,A,g,ms,i){super(A,i),this._operation=g,this._className=ms,this.a=this.registerDataInput("a",s),this.b=this.registerDataInput("b",k),this.c=this.registerDataInput("c",h)}_doOperation(s){return this._operation(this.a.getValue(s),this.b.getValue(s),this.c.getValue(s))}getClassName(){return this._className}}var S=h(14313),a=h(14317),r=h(14338);class d extends ms.c{constructor(s){super((0,g.G)(null===s||void 0===s?void 0:s.type),(0,g.G)(null===s||void 0===s?void 0:s.type),(0,g.G)(null===s||void 0===s?void 0:s.type),((s,k)=>this._polymorphicAdd(s,k)),"FlowGraphAddBlock",s)}_polymorphicAdd(s,k){const h=(0,r.k)(s),A=(0,r.k)(k);if((0,r.i)(h,A)||(0,r.f)(h,A)||(0,r.e)(h,A))return s.add(k);if("Quaternion"===h||"Vector4"===A)return new H.Vector4(s.x,s.y,s.z,s.w).addInPlace(k);if("Vector4"===h||"Quaternion"===A)return s.add(k);var g;if(null!==(g=this.config)&&void 0!==g&&g.preventIntegerFloatArithmetic&&typeof s!==typeof k)throw new Error("Cannot add different types of numbers.");return(0,r.p)(s)+(0,r.p)(k)}}(0,A.f)("FlowGraphAddBlock",d);class E extends ms.c{constructor(s){super((0,g.G)(null===s||void 0===s?void 0:s.type),(0,g.G)(null===s||void 0===s?void 0:s.type),(0,g.G)(null===s||void 0===s?void 0:s.type),((s,k)=>this._polymorphicSubtract(s,k)),"FlowGraphSubtractBlock",s)}_polymorphicSubtract(s,k){const h=(0,r.k)(s),A=(0,r.k)(k);if((0,r.i)(h,A)||(0,r.e)(h,A)||(0,r.f)(h,A))return s.Rk(k);if("Quaternion"===h||"Vector4"===A)return new H.Vector4(s.x,s.y,s.z,s.w).ka(k);if("Vector4"===h||"Quaternion"===A)return s.Rk(k);var g;if(null!==(g=this.config)&&void 0!==g&&g.preventIntegerFloatArithmetic&&typeof s!==typeof k)throw new Error("Cannot add different types of numbers.");return(0,r.p)(s)-(0,r.p)(k)}}(0,A.f)("FlowGraphSubtractBlock",E);class j extends ms.c{constructor(s){super((0,g.G)(null===s||void 0===s?void 0:s.type),(0,g.G)(null===s||void 0===s?void 0:s.type),(0,g.G)(null===s||void 0===s?void 0:s.type),((s,k)=>this._polymorphicMultiply(s,k)),"FlowGraphMultiplyBlock",s)}_polymorphicMultiply(s,k){const h=(0,r.k)(s),A=(0,r.k)(k);if((0,r.i)(h,A)||(0,r.e)(h,A))return s.multiply(k);if("Quaternion"===h||"Vector4"===A)return new H.Vector4(s.x,s.y,s.z,s.w).multiplyInPlace(k);if("Vector4"===h||"Quaternion"===A)return s.multiply(k);if((0,r.f)(h,A)){var g;if(null!==(g=this.config)&&void 0!==g&&g.useMatrixPerComponent){const A=s.m;for(let s=0;s<A.length;s++)A[s]*=k.m[s];return"Matrix2D"===h?new a.c(A):"Matrix3D"===h?new a.d(A):H.Matrix.uk(A)}return k.multiply(s)}var ms;if(null!==(ms=this.config)&&void 0!==ms&&ms.preventIntegerFloatArithmetic&&typeof s!==typeof k)throw new Error("Cannot add different types of numbers.");return(0,r.p)(s)*(0,r.p)(k)}}(0,A.f)("FlowGraphMultiplyBlock",j);class P extends ms.c{constructor(s){super((0,g.G)(null===s||void 0===s?void 0:s.type),(0,g.G)(null===s||void 0===s?void 0:s.type),(0,g.G)(null===s||void 0===s?void 0:s.type),((s,k)=>this._polymorphicDivide(s,k)),"FlowGraphDivideBlock",s)}_polymorphicDivide(s,k){const h=(0,r.k)(s),A=(0,r.k)(k);if((0,r.i)(h,A)||(0,r.e)(h,A))return s.divide(k);if("Quaternion"===h||"Quaternion"===A){const h=s.clone();return h.x/=k.x,h.y/=k.y,h.z/=k.z,h.w/=k.w,h}if("Quaternion"===h||"Vector4"===A)return new H.Vector4(s.x,s.y,s.z,s.w).divideInPlace(k);if("Vector4"===h||"Quaternion"===A)return s.divide(k);if((0,r.f)(h,A)){var g;if(null!==(g=this.config)&&void 0!==g&&g.useMatrixPerComponent){const A=s.m;for(let s=0;s<A.length;s++)A[s]/=k.m[s];return"Matrix2D"===h?new a.c(A):"Matrix3D"===h?new a.d(A):H.Matrix.uk(A)}return s.divide(k)}var ms;if(null!==(ms=this.config)&&void 0!==ms&&ms.preventIntegerFloatArithmetic&&typeof s!==typeof k)throw new Error("Cannot add different types of numbers.");return(0,r.p)(s)/(0,r.p)(k)}}(0,A.f)("FlowGraphDivideBlock",P);class R extends K{constructor(s){super(g.m,(s=>this._random(s)),"FlowGraphRandomBlock",s),this.min=this.registerDataInput("min",g.m,(null===s||void 0===s?void 0:s.min)??0),this.max=this.registerDataInput("max",g.m,(null===s||void 0===s?void 0:s.max)??1),null!==s&&void 0!==s&&s.seed&&(this._seed=s.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const s=1e4*Math.sin(this._seed++);return s-Math.floor(s)}return Math.random()}_random(s){const k=this.min.getValue(s),h=this.max.getValue(s);return this._getRandomValue()*(h-k)+k}}(0,A.f)("FlowGraphRandomBlock",R);class D extends K{constructor(s){super(g.m,(()=>Math.E),"FlowGraphEBlock",s)}}(0,A.f)("FlowGraphEBlock",D);class w extends K{constructor(s){super(g.m,(()=>Math.PI),"FlowGraphPIBlock",s)}}(0,A.f)("FlowGraphPIBlock",w);class B extends K{constructor(s){super(g.m,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",s)}}(0,A.f)("FlowGraphInfBlock",B);class u extends K{constructor(s){super(g.m,(()=>Number.NaN),"FlowGraphNaNBlock",s)}}function G(s,k){switch((0,r.k)(s)){case"FlowGraphInteger":return new S.c(k(s.value));case"Vector2":return new H.Vector2(k(s.x),k(s.y));case"Pk":return new H.Pk(k(s.x),k(s.y),k(s.z));case"Vector4":return new H.Vector4(k(s.x),k(s.y),k(s.z),k(s.w));case"Quaternion":return new H.Quaternion(k(s.x),k(s.y),k(s.z),k(s.w));case"Matrix":return H.Matrix.uk(s.m.map(k));case"Matrix2D":return new a.c(s.m.map(k));case"Matrix3D":return new a.d(s.m.map(k));default:return k(s)}}(0,A.f)("FlowGraphNaNBlock",u);class Q extends O.b{constructor(s){super(g.m,g.m,(s=>this._polymorphicAbs(s)),"FlowGraphAbsBlock",s)}_polymorphicAbs(s){return G(s,Math.abs)}}(0,A.f)("FlowGraphAbsBlock",Q);class p extends O.b{constructor(s){super(g.m,g.m,(s=>this._polymorphicSign(s)),"FlowGraphSignBlock",s)}_polymorphicSign(s){return G(s,Math.sign)}}(0,A.f)("FlowGraphSignBlock",p);class I extends O.b{constructor(s){super(g.m,g.m,(s=>this._polymorphicTrunc(s)),"FlowGraphTruncBlock",s)}_polymorphicTrunc(s){return G(s,Math.trunc)}}(0,A.f)("FlowGraphTruncBlock",I);class N extends O.b{constructor(s){super(g.m,g.m,(s=>this._polymorphicFloor(s)),"FlowGraphFloorBlock",s)}_polymorphicFloor(s){return G(s,Math.floor)}}(0,A.f)("FlowGraphFloorBlock",N);class b extends O.b{constructor(s){super(g.c,g.c,(s=>this._polymorphicCeiling(s)),"FlowGraphCeilBlock",s)}_polymorphicCeiling(s){return G(s,Math.ceil)}}(0,A.f)("FlowGraphCeilBlock",b);class t extends O.b{constructor(s){super(g.c,g.c,(s=>this._polymorphicRound(s)),"FlowGraphRoundBlock",s)}_polymorphicRound(s){return G(s,(s=>{var k;return s<0&&null!==(k=this.config)&&void 0!==k&&k.roundHalfAwayFromZero?-Math.round(-s):Math.round(s)}))}}(0,A.f)("FlowGraphRoundBlock",t);class z extends O.b{constructor(s){super(g.c,g.c,(s=>this._polymorphicFraction(s)),"FlowGraphFractBlock",s)}_polymorphicFraction(s){return G(s,(s=>s-Math.floor(s)))}}(0,A.f)("FlowGraphFractBlock",z);class C extends O.b{constructor(s){super(g.c,g.c,(s=>this._polymorphicNeg(s)),"FlowGraphNegationBlock",s)}_polymorphicNeg(s){return G(s,(s=>-s))}}function v(s,k,h){switch((0,r.k)(s)){case"FlowGraphInteger":return new S.c(h(s.value,k.value));case"Vector2":return new H.Vector2(h(s.x,k.x),h(s.y,k.y));case"Pk":return new H.Pk(h(s.x,k.x),h(s.y,k.y),h(s.z,k.z));case"Vector4":return new H.Vector4(h(s.x,k.x),h(s.y,k.y),h(s.z,k.z),h(s.w,k.w));case"Quaternion":return new H.Quaternion(h(s.x,k.x),h(s.y,k.y),h(s.z,k.z),h(s.w,k.w));case"Matrix":return H.Matrix.uk(s.m.map(((s,A)=>h(s,k.m[A]))));case"Matrix2D":return new a.c(s.m.map(((s,A)=>h(s,k.m[A]))));case"Matrix3D":return new a.d(s.m.map(((s,A)=>h(s,k.m[A]))));default:return h((0,r.p)(s),(0,r.p)(k))}}(0,A.f)("FlowGraphNegationBlock",C);class Y extends ms.c{constructor(s){super(g.c,g.c,g.c,((s,k)=>this._polymorphicRemainder(s,k)),"FlowGraphModuloBlock",s)}_polymorphicRemainder(s,k){return v(s,k,((s,k)=>s%k))}}(0,A.f)("FlowGraphModuloBlock",Y);class n extends ms.c{constructor(s){super(g.c,g.c,g.c,((s,k)=>this._polymorphicMin(s,k)),"FlowGraphMinBlock",s)}_polymorphicMin(s,k){return v(s,k,Math.min)}}(0,A.f)("FlowGraphMinBlock",n);class T extends ms.c{constructor(s){super(g.c,g.c,g.c,((s,k)=>this._polymorphicMax(s,k)),"FlowGraphMaxBlock",s)}_polymorphicMax(s,k){return v(s,k,Math.max)}}function U(s,k,h){return Math.min(Math.max(s,Math.min(k,h)),Math.max(k,h))}function q(s,k,h,A){switch((0,r.k)(s)){case"FlowGraphInteger":return new S.c(A(s.value,k.value,h.value));case"Vector2":return new H.Vector2(A(s.x,k.x,h.x),A(s.y,k.y,h.y));case"Pk":return new H.Pk(A(s.x,k.x,h.x),A(s.y,k.y,h.y),A(s.z,k.z,h.z));case"Vector4":return new H.Vector4(A(s.x,k.x,h.x),A(s.y,k.y,h.y),A(s.z,k.z,h.z),A(s.w,k.w,h.w));case"Quaternion":return new H.Quaternion(A(s.x,k.x,h.x),A(s.y,k.y,h.y),A(s.z,k.z,h.z),A(s.w,k.w,h.w));case"Matrix":return H.Matrix.uk(s.m.map(((s,g)=>A(s,k.m[g],h.m[g]))));case"Matrix2D":return new a.c(s.m.map(((s,g)=>A(s,k.m[g],h.m[g]))));case"Matrix3D":return new a.d(s.m.map(((s,g)=>A(s,k.m[g],h.m[g]))));default:return A((0,r.p)(s),(0,r.p)(k),(0,r.p)(h))}}(0,A.f)("FlowGraphMaxBlock",T);class M extends c{constructor(s){super(g.c,g.c,g.c,g.c,((s,k,h)=>this._polymorphicClamp(s,k,h)),"FlowGraphClampBlock",s)}_polymorphicClamp(s,k,h){return q(s,k,h,U)}}function V(s){return Math.min(Math.max(s,0),1)}(0,A.f)("FlowGraphClampBlock",M);class X extends O.b{constructor(s){super(g.c,g.c,(s=>this._polymorphicSaturate(s)),"FlowGraphSaturateBlock",s)}_polymorphicSaturate(s){return G(s,V)}}function L(s,k,h){return(1-h)*s+h*k}(0,A.f)("FlowGraphSaturateBlock",X);class Z extends c{constructor(s){super(g.c,g.c,g.c,g.c,((s,k,h)=>this._polymorphicInterpolate(s,k,h)),"FlowGraphMathInterpolationBlock",s)}_polymorphicInterpolate(s,k,h){return q(s,k,h,L)}}(0,A.f)("FlowGraphMathInterpolationBlock",Z);class x extends ms.c{constructor(s){super(g.c,g.c,g.d,((s,k)=>this._polymorphicEq(s,k)),"FlowGraphEqualityBlock",s)}_polymorphicEq(s,k){const h=(0,r.k)(s),A=(0,r.k)(k);return typeof s===typeof k&&((0,r.i)(h,A)||(0,r.f)(h,A)||(0,r.e)(h,A)?s.equals(k):s===k)}}function y(s,k,h){if((0,r.s)(s)&&(0,r.s)(k))return h((0,r.p)(s),(0,r.p)(k));throw new Error(`Cannot compare ${s} and ${k}`)}(0,A.f)("FlowGraphEqualityBlock",x);class W extends ms.c{constructor(s){super(g.c,g.c,g.d,((s,k)=>this._polymorphicLessThan(s,k)),"FlowGraphLessThanBlock",s)}_polymorphicLessThan(s,k){return y(s,k,((s,k)=>s<k))}}(0,A.f)("FlowGraphLessThanBlock",W);class J extends ms.c{constructor(s){super(g.c,g.c,g.d,((s,k)=>this._polymorphicLessThanOrEqual(s,k)),"FlowGraphLessThanOrEqualBlock",s)}_polymorphicLessThanOrEqual(s,k){return y(s,k,((s,k)=>s<=k))}}(0,A.f)("FlowGraphLessThanOrEqualBlock",J);class F extends ms.c{constructor(s){super(g.c,g.c,g.d,((s,k)=>this._polymorphicGreaterThan(s,k)),"FlowGraphGreaterThanBlock",s)}_polymorphicGreaterThan(s,k){return y(s,k,((s,k)=>s>k))}}(0,A.f)("FlowGraphGreaterThanBlock",F);class o extends ms.c{constructor(s){super(g.c,g.c,g.d,((s,k)=>this._polymorphicGreaterThanOrEqual(s,k)),"FlowGraphGreaterThanOrEqualBlock",s)}_polymorphicGreaterThanOrEqual(s,k){return y(s,k,((s,k)=>s>=k))}}(0,A.f)("FlowGraphGreaterThanOrEqualBlock",o);class l extends O.b{constructor(s){super(g.c,g.d,(s=>this._polymorphicIsNan(s)),"FlowGraphIsNaNBlock",s)}_polymorphicIsNan(s){if((0,r.s)(s,!0))return isNaN((0,r.p)(s));throw new Error(`Cannot get NaN of ${s}`)}}(0,A.f)("FlowGraphIsNaNBlock",l);class f extends O.b{constructor(s){super(g.c,g.d,(s=>this._polymorphicIsInf(s)),"FlowGraphIsInfBlock",s)}_polymorphicIsInf(s){if((0,r.s)(s))return!isFinite((0,r.p)(s));throw new Error(`Cannot get isInf of ${s}`)}}(0,A.f)("FlowGraphIsInfBlock",f);class e extends O.b{constructor(s){super(g.c,g.c,(s=>this._polymorphicDegToRad(s)),"FlowGraphDegToRadBlock",s)}_degToRad(s){return s*Math.PI/180}_polymorphicDegToRad(s){return G(s,this._degToRad)}}(0,A.f)("FlowGraphDegToRadBlock",e);class ss extends O.b{constructor(s){super(g.c,g.c,(s=>this._polymorphicRadToDeg(s)),"FlowGraphRadToDegBlock",s)}_radToDeg(s){return 180*s/Math.PI}_polymorphicRadToDeg(s){return G(s,this._radToDeg)}}(0,A.f)("FlowGraphRadToDegBlock",ss);class ks extends O.b{constructor(s){super(g.m,g.m,(s=>this._polymorphicSin(s)),"FlowGraphSinBlock",s)}_polymorphicSin(s){return G(s,Math.sin)}}class hs extends O.b{constructor(s){super(g.m,g.m,(s=>this._polymorphicCos(s)),"FlowGraphCosBlock",s)}_polymorphicCos(s){return G(s,Math.cos)}}class As extends O.b{constructor(s){super(g.m,g.m,(s=>this._polymorphicTan(s)),"FlowGraphTanBlock",s)}_polymorphicTan(s){return G(s,Math.tan)}}class gs extends O.b{constructor(s){super(g.m,g.m,(s=>this._polymorphicAsin(s)),"FlowGraphASinBlock",s)}_polymorphicAsin(s){return G(s,Math.asin)}}(0,A.f)("FlowGraphASinBlock",gs);class mk extends O.b{constructor(s){super(g.m,g.m,(s=>this._polymorphicAcos(s)),"FlowGraphACosBlock",s)}_polymorphicAcos(s){return G(s,Math.acos)}}(0,A.f)("FlowGraphACosBlock",mk);class is extends O.b{constructor(s){super(g.m,g.m,(s=>this._polymorphicAtan(s)),"FlowGraphATanBlock",s)}_polymorphicAtan(s){return G(s,Math.atan)}}(0,A.f)("FlowGraphATanBlock",is);class Ks extends ms.c{constructor(s){super(g.c,g.c,g.c,((s,k)=>this._polymorphicAtan2(s,k)),"FlowGraphATan2Block",s)}_polymorphicAtan2(s,k){return v(s,k,Math.atan2)}}(0,A.f)("FlowGraphATan2Block",Ks);class Hs extends O.b{constructor(s){super(g.c,g.c,(s=>this._polymorphicSinh(s)),"FlowGraphSinhBlock",s)}_polymorphicSinh(s){return G(s,Math.sinh)}}(0,A.f)("FlowGraphSinhBlock",Hs);class Os extends O.b{constructor(s){super(g.c,g.c,(s=>this._polymorphicCosh(s)),"FlowGraphCoshBlock",s)}_polymorphicCosh(s){return G(s,Math.cosh)}}(0,A.f)("FlowGraphCoshBlock",Os);class cs extends O.b{constructor(s){super(g.c,g.c,(s=>this._polymorphicTanh(s)),"FlowGraphTanhBlock",s)}_polymorphicTanh(s){return G(s,Math.tanh)}}(0,A.f)("FlowGraphTanhBlock",cs);class Ss extends O.b{constructor(s){super(g.c,g.m,(s=>this._polymorphicAsinh(s)),"FlowGraphASinhBlock",s)}_polymorphicAsinh(s){return G(s,Math.asinh)}}(0,A.f)("FlowGraphASinhBlock",Ss);class as extends O.b{constructor(s){super(g.c,g.m,(s=>this._polymorphicAcosh(s)),"FlowGraphACoshBlock",s)}_polymorphicAcosh(s){return G(s,Math.acosh)}}(0,A.f)("FlowGraphACoshBlock",as);class rs extends O.b{constructor(s){super(g.c,g.m,(s=>this._polymorphicAtanh(s)),"FlowGraphATanhBlock",s)}_polymorphicAtanh(s){return G(s,Math.atanh)}}(0,A.f)("FlowGraphATanhBlock",rs);class ds extends O.b{constructor(s){super(g.c,g.m,(s=>this._polymorphicExp(s)),"FlowGraphExponentialBlock",s)}_polymorphicExp(s){return G(s,Math.exp)}}(0,A.f)("FlowGraphExponentialBlock",ds);class Es extends O.b{constructor(s){super(g.c,g.m,(s=>this._polymorphicLog(s)),"FlowGraphLogBlock",s)}_polymorphicLog(s){return G(s,Math.log)}}(0,A.f)("FlowGraphLogBlock",Es);class js extends O.b{constructor(s){super(g.c,g.m,(s=>this._polymorphicLog2(s)),"FlowGraphLog2Block",s)}_polymorphicLog2(s){return G(s,Math.log2)}}(0,A.f)("FlowGraphLog2Block",js);class Ps extends O.b{constructor(s){super(g.c,g.m,(s=>this._polymorphicLog10(s)),"FlowGraphLog10Block",s)}_polymorphicLog10(s){return G(s,Math.log10)}}(0,A.f)("FlowGraphLog10Block",Ps);class Rs extends O.b{constructor(s){super(g.c,g.m,(s=>this._polymorphicSqrt(s)),"FlowGraphSquareRootBlock",s)}_polymorphicSqrt(s){return G(s,Math.sqrt)}}(0,A.f)("FlowGraphSquareRootBlock",Rs);class Ds extends O.b{constructor(s){super(g.c,g.m,(s=>this._polymorphicCubeRoot(s)),"FlowGraphCubeRootBlock",s)}_polymorphicCubeRoot(s){return G(s,Math.cbrt)}}(0,A.f)("FlowGraphCubeRootBlock",Ds);class ws extends ms.c{constructor(s){super(g.c,g.m,g.m,((s,k)=>this._polymorphicPow(s,k)),"FlowGraphPowerBlock",s)}_polymorphicPow(s,k){return v(s,k,Math.pow)}}(0,A.f)("FlowGraphPowerBlock",ws);class Bs extends O.b{constructor(s){super((0,g.G)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),(0,g.G)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),(s=>"boolean"===typeof s?!s:"number"===typeof s?~s:new S.c(~s.value)),"FlowGraphBitwiseNotBlock",s)}}(0,A.f)("FlowGraphBitwiseNotBlock",Bs);class us extends ms.c{constructor(s){super((0,g.G)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),(0,g.G)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),(0,g.G)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),((s,k)=>{if("boolean"===typeof s&&"boolean"===typeof k)return s&&k;if("number"===typeof s&&"number"===typeof k)return s&k;if("object"===typeof s&&"object"===typeof k)return new S.c(s.value&k.value);throw new Error(`Cannot perform bitwise AND on ${s} and ${k}`)}),"FlowGraphBitwiseAndBlock",s)}}(0,A.f)("FlowGraphBitwiseAndBlock",us);class Gs extends ms.c{constructor(s){super((0,g.G)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),(0,g.G)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),(0,g.G)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),((s,k)=>{if("boolean"===typeof s&&"boolean"===typeof k)return s||k;if("number"===typeof s&&"number"===typeof k)return s|k;if("object"===typeof s&&"object"===typeof k)return new S.c(s.value|k.value);throw new Error(`Cannot perform bitwise OR on ${s} and ${k}`)}),"FlowGraphBitwiseOrBlock",s)}}(0,A.f)("FlowGraphBitwiseOrBlock",Gs);class Qs extends ms.c{constructor(s){super((0,g.G)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),(0,g.G)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),(0,g.G)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),((s,k)=>{if("boolean"===typeof s&&"boolean"===typeof k)return s!==k;if("number"===typeof s&&"number"===typeof k)return s^k;if("object"===typeof s&&"object"===typeof k)return new S.c(s.value^k.value);throw new Error(`Cannot perform bitwise XOR on ${s} and ${k}`)}),"FlowGraphBitwiseXorBlock",s)}}(0,A.f)("FlowGraphBitwiseXorBlock",Qs);class ps extends ms.c{constructor(s){super(g.e,g.e,g.e,((s,k)=>new S.c(s.value<<k.value)),"FlowGraphBitwiseLeftShiftBlock",s)}}(0,A.f)("FlowGraphBitwiseLeftShiftBlock",ps);class Is extends ms.c{constructor(s){super(g.e,g.e,g.e,((s,k)=>new S.c(s.value>>k.value)),"FlowGraphBitwiseRightShiftBlock",s)}}(0,A.f)("FlowGraphBitwiseRightShiftBlock",Is);class Ns extends O.b{constructor(s){super(g.e,g.e,(s=>new S.c(Math.clz32(s.value))),"FlowGraphLeadingZerosBlock",s)}}(0,A.f)("FlowGraphLeadingZerosBlock",Ns);class bs extends O.b{constructor(s){super(g.e,g.e,(s=>new S.c(s.value?31-Math.clz32(s.value&-s.value):32)),"FlowGraphTrailingZerosBlock",s)}}(0,A.f)("FlowGraphTrailingZerosBlock",bs);class ts extends O.b{constructor(s){super(g.e,g.e,(s=>new S.c(function(s){let k=0;for(;s;)k+=1&s,s>>=1;return k}(s.value))),"FlowGraphOneBitsCounterBlock",s)}}(0,A.f)("FlowGraphOneBitsCounterBlock",ts)},15863:(s,k,h)=>{h.d(k,{c:()=>g});var A=h(15871);class g extends A.e{constructor(s,k,h,A,g,ms){super(h,ms),this._operation=A,this._className=g,this.a=this.registerDataInput("a",s),this.b=this.registerDataInput("b",k)}_doOperation(s){const k=this.a.getValue(s),h=this.b.getValue(s);return this._operation(k,h)}getClassName(){return this._className}}},15871:(s,k,h)=>{h.d(k,{e:()=>K});var A=h(14325),g=h(14315);const ms="cachedOperationValue",i="cachedExecutionId";class K extends A.e{constructor(s,k){super(k),this.value=this.registerDataOutput("value",s),this.isValid=this.registerDataOutput("isValid",g.d)}_updateOutputs(s){const k=s._getExecutionVariable(this,i,-1),h=s._getExecutionVariable(this,ms,null);if(void 0!==h&&null!==h&&k===s.executionId)this.isValid.setValue(!0,s),this.value.setValue(h,s);else try{const k=this._doOperation(s);if(void 0===k||null===k)return void this.isValid.setValue(!1,s);s._setExecutionVariable(this,ms,k),s._setExecutionVariable(this,i,s.executionId),this.value.setValue(k,s),this.isValid.setValue(!0,s)}catch(A){this.isValid.setValue(!1,s)}}}},15876:(s,k,h)=>{h.d(k,{b:()=>g});var A=h(15871);class g extends A.e{constructor(s,k,h,A,g){super(k,g),this._operation=h,this._className=A,this.a=this.registerDataInput("a",s)}_doOperation(s){return this._operation(this.a.getValue(s))}getClassName(){return this._className}}}}]);