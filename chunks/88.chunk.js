"use strict";(self["5dou0t7wntc"]=self["5dou0t7wntc"]||[]).push([[88],{14954:(K,O,F)=>{F.r(O),F.d(O,{FlowGraphAbsBlock:()=>H,FlowGraphAcosBlock:()=>lK,FlowGraphAcoshBlock:()=>jK,FlowGraphAddBlock:()=>u,FlowGraphAsinBlock:()=>rK,FlowGraphAsinhBlock:()=>tK,FlowGraphAtan2Block:()=>JK,FlowGraphAtanBlock:()=>qK,FlowGraphAtanhBlock:()=>XK,FlowGraphBitwiseAndBlock:()=>aK,FlowGraphBitwiseLeftShiftBlock:()=>eK,FlowGraphBitwiseNotBlock:()=>dK,FlowGraphBitwiseOrBlock:()=>gK,FlowGraphBitwiseRightShiftBlock:()=>WK,FlowGraphBitwiseXorBlock:()=>HK,FlowGraphCeilBlock:()=>y,FlowGraphClampBlock:()=>Y,FlowGraphCosBlock:()=>FK,FlowGraphCoshBlock:()=>EK,FlowGraphCubeRootBlock:()=>ZK,FlowGraphDegToRadBlock:()=>S,FlowGraphDivideBlock:()=>k,FlowGraphEBlock:()=>Z,FlowGraphEqualityBlock:()=>D,FlowGraphExpBlock:()=>uK,FlowGraphFloorBlock:()=>p,FlowGraphFractionBlock:()=>Q,FlowGraphGreaterThanBlock:()=>w,FlowGraphGreaterThanOrEqualBlock:()=>s,FlowGraphInfBlock:()=>d,FlowGraphIsInfinityBlock:()=>P,FlowGraphIsNanBlock:()=>U,FlowGraphLeadingZerosBlock:()=>pK,FlowGraphLessThanBlock:()=>b,FlowGraphLessThanOrEqualBlock:()=>i,FlowGraphLog10Block:()=>kK,FlowGraphLog2Block:()=>oK,FlowGraphLogBlock:()=>TK,FlowGraphMathInterpolationBlock:()=>I,FlowGraphMaxBlock:()=>x,FlowGraphMinBlock:()=>m,FlowGraphModuloBlock:()=>z,FlowGraphMultiplyBlock:()=>o,FlowGraphNaNBlock:()=>a,FlowGraphNegationBlock:()=>R,FlowGraphOneBitsCounterBlock:()=>AK,FlowGraphPiBlock:()=>L,FlowGraphPowerBlock:()=>LK,FlowGraphRadToDegBlock:()=>KK,FlowGraphRandomBlock:()=>N,FlowGraphRoundBlock:()=>A,FlowGraphSaturateBlock:()=>n,FlowGraphSignBlock:()=>e,FlowGraphSinBlock:()=>OK,FlowGraphSinhBlock:()=>cK,FlowGraphSquareRootBlock:()=>NK,FlowGraphSubtractBlock:()=>T,FlowGraphTanBlock:()=>fK,FlowGraphTanhBlock:()=>MK,FlowGraphTrailingZerosBlock:()=>yK,FlowGraphTruncBlock:()=>W});var f=F(11661),r=F(13441),l=F(14962),q=F(14970);class J extends q.d{constructor(K,O,F,f){super(K,f),this._operation=O,this._className=F}_doOperation(K){return this._operation(K)}getClassName(){return this._className}}var c=F(11713),E=F(14972);class M extends q.d{constructor(K,O,F,f,r,l,q){super(f,q),this._operation=r,this._className=l,this.a=this.registerDataInput("a",K),this.b=this.registerDataInput("b",O),this.c=this.registerDataInput("c",F)}_doOperation(K){return this._operation(this.a.getValue(K),this.b.getValue(K),this.c.getValue(K))}getClassName(){return this._className}}var t=F(13435),j=F(13450),X=F(13479);class u extends l.e{constructor(K){super((0,r.J)(null===K||void 0===K?void 0:K.type),(0,r.J)(null===K||void 0===K?void 0:K.type),(0,r.J)(null===K||void 0===K?void 0:K.type),((K,O)=>this._polymorphicAdd(K,O)),"FlowGraphAddBlock",K)}_polymorphicAdd(K,O){const F=(0,X.k)(K),f=(0,X.k)(O);if((0,X.h)(F,f)||(0,X.g)(F,f)||(0,X.d)(F,f))return K.add(O);if("Quaternion"===F||"Vector4"===f)return new c.Vector4(K.x,K.y,K.z,K.w).addInPlace(O);if("Vector4"===F||"Quaternion"===f)return K.add(O);var r;if(null!==(r=this.config)&&void 0!==r&&r.preventIntegerFloatArithmetic&&typeof K!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,X.r)(K)+(0,X.r)(O)}}(0,f.g)("FlowGraphAddBlock",u);class T extends l.e{constructor(K){super((0,r.J)(null===K||void 0===K?void 0:K.type),(0,r.J)(null===K||void 0===K?void 0:K.type),(0,r.J)(null===K||void 0===K?void 0:K.type),((K,O)=>this._polymorphicSubtract(K,O)),"FlowGraphSubtractBlock",K)}_polymorphicSubtract(K,O){const F=(0,X.k)(K),f=(0,X.k)(O);if((0,X.h)(F,f)||(0,X.d)(F,f)||(0,X.g)(F,f))return K.oO(O);if("Quaternion"===F||"Vector4"===f)return new c.Vector4(K.x,K.y,K.z,K.w).Qt(O);if("Vector4"===F||"Quaternion"===f)return K.oO(O);var r;if(null!==(r=this.config)&&void 0!==r&&r.preventIntegerFloatArithmetic&&typeof K!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,X.r)(K)-(0,X.r)(O)}}(0,f.g)("FlowGraphSubtractBlock",T);class o extends l.e{constructor(K){super((0,r.J)(null===K||void 0===K?void 0:K.type),(0,r.J)(null===K||void 0===K?void 0:K.type),(0,r.J)(null===K||void 0===K?void 0:K.type),((K,O)=>this._polymorphicMultiply(K,O)),"FlowGraphMultiplyBlock",K)}_polymorphicMultiply(K,O){const F=(0,X.k)(K),f=(0,X.k)(O);if((0,X.h)(F,f)||(0,X.d)(F,f))return K.multiply(O);if("Quaternion"===F||"Vector4"===f)return new c.Vector4(K.x,K.y,K.z,K.w).multiplyInPlace(O);if("Vector4"===F||"Quaternion"===f)return K.multiply(O);if((0,X.g)(F,f)){var r;if(null!==(r=this.config)&&void 0!==r&&r.useMatrixPerComponent){const f=K.m;for(let K=0;K<f.length;K++)f[K]*=O.m[K];return"Matrix2D"===F?new j.c(f):"Matrix3D"===F?new j.f(f):c.Matrix.LO(f)}return O.multiply(K)}var l;if(null!==(l=this.config)&&void 0!==l&&l.preventIntegerFloatArithmetic&&typeof K!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,X.r)(K)*(0,X.r)(O)}}(0,f.g)("FlowGraphMultiplyBlock",o);class k extends l.e{constructor(K){super((0,r.J)(null===K||void 0===K?void 0:K.type),(0,r.J)(null===K||void 0===K?void 0:K.type),(0,r.J)(null===K||void 0===K?void 0:K.type),((K,O)=>this._polymorphicDivide(K,O)),"FlowGraphDivideBlock",K)}_polymorphicDivide(K,O){const F=(0,X.k)(K),f=(0,X.k)(O);if((0,X.h)(F,f)||(0,X.d)(F,f))return K.divide(O);if("Quaternion"===F||"Quaternion"===f){const F=K.clone();return F.x/=O.x,F.y/=O.y,F.z/=O.z,F.w/=O.w,F}if("Quaternion"===F||"Vector4"===f)return new c.Vector4(K.x,K.y,K.z,K.w).divideInPlace(O);if("Vector4"===F||"Quaternion"===f)return K.divide(O);if((0,X.g)(F,f)){var r;if(null!==(r=this.config)&&void 0!==r&&r.useMatrixPerComponent){const f=K.m;for(let K=0;K<f.length;K++)f[K]/=O.m[K];return"Matrix2D"===F?new j.c(f):"Matrix3D"===F?new j.f(f):c.Matrix.LO(f)}return K.divide(O)}var l;if(null!==(l=this.config)&&void 0!==l&&l.preventIntegerFloatArithmetic&&typeof K!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,X.r)(K)/(0,X.r)(O)}}(0,f.g)("FlowGraphDivideBlock",k);class N extends J{constructor(K){super(r.s,(K=>this._random(K)),"FlowGraphRandomBlock",K),this.min=this.registerDataInput("min",r.s,(null===K||void 0===K?void 0:K.min)??0),this.max=this.registerDataInput("max",r.s,(null===K||void 0===K?void 0:K.max)??1),null!==K&&void 0!==K&&K.seed&&(this._seed=K.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const K=1e4*Math.sin(this._seed++);return K-Math.floor(K)}return Math.random()}_random(K){const O=this.min.getValue(K),F=this.max.getValue(K);return this._getRandomValue()*(F-O)+O}}(0,f.g)("FlowGraphRandomBlock",N);class Z extends J{constructor(K){super(r.s,(()=>Math.E),"FlowGraphEBlock",K)}}(0,f.g)("FlowGraphEBlock",Z);class L extends J{constructor(K){super(r.s,(()=>Math.PI),"FlowGraphPIBlock",K)}}(0,f.g)("FlowGraphPIBlock",L);class d extends J{constructor(K){super(r.s,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",K)}}(0,f.g)("FlowGraphInfBlock",d);class a extends J{constructor(K){super(r.s,(()=>Number.NaN),"FlowGraphNaNBlock",K)}}function g(K,O){switch((0,X.k)(K)){case"FlowGraphInteger":return new t.d(O(K.value));case"Vector2":return new c.Vector2(O(K.x),O(K.y));case"TO":return new c.TO(O(K.x),O(K.y),O(K.z));case"Vector4":return new c.Vector4(O(K.x),O(K.y),O(K.z),O(K.w));case"Quaternion":return new c.Quaternion(O(K.x),O(K.y),O(K.z),O(K.w));case"Matrix":return c.Matrix.LO(K.m.map(O));case"Matrix2D":return new j.c(K.m.map(O));case"Matrix3D":return new j.f(K.m.map(O));default:return O(K)}}(0,f.g)("FlowGraphNaNBlock",a);class H extends E.b{constructor(K){super(r.s,r.s,(K=>this._polymorphicAbs(K)),"FlowGraphAbsBlock",K)}_polymorphicAbs(K){return g(K,Math.abs)}}(0,f.g)("FlowGraphAbsBlock",H);class e extends E.b{constructor(K){super(r.s,r.s,(K=>this._polymorphicSign(K)),"FlowGraphSignBlock",K)}_polymorphicSign(K){return g(K,Math.sign)}}(0,f.g)("FlowGraphSignBlock",e);class W extends E.b{constructor(K){super(r.s,r.s,(K=>this._polymorphicTrunc(K)),"FlowGraphTruncBlock",K)}_polymorphicTrunc(K){return g(K,Math.trunc)}}(0,f.g)("FlowGraphTruncBlock",W);class p extends E.b{constructor(K){super(r.s,r.s,(K=>this._polymorphicFloor(K)),"FlowGraphFloorBlock",K)}_polymorphicFloor(K){return g(K,Math.floor)}}(0,f.g)("FlowGraphFloorBlock",p);class y extends E.b{constructor(K){super(r.d,r.d,(K=>this._polymorphicCeiling(K)),"FlowGraphCeilBlock",K)}_polymorphicCeiling(K){return g(K,Math.ceil)}}(0,f.g)("FlowGraphCeilBlock",y);class A extends E.b{constructor(K){super(r.d,r.d,(K=>this._polymorphicRound(K)),"FlowGraphRoundBlock",K)}_polymorphicRound(K){return g(K,(K=>{var O;return K<0&&null!==(O=this.config)&&void 0!==O&&O.roundHalfAwayFromZero?-Math.round(-K):Math.round(K)}))}}(0,f.g)("FlowGraphRoundBlock",A);class Q extends E.b{constructor(K){super(r.d,r.d,(K=>this._polymorphicFraction(K)),"FlowGraphFractBlock",K)}_polymorphicFraction(K){return g(K,(K=>K-Math.floor(K)))}}(0,f.g)("FlowGraphFractBlock",Q);class R extends E.b{constructor(K){super(r.d,r.d,(K=>this._polymorphicNeg(K)),"FlowGraphNegationBlock",K)}_polymorphicNeg(K){return g(K,(K=>-K))}}function G(K,O,F){switch((0,X.k)(K)){case"FlowGraphInteger":return new t.d(F(K.value,O.value));case"Vector2":return new c.Vector2(F(K.x,O.x),F(K.y,O.y));case"TO":return new c.TO(F(K.x,O.x),F(K.y,O.y),F(K.z,O.z));case"Vector4":return new c.Vector4(F(K.x,O.x),F(K.y,O.y),F(K.z,O.z),F(K.w,O.w));case"Quaternion":return new c.Quaternion(F(K.x,O.x),F(K.y,O.y),F(K.z,O.z),F(K.w,O.w));case"Matrix":return c.Matrix.LO(K.m.map(((K,f)=>F(K,O.m[f]))));case"Matrix2D":return new j.c(K.m.map(((K,f)=>F(K,O.m[f]))));case"Matrix3D":return new j.f(K.m.map(((K,f)=>F(K,O.m[f]))));default:return F((0,X.r)(K),(0,X.r)(O))}}(0,f.g)("FlowGraphNegationBlock",R);class z extends l.e{constructor(K){super(r.d,r.d,r.d,((K,O)=>this._polymorphicRemainder(K,O)),"FlowGraphModuloBlock",K)}_polymorphicRemainder(K,O){return G(K,O,((K,O)=>K%O))}}(0,f.g)("FlowGraphModuloBlock",z);class m extends l.e{constructor(K){super(r.d,r.d,r.d,((K,O)=>this._polymorphicMin(K,O)),"FlowGraphMinBlock",K)}_polymorphicMin(K,O){return G(K,O,Math.min)}}(0,f.g)("FlowGraphMinBlock",m);class x extends l.e{constructor(K){super(r.d,r.d,r.d,((K,O)=>this._polymorphicMax(K,O)),"FlowGraphMaxBlock",K)}_polymorphicMax(K,O){return G(K,O,Math.max)}}function V(K,O,F){return Math.min(Math.max(K,Math.min(O,F)),Math.max(O,F))}function v(K,O,F,f){switch((0,X.k)(K)){case"FlowGraphInteger":return new t.d(f(K.value,O.value,F.value));case"Vector2":return new c.Vector2(f(K.x,O.x,F.x),f(K.y,O.y,F.y));case"TO":return new c.TO(f(K.x,O.x,F.x),f(K.y,O.y,F.y),f(K.z,O.z,F.z));case"Vector4":return new c.Vector4(f(K.x,O.x,F.x),f(K.y,O.y,F.y),f(K.z,O.z,F.z),f(K.w,O.w,F.w));case"Quaternion":return new c.Quaternion(f(K.x,O.x,F.x),f(K.y,O.y,F.y),f(K.z,O.z,F.z),f(K.w,O.w,F.w));case"Matrix":return c.Matrix.LO(K.m.map(((K,r)=>f(K,O.m[r],F.m[r]))));case"Matrix2D":return new j.c(K.m.map(((K,r)=>f(K,O.m[r],F.m[r]))));case"Matrix3D":return new j.f(K.m.map(((K,r)=>f(K,O.m[r],F.m[r]))));default:return f((0,X.r)(K),(0,X.r)(O),(0,X.r)(F))}}(0,f.g)("FlowGraphMaxBlock",x);class Y extends M{constructor(K){super(r.d,r.d,r.d,r.d,((K,O,F)=>this._polymorphicClamp(K,O,F)),"FlowGraphClampBlock",K)}_polymorphicClamp(K,O,F){return v(K,O,F,V)}}function B(K){return Math.min(Math.max(K,0),1)}(0,f.g)("FlowGraphClampBlock",Y);class n extends E.b{constructor(K){super(r.d,r.d,(K=>this._polymorphicSaturate(K)),"FlowGraphSaturateBlock",K)}_polymorphicSaturate(K){return g(K,B)}}function C(K,O,F){return(1-F)*K+F*O}(0,f.g)("FlowGraphSaturateBlock",n);class I extends M{constructor(K){super(r.d,r.d,r.d,r.d,((K,O,F)=>this._polymorphicInterpolate(K,O,F)),"FlowGraphMathInterpolationBlock",K)}_polymorphicInterpolate(K,O,F){return v(K,O,F,C)}}(0,f.g)("FlowGraphMathInterpolationBlock",I);class D extends l.e{constructor(K){super(r.d,r.d,r.e,((K,O)=>this._polymorphicEq(K,O)),"FlowGraphEqualityBlock",K)}_polymorphicEq(K,O){const F=(0,X.k)(K),f=(0,X.k)(O);return typeof K===typeof O&&((0,X.h)(F,f)||(0,X.g)(F,f)||(0,X.d)(F,f)?K.equals(O):K===O)}}function h(K,O,F){if((0,X.s)(K)&&(0,X.s)(O))return F((0,X.r)(K),(0,X.r)(O));throw new Error(`Cannot compare ${K} and ${O}`)}(0,f.g)("FlowGraphEqualityBlock",D);class b extends l.e{constructor(K){super(r.d,r.d,r.e,((K,O)=>this._polymorphicLessThan(K,O)),"FlowGraphLessThanBlock",K)}_polymorphicLessThan(K,O){return h(K,O,((K,O)=>K<O))}}(0,f.g)("FlowGraphLessThanBlock",b);class i extends l.e{constructor(K){super(r.d,r.d,r.e,((K,O)=>this._polymorphicLessThanOrEqual(K,O)),"FlowGraphLessThanOrEqualBlock",K)}_polymorphicLessThanOrEqual(K,O){return h(K,O,((K,O)=>K<=O))}}(0,f.g)("FlowGraphLessThanOrEqualBlock",i);class w extends l.e{constructor(K){super(r.d,r.d,r.e,((K,O)=>this._polymorphicGreaterThan(K,O)),"FlowGraphGreaterThanBlock",K)}_polymorphicGreaterThan(K,O){return h(K,O,((K,O)=>K>O))}}(0,f.g)("FlowGraphGreaterThanBlock",w);class s extends l.e{constructor(K){super(r.d,r.d,r.e,((K,O)=>this._polymorphicGreaterThanOrEqual(K,O)),"FlowGraphGreaterThanOrEqualBlock",K)}_polymorphicGreaterThanOrEqual(K,O){return h(K,O,((K,O)=>K>=O))}}(0,f.g)("FlowGraphGreaterThanOrEqualBlock",s);class U extends E.b{constructor(K){super(r.d,r.e,(K=>this._polymorphicIsNan(K)),"FlowGraphIsNaNBlock",K)}_polymorphicIsNan(K){if((0,X.s)(K,!0))return isNaN((0,X.r)(K));throw new Error(`Cannot get NaN of ${K}`)}}(0,f.g)("FlowGraphIsNaNBlock",U);class P extends E.b{constructor(K){super(r.d,r.e,(K=>this._polymorphicIsInf(K)),"FlowGraphIsInfBlock",K)}_polymorphicIsInf(K){if((0,X.s)(K))return!isFinite((0,X.r)(K));throw new Error(`Cannot get isInf of ${K}`)}}(0,f.g)("FlowGraphIsInfBlock",P);class S extends E.b{constructor(K){super(r.d,r.d,(K=>this._polymorphicDegToRad(K)),"FlowGraphDegToRadBlock",K)}_degToRad(K){return K*Math.PI/180}_polymorphicDegToRad(K){return g(K,this._degToRad)}}(0,f.g)("FlowGraphDegToRadBlock",S);class KK extends E.b{constructor(K){super(r.d,r.d,(K=>this._polymorphicRadToDeg(K)),"FlowGraphRadToDegBlock",K)}_radToDeg(K){return 180*K/Math.PI}_polymorphicRadToDeg(K){return g(K,this._radToDeg)}}(0,f.g)("FlowGraphRadToDegBlock",KK);class OK extends E.b{constructor(K){super(r.s,r.s,(K=>this._polymorphicSin(K)),"FlowGraphSinBlock",K)}_polymorphicSin(K){return g(K,Math.sin)}}class FK extends E.b{constructor(K){super(r.s,r.s,(K=>this._polymorphicCos(K)),"FlowGraphCosBlock",K)}_polymorphicCos(K){return g(K,Math.cos)}}class fK extends E.b{constructor(K){super(r.s,r.s,(K=>this._polymorphicTan(K)),"FlowGraphTanBlock",K)}_polymorphicTan(K){return g(K,Math.tan)}}class rK extends E.b{constructor(K){super(r.s,r.s,(K=>this._polymorphicAsin(K)),"FlowGraphASinBlock",K)}_polymorphicAsin(K){return g(K,Math.asin)}}(0,f.g)("FlowGraphASinBlock",rK);class lK extends E.b{constructor(K){super(r.s,r.s,(K=>this._polymorphicAcos(K)),"FlowGraphACosBlock",K)}_polymorphicAcos(K){return g(K,Math.acos)}}(0,f.g)("FlowGraphACosBlock",lK);class qK extends E.b{constructor(K){super(r.s,r.s,(K=>this._polymorphicAtan(K)),"FlowGraphATanBlock",K)}_polymorphicAtan(K){return g(K,Math.atan)}}(0,f.g)("FlowGraphATanBlock",qK);class JK extends l.e{constructor(K){super(r.d,r.d,r.d,((K,O)=>this._polymorphicAtan2(K,O)),"FlowGraphATan2Block",K)}_polymorphicAtan2(K,O){return G(K,O,Math.atan2)}}(0,f.g)("FlowGraphATan2Block",JK);class cK extends E.b{constructor(K){super(r.d,r.d,(K=>this._polymorphicSinh(K)),"FlowGraphSinhBlock",K)}_polymorphicSinh(K){return g(K,Math.sinh)}}(0,f.g)("FlowGraphSinhBlock",cK);class EK extends E.b{constructor(K){super(r.d,r.d,(K=>this._polymorphicCosh(K)),"FlowGraphCoshBlock",K)}_polymorphicCosh(K){return g(K,Math.cosh)}}(0,f.g)("FlowGraphCoshBlock",EK);class MK extends E.b{constructor(K){super(r.d,r.d,(K=>this._polymorphicTanh(K)),"FlowGraphTanhBlock",K)}_polymorphicTanh(K){return g(K,Math.tanh)}}(0,f.g)("FlowGraphTanhBlock",MK);class tK extends E.b{constructor(K){super(r.d,r.s,(K=>this._polymorphicAsinh(K)),"FlowGraphASinhBlock",K)}_polymorphicAsinh(K){return g(K,Math.asinh)}}(0,f.g)("FlowGraphASinhBlock",tK);class jK extends E.b{constructor(K){super(r.d,r.s,(K=>this._polymorphicAcosh(K)),"FlowGraphACoshBlock",K)}_polymorphicAcosh(K){return g(K,Math.acosh)}}(0,f.g)("FlowGraphACoshBlock",jK);class XK extends E.b{constructor(K){super(r.d,r.s,(K=>this._polymorphicAtanh(K)),"FlowGraphATanhBlock",K)}_polymorphicAtanh(K){return g(K,Math.atanh)}}(0,f.g)("FlowGraphATanhBlock",XK);class uK extends E.b{constructor(K){super(r.d,r.s,(K=>this._polymorphicExp(K)),"FlowGraphExponentialBlock",K)}_polymorphicExp(K){return g(K,Math.exp)}}(0,f.g)("FlowGraphExponentialBlock",uK);class TK extends E.b{constructor(K){super(r.d,r.s,(K=>this._polymorphicLog(K)),"FlowGraphLogBlock",K)}_polymorphicLog(K){return g(K,Math.log)}}(0,f.g)("FlowGraphLogBlock",TK);class oK extends E.b{constructor(K){super(r.d,r.s,(K=>this._polymorphicLog2(K)),"FlowGraphLog2Block",K)}_polymorphicLog2(K){return g(K,Math.log2)}}(0,f.g)("FlowGraphLog2Block",oK);class kK extends E.b{constructor(K){super(r.d,r.s,(K=>this._polymorphicLog10(K)),"FlowGraphLog10Block",K)}_polymorphicLog10(K){return g(K,Math.log10)}}(0,f.g)("FlowGraphLog10Block",kK);class NK extends E.b{constructor(K){super(r.d,r.s,(K=>this._polymorphicSqrt(K)),"FlowGraphSquareRootBlock",K)}_polymorphicSqrt(K){return g(K,Math.sqrt)}}(0,f.g)("FlowGraphSquareRootBlock",NK);class ZK extends E.b{constructor(K){super(r.d,r.s,(K=>this._polymorphicCubeRoot(K)),"FlowGraphCubeRootBlock",K)}_polymorphicCubeRoot(K){return g(K,Math.cbrt)}}(0,f.g)("FlowGraphCubeRootBlock",ZK);class LK extends l.e{constructor(K){super(r.d,r.s,r.s,((K,O)=>this._polymorphicPow(K,O)),"FlowGraphPowerBlock",K)}_polymorphicPow(K,O){return G(K,O,Math.pow)}}(0,f.g)("FlowGraphPowerBlock",LK);class dK extends E.b{constructor(K){super((0,r.J)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,r.J)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(K=>"boolean"===typeof K?!K:"number"===typeof K?~K:new t.d(~K.value)),"FlowGraphBitwiseNotBlock",K)}}(0,f.g)("FlowGraphBitwiseNotBlock",dK);class aK extends l.e{constructor(K){super((0,r.J)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,r.J)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,r.J)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),((K,O)=>{if("boolean"===typeof K&&"boolean"===typeof O)return K&&O;if("number"===typeof K&&"number"===typeof O)return K&O;if("object"===typeof K&&"object"===typeof O)return new t.d(K.value&O.value);throw new Error(`Cannot perform bitwise AND on ${K} and ${O}`)}),"FlowGraphBitwiseAndBlock",K)}}(0,f.g)("FlowGraphBitwiseAndBlock",aK);class gK extends l.e{constructor(K){super((0,r.J)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,r.J)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,r.J)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),((K,O)=>{if("boolean"===typeof K&&"boolean"===typeof O)return K||O;if("number"===typeof K&&"number"===typeof O)return K|O;if("object"===typeof K&&"object"===typeof O)return new t.d(K.value|O.value);throw new Error(`Cannot perform bitwise OR on ${K} and ${O}`)}),"FlowGraphBitwiseOrBlock",K)}}(0,f.g)("FlowGraphBitwiseOrBlock",gK);class HK extends l.e{constructor(K){super((0,r.J)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,r.J)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),(0,r.J)((null===K||void 0===K?void 0:K.valueType)||"FlowGraphInteger"),((K,O)=>{if("boolean"===typeof K&&"boolean"===typeof O)return K!==O;if("number"===typeof K&&"number"===typeof O)return K^O;if("object"===typeof K&&"object"===typeof O)return new t.d(K.value^O.value);throw new Error(`Cannot perform bitwise XOR on ${K} and ${O}`)}),"FlowGraphBitwiseXorBlock",K)}}(0,f.g)("FlowGraphBitwiseXorBlock",HK);class eK extends l.e{constructor(K){super(r.i,r.i,r.i,((K,O)=>new t.d(K.value<<O.value)),"FlowGraphBitwiseLeftShiftBlock",K)}}(0,f.g)("FlowGraphBitwiseLeftShiftBlock",eK);class WK extends l.e{constructor(K){super(r.i,r.i,r.i,((K,O)=>new t.d(K.value>>O.value)),"FlowGraphBitwiseRightShiftBlock",K)}}(0,f.g)("FlowGraphBitwiseRightShiftBlock",WK);class pK extends E.b{constructor(K){super(r.i,r.i,(K=>new t.d(Math.clz32(K.value))),"FlowGraphLeadingZerosBlock",K)}}(0,f.g)("FlowGraphLeadingZerosBlock",pK);class yK extends E.b{constructor(K){super(r.i,r.i,(K=>new t.d(K.value?31-Math.clz32(K.value&-K.value):32)),"FlowGraphTrailingZerosBlock",K)}}(0,f.g)("FlowGraphTrailingZerosBlock",yK);class AK extends E.b{constructor(K){super(r.i,r.i,(K=>new t.d(function(K){let O=0;for(;K;)O+=1&K,K>>=1;return O}(K.value))),"FlowGraphOneBitsCounterBlock",K)}}(0,f.g)("FlowGraphOneBitsCounterBlock",AK)},14962:(K,O,F)=>{F.d(O,{e:()=>r});var f=F(14970);class r extends f.d{constructor(K,O,F,f,r,l){super(F,l),this._operation=f,this._className=r,this.a=this.registerDataInput("a",K),this.b=this.registerDataInput("b",O)}_doOperation(K){const O=this.a.getValue(K),F=this.b.getValue(K);return this._operation(O,F)}getClassName(){return this._className}}},14970:(K,O,F)=>{F.d(O,{d:()=>J});var f=F(13471),r=F(13441);const l="cachedOperationValue",q="cachedExecutionId";class J extends f.e{constructor(K,O){super(O),this.value=this.registerDataOutput("value",K),this.isValid=this.registerDataOutput("isValid",r.e)}_updateOutputs(K){const O=K._getExecutionVariable(this,q,-1),F=K._getExecutionVariable(this,l,null);if(void 0!==F&&null!==F&&O===K.executionId)this.isValid.setValue(!0,K),this.value.setValue(F,K);else try{const O=this._doOperation(K);if(void 0===O||null===O)return void this.isValid.setValue(!1,K);K._setExecutionVariable(this,l,O),K._setExecutionVariable(this,q,K.executionId),this.value.setValue(O,K),this.isValid.setValue(!0,K)}catch(f){this.isValid.setValue(!1,K)}}}},14972:(K,O,F)=>{F.d(O,{b:()=>r});var f=F(14970);class r extends f.d{constructor(K,O,F,f,r){super(O,r),this._operation=F,this._className=f,this.a=this.registerDataInput("a",K)}_doOperation(K){return this._operation(this.a.getValue(K))}getClassName(){return this._className}}}}]);