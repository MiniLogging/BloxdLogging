"use strict";(self.nyfa010khv=self.nyfa010khv||[]).push([[88],{15328:(L,r,p)=>{p.r(r),p.d(r,{FlowGraphAbsBlock:()=>Q,FlowGraphAcosBlock:()=>nL,FlowGraphAcoshBlock:()=>xL,FlowGraphAddBlock:()=>g,FlowGraphAsinBlock:()=>iL,FlowGraphAsinhBlock:()=>EL,FlowGraphAtan2Block:()=>zL,FlowGraphAtanBlock:()=>jL,FlowGraphAtanhBlock:()=>wL,FlowGraphBitwiseAndBlock:()=>BL,FlowGraphBitwiseLeftShiftBlock:()=>eL,FlowGraphBitwiseNotBlock:()=>WL,FlowGraphBitwiseOrBlock:()=>FL,FlowGraphBitwiseRightShiftBlock:()=>vL,FlowGraphBitwiseXorBlock:()=>QL,FlowGraphCeilBlock:()=>A,FlowGraphClampBlock:()=>M,FlowGraphCosBlock:()=>pL,FlowGraphCoshBlock:()=>CL,FlowGraphCubeRootBlock:()=>hL,FlowGraphDegToRadBlock:()=>S,FlowGraphDivideBlock:()=>P,FlowGraphEBlock:()=>h,FlowGraphEqualityBlock:()=>o,FlowGraphExpBlock:()=>gL,FlowGraphFloorBlock:()=>y,FlowGraphFractionBlock:()=>a,FlowGraphGreaterThanBlock:()=>N,FlowGraphGreaterThanOrEqualBlock:()=>K,FlowGraphInfBlock:()=>W,FlowGraphIsInfinityBlock:()=>V,FlowGraphIsNanBlock:()=>mL,FlowGraphLeadingZerosBlock:()=>yL,FlowGraphLessThanBlock:()=>R,FlowGraphLessThanOrEqualBlock:()=>I,FlowGraphLog10Block:()=>PL,FlowGraphLog2Block:()=>cL,FlowGraphLogBlock:()=>bL,FlowGraphMathInterpolationBlock:()=>H,FlowGraphMaxBlock:()=>l,FlowGraphMinBlock:()=>D,FlowGraphModuloBlock:()=>X,FlowGraphMultiplyBlock:()=>c,FlowGraphNaNBlock:()=>B,FlowGraphNegationBlock:()=>q,FlowGraphOneBitsCounterBlock:()=>uL,FlowGraphPiBlock:()=>U,FlowGraphPowerBlock:()=>UL,FlowGraphRadToDegBlock:()=>LL,FlowGraphRandomBlock:()=>O,FlowGraphRoundBlock:()=>u,FlowGraphSaturateBlock:()=>d,FlowGraphSignBlock:()=>e,FlowGraphSinBlock:()=>rL,FlowGraphSinhBlock:()=>GL,FlowGraphSquareRootBlock:()=>OL,FlowGraphSubtractBlock:()=>b,FlowGraphTanBlock:()=>JL,FlowGraphTanhBlock:()=>tL,FlowGraphTrailingZerosBlock:()=>AL,FlowGraphTruncBlock:()=>v});var J=p(12087),i=p(13868),n=p(15336),j=p(15339);class z extends j.c{constructor(L,r,p,J){super(L,J),this._operation=r,this._className=p}_doOperation(L){return this._operation(L)}getClassName(){return this._className}}var G=p(12136),C=p(15345);class t extends j.c{constructor(L,r,p,J,i,n,j){super(J,j),this._operation=i,this._className=n,this.a=this.registerDataInput("a",L),this.b=this.registerDataInput("b",r),this.c=this.registerDataInput("c",p)}_doOperation(L){return this._operation(this.a.getValue(L),this.b.getValue(L),this.c.getValue(L))}getClassName(){return this._className}}var E=p(13864),x=p(13873),w=p(13895);class g extends n.d{constructor(L){super((0,i.R)(null===L||void 0===L?void 0:L.type),(0,i.R)(null===L||void 0===L?void 0:L.type),(0,i.R)(null===L||void 0===L?void 0:L.type),((L,r)=>this._polymorphicAdd(L,r)),"FlowGraphAddBlock",L)}_polymorphicAdd(L,r){const p=(0,w.n)(L),J=(0,w.n)(r);if((0,w.k)(p,J)||(0,w.h)(p,J)||(0,w.e)(p,J))return L.add(r);if("Quaternion"===p||"Vector4"===J)return new G.Vector4(L.x,L.y,L.z,L.w).addInPlace(r);if("Vector4"===p||"Quaternion"===J)return L.add(r);var i;if(null!==(i=this.config)&&void 0!==i&&i.preventIntegerFloatArithmetic&&typeof L!==typeof r)throw new Error("Cannot add different types of numbers.");return(0,w.p)(L)+(0,w.p)(r)}}(0,J.e)("FlowGraphAddBlock",g);class b extends n.d{constructor(L){super((0,i.R)(null===L||void 0===L?void 0:L.type),(0,i.R)(null===L||void 0===L?void 0:L.type),(0,i.R)(null===L||void 0===L?void 0:L.type),((L,r)=>this._polymorphicSubtract(L,r)),"FlowGraphSubtractBlock",L)}_polymorphicSubtract(L,r){const p=(0,w.n)(L),J=(0,w.n)(r);if((0,w.k)(p,J)||(0,w.e)(p,J)||(0,w.h)(p,J))return L.Pr(r);if("Quaternion"===p||"Vector4"===J)return new G.Vector4(L.x,L.y,L.z,L.w).JE(r);if("Vector4"===p||"Quaternion"===J)return L.Pr(r);var i;if(null!==(i=this.config)&&void 0!==i&&i.preventIntegerFloatArithmetic&&typeof L!==typeof r)throw new Error("Cannot add different types of numbers.");return(0,w.p)(L)-(0,w.p)(r)}}(0,J.e)("FlowGraphSubtractBlock",b);class c extends n.d{constructor(L){super((0,i.R)(null===L||void 0===L?void 0:L.type),(0,i.R)(null===L||void 0===L?void 0:L.type),(0,i.R)(null===L||void 0===L?void 0:L.type),((L,r)=>this._polymorphicMultiply(L,r)),"FlowGraphMultiplyBlock",L)}_polymorphicMultiply(L,r){const p=(0,w.n)(L),J=(0,w.n)(r);if((0,w.k)(p,J)||(0,w.e)(p,J))return L.multiply(r);if("Quaternion"===p||"Vector4"===J)return new G.Vector4(L.x,L.y,L.z,L.w).multiplyInPlace(r);if("Vector4"===p||"Quaternion"===J)return L.multiply(r);if((0,w.h)(p,J)){var i;if(null!==(i=this.config)&&void 0!==i&&i.useMatrixPerComponent){const J=L.m;for(let L=0;L<J.length;L++)J[L]*=r.m[L];return"Matrix2D"===p?new x.c(J):"Matrix3D"===p?new x.d(J):G.Matrix.Br(J)}return r.multiply(L)}var n;if(null!==(n=this.config)&&void 0!==n&&n.preventIntegerFloatArithmetic&&typeof L!==typeof r)throw new Error("Cannot add different types of numbers.");return(0,w.p)(L)*(0,w.p)(r)}}(0,J.e)("FlowGraphMultiplyBlock",c);class P extends n.d{constructor(L){super((0,i.R)(null===L||void 0===L?void 0:L.type),(0,i.R)(null===L||void 0===L?void 0:L.type),(0,i.R)(null===L||void 0===L?void 0:L.type),((L,r)=>this._polymorphicDivide(L,r)),"FlowGraphDivideBlock",L)}_polymorphicDivide(L,r){const p=(0,w.n)(L),J=(0,w.n)(r);if((0,w.k)(p,J)||(0,w.e)(p,J))return L.divide(r);if("Quaternion"===p||"Quaternion"===J){const p=L.clone();return p.x/=r.x,p.y/=r.y,p.z/=r.z,p.w/=r.w,p}if("Quaternion"===p||"Vector4"===J)return new G.Vector4(L.x,L.y,L.z,L.w).divideInPlace(r);if("Vector4"===p||"Quaternion"===J)return L.divide(r);if((0,w.h)(p,J)){var i;if(null!==(i=this.config)&&void 0!==i&&i.useMatrixPerComponent){const J=L.m;for(let L=0;L<J.length;L++)J[L]/=r.m[L];return"Matrix2D"===p?new x.c(J):"Matrix3D"===p?new x.d(J):G.Matrix.Br(J)}return L.divide(r)}var n;if(null!==(n=this.config)&&void 0!==n&&n.preventIntegerFloatArithmetic&&typeof L!==typeof r)throw new Error("Cannot add different types of numbers.");return(0,w.p)(L)/(0,w.p)(r)}}(0,J.e)("FlowGraphDivideBlock",P);class O extends z{constructor(L){super(i.v,(L=>this._random(L)),"FlowGraphRandomBlock",L),this.min=this.registerDataInput("min",i.v,(null===L||void 0===L?void 0:L.min)??0),this.max=this.registerDataInput("max",i.v,(null===L||void 0===L?void 0:L.max)??1),null!==L&&void 0!==L&&L.seed&&(this._seed=L.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const L=1e4*Math.sin(this._seed++);return L-Math.floor(L)}return Math.random()}_random(L){const r=this.min.getValue(L),p=this.max.getValue(L);return this._getRandomValue()*(p-r)+r}}(0,J.e)("FlowGraphRandomBlock",O);class h extends z{constructor(L){super(i.v,(()=>Math.E),"FlowGraphEBlock",L)}}(0,J.e)("FlowGraphEBlock",h);class U extends z{constructor(L){super(i.v,(()=>Math.PI),"FlowGraphPIBlock",L)}}(0,J.e)("FlowGraphPIBlock",U);class W extends z{constructor(L){super(i.v,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",L)}}(0,J.e)("FlowGraphInfBlock",W);class B extends z{constructor(L){super(i.v,(()=>Number.NaN),"FlowGraphNaNBlock",L)}}function F(L,r){switch((0,w.n)(L)){case"FlowGraphInteger":return new E.b(r(L.value));case"Vector2":return new G.Vector2(r(L.x),r(L.y));case"cr":return new G.cr(r(L.x),r(L.y),r(L.z));case"Vector4":return new G.Vector4(r(L.x),r(L.y),r(L.z),r(L.w));case"Quaternion":return new G.Quaternion(r(L.x),r(L.y),r(L.z),r(L.w));case"Matrix":return G.Matrix.Br(L.m.map(r));case"Matrix2D":return new x.c(L.m.map(r));case"Matrix3D":return new x.d(L.m.map(r));default:return r(L)}}(0,J.e)("FlowGraphNaNBlock",B);class Q extends C.d{constructor(L){super(i.v,i.v,(L=>this._polymorphicAbs(L)),"FlowGraphAbsBlock",L)}_polymorphicAbs(L){return F(L,Math.abs)}}(0,J.e)("FlowGraphAbsBlock",Q);class e extends C.d{constructor(L){super(i.v,i.v,(L=>this._polymorphicSign(L)),"FlowGraphSignBlock",L)}_polymorphicSign(L){return F(L,Math.sign)}}(0,J.e)("FlowGraphSignBlock",e);class v extends C.d{constructor(L){super(i.v,i.v,(L=>this._polymorphicTrunc(L)),"FlowGraphTruncBlock",L)}_polymorphicTrunc(L){return F(L,Math.trunc)}}(0,J.e)("FlowGraphTruncBlock",v);class y extends C.d{constructor(L){super(i.v,i.v,(L=>this._polymorphicFloor(L)),"FlowGraphFloorBlock",L)}_polymorphicFloor(L){return F(L,Math.floor)}}(0,J.e)("FlowGraphFloorBlock",y);class A extends C.d{constructor(L){super(i.d,i.d,(L=>this._polymorphicCeiling(L)),"FlowGraphCeilBlock",L)}_polymorphicCeiling(L){return F(L,Math.ceil)}}(0,J.e)("FlowGraphCeilBlock",A);class u extends C.d{constructor(L){super(i.d,i.d,(L=>this._polymorphicRound(L)),"FlowGraphRoundBlock",L)}_polymorphicRound(L){return F(L,(L=>{var r;return L<0&&null!==(r=this.config)&&void 0!==r&&r.roundHalfAwayFromZero?-Math.round(-L):Math.round(L)}))}}(0,J.e)("FlowGraphRoundBlock",u);class a extends C.d{constructor(L){super(i.d,i.d,(L=>this._polymorphicFraction(L)),"FlowGraphFractBlock",L)}_polymorphicFraction(L){return F(L,(L=>L-Math.floor(L)))}}(0,J.e)("FlowGraphFractBlock",a);class q extends C.d{constructor(L){super(i.d,i.d,(L=>this._polymorphicNeg(L)),"FlowGraphNegationBlock",L)}_polymorphicNeg(L){return F(L,(L=>-L))}}function Z(L,r,p){switch((0,w.n)(L)){case"FlowGraphInteger":return new E.b(p(L.value,r.value));case"Vector2":return new G.Vector2(p(L.x,r.x),p(L.y,r.y));case"cr":return new G.cr(p(L.x,r.x),p(L.y,r.y),p(L.z,r.z));case"Vector4":return new G.Vector4(p(L.x,r.x),p(L.y,r.y),p(L.z,r.z),p(L.w,r.w));case"Quaternion":return new G.Quaternion(p(L.x,r.x),p(L.y,r.y),p(L.z,r.z),p(L.w,r.w));case"Matrix":return G.Matrix.Br(L.m.map(((L,J)=>p(L,r.m[J]))));case"Matrix2D":return new x.c(L.m.map(((L,J)=>p(L,r.m[J]))));case"Matrix3D":return new x.d(L.m.map(((L,J)=>p(L,r.m[J]))));default:return p((0,w.p)(L),(0,w.p)(r))}}(0,J.e)("FlowGraphNegationBlock",q);class X extends n.d{constructor(L){super(i.d,i.d,i.d,((L,r)=>this._polymorphicRemainder(L,r)),"FlowGraphModuloBlock",L)}_polymorphicRemainder(L,r){return Z(L,r,((L,r)=>L%r))}}(0,J.e)("FlowGraphModuloBlock",X);class D extends n.d{constructor(L){super(i.d,i.d,i.d,((L,r)=>this._polymorphicMin(L,r)),"FlowGraphMinBlock",L)}_polymorphicMin(L,r){return Z(L,r,Math.min)}}(0,J.e)("FlowGraphMinBlock",D);class l extends n.d{constructor(L){super(i.d,i.d,i.d,((L,r)=>this._polymorphicMax(L,r)),"FlowGraphMaxBlock",L)}_polymorphicMax(L,r){return Z(L,r,Math.max)}}function T(L,r,p){return Math.min(Math.max(L,Math.min(r,p)),Math.max(r,p))}function Y(L,r,p,J){switch((0,w.n)(L)){case"FlowGraphInteger":return new E.b(J(L.value,r.value,p.value));case"Vector2":return new G.Vector2(J(L.x,r.x,p.x),J(L.y,r.y,p.y));case"cr":return new G.cr(J(L.x,r.x,p.x),J(L.y,r.y,p.y),J(L.z,r.z,p.z));case"Vector4":return new G.Vector4(J(L.x,r.x,p.x),J(L.y,r.y,p.y),J(L.z,r.z,p.z),J(L.w,r.w,p.w));case"Quaternion":return new G.Quaternion(J(L.x,r.x,p.x),J(L.y,r.y,p.y),J(L.z,r.z,p.z),J(L.w,r.w,p.w));case"Matrix":return G.Matrix.Br(L.m.map(((L,i)=>J(L,r.m[i],p.m[i]))));case"Matrix2D":return new x.c(L.m.map(((L,i)=>J(L,r.m[i],p.m[i]))));case"Matrix3D":return new x.d(L.m.map(((L,i)=>J(L,r.m[i],p.m[i]))));default:return J((0,w.p)(L),(0,w.p)(r),(0,w.p)(p))}}(0,J.e)("FlowGraphMaxBlock",l);class M extends t{constructor(L){super(i.d,i.d,i.d,i.d,((L,r,p)=>this._polymorphicClamp(L,r,p)),"FlowGraphClampBlock",L)}_polymorphicClamp(L,r,p){return Y(L,r,p,T)}}function f(L){return Math.min(Math.max(L,0),1)}(0,J.e)("FlowGraphClampBlock",M);class d extends C.d{constructor(L){super(i.d,i.d,(L=>this._polymorphicSaturate(L)),"FlowGraphSaturateBlock",L)}_polymorphicSaturate(L){return F(L,f)}}function s(L,r,p){return(1-p)*L+p*r}(0,J.e)("FlowGraphSaturateBlock",d);class H extends t{constructor(L){super(i.d,i.d,i.d,i.d,((L,r,p)=>this._polymorphicInterpolate(L,r,p)),"FlowGraphMathInterpolationBlock",L)}_polymorphicInterpolate(L,r,p){return Y(L,r,p,s)}}(0,J.e)("FlowGraphMathInterpolationBlock",H);class o extends n.d{constructor(L){super(i.d,i.d,i.h,((L,r)=>this._polymorphicEq(L,r)),"FlowGraphEqualityBlock",L)}_polymorphicEq(L,r){const p=(0,w.n)(L),J=(0,w.n)(r);return typeof L===typeof r&&((0,w.k)(p,J)||(0,w.h)(p,J)||(0,w.e)(p,J)?L.equals(r):L===r)}}function k(L,r,p){if((0,w.t)(L)&&(0,w.t)(r))return p((0,w.p)(L),(0,w.p)(r));throw new Error(`Cannot compare ${L} and ${r}`)}(0,J.e)("FlowGraphEqualityBlock",o);class R extends n.d{constructor(L){super(i.d,i.d,i.h,((L,r)=>this._polymorphicLessThan(L,r)),"FlowGraphLessThanBlock",L)}_polymorphicLessThan(L,r){return k(L,r,((L,r)=>L<r))}}(0,J.e)("FlowGraphLessThanBlock",R);class I extends n.d{constructor(L){super(i.d,i.d,i.h,((L,r)=>this._polymorphicLessThanOrEqual(L,r)),"FlowGraphLessThanOrEqualBlock",L)}_polymorphicLessThanOrEqual(L,r){return k(L,r,((L,r)=>L<=r))}}(0,J.e)("FlowGraphLessThanOrEqualBlock",I);class N extends n.d{constructor(L){super(i.d,i.d,i.h,((L,r)=>this._polymorphicGreaterThan(L,r)),"FlowGraphGreaterThanBlock",L)}_polymorphicGreaterThan(L,r){return k(L,r,((L,r)=>L>r))}}(0,J.e)("FlowGraphGreaterThanBlock",N);class K extends n.d{constructor(L){super(i.d,i.d,i.h,((L,r)=>this._polymorphicGreaterThanOrEqual(L,r)),"FlowGraphGreaterThanOrEqualBlock",L)}_polymorphicGreaterThanOrEqual(L,r){return k(L,r,((L,r)=>L>=r))}}(0,J.e)("FlowGraphGreaterThanOrEqualBlock",K);class mL extends C.d{constructor(L){super(i.d,i.h,(L=>this._polymorphicIsNan(L)),"FlowGraphIsNaNBlock",L)}_polymorphicIsNan(L){if((0,w.t)(L,!0))return isNaN((0,w.p)(L));throw new Error(`Cannot get NaN of ${L}`)}}(0,J.e)("FlowGraphIsNaNBlock",mL);class V extends C.d{constructor(L){super(i.d,i.h,(L=>this._polymorphicIsInf(L)),"FlowGraphIsInfBlock",L)}_polymorphicIsInf(L){if((0,w.t)(L))return!isFinite((0,w.p)(L));throw new Error(`Cannot get isInf of ${L}`)}}(0,J.e)("FlowGraphIsInfBlock",V);class S extends C.d{constructor(L){super(i.d,i.d,(L=>this._polymorphicDegToRad(L)),"FlowGraphDegToRadBlock",L)}_degToRad(L){return L*Math.PI/180}_polymorphicDegToRad(L){return F(L,this._degToRad)}}(0,J.e)("FlowGraphDegToRadBlock",S);class LL extends C.d{constructor(L){super(i.d,i.d,(L=>this._polymorphicRadToDeg(L)),"FlowGraphRadToDegBlock",L)}_radToDeg(L){return 180*L/Math.PI}_polymorphicRadToDeg(L){return F(L,this._radToDeg)}}(0,J.e)("FlowGraphRadToDegBlock",LL);class rL extends C.d{constructor(L){super(i.v,i.v,(L=>this._polymorphicSin(L)),"FlowGraphSinBlock",L)}_polymorphicSin(L){return F(L,Math.sin)}}class pL extends C.d{constructor(L){super(i.v,i.v,(L=>this._polymorphicCos(L)),"FlowGraphCosBlock",L)}_polymorphicCos(L){return F(L,Math.cos)}}class JL extends C.d{constructor(L){super(i.v,i.v,(L=>this._polymorphicTan(L)),"FlowGraphTanBlock",L)}_polymorphicTan(L){return F(L,Math.tan)}}class iL extends C.d{constructor(L){super(i.v,i.v,(L=>this._polymorphicAsin(L)),"FlowGraphASinBlock",L)}_polymorphicAsin(L){return F(L,Math.asin)}}(0,J.e)("FlowGraphASinBlock",iL);class nL extends C.d{constructor(L){super(i.v,i.v,(L=>this._polymorphicAcos(L)),"FlowGraphACosBlock",L)}_polymorphicAcos(L){return F(L,Math.acos)}}(0,J.e)("FlowGraphACosBlock",nL);class jL extends C.d{constructor(L){super(i.v,i.v,(L=>this._polymorphicAtan(L)),"FlowGraphATanBlock",L)}_polymorphicAtan(L){return F(L,Math.atan)}}(0,J.e)("FlowGraphATanBlock",jL);class zL extends n.d{constructor(L){super(i.d,i.d,i.d,((L,r)=>this._polymorphicAtan2(L,r)),"FlowGraphATan2Block",L)}_polymorphicAtan2(L,r){return Z(L,r,Math.atan2)}}(0,J.e)("FlowGraphATan2Block",zL);class GL extends C.d{constructor(L){super(i.d,i.d,(L=>this._polymorphicSinh(L)),"FlowGraphSinhBlock",L)}_polymorphicSinh(L){return F(L,Math.sinh)}}(0,J.e)("FlowGraphSinhBlock",GL);class CL extends C.d{constructor(L){super(i.d,i.d,(L=>this._polymorphicCosh(L)),"FlowGraphCoshBlock",L)}_polymorphicCosh(L){return F(L,Math.cosh)}}(0,J.e)("FlowGraphCoshBlock",CL);class tL extends C.d{constructor(L){super(i.d,i.d,(L=>this._polymorphicTanh(L)),"FlowGraphTanhBlock",L)}_polymorphicTanh(L){return F(L,Math.tanh)}}(0,J.e)("FlowGraphTanhBlock",tL);class EL extends C.d{constructor(L){super(i.d,i.v,(L=>this._polymorphicAsinh(L)),"FlowGraphASinhBlock",L)}_polymorphicAsinh(L){return F(L,Math.asinh)}}(0,J.e)("FlowGraphASinhBlock",EL);class xL extends C.d{constructor(L){super(i.d,i.v,(L=>this._polymorphicAcosh(L)),"FlowGraphACoshBlock",L)}_polymorphicAcosh(L){return F(L,Math.acosh)}}(0,J.e)("FlowGraphACoshBlock",xL);class wL extends C.d{constructor(L){super(i.d,i.v,(L=>this._polymorphicAtanh(L)),"FlowGraphATanhBlock",L)}_polymorphicAtanh(L){return F(L,Math.atanh)}}(0,J.e)("FlowGraphATanhBlock",wL);class gL extends C.d{constructor(L){super(i.d,i.v,(L=>this._polymorphicExp(L)),"FlowGraphExponentialBlock",L)}_polymorphicExp(L){return F(L,Math.exp)}}(0,J.e)("FlowGraphExponentialBlock",gL);class bL extends C.d{constructor(L){super(i.d,i.v,(L=>this._polymorphicLog(L)),"FlowGraphLogBlock",L)}_polymorphicLog(L){return F(L,Math.log)}}(0,J.e)("FlowGraphLogBlock",bL);class cL extends C.d{constructor(L){super(i.d,i.v,(L=>this._polymorphicLog2(L)),"FlowGraphLog2Block",L)}_polymorphicLog2(L){return F(L,Math.log2)}}(0,J.e)("FlowGraphLog2Block",cL);class PL extends C.d{constructor(L){super(i.d,i.v,(L=>this._polymorphicLog10(L)),"FlowGraphLog10Block",L)}_polymorphicLog10(L){return F(L,Math.log10)}}(0,J.e)("FlowGraphLog10Block",PL);class OL extends C.d{constructor(L){super(i.d,i.v,(L=>this._polymorphicSqrt(L)),"FlowGraphSquareRootBlock",L)}_polymorphicSqrt(L){return F(L,Math.sqrt)}}(0,J.e)("FlowGraphSquareRootBlock",OL);class hL extends C.d{constructor(L){super(i.d,i.v,(L=>this._polymorphicCubeRoot(L)),"FlowGraphCubeRootBlock",L)}_polymorphicCubeRoot(L){return F(L,Math.cbrt)}}(0,J.e)("FlowGraphCubeRootBlock",hL);class UL extends n.d{constructor(L){super(i.d,i.v,i.v,((L,r)=>this._polymorphicPow(L,r)),"FlowGraphPowerBlock",L)}_polymorphicPow(L,r){return Z(L,r,Math.pow)}}(0,J.e)("FlowGraphPowerBlock",UL);class WL extends C.d{constructor(L){super((0,i.R)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),(0,i.R)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),(L=>"boolean"===typeof L?!L:"number"===typeof L?~L:new E.b(~L.value)),"FlowGraphBitwiseNotBlock",L)}}(0,J.e)("FlowGraphBitwiseNotBlock",WL);class BL extends n.d{constructor(L){super((0,i.R)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),(0,i.R)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),(0,i.R)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),((L,r)=>{if("boolean"===typeof L&&"boolean"===typeof r)return L&&r;if("number"===typeof L&&"number"===typeof r)return L&r;if("object"===typeof L&&"object"===typeof r)return new E.b(L.value&r.value);throw new Error(`Cannot perform bitwise AND on ${L} and ${r}`)}),"FlowGraphBitwiseAndBlock",L)}}(0,J.e)("FlowGraphBitwiseAndBlock",BL);class FL extends n.d{constructor(L){super((0,i.R)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),(0,i.R)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),(0,i.R)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),((L,r)=>{if("boolean"===typeof L&&"boolean"===typeof r)return L||r;if("number"===typeof L&&"number"===typeof r)return L|r;if("object"===typeof L&&"object"===typeof r)return new E.b(L.value|r.value);throw new Error(`Cannot perform bitwise OR on ${L} and ${r}`)}),"FlowGraphBitwiseOrBlock",L)}}(0,J.e)("FlowGraphBitwiseOrBlock",FL);class QL extends n.d{constructor(L){super((0,i.R)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),(0,i.R)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),(0,i.R)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),((L,r)=>{if("boolean"===typeof L&&"boolean"===typeof r)return L!==r;if("number"===typeof L&&"number"===typeof r)return L^r;if("object"===typeof L&&"object"===typeof r)return new E.b(L.value^r.value);throw new Error(`Cannot perform bitwise XOR on ${L} and ${r}`)}),"FlowGraphBitwiseXorBlock",L)}}(0,J.e)("FlowGraphBitwiseXorBlock",QL);class eL extends n.d{constructor(L){super(i.k,i.k,i.k,((L,r)=>new E.b(L.value<<r.value)),"FlowGraphBitwiseLeftShiftBlock",L)}}(0,J.e)("FlowGraphBitwiseLeftShiftBlock",eL);class vL extends n.d{constructor(L){super(i.k,i.k,i.k,((L,r)=>new E.b(L.value>>r.value)),"FlowGraphBitwiseRightShiftBlock",L)}}(0,J.e)("FlowGraphBitwiseRightShiftBlock",vL);class yL extends C.d{constructor(L){super(i.k,i.k,(L=>new E.b(Math.clz32(L.value))),"FlowGraphLeadingZerosBlock",L)}}(0,J.e)("FlowGraphLeadingZerosBlock",yL);class AL extends C.d{constructor(L){super(i.k,i.k,(L=>new E.b(L.value?31-Math.clz32(L.value&-L.value):32)),"FlowGraphTrailingZerosBlock",L)}}(0,J.e)("FlowGraphTrailingZerosBlock",AL);class uL extends C.d{constructor(L){super(i.k,i.k,(L=>new E.b(function(L){let r=0;for(;L;)r+=1&L,L>>=1;return r}(L.value))),"FlowGraphOneBitsCounterBlock",L)}}(0,J.e)("FlowGraphOneBitsCounterBlock",uL)},15336:(L,r,p)=>{p.d(r,{d:()=>i});var J=p(15339);class i extends J.c{constructor(L,r,p,J,i,n){super(p,n),this._operation=J,this._className=i,this.a=this.registerDataInput("a",L),this.b=this.registerDataInput("b",r)}_doOperation(L){const r=this.a.getValue(L),p=this.b.getValue(L);return this._operation(r,p)}getClassName(){return this._className}}},15339:(L,r,p)=>{p.d(r,{c:()=>z});var J=p(13882),i=p(13868);const n="cachedOperationValue",j="cachedExecutionId";class z extends J.b{constructor(L,r){super(r),this.value=this.registerDataOutput("value",L),this.isValid=this.registerDataOutput("isValid",i.h)}_updateOutputs(L){const r=L._getExecutionVariable(this,j,-1),p=L._getExecutionVariable(this,n,null);if(void 0!==p&&null!==p&&r===L.executionId)this.isValid.setValue(!0,L),this.value.setValue(p,L);else try{const r=this._doOperation(L);if(void 0===r||null===r)return void this.isValid.setValue(!1,L);L._setExecutionVariable(this,n,r),L._setExecutionVariable(this,j,L.executionId),this.value.setValue(r,L),this.isValid.setValue(!0,L)}catch(J){this.isValid.setValue(!1,L)}}}},15345:(L,r,p)=>{p.d(r,{d:()=>i});var J=p(15339);class i extends J.c{constructor(L,r,p,J,i){super(r,i),this._operation=p,this._className=J,this.a=this.registerDataInput("a",L)}_doOperation(L){return this._operation(this.a.getValue(L))}getClassName(){return this._className}}}}]);