"use strict";(self.dwifukwnts=self.dwifukwnts||[]).push([[88],{14823:(U,X,b)=>{b.r(X),b.d(X,{FlowGraphAbsBlock:()=>j,FlowGraphAcosBlock:()=>wU,FlowGraphAcoshBlock:()=>nU,FlowGraphAddBlock:()=>J,FlowGraphAsinBlock:()=>EU,FlowGraphAsinhBlock:()=>RU,FlowGraphAtan2Block:()=>zU,FlowGraphAtanBlock:()=>QU,FlowGraphAtanhBlock:()=>aU,FlowGraphBitwiseAndBlock:()=>PU,FlowGraphBitwiseLeftShiftBlock:()=>eU,FlowGraphBitwiseNotBlock:()=>iU,FlowGraphBitwiseOrBlock:()=>fU,FlowGraphBitwiseRightShiftBlock:()=>lU,FlowGraphBitwiseXorBlock:()=>jU,FlowGraphCeilBlock:()=>k,FlowGraphClampBlock:()=>Y,FlowGraphCosBlock:()=>bU,FlowGraphCoshBlock:()=>pU,FlowGraphCubeRootBlock:()=>NU,FlowGraphDegToRadBlock:()=>C,FlowGraphDivideBlock:()=>I,FlowGraphEBlock:()=>N,FlowGraphEqualityBlock:()=>D,FlowGraphExpBlock:()=>JU,FlowGraphFloorBlock:()=>d,FlowGraphFractionBlock:()=>A,FlowGraphGreaterThanBlock:()=>r,FlowGraphGreaterThanOrEqualBlock:()=>M,FlowGraphInfBlock:()=>i,FlowGraphIsInfinityBlock:()=>T,FlowGraphIsNanBlock:()=>H,FlowGraphLeadingZerosBlock:()=>dU,FlowGraphLessThanBlock:()=>Z,FlowGraphLessThanOrEqualBlock:()=>c,FlowGraphLog10Block:()=>IU,FlowGraphLog2Block:()=>xU,FlowGraphLogBlock:()=>mU,FlowGraphMathInterpolationBlock:()=>L,FlowGraphMaxBlock:()=>y,FlowGraphMinBlock:()=>o,FlowGraphModuloBlock:()=>B,FlowGraphMultiplyBlock:()=>x,FlowGraphNaNBlock:()=>P,FlowGraphNegationBlock:()=>s,FlowGraphOneBitsCounterBlock:()=>vU,FlowGraphPiBlock:()=>u,FlowGraphPowerBlock:()=>uU,FlowGraphRadToDegBlock:()=>UU,FlowGraphRandomBlock:()=>O,FlowGraphRoundBlock:()=>v,FlowGraphSaturateBlock:()=>V,FlowGraphSignBlock:()=>e,FlowGraphSinBlock:()=>XU,FlowGraphSinhBlock:()=>qU,FlowGraphSquareRootBlock:()=>OU,FlowGraphSubtractBlock:()=>m,FlowGraphTanBlock:()=>FU,FlowGraphTanhBlock:()=>SU,FlowGraphTrailingZerosBlock:()=>kU,FlowGraphTruncBlock:()=>l});var F=b(11551),E=b(13281),w=b(14828),Q=b(14831);class z extends Q.e{constructor(U,X,b,F){super(U,F),this._operation=X,this._className=b}_doOperation(U){return this._operation(U)}getClassName(){return this._className}}var q=b(11593),p=b(14838);class S extends Q.e{constructor(U,X,b,F,E,w,Q){super(F,Q),this._operation=E,this._className=w,this.a=this.registerDataInput("a",U),this.b=this.registerDataInput("b",X),this.c=this.registerDataInput("c",b)}_doOperation(U){return this._operation(this.a.getValue(U),this.b.getValue(U),this.c.getValue(U))}getClassName(){return this._className}}var R=b(13276),n=b(13287),a=b(13315);class J extends w.d{constructor(U){super((0,E.L)(null===U||void 0===U?void 0:U.type),(0,E.L)(null===U||void 0===U?void 0:U.type),(0,E.L)(null===U||void 0===U?void 0:U.type),((U,X)=>this._polymorphicAdd(U,X)),"FlowGraphAddBlock",U)}_polymorphicAdd(U,X){const b=(0,a.j)(U),F=(0,a.j)(X);if((0,a.g)(b,F)||(0,a.e)(b,F)||(0,a.b)(b,F))return U.add(X);if("Quaternion"===b||"Vector4"===F)return new q.Vector4(U.x,U.y,U.z,U.w).addInPlace(X);if("Vector4"===b||"Quaternion"===F)return U.add(X);var E;if(null!==(E=this.config)&&void 0!==E&&E.preventIntegerFloatArithmetic&&typeof U!==typeof X)throw new Error("Cannot add different types of numbers.");return(0,a.m)(U)+(0,a.m)(X)}}(0,F.f)("FlowGraphAddBlock",J);class m extends w.d{constructor(U){super((0,E.L)(null===U||void 0===U?void 0:U.type),(0,E.L)(null===U||void 0===U?void 0:U.type),(0,E.L)(null===U||void 0===U?void 0:U.type),((U,X)=>this._polymorphicSubtract(U,X)),"FlowGraphSubtractBlock",U)}_polymorphicSubtract(U,X){const b=(0,a.j)(U),F=(0,a.j)(X);if((0,a.g)(b,F)||(0,a.b)(b,F)||(0,a.e)(b,F))return U.mX(X);if("Quaternion"===b||"Vector4"===F)return new q.Vector4(U.x,U.y,U.z,U.w).pR(X);if("Vector4"===b||"Quaternion"===F)return U.mX(X);var E;if(null!==(E=this.config)&&void 0!==E&&E.preventIntegerFloatArithmetic&&typeof U!==typeof X)throw new Error("Cannot add different types of numbers.");return(0,a.m)(U)-(0,a.m)(X)}}(0,F.f)("FlowGraphSubtractBlock",m);class x extends w.d{constructor(U){super((0,E.L)(null===U||void 0===U?void 0:U.type),(0,E.L)(null===U||void 0===U?void 0:U.type),(0,E.L)(null===U||void 0===U?void 0:U.type),((U,X)=>this._polymorphicMultiply(U,X)),"FlowGraphMultiplyBlock",U)}_polymorphicMultiply(U,X){const b=(0,a.j)(U),F=(0,a.j)(X);if((0,a.g)(b,F)||(0,a.b)(b,F))return U.multiply(X);if("Quaternion"===b||"Vector4"===F)return new q.Vector4(U.x,U.y,U.z,U.w).multiplyInPlace(X);if("Vector4"===b||"Quaternion"===F)return U.multiply(X);if((0,a.e)(b,F)){var E;if(null!==(E=this.config)&&void 0!==E&&E.useMatrixPerComponent){const F=U.m;for(let U=0;U<F.length;U++)F[U]*=X.m[U];return"Matrix2D"===b?new n.b(F):"Matrix3D"===b?new n.c(F):q.Matrix.uX(F)}return X.multiply(U)}var w;if(null!==(w=this.config)&&void 0!==w&&w.preventIntegerFloatArithmetic&&typeof U!==typeof X)throw new Error("Cannot add different types of numbers.");return(0,a.m)(U)*(0,a.m)(X)}}(0,F.f)("FlowGraphMultiplyBlock",x);class I extends w.d{constructor(U){super((0,E.L)(null===U||void 0===U?void 0:U.type),(0,E.L)(null===U||void 0===U?void 0:U.type),(0,E.L)(null===U||void 0===U?void 0:U.type),((U,X)=>this._polymorphicDivide(U,X)),"FlowGraphDivideBlock",U)}_polymorphicDivide(U,X){const b=(0,a.j)(U),F=(0,a.j)(X);if((0,a.g)(b,F)||(0,a.b)(b,F))return U.divide(X);if("Quaternion"===b||"Quaternion"===F){const b=U.clone();return b.x/=X.x,b.y/=X.y,b.z/=X.z,b.w/=X.w,b}if("Quaternion"===b||"Vector4"===F)return new q.Vector4(U.x,U.y,U.z,U.w).divideInPlace(X);if("Vector4"===b||"Quaternion"===F)return U.divide(X);if((0,a.e)(b,F)){var E;if(null!==(E=this.config)&&void 0!==E&&E.useMatrixPerComponent){const F=U.m;for(let U=0;U<F.length;U++)F[U]/=X.m[U];return"Matrix2D"===b?new n.b(F):"Matrix3D"===b?new n.c(F):q.Matrix.uX(F)}return U.divide(X)}var w;if(null!==(w=this.config)&&void 0!==w&&w.preventIntegerFloatArithmetic&&typeof U!==typeof X)throw new Error("Cannot add different types of numbers.");return(0,a.m)(U)/(0,a.m)(X)}}(0,F.f)("FlowGraphDivideBlock",I);class O extends z{constructor(U){super(E.s,(U=>this._random(U)),"FlowGraphRandomBlock",U),this.min=this.registerDataInput("min",E.s,(null===U||void 0===U?void 0:U.min)??0),this.max=this.registerDataInput("max",E.s,(null===U||void 0===U?void 0:U.max)??1),null!==U&&void 0!==U&&U.seed&&(this._seed=U.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const U=1e4*Math.sin(this._seed++);return U-Math.floor(U)}return Math.random()}_random(U){const X=this.min.getValue(U),b=this.max.getValue(U);return this._getRandomValue()*(b-X)+X}}(0,F.f)("FlowGraphRandomBlock",O);class N extends z{constructor(U){super(E.s,(()=>Math.E),"FlowGraphEBlock",U)}}(0,F.f)("FlowGraphEBlock",N);class u extends z{constructor(U){super(E.s,(()=>Math.PI),"FlowGraphPIBlock",U)}}(0,F.f)("FlowGraphPIBlock",u);class i extends z{constructor(U){super(E.s,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",U)}}(0,F.f)("FlowGraphInfBlock",i);class P extends z{constructor(U){super(E.s,(()=>Number.NaN),"FlowGraphNaNBlock",U)}}function f(U,X){switch((0,a.j)(U)){case"FlowGraphInteger":return new R.e(X(U.value));case"Vector2":return new q.Vector2(X(U.x),X(U.y));case"JX":return new q.JX(X(U.x),X(U.y),X(U.z));case"Vector4":return new q.Vector4(X(U.x),X(U.y),X(U.z),X(U.w));case"Quaternion":return new q.Quaternion(X(U.x),X(U.y),X(U.z),X(U.w));case"Matrix":return q.Matrix.uX(U.m.map(X));case"Matrix2D":return new n.b(U.m.map(X));case"Matrix3D":return new n.c(U.m.map(X));default:return X(U)}}(0,F.f)("FlowGraphNaNBlock",P);class j extends p.b{constructor(U){super(E.s,E.s,(U=>this._polymorphicAbs(U)),"FlowGraphAbsBlock",U)}_polymorphicAbs(U){return f(U,Math.abs)}}(0,F.f)("FlowGraphAbsBlock",j);class e extends p.b{constructor(U){super(E.s,E.s,(U=>this._polymorphicSign(U)),"FlowGraphSignBlock",U)}_polymorphicSign(U){return f(U,Math.sign)}}(0,F.f)("FlowGraphSignBlock",e);class l extends p.b{constructor(U){super(E.s,E.s,(U=>this._polymorphicTrunc(U)),"FlowGraphTruncBlock",U)}_polymorphicTrunc(U){return f(U,Math.trunc)}}(0,F.f)("FlowGraphTruncBlock",l);class d extends p.b{constructor(U){super(E.s,E.s,(U=>this._polymorphicFloor(U)),"FlowGraphFloorBlock",U)}_polymorphicFloor(U){return f(U,Math.floor)}}(0,F.f)("FlowGraphFloorBlock",d);class k extends p.b{constructor(U){super(E.b,E.b,(U=>this._polymorphicCeiling(U)),"FlowGraphCeilBlock",U)}_polymorphicCeiling(U){return f(U,Math.ceil)}}(0,F.f)("FlowGraphCeilBlock",k);class v extends p.b{constructor(U){super(E.b,E.b,(U=>this._polymorphicRound(U)),"FlowGraphRoundBlock",U)}_polymorphicRound(U){return f(U,(U=>{var X;return U<0&&null!==(X=this.config)&&void 0!==X&&X.roundHalfAwayFromZero?-Math.round(-U):Math.round(U)}))}}(0,F.f)("FlowGraphRoundBlock",v);class A extends p.b{constructor(U){super(E.b,E.b,(U=>this._polymorphicFraction(U)),"FlowGraphFractBlock",U)}_polymorphicFraction(U){return f(U,(U=>U-Math.floor(U)))}}(0,F.f)("FlowGraphFractBlock",A);class s extends p.b{constructor(U){super(E.b,E.b,(U=>this._polymorphicNeg(U)),"FlowGraphNegationBlock",U)}_polymorphicNeg(U){return f(U,(U=>-U))}}function h(U,X,b){switch((0,a.j)(U)){case"FlowGraphInteger":return new R.e(b(U.value,X.value));case"Vector2":return new q.Vector2(b(U.x,X.x),b(U.y,X.y));case"JX":return new q.JX(b(U.x,X.x),b(U.y,X.y),b(U.z,X.z));case"Vector4":return new q.Vector4(b(U.x,X.x),b(U.y,X.y),b(U.z,X.z),b(U.w,X.w));case"Quaternion":return new q.Quaternion(b(U.x,X.x),b(U.y,X.y),b(U.z,X.z),b(U.w,X.w));case"Matrix":return q.Matrix.uX(U.m.map(((U,F)=>b(U,X.m[F]))));case"Matrix2D":return new n.b(U.m.map(((U,F)=>b(U,X.m[F]))));case"Matrix3D":return new n.c(U.m.map(((U,F)=>b(U,X.m[F]))));default:return b((0,a.m)(U),(0,a.m)(X))}}(0,F.f)("FlowGraphNegationBlock",s);class B extends w.d{constructor(U){super(E.b,E.b,E.b,((U,X)=>this._polymorphicRemainder(U,X)),"FlowGraphModuloBlock",U)}_polymorphicRemainder(U,X){return h(U,X,((U,X)=>U%X))}}(0,F.f)("FlowGraphModuloBlock",B);class o extends w.d{constructor(U){super(E.b,E.b,E.b,((U,X)=>this._polymorphicMin(U,X)),"FlowGraphMinBlock",U)}_polymorphicMin(U,X){return h(U,X,Math.min)}}(0,F.f)("FlowGraphMinBlock",o);class y extends w.d{constructor(U){super(E.b,E.b,E.b,((U,X)=>this._polymorphicMax(U,X)),"FlowGraphMaxBlock",U)}_polymorphicMax(U,X){return h(U,X,Math.max)}}function t(U,X,b){return Math.min(Math.max(U,Math.min(X,b)),Math.max(X,b))}function W(U,X,b,F){switch((0,a.j)(U)){case"FlowGraphInteger":return new R.e(F(U.value,X.value,b.value));case"Vector2":return new q.Vector2(F(U.x,X.x,b.x),F(U.y,X.y,b.y));case"JX":return new q.JX(F(U.x,X.x,b.x),F(U.y,X.y,b.y),F(U.z,X.z,b.z));case"Vector4":return new q.Vector4(F(U.x,X.x,b.x),F(U.y,X.y,b.y),F(U.z,X.z,b.z),F(U.w,X.w,b.w));case"Quaternion":return new q.Quaternion(F(U.x,X.x,b.x),F(U.y,X.y,b.y),F(U.z,X.z,b.z),F(U.w,X.w,b.w));case"Matrix":return q.Matrix.uX(U.m.map(((U,E)=>F(U,X.m[E],b.m[E]))));case"Matrix2D":return new n.b(U.m.map(((U,E)=>F(U,X.m[E],b.m[E]))));case"Matrix3D":return new n.c(U.m.map(((U,E)=>F(U,X.m[E],b.m[E]))));default:return F((0,a.m)(U),(0,a.m)(X),(0,a.m)(b))}}(0,F.f)("FlowGraphMaxBlock",y);class Y extends S{constructor(U){super(E.b,E.b,E.b,E.b,((U,X,b)=>this._polymorphicClamp(U,X,b)),"FlowGraphClampBlock",U)}_polymorphicClamp(U,X,b){return W(U,X,b,t)}}function K(U){return Math.min(Math.max(U,0),1)}(0,F.f)("FlowGraphClampBlock",Y);class V extends p.b{constructor(U){super(E.b,E.b,(U=>this._polymorphicSaturate(U)),"FlowGraphSaturateBlock",U)}_polymorphicSaturate(U){return f(U,K)}}function g(U,X,b){return(1-b)*U+b*X}(0,F.f)("FlowGraphSaturateBlock",V);class L extends S{constructor(U){super(E.b,E.b,E.b,E.b,((U,X,b)=>this._polymorphicInterpolate(U,X,b)),"FlowGraphMathInterpolationBlock",U)}_polymorphicInterpolate(U,X,b){return W(U,X,b,g)}}(0,F.f)("FlowGraphMathInterpolationBlock",L);class D extends w.d{constructor(U){super(E.b,E.b,E.e,((U,X)=>this._polymorphicEq(U,X)),"FlowGraphEqualityBlock",U)}_polymorphicEq(U,X){const b=(0,a.j)(U),F=(0,a.j)(X);return typeof U===typeof X&&((0,a.g)(b,F)||(0,a.e)(b,F)||(0,a.b)(b,F)?U.equals(X):U===X)}}function G(U,X,b){if((0,a.p)(U)&&(0,a.p)(X))return b((0,a.m)(U),(0,a.m)(X));throw new Error(`Cannot compare ${U} and ${X}`)}(0,F.f)("FlowGraphEqualityBlock",D);class Z extends w.d{constructor(U){super(E.b,E.b,E.e,((U,X)=>this._polymorphicLessThan(U,X)),"FlowGraphLessThanBlock",U)}_polymorphicLessThan(U,X){return G(U,X,((U,X)=>U<X))}}(0,F.f)("FlowGraphLessThanBlock",Z);class c extends w.d{constructor(U){super(E.b,E.b,E.e,((U,X)=>this._polymorphicLessThanOrEqual(U,X)),"FlowGraphLessThanOrEqualBlock",U)}_polymorphicLessThanOrEqual(U,X){return G(U,X,((U,X)=>U<=X))}}(0,F.f)("FlowGraphLessThanOrEqualBlock",c);class r extends w.d{constructor(U){super(E.b,E.b,E.e,((U,X)=>this._polymorphicGreaterThan(U,X)),"FlowGraphGreaterThanBlock",U)}_polymorphicGreaterThan(U,X){return G(U,X,((U,X)=>U>X))}}(0,F.f)("FlowGraphGreaterThanBlock",r);class M extends w.d{constructor(U){super(E.b,E.b,E.e,((U,X)=>this._polymorphicGreaterThanOrEqual(U,X)),"FlowGraphGreaterThanOrEqualBlock",U)}_polymorphicGreaterThanOrEqual(U,X){return G(U,X,((U,X)=>U>=X))}}(0,F.f)("FlowGraphGreaterThanOrEqualBlock",M);class H extends p.b{constructor(U){super(E.b,E.e,(U=>this._polymorphicIsNan(U)),"FlowGraphIsNaNBlock",U)}_polymorphicIsNan(U){if((0,a.p)(U,!0))return isNaN((0,a.m)(U));throw new Error(`Cannot get NaN of ${U}`)}}(0,F.f)("FlowGraphIsNaNBlock",H);class T extends p.b{constructor(U){super(E.b,E.e,(U=>this._polymorphicIsInf(U)),"FlowGraphIsInfBlock",U)}_polymorphicIsInf(U){if((0,a.p)(U))return!isFinite((0,a.m)(U));throw new Error(`Cannot get isInf of ${U}`)}}(0,F.f)("FlowGraphIsInfBlock",T);class C extends p.b{constructor(U){super(E.b,E.b,(U=>this._polymorphicDegToRad(U)),"FlowGraphDegToRadBlock",U)}_degToRad(U){return U*Math.PI/180}_polymorphicDegToRad(U){return f(U,this._degToRad)}}(0,F.f)("FlowGraphDegToRadBlock",C);class UU extends p.b{constructor(U){super(E.b,E.b,(U=>this._polymorphicRadToDeg(U)),"FlowGraphRadToDegBlock",U)}_radToDeg(U){return 180*U/Math.PI}_polymorphicRadToDeg(U){return f(U,this._radToDeg)}}(0,F.f)("FlowGraphRadToDegBlock",UU);class XU extends p.b{constructor(U){super(E.s,E.s,(U=>this._polymorphicSin(U)),"FlowGraphSinBlock",U)}_polymorphicSin(U){return f(U,Math.sin)}}class bU extends p.b{constructor(U){super(E.s,E.s,(U=>this._polymorphicCos(U)),"FlowGraphCosBlock",U)}_polymorphicCos(U){return f(U,Math.cos)}}class FU extends p.b{constructor(U){super(E.s,E.s,(U=>this._polymorphicTan(U)),"FlowGraphTanBlock",U)}_polymorphicTan(U){return f(U,Math.tan)}}class EU extends p.b{constructor(U){super(E.s,E.s,(U=>this._polymorphicAsin(U)),"FlowGraphASinBlock",U)}_polymorphicAsin(U){return f(U,Math.asin)}}(0,F.f)("FlowGraphASinBlock",EU);class wU extends p.b{constructor(U){super(E.s,E.s,(U=>this._polymorphicAcos(U)),"FlowGraphACosBlock",U)}_polymorphicAcos(U){return f(U,Math.acos)}}(0,F.f)("FlowGraphACosBlock",wU);class QU extends p.b{constructor(U){super(E.s,E.s,(U=>this._polymorphicAtan(U)),"FlowGraphATanBlock",U)}_polymorphicAtan(U){return f(U,Math.atan)}}(0,F.f)("FlowGraphATanBlock",QU);class zU extends w.d{constructor(U){super(E.b,E.b,E.b,((U,X)=>this._polymorphicAtan2(U,X)),"FlowGraphATan2Block",U)}_polymorphicAtan2(U,X){return h(U,X,Math.atan2)}}(0,F.f)("FlowGraphATan2Block",zU);class qU extends p.b{constructor(U){super(E.b,E.b,(U=>this._polymorphicSinh(U)),"FlowGraphSinhBlock",U)}_polymorphicSinh(U){return f(U,Math.sinh)}}(0,F.f)("FlowGraphSinhBlock",qU);class pU extends p.b{constructor(U){super(E.b,E.b,(U=>this._polymorphicCosh(U)),"FlowGraphCoshBlock",U)}_polymorphicCosh(U){return f(U,Math.cosh)}}(0,F.f)("FlowGraphCoshBlock",pU);class SU extends p.b{constructor(U){super(E.b,E.b,(U=>this._polymorphicTanh(U)),"FlowGraphTanhBlock",U)}_polymorphicTanh(U){return f(U,Math.tanh)}}(0,F.f)("FlowGraphTanhBlock",SU);class RU extends p.b{constructor(U){super(E.b,E.s,(U=>this._polymorphicAsinh(U)),"FlowGraphASinhBlock",U)}_polymorphicAsinh(U){return f(U,Math.asinh)}}(0,F.f)("FlowGraphASinhBlock",RU);class nU extends p.b{constructor(U){super(E.b,E.s,(U=>this._polymorphicAcosh(U)),"FlowGraphACoshBlock",U)}_polymorphicAcosh(U){return f(U,Math.acosh)}}(0,F.f)("FlowGraphACoshBlock",nU);class aU extends p.b{constructor(U){super(E.b,E.s,(U=>this._polymorphicAtanh(U)),"FlowGraphATanhBlock",U)}_polymorphicAtanh(U){return f(U,Math.atanh)}}(0,F.f)("FlowGraphATanhBlock",aU);class JU extends p.b{constructor(U){super(E.b,E.s,(U=>this._polymorphicExp(U)),"FlowGraphExponentialBlock",U)}_polymorphicExp(U){return f(U,Math.exp)}}(0,F.f)("FlowGraphExponentialBlock",JU);class mU extends p.b{constructor(U){super(E.b,E.s,(U=>this._polymorphicLog(U)),"FlowGraphLogBlock",U)}_polymorphicLog(U){return f(U,Math.log)}}(0,F.f)("FlowGraphLogBlock",mU);class xU extends p.b{constructor(U){super(E.b,E.s,(U=>this._polymorphicLog2(U)),"FlowGraphLog2Block",U)}_polymorphicLog2(U){return f(U,Math.log2)}}(0,F.f)("FlowGraphLog2Block",xU);class IU extends p.b{constructor(U){super(E.b,E.s,(U=>this._polymorphicLog10(U)),"FlowGraphLog10Block",U)}_polymorphicLog10(U){return f(U,Math.log10)}}(0,F.f)("FlowGraphLog10Block",IU);class OU extends p.b{constructor(U){super(E.b,E.s,(U=>this._polymorphicSqrt(U)),"FlowGraphSquareRootBlock",U)}_polymorphicSqrt(U){return f(U,Math.sqrt)}}(0,F.f)("FlowGraphSquareRootBlock",OU);class NU extends p.b{constructor(U){super(E.b,E.s,(U=>this._polymorphicCubeRoot(U)),"FlowGraphCubeRootBlock",U)}_polymorphicCubeRoot(U){return f(U,Math.cbrt)}}(0,F.f)("FlowGraphCubeRootBlock",NU);class uU extends w.d{constructor(U){super(E.b,E.s,E.s,((U,X)=>this._polymorphicPow(U,X)),"FlowGraphPowerBlock",U)}_polymorphicPow(U,X){return h(U,X,Math.pow)}}(0,F.f)("FlowGraphPowerBlock",uU);class iU extends p.b{constructor(U){super((0,E.L)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,E.L)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(U=>"boolean"===typeof U?!U:"number"===typeof U?~U:new R.e(~U.value)),"FlowGraphBitwiseNotBlock",U)}}(0,F.f)("FlowGraphBitwiseNotBlock",iU);class PU extends w.d{constructor(U){super((0,E.L)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,E.L)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,E.L)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),((U,X)=>{if("boolean"===typeof U&&"boolean"===typeof X)return U&&X;if("number"===typeof U&&"number"===typeof X)return U&X;if("object"===typeof U&&"object"===typeof X)return new R.e(U.value&X.value);throw new Error(`Cannot perform bitwise AND on ${U} and ${X}`)}),"FlowGraphBitwiseAndBlock",U)}}(0,F.f)("FlowGraphBitwiseAndBlock",PU);class fU extends w.d{constructor(U){super((0,E.L)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,E.L)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,E.L)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),((U,X)=>{if("boolean"===typeof U&&"boolean"===typeof X)return U||X;if("number"===typeof U&&"number"===typeof X)return U|X;if("object"===typeof U&&"object"===typeof X)return new R.e(U.value|X.value);throw new Error(`Cannot perform bitwise OR on ${U} and ${X}`)}),"FlowGraphBitwiseOrBlock",U)}}(0,F.f)("FlowGraphBitwiseOrBlock",fU);class jU extends w.d{constructor(U){super((0,E.L)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,E.L)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,E.L)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),((U,X)=>{if("boolean"===typeof U&&"boolean"===typeof X)return U!==X;if("number"===typeof U&&"number"===typeof X)return U^X;if("object"===typeof U&&"object"===typeof X)return new R.e(U.value^X.value);throw new Error(`Cannot perform bitwise XOR on ${U} and ${X}`)}),"FlowGraphBitwiseXorBlock",U)}}(0,F.f)("FlowGraphBitwiseXorBlock",jU);class eU extends w.d{constructor(U){super(E.h,E.h,E.h,((U,X)=>new R.e(U.value<<X.value)),"FlowGraphBitwiseLeftShiftBlock",U)}}(0,F.f)("FlowGraphBitwiseLeftShiftBlock",eU);class lU extends w.d{constructor(U){super(E.h,E.h,E.h,((U,X)=>new R.e(U.value>>X.value)),"FlowGraphBitwiseRightShiftBlock",U)}}(0,F.f)("FlowGraphBitwiseRightShiftBlock",lU);class dU extends p.b{constructor(U){super(E.h,E.h,(U=>new R.e(Math.clz32(U.value))),"FlowGraphLeadingZerosBlock",U)}}(0,F.f)("FlowGraphLeadingZerosBlock",dU);class kU extends p.b{constructor(U){super(E.h,E.h,(U=>new R.e(U.value?31-Math.clz32(U.value&-U.value):32)),"FlowGraphTrailingZerosBlock",U)}}(0,F.f)("FlowGraphTrailingZerosBlock",kU);class vU extends p.b{constructor(U){super(E.h,E.h,(U=>new R.e(function(U){let X=0;for(;U;)X+=1&U,U>>=1;return X}(U.value))),"FlowGraphOneBitsCounterBlock",U)}}(0,F.f)("FlowGraphOneBitsCounterBlock",vU)},14828:(U,X,b)=>{b.d(X,{d:()=>E});var F=b(14831);class E extends F.e{constructor(U,X,b,F,E,w){super(b,w),this._operation=F,this._className=E,this.a=this.registerDataInput("a",U),this.b=this.registerDataInput("b",X)}_doOperation(U){const X=this.a.getValue(U),b=this.b.getValue(U);return this._operation(X,b)}getClassName(){return this._className}}},14831:(U,X,b)=>{b.d(X,{e:()=>z});var F=b(13308),E=b(13281);const w="cachedOperationValue",Q="cachedExecutionId";class z extends F.d{constructor(U,X){super(X),this.value=this.registerDataOutput("value",U),this.isValid=this.registerDataOutput("isValid",E.e)}_updateOutputs(U){const X=U._getExecutionVariable(this,Q,-1),b=U._getExecutionVariable(this,w,null);if(void 0!==b&&null!==b&&X===U.executionId)this.isValid.setValue(!0,U),this.value.setValue(b,U);else try{const X=this._doOperation(U);if(void 0===X||null===X)return void this.isValid.setValue(!1,U);U._setExecutionVariable(this,w,X),U._setExecutionVariable(this,Q,U.executionId),this.value.setValue(X,U),this.isValid.setValue(!0,U)}catch(F){this.isValid.setValue(!1,U)}}}},14838:(U,X,b)=>{b.d(X,{b:()=>E});var F=b(14831);class E extends F.e{constructor(U,X,b,F,E){super(X,E),this._operation=b,this._className=F,this.a=this.registerDataInput("a",U)}_doOperation(U){return this._operation(this.a.getValue(U))}getClassName(){return this._className}}}}]);