"use strict";(self.c2c3ycupenc=self.c2c3ycupenc||[]).push([[88],{14928:(c,r,D)=>{D.r(r),D.d(r,{FlowGraphAbsBlock:()=>U,FlowGraphAcosBlock:()=>tc,FlowGraphAcoshBlock:()=>mc,FlowGraphAddBlock:()=>v,FlowGraphAsinBlock:()=>Bc,FlowGraphAsinhBlock:()=>Ec,FlowGraphAtan2Block:()=>ac,FlowGraphAtanBlock:()=>uc,FlowGraphAtanhBlock:()=>Yc,FlowGraphBitwiseAndBlock:()=>ec,FlowGraphBitwiseLeftShiftBlock:()=>Nc,FlowGraphBitwiseNotBlock:()=>Xc,FlowGraphBitwiseOrBlock:()=>yc,FlowGraphBitwiseRightShiftBlock:()=>gc,FlowGraphBitwiseXorBlock:()=>Uc,FlowGraphCeilBlock:()=>S,FlowGraphClampBlock:()=>b,FlowGraphCosBlock:()=>Dc,FlowGraphCoshBlock:()=>xc,FlowGraphCubeRootBlock:()=>qc,FlowGraphDegToRadBlock:()=>V,FlowGraphDivideBlock:()=>Z,FlowGraphEBlock:()=>q,FlowGraphEqualityBlock:()=>s,FlowGraphExpBlock:()=>vc,FlowGraphFloorBlock:()=>z,FlowGraphFractionBlock:()=>f,FlowGraphGreaterThanBlock:()=>F,FlowGraphGreaterThanOrEqualBlock:()=>I,FlowGraphInfBlock:()=>X,FlowGraphIsInfinityBlock:()=>n,FlowGraphIsNanBlock:()=>i,FlowGraphLeadingZerosBlock:()=>zc,FlowGraphLessThanBlock:()=>Q,FlowGraphLessThanOrEqualBlock:()=>l,FlowGraphLog10Block:()=>Zc,FlowGraphLog2Block:()=>wc,FlowGraphLogBlock:()=>kc,FlowGraphMathInterpolationBlock:()=>R,FlowGraphMaxBlock:()=>G,FlowGraphMinBlock:()=>P,FlowGraphModuloBlock:()=>L,FlowGraphMultiplyBlock:()=>w,FlowGraphNaNBlock:()=>e,FlowGraphNegationBlock:()=>A,FlowGraphOneBitsCounterBlock:()=>Kc,FlowGraphPiBlock:()=>j,FlowGraphPowerBlock:()=>jc,FlowGraphRadToDegBlock:()=>cc,FlowGraphRandomBlock:()=>J,FlowGraphRoundBlock:()=>K,FlowGraphSaturateBlock:()=>C,FlowGraphSignBlock:()=>N,FlowGraphSinBlock:()=>rc,FlowGraphSinhBlock:()=>Hc,FlowGraphSquareRootBlock:()=>Jc,FlowGraphSubtractBlock:()=>k,FlowGraphTanBlock:()=>Wc,FlowGraphTanhBlock:()=>Mc,FlowGraphTrailingZerosBlock:()=>Sc,FlowGraphTruncBlock:()=>g});var W=D(11637),B=D(13392),t=D(14931),u=D(14938);class a extends u.c{constructor(c,r,D,W){super(c,W),this._operation=r,this._className=D}_doOperation(c){return this._operation(c)}getClassName(){return this._className}}var H=D(11683),x=D(14941);class M extends u.c{constructor(c,r,D,W,B,t,u){super(W,u),this._operation=B,this._className=t,this.a=this.registerDataInput("a",c),this.b=this.registerDataInput("b",r),this.c=this.registerDataInput("c",D)}_doOperation(c){return this._operation(this.a.getValue(c),this.b.getValue(c),this.c.getValue(c))}getClassName(){return this._className}}var E=D(13390),m=D(13395),Y=D(13420);class v extends t.e{constructor(c){super((0,B.O)(null===c||void 0===c?void 0:c.type),(0,B.O)(null===c||void 0===c?void 0:c.type),(0,B.O)(null===c||void 0===c?void 0:c.type),((c,r)=>this._polymorphicAdd(c,r)),"FlowGraphAddBlock",c)}_polymorphicAdd(c,r){const D=(0,Y.f)(c),W=(0,Y.f)(r);if((0,Y.d)(D,W)||(0,Y.c)(D,W)||(0,Y.b)(D,W))return c.add(r);if("Quaternion"===D||"Vector4"===W)return new H.Vector4(c.x,c.y,c.z,c.w).addInPlace(r);if("Vector4"===D||"Quaternion"===W)return c.add(r);var B;if(null!==(B=this.config)&&void 0!==B&&B.preventIntegerFloatArithmetic&&typeof c!==typeof r)throw new Error("Cannot add different types of numbers.");return(0,Y.j)(c)+(0,Y.j)(r)}}(0,W.e)("FlowGraphAddBlock",v);class k extends t.e{constructor(c){super((0,B.O)(null===c||void 0===c?void 0:c.type),(0,B.O)(null===c||void 0===c?void 0:c.type),(0,B.O)(null===c||void 0===c?void 0:c.type),((c,r)=>this._polymorphicSubtract(c,r)),"FlowGraphSubtractBlock",c)}_polymorphicSubtract(c,r){const D=(0,Y.f)(c),W=(0,Y.f)(r);if((0,Y.d)(D,W)||(0,Y.b)(D,W)||(0,Y.c)(D,W))return c.Jr(r);if("Quaternion"===D||"Vector4"===W)return new H.Vector4(c.x,c.y,c.z,c.w).BE(r);if("Vector4"===D||"Quaternion"===W)return c.Jr(r);var B;if(null!==(B=this.config)&&void 0!==B&&B.preventIntegerFloatArithmetic&&typeof c!==typeof r)throw new Error("Cannot add different types of numbers.");return(0,Y.j)(c)-(0,Y.j)(r)}}(0,W.e)("FlowGraphSubtractBlock",k);class w extends t.e{constructor(c){super((0,B.O)(null===c||void 0===c?void 0:c.type),(0,B.O)(null===c||void 0===c?void 0:c.type),(0,B.O)(null===c||void 0===c?void 0:c.type),((c,r)=>this._polymorphicMultiply(c,r)),"FlowGraphMultiplyBlock",c)}_polymorphicMultiply(c,r){const D=(0,Y.f)(c),W=(0,Y.f)(r);if((0,Y.d)(D,W)||(0,Y.b)(D,W))return c.multiply(r);if("Quaternion"===D||"Vector4"===W)return new H.Vector4(c.x,c.y,c.z,c.w).multiplyInPlace(r);if("Vector4"===D||"Quaternion"===W)return c.multiply(r);if((0,Y.c)(D,W)){var B;if(null!==(B=this.config)&&void 0!==B&&B.useMatrixPerComponent){const W=c.m;for(let c=0;c<W.length;c++)W[c]*=r.m[c];return"Matrix2D"===D?new m.e(W):"Matrix3D"===D?new m.i(W):H.Matrix.er(W)}return r.multiply(c)}var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof c!==typeof r)throw new Error("Cannot add different types of numbers.");return(0,Y.j)(c)*(0,Y.j)(r)}}(0,W.e)("FlowGraphMultiplyBlock",w);class Z extends t.e{constructor(c){super((0,B.O)(null===c||void 0===c?void 0:c.type),(0,B.O)(null===c||void 0===c?void 0:c.type),(0,B.O)(null===c||void 0===c?void 0:c.type),((c,r)=>this._polymorphicDivide(c,r)),"FlowGraphDivideBlock",c)}_polymorphicDivide(c,r){const D=(0,Y.f)(c),W=(0,Y.f)(r);if((0,Y.d)(D,W)||(0,Y.b)(D,W))return c.divide(r);if("Quaternion"===D||"Quaternion"===W){const D=c.clone();return D.x/=r.x,D.y/=r.y,D.z/=r.z,D.w/=r.w,D}if("Quaternion"===D||"Vector4"===W)return new H.Vector4(c.x,c.y,c.z,c.w).divideInPlace(r);if("Vector4"===D||"Quaternion"===W)return c.divide(r);if((0,Y.c)(D,W)){var B;if(null!==(B=this.config)&&void 0!==B&&B.useMatrixPerComponent){const W=c.m;for(let c=0;c<W.length;c++)W[c]/=r.m[c];return"Matrix2D"===D?new m.e(W):"Matrix3D"===D?new m.i(W):H.Matrix.er(W)}return c.divide(r)}var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof c!==typeof r)throw new Error("Cannot add different types of numbers.");return(0,Y.j)(c)/(0,Y.j)(r)}}(0,W.e)("FlowGraphDivideBlock",Z);class J extends a{constructor(c){super(B.u,(c=>this._random(c)),"FlowGraphRandomBlock",c),this.min=this.registerDataInput("min",B.u,(null===c||void 0===c?void 0:c.min)??0),this.max=this.registerDataInput("max",B.u,(null===c||void 0===c?void 0:c.max)??1),null!==c&&void 0!==c&&c.seed&&(this._seed=c.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const c=1e4*Math.sin(this._seed++);return c-Math.floor(c)}return Math.random()}_random(c){const r=this.min.getValue(c),D=this.max.getValue(c);return this._getRandomValue()*(D-r)+r}}(0,W.e)("FlowGraphRandomBlock",J);class q extends a{constructor(c){super(B.u,(()=>Math.E),"FlowGraphEBlock",c)}}(0,W.e)("FlowGraphEBlock",q);class j extends a{constructor(c){super(B.u,(()=>Math.PI),"FlowGraphPIBlock",c)}}(0,W.e)("FlowGraphPIBlock",j);class X extends a{constructor(c){super(B.u,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",c)}}(0,W.e)("FlowGraphInfBlock",X);class e extends a{constructor(c){super(B.u,(()=>Number.NaN),"FlowGraphNaNBlock",c)}}function y(c,r){switch((0,Y.f)(c)){case"FlowGraphInteger":return new E.d(r(c.value));case"Vector2":return new H.Vector2(r(c.x),r(c.y));case"Zr":return new H.Zr(r(c.x),r(c.y),r(c.z));case"Vector4":return new H.Vector4(r(c.x),r(c.y),r(c.z),r(c.w));case"Quaternion":return new H.Quaternion(r(c.x),r(c.y),r(c.z),r(c.w));case"Matrix":return H.Matrix.er(c.m.map(r));case"Matrix2D":return new m.e(c.m.map(r));case"Matrix3D":return new m.i(c.m.map(r));default:return r(c)}}(0,W.e)("FlowGraphNaNBlock",e);class U extends x.e{constructor(c){super(B.u,B.u,(c=>this._polymorphicAbs(c)),"FlowGraphAbsBlock",c)}_polymorphicAbs(c){return y(c,Math.abs)}}(0,W.e)("FlowGraphAbsBlock",U);class N extends x.e{constructor(c){super(B.u,B.u,(c=>this._polymorphicSign(c)),"FlowGraphSignBlock",c)}_polymorphicSign(c){return y(c,Math.sign)}}(0,W.e)("FlowGraphSignBlock",N);class g extends x.e{constructor(c){super(B.u,B.u,(c=>this._polymorphicTrunc(c)),"FlowGraphTruncBlock",c)}_polymorphicTrunc(c){return y(c,Math.trunc)}}(0,W.e)("FlowGraphTruncBlock",g);class z extends x.e{constructor(c){super(B.u,B.u,(c=>this._polymorphicFloor(c)),"FlowGraphFloorBlock",c)}_polymorphicFloor(c){return y(c,Math.floor)}}(0,W.e)("FlowGraphFloorBlock",z);class S extends x.e{constructor(c){super(B.c,B.c,(c=>this._polymorphicCeiling(c)),"FlowGraphCeilBlock",c)}_polymorphicCeiling(c){return y(c,Math.ceil)}}(0,W.e)("FlowGraphCeilBlock",S);class K extends x.e{constructor(c){super(B.c,B.c,(c=>this._polymorphicRound(c)),"FlowGraphRoundBlock",c)}_polymorphicRound(c){return y(c,(c=>{var r;return c<0&&null!==(r=this.config)&&void 0!==r&&r.roundHalfAwayFromZero?-Math.round(-c):Math.round(c)}))}}(0,W.e)("FlowGraphRoundBlock",K);class f extends x.e{constructor(c){super(B.c,B.c,(c=>this._polymorphicFraction(c)),"FlowGraphFractBlock",c)}_polymorphicFraction(c){return y(c,(c=>c-Math.floor(c)))}}(0,W.e)("FlowGraphFractBlock",f);class A extends x.e{constructor(c){super(B.c,B.c,(c=>this._polymorphicNeg(c)),"FlowGraphNegationBlock",c)}_polymorphicNeg(c){return y(c,(c=>-c))}}function h(c,r,D){switch((0,Y.f)(c)){case"FlowGraphInteger":return new E.d(D(c.value,r.value));case"Vector2":return new H.Vector2(D(c.x,r.x),D(c.y,r.y));case"Zr":return new H.Zr(D(c.x,r.x),D(c.y,r.y),D(c.z,r.z));case"Vector4":return new H.Vector4(D(c.x,r.x),D(c.y,r.y),D(c.z,r.z),D(c.w,r.w));case"Quaternion":return new H.Quaternion(D(c.x,r.x),D(c.y,r.y),D(c.z,r.z),D(c.w,r.w));case"Matrix":return H.Matrix.er(c.m.map(((c,W)=>D(c,r.m[W]))));case"Matrix2D":return new m.e(c.m.map(((c,W)=>D(c,r.m[W]))));case"Matrix3D":return new m.i(c.m.map(((c,W)=>D(c,r.m[W]))));default:return D((0,Y.j)(c),(0,Y.j)(r))}}(0,W.e)("FlowGraphNegationBlock",A);class L extends t.e{constructor(c){super(B.c,B.c,B.c,((c,r)=>this._polymorphicRemainder(c,r)),"FlowGraphModuloBlock",c)}_polymorphicRemainder(c,r){return h(c,r,((c,r)=>c%r))}}(0,W.e)("FlowGraphModuloBlock",L);class P extends t.e{constructor(c){super(B.c,B.c,B.c,((c,r)=>this._polymorphicMin(c,r)),"FlowGraphMinBlock",c)}_polymorphicMin(c,r){return h(c,r,Math.min)}}(0,W.e)("FlowGraphMinBlock",P);class G extends t.e{constructor(c){super(B.c,B.c,B.c,((c,r)=>this._polymorphicMax(c,r)),"FlowGraphMaxBlock",c)}_polymorphicMax(c,r){return h(c,r,Math.max)}}function d(c,r,D){return Math.min(Math.max(c,Math.min(r,D)),Math.max(r,D))}function T(c,r,D,W){switch((0,Y.f)(c)){case"FlowGraphInteger":return new E.d(W(c.value,r.value,D.value));case"Vector2":return new H.Vector2(W(c.x,r.x,D.x),W(c.y,r.y,D.y));case"Zr":return new H.Zr(W(c.x,r.x,D.x),W(c.y,r.y,D.y),W(c.z,r.z,D.z));case"Vector4":return new H.Vector4(W(c.x,r.x,D.x),W(c.y,r.y,D.y),W(c.z,r.z,D.z),W(c.w,r.w,D.w));case"Quaternion":return new H.Quaternion(W(c.x,r.x,D.x),W(c.y,r.y,D.y),W(c.z,r.z,D.z),W(c.w,r.w,D.w));case"Matrix":return H.Matrix.er(c.m.map(((c,B)=>W(c,r.m[B],D.m[B]))));case"Matrix2D":return new m.e(c.m.map(((c,B)=>W(c,r.m[B],D.m[B]))));case"Matrix3D":return new m.i(c.m.map(((c,B)=>W(c,r.m[B],D.m[B]))));default:return W((0,Y.j)(c),(0,Y.j)(r),(0,Y.j)(D))}}(0,W.e)("FlowGraphMaxBlock",G);class b extends M{constructor(c){super(B.c,B.c,B.c,B.c,((c,r,D)=>this._polymorphicClamp(c,r,D)),"FlowGraphClampBlock",c)}_polymorphicClamp(c,r,D){return T(c,r,D,d)}}function O(c){return Math.min(Math.max(c,0),1)}(0,W.e)("FlowGraphClampBlock",b);class C extends x.e{constructor(c){super(B.c,B.c,(c=>this._polymorphicSaturate(c)),"FlowGraphSaturateBlock",c)}_polymorphicSaturate(c){return y(c,O)}}function p(c,r,D){return(1-D)*c+D*r}(0,W.e)("FlowGraphSaturateBlock",C);class R extends M{constructor(c){super(B.c,B.c,B.c,B.c,((c,r,D)=>this._polymorphicInterpolate(c,r,D)),"FlowGraphMathInterpolationBlock",c)}_polymorphicInterpolate(c,r,D){return T(c,r,D,p)}}(0,W.e)("FlowGraphMathInterpolationBlock",R);class s extends t.e{constructor(c){super(B.c,B.c,B.e,((c,r)=>this._polymorphicEq(c,r)),"FlowGraphEqualityBlock",c)}_polymorphicEq(c,r){const D=(0,Y.f)(c),W=(0,Y.f)(r);return typeof c===typeof r&&((0,Y.d)(D,W)||(0,Y.c)(D,W)||(0,Y.b)(D,W)?c.equals(r):c===r)}}function o(c,r,D){if((0,Y.m)(c)&&(0,Y.m)(r))return D((0,Y.j)(c),(0,Y.j)(r));throw new Error(`Cannot compare ${c} and ${r}`)}(0,W.e)("FlowGraphEqualityBlock",s);class Q extends t.e{constructor(c){super(B.c,B.c,B.e,((c,r)=>this._polymorphicLessThan(c,r)),"FlowGraphLessThanBlock",c)}_polymorphicLessThan(c,r){return o(c,r,((c,r)=>c<r))}}(0,W.e)("FlowGraphLessThanBlock",Q);class l extends t.e{constructor(c){super(B.c,B.c,B.e,((c,r)=>this._polymorphicLessThanOrEqual(c,r)),"FlowGraphLessThanOrEqualBlock",c)}_polymorphicLessThanOrEqual(c,r){return o(c,r,((c,r)=>c<=r))}}(0,W.e)("FlowGraphLessThanOrEqualBlock",l);class F extends t.e{constructor(c){super(B.c,B.c,B.e,((c,r)=>this._polymorphicGreaterThan(c,r)),"FlowGraphGreaterThanBlock",c)}_polymorphicGreaterThan(c,r){return o(c,r,((c,r)=>c>r))}}(0,W.e)("FlowGraphGreaterThanBlock",F);class I extends t.e{constructor(c){super(B.c,B.c,B.e,((c,r)=>this._polymorphicGreaterThanOrEqual(c,r)),"FlowGraphGreaterThanOrEqualBlock",c)}_polymorphicGreaterThanOrEqual(c,r){return o(c,r,((c,r)=>c>=r))}}(0,W.e)("FlowGraphGreaterThanOrEqualBlock",I);class i extends x.e{constructor(c){super(B.c,B.e,(c=>this._polymorphicIsNan(c)),"FlowGraphIsNaNBlock",c)}_polymorphicIsNan(c){if((0,Y.m)(c,!0))return isNaN((0,Y.j)(c));throw new Error(`Cannot get NaN of ${c}`)}}(0,W.e)("FlowGraphIsNaNBlock",i);class n extends x.e{constructor(c){super(B.c,B.e,(c=>this._polymorphicIsInf(c)),"FlowGraphIsInfBlock",c)}_polymorphicIsInf(c){if((0,Y.m)(c))return!isFinite((0,Y.j)(c));throw new Error(`Cannot get isInf of ${c}`)}}(0,W.e)("FlowGraphIsInfBlock",n);class V extends x.e{constructor(c){super(B.c,B.c,(c=>this._polymorphicDegToRad(c)),"FlowGraphDegToRadBlock",c)}_degToRad(c){return c*Math.PI/180}_polymorphicDegToRad(c){return y(c,this._degToRad)}}(0,W.e)("FlowGraphDegToRadBlock",V);class cc extends x.e{constructor(c){super(B.c,B.c,(c=>this._polymorphicRadToDeg(c)),"FlowGraphRadToDegBlock",c)}_radToDeg(c){return 180*c/Math.PI}_polymorphicRadToDeg(c){return y(c,this._radToDeg)}}(0,W.e)("FlowGraphRadToDegBlock",cc);class rc extends x.e{constructor(c){super(B.u,B.u,(c=>this._polymorphicSin(c)),"FlowGraphSinBlock",c)}_polymorphicSin(c){return y(c,Math.sin)}}class Dc extends x.e{constructor(c){super(B.u,B.u,(c=>this._polymorphicCos(c)),"FlowGraphCosBlock",c)}_polymorphicCos(c){return y(c,Math.cos)}}class Wc extends x.e{constructor(c){super(B.u,B.u,(c=>this._polymorphicTan(c)),"FlowGraphTanBlock",c)}_polymorphicTan(c){return y(c,Math.tan)}}class Bc extends x.e{constructor(c){super(B.u,B.u,(c=>this._polymorphicAsin(c)),"FlowGraphASinBlock",c)}_polymorphicAsin(c){return y(c,Math.asin)}}(0,W.e)("FlowGraphASinBlock",Bc);class tc extends x.e{constructor(c){super(B.u,B.u,(c=>this._polymorphicAcos(c)),"FlowGraphACosBlock",c)}_polymorphicAcos(c){return y(c,Math.acos)}}(0,W.e)("FlowGraphACosBlock",tc);class uc extends x.e{constructor(c){super(B.u,B.u,(c=>this._polymorphicAtan(c)),"FlowGraphATanBlock",c)}_polymorphicAtan(c){return y(c,Math.atan)}}(0,W.e)("FlowGraphATanBlock",uc);class ac extends t.e{constructor(c){super(B.c,B.c,B.c,((c,r)=>this._polymorphicAtan2(c,r)),"FlowGraphATan2Block",c)}_polymorphicAtan2(c,r){return h(c,r,Math.atan2)}}(0,W.e)("FlowGraphATan2Block",ac);class Hc extends x.e{constructor(c){super(B.c,B.c,(c=>this._polymorphicSinh(c)),"FlowGraphSinhBlock",c)}_polymorphicSinh(c){return y(c,Math.sinh)}}(0,W.e)("FlowGraphSinhBlock",Hc);class xc extends x.e{constructor(c){super(B.c,B.c,(c=>this._polymorphicCosh(c)),"FlowGraphCoshBlock",c)}_polymorphicCosh(c){return y(c,Math.cosh)}}(0,W.e)("FlowGraphCoshBlock",xc);class Mc extends x.e{constructor(c){super(B.c,B.c,(c=>this._polymorphicTanh(c)),"FlowGraphTanhBlock",c)}_polymorphicTanh(c){return y(c,Math.tanh)}}(0,W.e)("FlowGraphTanhBlock",Mc);class Ec extends x.e{constructor(c){super(B.c,B.u,(c=>this._polymorphicAsinh(c)),"FlowGraphASinhBlock",c)}_polymorphicAsinh(c){return y(c,Math.asinh)}}(0,W.e)("FlowGraphASinhBlock",Ec);class mc extends x.e{constructor(c){super(B.c,B.u,(c=>this._polymorphicAcosh(c)),"FlowGraphACoshBlock",c)}_polymorphicAcosh(c){return y(c,Math.acosh)}}(0,W.e)("FlowGraphACoshBlock",mc);class Yc extends x.e{constructor(c){super(B.c,B.u,(c=>this._polymorphicAtanh(c)),"FlowGraphATanhBlock",c)}_polymorphicAtanh(c){return y(c,Math.atanh)}}(0,W.e)("FlowGraphATanhBlock",Yc);class vc extends x.e{constructor(c){super(B.c,B.u,(c=>this._polymorphicExp(c)),"FlowGraphExponentialBlock",c)}_polymorphicExp(c){return y(c,Math.exp)}}(0,W.e)("FlowGraphExponentialBlock",vc);class kc extends x.e{constructor(c){super(B.c,B.u,(c=>this._polymorphicLog(c)),"FlowGraphLogBlock",c)}_polymorphicLog(c){return y(c,Math.log)}}(0,W.e)("FlowGraphLogBlock",kc);class wc extends x.e{constructor(c){super(B.c,B.u,(c=>this._polymorphicLog2(c)),"FlowGraphLog2Block",c)}_polymorphicLog2(c){return y(c,Math.log2)}}(0,W.e)("FlowGraphLog2Block",wc);class Zc extends x.e{constructor(c){super(B.c,B.u,(c=>this._polymorphicLog10(c)),"FlowGraphLog10Block",c)}_polymorphicLog10(c){return y(c,Math.log10)}}(0,W.e)("FlowGraphLog10Block",Zc);class Jc extends x.e{constructor(c){super(B.c,B.u,(c=>this._polymorphicSqrt(c)),"FlowGraphSquareRootBlock",c)}_polymorphicSqrt(c){return y(c,Math.sqrt)}}(0,W.e)("FlowGraphSquareRootBlock",Jc);class qc extends x.e{constructor(c){super(B.c,B.u,(c=>this._polymorphicCubeRoot(c)),"FlowGraphCubeRootBlock",c)}_polymorphicCubeRoot(c){return y(c,Math.cbrt)}}(0,W.e)("FlowGraphCubeRootBlock",qc);class jc extends t.e{constructor(c){super(B.c,B.u,B.u,((c,r)=>this._polymorphicPow(c,r)),"FlowGraphPowerBlock",c)}_polymorphicPow(c,r){return h(c,r,Math.pow)}}(0,W.e)("FlowGraphPowerBlock",jc);class Xc extends x.e{constructor(c){super((0,B.O)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),(0,B.O)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),(c=>"boolean"===typeof c?!c:"number"===typeof c?~c:new E.d(~c.value)),"FlowGraphBitwiseNotBlock",c)}}(0,W.e)("FlowGraphBitwiseNotBlock",Xc);class ec extends t.e{constructor(c){super((0,B.O)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),(0,B.O)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),(0,B.O)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),((c,r)=>{if("boolean"===typeof c&&"boolean"===typeof r)return c&&r;if("number"===typeof c&&"number"===typeof r)return c&r;if("object"===typeof c&&"object"===typeof r)return new E.d(c.value&r.value);throw new Error(`Cannot perform bitwise AND on ${c} and ${r}`)}),"FlowGraphBitwiseAndBlock",c)}}(0,W.e)("FlowGraphBitwiseAndBlock",ec);class yc extends t.e{constructor(c){super((0,B.O)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),(0,B.O)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),(0,B.O)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),((c,r)=>{if("boolean"===typeof c&&"boolean"===typeof r)return c||r;if("number"===typeof c&&"number"===typeof r)return c|r;if("object"===typeof c&&"object"===typeof r)return new E.d(c.value|r.value);throw new Error(`Cannot perform bitwise OR on ${c} and ${r}`)}),"FlowGraphBitwiseOrBlock",c)}}(0,W.e)("FlowGraphBitwiseOrBlock",yc);class Uc extends t.e{constructor(c){super((0,B.O)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),(0,B.O)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),(0,B.O)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),((c,r)=>{if("boolean"===typeof c&&"boolean"===typeof r)return c!==r;if("number"===typeof c&&"number"===typeof r)return c^r;if("object"===typeof c&&"object"===typeof r)return new E.d(c.value^r.value);throw new Error(`Cannot perform bitwise XOR on ${c} and ${r}`)}),"FlowGraphBitwiseXorBlock",c)}}(0,W.e)("FlowGraphBitwiseXorBlock",Uc);class Nc extends t.e{constructor(c){super(B.h,B.h,B.h,((c,r)=>new E.d(c.value<<r.value)),"FlowGraphBitwiseLeftShiftBlock",c)}}(0,W.e)("FlowGraphBitwiseLeftShiftBlock",Nc);class gc extends t.e{constructor(c){super(B.h,B.h,B.h,((c,r)=>new E.d(c.value>>r.value)),"FlowGraphBitwiseRightShiftBlock",c)}}(0,W.e)("FlowGraphBitwiseRightShiftBlock",gc);class zc extends x.e{constructor(c){super(B.h,B.h,(c=>new E.d(Math.clz32(c.value))),"FlowGraphLeadingZerosBlock",c)}}(0,W.e)("FlowGraphLeadingZerosBlock",zc);class Sc extends x.e{constructor(c){super(B.h,B.h,(c=>new E.d(c.value?31-Math.clz32(c.value&-c.value):32)),"FlowGraphTrailingZerosBlock",c)}}(0,W.e)("FlowGraphTrailingZerosBlock",Sc);class Kc extends x.e{constructor(c){super(B.h,B.h,(c=>new E.d(function(c){let r=0;for(;c;)r+=1&c,c>>=1;return r}(c.value))),"FlowGraphOneBitsCounterBlock",c)}}(0,W.e)("FlowGraphOneBitsCounterBlock",Kc)},14931:(c,r,D)=>{D.d(r,{e:()=>B});var W=D(14938);class B extends W.c{constructor(c,r,D,W,B,t){super(D,t),this._operation=W,this._className=B,this.a=this.registerDataInput("a",c),this.b=this.registerDataInput("b",r)}_doOperation(c){const r=this.a.getValue(c),D=this.b.getValue(c);return this._operation(r,D)}getClassName(){return this._className}}},14938:(c,r,D)=>{D.d(r,{c:()=>a});var W=D(13408),B=D(13392);const t="cachedOperationValue",u="cachedExecutionId";class a extends W.d{constructor(c,r){super(r),this.value=this.registerDataOutput("value",c),this.isValid=this.registerDataOutput("isValid",B.e)}_updateOutputs(c){const r=c._getExecutionVariable(this,u,-1),D=c._getExecutionVariable(this,t,null);if(void 0!==D&&null!==D&&r===c.executionId)this.isValid.setValue(!0,c),this.value.setValue(D,c);else try{const r=this._doOperation(c);if(void 0===r||null===r)return void this.isValid.setValue(!1,c);c._setExecutionVariable(this,t,r),c._setExecutionVariable(this,u,c.executionId),this.value.setValue(r,c),this.isValid.setValue(!0,c)}catch(W){this.isValid.setValue(!1,c)}}}},14941:(c,r,D)=>{D.d(r,{e:()=>B});var W=D(14938);class B extends W.c{constructor(c,r,D,W,B){super(r,B),this._operation=D,this._className=W,this.a=this.registerDataInput("a",c)}_doOperation(c){return this._operation(this.a.getValue(c))}getClassName(){return this._className}}}}]);