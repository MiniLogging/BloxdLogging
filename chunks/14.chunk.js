"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[14],{2690:(P,Q,O)=>{O.r(Q),O.d(Q,{_TGATextureLoader:()=>q});var b=O(561);function F(P){let Q=0;return{id_length:P[Q++],colormap_type:P[Q++],image_type:P[Q++],colormap_index:P[Q++]|P[Q++]<<8,colormap_length:P[Q++]|P[Q++]<<8,colormap_size:P[Q++],origin:[P[Q++]|P[Q++]<<8,P[Q++]|P[Q++]<<8],width:P[Q++]|P[Q++]<<8,height:P[Q++]|P[Q++]<<8,pixel_size:P[Q++],flags:P[Q++]}}function g(P,Q){if(Q.length<19)return void b.d.Error("Unable to load TGA file - Not enough data to contain header");let O=18;const g=F(Q);if(g.id_length+O>Q.length)return void b.d.Error("Unable to load TGA file - Not enough data");O+=g.id_length;let q,R=!1,X=!1,C=!1;switch(g.image_type){case 9:R=!0;case 1:X=!0;break;case 10:R=!0;case 2:break;case 11:R=!0;case 3:C=!0}const L=g.pixel_size>>3,G=g.width*g.height*L;let A,j,w,W,r,K,T;if(X&&(A=Q.subarray(O,O+=g.colormap_length*(g.colormap_size>>3))),R){let P,b,F;q=new Uint8Array(G);let g=0;const m=new Uint8Array(L);for(;O<G&&g<G;)if(P=Q[O++],b=1+(127&P),128&P){for(F=0;F<L;++F)m[F]=Q[O++];for(F=0;F<b;++F)q.set(m,g+F*L);g+=L*b}else{for(b*=L,F=0;F<b;++F)q[g+F]=Q[O++];g+=b}}else q=Q.subarray(O,O+=X?g.width*g.height:G);switch((48&g.flags)>>4){default:case 2:j=0,W=1,T=g.width,w=0,r=1,K=g.height;break;case 0:j=0,W=1,T=g.width,w=g.height-1,r=-1,K=-1;break;case 3:j=g.width-1,W=-1,T=-1,w=0,r=1,K=g.height;break;case 1:j=g.width-1,W=-1,T=-1,w=g.height-1,r=-1,K=-1}const x="_getImageData"+(C?"Grey":"")+g.pixel_size+"bits",u=m[x](g,A,q,w,r,K,j,W,T);P.getEngine()._uploadDataToTextureDirectly(P,u)}const m={GetTGAHeader:F,UploadContent:g,_getImageData8bits:function(P,Q,O,b,F,g,m,q,R){const X=O,C=Q,L=P.width,G=P.height;let A,j,w,W=0;const r=new Uint8Array(L*G*4);for(w=b;w!==g;w+=F)for(j=m;j!==R;j+=q,W++)A=X[W],r[4*(j+L*w)+3]=255,r[4*(j+L*w)+2]=C[3*A+0],r[4*(j+L*w)+1]=C[3*A+1],r[4*(j+L*w)+0]=C[3*A+2];return r},_getImageData16bits:function(P,Q,O,b,F,g,m,q,R){const X=O,C=P.width,L=P.height;let G,A,j,w=0;const W=new Uint8Array(C*L*4);for(j=b;j!==g;j+=F)for(A=m;A!==R;A+=q,w+=2){G=X[w+0]+(X[w+1]<<8);const P=255*((31744&G)>>10)/31|0,Q=255*((992&G)>>5)/31|0,O=255*(31&G)/31|0;W[4*(A+C*j)+0]=P,W[4*(A+C*j)+1]=Q,W[4*(A+C*j)+2]=O,W[4*(A+C*j)+3]=32768&G?0:255}return W},_getImageData24bits:function(P,Q,O,b,F,g,m,q,R){const X=O,C=P.width,L=P.height;let G,A,j=0;const w=new Uint8Array(C*L*4);for(A=b;A!==g;A+=F)for(G=m;G!==R;G+=q,j+=3)w[4*(G+C*A)+3]=255,w[4*(G+C*A)+2]=X[j+0],w[4*(G+C*A)+1]=X[j+1],w[4*(G+C*A)+0]=X[j+2];return w},_getImageData32bits:function(P,Q,O,b,F,g,m,q,R){const X=O,C=P.width,L=P.height;let G,A,j=0;const w=new Uint8Array(C*L*4);for(A=b;A!==g;A+=F)for(G=m;G!==R;G+=q,j+=4)w[4*(G+C*A)+2]=X[j+0],w[4*(G+C*A)+1]=X[j+1],w[4*(G+C*A)+0]=X[j+2],w[4*(G+C*A)+3]=X[j+3];return w},_getImageDataGrey8bits:function(P,Q,O,b,F,g,m,q,R){const X=O,C=P.width,L=P.height;let G,A,j,w=0;const W=new Uint8Array(C*L*4);for(j=b;j!==g;j+=F)for(A=m;A!==R;A+=q,w++)G=X[w],W[4*(A+C*j)+0]=G,W[4*(A+C*j)+1]=G,W[4*(A+C*j)+2]=G,W[4*(A+C*j)+3]=255;return W},_getImageDataGrey16bits:function(P,Q,O,b,F,g,m,q,R){const X=O,C=P.width,L=P.height;let G,A,j=0;const w=new Uint8Array(C*L*4);for(A=b;A!==g;A+=F)for(G=m;G!==R;G+=q,j+=2)w[4*(G+C*A)+0]=X[j+0],w[4*(G+C*A)+1]=X[j+0],w[4*(G+C*A)+2]=X[j+0],w[4*(G+C*A)+3]=X[j+1];return w}};class q{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(P,Q,O){const b=new Uint8Array(P.buffer,P.byteOffset,P.byteLength),m=F(b);O(m.width,m.height,Q.generateMipMaps,!1,(()=>{g(Q,b)}))}}}}]);