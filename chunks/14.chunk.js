"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[14],{2580:(W,F,c)=>{c.r(F),c.d(F,{_TGATextureLoader:()=>A});var T=c(520);function Y(W){let F=0;return{id_length:W[F++],colormap_type:W[F++],image_type:W[F++],colormap_index:W[F++]|W[F++]<<8,colormap_length:W[F++]|W[F++]<<8,colormap_size:W[F++],origin:[W[F++]|W[F++]<<8,W[F++]|W[F++]<<8],width:W[F++]|W[F++]<<8,height:W[F++]|W[F++]<<8,pixel_size:W[F++],flags:W[F++]}}function Z(W,F){if(F.length<19)return void T.e.Error("Unable to load TGA file - Not enough data to contain header");let c=18;const Z=Y(F);if(Z.id_length+c>F.length)return void T.e.Error("Unable to load TGA file - Not enough data");c+=Z.id_length;let A,u=!1,s=!1,x=!1;switch(Z.image_type){case 9:u=!0;case 1:s=!0;break;case 10:u=!0;case 2:break;case 11:u=!0;case 3:x=!0}const j=Z.pixel_size>>3,N=Z.width*Z.height*j;let q,y,i,e,I,E,O;if(s&&(q=F.subarray(c,c+=Z.colormap_length*(Z.colormap_size>>3))),u){let W,T,Y;A=new Uint8Array(N);let Z=0;const w=new Uint8Array(j);for(;c<N&&Z<N;)if(W=F[c++],T=1+(127&W),128&W){for(Y=0;Y<j;++Y)w[Y]=F[c++];for(Y=0;Y<T;++Y)A.set(w,Z+Y*j);Z+=j*T}else{for(T*=j,Y=0;Y<T;++Y)A[Z+Y]=F[c++];Z+=T}}else A=F.subarray(c,c+=s?Z.width*Z.height:N);switch((48&Z.flags)>>4){default:case 2:y=0,e=1,O=Z.width,i=0,I=1,E=Z.height;break;case 0:y=0,e=1,O=Z.width,i=Z.height-1,I=-1,E=-1;break;case 3:y=Z.width-1,e=-1,O=-1,i=0,I=1,E=Z.height;break;case 1:y=Z.width-1,e=-1,O=-1,i=Z.height-1,I=-1,E=-1}const z="_getImageData"+(x?"Grey":"")+Z.pixel_size+"bits",G=w[z](Z,q,A,i,I,E,y,e,O);W.getEngine()._uploadDataToTextureDirectly(W,G)}const w={GetTGAHeader:Y,UploadContent:Z,_getImageData8bits:function(W,F,c,T,Y,Z,w,A,u){const s=c,x=F,j=W.width,N=W.height;let q,y,i,e=0;const I=new Uint8Array(j*N*4);for(i=T;i!==Z;i+=Y)for(y=w;y!==u;y+=A,e++)q=s[e],I[4*(y+j*i)+3]=255,I[4*(y+j*i)+2]=x[3*q+0],I[4*(y+j*i)+1]=x[3*q+1],I[4*(y+j*i)+0]=x[3*q+2];return I},_getImageData16bits:function(W,F,c,T,Y,Z,w,A,u){const s=c,x=W.width,j=W.height;let N,q,y,i=0;const e=new Uint8Array(x*j*4);for(y=T;y!==Z;y+=Y)for(q=w;q!==u;q+=A,i+=2){N=s[i+0]+(s[i+1]<<8);const W=255*((31744&N)>>10)/31|0,F=255*((992&N)>>5)/31|0,c=255*(31&N)/31|0;e[4*(q+x*y)+0]=W,e[4*(q+x*y)+1]=F,e[4*(q+x*y)+2]=c,e[4*(q+x*y)+3]=32768&N?0:255}return e},_getImageData24bits:function(W,F,c,T,Y,Z,w,A,u){const s=c,x=W.width,j=W.height;let N,q,y=0;const i=new Uint8Array(x*j*4);for(q=T;q!==Z;q+=Y)for(N=w;N!==u;N+=A,y+=3)i[4*(N+x*q)+3]=255,i[4*(N+x*q)+2]=s[y+0],i[4*(N+x*q)+1]=s[y+1],i[4*(N+x*q)+0]=s[y+2];return i},_getImageData32bits:function(W,F,c,T,Y,Z,w,A,u){const s=c,x=W.width,j=W.height;let N,q,y=0;const i=new Uint8Array(x*j*4);for(q=T;q!==Z;q+=Y)for(N=w;N!==u;N+=A,y+=4)i[4*(N+x*q)+2]=s[y+0],i[4*(N+x*q)+1]=s[y+1],i[4*(N+x*q)+0]=s[y+2],i[4*(N+x*q)+3]=s[y+3];return i},_getImageDataGrey8bits:function(W,F,c,T,Y,Z,w,A,u){const s=c,x=W.width,j=W.height;let N,q,y,i=0;const e=new Uint8Array(x*j*4);for(y=T;y!==Z;y+=Y)for(q=w;q!==u;q+=A,i++)N=s[i],e[4*(q+x*y)+0]=N,e[4*(q+x*y)+1]=N,e[4*(q+x*y)+2]=N,e[4*(q+x*y)+3]=255;return e},_getImageDataGrey16bits:function(W,F,c,T,Y,Z,w,A,u){const s=c,x=W.width,j=W.height;let N,q,y=0;const i=new Uint8Array(x*j*4);for(q=T;q!==Z;q+=Y)for(N=w;N!==u;N+=A,y+=2)i[4*(N+x*q)+0]=s[y+0],i[4*(N+x*q)+1]=s[y+0],i[4*(N+x*q)+2]=s[y+0],i[4*(N+x*q)+3]=s[y+1];return i}};class A{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(W,F,c){const T=new Uint8Array(W.buffer,W.byteOffset,W.byteLength),w=Y(T);c(w.width,w.height,F.generateMipMaps,!1,(()=>{Z(F,T)}))}}}}]);