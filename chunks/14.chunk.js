"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[14],{2579:(n,k,T)=>{T.r(k),T.d(k,{_TGATextureLoader:()=>w});var c=T(556);function K(n){let k=0;return{id_length:n[k++],colormap_type:n[k++],image_type:n[k++],colormap_index:n[k++]|n[k++]<<8,colormap_length:n[k++]|n[k++]<<8,colormap_size:n[k++],origin:[n[k++]|n[k++]<<8,n[k++]|n[k++]<<8],width:n[k++]|n[k++]<<8,height:n[k++]|n[k++]<<8,pixel_size:n[k++],flags:n[k++]}}function Q(n,k){if(k.length<19)return void c.d.Error("Unable to load TGA file - Not enough data to contain header");let T=18;const Q=K(k);if(Q.id_length+T>k.length)return void c.d.Error("Unable to load TGA file - Not enough data");T+=Q.id_length;let w,E=!1,I=!1,S=!1;switch(Q.image_type){case 9:E=!0;case 1:I=!0;break;case 10:E=!0;case 2:break;case 11:E=!0;case 3:S=!0}const P=Q.pixel_size>>3,W=Q.width*Q.height*P;let J,H,s,b,C,z,r;if(I&&(J=k.subarray(T,T+=Q.colormap_length*(Q.colormap_size>>3))),E){let n,c,K;w=new Uint8Array(W);let Q=0;const G=new Uint8Array(P);for(;T<W&&Q<W;)if(n=k[T++],c=1+(127&n),128&n){for(K=0;K<P;++K)G[K]=k[T++];for(K=0;K<c;++K)w.set(G,Q+K*P);Q+=P*c}else{for(c*=P,K=0;K<c;++K)w[Q+K]=k[T++];Q+=c}}else w=k.subarray(T,T+=I?Q.width*Q.height:W);switch((48&Q.flags)>>4){default:case 2:H=0,b=1,r=Q.width,s=0,C=1,z=Q.height;break;case 0:H=0,b=1,r=Q.width,s=Q.height-1,C=-1,z=-1;break;case 3:H=Q.width-1,b=-1,r=-1,s=0,C=1,z=Q.height;break;case 1:H=Q.width-1,b=-1,r=-1,s=Q.height-1,C=-1,z=-1}const q="_getImageData"+(S?"Grey":"")+Q.pixel_size+"bits",O=G[q](Q,J,w,s,C,z,H,b,r);n.getEngine()._uploadDataToTextureDirectly(n,O)}const G={GetTGAHeader:K,UploadContent:Q,_getImageData8bits:function(n,k,T,c,K,Q,G,w,E){const I=T,S=k,P=n.width,W=n.height;let J,H,s,b=0;const C=new Uint8Array(P*W*4);for(s=c;s!==Q;s+=K)for(H=G;H!==E;H+=w,b++)J=I[b],C[4*(H+P*s)+3]=255,C[4*(H+P*s)+2]=S[3*J+0],C[4*(H+P*s)+1]=S[3*J+1],C[4*(H+P*s)+0]=S[3*J+2];return C},_getImageData16bits:function(n,k,T,c,K,Q,G,w,E){const I=T,S=n.width,P=n.height;let W,J,H,s=0;const b=new Uint8Array(S*P*4);for(H=c;H!==Q;H+=K)for(J=G;J!==E;J+=w,s+=2){W=I[s+0]+(I[s+1]<<8);const n=255*((31744&W)>>10)/31|0,k=255*((992&W)>>5)/31|0,T=255*(31&W)/31|0;b[4*(J+S*H)+0]=n,b[4*(J+S*H)+1]=k,b[4*(J+S*H)+2]=T,b[4*(J+S*H)+3]=32768&W?0:255}return b},_getImageData24bits:function(n,k,T,c,K,Q,G,w,E){const I=T,S=n.width,P=n.height;let W,J,H=0;const s=new Uint8Array(S*P*4);for(J=c;J!==Q;J+=K)for(W=G;W!==E;W+=w,H+=3)s[4*(W+S*J)+3]=255,s[4*(W+S*J)+2]=I[H+0],s[4*(W+S*J)+1]=I[H+1],s[4*(W+S*J)+0]=I[H+2];return s},_getImageData32bits:function(n,k,T,c,K,Q,G,w,E){const I=T,S=n.width,P=n.height;let W,J,H=0;const s=new Uint8Array(S*P*4);for(J=c;J!==Q;J+=K)for(W=G;W!==E;W+=w,H+=4)s[4*(W+S*J)+2]=I[H+0],s[4*(W+S*J)+1]=I[H+1],s[4*(W+S*J)+0]=I[H+2],s[4*(W+S*J)+3]=I[H+3];return s},_getImageDataGrey8bits:function(n,k,T,c,K,Q,G,w,E){const I=T,S=n.width,P=n.height;let W,J,H,s=0;const b=new Uint8Array(S*P*4);for(H=c;H!==Q;H+=K)for(J=G;J!==E;J+=w,s++)W=I[s],b[4*(J+S*H)+0]=W,b[4*(J+S*H)+1]=W,b[4*(J+S*H)+2]=W,b[4*(J+S*H)+3]=255;return b},_getImageDataGrey16bits:function(n,k,T,c,K,Q,G,w,E){const I=T,S=n.width,P=n.height;let W,J,H=0;const s=new Uint8Array(S*P*4);for(J=c;J!==Q;J+=K)for(W=G;W!==E;W+=w,H+=2)s[4*(W+S*J)+0]=I[H+0],s[4*(W+S*J)+1]=I[H+0],s[4*(W+S*J)+2]=I[H+0],s[4*(W+S*J)+3]=I[H+1];return s}};class w{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(n,k,T){const c=new Uint8Array(n.buffer,n.byteOffset,n.byteLength),G=K(c);T(G.width,G.height,k.generateMipMaps,!1,(()=>{Q(k,c)}))}}}}]);