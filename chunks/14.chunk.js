"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[14],{2514:(A,X,s)=>{s.r(X),s.d(X,{_TGATextureLoader:()=>K});var N=s(470);function f(A){let X=0;return{id_length:A[X++],colormap_type:A[X++],image_type:A[X++],colormap_index:A[X++]|A[X++]<<8,colormap_length:A[X++]|A[X++]<<8,colormap_size:A[X++],origin:[A[X++]|A[X++]<<8,A[X++]|A[X++]<<8],width:A[X++]|A[X++]<<8,height:A[X++]|A[X++]<<8,pixel_size:A[X++],flags:A[X++]}}function E(A,X){if(X.length<19)return void N.b.Error("Unable to load TGA file - Not enough data to contain header");let s=18;const E=f(X);if(E.id_length+s>X.length)return void N.b.Error("Unable to load TGA file - Not enough data");s+=E.id_length;let K,r=!1,i=!1,Y=!1;switch(E.image_type){case 9:r=!0;case 1:i=!0;break;case 10:r=!0;case 2:break;case 11:r=!0;case 3:Y=!0}const v=E.pixel_size>>3,c=E.width*E.height*v;let M,d,Q,w,R,C,J;if(i&&(M=X.subarray(s,s+=E.colormap_length*(E.colormap_size>>3))),r){let A,N,f;K=new Uint8Array(c);let E=0;const g=new Uint8Array(v);for(;s<c&&E<c;)if(A=X[s++],N=1+(127&A),128&A){for(f=0;f<v;++f)g[f]=X[s++];for(f=0;f<N;++f)K.set(g,E+f*v);E+=v*N}else{for(N*=v,f=0;f<N;++f)K[E+f]=X[s++];E+=N}}else K=X.subarray(s,s+=i?E.width*E.height:c);switch((48&E.flags)>>4){default:case 2:d=0,w=1,J=E.width,Q=0,R=1,C=E.height;break;case 0:d=0,w=1,J=E.width,Q=E.height-1,R=-1,C=-1;break;case 3:d=E.width-1,w=-1,J=-1,Q=0,R=1,C=E.height;break;case 1:d=E.width-1,w=-1,J=-1,Q=E.height-1,R=-1,C=-1}const a="_getImageData"+(Y?"Grey":"")+E.pixel_size+"bits",u=g[a](E,M,K,Q,R,C,d,w,J);A.getEngine()._uploadDataToTextureDirectly(A,u)}const g={GetTGAHeader:f,UploadContent:E,_getImageData8bits:function(A,X,s,N,f,E,g,K,r){const i=s,Y=X,v=A.width,c=A.height;let M,d,Q,w=0;const R=new Uint8Array(v*c*4);for(Q=N;Q!==E;Q+=f)for(d=g;d!==r;d+=K,w++)M=i[w],R[4*(d+v*Q)+3]=255,R[4*(d+v*Q)+2]=Y[3*M+0],R[4*(d+v*Q)+1]=Y[3*M+1],R[4*(d+v*Q)+0]=Y[3*M+2];return R},_getImageData16bits:function(A,X,s,N,f,E,g,K,r){const i=s,Y=A.width,v=A.height;let c,M,d,Q=0;const w=new Uint8Array(Y*v*4);for(d=N;d!==E;d+=f)for(M=g;M!==r;M+=K,Q+=2){c=i[Q+0]+(i[Q+1]<<8);const A=255*((31744&c)>>10)/31|0,X=255*((992&c)>>5)/31|0,s=255*(31&c)/31|0;w[4*(M+Y*d)+0]=A,w[4*(M+Y*d)+1]=X,w[4*(M+Y*d)+2]=s,w[4*(M+Y*d)+3]=32768&c?0:255}return w},_getImageData24bits:function(A,X,s,N,f,E,g,K,r){const i=s,Y=A.width,v=A.height;let c,M,d=0;const Q=new Uint8Array(Y*v*4);for(M=N;M!==E;M+=f)for(c=g;c!==r;c+=K,d+=3)Q[4*(c+Y*M)+3]=255,Q[4*(c+Y*M)+2]=i[d+0],Q[4*(c+Y*M)+1]=i[d+1],Q[4*(c+Y*M)+0]=i[d+2];return Q},_getImageData32bits:function(A,X,s,N,f,E,g,K,r){const i=s,Y=A.width,v=A.height;let c,M,d=0;const Q=new Uint8Array(Y*v*4);for(M=N;M!==E;M+=f)for(c=g;c!==r;c+=K,d+=4)Q[4*(c+Y*M)+2]=i[d+0],Q[4*(c+Y*M)+1]=i[d+1],Q[4*(c+Y*M)+0]=i[d+2],Q[4*(c+Y*M)+3]=i[d+3];return Q},_getImageDataGrey8bits:function(A,X,s,N,f,E,g,K,r){const i=s,Y=A.width,v=A.height;let c,M,d,Q=0;const w=new Uint8Array(Y*v*4);for(d=N;d!==E;d+=f)for(M=g;M!==r;M+=K,Q++)c=i[Q],w[4*(M+Y*d)+0]=c,w[4*(M+Y*d)+1]=c,w[4*(M+Y*d)+2]=c,w[4*(M+Y*d)+3]=255;return w},_getImageDataGrey16bits:function(A,X,s,N,f,E,g,K,r){const i=s,Y=A.width,v=A.height;let c,M,d=0;const Q=new Uint8Array(Y*v*4);for(M=N;M!==E;M+=f)for(c=g;c!==r;c+=K,d+=2)Q[4*(c+Y*M)+0]=i[d+0],Q[4*(c+Y*M)+1]=i[d+0],Q[4*(c+Y*M)+2]=i[d+0],Q[4*(c+Y*M)+3]=i[d+1];return Q}};class K{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(A,X,s){const N=new Uint8Array(A.buffer,A.byteOffset,A.byteLength),g=f(N);s(g.width,g.height,X.generateMipMaps,!1,(()=>{E(X,N)}))}}}}]);