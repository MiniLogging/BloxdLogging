"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[14],{2616:(u,F,z)=>{z.r(F),z.d(F,{_TGATextureLoader:()=>I});var p=z(541);function b(u){let F=0;return{id_length:u[F++],colormap_type:u[F++],image_type:u[F++],colormap_index:u[F++]|u[F++]<<8,colormap_length:u[F++]|u[F++]<<8,colormap_size:u[F++],origin:[u[F++]|u[F++]<<8,u[F++]|u[F++]<<8],width:u[F++]|u[F++]<<8,height:u[F++]|u[F++]<<8,pixel_size:u[F++],flags:u[F++]}}function R(u,F){if(F.length<19)return void p.b.Error("Unable to load TGA file - Not enough data to contain header");let z=18;const R=b(F);if(R.id_length+z>F.length)return void p.b.Error("Unable to load TGA file - Not enough data");z+=R.id_length;let I,G=!1,X=!1,j=!1;switch(R.image_type){case 9:G=!0;case 1:X=!0;break;case 10:G=!0;case 2:break;case 11:G=!0;case 3:j=!0}const W=R.pixel_size>>3,E=R.width*R.height*W;let L,k,N,Y,e,d,C;if(X&&(L=F.subarray(z,z+=R.colormap_length*(R.colormap_size>>3))),G){let u,p,b;I=new Uint8Array(E);let R=0;const c=new Uint8Array(W);for(;z<E&&R<E;)if(u=F[z++],p=1+(127&u),128&u){for(b=0;b<W;++b)c[b]=F[z++];for(b=0;b<p;++b)I.set(c,R+b*W);R+=W*p}else{for(p*=W,b=0;b<p;++b)I[R+b]=F[z++];R+=p}}else I=F.subarray(z,z+=X?R.width*R.height:E);switch((48&R.flags)>>4){default:case 2:k=0,Y=1,C=R.width,N=0,e=1,d=R.height;break;case 0:k=0,Y=1,C=R.width,N=R.height-1,e=-1,d=-1;break;case 3:k=R.width-1,Y=-1,C=-1,N=0,e=1,d=R.height;break;case 1:k=R.width-1,Y=-1,C=-1,N=R.height-1,e=-1,d=-1}const r="_getImageData"+(j?"Grey":"")+R.pixel_size+"bits",f=c[r](R,L,I,N,e,d,k,Y,C);u.getEngine()._uploadDataToTextureDirectly(u,f)}const c={GetTGAHeader:b,UploadContent:R,_getImageData8bits:function(u,F,z,p,b,R,c,I,G){const X=z,j=F,W=u.width,E=u.height;let L,k,N,Y=0;const e=new Uint8Array(W*E*4);for(N=p;N!==R;N+=b)for(k=c;k!==G;k+=I,Y++)L=X[Y],e[4*(k+W*N)+3]=255,e[4*(k+W*N)+2]=j[3*L+0],e[4*(k+W*N)+1]=j[3*L+1],e[4*(k+W*N)+0]=j[3*L+2];return e},_getImageData16bits:function(u,F,z,p,b,R,c,I,G){const X=z,j=u.width,W=u.height;let E,L,k,N=0;const Y=new Uint8Array(j*W*4);for(k=p;k!==R;k+=b)for(L=c;L!==G;L+=I,N+=2){E=X[N+0]+(X[N+1]<<8);const u=255*((31744&E)>>10)/31|0,F=255*((992&E)>>5)/31|0,z=255*(31&E)/31|0;Y[4*(L+j*k)+0]=u,Y[4*(L+j*k)+1]=F,Y[4*(L+j*k)+2]=z,Y[4*(L+j*k)+3]=32768&E?0:255}return Y},_getImageData24bits:function(u,F,z,p,b,R,c,I,G){const X=z,j=u.width,W=u.height;let E,L,k=0;const N=new Uint8Array(j*W*4);for(L=p;L!==R;L+=b)for(E=c;E!==G;E+=I,k+=3)N[4*(E+j*L)+3]=255,N[4*(E+j*L)+2]=X[k+0],N[4*(E+j*L)+1]=X[k+1],N[4*(E+j*L)+0]=X[k+2];return N},_getImageData32bits:function(u,F,z,p,b,R,c,I,G){const X=z,j=u.width,W=u.height;let E,L,k=0;const N=new Uint8Array(j*W*4);for(L=p;L!==R;L+=b)for(E=c;E!==G;E+=I,k+=4)N[4*(E+j*L)+2]=X[k+0],N[4*(E+j*L)+1]=X[k+1],N[4*(E+j*L)+0]=X[k+2],N[4*(E+j*L)+3]=X[k+3];return N},_getImageDataGrey8bits:function(u,F,z,p,b,R,c,I,G){const X=z,j=u.width,W=u.height;let E,L,k,N=0;const Y=new Uint8Array(j*W*4);for(k=p;k!==R;k+=b)for(L=c;L!==G;L+=I,N++)E=X[N],Y[4*(L+j*k)+0]=E,Y[4*(L+j*k)+1]=E,Y[4*(L+j*k)+2]=E,Y[4*(L+j*k)+3]=255;return Y},_getImageDataGrey16bits:function(u,F,z,p,b,R,c,I,G){const X=z,j=u.width,W=u.height;let E,L,k=0;const N=new Uint8Array(j*W*4);for(L=p;L!==R;L+=b)for(E=c;E!==G;E+=I,k+=2)N[4*(E+j*L)+0]=X[k+0],N[4*(E+j*L)+1]=X[k+0],N[4*(E+j*L)+2]=X[k+0],N[4*(E+j*L)+3]=X[k+1];return N}};class I{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(u,F,z){const p=new Uint8Array(u.buffer,u.byteOffset,u.byteLength),c=b(p);z(c.width,c.height,F.generateMipMaps,!1,(()=>{R(F,p)}))}}}}]);