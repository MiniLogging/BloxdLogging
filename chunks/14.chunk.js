"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[14],{2566:(U,M,b)=>{b.r(M),b.d(M,{_TGATextureLoader:()=>y});var a=b(497);function A(U){let M=0;return{id_length:U[M++],colormap_type:U[M++],image_type:U[M++],colormap_index:U[M++]|U[M++]<<8,colormap_length:U[M++]|U[M++]<<8,colormap_size:U[M++],origin:[U[M++]|U[M++]<<8,U[M++]|U[M++]<<8],width:U[M++]|U[M++]<<8,height:U[M++]|U[M++]<<8,pixel_size:U[M++],flags:U[M++]}}function H(U,M){if(M.length<19)return void a.b.Error("Unable to load TGA file - Not enough data to contain header");let b=18;const H=A(M);if(H.id_length+b>M.length)return void a.b.Error("Unable to load TGA file - Not enough data");b+=H.id_length;let y,O=!1,e=!1,x=!1;switch(H.image_type){case 9:O=!0;case 1:e=!0;break;case 10:O=!0;case 2:break;case 11:O=!0;case 3:x=!0}const P=H.pixel_size>>3,Z=H.width*H.height*P;let C,r,B,J,F,f,L;if(e&&(C=M.subarray(b,b+=H.colormap_length*(H.colormap_size>>3))),O){let U,a,A;y=new Uint8Array(Z);let H=0;const W=new Uint8Array(P);for(;b<Z&&H<Z;)if(U=M[b++],a=1+(127&U),128&U){for(A=0;A<P;++A)W[A]=M[b++];for(A=0;A<a;++A)y.set(W,H+A*P);H+=P*a}else{for(a*=P,A=0;A<a;++A)y[H+A]=M[b++];H+=a}}else y=M.subarray(b,b+=e?H.width*H.height:Z);switch((48&H.flags)>>4){default:case 2:r=0,J=1,L=H.width,B=0,F=1,f=H.height;break;case 0:r=0,J=1,L=H.width,B=H.height-1,F=-1,f=-1;break;case 3:r=H.width-1,J=-1,L=-1,B=0,F=1,f=H.height;break;case 1:r=H.width-1,J=-1,L=-1,B=H.height-1,F=-1,f=-1}const z="_getImageData"+(x?"Grey":"")+H.pixel_size+"bits",o=W[z](H,C,y,B,F,f,r,J,L);U.getEngine()._uploadDataToTextureDirectly(U,o)}const W={GetTGAHeader:A,UploadContent:H,_getImageData8bits:function(U,M,b,a,A,H,W,y,O){const e=b,x=M,P=U.width,Z=U.height;let C,r,B,J=0;const F=new Uint8Array(P*Z*4);for(B=a;B!==H;B+=A)for(r=W;r!==O;r+=y,J++)C=e[J],F[4*(r+P*B)+3]=255,F[4*(r+P*B)+2]=x[3*C+0],F[4*(r+P*B)+1]=x[3*C+1],F[4*(r+P*B)+0]=x[3*C+2];return F},_getImageData16bits:function(U,M,b,a,A,H,W,y,O){const e=b,x=U.width,P=U.height;let Z,C,r,B=0;const J=new Uint8Array(x*P*4);for(r=a;r!==H;r+=A)for(C=W;C!==O;C+=y,B+=2){Z=e[B+0]+(e[B+1]<<8);const U=255*((31744&Z)>>10)/31|0,M=255*((992&Z)>>5)/31|0,b=255*(31&Z)/31|0;J[4*(C+x*r)+0]=U,J[4*(C+x*r)+1]=M,J[4*(C+x*r)+2]=b,J[4*(C+x*r)+3]=32768&Z?0:255}return J},_getImageData24bits:function(U,M,b,a,A,H,W,y,O){const e=b,x=U.width,P=U.height;let Z,C,r=0;const B=new Uint8Array(x*P*4);for(C=a;C!==H;C+=A)for(Z=W;Z!==O;Z+=y,r+=3)B[4*(Z+x*C)+3]=255,B[4*(Z+x*C)+2]=e[r+0],B[4*(Z+x*C)+1]=e[r+1],B[4*(Z+x*C)+0]=e[r+2];return B},_getImageData32bits:function(U,M,b,a,A,H,W,y,O){const e=b,x=U.width,P=U.height;let Z,C,r=0;const B=new Uint8Array(x*P*4);for(C=a;C!==H;C+=A)for(Z=W;Z!==O;Z+=y,r+=4)B[4*(Z+x*C)+2]=e[r+0],B[4*(Z+x*C)+1]=e[r+1],B[4*(Z+x*C)+0]=e[r+2],B[4*(Z+x*C)+3]=e[r+3];return B},_getImageDataGrey8bits:function(U,M,b,a,A,H,W,y,O){const e=b,x=U.width,P=U.height;let Z,C,r,B=0;const J=new Uint8Array(x*P*4);for(r=a;r!==H;r+=A)for(C=W;C!==O;C+=y,B++)Z=e[B],J[4*(C+x*r)+0]=Z,J[4*(C+x*r)+1]=Z,J[4*(C+x*r)+2]=Z,J[4*(C+x*r)+3]=255;return J},_getImageDataGrey16bits:function(U,M,b,a,A,H,W,y,O){const e=b,x=U.width,P=U.height;let Z,C,r=0;const B=new Uint8Array(x*P*4);for(C=a;C!==H;C+=A)for(Z=W;Z!==O;Z+=y,r+=2)B[4*(Z+x*C)+0]=e[r+0],B[4*(Z+x*C)+1]=e[r+0],B[4*(Z+x*C)+2]=e[r+0],B[4*(Z+x*C)+3]=e[r+1];return B}};class y{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(U,M,b){const a=new Uint8Array(U.buffer,U.byteOffset,U.byteLength),W=A(a);b(W.width,W.height,M.generateMipMaps,!1,(()=>{H(M,a)}))}}}}]);