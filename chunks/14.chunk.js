"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[14],{2526:(J,T,b)=>{b.r(T),b.d(T,{_TGATextureLoader:()=>Y});var q=b(519);function t(J){let T=0;return{id_length:J[T++],colormap_type:J[T++],image_type:J[T++],colormap_index:J[T++]|J[T++]<<8,colormap_length:J[T++]|J[T++]<<8,colormap_size:J[T++],origin:[J[T++]|J[T++]<<8,J[T++]|J[T++]<<8],width:J[T++]|J[T++]<<8,height:J[T++]|J[T++]<<8,pixel_size:J[T++],flags:J[T++]}}function j(J,T){if(T.length<19)return void q.d.Error("Unable to load TGA file - Not enough data to contain header");let b=18;const j=t(T);if(j.id_length+b>T.length)return void q.d.Error("Unable to load TGA file - Not enough data");b+=j.id_length;let Y,C=!1,F=!1,A=!1;switch(j.image_type){case 9:C=!0;case 1:F=!0;break;case 10:C=!0;case 2:break;case 11:C=!0;case 3:A=!0}const a=j.pixel_size>>3,P=j.width*j.height*a;let v,G,x,I,u,U,K;if(F&&(v=T.subarray(b,b+=j.colormap_length*(j.colormap_size>>3))),C){let J,q,t;Y=new Uint8Array(P);let j=0;const B=new Uint8Array(a);for(;b<P&&j<P;)if(J=T[b++],q=1+(127&J),128&J){for(t=0;t<a;++t)B[t]=T[b++];for(t=0;t<q;++t)Y.set(B,j+t*a);j+=a*q}else{for(q*=a,t=0;t<q;++t)Y[j+t]=T[b++];j+=q}}else Y=T.subarray(b,b+=F?j.width*j.height:P);switch((48&j.flags)>>4){default:case 2:G=0,I=1,K=j.width,x=0,u=1,U=j.height;break;case 0:G=0,I=1,K=j.width,x=j.height-1,u=-1,U=-1;break;case 3:G=j.width-1,I=-1,K=-1,x=0,u=1,U=j.height;break;case 1:G=j.width-1,I=-1,K=-1,x=j.height-1,u=-1,U=-1}const E="_getImageData"+(A?"Grey":"")+j.pixel_size+"bits",l=B[E](j,v,Y,x,u,U,G,I,K);J.getEngine()._uploadDataToTextureDirectly(J,l)}const B={GetTGAHeader:t,UploadContent:j,_getImageData8bits:function(J,T,b,q,t,j,B,Y,C){const F=b,A=T,a=J.width,P=J.height;let v,G,x,I=0;const u=new Uint8Array(a*P*4);for(x=q;x!==j;x+=t)for(G=B;G!==C;G+=Y,I++)v=F[I],u[4*(G+a*x)+3]=255,u[4*(G+a*x)+2]=A[3*v+0],u[4*(G+a*x)+1]=A[3*v+1],u[4*(G+a*x)+0]=A[3*v+2];return u},_getImageData16bits:function(J,T,b,q,t,j,B,Y,C){const F=b,A=J.width,a=J.height;let P,v,G,x=0;const I=new Uint8Array(A*a*4);for(G=q;G!==j;G+=t)for(v=B;v!==C;v+=Y,x+=2){P=F[x+0]+(F[x+1]<<8);const J=255*((31744&P)>>10)/31|0,T=255*((992&P)>>5)/31|0,b=255*(31&P)/31|0;I[4*(v+A*G)+0]=J,I[4*(v+A*G)+1]=T,I[4*(v+A*G)+2]=b,I[4*(v+A*G)+3]=32768&P?0:255}return I},_getImageData24bits:function(J,T,b,q,t,j,B,Y,C){const F=b,A=J.width,a=J.height;let P,v,G=0;const x=new Uint8Array(A*a*4);for(v=q;v!==j;v+=t)for(P=B;P!==C;P+=Y,G+=3)x[4*(P+A*v)+3]=255,x[4*(P+A*v)+2]=F[G+0],x[4*(P+A*v)+1]=F[G+1],x[4*(P+A*v)+0]=F[G+2];return x},_getImageData32bits:function(J,T,b,q,t,j,B,Y,C){const F=b,A=J.width,a=J.height;let P,v,G=0;const x=new Uint8Array(A*a*4);for(v=q;v!==j;v+=t)for(P=B;P!==C;P+=Y,G+=4)x[4*(P+A*v)+2]=F[G+0],x[4*(P+A*v)+1]=F[G+1],x[4*(P+A*v)+0]=F[G+2],x[4*(P+A*v)+3]=F[G+3];return x},_getImageDataGrey8bits:function(J,T,b,q,t,j,B,Y,C){const F=b,A=J.width,a=J.height;let P,v,G,x=0;const I=new Uint8Array(A*a*4);for(G=q;G!==j;G+=t)for(v=B;v!==C;v+=Y,x++)P=F[x],I[4*(v+A*G)+0]=P,I[4*(v+A*G)+1]=P,I[4*(v+A*G)+2]=P,I[4*(v+A*G)+3]=255;return I},_getImageDataGrey16bits:function(J,T,b,q,t,j,B,Y,C){const F=b,A=J.width,a=J.height;let P,v,G=0;const x=new Uint8Array(A*a*4);for(v=q;v!==j;v+=t)for(P=B;P!==C;P+=Y,G+=2)x[4*(P+A*v)+0]=F[G+0],x[4*(P+A*v)+1]=F[G+0],x[4*(P+A*v)+2]=F[G+0],x[4*(P+A*v)+3]=F[G+1];return x}};class Y{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(J,T,b){const q=new Uint8Array(J.buffer,J.byteOffset,J.byteLength),B=t(q);b(B.width,B.height,T.generateMipMaps,!1,(()=>{j(T,q)}))}}}}]);