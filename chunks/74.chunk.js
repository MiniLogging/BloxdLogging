"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[74],{14225:(v,d,Q)=>{Q.r(d),Q.d(d,{FlowGraphDeterminantBlock:()=>u,FlowGraphInvertMatrixBlock:()=>y,FlowGraphMatrixComposeBlock:()=>X,FlowGraphMatrixDecomposeBlock:()=>B,FlowGraphMatrixMultiplicationBlock:()=>z,FlowGraphTransposeBlock:()=>C});var n=Q(12934),T=Q(12908),L=Q(651),e=Q(591),F=Q(14212),r=Q(14201);class C extends F.c{constructor(v){super((0,T.R)((null===v||void 0===v?void 0:v.matrixType)||"Matrix"),(0,T.R)((null===v||void 0===v?void 0:v.matrixType)||"Matrix"),(v=>v.transpose?v.transpose():L.b.Transpose(v)),"FlowGraphTransposeBlock",v)}}(0,e.f)("FlowGraphTransposeBlock",C);class u extends F.c{constructor(v){super((0,T.R)((null===v||void 0===v?void 0:v.matrixType)||"Matrix"),T.u,(v=>v.determinant()),"FlowGraphDeterminantBlock",v)}}(0,e.f)("FlowGraphDeterminantBlock",u);class y extends F.c{constructor(v){super((0,T.R)((null===v||void 0===v?void 0:v.matrixType)||"Matrix"),(0,T.R)((null===v||void 0===v?void 0:v.matrixType)||"Matrix"),(v=>v.inverse?v.inverse():L.b.Invert(v)),"FlowGraphInvertMatrixBlock",v)}}(0,e.f)("FlowGraphInvertMatrixBlock",y);class z extends r.b{constructor(v){super((0,T.R)((null===v||void 0===v?void 0:v.matrixType)||"Matrix"),(0,T.R)((null===v||void 0===v?void 0:v.matrixType)||"Matrix"),(0,T.R)((null===v||void 0===v?void 0:v.matrixType)||"Matrix"),((v,d)=>d.multiply(v)),"FlowGraphMatrixMultiplicationBlock",v)}}(0,e.f)("FlowGraphMatrixMultiplicationBlock",z);class B extends n.b{constructor(v){super(v),this.input=this.registerDataInput("input",T.l),this.position=this.registerDataOutput("position",T.E),this.rotationQuaternion=this.registerDataOutput("rotationQuaternion",T.x),this.md=this.registerDataOutput("md",T.E),this.isValid=this.registerDataOutput("isValid",T.f,!1)}_updateOutputs(v){const d=v._getExecutionVariable(this,"executionId",-1),Q=v._getExecutionVariable(this,"cachedPosition",null),n=v._getExecutionVariable(this,"cachedRotation",null),T=v._getExecutionVariable(this,"cachedScaling",null);if(d===v.executionId&&Q&&n&&T)this.position.setValue(Q,v),this.rotationQuaternion.setValue(n,v),this.md.setValue(T,v);else{const d=this.input.getValue(v),e=Q||new L.j,F=n||new L.c,r=T||new L.j,C=Math.round(1e4*d.m[3])/1e4,u=Math.round(1e4*d.m[7])/1e4,y=Math.round(1e4*d.m[11])/1e4,z=Math.round(1e4*d.m[15])/1e4;if(0!==C||0!==u||0!==y||1!==z)return this.isValid.setValue(!1,v),this.position.setValue(L.j.Zero(),v),this.rotationQuaternion.setValue(L.c.Identity(),v),void this.md.setValue(L.j.One(),v);const B=d.decompose(r,F,e);this.isValid.setValue(B,v),this.position.setValue(e,v),this.rotationQuaternion.setValue(F,v),this.md.setValue(r,v),v._setExecutionVariable(this,"cachedPosition",e),v._setExecutionVariable(this,"cachedRotation",F),v._setExecutionVariable(this,"cachedScaling",r),v._setExecutionVariable(this,"executionId",v.executionId)}}getClassName(){return"FlowGraphMatrixDecompose"}}(0,e.f)("FlowGraphMatrixDecompose",B);class X extends n.b{constructor(v){super(v),this.position=this.registerDataInput("position",T.E),this.rotationQuaternion=this.registerDataInput("rotationQuaternion",T.x),this.md=this.registerDataInput("md",T.E),this.value=this.registerDataOutput("value",T.l)}_updateOutputs(v){const d=v._getExecutionVariable(this,"executionId",-1),Q=v._getExecutionVariable(this,"cachedMatrix",null);if(d===v.executionId&&Q)this.value.setValue(Q,v);else{const d=L.b.Compose(this.md.getValue(v),this.rotationQuaternion.getValue(v),this.position.getValue(v));this.value.setValue(d,v),v._setExecutionVariable(this,"cachedMatrix",d),v._setExecutionVariable(this,"executionId",v.executionId)}}getClassName(){return"FlowGraphMatrixCompose"}}(0,e.f)("FlowGraphMatrixCompose",X)},14201:(v,d,Q)=>{Q.d(d,{b:()=>T});var n=Q(14208);class T extends n.c{constructor(v,d,Q,n,T,L){super(Q,L),this._operation=n,this._className=T,this.a=this.registerDataInput("a",v),this.b=this.registerDataInput("b",d)}_doOperation(v){const d=this.a.getValue(v),Q=this.b.getValue(v);return this._operation(d,Q)}getClassName(){return this._className}}},14208:(v,d,Q)=>{Q.d(d,{c:()=>F});var n=Q(12934),T=Q(12908);const L="cachedOperationValue",e="cachedExecutionId";class F extends n.b{constructor(v,d){super(d),this.value=this.registerDataOutput("value",v),this.isValid=this.registerDataOutput("isValid",T.f)}_updateOutputs(v){const d=v._getExecutionVariable(this,e,-1),Q=v._getExecutionVariable(this,L,null);if(void 0!==Q&&null!==Q&&d===v.executionId)this.isValid.setValue(!0,v),this.value.setValue(Q,v);else try{const d=this._doOperation(v);if(void 0===d||null===d)return void this.isValid.setValue(!1,v);v._setExecutionVariable(this,L,d),v._setExecutionVariable(this,e,v.executionId),this.value.setValue(d,v),this.isValid.setValue(!0,v)}catch(n){this.isValid.setValue(!1,v)}}}},14212:(v,d,Q)=>{Q.d(d,{c:()=>T});var n=Q(14208);class T extends n.c{constructor(v,d,Q,n,T){super(d,T),this._operation=Q,this._className=n,this.a=this.registerDataInput("a",v)}_doOperation(v){return this._operation(this.a.getValue(v))}getClassName(){return this._className}}}}]);