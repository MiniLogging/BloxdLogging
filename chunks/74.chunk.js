"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[74],{14090:(Z,U,n)=>{n.r(U),n.d(U,{FlowGraphDeterminantBlock:()=>d,FlowGraphInvertMatrixBlock:()=>F,FlowGraphMatrixComposeBlock:()=>q,FlowGraphMatrixDecomposeBlock:()=>S,FlowGraphMatrixMultiplicationBlock:()=>y,FlowGraphTransposeBlock:()=>R});var i=n(12837),B=n(12826),l=n(702),H=n(633),V=n(14078),G=n(14070);class R extends V.e{constructor(Z){super((0,B.J)((null===Z||void 0===Z?void 0:Z.matrixType)||"Matrix"),(0,B.J)((null===Z||void 0===Z?void 0:Z.matrixType)||"Matrix"),(Z=>Z.transpose?Z.transpose():l.b.Transpose(Z)),"FlowGraphTransposeBlock",Z)}}(0,H.g)("FlowGraphTransposeBlock",R);class d extends V.e{constructor(Z){super((0,B.J)((null===Z||void 0===Z?void 0:Z.matrixType)||"Matrix"),B.s,(Z=>Z.determinant()),"FlowGraphDeterminantBlock",Z)}}(0,H.g)("FlowGraphDeterminantBlock",d);class F extends V.e{constructor(Z){super((0,B.J)((null===Z||void 0===Z?void 0:Z.matrixType)||"Matrix"),(0,B.J)((null===Z||void 0===Z?void 0:Z.matrixType)||"Matrix"),(Z=>Z.inverse?Z.inverse():l.b.Invert(Z)),"FlowGraphInvertMatrixBlock",Z)}}(0,H.g)("FlowGraphInvertMatrixBlock",F);class y extends G.c{constructor(Z){super((0,B.J)((null===Z||void 0===Z?void 0:Z.matrixType)||"Matrix"),(0,B.J)((null===Z||void 0===Z?void 0:Z.matrixType)||"Matrix"),(0,B.J)((null===Z||void 0===Z?void 0:Z.matrixType)||"Matrix"),((Z,U)=>U.multiply(Z)),"FlowGraphMatrixMultiplicationBlock",Z)}}(0,H.g)("FlowGraphMatrixMultiplicationBlock",y);class S extends i.b{constructor(Z){super(Z),this.input=this.registerDataInput("input",B.j),this.position=this.registerDataOutput("position",B.z),this.rotationQuaternion=this.registerDataOutput("rotationQuaternion",B.u),this.mi=this.registerDataOutput("mi",B.z),this.isValid=this.registerDataOutput("isValid",B.e,!1)}_updateOutputs(Z){const U=Z._getExecutionVariable(this,"executionId",-1),n=Z._getExecutionVariable(this,"cachedPosition",null),i=Z._getExecutionVariable(this,"cachedRotation",null),B=Z._getExecutionVariable(this,"cachedScaling",null);if(U===Z.executionId&&n&&i&&B)this.position.setValue(n,Z),this.rotationQuaternion.setValue(i,Z),this.mi.setValue(B,Z);else{const U=this.input.getValue(Z),H=n||new l.k,V=i||new l.d,G=B||new l.k,R=Math.round(1e4*U.m[3])/1e4,d=Math.round(1e4*U.m[7])/1e4,F=Math.round(1e4*U.m[11])/1e4,y=Math.round(1e4*U.m[15])/1e4;if(0!==R||0!==d||0!==F||1!==y)return this.isValid.setValue(!1,Z),this.position.setValue(l.k.Zero(),Z),this.rotationQuaternion.setValue(l.d.Identity(),Z),void this.mi.setValue(l.k.One(),Z);const S=U.decompose(G,V,H);this.isValid.setValue(S,Z),this.position.setValue(H,Z),this.rotationQuaternion.setValue(V,Z),this.mi.setValue(G,Z),Z._setExecutionVariable(this,"cachedPosition",H),Z._setExecutionVariable(this,"cachedRotation",V),Z._setExecutionVariable(this,"cachedScaling",G),Z._setExecutionVariable(this,"executionId",Z.executionId)}}getClassName(){return"FlowGraphMatrixDecompose"}}(0,H.g)("FlowGraphMatrixDecompose",S);class q extends i.b{constructor(Z){super(Z),this.position=this.registerDataInput("position",B.z),this.rotationQuaternion=this.registerDataInput("rotationQuaternion",B.u),this.mi=this.registerDataInput("mi",B.z),this.value=this.registerDataOutput("value",B.j)}_updateOutputs(Z){const U=Z._getExecutionVariable(this,"executionId",-1),n=Z._getExecutionVariable(this,"cachedMatrix",null);if(U===Z.executionId&&n)this.value.setValue(n,Z);else{const U=l.b.Compose(this.mi.getValue(Z),this.rotationQuaternion.getValue(Z),this.position.getValue(Z));this.value.setValue(U,Z),Z._setExecutionVariable(this,"cachedMatrix",U),Z._setExecutionVariable(this,"executionId",Z.executionId)}}getClassName(){return"FlowGraphMatrixCompose"}}(0,H.g)("FlowGraphMatrixCompose",q)},14070:(Z,U,n)=>{n.d(U,{c:()=>B});var i=n(14076);class B extends i.d{constructor(Z,U,n,i,B,l){super(n,l),this._operation=i,this._className=B,this.a=this.registerDataInput("a",Z),this.b=this.registerDataInput("b",U)}_doOperation(Z){const U=this.a.getValue(Z),n=this.b.getValue(Z);return this._operation(U,n)}getClassName(){return this._className}}},14076:(Z,U,n)=>{n.d(U,{d:()=>V});var i=n(12837),B=n(12826);const l="cachedOperationValue",H="cachedExecutionId";class V extends i.b{constructor(Z,U){super(U),this.value=this.registerDataOutput("value",Z),this.isValid=this.registerDataOutput("isValid",B.e)}_updateOutputs(Z){const U=Z._getExecutionVariable(this,H,-1),n=Z._getExecutionVariable(this,l,null);if(void 0!==n&&null!==n&&U===Z.executionId)this.isValid.setValue(!0,Z),this.value.setValue(n,Z);else try{const U=this._doOperation(Z);if(void 0===U||null===U)return void this.isValid.setValue(!1,Z);Z._setExecutionVariable(this,l,U),Z._setExecutionVariable(this,H,Z.executionId),this.value.setValue(U,Z),this.isValid.setValue(!0,Z)}catch(i){this.isValid.setValue(!1,Z)}}}},14078:(Z,U,n)=>{n.d(U,{e:()=>B});var i=n(14076);class B extends i.d{constructor(Z,U,n,i,B){super(U,B),this._operation=n,this._className=i,this.a=this.registerDataInput("a",Z)}_doOperation(Z){return this._operation(this.a.getValue(Z))}getClassName(){return this._className}}}}]);