"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[74],{13996:(U,W,l)=>{l.r(W),l.d(W,{FlowGraphDeterminantBlock:()=>q,FlowGraphInvertMatrixBlock:()=>y,FlowGraphMatrixComposeBlock:()=>w,FlowGraphMatrixDecomposeBlock:()=>s,FlowGraphMatrixMultiplicationBlock:()=>j,FlowGraphTransposeBlock:()=>A});var M=l(12739),t=l(12704),L=l(706),p=l(655),B=l(13986),k=l(13974);class A extends B.e{constructor(U){super((0,t.Q)((null===U||void 0===U?void 0:U.matrixType)||"Matrix"),(0,t.Q)((null===U||void 0===U?void 0:U.matrixType)||"Matrix"),(U=>U.transpose?U.transpose():L.c.Transpose(U)),"FlowGraphTransposeBlock",U)}}(0,p.f)("FlowGraphTransposeBlock",A);class q extends B.e{constructor(U){super((0,t.Q)((null===U||void 0===U?void 0:U.matrixType)||"Matrix"),t.s,(U=>U.determinant()),"FlowGraphDeterminantBlock",U)}}(0,p.f)("FlowGraphDeterminantBlock",q);class y extends B.e{constructor(U){super((0,t.Q)((null===U||void 0===U?void 0:U.matrixType)||"Matrix"),(0,t.Q)((null===U||void 0===U?void 0:U.matrixType)||"Matrix"),(U=>U.inverse?U.inverse():L.c.Invert(U)),"FlowGraphInvertMatrixBlock",U)}}(0,p.f)("FlowGraphInvertMatrixBlock",y);class j extends k.e{constructor(U){super((0,t.Q)((null===U||void 0===U?void 0:U.matrixType)||"Matrix"),(0,t.Q)((null===U||void 0===U?void 0:U.matrixType)||"Matrix"),(0,t.Q)((null===U||void 0===U?void 0:U.matrixType)||"Matrix"),((U,W)=>W.multiply(U)),"FlowGraphMatrixMultiplicationBlock",U)}}(0,p.f)("FlowGraphMatrixMultiplicationBlock",j);class s extends M.e{constructor(U){super(U),this.input=this.registerDataInput("input",t.n),this.position=this.registerDataOutput("position",t.E),this.rotationQuaternion=this.registerDataOutput("rotationQuaternion",t.u),this.yd=this.registerDataOutput("yd",t.E),this.isValid=this.registerDataOutput("isValid",t.h,!1)}_updateOutputs(U){const W=U._getExecutionVariable(this,"executionId",-1),l=U._getExecutionVariable(this,"cachedPosition",null),M=U._getExecutionVariable(this,"cachedRotation",null),t=U._getExecutionVariable(this,"cachedScaling",null);if(W===U.executionId&&l&&M&&t)this.position.setValue(l,U),this.rotationQuaternion.setValue(M,U),this.yd.setValue(t,U);else{const W=this.input.getValue(U),p=l||new L.l,B=M||new L.e,k=t||new L.l,A=Math.round(1e4*W.m[3])/1e4,q=Math.round(1e4*W.m[7])/1e4,y=Math.round(1e4*W.m[11])/1e4,j=Math.round(1e4*W.m[15])/1e4;if(0!==A||0!==q||0!==y||1!==j)return this.isValid.setValue(!1,U),this.position.setValue(L.l.Zero(),U),this.rotationQuaternion.setValue(L.e.Identity(),U),void this.yd.setValue(L.l.One(),U);const s=W.decompose(k,B,p);this.isValid.setValue(s,U),this.position.setValue(p,U),this.rotationQuaternion.setValue(B,U),this.yd.setValue(k,U),U._setExecutionVariable(this,"cachedPosition",p),U._setExecutionVariable(this,"cachedRotation",B),U._setExecutionVariable(this,"cachedScaling",k),U._setExecutionVariable(this,"executionId",U.executionId)}}getClassName(){return"FlowGraphMatrixDecompose"}}(0,p.f)("FlowGraphMatrixDecompose",s);class w extends M.e{constructor(U){super(U),this.position=this.registerDataInput("position",t.E),this.rotationQuaternion=this.registerDataInput("rotationQuaternion",t.u),this.yd=this.registerDataInput("yd",t.E),this.value=this.registerDataOutput("value",t.n)}_updateOutputs(U){const W=U._getExecutionVariable(this,"executionId",-1),l=U._getExecutionVariable(this,"cachedMatrix",null);if(W===U.executionId&&l)this.value.setValue(l,U);else{const W=L.c.Compose(this.yd.getValue(U),this.rotationQuaternion.getValue(U),this.position.getValue(U));this.value.setValue(W,U),U._setExecutionVariable(this,"cachedMatrix",W),U._setExecutionVariable(this,"executionId",U.executionId)}}getClassName(){return"FlowGraphMatrixCompose"}}(0,p.f)("FlowGraphMatrixCompose",w)},13974:(U,W,l)=>{l.d(W,{e:()=>t});var M=l(13983);class t extends M.c{constructor(U,W,l,M,t,L){super(l,L),this._operation=M,this._className=t,this.a=this.registerDataInput("a",U),this.b=this.registerDataInput("b",W)}_doOperation(U){const W=this.a.getValue(U),l=this.b.getValue(U);return this._operation(W,l)}getClassName(){return this._className}}},13983:(U,W,l)=>{l.d(W,{c:()=>B});var M=l(12739),t=l(12704);const L="cachedOperationValue",p="cachedExecutionId";class B extends M.e{constructor(U,W){super(W),this.value=this.registerDataOutput("value",U),this.isValid=this.registerDataOutput("isValid",t.h)}_updateOutputs(U){const W=U._getExecutionVariable(this,p,-1),l=U._getExecutionVariable(this,L,null);if(void 0!==l&&null!==l&&W===U.executionId)this.isValid.setValue(!0,U),this.value.setValue(l,U);else try{const W=this._doOperation(U);if(void 0===W||null===W)return void this.isValid.setValue(!1,U);U._setExecutionVariable(this,L,W),U._setExecutionVariable(this,p,U.executionId),this.value.setValue(W,U),this.isValid.setValue(!0,U)}catch(M){this.isValid.setValue(!1,U)}}}},13986:(U,W,l)=>{l.d(W,{e:()=>t});var M=l(13983);class t extends M.c{constructor(U,W,l,M,t){super(W,t),this._operation=l,this._className=M,this.a=this.registerDataInput("a",U)}_doOperation(U){return this._operation(this.a.getValue(U))}getClassName(){return this._className}}}}]);