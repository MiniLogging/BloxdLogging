"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[74],{14341:(Q,X,C)=>{C.r(X),C.d(X,{FlowGraphDeterminantBlock:()=>U,FlowGraphInvertMatrixBlock:()=>L,FlowGraphMatrixComposeBlock:()=>a,FlowGraphMatrixDecomposeBlock:()=>i,FlowGraphMatrixMultiplicationBlock:()=>w,FlowGraphTransposeBlock:()=>W});var l=C(13092),h=C(13063),M=C(668),f=C(620),O=C(14326),m=C(14311);class W extends O.d{constructor(Q){super((0,h.H)((null===Q||void 0===Q?void 0:Q.matrixType)||"Matrix"),(0,h.H)((null===Q||void 0===Q?void 0:Q.matrixType)||"Matrix"),(Q=>Q.transpose?Q.transpose():M.b.Transpose(Q)),"FlowGraphTransposeBlock",Q)}}(0,f.g)("FlowGraphTransposeBlock",W);class U extends O.d{constructor(Q){super((0,h.H)((null===Q||void 0===Q?void 0:Q.matrixType)||"Matrix"),h.p,(Q=>Q.determinant()),"FlowGraphDeterminantBlock",Q)}}(0,f.g)("FlowGraphDeterminantBlock",U);class L extends O.d{constructor(Q){super((0,h.H)((null===Q||void 0===Q?void 0:Q.matrixType)||"Matrix"),(0,h.H)((null===Q||void 0===Q?void 0:Q.matrixType)||"Matrix"),(Q=>Q.inverse?Q.inverse():M.b.Invert(Q)),"FlowGraphInvertMatrixBlock",Q)}}(0,f.g)("FlowGraphInvertMatrixBlock",L);class w extends m.e{constructor(Q){super((0,h.H)((null===Q||void 0===Q?void 0:Q.matrixType)||"Matrix"),(0,h.H)((null===Q||void 0===Q?void 0:Q.matrixType)||"Matrix"),(0,h.H)((null===Q||void 0===Q?void 0:Q.matrixType)||"Matrix"),((Q,X)=>X.multiply(Q)),"FlowGraphMatrixMultiplicationBlock",Q)}}(0,f.g)("FlowGraphMatrixMultiplicationBlock",w);class i extends l.c{constructor(Q){super(Q),this.input=this.registerDataInput("input",h.h),this.position=this.registerDataOutput("position",h.y),this.rotationQuaternion=this.registerDataOutput("rotationQuaternion",h.t),this._c=this.registerDataOutput("_c",h.y),this.isValid=this.registerDataOutput("isValid",h.e,!1)}_updateOutputs(Q){const X=Q._getExecutionVariable(this,"executionId",-1),C=Q._getExecutionVariable(this,"cachedPosition",null),l=Q._getExecutionVariable(this,"cachedRotation",null),h=Q._getExecutionVariable(this,"cachedScaling",null);if(X===Q.executionId&&C&&l&&h)this.position.setValue(C,Q),this.rotationQuaternion.setValue(l,Q),this._c.setValue(h,Q);else{const X=this.input.getValue(Q),f=C||new M.k,O=l||new M.c,m=h||new M.k,W=Math.round(1e4*X.m[3])/1e4,U=Math.round(1e4*X.m[7])/1e4,L=Math.round(1e4*X.m[11])/1e4,w=Math.round(1e4*X.m[15])/1e4;if(0!==W||0!==U||0!==L||1!==w)return this.isValid.setValue(!1,Q),this.position.setValue(M.k.Zero(),Q),this.rotationQuaternion.setValue(M.c.Identity(),Q),void this._c.setValue(M.k.One(),Q);const i=X.decompose(m,O,f);this.isValid.setValue(i,Q),this.position.setValue(f,Q),this.rotationQuaternion.setValue(O,Q),this._c.setValue(m,Q),Q._setExecutionVariable(this,"cachedPosition",f),Q._setExecutionVariable(this,"cachedRotation",O),Q._setExecutionVariable(this,"cachedScaling",m),Q._setExecutionVariable(this,"executionId",Q.executionId)}}getClassName(){return"FlowGraphMatrixDecompose"}}(0,f.g)("FlowGraphMatrixDecompose",i);class a extends l.c{constructor(Q){super(Q),this.position=this.registerDataInput("position",h.y),this.rotationQuaternion=this.registerDataInput("rotationQuaternion",h.t),this._c=this.registerDataInput("_c",h.y),this.value=this.registerDataOutput("value",h.h)}_updateOutputs(Q){const X=Q._getExecutionVariable(this,"executionId",-1),C=Q._getExecutionVariable(this,"cachedMatrix",null);if(X===Q.executionId&&C)this.value.setValue(C,Q);else{const X=M.b.Compose(this._c.getValue(Q),this.rotationQuaternion.getValue(Q),this.position.getValue(Q));this.value.setValue(X,Q),Q._setExecutionVariable(this,"cachedMatrix",X),Q._setExecutionVariable(this,"executionId",Q.executionId)}}getClassName(){return"FlowGraphMatrixCompose"}}(0,f.g)("FlowGraphMatrixCompose",a)},14311:(Q,X,C)=>{C.d(X,{e:()=>h});var l=C(14320);class h extends l.d{constructor(Q,X,C,l,h,M){super(C,M),this._operation=l,this._className=h,this.a=this.registerDataInput("a",Q),this.b=this.registerDataInput("b",X)}_doOperation(Q){const X=this.a.getValue(Q),C=this.b.getValue(Q);return this._operation(X,C)}getClassName(){return this._className}}},14320:(Q,X,C)=>{C.d(X,{d:()=>O});var l=C(13092),h=C(13063);const M="cachedOperationValue",f="cachedExecutionId";class O extends l.c{constructor(Q,X){super(X),this.value=this.registerDataOutput("value",Q),this.isValid=this.registerDataOutput("isValid",h.e)}_updateOutputs(Q){const X=Q._getExecutionVariable(this,f,-1),C=Q._getExecutionVariable(this,M,null);if(void 0!==C&&null!==C&&X===Q.executionId)this.isValid.setValue(!0,Q),this.value.setValue(C,Q);else try{const X=this._doOperation(Q);if(void 0===X||null===X)return void this.isValid.setValue(!1,Q);Q._setExecutionVariable(this,M,X),Q._setExecutionVariable(this,f,Q.executionId),this.value.setValue(X,Q),this.isValid.setValue(!0,Q)}catch(l){this.isValid.setValue(!1,Q)}}}},14326:(Q,X,C)=>{C.d(X,{d:()=>h});var l=C(14320);class h extends l.d{constructor(Q,X,C,l,h){super(X,h),this._operation=C,this._className=l,this.a=this.registerDataInput("a",Q)}_doOperation(Q){return this._operation(this.a.getValue(Q))}getClassName(){return this._className}}}}]);