"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[74],{14493:(R,x,H)=>{H.r(x),H.d(x,{FlowGraphDeterminantBlock:()=>V,FlowGraphInvertMatrixBlock:()=>n,FlowGraphMatrixComposeBlock:()=>i,FlowGraphMatrixDecomposeBlock:()=>I,FlowGraphMatrixMultiplicationBlock:()=>g,FlowGraphTransposeBlock:()=>J});var k=H(13268),c=H(13246),t=H(661),A=H(610),D=H(14476),U=H(14469);class J extends D.e{constructor(R){super((0,c.C)((null===R||void 0===R?void 0:R.matrixType)||"Matrix"),(0,c.C)((null===R||void 0===R?void 0:R.matrixType)||"Matrix"),(R=>R.transpose?R.transpose():t.e.Transpose(R)),"FlowGraphTransposeBlock",R)}}(0,A.h)("FlowGraphTransposeBlock",J);class V extends D.e{constructor(R){super((0,c.C)((null===R||void 0===R?void 0:R.matrixType)||"Matrix"),c.m,(R=>R.determinant()),"FlowGraphDeterminantBlock",R)}}(0,A.h)("FlowGraphDeterminantBlock",V);class n extends D.e{constructor(R){super((0,c.C)((null===R||void 0===R?void 0:R.matrixType)||"Matrix"),(0,c.C)((null===R||void 0===R?void 0:R.matrixType)||"Matrix"),(R=>R.inverse?R.inverse():t.e.Invert(R)),"FlowGraphInvertMatrixBlock",R)}}(0,A.h)("FlowGraphInvertMatrixBlock",n);class g extends U.e{constructor(R){super((0,c.C)((null===R||void 0===R?void 0:R.matrixType)||"Matrix"),(0,c.C)((null===R||void 0===R?void 0:R.matrixType)||"Matrix"),(0,c.C)((null===R||void 0===R?void 0:R.matrixType)||"Matrix"),((R,x)=>x.multiply(R)),"FlowGraphMatrixMultiplicationBlock",R)}}(0,A.h)("FlowGraphMatrixMultiplicationBlock",g);class I extends k.b{constructor(R){super(R),this.input=this.registerDataInput("input",c.f),this.position=this.registerDataOutput("position",c.t),this.rotationQuaternion=this.registerDataOutput("rotationQuaternion",c.o),this.ti=this.registerDataOutput("ti",c.t),this.isValid=this.registerDataOutput("isValid",c.c,!1)}_updateOutputs(R){const x=R._getExecutionVariable(this,"executionId",-1),H=R._getExecutionVariable(this,"cachedPosition",null),k=R._getExecutionVariable(this,"cachedRotation",null),c=R._getExecutionVariable(this,"cachedScaling",null);if(x===R.executionId&&H&&k&&c)this.position.setValue(H,R),this.rotationQuaternion.setValue(k,R),this.ti.setValue(c,R);else{const x=this.input.getValue(R),A=H||new t.o,D=k||new t.f,U=c||new t.o,J=Math.round(1e4*x.m[3])/1e4,V=Math.round(1e4*x.m[7])/1e4,n=Math.round(1e4*x.m[11])/1e4,g=Math.round(1e4*x.m[15])/1e4;if(0!==J||0!==V||0!==n||1!==g)return this.isValid.setValue(!1,R),this.position.setValue(t.o.Zero(),R),this.rotationQuaternion.setValue(t.f.Identity(),R),void this.ti.setValue(t.o.One(),R);const I=x.decompose(U,D,A);this.isValid.setValue(I,R),this.position.setValue(A,R),this.rotationQuaternion.setValue(D,R),this.ti.setValue(U,R),R._setExecutionVariable(this,"cachedPosition",A),R._setExecutionVariable(this,"cachedRotation",D),R._setExecutionVariable(this,"cachedScaling",U),R._setExecutionVariable(this,"executionId",R.executionId)}}getClassName(){return"FlowGraphMatrixDecompose"}}(0,A.h)("FlowGraphMatrixDecompose",I);class i extends k.b{constructor(R){super(R),this.position=this.registerDataInput("position",c.t),this.rotationQuaternion=this.registerDataInput("rotationQuaternion",c.o),this.ti=this.registerDataInput("ti",c.t),this.value=this.registerDataOutput("value",c.f)}_updateOutputs(R){const x=R._getExecutionVariable(this,"executionId",-1),H=R._getExecutionVariable(this,"cachedMatrix",null);if(x===R.executionId&&H)this.value.setValue(H,R);else{const x=t.e.Compose(this.ti.getValue(R),this.rotationQuaternion.getValue(R),this.position.getValue(R));this.value.setValue(x,R),R._setExecutionVariable(this,"cachedMatrix",x),R._setExecutionVariable(this,"executionId",R.executionId)}}getClassName(){return"FlowGraphMatrixCompose"}}(0,A.h)("FlowGraphMatrixCompose",i)},14469:(R,x,H)=>{H.d(x,{e:()=>c});var k=H(14472);class c extends k.c{constructor(R,x,H,k,c,t){super(H,t),this._operation=k,this._className=c,this.a=this.registerDataInput("a",R),this.b=this.registerDataInput("b",x)}_doOperation(R){const x=this.a.getValue(R),H=this.b.getValue(R);return this._operation(x,H)}getClassName(){return this._className}}},14472:(R,x,H)=>{H.d(x,{c:()=>D});var k=H(13268),c=H(13246);const t="cachedOperationValue",A="cachedExecutionId";class D extends k.b{constructor(R,x){super(x),this.value=this.registerDataOutput("value",R),this.isValid=this.registerDataOutput("isValid",c.c)}_updateOutputs(R){const x=R._getExecutionVariable(this,A,-1),H=R._getExecutionVariable(this,t,null);if(void 0!==H&&null!==H&&x===R.executionId)this.isValid.setValue(!0,R),this.value.setValue(H,R);else try{const x=this._doOperation(R);if(void 0===x||null===x)return void this.isValid.setValue(!1,R);R._setExecutionVariable(this,t,x),R._setExecutionVariable(this,A,R.executionId),this.value.setValue(x,R),this.isValid.setValue(!0,R)}catch(k){this.isValid.setValue(!1,R)}}}},14476:(R,x,H)=>{H.d(x,{e:()=>c});var k=H(14472);class c extends k.c{constructor(R,x,H,k,c){super(x,c),this._operation=H,this._className=k,this.a=this.registerDataInput("a",R)}_doOperation(R){return this._operation(this.a.getValue(R))}getClassName(){return this._className}}}}]);