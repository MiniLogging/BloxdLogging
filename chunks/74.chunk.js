"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[74],{13776:(L,j,P)=>{P.r(j),P.d(j,{FlowGraphDeterminantBlock:()=>S,FlowGraphInvertMatrixBlock:()=>g,FlowGraphMatrixComposeBlock:()=>C,FlowGraphMatrixDecomposeBlock:()=>N,FlowGraphMatrixMultiplicationBlock:()=>V,FlowGraphTransposeBlock:()=>D});var A=P(12523),R=P(12510),o=P(656),Y=P(606),u=P(13764),a=P(13760);class D extends u.c{constructor(L){super((0,R.N)((null===L||void 0===L?void 0:L.matrixType)||"Matrix"),(0,R.N)((null===L||void 0===L?void 0:L.matrixType)||"Matrix"),(L=>L.transpose?L.transpose():o.e.Transpose(L)),"FlowGraphTransposeBlock",L)}}(0,Y.h)("FlowGraphTransposeBlock",D);class S extends u.c{constructor(L){super((0,R.N)((null===L||void 0===L?void 0:L.matrixType)||"Matrix"),R.p,(L=>L.determinant()),"FlowGraphDeterminantBlock",L)}}(0,Y.h)("FlowGraphDeterminantBlock",S);class g extends u.c{constructor(L){super((0,R.N)((null===L||void 0===L?void 0:L.matrixType)||"Matrix"),(0,R.N)((null===L||void 0===L?void 0:L.matrixType)||"Matrix"),(L=>L.inverse?L.inverse():o.e.Invert(L)),"FlowGraphInvertMatrixBlock",L)}}(0,Y.h)("FlowGraphInvertMatrixBlock",g);class V extends a.d{constructor(L){super((0,R.N)((null===L||void 0===L?void 0:L.matrixType)||"Matrix"),(0,R.N)((null===L||void 0===L?void 0:L.matrixType)||"Matrix"),(0,R.N)((null===L||void 0===L?void 0:L.matrixType)||"Matrix"),((L,j)=>j.multiply(L)),"FlowGraphMatrixMultiplicationBlock",L)}}(0,Y.h)("FlowGraphMatrixMultiplicationBlock",V);class N extends A.d{constructor(L){super(L),this.input=this.registerDataInput("input",R.j),this.position=this.registerDataOutput("position",R.B),this.rotationQuaternion=this.registerDataOutput("rotationQuaternion",R.t),this.mi=this.registerDataOutput("mi",R.B),this.isValid=this.registerDataOutput("isValid",R.e,!1)}_updateOutputs(L){const j=L._getExecutionVariable(this,"executionId",-1),P=L._getExecutionVariable(this,"cachedPosition",null),A=L._getExecutionVariable(this,"cachedRotation",null),R=L._getExecutionVariable(this,"cachedScaling",null);if(j===L.executionId&&P&&A&&R)this.position.setValue(P,L),this.rotationQuaternion.setValue(A,L),this.mi.setValue(R,L);else{const j=this.input.getValue(L),Y=P||new o.r,u=A||new o.i,a=R||new o.r,D=Math.round(1e4*j.m[3])/1e4,S=Math.round(1e4*j.m[7])/1e4,g=Math.round(1e4*j.m[11])/1e4,V=Math.round(1e4*j.m[15])/1e4;if(0!==D||0!==S||0!==g||1!==V)return this.isValid.setValue(!1,L),this.position.setValue(o.r.Zero(),L),this.rotationQuaternion.setValue(o.i.Identity(),L),void this.mi.setValue(o.r.One(),L);const N=j.decompose(a,u,Y);this.isValid.setValue(N,L),this.position.setValue(Y,L),this.rotationQuaternion.setValue(u,L),this.mi.setValue(a,L),L._setExecutionVariable(this,"cachedPosition",Y),L._setExecutionVariable(this,"cachedRotation",u),L._setExecutionVariable(this,"cachedScaling",a),L._setExecutionVariable(this,"executionId",L.executionId)}}getClassName(){return"FlowGraphMatrixDecompose"}}(0,Y.h)("FlowGraphMatrixDecompose",N);class C extends A.d{constructor(L){super(L),this.position=this.registerDataInput("position",R.B),this.rotationQuaternion=this.registerDataInput("rotationQuaternion",R.t),this.mi=this.registerDataInput("mi",R.B),this.value=this.registerDataOutput("value",R.j)}_updateOutputs(L){const j=L._getExecutionVariable(this,"executionId",-1),P=L._getExecutionVariable(this,"cachedMatrix",null);if(j===L.executionId&&P)this.value.setValue(P,L);else{const j=o.e.Compose(this.mi.getValue(L),this.rotationQuaternion.getValue(L),this.position.getValue(L));this.value.setValue(j,L),L._setExecutionVariable(this,"cachedMatrix",j),L._setExecutionVariable(this,"executionId",L.executionId)}}getClassName(){return"FlowGraphMatrixCompose"}}(0,Y.h)("FlowGraphMatrixCompose",C)},13760:(L,j,P)=>{P.d(j,{d:()=>R});var A=P(13762);class R extends A.b{constructor(L,j,P,A,R,o){super(P,o),this._operation=A,this._className=R,this.a=this.registerDataInput("a",L),this.b=this.registerDataInput("b",j)}_doOperation(L){const j=this.a.getValue(L),P=this.b.getValue(L);return this._operation(j,P)}getClassName(){return this._className}}},13762:(L,j,P)=>{P.d(j,{b:()=>u});var A=P(12523),R=P(12510);const o="cachedOperationValue",Y="cachedExecutionId";class u extends A.d{constructor(L,j){super(j),this.value=this.registerDataOutput("value",L),this.isValid=this.registerDataOutput("isValid",R.e)}_updateOutputs(L){const j=L._getExecutionVariable(this,Y,-1),P=L._getExecutionVariable(this,o,null);if(void 0!==P&&null!==P&&j===L.executionId)this.isValid.setValue(!0,L),this.value.setValue(P,L);else try{const j=this._doOperation(L);if(void 0===j||null===j)return void this.isValid.setValue(!1,L);L._setExecutionVariable(this,o,j),L._setExecutionVariable(this,Y,L.executionId),this.value.setValue(j,L),this.isValid.setValue(!0,L)}catch(A){this.isValid.setValue(!1,L)}}}},13764:(L,j,P)=>{P.d(j,{c:()=>R});var A=P(13762);class R extends A.b{constructor(L,j,P,A,R){super(j,R),this._operation=P,this._className=A,this.a=this.registerDataInput("a",L)}_doOperation(L){return this._operation(this.a.getValue(L))}getClassName(){return this._className}}}}]);