"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[63],{13955:(c,b,A)=>{A.r(b),A.d(b,{FlowGraphPlayAnimationBlock:()=>s});var o=A(12807),t=A(12763),n=A(633),h=A(13953);class s extends o.d{constructor(c){super(c,["animationLoop","animationEnd","animationGroupLoop"]),this.config=c,this.speed=this.registerDataInput("speed",t.t),this.loop=this.registerDataInput("loop",t.f),this.from=this.registerDataInput("from",t.t,0),this.to=this.registerDataInput("to",t.t),this.currentFrame=this.registerDataOutput("currentFrame",t.t),this.currentTime=this.registerDataOutput("currentTime",t.t),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",t.e),this.animationGroup=this.registerDataInput("animationGroup",t.e,null===c||void 0===c?void 0:c.animationGroup),this.animation=this.registerDataInput("animation",t.e),this.object=this.registerDataInput("object",t.e)}_preparePendingTasks(c){const b=this.animationGroup.getValue(c),A=this.animation.getValue(c);if(!b&&!A)return this._reportError(c,"No animation or animation group provided");{const t=this.currentAnimationGroup.getValue(c);t&&t!==b&&t.dispose();let n=b;if(A&&!n){const b=this.object.getValue(c);if(!b)return this._reportError(c,"No target object provided");const o=Array.isArray(A)?A:[A],t=o[0].name;n=new h.AnimationGroup("flowGraphAnimationGroup-"+t+"-"+b.name,c.configuration.yd);let s=!1;const L=c._getGlobalContextVariable("interpolationAnimations",[]);for(const c of o)n.addTargetedAnimation(c,b),-1!==L.indexOf(c.uniqueId)&&(s=!0);s&&this._checkInterpolationDuplications(c,o,b)}const s=this.speed.getValue(c)||1,L=this.from.getValue(c)??0,C=this.to.getValue(c)||n.to,J=!isFinite(C)||this.loop.getValue(c);this.currentAnimationGroup.setValue(n,c);const X=c._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==X.indexOf(n.uniqueId)&&n.stop();try{n.start(J,s,L,C),n.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(c))),n.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(c))),n.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(c))),n.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(c))),X.push(n.uniqueId),c._setGlobalContextVariable("currentlyRunningAnimationGroups",X)}catch(o){this._reportError(c,o)}}}_reportError(c,b){super._reportError(c,b),this.currentFrame.setValue(-1,c),this.currentTime.setValue(-1,c)}_executeOnTick(c){const b=this.currentAnimationGroup.getValue(c);var A;b&&(this.currentFrame.setValue(b.getCurrentFrame(),c),this.currentTime.setValue((null===(A=b.animatables[0])||void 0===A?void 0:A.elapsedTime)??0,c))}_execute(c){this._startPendingTasks(c)}_onAnimationGroupEnd(c){this._removeFromCurrentlyRunning(c,this.currentAnimationGroup.getValue(c)),this._resetAfterCanceled(c),this.done._activateSignal(c)}_checkInterpolationDuplications(c,b,A){const o=c._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const t of o){const o=c.assetsContext.animationGroups.find((c=>c.uniqueId===t));if(o)for(const t of o.targetedAnimations)for(const n of b)t.animation.targetProperty===n.targetProperty&&t.target===A&&this._stopAnimationGroup(c,o)}}_stopAnimationGroup(c,b){b.stop(!0),b.dispose(),this._removeFromCurrentlyRunning(c,b)}_removeFromCurrentlyRunning(c,b){const A=c._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),o=A.indexOf(b.uniqueId);-1!==o&&(A.splice(o,1),c._setGlobalContextVariable("currentlyRunningAnimationGroups",A))}_cancelPendingTasks(c){const b=this.currentAnimationGroup.getValue(c);b&&this._stopAnimationGroup(c,b)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,n.d)("FlowGraphPlayAnimationBlock",s)}}]);