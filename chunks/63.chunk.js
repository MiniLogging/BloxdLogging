"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[63],{13826:(A,X,s)=>{s.r(X),s.d(X,{FlowGraphAbsBlock:()=>b,FlowGraphAcosBlock:()=>EA,FlowGraphAcoshBlock:()=>cA,FlowGraphAddBlock:()=>d,FlowGraphAsinBlock:()=>fA,FlowGraphAsinhBlock:()=>vA,FlowGraphAtan2Block:()=>KA,FlowGraphAtanBlock:()=>gA,FlowGraphAtanhBlock:()=>MA,FlowGraphBitwiseAndBlock:()=>zA,FlowGraphBitwiseLeftShiftBlock:()=>yA,FlowGraphBitwiseNotBlock:()=>uA,FlowGraphBitwiseOrBlock:()=>mA,FlowGraphBitwiseRightShiftBlock:()=>jA,FlowGraphBitwiseXorBlock:()=>bA,FlowGraphCeilBlock:()=>V,FlowGraphClampBlock:()=>I,FlowGraphCosBlock:()=>sA,FlowGraphCoshBlock:()=>iA,FlowGraphCubeRootBlock:()=>JA,FlowGraphDegToRadBlock:()=>h,FlowGraphDivideBlock:()=>R,FlowGraphEBlock:()=>J,FlowGraphEqualityBlock:()=>F,FlowGraphExpBlock:()=>dA,FlowGraphFloorBlock:()=>G,FlowGraphFractionBlock:()=>O,FlowGraphGreaterThanBlock:()=>B,FlowGraphGreaterThanOrEqualBlock:()=>Z,FlowGraphInfBlock:()=>u,FlowGraphIsInfinityBlock:()=>W,FlowGraphIsNanBlock:()=>o,FlowGraphLeadingZerosBlock:()=>GA,FlowGraphLessThanBlock:()=>S,FlowGraphLessThanOrEqualBlock:()=>p,FlowGraphLog10Block:()=>RA,FlowGraphLog2Block:()=>wA,FlowGraphLogBlock:()=>QA,FlowGraphMathInterpolationBlock:()=>H,FlowGraphMaxBlock:()=>t,FlowGraphMinBlock:()=>U,FlowGraphModuloBlock:()=>n,FlowGraphMultiplyBlock:()=>w,FlowGraphNaNBlock:()=>z,FlowGraphNegationBlock:()=>P,FlowGraphOneBitsCounterBlock:()=>DA,FlowGraphPiBlock:()=>a,FlowGraphPowerBlock:()=>aA,FlowGraphRadToDegBlock:()=>AA,FlowGraphRandomBlock:()=>C,FlowGraphRoundBlock:()=>D,FlowGraphSaturateBlock:()=>k,FlowGraphSignBlock:()=>y,FlowGraphSinBlock:()=>XA,FlowGraphSinhBlock:()=>rA,FlowGraphSquareRootBlock:()=>CA,FlowGraphSubtractBlock:()=>Q,FlowGraphTanBlock:()=>NA,FlowGraphTanhBlock:()=>YA,FlowGraphTrailingZerosBlock:()=>VA,FlowGraphTruncBlock:()=>j});var N=s(616),f=s(12677),E=s(13835),g=s(13839);class K extends g.e{constructor(A,X,s,N){super(A,N),this._operation=X,this._className=s}_doOperation(A){return this._operation(A)}getClassName(){return this._className}}var r=s(678),i=s(13846);class Y extends g.e{constructor(A,X,s,N,f,E,g){super(N,g),this._operation=f,this._className=E,this.a=this.registerDataInput("a",A),this.b=this.registerDataInput("b",X),this.c=this.registerDataInput("c",s)}_doOperation(A){return this._operation(this.a.getValue(A),this.b.getValue(A),this.c.getValue(A))}getClassName(){return this._className}}var v=s(12672),c=s(12680),M=s(12706);class d extends E.c{constructor(A){super((0,f.C)(null===A||void 0===A?void 0:A.type),(0,f.C)(null===A||void 0===A?void 0:A.type),(0,f.C)(null===A||void 0===A?void 0:A.type),((A,X)=>this._polymorphicAdd(A,X)),"FlowGraphAddBlock",A)}_polymorphicAdd(A,X){const s=(0,M.l)(A),N=(0,M.l)(X);if((0,M.j)(s,N)||(0,M.f)(s,N)||(0,M.b)(s,N))return A.add(X);if("Quaternion"===s||"Vector4"===N)return new r.m(A.x,A.y,A.z,A.w).addInPlace(X);if("Vector4"===s||"Quaternion"===N)return A.add(X);var f;if(null!==(f=this.config)&&void 0!==f&&f.preventIntegerFloatArithmetic&&typeof A!==typeof X)throw new Error("Cannot add different types of numbers.");return(0,M.s)(A)+(0,M.s)(X)}}(0,N.f)("FlowGraphAddBlock",d);class Q extends E.c{constructor(A){super((0,f.C)(null===A||void 0===A?void 0:A.type),(0,f.C)(null===A||void 0===A?void 0:A.type),(0,f.C)(null===A||void 0===A?void 0:A.type),((A,X)=>this._polymorphicSubtract(A,X)),"FlowGraphSubtractBlock",A)}_polymorphicSubtract(A,X){const s=(0,M.l)(A),N=(0,M.l)(X);if((0,M.j)(s,N)||(0,M.b)(s,N)||(0,M.f)(s,N))return A.Pg(X);if("Quaternion"===s||"Vector4"===N)return new r.m(A.x,A.y,A.z,A.w).Ri(X);if("Vector4"===s||"Quaternion"===N)return A.Pg(X);var f;if(null!==(f=this.config)&&void 0!==f&&f.preventIntegerFloatArithmetic&&typeof A!==typeof X)throw new Error("Cannot add different types of numbers.");return(0,M.s)(A)-(0,M.s)(X)}}(0,N.f)("FlowGraphSubtractBlock",Q);class w extends E.c{constructor(A){super((0,f.C)(null===A||void 0===A?void 0:A.type),(0,f.C)(null===A||void 0===A?void 0:A.type),(0,f.C)(null===A||void 0===A?void 0:A.type),((A,X)=>this._polymorphicMultiply(A,X)),"FlowGraphMultiplyBlock",A)}_polymorphicMultiply(A,X){const s=(0,M.l)(A),N=(0,M.l)(X);if((0,M.j)(s,N)||(0,M.b)(s,N))return A.multiply(X);if("Quaternion"===s||"Vector4"===N)return new r.m(A.x,A.y,A.z,A.w).multiplyInPlace(X);if("Vector4"===s||"Quaternion"===N)return A.multiply(X);if((0,M.f)(s,N)){var f;if(null!==(f=this.config)&&void 0!==f&&f.useMatrixPerComponent){const N=A.m;for(let A=0;A<N.length;A++)N[A]*=X.m[A];return"Matrix2D"===s?new c.c(N):"Matrix3D"===s?new c.f(N):r.c.mi(N)}return X.multiply(A)}var E;if(null!==(E=this.config)&&void 0!==E&&E.preventIntegerFloatArithmetic&&typeof A!==typeof X)throw new Error("Cannot add different types of numbers.");return(0,M.s)(A)*(0,M.s)(X)}}(0,N.f)("FlowGraphMultiplyBlock",w);class R extends E.c{constructor(A){super((0,f.C)(null===A||void 0===A?void 0:A.type),(0,f.C)(null===A||void 0===A?void 0:A.type),(0,f.C)(null===A||void 0===A?void 0:A.type),((A,X)=>this._polymorphicDivide(A,X)),"FlowGraphDivideBlock",A)}_polymorphicDivide(A,X){const s=(0,M.l)(A),N=(0,M.l)(X);if((0,M.j)(s,N)||(0,M.b)(s,N))return A.divide(X);if("Quaternion"===s||"Quaternion"===N){const s=A.clone();return s.x/=X.x,s.y/=X.y,s.z/=X.z,s.w/=X.w,s}if("Quaternion"===s||"Vector4"===N)return new r.m(A.x,A.y,A.z,A.w).divideInPlace(X);if("Vector4"===s||"Quaternion"===N)return A.divide(X);if((0,M.f)(s,N)){var f;if(null!==(f=this.config)&&void 0!==f&&f.useMatrixPerComponent){const N=A.m;for(let A=0;A<N.length;A++)N[A]/=X.m[A];return"Matrix2D"===s?new c.c(N):"Matrix3D"===s?new c.f(N):r.c.mi(N)}return A.divide(X)}var E;if(null!==(E=this.config)&&void 0!==E&&E.preventIntegerFloatArithmetic&&typeof A!==typeof X)throw new Error("Cannot add different types of numbers.");return(0,M.s)(A)/(0,M.s)(X)}}(0,N.f)("FlowGraphDivideBlock",R);class C extends K{constructor(A){super(f.n,(A=>this._random(A)),"FlowGraphRandomBlock",A),this.min=this.registerDataInput("min",f.n,(null===A||void 0===A?void 0:A.min)??0),this.max=this.registerDataInput("max",f.n,(null===A||void 0===A?void 0:A.max)??1),null!==A&&void 0!==A&&A.seed&&(this._seed=A.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const A=1e4*Math.sin(this._seed++);return A-Math.floor(A)}return Math.random()}_random(A){const X=this.min.getValue(A),s=this.max.getValue(A);return this._getRandomValue()*(s-X)+X}}(0,N.f)("FlowGraphRandomBlock",C);class J extends K{constructor(A){super(f.n,(()=>Math.E),"FlowGraphEBlock",A)}}(0,N.f)("FlowGraphEBlock",J);class a extends K{constructor(A){super(f.n,(()=>Math.PI),"FlowGraphPIBlock",A)}}(0,N.f)("FlowGraphPIBlock",a);class u extends K{constructor(A){super(f.n,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",A)}}(0,N.f)("FlowGraphInfBlock",u);class z extends K{constructor(A){super(f.n,(()=>Number.NaN),"FlowGraphNaNBlock",A)}}function m(A,X){switch((0,M.l)(A)){case"FlowGraphInteger":return new v.e(X(A.value));case"Vector2":return new r.i(X(A.x),X(A.y));case"oi":return new r.k(X(A.x),X(A.y),X(A.z));case"Vector4":return new r.m(X(A.x),X(A.y),X(A.z),X(A.w));case"Quaternion":return new r.d(X(A.x),X(A.y),X(A.z),X(A.w));case"Matrix":return r.c.mi(A.m.map(X));case"Matrix2D":return new c.c(A.m.map(X));case"Matrix3D":return new c.f(A.m.map(X));default:return X(A)}}(0,N.f)("FlowGraphNaNBlock",z);class b extends i.d{constructor(A){super(f.n,f.n,(A=>this._polymorphicAbs(A)),"FlowGraphAbsBlock",A)}_polymorphicAbs(A){return m(A,Math.abs)}}(0,N.f)("FlowGraphAbsBlock",b);class y extends i.d{constructor(A){super(f.n,f.n,(A=>this._polymorphicSign(A)),"FlowGraphSignBlock",A)}_polymorphicSign(A){return m(A,Math.sign)}}(0,N.f)("FlowGraphSignBlock",y);class j extends i.d{constructor(A){super(f.n,f.n,(A=>this._polymorphicTrunc(A)),"FlowGraphTruncBlock",A)}_polymorphicTrunc(A){return m(A,Math.trunc)}}(0,N.f)("FlowGraphTruncBlock",j);class G extends i.d{constructor(A){super(f.n,f.n,(A=>this._polymorphicFloor(A)),"FlowGraphFloorBlock",A)}_polymorphicFloor(A){return m(A,Math.floor)}}(0,N.f)("FlowGraphFloorBlock",G);class V extends i.d{constructor(A){super(f.b,f.b,(A=>this._polymorphicCeiling(A)),"FlowGraphCeilBlock",A)}_polymorphicCeiling(A){return m(A,Math.ceil)}}(0,N.f)("FlowGraphCeilBlock",V);class D extends i.d{constructor(A){super(f.b,f.b,(A=>this._polymorphicRound(A)),"FlowGraphRoundBlock",A)}_polymorphicRound(A){return m(A,(A=>{var X;return A<0&&null!==(X=this.config)&&void 0!==X&&X.roundHalfAwayFromZero?-Math.round(-A):Math.round(A)}))}}(0,N.f)("FlowGraphRoundBlock",D);class O extends i.d{constructor(A){super(f.b,f.b,(A=>this._polymorphicFraction(A)),"FlowGraphFractBlock",A)}_polymorphicFraction(A){return m(A,(A=>A-Math.floor(A)))}}(0,N.f)("FlowGraphFractBlock",O);class P extends i.d{constructor(A){super(f.b,f.b,(A=>this._polymorphicNeg(A)),"FlowGraphNegationBlock",A)}_polymorphicNeg(A){return m(A,(A=>-A))}}function l(A,X,s){switch((0,M.l)(A)){case"FlowGraphInteger":return new v.e(s(A.value,X.value));case"Vector2":return new r.i(s(A.x,X.x),s(A.y,X.y));case"oi":return new r.k(s(A.x,X.x),s(A.y,X.y),s(A.z,X.z));case"Vector4":return new r.m(s(A.x,X.x),s(A.y,X.y),s(A.z,X.z),s(A.w,X.w));case"Quaternion":return new r.d(s(A.x,X.x),s(A.y,X.y),s(A.z,X.z),s(A.w,X.w));case"Matrix":return r.c.mi(A.m.map(((A,N)=>s(A,X.m[N]))));case"Matrix2D":return new c.c(A.m.map(((A,N)=>s(A,X.m[N]))));case"Matrix3D":return new c.f(A.m.map(((A,N)=>s(A,X.m[N]))));default:return s((0,M.s)(A),(0,M.s)(X))}}(0,N.f)("FlowGraphNegationBlock",P);class n extends E.c{constructor(A){super(f.b,f.b,f.b,((A,X)=>this._polymorphicRemainder(A,X)),"FlowGraphModuloBlock",A)}_polymorphicRemainder(A,X){return l(A,X,((A,X)=>A%X))}}(0,N.f)("FlowGraphModuloBlock",n);class U extends E.c{constructor(A){super(f.b,f.b,f.b,((A,X)=>this._polymorphicMin(A,X)),"FlowGraphMinBlock",A)}_polymorphicMin(A,X){return l(A,X,Math.min)}}(0,N.f)("FlowGraphMinBlock",U);class t extends E.c{constructor(A){super(f.b,f.b,f.b,((A,X)=>this._polymorphicMax(A,X)),"FlowGraphMaxBlock",A)}_polymorphicMax(A,X){return l(A,X,Math.max)}}function e(A,X,s){return Math.min(Math.max(A,Math.min(X,s)),Math.max(X,s))}function T(A,X,s,N){switch((0,M.l)(A)){case"FlowGraphInteger":return new v.e(N(A.value,X.value,s.value));case"Vector2":return new r.i(N(A.x,X.x,s.x),N(A.y,X.y,s.y));case"oi":return new r.k(N(A.x,X.x,s.x),N(A.y,X.y,s.y),N(A.z,X.z,s.z));case"Vector4":return new r.m(N(A.x,X.x,s.x),N(A.y,X.y,s.y),N(A.z,X.z,s.z),N(A.w,X.w,s.w));case"Quaternion":return new r.d(N(A.x,X.x,s.x),N(A.y,X.y,s.y),N(A.z,X.z,s.z),N(A.w,X.w,s.w));case"Matrix":return r.c.mi(A.m.map(((A,f)=>N(A,X.m[f],s.m[f]))));case"Matrix2D":return new c.c(A.m.map(((A,f)=>N(A,X.m[f],s.m[f]))));case"Matrix3D":return new c.f(A.m.map(((A,f)=>N(A,X.m[f],s.m[f]))));default:return N((0,M.s)(A),(0,M.s)(X),(0,M.s)(s))}}(0,N.f)("FlowGraphMaxBlock",t);class I extends Y{constructor(A){super(f.b,f.b,f.b,f.b,((A,X,s)=>this._polymorphicClamp(A,X,s)),"FlowGraphClampBlock",A)}_polymorphicClamp(A,X,s){return T(A,X,s,e)}}function L(A){return Math.min(Math.max(A,0),1)}(0,N.f)("FlowGraphClampBlock",I);class k extends i.d{constructor(A){super(f.b,f.b,(A=>this._polymorphicSaturate(A)),"FlowGraphSaturateBlock",A)}_polymorphicSaturate(A){return m(A,L)}}function x(A,X,s){return(1-s)*A+s*X}(0,N.f)("FlowGraphSaturateBlock",k);class H extends Y{constructor(A){super(f.b,f.b,f.b,f.b,((A,X,s)=>this._polymorphicInterpolate(A,X,s)),"FlowGraphMathInterpolationBlock",A)}_polymorphicInterpolate(A,X,s){return T(A,X,s,x)}}(0,N.f)("FlowGraphMathInterpolationBlock",H);class F extends E.c{constructor(A){super(f.b,f.b,f.c,((A,X)=>this._polymorphicEq(A,X)),"FlowGraphEqualityBlock",A)}_polymorphicEq(A,X){const s=(0,M.l)(A),N=(0,M.l)(X);return typeof A===typeof X&&((0,M.j)(s,N)||(0,M.f)(s,N)||(0,M.b)(s,N)?A.equals(X):A===X)}}function q(A,X,s){if((0,M.w)(A)&&(0,M.w)(X))return s((0,M.s)(A),(0,M.s)(X));throw new Error(`Cannot compare ${A} and ${X}`)}(0,N.f)("FlowGraphEqualityBlock",F);class S extends E.c{constructor(A){super(f.b,f.b,f.c,((A,X)=>this._polymorphicLessThan(A,X)),"FlowGraphLessThanBlock",A)}_polymorphicLessThan(A,X){return q(A,X,((A,X)=>A<X))}}(0,N.f)("FlowGraphLessThanBlock",S);class p extends E.c{constructor(A){super(f.b,f.b,f.c,((A,X)=>this._polymorphicLessThanOrEqual(A,X)),"FlowGraphLessThanOrEqualBlock",A)}_polymorphicLessThanOrEqual(A,X){return q(A,X,((A,X)=>A<=X))}}(0,N.f)("FlowGraphLessThanOrEqualBlock",p);class B extends E.c{constructor(A){super(f.b,f.b,f.c,((A,X)=>this._polymorphicGreaterThan(A,X)),"FlowGraphGreaterThanBlock",A)}_polymorphicGreaterThan(A,X){return q(A,X,((A,X)=>A>X))}}(0,N.f)("FlowGraphGreaterThanBlock",B);class Z extends E.c{constructor(A){super(f.b,f.b,f.c,((A,X)=>this._polymorphicGreaterThanOrEqual(A,X)),"FlowGraphGreaterThanOrEqualBlock",A)}_polymorphicGreaterThanOrEqual(A,X){return q(A,X,((A,X)=>A>=X))}}(0,N.f)("FlowGraphGreaterThanOrEqualBlock",Z);class o extends i.d{constructor(A){super(f.b,f.c,(A=>this._polymorphicIsNan(A)),"FlowGraphIsNaNBlock",A)}_polymorphicIsNan(A){if((0,M.w)(A,!0))return isNaN((0,M.s)(A));throw new Error(`Cannot get NaN of ${A}`)}}(0,N.f)("FlowGraphIsNaNBlock",o);class W extends i.d{constructor(A){super(f.b,f.c,(A=>this._polymorphicIsInf(A)),"FlowGraphIsInfBlock",A)}_polymorphicIsInf(A){if((0,M.w)(A))return!isFinite((0,M.s)(A));throw new Error(`Cannot get isInf of ${A}`)}}(0,N.f)("FlowGraphIsInfBlock",W);class h extends i.d{constructor(A){super(f.b,f.b,(A=>this._polymorphicDegToRad(A)),"FlowGraphDegToRadBlock",A)}_degToRad(A){return A*Math.PI/180}_polymorphicDegToRad(A){return m(A,this._degToRad)}}(0,N.f)("FlowGraphDegToRadBlock",h);class AA extends i.d{constructor(A){super(f.b,f.b,(A=>this._polymorphicRadToDeg(A)),"FlowGraphRadToDegBlock",A)}_radToDeg(A){return 180*A/Math.PI}_polymorphicRadToDeg(A){return m(A,this._radToDeg)}}(0,N.f)("FlowGraphRadToDegBlock",AA);class XA extends i.d{constructor(A){super(f.n,f.n,(A=>this._polymorphicSin(A)),"FlowGraphSinBlock",A)}_polymorphicSin(A){return m(A,Math.sin)}}class sA extends i.d{constructor(A){super(f.n,f.n,(A=>this._polymorphicCos(A)),"FlowGraphCosBlock",A)}_polymorphicCos(A){return m(A,Math.cos)}}class NA extends i.d{constructor(A){super(f.n,f.n,(A=>this._polymorphicTan(A)),"FlowGraphTanBlock",A)}_polymorphicTan(A){return m(A,Math.tan)}}class fA extends i.d{constructor(A){super(f.n,f.n,(A=>this._polymorphicAsin(A)),"FlowGraphASinBlock",A)}_polymorphicAsin(A){return m(A,Math.asin)}}(0,N.f)("FlowGraphASinBlock",fA);class EA extends i.d{constructor(A){super(f.n,f.n,(A=>this._polymorphicAcos(A)),"FlowGraphACosBlock",A)}_polymorphicAcos(A){return m(A,Math.acos)}}(0,N.f)("FlowGraphACosBlock",EA);class gA extends i.d{constructor(A){super(f.n,f.n,(A=>this._polymorphicAtan(A)),"FlowGraphATanBlock",A)}_polymorphicAtan(A){return m(A,Math.atan)}}(0,N.f)("FlowGraphATanBlock",gA);class KA extends E.c{constructor(A){super(f.b,f.b,f.b,((A,X)=>this._polymorphicAtan2(A,X)),"FlowGraphATan2Block",A)}_polymorphicAtan2(A,X){return l(A,X,Math.atan2)}}(0,N.f)("FlowGraphATan2Block",KA);class rA extends i.d{constructor(A){super(f.b,f.b,(A=>this._polymorphicSinh(A)),"FlowGraphSinhBlock",A)}_polymorphicSinh(A){return m(A,Math.sinh)}}(0,N.f)("FlowGraphSinhBlock",rA);class iA extends i.d{constructor(A){super(f.b,f.b,(A=>this._polymorphicCosh(A)),"FlowGraphCoshBlock",A)}_polymorphicCosh(A){return m(A,Math.cosh)}}(0,N.f)("FlowGraphCoshBlock",iA);class YA extends i.d{constructor(A){super(f.b,f.b,(A=>this._polymorphicTanh(A)),"FlowGraphTanhBlock",A)}_polymorphicTanh(A){return m(A,Math.tanh)}}(0,N.f)("FlowGraphTanhBlock",YA);class vA extends i.d{constructor(A){super(f.b,f.n,(A=>this._polymorphicAsinh(A)),"FlowGraphASinhBlock",A)}_polymorphicAsinh(A){return m(A,Math.asinh)}}(0,N.f)("FlowGraphASinhBlock",vA);class cA extends i.d{constructor(A){super(f.b,f.n,(A=>this._polymorphicAcosh(A)),"FlowGraphACoshBlock",A)}_polymorphicAcosh(A){return m(A,Math.acosh)}}(0,N.f)("FlowGraphACoshBlock",cA);class MA extends i.d{constructor(A){super(f.b,f.n,(A=>this._polymorphicAtanh(A)),"FlowGraphATanhBlock",A)}_polymorphicAtanh(A){return m(A,Math.atanh)}}(0,N.f)("FlowGraphATanhBlock",MA);class dA extends i.d{constructor(A){super(f.b,f.n,(A=>this._polymorphicExp(A)),"FlowGraphExponentialBlock",A)}_polymorphicExp(A){return m(A,Math.exp)}}(0,N.f)("FlowGraphExponentialBlock",dA);class QA extends i.d{constructor(A){super(f.b,f.n,(A=>this._polymorphicLog(A)),"FlowGraphLogBlock",A)}_polymorphicLog(A){return m(A,Math.log)}}(0,N.f)("FlowGraphLogBlock",QA);class wA extends i.d{constructor(A){super(f.b,f.n,(A=>this._polymorphicLog2(A)),"FlowGraphLog2Block",A)}_polymorphicLog2(A){return m(A,Math.log2)}}(0,N.f)("FlowGraphLog2Block",wA);class RA extends i.d{constructor(A){super(f.b,f.n,(A=>this._polymorphicLog10(A)),"FlowGraphLog10Block",A)}_polymorphicLog10(A){return m(A,Math.log10)}}(0,N.f)("FlowGraphLog10Block",RA);class CA extends i.d{constructor(A){super(f.b,f.n,(A=>this._polymorphicSqrt(A)),"FlowGraphSquareRootBlock",A)}_polymorphicSqrt(A){return m(A,Math.sqrt)}}(0,N.f)("FlowGraphSquareRootBlock",CA);class JA extends i.d{constructor(A){super(f.b,f.n,(A=>this._polymorphicCubeRoot(A)),"FlowGraphCubeRootBlock",A)}_polymorphicCubeRoot(A){return m(A,Math.cbrt)}}(0,N.f)("FlowGraphCubeRootBlock",JA);class aA extends E.c{constructor(A){super(f.b,f.n,f.n,((A,X)=>this._polymorphicPow(A,X)),"FlowGraphPowerBlock",A)}_polymorphicPow(A,X){return l(A,X,Math.pow)}}(0,N.f)("FlowGraphPowerBlock",aA);class uA extends i.d{constructor(A){super((0,f.C)((null===A||void 0===A?void 0:A.valueType)||"FlowGraphInteger"),(0,f.C)((null===A||void 0===A?void 0:A.valueType)||"FlowGraphInteger"),(A=>"boolean"===typeof A?!A:"number"===typeof A?~A:new v.e(~A.value)),"FlowGraphBitwiseNotBlock",A)}}(0,N.f)("FlowGraphBitwiseNotBlock",uA);class zA extends E.c{constructor(A){super((0,f.C)((null===A||void 0===A?void 0:A.valueType)||"FlowGraphInteger"),(0,f.C)((null===A||void 0===A?void 0:A.valueType)||"FlowGraphInteger"),(0,f.C)((null===A||void 0===A?void 0:A.valueType)||"FlowGraphInteger"),((A,X)=>{if("boolean"===typeof A&&"boolean"===typeof X)return A&&X;if("number"===typeof A&&"number"===typeof X)return A&X;if("object"===typeof A&&"object"===typeof X)return new v.e(A.value&X.value);throw new Error(`Cannot perform bitwise AND on ${A} and ${X}`)}),"FlowGraphBitwiseAndBlock",A)}}(0,N.f)("FlowGraphBitwiseAndBlock",zA);class mA extends E.c{constructor(A){super((0,f.C)((null===A||void 0===A?void 0:A.valueType)||"FlowGraphInteger"),(0,f.C)((null===A||void 0===A?void 0:A.valueType)||"FlowGraphInteger"),(0,f.C)((null===A||void 0===A?void 0:A.valueType)||"FlowGraphInteger"),((A,X)=>{if("boolean"===typeof A&&"boolean"===typeof X)return A||X;if("number"===typeof A&&"number"===typeof X)return A|X;if("object"===typeof A&&"object"===typeof X)return new v.e(A.value|X.value);throw new Error(`Cannot perform bitwise OR on ${A} and ${X}`)}),"FlowGraphBitwiseOrBlock",A)}}(0,N.f)("FlowGraphBitwiseOrBlock",mA);class bA extends E.c{constructor(A){super((0,f.C)((null===A||void 0===A?void 0:A.valueType)||"FlowGraphInteger"),(0,f.C)((null===A||void 0===A?void 0:A.valueType)||"FlowGraphInteger"),(0,f.C)((null===A||void 0===A?void 0:A.valueType)||"FlowGraphInteger"),((A,X)=>{if("boolean"===typeof A&&"boolean"===typeof X)return A!==X;if("number"===typeof A&&"number"===typeof X)return A^X;if("object"===typeof A&&"object"===typeof X)return new v.e(A.value^X.value);throw new Error(`Cannot perform bitwise XOR on ${A} and ${X}`)}),"FlowGraphBitwiseXorBlock",A)}}(0,N.f)("FlowGraphBitwiseXorBlock",bA);class yA extends E.c{constructor(A){super(f.f,f.f,f.f,((A,X)=>new v.e(A.value<<X.value)),"FlowGraphBitwiseLeftShiftBlock",A)}}(0,N.f)("FlowGraphBitwiseLeftShiftBlock",yA);class jA extends E.c{constructor(A){super(f.f,f.f,f.f,((A,X)=>new v.e(A.value>>X.value)),"FlowGraphBitwiseRightShiftBlock",A)}}(0,N.f)("FlowGraphBitwiseRightShiftBlock",jA);class GA extends i.d{constructor(A){super(f.f,f.f,(A=>new v.e(Math.clz32(A.value))),"FlowGraphLeadingZerosBlock",A)}}(0,N.f)("FlowGraphLeadingZerosBlock",GA);class VA extends i.d{constructor(A){super(f.f,f.f,(A=>new v.e(A.value?31-Math.clz32(A.value&-A.value):32)),"FlowGraphTrailingZerosBlock",A)}}(0,N.f)("FlowGraphTrailingZerosBlock",VA);class DA extends i.d{constructor(A){super(f.f,f.f,(A=>new v.e(function(A){let X=0;for(;A;)X+=1&A,A>>=1;return X}(A.value))),"FlowGraphOneBitsCounterBlock",A)}}(0,N.f)("FlowGraphOneBitsCounterBlock",DA)},13835:(A,X,s)=>{s.d(X,{c:()=>f});var N=s(13839);class f extends N.e{constructor(A,X,s,N,f,E){super(s,E),this._operation=N,this._className=f,this.a=this.registerDataInput("a",A),this.b=this.registerDataInput("b",X)}_doOperation(A){const X=this.a.getValue(A),s=this.b.getValue(A);return this._operation(X,s)}getClassName(){return this._className}}},13839:(A,X,s)=>{s.d(X,{e:()=>K});var N=s(12701),f=s(12677);const E="cachedOperationValue",g="cachedExecutionId";class K extends N.e{constructor(A,X){super(X),this.value=this.registerDataOutput("value",A),this.isValid=this.registerDataOutput("isValid",f.c)}_updateOutputs(A){const X=A._getExecutionVariable(this,g,-1),s=A._getExecutionVariable(this,E,null);if(void 0!==s&&null!==s&&X===A.executionId)this.isValid.setValue(!0,A),this.value.setValue(s,A);else try{const X=this._doOperation(A);if(void 0===X||null===X)return void this.isValid.setValue(!1,A);A._setExecutionVariable(this,E,X),A._setExecutionVariable(this,g,A.executionId),this.value.setValue(X,A),this.isValid.setValue(!0,A)}catch(N){this.isValid.setValue(!1,A)}}}},13846:(A,X,s)=>{s.d(X,{d:()=>f});var N=s(13839);class f extends N.e{constructor(A,X,s,N,f){super(X,f),this._operation=s,this._className=N,this.a=this.registerDataInput("a",A)}_doOperation(A){return this._operation(this.a.getValue(A))}getClassName(){return this._className}}}}]);