"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[63],{14121:(u,F,z)=>{z.r(F),z.d(F,{FlowGraphAbsBlock:()=>H,FlowGraphAcosBlock:()=>Ru,FlowGraphAcoshBlock:()=>Eu,FlowGraphAddBlock:()=>k,FlowGraphAsinBlock:()=>bu,FlowGraphAsinhBlock:()=>Wu,FlowGraphAtan2Block:()=>Iu,FlowGraphAtanBlock:()=>cu,FlowGraphAtanhBlock:()=>Lu,FlowGraphBitwiseAndBlock:()=>nu,FlowGraphBitwiseLeftShiftBlock:()=>yu,FlowGraphBitwiseNotBlock:()=>fu,FlowGraphBitwiseOrBlock:()=>Tu,FlowGraphBitwiseRightShiftBlock:()=>Uu,FlowGraphBitwiseXorBlock:()=>Hu,FlowGraphCeilBlock:()=>J,FlowGraphClampBlock:()=>B,FlowGraphCosBlock:()=>zu,FlowGraphCoshBlock:()=>Xu,FlowGraphCubeRootBlock:()=>Cu,FlowGraphDegToRadBlock:()=>t,FlowGraphDivideBlock:()=>e,FlowGraphEBlock:()=>C,FlowGraphEqualityBlock:()=>K,FlowGraphExpBlock:()=>ku,FlowGraphFloorBlock:()=>a,FlowGraphFractionBlock:()=>Q,FlowGraphGreaterThanBlock:()=>M,FlowGraphGreaterThanOrEqualBlock:()=>O,FlowGraphInfBlock:()=>f,FlowGraphIsInfinityBlock:()=>w,FlowGraphIsNanBlock:()=>i,FlowGraphLeadingZerosBlock:()=>au,FlowGraphLessThanBlock:()=>D,FlowGraphLessThanOrEqualBlock:()=>V,FlowGraphLog10Block:()=>eu,FlowGraphLog2Block:()=>Yu,FlowGraphLogBlock:()=>Nu,FlowGraphMathInterpolationBlock:()=>h,FlowGraphMaxBlock:()=>v,FlowGraphMinBlock:()=>o,FlowGraphModuloBlock:()=>s,FlowGraphMultiplyBlock:()=>Y,FlowGraphNaNBlock:()=>n,FlowGraphNegationBlock:()=>l,FlowGraphOneBitsCounterBlock:()=>qu,FlowGraphPiBlock:()=>r,FlowGraphPowerBlock:()=>ru,FlowGraphRadToDegBlock:()=>uu,FlowGraphRandomBlock:()=>d,FlowGraphRoundBlock:()=>q,FlowGraphSaturateBlock:()=>S,FlowGraphSignBlock:()=>y,FlowGraphSinBlock:()=>Fu,FlowGraphSinhBlock:()=>Gu,FlowGraphSquareRootBlock:()=>du,FlowGraphSubtractBlock:()=>N,FlowGraphTanBlock:()=>pu,FlowGraphTanhBlock:()=>ju,FlowGraphTrailingZerosBlock:()=>Ju,FlowGraphTruncBlock:()=>U});var p=z(668),b=z(12952),R=z(14129),c=z(14133);class I extends c.e{constructor(u,F,z,p){super(u,p),this._operation=F,this._className=z}_doOperation(u){return this._operation(u)}getClassName(){return this._className}}var G=z(730),X=z(14142);class j extends c.e{constructor(u,F,z,p,b,R,c){super(p,c),this._operation=b,this._className=R,this.a=this.registerDataInput("a",u),this.b=this.registerDataInput("b",F),this.c=this.registerDataInput("c",z)}_doOperation(u){return this._operation(this.a.getValue(u),this.b.getValue(u),this.c.getValue(u))}getClassName(){return this._className}}var W=z(12944),E=z(12959),L=z(12986);class k extends R.c{constructor(u){super((0,b.M)(null===u||void 0===u?void 0:u.type),(0,b.M)(null===u||void 0===u?void 0:u.type),(0,b.M)(null===u||void 0===u?void 0:u.type),((u,F)=>this._polymorphicAdd(u,F)),"FlowGraphAddBlock",u)}_polymorphicAdd(u,F){const z=(0,L.m)(u),p=(0,L.m)(F);if((0,L.k)(z,p)||(0,L.h)(z,p)||(0,L.e)(z,p))return u.add(F);if("Quaternion"===z||"Vector4"===p)return new G.p(u.x,u.y,u.z,u.w).addInPlace(F);if("Vector4"===z||"Quaternion"===p)return u.add(F);var b;if(null!==(b=this.config)&&void 0!==b&&b.preventIntegerFloatArithmetic&&typeof u!==typeof F)throw new Error("Cannot add different types of numbers.");return(0,L.r)(u)+(0,L.r)(F)}}(0,p.h)("FlowGraphAddBlock",k);class N extends R.c{constructor(u){super((0,b.M)(null===u||void 0===u?void 0:u.type),(0,b.M)(null===u||void 0===u?void 0:u.type),(0,b.M)(null===u||void 0===u?void 0:u.type),((u,F)=>this._polymorphicSubtract(u,F)),"FlowGraphSubtractBlock",u)}_polymorphicSubtract(u,F){const z=(0,L.m)(u),p=(0,L.m)(F);if((0,L.k)(z,p)||(0,L.e)(z,p)||(0,L.h)(z,p))return u.Md(F);if("Quaternion"===z||"Vector4"===p)return new G.p(u.x,u.y,u.z,u.w).ak(F);if("Vector4"===z||"Quaternion"===p)return u.Md(F);var b;if(null!==(b=this.config)&&void 0!==b&&b.preventIntegerFloatArithmetic&&typeof u!==typeof F)throw new Error("Cannot add different types of numbers.");return(0,L.r)(u)-(0,L.r)(F)}}(0,p.h)("FlowGraphSubtractBlock",N);class Y extends R.c{constructor(u){super((0,b.M)(null===u||void 0===u?void 0:u.type),(0,b.M)(null===u||void 0===u?void 0:u.type),(0,b.M)(null===u||void 0===u?void 0:u.type),((u,F)=>this._polymorphicMultiply(u,F)),"FlowGraphMultiplyBlock",u)}_polymorphicMultiply(u,F){const z=(0,L.m)(u),p=(0,L.m)(F);if((0,L.k)(z,p)||(0,L.e)(z,p))return u.multiply(F);if("Quaternion"===z||"Vector4"===p)return new G.p(u.x,u.y,u.z,u.w).multiplyInPlace(F);if("Vector4"===z||"Quaternion"===p)return u.multiply(F);if((0,L.h)(z,p)){var b;if(null!==(b=this.config)&&void 0!==b&&b.useMatrixPerComponent){const p=u.m;for(let u=0;u<p.length;u++)p[u]*=F.m[u];return"Matrix2D"===z?new E.c(p):"Matrix3D"===z?new E.f(p):G.b.Yj(p)}return F.multiply(u)}var R;if(null!==(R=this.config)&&void 0!==R&&R.preventIntegerFloatArithmetic&&typeof u!==typeof F)throw new Error("Cannot add different types of numbers.");return(0,L.r)(u)*(0,L.r)(F)}}(0,p.h)("FlowGraphMultiplyBlock",Y);class e extends R.c{constructor(u){super((0,b.M)(null===u||void 0===u?void 0:u.type),(0,b.M)(null===u||void 0===u?void 0:u.type),(0,b.M)(null===u||void 0===u?void 0:u.type),((u,F)=>this._polymorphicDivide(u,F)),"FlowGraphDivideBlock",u)}_polymorphicDivide(u,F){const z=(0,L.m)(u),p=(0,L.m)(F);if((0,L.k)(z,p)||(0,L.e)(z,p))return u.divide(F);if("Quaternion"===z||"Quaternion"===p){const z=u.clone();return z.x/=F.x,z.y/=F.y,z.z/=F.z,z.w/=F.w,z}if("Quaternion"===z||"Vector4"===p)return new G.p(u.x,u.y,u.z,u.w).divideInPlace(F);if("Vector4"===z||"Quaternion"===p)return u.divide(F);if((0,L.h)(z,p)){var b;if(null!==(b=this.config)&&void 0!==b&&b.useMatrixPerComponent){const p=u.m;for(let u=0;u<p.length;u++)p[u]/=F.m[u];return"Matrix2D"===z?new E.c(p):"Matrix3D"===z?new E.f(p):G.b.Yj(p)}return u.divide(F)}var R;if(null!==(R=this.config)&&void 0!==R&&R.preventIntegerFloatArithmetic&&typeof u!==typeof F)throw new Error("Cannot add different types of numbers.");return(0,L.r)(u)/(0,L.r)(F)}}(0,p.h)("FlowGraphDivideBlock",e);class d extends I{constructor(u){super(b.t,(u=>this._random(u)),"FlowGraphRandomBlock",u),this.min=this.registerDataInput("min",b.t,(null===u||void 0===u?void 0:u.min)??0),this.max=this.registerDataInput("max",b.t,(null===u||void 0===u?void 0:u.max)??1),null!==u&&void 0!==u&&u.seed&&(this._seed=u.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const u=1e4*Math.sin(this._seed++);return u-Math.floor(u)}return Math.random()}_random(u){const F=this.min.getValue(u),z=this.max.getValue(u);return this._getRandomValue()*(z-F)+F}}(0,p.h)("FlowGraphRandomBlock",d);class C extends I{constructor(u){super(b.t,(()=>Math.E),"FlowGraphEBlock",u)}}(0,p.h)("FlowGraphEBlock",C);class r extends I{constructor(u){super(b.t,(()=>Math.PI),"FlowGraphPIBlock",u)}}(0,p.h)("FlowGraphPIBlock",r);class f extends I{constructor(u){super(b.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",u)}}(0,p.h)("FlowGraphInfBlock",f);class n extends I{constructor(u){super(b.t,(()=>Number.NaN),"FlowGraphNaNBlock",u)}}function T(u,F){switch((0,L.m)(u)){case"FlowGraphInteger":return new W.d(F(u.value));case"Vector2":return new G.k(F(u.x),F(u.y));case"$j":return new G.l(F(u.x),F(u.y),F(u.z));case"Vector4":return new G.p(F(u.x),F(u.y),F(u.z),F(u.w));case"Quaternion":return new G.f(F(u.x),F(u.y),F(u.z),F(u.w));case"Matrix":return G.b.Yj(u.m.map(F));case"Matrix2D":return new E.c(u.m.map(F));case"Matrix3D":return new E.f(u.m.map(F));default:return F(u)}}(0,p.h)("FlowGraphNaNBlock",n);class H extends X.e{constructor(u){super(b.t,b.t,(u=>this._polymorphicAbs(u)),"FlowGraphAbsBlock",u)}_polymorphicAbs(u){return T(u,Math.abs)}}(0,p.h)("FlowGraphAbsBlock",H);class y extends X.e{constructor(u){super(b.t,b.t,(u=>this._polymorphicSign(u)),"FlowGraphSignBlock",u)}_polymorphicSign(u){return T(u,Math.sign)}}(0,p.h)("FlowGraphSignBlock",y);class U extends X.e{constructor(u){super(b.t,b.t,(u=>this._polymorphicTrunc(u)),"FlowGraphTruncBlock",u)}_polymorphicTrunc(u){return T(u,Math.trunc)}}(0,p.h)("FlowGraphTruncBlock",U);class a extends X.e{constructor(u){super(b.t,b.t,(u=>this._polymorphicFloor(u)),"FlowGraphFloorBlock",u)}_polymorphicFloor(u){return T(u,Math.floor)}}(0,p.h)("FlowGraphFloorBlock",a);class J extends X.e{constructor(u){super(b.e,b.e,(u=>this._polymorphicCeiling(u)),"FlowGraphCeilBlock",u)}_polymorphicCeiling(u){return T(u,Math.ceil)}}(0,p.h)("FlowGraphCeilBlock",J);class q extends X.e{constructor(u){super(b.e,b.e,(u=>this._polymorphicRound(u)),"FlowGraphRoundBlock",u)}_polymorphicRound(u){return T(u,(u=>{var F;return u<0&&null!==(F=this.config)&&void 0!==F&&F.roundHalfAwayFromZero?-Math.round(-u):Math.round(u)}))}}(0,p.h)("FlowGraphRoundBlock",q);class Q extends X.e{constructor(u){super(b.e,b.e,(u=>this._polymorphicFraction(u)),"FlowGraphFractBlock",u)}_polymorphicFraction(u){return T(u,(u=>u-Math.floor(u)))}}(0,p.h)("FlowGraphFractBlock",Q);class l extends X.e{constructor(u){super(b.e,b.e,(u=>this._polymorphicNeg(u)),"FlowGraphNegationBlock",u)}_polymorphicNeg(u){return T(u,(u=>-u))}}function Z(u,F,z){switch((0,L.m)(u)){case"FlowGraphInteger":return new W.d(z(u.value,F.value));case"Vector2":return new G.k(z(u.x,F.x),z(u.y,F.y));case"$j":return new G.l(z(u.x,F.x),z(u.y,F.y),z(u.z,F.z));case"Vector4":return new G.p(z(u.x,F.x),z(u.y,F.y),z(u.z,F.z),z(u.w,F.w));case"Quaternion":return new G.f(z(u.x,F.x),z(u.y,F.y),z(u.z,F.z),z(u.w,F.w));case"Matrix":return G.b.Yj(u.m.map(((u,p)=>z(u,F.m[p]))));case"Matrix2D":return new E.c(u.m.map(((u,p)=>z(u,F.m[p]))));case"Matrix3D":return new E.f(u.m.map(((u,p)=>z(u,F.m[p]))));default:return z((0,L.r)(u),(0,L.r)(F))}}(0,p.h)("FlowGraphNegationBlock",l);class s extends R.c{constructor(u){super(b.e,b.e,b.e,((u,F)=>this._polymorphicRemainder(u,F)),"FlowGraphModuloBlock",u)}_polymorphicRemainder(u,F){return Z(u,F,((u,F)=>u%F))}}(0,p.h)("FlowGraphModuloBlock",s);class o extends R.c{constructor(u){super(b.e,b.e,b.e,((u,F)=>this._polymorphicMin(u,F)),"FlowGraphMinBlock",u)}_polymorphicMin(u,F){return Z(u,F,Math.min)}}(0,p.h)("FlowGraphMinBlock",o);class v extends R.c{constructor(u){super(b.e,b.e,b.e,((u,F)=>this._polymorphicMax(u,F)),"FlowGraphMaxBlock",u)}_polymorphicMax(u,F){return Z(u,F,Math.max)}}function m(u,F,z){return Math.min(Math.max(u,Math.min(F,z)),Math.max(F,z))}function A(u,F,z,p){switch((0,L.m)(u)){case"FlowGraphInteger":return new W.d(p(u.value,F.value,z.value));case"Vector2":return new G.k(p(u.x,F.x,z.x),p(u.y,F.y,z.y));case"$j":return new G.l(p(u.x,F.x,z.x),p(u.y,F.y,z.y),p(u.z,F.z,z.z));case"Vector4":return new G.p(p(u.x,F.x,z.x),p(u.y,F.y,z.y),p(u.z,F.z,z.z),p(u.w,F.w,z.w));case"Quaternion":return new G.f(p(u.x,F.x,z.x),p(u.y,F.y,z.y),p(u.z,F.z,z.z),p(u.w,F.w,z.w));case"Matrix":return G.b.Yj(u.m.map(((u,b)=>p(u,F.m[b],z.m[b]))));case"Matrix2D":return new E.c(u.m.map(((u,b)=>p(u,F.m[b],z.m[b]))));case"Matrix3D":return new E.f(u.m.map(((u,b)=>p(u,F.m[b],z.m[b]))));default:return p((0,L.r)(u),(0,L.r)(F),(0,L.r)(z))}}(0,p.h)("FlowGraphMaxBlock",v);class B extends j{constructor(u){super(b.e,b.e,b.e,b.e,((u,F,z)=>this._polymorphicClamp(u,F,z)),"FlowGraphClampBlock",u)}_polymorphicClamp(u,F,z){return A(u,F,z,m)}}function g(u){return Math.min(Math.max(u,0),1)}(0,p.h)("FlowGraphClampBlock",B);class S extends X.e{constructor(u){super(b.e,b.e,(u=>this._polymorphicSaturate(u)),"FlowGraphSaturateBlock",u)}_polymorphicSaturate(u){return T(u,g)}}function P(u,F,z){return(1-z)*u+z*F}(0,p.h)("FlowGraphSaturateBlock",S);class h extends j{constructor(u){super(b.e,b.e,b.e,b.e,((u,F,z)=>this._polymorphicInterpolate(u,F,z)),"FlowGraphMathInterpolationBlock",u)}_polymorphicInterpolate(u,F,z){return A(u,F,z,P)}}(0,p.h)("FlowGraphMathInterpolationBlock",h);class K extends R.c{constructor(u){super(b.e,b.e,b.i,((u,F)=>this._polymorphicEq(u,F)),"FlowGraphEqualityBlock",u)}_polymorphicEq(u,F){const z=(0,L.m)(u),p=(0,L.m)(F);return typeof u===typeof F&&((0,L.k)(z,p)||(0,L.h)(z,p)||(0,L.e)(z,p)?u.equals(F):u===F)}}function x(u,F,z){if((0,L.s)(u)&&(0,L.s)(F))return z((0,L.r)(u),(0,L.r)(F));throw new Error(`Cannot compare ${u} and ${F}`)}(0,p.h)("FlowGraphEqualityBlock",K);class D extends R.c{constructor(u){super(b.e,b.e,b.i,((u,F)=>this._polymorphicLessThan(u,F)),"FlowGraphLessThanBlock",u)}_polymorphicLessThan(u,F){return x(u,F,((u,F)=>u<F))}}(0,p.h)("FlowGraphLessThanBlock",D);class V extends R.c{constructor(u){super(b.e,b.e,b.i,((u,F)=>this._polymorphicLessThanOrEqual(u,F)),"FlowGraphLessThanOrEqualBlock",u)}_polymorphicLessThanOrEqual(u,F){return x(u,F,((u,F)=>u<=F))}}(0,p.h)("FlowGraphLessThanOrEqualBlock",V);class M extends R.c{constructor(u){super(b.e,b.e,b.i,((u,F)=>this._polymorphicGreaterThan(u,F)),"FlowGraphGreaterThanBlock",u)}_polymorphicGreaterThan(u,F){return x(u,F,((u,F)=>u>F))}}(0,p.h)("FlowGraphGreaterThanBlock",M);class O extends R.c{constructor(u){super(b.e,b.e,b.i,((u,F)=>this._polymorphicGreaterThanOrEqual(u,F)),"FlowGraphGreaterThanOrEqualBlock",u)}_polymorphicGreaterThanOrEqual(u,F){return x(u,F,((u,F)=>u>=F))}}(0,p.h)("FlowGraphGreaterThanOrEqualBlock",O);class i extends X.e{constructor(u){super(b.e,b.i,(u=>this._polymorphicIsNan(u)),"FlowGraphIsNaNBlock",u)}_polymorphicIsNan(u){if((0,L.s)(u,!0))return isNaN((0,L.r)(u));throw new Error(`Cannot get NaN of ${u}`)}}(0,p.h)("FlowGraphIsNaNBlock",i);class w extends X.e{constructor(u){super(b.e,b.i,(u=>this._polymorphicIsInf(u)),"FlowGraphIsInfBlock",u)}_polymorphicIsInf(u){if((0,L.s)(u))return!isFinite((0,L.r)(u));throw new Error(`Cannot get isInf of ${u}`)}}(0,p.h)("FlowGraphIsInfBlock",w);class t extends X.e{constructor(u){super(b.e,b.e,(u=>this._polymorphicDegToRad(u)),"FlowGraphDegToRadBlock",u)}_degToRad(u){return u*Math.PI/180}_polymorphicDegToRad(u){return T(u,this._degToRad)}}(0,p.h)("FlowGraphDegToRadBlock",t);class uu extends X.e{constructor(u){super(b.e,b.e,(u=>this._polymorphicRadToDeg(u)),"FlowGraphRadToDegBlock",u)}_radToDeg(u){return 180*u/Math.PI}_polymorphicRadToDeg(u){return T(u,this._radToDeg)}}(0,p.h)("FlowGraphRadToDegBlock",uu);class Fu extends X.e{constructor(u){super(b.t,b.t,(u=>this._polymorphicSin(u)),"FlowGraphSinBlock",u)}_polymorphicSin(u){return T(u,Math.sin)}}class zu extends X.e{constructor(u){super(b.t,b.t,(u=>this._polymorphicCos(u)),"FlowGraphCosBlock",u)}_polymorphicCos(u){return T(u,Math.cos)}}class pu extends X.e{constructor(u){super(b.t,b.t,(u=>this._polymorphicTan(u)),"FlowGraphTanBlock",u)}_polymorphicTan(u){return T(u,Math.tan)}}class bu extends X.e{constructor(u){super(b.t,b.t,(u=>this._polymorphicAsin(u)),"FlowGraphASinBlock",u)}_polymorphicAsin(u){return T(u,Math.asin)}}(0,p.h)("FlowGraphASinBlock",bu);class Ru extends X.e{constructor(u){super(b.t,b.t,(u=>this._polymorphicAcos(u)),"FlowGraphACosBlock",u)}_polymorphicAcos(u){return T(u,Math.acos)}}(0,p.h)("FlowGraphACosBlock",Ru);class cu extends X.e{constructor(u){super(b.t,b.t,(u=>this._polymorphicAtan(u)),"FlowGraphATanBlock",u)}_polymorphicAtan(u){return T(u,Math.atan)}}(0,p.h)("FlowGraphATanBlock",cu);class Iu extends R.c{constructor(u){super(b.e,b.e,b.e,((u,F)=>this._polymorphicAtan2(u,F)),"FlowGraphATan2Block",u)}_polymorphicAtan2(u,F){return Z(u,F,Math.atan2)}}(0,p.h)("FlowGraphATan2Block",Iu);class Gu extends X.e{constructor(u){super(b.e,b.e,(u=>this._polymorphicSinh(u)),"FlowGraphSinhBlock",u)}_polymorphicSinh(u){return T(u,Math.sinh)}}(0,p.h)("FlowGraphSinhBlock",Gu);class Xu extends X.e{constructor(u){super(b.e,b.e,(u=>this._polymorphicCosh(u)),"FlowGraphCoshBlock",u)}_polymorphicCosh(u){return T(u,Math.cosh)}}(0,p.h)("FlowGraphCoshBlock",Xu);class ju extends X.e{constructor(u){super(b.e,b.e,(u=>this._polymorphicTanh(u)),"FlowGraphTanhBlock",u)}_polymorphicTanh(u){return T(u,Math.tanh)}}(0,p.h)("FlowGraphTanhBlock",ju);class Wu extends X.e{constructor(u){super(b.e,b.t,(u=>this._polymorphicAsinh(u)),"FlowGraphASinhBlock",u)}_polymorphicAsinh(u){return T(u,Math.asinh)}}(0,p.h)("FlowGraphASinhBlock",Wu);class Eu extends X.e{constructor(u){super(b.e,b.t,(u=>this._polymorphicAcosh(u)),"FlowGraphACoshBlock",u)}_polymorphicAcosh(u){return T(u,Math.acosh)}}(0,p.h)("FlowGraphACoshBlock",Eu);class Lu extends X.e{constructor(u){super(b.e,b.t,(u=>this._polymorphicAtanh(u)),"FlowGraphATanhBlock",u)}_polymorphicAtanh(u){return T(u,Math.atanh)}}(0,p.h)("FlowGraphATanhBlock",Lu);class ku extends X.e{constructor(u){super(b.e,b.t,(u=>this._polymorphicExp(u)),"FlowGraphExponentialBlock",u)}_polymorphicExp(u){return T(u,Math.exp)}}(0,p.h)("FlowGraphExponentialBlock",ku);class Nu extends X.e{constructor(u){super(b.e,b.t,(u=>this._polymorphicLog(u)),"FlowGraphLogBlock",u)}_polymorphicLog(u){return T(u,Math.log)}}(0,p.h)("FlowGraphLogBlock",Nu);class Yu extends X.e{constructor(u){super(b.e,b.t,(u=>this._polymorphicLog2(u)),"FlowGraphLog2Block",u)}_polymorphicLog2(u){return T(u,Math.log2)}}(0,p.h)("FlowGraphLog2Block",Yu);class eu extends X.e{constructor(u){super(b.e,b.t,(u=>this._polymorphicLog10(u)),"FlowGraphLog10Block",u)}_polymorphicLog10(u){return T(u,Math.log10)}}(0,p.h)("FlowGraphLog10Block",eu);class du extends X.e{constructor(u){super(b.e,b.t,(u=>this._polymorphicSqrt(u)),"FlowGraphSquareRootBlock",u)}_polymorphicSqrt(u){return T(u,Math.sqrt)}}(0,p.h)("FlowGraphSquareRootBlock",du);class Cu extends X.e{constructor(u){super(b.e,b.t,(u=>this._polymorphicCubeRoot(u)),"FlowGraphCubeRootBlock",u)}_polymorphicCubeRoot(u){return T(u,Math.cbrt)}}(0,p.h)("FlowGraphCubeRootBlock",Cu);class ru extends R.c{constructor(u){super(b.e,b.t,b.t,((u,F)=>this._polymorphicPow(u,F)),"FlowGraphPowerBlock",u)}_polymorphicPow(u,F){return Z(u,F,Math.pow)}}(0,p.h)("FlowGraphPowerBlock",ru);class fu extends X.e{constructor(u){super((0,b.M)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),(0,b.M)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),(u=>"boolean"===typeof u?!u:"number"===typeof u?~u:new W.d(~u.value)),"FlowGraphBitwiseNotBlock",u)}}(0,p.h)("FlowGraphBitwiseNotBlock",fu);class nu extends R.c{constructor(u){super((0,b.M)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),(0,b.M)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),(0,b.M)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),((u,F)=>{if("boolean"===typeof u&&"boolean"===typeof F)return u&&F;if("number"===typeof u&&"number"===typeof F)return u&F;if("object"===typeof u&&"object"===typeof F)return new W.d(u.value&F.value);throw new Error(`Cannot perform bitwise AND on ${u} and ${F}`)}),"FlowGraphBitwiseAndBlock",u)}}(0,p.h)("FlowGraphBitwiseAndBlock",nu);class Tu extends R.c{constructor(u){super((0,b.M)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),(0,b.M)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),(0,b.M)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),((u,F)=>{if("boolean"===typeof u&&"boolean"===typeof F)return u||F;if("number"===typeof u&&"number"===typeof F)return u|F;if("object"===typeof u&&"object"===typeof F)return new W.d(u.value|F.value);throw new Error(`Cannot perform bitwise OR on ${u} and ${F}`)}),"FlowGraphBitwiseOrBlock",u)}}(0,p.h)("FlowGraphBitwiseOrBlock",Tu);class Hu extends R.c{constructor(u){super((0,b.M)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),(0,b.M)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),(0,b.M)((null===u||void 0===u?void 0:u.valueType)||"FlowGraphInteger"),((u,F)=>{if("boolean"===typeof u&&"boolean"===typeof F)return u!==F;if("number"===typeof u&&"number"===typeof F)return u^F;if("object"===typeof u&&"object"===typeof F)return new W.d(u.value^F.value);throw new Error(`Cannot perform bitwise XOR on ${u} and ${F}`)}),"FlowGraphBitwiseXorBlock",u)}}(0,p.h)("FlowGraphBitwiseXorBlock",Hu);class yu extends R.c{constructor(u){super(b.l,b.l,b.l,((u,F)=>new W.d(u.value<<F.value)),"FlowGraphBitwiseLeftShiftBlock",u)}}(0,p.h)("FlowGraphBitwiseLeftShiftBlock",yu);class Uu extends R.c{constructor(u){super(b.l,b.l,b.l,((u,F)=>new W.d(u.value>>F.value)),"FlowGraphBitwiseRightShiftBlock",u)}}(0,p.h)("FlowGraphBitwiseRightShiftBlock",Uu);class au extends X.e{constructor(u){super(b.l,b.l,(u=>new W.d(Math.clz32(u.value))),"FlowGraphLeadingZerosBlock",u)}}(0,p.h)("FlowGraphLeadingZerosBlock",au);class Ju extends X.e{constructor(u){super(b.l,b.l,(u=>new W.d(u.value?31-Math.clz32(u.value&-u.value):32)),"FlowGraphTrailingZerosBlock",u)}}(0,p.h)("FlowGraphTrailingZerosBlock",Ju);class qu extends X.e{constructor(u){super(b.l,b.l,(u=>new W.d(function(u){let F=0;for(;u;)F+=1&u,u>>=1;return F}(u.value))),"FlowGraphOneBitsCounterBlock",u)}}(0,p.h)("FlowGraphOneBitsCounterBlock",qu)},14129:(u,F,z)=>{z.d(F,{c:()=>b});var p=z(14133);class b extends p.e{constructor(u,F,z,p,b,R){super(z,R),this._operation=p,this._className=b,this.a=this.registerDataInput("a",u),this.b=this.registerDataInput("b",F)}_doOperation(u){const F=this.a.getValue(u),z=this.b.getValue(u);return this._operation(F,z)}getClassName(){return this._className}}},14133:(u,F,z)=>{z.d(F,{e:()=>I});var p=z(12980),b=z(12952);const R="cachedOperationValue",c="cachedExecutionId";class I extends p.d{constructor(u,F){super(F),this.value=this.registerDataOutput("value",u),this.isValid=this.registerDataOutput("isValid",b.i)}_updateOutputs(u){const F=u._getExecutionVariable(this,c,-1),z=u._getExecutionVariable(this,R,null);if(void 0!==z&&null!==z&&F===u.executionId)this.isValid.setValue(!0,u),this.value.setValue(z,u);else try{const F=this._doOperation(u);if(void 0===F||null===F)return void this.isValid.setValue(!1,u);u._setExecutionVariable(this,R,F),u._setExecutionVariable(this,c,u.executionId),this.value.setValue(F,u),this.isValid.setValue(!0,u)}catch(p){this.isValid.setValue(!1,u)}}}},14142:(u,F,z)=>{z.d(F,{e:()=>b});var p=z(14133);class b extends p.e{constructor(u,F,z,p,b){super(F,b),this._operation=z,this._className=p,this.a=this.registerDataInput("a",u)}_doOperation(u){return this._operation(this.a.getValue(u))}getClassName(){return this._className}}}}]);