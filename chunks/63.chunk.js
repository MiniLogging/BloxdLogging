"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[63],{14038:(n,k,T)=>{T.r(k),T.d(k,{FlowGraphAbsBlock:()=>A,FlowGraphAcosBlock:()=>Qn,FlowGraphAcoshBlock:()=>Wn,FlowGraphAddBlock:()=>H,FlowGraphAsinBlock:()=>Kn,FlowGraphAsinhBlock:()=>Pn,FlowGraphAtan2Block:()=>wn,FlowGraphAtanBlock:()=>Gn,FlowGraphAtanhBlock:()=>Jn,FlowGraphBitwiseAndBlock:()=>un,FlowGraphBitwiseLeftShiftBlock:()=>vn,FlowGraphBitwiseNotBlock:()=>On,FlowGraphBitwiseOrBlock:()=>fn,FlowGraphBitwiseRightShiftBlock:()=>Fn,FlowGraphBitwiseXorBlock:()=>An,FlowGraphCeilBlock:()=>x,FlowGraphClampBlock:()=>B,FlowGraphCosBlock:()=>Tn,FlowGraphCoshBlock:()=>In,FlowGraphCubeRootBlock:()=>rn,FlowGraphDegToRadBlock:()=>N,FlowGraphDivideBlock:()=>C,FlowGraphEBlock:()=>r,FlowGraphEqualityBlock:()=>R,FlowGraphExpBlock:()=>Hn,FlowGraphFloorBlock:()=>m,FlowGraphFractionBlock:()=>U,FlowGraphGreaterThanBlock:()=>p,FlowGraphGreaterThanOrEqualBlock:()=>a,FlowGraphInfBlock:()=>O,FlowGraphIsInfinityBlock:()=>y,FlowGraphIsNanBlock:()=>X,FlowGraphLeadingZerosBlock:()=>mn,FlowGraphLessThanBlock:()=>h,FlowGraphLessThanOrEqualBlock:()=>j,FlowGraphLog10Block:()=>Cn,FlowGraphLog2Block:()=>bn,FlowGraphLogBlock:()=>sn,FlowGraphMathInterpolationBlock:()=>D,FlowGraphMaxBlock:()=>d,FlowGraphMinBlock:()=>e,FlowGraphModuloBlock:()=>Z,FlowGraphMultiplyBlock:()=>b,FlowGraphNaNBlock:()=>u,FlowGraphNegationBlock:()=>V,FlowGraphOneBitsCounterBlock:()=>gn,FlowGraphPiBlock:()=>q,FlowGraphPowerBlock:()=>qn,FlowGraphRadToDegBlock:()=>nn,FlowGraphRandomBlock:()=>z,FlowGraphRoundBlock:()=>g,FlowGraphSaturateBlock:()=>M,FlowGraphSignBlock:()=>v,FlowGraphSinBlock:()=>kn,FlowGraphSinhBlock:()=>En,FlowGraphSquareRootBlock:()=>zn,FlowGraphSubtractBlock:()=>s,FlowGraphTanBlock:()=>cn,FlowGraphTanhBlock:()=>Sn,FlowGraphTrailingZerosBlock:()=>xn,FlowGraphTruncBlock:()=>F});var c=T(675),K=T(12831),Q=T(14044),G=T(14053);class w extends G.b{constructor(n,k,T,c){super(n,c),this._operation=k,this._className=T}_doOperation(n){return this._operation(n)}getClassName(){return this._className}}var E=T(730),I=T(14055);class S extends G.b{constructor(n,k,T,c,K,Q,G){super(c,G),this._operation=K,this._className=Q,this.a=this.registerDataInput("a",n),this.b=this.registerDataInput("b",k),this.c=this.registerDataInput("c",T)}_doOperation(n){return this._operation(this.a.getValue(n),this.b.getValue(n),this.c.getValue(n))}getClassName(){return this._className}}var P=T(12829),W=T(12836),J=T(12861);class H extends Q.e{constructor(n){super((0,K.L)(null===n||void 0===n?void 0:n.type),(0,K.L)(null===n||void 0===n?void 0:n.type),(0,K.L)(null===n||void 0===n?void 0:n.type),((n,k)=>this._polymorphicAdd(n,k)),"FlowGraphAddBlock",n)}_polymorphicAdd(n,k){const T=(0,J.m)(n),c=(0,J.m)(k);if((0,J.k)(T,c)||(0,J.h)(T,c)||(0,J.e)(T,c))return n.add(k);if("Quaternion"===T||"Vector4"===c)return new E.p(n.x,n.y,n.z,n.w).addInPlace(k);if("Vector4"===T||"Quaternion"===c)return n.add(k);var K;if(null!==(K=this.config)&&void 0!==K&&K.preventIntegerFloatArithmetic&&typeof n!==typeof k)throw new Error("Cannot add different types of numbers.");return(0,J.r)(n)+(0,J.r)(k)}}(0,c.f)("FlowGraphAddBlock",H);class s extends Q.e{constructor(n){super((0,K.L)(null===n||void 0===n?void 0:n.type),(0,K.L)(null===n||void 0===n?void 0:n.type),(0,K.L)(null===n||void 0===n?void 0:n.type),((n,k)=>this._polymorphicSubtract(n,k)),"FlowGraphSubtractBlock",n)}_polymorphicSubtract(n,k){const T=(0,J.m)(n),c=(0,J.m)(k);if((0,J.k)(T,c)||(0,J.e)(T,c)||(0,J.h)(T,c))return n.Fg(k);if("Quaternion"===T||"Vector4"===c)return new E.p(n.x,n.y,n.z,n.w).Oi(k);if("Vector4"===T||"Quaternion"===c)return n.Fg(k);var K;if(null!==(K=this.config)&&void 0!==K&&K.preventIntegerFloatArithmetic&&typeof n!==typeof k)throw new Error("Cannot add different types of numbers.");return(0,J.r)(n)-(0,J.r)(k)}}(0,c.f)("FlowGraphSubtractBlock",s);class b extends Q.e{constructor(n){super((0,K.L)(null===n||void 0===n?void 0:n.type),(0,K.L)(null===n||void 0===n?void 0:n.type),(0,K.L)(null===n||void 0===n?void 0:n.type),((n,k)=>this._polymorphicMultiply(n,k)),"FlowGraphMultiplyBlock",n)}_polymorphicMultiply(n,k){const T=(0,J.m)(n),c=(0,J.m)(k);if((0,J.k)(T,c)||(0,J.e)(T,c))return n.multiply(k);if("Quaternion"===T||"Vector4"===c)return new E.p(n.x,n.y,n.z,n.w).multiplyInPlace(k);if("Vector4"===T||"Quaternion"===c)return n.multiply(k);if((0,J.h)(T,c)){var K;if(null!==(K=this.config)&&void 0!==K&&K.useMatrixPerComponent){const c=n.m;for(let n=0;n<c.length;n++)c[n]*=k.m[n];return"Matrix2D"===T?new W.e(c):"Matrix3D"===T?new W.h(c):E.d.ji(c)}return k.multiply(n)}var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.preventIntegerFloatArithmetic&&typeof n!==typeof k)throw new Error("Cannot add different types of numbers.");return(0,J.r)(n)*(0,J.r)(k)}}(0,c.f)("FlowGraphMultiplyBlock",b);class C extends Q.e{constructor(n){super((0,K.L)(null===n||void 0===n?void 0:n.type),(0,K.L)(null===n||void 0===n?void 0:n.type),(0,K.L)(null===n||void 0===n?void 0:n.type),((n,k)=>this._polymorphicDivide(n,k)),"FlowGraphDivideBlock",n)}_polymorphicDivide(n,k){const T=(0,J.m)(n),c=(0,J.m)(k);if((0,J.k)(T,c)||(0,J.e)(T,c))return n.divide(k);if("Quaternion"===T||"Quaternion"===c){const T=n.clone();return T.x/=k.x,T.y/=k.y,T.z/=k.z,T.w/=k.w,T}if("Quaternion"===T||"Vector4"===c)return new E.p(n.x,n.y,n.z,n.w).divideInPlace(k);if("Vector4"===T||"Quaternion"===c)return n.divide(k);if((0,J.h)(T,c)){var K;if(null!==(K=this.config)&&void 0!==K&&K.useMatrixPerComponent){const c=n.m;for(let n=0;n<c.length;n++)c[n]/=k.m[n];return"Matrix2D"===T?new W.e(c):"Matrix3D"===T?new W.h(c):E.d.ji(c)}return n.divide(k)}var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.preventIntegerFloatArithmetic&&typeof n!==typeof k)throw new Error("Cannot add different types of numbers.");return(0,J.r)(n)/(0,J.r)(k)}}(0,c.f)("FlowGraphDivideBlock",C);class z extends w{constructor(n){super(K.w,(n=>this._random(n)),"FlowGraphRandomBlock",n),this.min=this.registerDataInput("min",K.w,(null===n||void 0===n?void 0:n.min)??0),this.max=this.registerDataInput("max",K.w,(null===n||void 0===n?void 0:n.max)??1),null!==n&&void 0!==n&&n.seed&&(this._seed=n.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const n=1e4*Math.sin(this._seed++);return n-Math.floor(n)}return Math.random()}_random(n){const k=this.min.getValue(n),T=this.max.getValue(n);return this._getRandomValue()*(T-k)+k}}(0,c.f)("FlowGraphRandomBlock",z);class r extends w{constructor(n){super(K.w,(()=>Math.E),"FlowGraphEBlock",n)}}(0,c.f)("FlowGraphEBlock",r);class q extends w{constructor(n){super(K.w,(()=>Math.PI),"FlowGraphPIBlock",n)}}(0,c.f)("FlowGraphPIBlock",q);class O extends w{constructor(n){super(K.w,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",n)}}(0,c.f)("FlowGraphInfBlock",O);class u extends w{constructor(n){super(K.w,(()=>Number.NaN),"FlowGraphNaNBlock",n)}}function f(n,k){switch((0,J.m)(n)){case"FlowGraphInteger":return new P.d(k(n.value));case"Vector2":return new E.m(k(n.x),k(n.y));case"li":return new E.o(k(n.x),k(n.y),k(n.z));case"Vector4":return new E.p(k(n.x),k(n.y),k(n.z),k(n.w));case"Quaternion":return new E.h(k(n.x),k(n.y),k(n.z),k(n.w));case"Matrix":return E.d.ji(n.m.map(k));case"Matrix2D":return new W.e(n.m.map(k));case"Matrix3D":return new W.h(n.m.map(k));default:return k(n)}}(0,c.f)("FlowGraphNaNBlock",u);class A extends I.c{constructor(n){super(K.w,K.w,(n=>this._polymorphicAbs(n)),"FlowGraphAbsBlock",n)}_polymorphicAbs(n){return f(n,Math.abs)}}(0,c.f)("FlowGraphAbsBlock",A);class v extends I.c{constructor(n){super(K.w,K.w,(n=>this._polymorphicSign(n)),"FlowGraphSignBlock",n)}_polymorphicSign(n){return f(n,Math.sign)}}(0,c.f)("FlowGraphSignBlock",v);class F extends I.c{constructor(n){super(K.w,K.w,(n=>this._polymorphicTrunc(n)),"FlowGraphTruncBlock",n)}_polymorphicTrunc(n){return f(n,Math.trunc)}}(0,c.f)("FlowGraphTruncBlock",F);class m extends I.c{constructor(n){super(K.w,K.w,(n=>this._polymorphicFloor(n)),"FlowGraphFloorBlock",n)}_polymorphicFloor(n){return f(n,Math.floor)}}(0,c.f)("FlowGraphFloorBlock",m);class x extends I.c{constructor(n){super(K.e,K.e,(n=>this._polymorphicCeiling(n)),"FlowGraphCeilBlock",n)}_polymorphicCeiling(n){return f(n,Math.ceil)}}(0,c.f)("FlowGraphCeilBlock",x);class g extends I.c{constructor(n){super(K.e,K.e,(n=>this._polymorphicRound(n)),"FlowGraphRoundBlock",n)}_polymorphicRound(n){return f(n,(n=>{var k;return n<0&&null!==(k=this.config)&&void 0!==k&&k.roundHalfAwayFromZero?-Math.round(-n):Math.round(n)}))}}(0,c.f)("FlowGraphRoundBlock",g);class U extends I.c{constructor(n){super(K.e,K.e,(n=>this._polymorphicFraction(n)),"FlowGraphFractBlock",n)}_polymorphicFraction(n){return f(n,(n=>n-Math.floor(n)))}}(0,c.f)("FlowGraphFractBlock",U);class V extends I.c{constructor(n){super(K.e,K.e,(n=>this._polymorphicNeg(n)),"FlowGraphNegationBlock",n)}_polymorphicNeg(n){return f(n,(n=>-n))}}function Y(n,k,T){switch((0,J.m)(n)){case"FlowGraphInteger":return new P.d(T(n.value,k.value));case"Vector2":return new E.m(T(n.x,k.x),T(n.y,k.y));case"li":return new E.o(T(n.x,k.x),T(n.y,k.y),T(n.z,k.z));case"Vector4":return new E.p(T(n.x,k.x),T(n.y,k.y),T(n.z,k.z),T(n.w,k.w));case"Quaternion":return new E.h(T(n.x,k.x),T(n.y,k.y),T(n.z,k.z),T(n.w,k.w));case"Matrix":return E.d.ji(n.m.map(((n,c)=>T(n,k.m[c]))));case"Matrix2D":return new W.e(n.m.map(((n,c)=>T(n,k.m[c]))));case"Matrix3D":return new W.h(n.m.map(((n,c)=>T(n,k.m[c]))));default:return T((0,J.r)(n),(0,J.r)(k))}}(0,c.f)("FlowGraphNegationBlock",V);class Z extends Q.e{constructor(n){super(K.e,K.e,K.e,((n,k)=>this._polymorphicRemainder(n,k)),"FlowGraphModuloBlock",n)}_polymorphicRemainder(n,k){return Y(n,k,((n,k)=>n%k))}}(0,c.f)("FlowGraphModuloBlock",Z);class e extends Q.e{constructor(n){super(K.e,K.e,K.e,((n,k)=>this._polymorphicMin(n,k)),"FlowGraphMinBlock",n)}_polymorphicMin(n,k){return Y(n,k,Math.min)}}(0,c.f)("FlowGraphMinBlock",e);class d extends Q.e{constructor(n){super(K.e,K.e,K.e,((n,k)=>this._polymorphicMax(n,k)),"FlowGraphMaxBlock",n)}_polymorphicMax(n,k){return Y(n,k,Math.max)}}function l(n,k,T){return Math.min(Math.max(n,Math.min(k,T)),Math.max(k,T))}function i(n,k,T,c){switch((0,J.m)(n)){case"FlowGraphInteger":return new P.d(c(n.value,k.value,T.value));case"Vector2":return new E.m(c(n.x,k.x,T.x),c(n.y,k.y,T.y));case"li":return new E.o(c(n.x,k.x,T.x),c(n.y,k.y,T.y),c(n.z,k.z,T.z));case"Vector4":return new E.p(c(n.x,k.x,T.x),c(n.y,k.y,T.y),c(n.z,k.z,T.z),c(n.w,k.w,T.w));case"Quaternion":return new E.h(c(n.x,k.x,T.x),c(n.y,k.y,T.y),c(n.z,k.z,T.z),c(n.w,k.w,T.w));case"Matrix":return E.d.ji(n.m.map(((n,K)=>c(n,k.m[K],T.m[K]))));case"Matrix2D":return new W.e(n.m.map(((n,K)=>c(n,k.m[K],T.m[K]))));case"Matrix3D":return new W.h(n.m.map(((n,K)=>c(n,k.m[K],T.m[K]))));default:return c((0,J.r)(n),(0,J.r)(k),(0,J.r)(T))}}(0,c.f)("FlowGraphMaxBlock",d);class B extends S{constructor(n){super(K.e,K.e,K.e,K.e,((n,k,T)=>this._polymorphicClamp(n,k,T)),"FlowGraphClampBlock",n)}_polymorphicClamp(n,k,T){return i(n,k,T,l)}}function t(n){return Math.min(Math.max(n,0),1)}(0,c.f)("FlowGraphClampBlock",B);class M extends I.c{constructor(n){super(K.e,K.e,(n=>this._polymorphicSaturate(n)),"FlowGraphSaturateBlock",n)}_polymorphicSaturate(n){return f(n,t)}}function o(n,k,T){return(1-T)*n+T*k}(0,c.f)("FlowGraphSaturateBlock",M);class D extends S{constructor(n){super(K.e,K.e,K.e,K.e,((n,k,T)=>this._polymorphicInterpolate(n,k,T)),"FlowGraphMathInterpolationBlock",n)}_polymorphicInterpolate(n,k,T){return i(n,k,T,o)}}(0,c.f)("FlowGraphMathInterpolationBlock",D);class R extends Q.e{constructor(n){super(K.e,K.e,K.g,((n,k)=>this._polymorphicEq(n,k)),"FlowGraphEqualityBlock",n)}_polymorphicEq(n,k){const T=(0,J.m)(n),c=(0,J.m)(k);return typeof n===typeof k&&((0,J.k)(T,c)||(0,J.h)(T,c)||(0,J.e)(T,c)?n.equals(k):n===k)}}function L(n,k,T){if((0,J.u)(n)&&(0,J.u)(k))return T((0,J.r)(n),(0,J.r)(k));throw new Error(`Cannot compare ${n} and ${k}`)}(0,c.f)("FlowGraphEqualityBlock",R);class h extends Q.e{constructor(n){super(K.e,K.e,K.g,((n,k)=>this._polymorphicLessThan(n,k)),"FlowGraphLessThanBlock",n)}_polymorphicLessThan(n,k){return L(n,k,((n,k)=>n<k))}}(0,c.f)("FlowGraphLessThanBlock",h);class j extends Q.e{constructor(n){super(K.e,K.e,K.g,((n,k)=>this._polymorphicLessThanOrEqual(n,k)),"FlowGraphLessThanOrEqualBlock",n)}_polymorphicLessThanOrEqual(n,k){return L(n,k,((n,k)=>n<=k))}}(0,c.f)("FlowGraphLessThanOrEqualBlock",j);class p extends Q.e{constructor(n){super(K.e,K.e,K.g,((n,k)=>this._polymorphicGreaterThan(n,k)),"FlowGraphGreaterThanBlock",n)}_polymorphicGreaterThan(n,k){return L(n,k,((n,k)=>n>k))}}(0,c.f)("FlowGraphGreaterThanBlock",p);class a extends Q.e{constructor(n){super(K.e,K.e,K.g,((n,k)=>this._polymorphicGreaterThanOrEqual(n,k)),"FlowGraphGreaterThanOrEqualBlock",n)}_polymorphicGreaterThanOrEqual(n,k){return L(n,k,((n,k)=>n>=k))}}(0,c.f)("FlowGraphGreaterThanOrEqualBlock",a);class X extends I.c{constructor(n){super(K.e,K.g,(n=>this._polymorphicIsNan(n)),"FlowGraphIsNaNBlock",n)}_polymorphicIsNan(n){if((0,J.u)(n,!0))return isNaN((0,J.r)(n));throw new Error(`Cannot get NaN of ${n}`)}}(0,c.f)("FlowGraphIsNaNBlock",X);class y extends I.c{constructor(n){super(K.e,K.g,(n=>this._polymorphicIsInf(n)),"FlowGraphIsInfBlock",n)}_polymorphicIsInf(n){if((0,J.u)(n))return!isFinite((0,J.r)(n));throw new Error(`Cannot get isInf of ${n}`)}}(0,c.f)("FlowGraphIsInfBlock",y);class N extends I.c{constructor(n){super(K.e,K.e,(n=>this._polymorphicDegToRad(n)),"FlowGraphDegToRadBlock",n)}_degToRad(n){return n*Math.PI/180}_polymorphicDegToRad(n){return f(n,this._degToRad)}}(0,c.f)("FlowGraphDegToRadBlock",N);class nn extends I.c{constructor(n){super(K.e,K.e,(n=>this._polymorphicRadToDeg(n)),"FlowGraphRadToDegBlock",n)}_radToDeg(n){return 180*n/Math.PI}_polymorphicRadToDeg(n){return f(n,this._radToDeg)}}(0,c.f)("FlowGraphRadToDegBlock",nn);class kn extends I.c{constructor(n){super(K.w,K.w,(n=>this._polymorphicSin(n)),"FlowGraphSinBlock",n)}_polymorphicSin(n){return f(n,Math.sin)}}class Tn extends I.c{constructor(n){super(K.w,K.w,(n=>this._polymorphicCos(n)),"FlowGraphCosBlock",n)}_polymorphicCos(n){return f(n,Math.cos)}}class cn extends I.c{constructor(n){super(K.w,K.w,(n=>this._polymorphicTan(n)),"FlowGraphTanBlock",n)}_polymorphicTan(n){return f(n,Math.tan)}}class Kn extends I.c{constructor(n){super(K.w,K.w,(n=>this._polymorphicAsin(n)),"FlowGraphASinBlock",n)}_polymorphicAsin(n){return f(n,Math.asin)}}(0,c.f)("FlowGraphASinBlock",Kn);class Qn extends I.c{constructor(n){super(K.w,K.w,(n=>this._polymorphicAcos(n)),"FlowGraphACosBlock",n)}_polymorphicAcos(n){return f(n,Math.acos)}}(0,c.f)("FlowGraphACosBlock",Qn);class Gn extends I.c{constructor(n){super(K.w,K.w,(n=>this._polymorphicAtan(n)),"FlowGraphATanBlock",n)}_polymorphicAtan(n){return f(n,Math.atan)}}(0,c.f)("FlowGraphATanBlock",Gn);class wn extends Q.e{constructor(n){super(K.e,K.e,K.e,((n,k)=>this._polymorphicAtan2(n,k)),"FlowGraphATan2Block",n)}_polymorphicAtan2(n,k){return Y(n,k,Math.atan2)}}(0,c.f)("FlowGraphATan2Block",wn);class En extends I.c{constructor(n){super(K.e,K.e,(n=>this._polymorphicSinh(n)),"FlowGraphSinhBlock",n)}_polymorphicSinh(n){return f(n,Math.sinh)}}(0,c.f)("FlowGraphSinhBlock",En);class In extends I.c{constructor(n){super(K.e,K.e,(n=>this._polymorphicCosh(n)),"FlowGraphCoshBlock",n)}_polymorphicCosh(n){return f(n,Math.cosh)}}(0,c.f)("FlowGraphCoshBlock",In);class Sn extends I.c{constructor(n){super(K.e,K.e,(n=>this._polymorphicTanh(n)),"FlowGraphTanhBlock",n)}_polymorphicTanh(n){return f(n,Math.tanh)}}(0,c.f)("FlowGraphTanhBlock",Sn);class Pn extends I.c{constructor(n){super(K.e,K.w,(n=>this._polymorphicAsinh(n)),"FlowGraphASinhBlock",n)}_polymorphicAsinh(n){return f(n,Math.asinh)}}(0,c.f)("FlowGraphASinhBlock",Pn);class Wn extends I.c{constructor(n){super(K.e,K.w,(n=>this._polymorphicAcosh(n)),"FlowGraphACoshBlock",n)}_polymorphicAcosh(n){return f(n,Math.acosh)}}(0,c.f)("FlowGraphACoshBlock",Wn);class Jn extends I.c{constructor(n){super(K.e,K.w,(n=>this._polymorphicAtanh(n)),"FlowGraphATanhBlock",n)}_polymorphicAtanh(n){return f(n,Math.atanh)}}(0,c.f)("FlowGraphATanhBlock",Jn);class Hn extends I.c{constructor(n){super(K.e,K.w,(n=>this._polymorphicExp(n)),"FlowGraphExponentialBlock",n)}_polymorphicExp(n){return f(n,Math.exp)}}(0,c.f)("FlowGraphExponentialBlock",Hn);class sn extends I.c{constructor(n){super(K.e,K.w,(n=>this._polymorphicLog(n)),"FlowGraphLogBlock",n)}_polymorphicLog(n){return f(n,Math.log)}}(0,c.f)("FlowGraphLogBlock",sn);class bn extends I.c{constructor(n){super(K.e,K.w,(n=>this._polymorphicLog2(n)),"FlowGraphLog2Block",n)}_polymorphicLog2(n){return f(n,Math.log2)}}(0,c.f)("FlowGraphLog2Block",bn);class Cn extends I.c{constructor(n){super(K.e,K.w,(n=>this._polymorphicLog10(n)),"FlowGraphLog10Block",n)}_polymorphicLog10(n){return f(n,Math.log10)}}(0,c.f)("FlowGraphLog10Block",Cn);class zn extends I.c{constructor(n){super(K.e,K.w,(n=>this._polymorphicSqrt(n)),"FlowGraphSquareRootBlock",n)}_polymorphicSqrt(n){return f(n,Math.sqrt)}}(0,c.f)("FlowGraphSquareRootBlock",zn);class rn extends I.c{constructor(n){super(K.e,K.w,(n=>this._polymorphicCubeRoot(n)),"FlowGraphCubeRootBlock",n)}_polymorphicCubeRoot(n){return f(n,Math.cbrt)}}(0,c.f)("FlowGraphCubeRootBlock",rn);class qn extends Q.e{constructor(n){super(K.e,K.w,K.w,((n,k)=>this._polymorphicPow(n,k)),"FlowGraphPowerBlock",n)}_polymorphicPow(n,k){return Y(n,k,Math.pow)}}(0,c.f)("FlowGraphPowerBlock",qn);class On extends I.c{constructor(n){super((0,K.L)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),(0,K.L)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),(n=>"boolean"===typeof n?!n:"number"===typeof n?~n:new P.d(~n.value)),"FlowGraphBitwiseNotBlock",n)}}(0,c.f)("FlowGraphBitwiseNotBlock",On);class un extends Q.e{constructor(n){super((0,K.L)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),(0,K.L)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),(0,K.L)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),((n,k)=>{if("boolean"===typeof n&&"boolean"===typeof k)return n&&k;if("number"===typeof n&&"number"===typeof k)return n&k;if("object"===typeof n&&"object"===typeof k)return new P.d(n.value&k.value);throw new Error(`Cannot perform bitwise AND on ${n} and ${k}`)}),"FlowGraphBitwiseAndBlock",n)}}(0,c.f)("FlowGraphBitwiseAndBlock",un);class fn extends Q.e{constructor(n){super((0,K.L)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),(0,K.L)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),(0,K.L)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),((n,k)=>{if("boolean"===typeof n&&"boolean"===typeof k)return n||k;if("number"===typeof n&&"number"===typeof k)return n|k;if("object"===typeof n&&"object"===typeof k)return new P.d(n.value|k.value);throw new Error(`Cannot perform bitwise OR on ${n} and ${k}`)}),"FlowGraphBitwiseOrBlock",n)}}(0,c.f)("FlowGraphBitwiseOrBlock",fn);class An extends Q.e{constructor(n){super((0,K.L)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),(0,K.L)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),(0,K.L)((null===n||void 0===n?void 0:n.valueType)||"FlowGraphInteger"),((n,k)=>{if("boolean"===typeof n&&"boolean"===typeof k)return n!==k;if("number"===typeof n&&"number"===typeof k)return n^k;if("object"===typeof n&&"object"===typeof k)return new P.d(n.value^k.value);throw new Error(`Cannot perform bitwise XOR on ${n} and ${k}`)}),"FlowGraphBitwiseXorBlock",n)}}(0,c.f)("FlowGraphBitwiseXorBlock",An);class vn extends Q.e{constructor(n){super(K.j,K.j,K.j,((n,k)=>new P.d(n.value<<k.value)),"FlowGraphBitwiseLeftShiftBlock",n)}}(0,c.f)("FlowGraphBitwiseLeftShiftBlock",vn);class Fn extends Q.e{constructor(n){super(K.j,K.j,K.j,((n,k)=>new P.d(n.value>>k.value)),"FlowGraphBitwiseRightShiftBlock",n)}}(0,c.f)("FlowGraphBitwiseRightShiftBlock",Fn);class mn extends I.c{constructor(n){super(K.j,K.j,(n=>new P.d(Math.clz32(n.value))),"FlowGraphLeadingZerosBlock",n)}}(0,c.f)("FlowGraphLeadingZerosBlock",mn);class xn extends I.c{constructor(n){super(K.j,K.j,(n=>new P.d(n.value?31-Math.clz32(n.value&-n.value):32)),"FlowGraphTrailingZerosBlock",n)}}(0,c.f)("FlowGraphTrailingZerosBlock",xn);class gn extends I.c{constructor(n){super(K.j,K.j,(n=>new P.d(function(n){let k=0;for(;n;)k+=1&n,n>>=1;return k}(n.value))),"FlowGraphOneBitsCounterBlock",n)}}(0,c.f)("FlowGraphOneBitsCounterBlock",gn)},14044:(n,k,T)=>{T.d(k,{e:()=>K});var c=T(14053);class K extends c.b{constructor(n,k,T,c,K,Q){super(T,Q),this._operation=c,this._className=K,this.a=this.registerDataInput("a",n),this.b=this.registerDataInput("b",k)}_doOperation(n){const k=this.a.getValue(n),T=this.b.getValue(n);return this._operation(k,T)}getClassName(){return this._className}}},14053:(n,k,T)=>{T.d(k,{b:()=>w});var c=T(12845),K=T(12831);const Q="cachedOperationValue",G="cachedExecutionId";class w extends c.b{constructor(n,k){super(k),this.value=this.registerDataOutput("value",n),this.isValid=this.registerDataOutput("isValid",K.g)}_updateOutputs(n){const k=n._getExecutionVariable(this,G,-1),T=n._getExecutionVariable(this,Q,null);if(void 0!==T&&null!==T&&k===n.executionId)this.isValid.setValue(!0,n),this.value.setValue(T,n);else try{const k=this._doOperation(n);if(void 0===k||null===k)return void this.isValid.setValue(!1,n);n._setExecutionVariable(this,Q,k),n._setExecutionVariable(this,G,n.executionId),this.value.setValue(k,n),this.isValid.setValue(!0,n)}catch(c){this.isValid.setValue(!1,n)}}}},14055:(n,k,T)=>{T.d(k,{c:()=>K});var c=T(14053);class K extends c.b{constructor(n,k,T,c,K){super(k,K),this._operation=T,this._className=c,this.a=this.registerDataInput("a",n)}_doOperation(n){return this._operation(this.a.getValue(n))}getClassName(){return this._className}}}}]);