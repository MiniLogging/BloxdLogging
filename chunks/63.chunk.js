"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[63],{13853:(J,T,b)=>{b.r(T),b.d(T,{FlowGraphAbsBlock:()=>o,FlowGraphAcosBlock:()=>jJ,FlowGraphAcoshBlock:()=>PJ,FlowGraphAddBlock:()=>G,FlowGraphAsinBlock:()=>tJ,FlowGraphAsinhBlock:()=>aJ,FlowGraphAtan2Block:()=>YJ,FlowGraphAtanBlock:()=>BJ,FlowGraphAtanhBlock:()=>vJ,FlowGraphBitwiseAndBlock:()=>WJ,FlowGraphBitwiseLeftShiftBlock:()=>SJ,FlowGraphBitwiseNotBlock:()=>lJ,FlowGraphBitwiseOrBlock:()=>pJ,FlowGraphBitwiseRightShiftBlock:()=>HJ,FlowGraphBitwiseXorBlock:()=>oJ,FlowGraphCeilBlock:()=>g,FlowGraphClampBlock:()=>m,FlowGraphCosBlock:()=>bJ,FlowGraphCoshBlock:()=>FJ,FlowGraphCubeRootBlock:()=>KJ,FlowGraphDegToRadBlock:()=>k,FlowGraphDivideBlock:()=>u,FlowGraphEBlock:()=>K,FlowGraphEqualityBlock:()=>N,FlowGraphExpBlock:()=>GJ,FlowGraphFloorBlock:()=>s,FlowGraphFractionBlock:()=>w,FlowGraphGreaterThanBlock:()=>f,FlowGraphGreaterThanOrEqualBlock:()=>z,FlowGraphInfBlock:()=>l,FlowGraphIsInfinityBlock:()=>y,FlowGraphIsNanBlock:()=>M,FlowGraphLeadingZerosBlock:()=>sJ,FlowGraphLessThanBlock:()=>n,FlowGraphLessThanOrEqualBlock:()=>D,FlowGraphLog10Block:()=>uJ,FlowGraphLog2Block:()=>IJ,FlowGraphLogBlock:()=>xJ,FlowGraphMathInterpolationBlock:()=>r,FlowGraphMaxBlock:()=>Q,FlowGraphMinBlock:()=>V,FlowGraphModuloBlock:()=>c,FlowGraphMultiplyBlock:()=>I,FlowGraphNaNBlock:()=>W,FlowGraphNegationBlock:()=>Z,FlowGraphOneBitsCounterBlock:()=>dJ,FlowGraphPiBlock:()=>E,FlowGraphPowerBlock:()=>EJ,FlowGraphRadToDegBlock:()=>JJ,FlowGraphRandomBlock:()=>U,FlowGraphRoundBlock:()=>d,FlowGraphSaturateBlock:()=>X,FlowGraphSignBlock:()=>S,FlowGraphSinBlock:()=>TJ,FlowGraphSinhBlock:()=>CJ,FlowGraphSquareRootBlock:()=>UJ,FlowGraphSubtractBlock:()=>x,FlowGraphTanBlock:()=>qJ,FlowGraphTanhBlock:()=>AJ,FlowGraphTrailingZerosBlock:()=>gJ,FlowGraphTruncBlock:()=>H});var q=b(639),t=b(12603),j=b(13861),B=b(13865);class Y extends B.c{constructor(J,T,b,q){super(J,q),this._operation=T,this._className=b}_doOperation(J){return this._operation(J)}getClassName(){return this._className}}var C=b(697),F=b(13872);class A extends B.c{constructor(J,T,b,q,t,j,B){super(q,B),this._operation=t,this._className=j,this.a=this.registerDataInput("a",J),this.b=this.registerDataInput("b",T),this.c=this.registerDataInput("c",b)}_doOperation(J){return this._operation(this.a.getValue(J),this.b.getValue(J),this.c.getValue(J))}getClassName(){return this._className}}var a=b(12598),P=b(12606),v=b(12633);class G extends j.d{constructor(J){super((0,t.O)(null===J||void 0===J?void 0:J.type),(0,t.O)(null===J||void 0===J?void 0:J.type),(0,t.O)(null===J||void 0===J?void 0:J.type),((J,T)=>this._polymorphicAdd(J,T)),"FlowGraphAddBlock",J)}_polymorphicAdd(J,T){const b=(0,v.k)(J),q=(0,v.k)(T);if((0,v.i)(b,q)||(0,v.h)(b,q)||(0,v.e)(b,q))return J.add(T);if("Quaternion"===b||"Vector4"===q)return new C.p(J.x,J.y,J.z,J.w).addInPlace(T);if("Vector4"===b||"Quaternion"===q)return J.add(T);var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof J!==typeof T)throw new Error("Cannot add different types of numbers.");return(0,v.p)(J)+(0,v.p)(T)}}(0,q.g)("FlowGraphAddBlock",G);class x extends j.d{constructor(J){super((0,t.O)(null===J||void 0===J?void 0:J.type),(0,t.O)(null===J||void 0===J?void 0:J.type),(0,t.O)(null===J||void 0===J?void 0:J.type),((J,T)=>this._polymorphicSubtract(J,T)),"FlowGraphSubtractBlock",J)}_polymorphicSubtract(J,T){const b=(0,v.k)(J),q=(0,v.k)(T);if((0,v.i)(b,q)||(0,v.e)(b,q)||(0,v.h)(b,q))return J.Jg(T);if("Quaternion"===b||"Vector4"===q)return new C.p(J.x,J.y,J.z,J.w).Si(T);if("Vector4"===b||"Quaternion"===q)return J.Jg(T);var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof J!==typeof T)throw new Error("Cannot add different types of numbers.");return(0,v.p)(J)-(0,v.p)(T)}}(0,q.g)("FlowGraphSubtractBlock",x);class I extends j.d{constructor(J){super((0,t.O)(null===J||void 0===J?void 0:J.type),(0,t.O)(null===J||void 0===J?void 0:J.type),(0,t.O)(null===J||void 0===J?void 0:J.type),((J,T)=>this._polymorphicMultiply(J,T)),"FlowGraphMultiplyBlock",J)}_polymorphicMultiply(J,T){const b=(0,v.k)(J),q=(0,v.k)(T);if((0,v.i)(b,q)||(0,v.e)(b,q))return J.multiply(T);if("Quaternion"===b||"Vector4"===q)return new C.p(J.x,J.y,J.z,J.w).multiplyInPlace(T);if("Vector4"===b||"Quaternion"===q)return J.multiply(T);if((0,v.h)(b,q)){var t;if(null!==(t=this.config)&&void 0!==t&&t.useMatrixPerComponent){const q=J.m;for(let J=0;J<q.length;J++)q[J]*=T.m[J];return"Matrix2D"===b?new P.b(q):"Matrix3D"===b?new P.f(q):C.e.ni(q)}return T.multiply(J)}var j;if(null!==(j=this.config)&&void 0!==j&&j.preventIntegerFloatArithmetic&&typeof J!==typeof T)throw new Error("Cannot add different types of numbers.");return(0,v.p)(J)*(0,v.p)(T)}}(0,q.g)("FlowGraphMultiplyBlock",I);class u extends j.d{constructor(J){super((0,t.O)(null===J||void 0===J?void 0:J.type),(0,t.O)(null===J||void 0===J?void 0:J.type),(0,t.O)(null===J||void 0===J?void 0:J.type),((J,T)=>this._polymorphicDivide(J,T)),"FlowGraphDivideBlock",J)}_polymorphicDivide(J,T){const b=(0,v.k)(J),q=(0,v.k)(T);if((0,v.i)(b,q)||(0,v.e)(b,q))return J.divide(T);if("Quaternion"===b||"Quaternion"===q){const b=J.clone();return b.x/=T.x,b.y/=T.y,b.z/=T.z,b.w/=T.w,b}if("Quaternion"===b||"Vector4"===q)return new C.p(J.x,J.y,J.z,J.w).divideInPlace(T);if("Vector4"===b||"Quaternion"===q)return J.divide(T);if((0,v.h)(b,q)){var t;if(null!==(t=this.config)&&void 0!==t&&t.useMatrixPerComponent){const q=J.m;for(let J=0;J<q.length;J++)q[J]/=T.m[J];return"Matrix2D"===b?new P.b(q):"Matrix3D"===b?new P.f(q):C.e.ni(q)}return J.divide(T)}var j;if(null!==(j=this.config)&&void 0!==j&&j.preventIntegerFloatArithmetic&&typeof J!==typeof T)throw new Error("Cannot add different types of numbers.");return(0,v.p)(J)/(0,v.p)(T)}}(0,q.g)("FlowGraphDivideBlock",u);class U extends Y{constructor(J){super(t.r,(J=>this._random(J)),"FlowGraphRandomBlock",J),this.min=this.registerDataInput("min",t.r,(null===J||void 0===J?void 0:J.min)??0),this.max=this.registerDataInput("max",t.r,(null===J||void 0===J?void 0:J.max)??1),null!==J&&void 0!==J&&J.seed&&(this._seed=J.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const J=1e4*Math.sin(this._seed++);return J-Math.floor(J)}return Math.random()}_random(J){const T=this.min.getValue(J),b=this.max.getValue(J);return this._getRandomValue()*(b-T)+T}}(0,q.g)("FlowGraphRandomBlock",U);class K extends Y{constructor(J){super(t.r,(()=>Math.E),"FlowGraphEBlock",J)}}(0,q.g)("FlowGraphEBlock",K);class E extends Y{constructor(J){super(t.r,(()=>Math.PI),"FlowGraphPIBlock",J)}}(0,q.g)("FlowGraphPIBlock",E);class l extends Y{constructor(J){super(t.r,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",J)}}(0,q.g)("FlowGraphInfBlock",l);class W extends Y{constructor(J){super(t.r,(()=>Number.NaN),"FlowGraphNaNBlock",J)}}function p(J,T){switch((0,v.k)(J)){case"FlowGraphInteger":return new a.e(T(J.value));case"Vector2":return new C.k(T(J.x),T(J.y));case"pi":return new C.n(T(J.x),T(J.y),T(J.z));case"Vector4":return new C.p(T(J.x),T(J.y),T(J.z),T(J.w));case"Quaternion":return new C.h(T(J.x),T(J.y),T(J.z),T(J.w));case"Matrix":return C.e.ni(J.m.map(T));case"Matrix2D":return new P.b(J.m.map(T));case"Matrix3D":return new P.f(J.m.map(T));default:return T(J)}}(0,q.g)("FlowGraphNaNBlock",W);class o extends F.d{constructor(J){super(t.r,t.r,(J=>this._polymorphicAbs(J)),"FlowGraphAbsBlock",J)}_polymorphicAbs(J){return p(J,Math.abs)}}(0,q.g)("FlowGraphAbsBlock",o);class S extends F.d{constructor(J){super(t.r,t.r,(J=>this._polymorphicSign(J)),"FlowGraphSignBlock",J)}_polymorphicSign(J){return p(J,Math.sign)}}(0,q.g)("FlowGraphSignBlock",S);class H extends F.d{constructor(J){super(t.r,t.r,(J=>this._polymorphicTrunc(J)),"FlowGraphTruncBlock",J)}_polymorphicTrunc(J){return p(J,Math.trunc)}}(0,q.g)("FlowGraphTruncBlock",H);class s extends F.d{constructor(J){super(t.r,t.r,(J=>this._polymorphicFloor(J)),"FlowGraphFloorBlock",J)}_polymorphicFloor(J){return p(J,Math.floor)}}(0,q.g)("FlowGraphFloorBlock",s);class g extends F.d{constructor(J){super(t.c,t.c,(J=>this._polymorphicCeiling(J)),"FlowGraphCeilBlock",J)}_polymorphicCeiling(J){return p(J,Math.ceil)}}(0,q.g)("FlowGraphCeilBlock",g);class d extends F.d{constructor(J){super(t.c,t.c,(J=>this._polymorphicRound(J)),"FlowGraphRoundBlock",J)}_polymorphicRound(J){return p(J,(J=>{var T;return J<0&&null!==(T=this.config)&&void 0!==T&&T.roundHalfAwayFromZero?-Math.round(-J):Math.round(J)}))}}(0,q.g)("FlowGraphRoundBlock",d);class w extends F.d{constructor(J){super(t.c,t.c,(J=>this._polymorphicFraction(J)),"FlowGraphFractBlock",J)}_polymorphicFraction(J){return p(J,(J=>J-Math.floor(J)))}}(0,q.g)("FlowGraphFractBlock",w);class Z extends F.d{constructor(J){super(t.c,t.c,(J=>this._polymorphicNeg(J)),"FlowGraphNegationBlock",J)}_polymorphicNeg(J){return p(J,(J=>-J))}}function e(J,T,b){switch((0,v.k)(J)){case"FlowGraphInteger":return new a.e(b(J.value,T.value));case"Vector2":return new C.k(b(J.x,T.x),b(J.y,T.y));case"pi":return new C.n(b(J.x,T.x),b(J.y,T.y),b(J.z,T.z));case"Vector4":return new C.p(b(J.x,T.x),b(J.y,T.y),b(J.z,T.z),b(J.w,T.w));case"Quaternion":return new C.h(b(J.x,T.x),b(J.y,T.y),b(J.z,T.z),b(J.w,T.w));case"Matrix":return C.e.ni(J.m.map(((J,q)=>b(J,T.m[q]))));case"Matrix2D":return new P.b(J.m.map(((J,q)=>b(J,T.m[q]))));case"Matrix3D":return new P.f(J.m.map(((J,q)=>b(J,T.m[q]))));default:return b((0,v.p)(J),(0,v.p)(T))}}(0,q.g)("FlowGraphNegationBlock",Z);class c extends j.d{constructor(J){super(t.c,t.c,t.c,((J,T)=>this._polymorphicRemainder(J,T)),"FlowGraphModuloBlock",J)}_polymorphicRemainder(J,T){return e(J,T,((J,T)=>J%T))}}(0,q.g)("FlowGraphModuloBlock",c);class V extends j.d{constructor(J){super(t.c,t.c,t.c,((J,T)=>this._polymorphicMin(J,T)),"FlowGraphMinBlock",J)}_polymorphicMin(J,T){return e(J,T,Math.min)}}(0,q.g)("FlowGraphMinBlock",V);class Q extends j.d{constructor(J){super(t.c,t.c,t.c,((J,T)=>this._polymorphicMax(J,T)),"FlowGraphMaxBlock",J)}_polymorphicMax(J,T){return e(J,T,Math.max)}}function h(J,T,b){return Math.min(Math.max(J,Math.min(T,b)),Math.max(T,b))}function i(J,T,b,q){switch((0,v.k)(J)){case"FlowGraphInteger":return new a.e(q(J.value,T.value,b.value));case"Vector2":return new C.k(q(J.x,T.x,b.x),q(J.y,T.y,b.y));case"pi":return new C.n(q(J.x,T.x,b.x),q(J.y,T.y,b.y),q(J.z,T.z,b.z));case"Vector4":return new C.p(q(J.x,T.x,b.x),q(J.y,T.y,b.y),q(J.z,T.z,b.z),q(J.w,T.w,b.w));case"Quaternion":return new C.h(q(J.x,T.x,b.x),q(J.y,T.y,b.y),q(J.z,T.z,b.z),q(J.w,T.w,b.w));case"Matrix":return C.e.ni(J.m.map(((J,t)=>q(J,T.m[t],b.m[t]))));case"Matrix2D":return new P.b(J.m.map(((J,t)=>q(J,T.m[t],b.m[t]))));case"Matrix3D":return new P.f(J.m.map(((J,t)=>q(J,T.m[t],b.m[t]))));default:return q((0,v.p)(J),(0,v.p)(T),(0,v.p)(b))}}(0,q.g)("FlowGraphMaxBlock",Q);class m extends A{constructor(J){super(t.c,t.c,t.c,t.c,((J,T,b)=>this._polymorphicClamp(J,T,b)),"FlowGraphClampBlock",J)}_polymorphicClamp(J,T,b){return i(J,T,b,h)}}function O(J){return Math.min(Math.max(J,0),1)}(0,q.g)("FlowGraphClampBlock",m);class X extends F.d{constructor(J){super(t.c,t.c,(J=>this._polymorphicSaturate(J)),"FlowGraphSaturateBlock",J)}_polymorphicSaturate(J){return p(J,O)}}function L(J,T,b){return(1-b)*J+b*T}(0,q.g)("FlowGraphSaturateBlock",X);class r extends A{constructor(J){super(t.c,t.c,t.c,t.c,((J,T,b)=>this._polymorphicInterpolate(J,T,b)),"FlowGraphMathInterpolationBlock",J)}_polymorphicInterpolate(J,T,b){return i(J,T,b,L)}}(0,q.g)("FlowGraphMathInterpolationBlock",r);class N extends j.d{constructor(J){super(t.c,t.c,t.e,((J,T)=>this._polymorphicEq(J,T)),"FlowGraphEqualityBlock",J)}_polymorphicEq(J,T){const b=(0,v.k)(J),q=(0,v.k)(T);return typeof J===typeof T&&((0,v.i)(b,q)||(0,v.h)(b,q)||(0,v.e)(b,q)?J.equals(T):J===T)}}function R(J,T,b){if((0,v.s)(J)&&(0,v.s)(T))return b((0,v.p)(J),(0,v.p)(T));throw new Error(`Cannot compare ${J} and ${T}`)}(0,q.g)("FlowGraphEqualityBlock",N);class n extends j.d{constructor(J){super(t.c,t.c,t.e,((J,T)=>this._polymorphicLessThan(J,T)),"FlowGraphLessThanBlock",J)}_polymorphicLessThan(J,T){return R(J,T,((J,T)=>J<T))}}(0,q.g)("FlowGraphLessThanBlock",n);class D extends j.d{constructor(J){super(t.c,t.c,t.e,((J,T)=>this._polymorphicLessThanOrEqual(J,T)),"FlowGraphLessThanOrEqualBlock",J)}_polymorphicLessThanOrEqual(J,T){return R(J,T,((J,T)=>J<=T))}}(0,q.g)("FlowGraphLessThanOrEqualBlock",D);class f extends j.d{constructor(J){super(t.c,t.c,t.e,((J,T)=>this._polymorphicGreaterThan(J,T)),"FlowGraphGreaterThanBlock",J)}_polymorphicGreaterThan(J,T){return R(J,T,((J,T)=>J>T))}}(0,q.g)("FlowGraphGreaterThanBlock",f);class z extends j.d{constructor(J){super(t.c,t.c,t.e,((J,T)=>this._polymorphicGreaterThanOrEqual(J,T)),"FlowGraphGreaterThanOrEqualBlock",J)}_polymorphicGreaterThanOrEqual(J,T){return R(J,T,((J,T)=>J>=T))}}(0,q.g)("FlowGraphGreaterThanOrEqualBlock",z);class M extends F.d{constructor(J){super(t.c,t.e,(J=>this._polymorphicIsNan(J)),"FlowGraphIsNaNBlock",J)}_polymorphicIsNan(J){if((0,v.s)(J,!0))return isNaN((0,v.p)(J));throw new Error(`Cannot get NaN of ${J}`)}}(0,q.g)("FlowGraphIsNaNBlock",M);class y extends F.d{constructor(J){super(t.c,t.e,(J=>this._polymorphicIsInf(J)),"FlowGraphIsInfBlock",J)}_polymorphicIsInf(J){if((0,v.s)(J))return!isFinite((0,v.p)(J));throw new Error(`Cannot get isInf of ${J}`)}}(0,q.g)("FlowGraphIsInfBlock",y);class k extends F.d{constructor(J){super(t.c,t.c,(J=>this._polymorphicDegToRad(J)),"FlowGraphDegToRadBlock",J)}_degToRad(J){return J*Math.PI/180}_polymorphicDegToRad(J){return p(J,this._degToRad)}}(0,q.g)("FlowGraphDegToRadBlock",k);class JJ extends F.d{constructor(J){super(t.c,t.c,(J=>this._polymorphicRadToDeg(J)),"FlowGraphRadToDegBlock",J)}_radToDeg(J){return 180*J/Math.PI}_polymorphicRadToDeg(J){return p(J,this._radToDeg)}}(0,q.g)("FlowGraphRadToDegBlock",JJ);class TJ extends F.d{constructor(J){super(t.r,t.r,(J=>this._polymorphicSin(J)),"FlowGraphSinBlock",J)}_polymorphicSin(J){return p(J,Math.sin)}}class bJ extends F.d{constructor(J){super(t.r,t.r,(J=>this._polymorphicCos(J)),"FlowGraphCosBlock",J)}_polymorphicCos(J){return p(J,Math.cos)}}class qJ extends F.d{constructor(J){super(t.r,t.r,(J=>this._polymorphicTan(J)),"FlowGraphTanBlock",J)}_polymorphicTan(J){return p(J,Math.tan)}}class tJ extends F.d{constructor(J){super(t.r,t.r,(J=>this._polymorphicAsin(J)),"FlowGraphASinBlock",J)}_polymorphicAsin(J){return p(J,Math.asin)}}(0,q.g)("FlowGraphASinBlock",tJ);class jJ extends F.d{constructor(J){super(t.r,t.r,(J=>this._polymorphicAcos(J)),"FlowGraphACosBlock",J)}_polymorphicAcos(J){return p(J,Math.acos)}}(0,q.g)("FlowGraphACosBlock",jJ);class BJ extends F.d{constructor(J){super(t.r,t.r,(J=>this._polymorphicAtan(J)),"FlowGraphATanBlock",J)}_polymorphicAtan(J){return p(J,Math.atan)}}(0,q.g)("FlowGraphATanBlock",BJ);class YJ extends j.d{constructor(J){super(t.c,t.c,t.c,((J,T)=>this._polymorphicAtan2(J,T)),"FlowGraphATan2Block",J)}_polymorphicAtan2(J,T){return e(J,T,Math.atan2)}}(0,q.g)("FlowGraphATan2Block",YJ);class CJ extends F.d{constructor(J){super(t.c,t.c,(J=>this._polymorphicSinh(J)),"FlowGraphSinhBlock",J)}_polymorphicSinh(J){return p(J,Math.sinh)}}(0,q.g)("FlowGraphSinhBlock",CJ);class FJ extends F.d{constructor(J){super(t.c,t.c,(J=>this._polymorphicCosh(J)),"FlowGraphCoshBlock",J)}_polymorphicCosh(J){return p(J,Math.cosh)}}(0,q.g)("FlowGraphCoshBlock",FJ);class AJ extends F.d{constructor(J){super(t.c,t.c,(J=>this._polymorphicTanh(J)),"FlowGraphTanhBlock",J)}_polymorphicTanh(J){return p(J,Math.tanh)}}(0,q.g)("FlowGraphTanhBlock",AJ);class aJ extends F.d{constructor(J){super(t.c,t.r,(J=>this._polymorphicAsinh(J)),"FlowGraphASinhBlock",J)}_polymorphicAsinh(J){return p(J,Math.asinh)}}(0,q.g)("FlowGraphASinhBlock",aJ);class PJ extends F.d{constructor(J){super(t.c,t.r,(J=>this._polymorphicAcosh(J)),"FlowGraphACoshBlock",J)}_polymorphicAcosh(J){return p(J,Math.acosh)}}(0,q.g)("FlowGraphACoshBlock",PJ);class vJ extends F.d{constructor(J){super(t.c,t.r,(J=>this._polymorphicAtanh(J)),"FlowGraphATanhBlock",J)}_polymorphicAtanh(J){return p(J,Math.atanh)}}(0,q.g)("FlowGraphATanhBlock",vJ);class GJ extends F.d{constructor(J){super(t.c,t.r,(J=>this._polymorphicExp(J)),"FlowGraphExponentialBlock",J)}_polymorphicExp(J){return p(J,Math.exp)}}(0,q.g)("FlowGraphExponentialBlock",GJ);class xJ extends F.d{constructor(J){super(t.c,t.r,(J=>this._polymorphicLog(J)),"FlowGraphLogBlock",J)}_polymorphicLog(J){return p(J,Math.log)}}(0,q.g)("FlowGraphLogBlock",xJ);class IJ extends F.d{constructor(J){super(t.c,t.r,(J=>this._polymorphicLog2(J)),"FlowGraphLog2Block",J)}_polymorphicLog2(J){return p(J,Math.log2)}}(0,q.g)("FlowGraphLog2Block",IJ);class uJ extends F.d{constructor(J){super(t.c,t.r,(J=>this._polymorphicLog10(J)),"FlowGraphLog10Block",J)}_polymorphicLog10(J){return p(J,Math.log10)}}(0,q.g)("FlowGraphLog10Block",uJ);class UJ extends F.d{constructor(J){super(t.c,t.r,(J=>this._polymorphicSqrt(J)),"FlowGraphSquareRootBlock",J)}_polymorphicSqrt(J){return p(J,Math.sqrt)}}(0,q.g)("FlowGraphSquareRootBlock",UJ);class KJ extends F.d{constructor(J){super(t.c,t.r,(J=>this._polymorphicCubeRoot(J)),"FlowGraphCubeRootBlock",J)}_polymorphicCubeRoot(J){return p(J,Math.cbrt)}}(0,q.g)("FlowGraphCubeRootBlock",KJ);class EJ extends j.d{constructor(J){super(t.c,t.r,t.r,((J,T)=>this._polymorphicPow(J,T)),"FlowGraphPowerBlock",J)}_polymorphicPow(J,T){return e(J,T,Math.pow)}}(0,q.g)("FlowGraphPowerBlock",EJ);class lJ extends F.d{constructor(J){super((0,t.O)((null===J||void 0===J?void 0:J.valueType)||"FlowGraphInteger"),(0,t.O)((null===J||void 0===J?void 0:J.valueType)||"FlowGraphInteger"),(J=>"boolean"===typeof J?!J:"number"===typeof J?~J:new a.e(~J.value)),"FlowGraphBitwiseNotBlock",J)}}(0,q.g)("FlowGraphBitwiseNotBlock",lJ);class WJ extends j.d{constructor(J){super((0,t.O)((null===J||void 0===J?void 0:J.valueType)||"FlowGraphInteger"),(0,t.O)((null===J||void 0===J?void 0:J.valueType)||"FlowGraphInteger"),(0,t.O)((null===J||void 0===J?void 0:J.valueType)||"FlowGraphInteger"),((J,T)=>{if("boolean"===typeof J&&"boolean"===typeof T)return J&&T;if("number"===typeof J&&"number"===typeof T)return J&T;if("object"===typeof J&&"object"===typeof T)return new a.e(J.value&T.value);throw new Error(`Cannot perform bitwise AND on ${J} and ${T}`)}),"FlowGraphBitwiseAndBlock",J)}}(0,q.g)("FlowGraphBitwiseAndBlock",WJ);class pJ extends j.d{constructor(J){super((0,t.O)((null===J||void 0===J?void 0:J.valueType)||"FlowGraphInteger"),(0,t.O)((null===J||void 0===J?void 0:J.valueType)||"FlowGraphInteger"),(0,t.O)((null===J||void 0===J?void 0:J.valueType)||"FlowGraphInteger"),((J,T)=>{if("boolean"===typeof J&&"boolean"===typeof T)return J||T;if("number"===typeof J&&"number"===typeof T)return J|T;if("object"===typeof J&&"object"===typeof T)return new a.e(J.value|T.value);throw new Error(`Cannot perform bitwise OR on ${J} and ${T}`)}),"FlowGraphBitwiseOrBlock",J)}}(0,q.g)("FlowGraphBitwiseOrBlock",pJ);class oJ extends j.d{constructor(J){super((0,t.O)((null===J||void 0===J?void 0:J.valueType)||"FlowGraphInteger"),(0,t.O)((null===J||void 0===J?void 0:J.valueType)||"FlowGraphInteger"),(0,t.O)((null===J||void 0===J?void 0:J.valueType)||"FlowGraphInteger"),((J,T)=>{if("boolean"===typeof J&&"boolean"===typeof T)return J!==T;if("number"===typeof J&&"number"===typeof T)return J^T;if("object"===typeof J&&"object"===typeof T)return new a.e(J.value^T.value);throw new Error(`Cannot perform bitwise XOR on ${J} and ${T}`)}),"FlowGraphBitwiseXorBlock",J)}}(0,q.g)("FlowGraphBitwiseXorBlock",oJ);class SJ extends j.d{constructor(J){super(t.i,t.i,t.i,((J,T)=>new a.e(J.value<<T.value)),"FlowGraphBitwiseLeftShiftBlock",J)}}(0,q.g)("FlowGraphBitwiseLeftShiftBlock",SJ);class HJ extends j.d{constructor(J){super(t.i,t.i,t.i,((J,T)=>new a.e(J.value>>T.value)),"FlowGraphBitwiseRightShiftBlock",J)}}(0,q.g)("FlowGraphBitwiseRightShiftBlock",HJ);class sJ extends F.d{constructor(J){super(t.i,t.i,(J=>new a.e(Math.clz32(J.value))),"FlowGraphLeadingZerosBlock",J)}}(0,q.g)("FlowGraphLeadingZerosBlock",sJ);class gJ extends F.d{constructor(J){super(t.i,t.i,(J=>new a.e(J.value?31-Math.clz32(J.value&-J.value):32)),"FlowGraphTrailingZerosBlock",J)}}(0,q.g)("FlowGraphTrailingZerosBlock",gJ);class dJ extends F.d{constructor(J){super(t.i,t.i,(J=>new a.e(function(J){let T=0;for(;J;)T+=1&J,J>>=1;return T}(J.value))),"FlowGraphOneBitsCounterBlock",J)}}(0,q.g)("FlowGraphOneBitsCounterBlock",dJ)},13861:(J,T,b)=>{b.d(T,{d:()=>t});var q=b(13865);class t extends q.c{constructor(J,T,b,q,t,j){super(b,j),this._operation=q,this._className=t,this.a=this.registerDataInput("a",J),this.b=this.registerDataInput("b",T)}_doOperation(J){const T=this.a.getValue(J),b=this.b.getValue(J);return this._operation(T,b)}getClassName(){return this._className}}},13865:(J,T,b)=>{b.d(T,{c:()=>Y});var q=b(12627),t=b(12603);const j="cachedOperationValue",B="cachedExecutionId";class Y extends q.b{constructor(J,T){super(T),this.value=this.registerDataOutput("value",J),this.isValid=this.registerDataOutput("isValid",t.e)}_updateOutputs(J){const T=J._getExecutionVariable(this,B,-1),b=J._getExecutionVariable(this,j,null);if(void 0!==b&&null!==b&&T===J.executionId)this.isValid.setValue(!0,J),this.value.setValue(b,J);else try{const T=this._doOperation(J);if(void 0===T||null===T)return void this.isValid.setValue(!1,J);J._setExecutionVariable(this,j,T),J._setExecutionVariable(this,B,J.executionId),this.value.setValue(T,J),this.isValid.setValue(!0,J)}catch(q){this.isValid.setValue(!1,J)}}}},13872:(J,T,b)=>{b.d(T,{d:()=>t});var q=b(13865);class t extends q.c{constructor(J,T,b,q,t){super(T,t),this._operation=b,this._className=q,this.a=this.registerDataInput("a",J)}_doOperation(J){return this._operation(this.a.getValue(J))}getClassName(){return this._className}}}}]);