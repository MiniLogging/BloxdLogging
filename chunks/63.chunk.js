"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[63],{13997:(U,M,b)=>{b.r(M),b.d(M,{FlowGraphAbsBlock:()=>i,FlowGraphAcosBlock:()=>HU,FlowGraphAcoshBlock:()=>ZU,FlowGraphAddBlock:()=>r,FlowGraphAsinBlock:()=>AU,FlowGraphAsinhBlock:()=>PU,FlowGraphAtan2Block:()=>yU,FlowGraphAtanBlock:()=>WU,FlowGraphAtanhBlock:()=>CU,FlowGraphBitwiseAndBlock:()=>SU,FlowGraphBitwiseLeftShiftBlock:()=>YU,FlowGraphBitwiseNotBlock:()=>oU,FlowGraphBitwiseOrBlock:()=>hU,FlowGraphBitwiseRightShiftBlock:()=>dU,FlowGraphBitwiseXorBlock:()=>iU,FlowGraphCeilBlock:()=>q,FlowGraphClampBlock:()=>k,FlowGraphCosBlock:()=>bU,FlowGraphCoshBlock:()=>eU,FlowGraphCubeRootBlock:()=>LU,FlowGraphDegToRadBlock:()=>c,FlowGraphDivideBlock:()=>F,FlowGraphEBlock:()=>L,FlowGraphEqualityBlock:()=>g,FlowGraphExpBlock:()=>rU,FlowGraphFloorBlock:()=>s,FlowGraphFractionBlock:()=>n,FlowGraphGreaterThanBlock:()=>G,FlowGraphGreaterThanOrEqualBlock:()=>l,FlowGraphInfBlock:()=>o,FlowGraphIsInfinityBlock:()=>u,FlowGraphIsNanBlock:()=>D,FlowGraphLeadingZerosBlock:()=>sU,FlowGraphLessThanBlock:()=>w,FlowGraphLessThanOrEqualBlock:()=>T,FlowGraphLog10Block:()=>FU,FlowGraphLog2Block:()=>JU,FlowGraphLogBlock:()=>BU,FlowGraphMathInterpolationBlock:()=>p,FlowGraphMaxBlock:()=>v,FlowGraphMinBlock:()=>I,FlowGraphModuloBlock:()=>Q,FlowGraphMultiplyBlock:()=>J,FlowGraphNaNBlock:()=>S,FlowGraphNegationBlock:()=>E,FlowGraphOneBitsCounterBlock:()=>mU,FlowGraphPiBlock:()=>z,FlowGraphPowerBlock:()=>zU,FlowGraphRadToDegBlock:()=>UU,FlowGraphRandomBlock:()=>f,FlowGraphRoundBlock:()=>m,FlowGraphSaturateBlock:()=>R,FlowGraphSignBlock:()=>Y,FlowGraphSinBlock:()=>MU,FlowGraphSinhBlock:()=>OU,FlowGraphSquareRootBlock:()=>fU,FlowGraphSubtractBlock:()=>B,FlowGraphTanBlock:()=>aU,FlowGraphTanhBlock:()=>xU,FlowGraphTrailingZerosBlock:()=>qU,FlowGraphTruncBlock:()=>d});var a=b(609),A=b(12775),H=b(14006),W=b(14008);class y extends W.c{constructor(U,M,b,a){super(U,a),this._operation=M,this._className=b}_doOperation(U){return this._operation(U)}getClassName(){return this._className}}var O=b(670),e=b(14015);class x extends W.c{constructor(U,M,b,a,A,H,W){super(a,W),this._operation=A,this._className=H,this.a=this.registerDataInput("a",U),this.b=this.registerDataInput("b",M),this.c=this.registerDataInput("c",b)}_doOperation(U){return this._operation(this.a.getValue(U),this.b.getValue(U),this.c.getValue(U))}getClassName(){return this._className}}var P=b(12767),Z=b(12778),C=b(12809);class r extends H.d{constructor(U){super((0,A.M)(null===U||void 0===U?void 0:U.type),(0,A.M)(null===U||void 0===U?void 0:U.type),(0,A.M)(null===U||void 0===U?void 0:U.type),((U,M)=>this._polymorphicAdd(U,M)),"FlowGraphAddBlock",U)}_polymorphicAdd(U,M){const b=(0,C.k)(U),a=(0,C.k)(M);if((0,C.j)(b,a)||(0,C.f)(b,a)||(0,C.c)(b,a))return U.add(M);if("Quaternion"===b||"Vector4"===a)return new O.n(U.x,U.y,U.z,U.w).addInPlace(M);if("Vector4"===b||"Quaternion"===a)return U.add(M);var A;if(null!==(A=this.config)&&void 0!==A&&A.preventIntegerFloatArithmetic&&typeof U!==typeof M)throw new Error("Cannot add different types of numbers.");return(0,C.r)(U)+(0,C.r)(M)}}(0,a.i)("FlowGraphAddBlock",r);class B extends H.d{constructor(U){super((0,A.M)(null===U||void 0===U?void 0:U.type),(0,A.M)(null===U||void 0===U?void 0:U.type),(0,A.M)(null===U||void 0===U?void 0:U.type),((U,M)=>this._polymorphicSubtract(U,M)),"FlowGraphSubtractBlock",U)}_polymorphicSubtract(U,M){const b=(0,C.k)(U),a=(0,C.k)(M);if((0,C.j)(b,a)||(0,C.c)(b,a)||(0,C.f)(b,a))return U.je(M);if("Quaternion"===b||"Vector4"===a)return new O.n(U.x,U.y,U.z,U.w).nk(M);if("Vector4"===b||"Quaternion"===a)return U.je(M);var A;if(null!==(A=this.config)&&void 0!==A&&A.preventIntegerFloatArithmetic&&typeof U!==typeof M)throw new Error("Cannot add different types of numbers.");return(0,C.r)(U)-(0,C.r)(M)}}(0,a.i)("FlowGraphSubtractBlock",B);class J extends H.d{constructor(U){super((0,A.M)(null===U||void 0===U?void 0:U.type),(0,A.M)(null===U||void 0===U?void 0:U.type),(0,A.M)(null===U||void 0===U?void 0:U.type),((U,M)=>this._polymorphicMultiply(U,M)),"FlowGraphMultiplyBlock",U)}_polymorphicMultiply(U,M){const b=(0,C.k)(U),a=(0,C.k)(M);if((0,C.j)(b,a)||(0,C.c)(b,a))return U.multiply(M);if("Quaternion"===b||"Vector4"===a)return new O.n(U.x,U.y,U.z,U.w).multiplyInPlace(M);if("Vector4"===b||"Quaternion"===a)return U.multiply(M);if((0,C.f)(b,a)){var A;if(null!==(A=this.config)&&void 0!==A&&A.useMatrixPerComponent){const a=U.m;for(let U=0;U<a.length;U++)a[U]*=M.m[U];return"Matrix2D"===b?new Z.e(a):"Matrix3D"===b?new Z.g(a):O.b.jk(a)}return M.multiply(U)}var H;if(null!==(H=this.config)&&void 0!==H&&H.preventIntegerFloatArithmetic&&typeof U!==typeof M)throw new Error("Cannot add different types of numbers.");return(0,C.r)(U)*(0,C.r)(M)}}(0,a.i)("FlowGraphMultiplyBlock",J);class F extends H.d{constructor(U){super((0,A.M)(null===U||void 0===U?void 0:U.type),(0,A.M)(null===U||void 0===U?void 0:U.type),(0,A.M)(null===U||void 0===U?void 0:U.type),((U,M)=>this._polymorphicDivide(U,M)),"FlowGraphDivideBlock",U)}_polymorphicDivide(U,M){const b=(0,C.k)(U),a=(0,C.k)(M);if((0,C.j)(b,a)||(0,C.c)(b,a))return U.divide(M);if("Quaternion"===b||"Quaternion"===a){const b=U.clone();return b.x/=M.x,b.y/=M.y,b.z/=M.z,b.w/=M.w,b}if("Quaternion"===b||"Vector4"===a)return new O.n(U.x,U.y,U.z,U.w).divideInPlace(M);if("Vector4"===b||"Quaternion"===a)return U.divide(M);if((0,C.f)(b,a)){var A;if(null!==(A=this.config)&&void 0!==A&&A.useMatrixPerComponent){const a=U.m;for(let U=0;U<a.length;U++)a[U]/=M.m[U];return"Matrix2D"===b?new Z.e(a):"Matrix3D"===b?new Z.g(a):O.b.jk(a)}return U.divide(M)}var H;if(null!==(H=this.config)&&void 0!==H&&H.preventIntegerFloatArithmetic&&typeof U!==typeof M)throw new Error("Cannot add different types of numbers.");return(0,C.r)(U)/(0,C.r)(M)}}(0,a.i)("FlowGraphDivideBlock",F);class f extends y{constructor(U){super(A.t,(U=>this._random(U)),"FlowGraphRandomBlock",U),this.min=this.registerDataInput("min",A.t,(null===U||void 0===U?void 0:U.min)??0),this.max=this.registerDataInput("max",A.t,(null===U||void 0===U?void 0:U.max)??1),null!==U&&void 0!==U&&U.seed&&(this._seed=U.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const U=1e4*Math.sin(this._seed++);return U-Math.floor(U)}return Math.random()}_random(U){const M=this.min.getValue(U),b=this.max.getValue(U);return this._getRandomValue()*(b-M)+M}}(0,a.i)("FlowGraphRandomBlock",f);class L extends y{constructor(U){super(A.t,(()=>Math.E),"FlowGraphEBlock",U)}}(0,a.i)("FlowGraphEBlock",L);class z extends y{constructor(U){super(A.t,(()=>Math.PI),"FlowGraphPIBlock",U)}}(0,a.i)("FlowGraphPIBlock",z);class o extends y{constructor(U){super(A.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",U)}}(0,a.i)("FlowGraphInfBlock",o);class S extends y{constructor(U){super(A.t,(()=>Number.NaN),"FlowGraphNaNBlock",U)}}function h(U,M){switch((0,C.k)(U)){case"FlowGraphInteger":return new P.e(M(U.value));case"Vector2":return new O.i(M(U.x),M(U.y));case"lk":return new O.l(M(U.x),M(U.y),M(U.z));case"Vector4":return new O.n(M(U.x),M(U.y),M(U.z),M(U.w));case"Quaternion":return new O.e(M(U.x),M(U.y),M(U.z),M(U.w));case"Matrix":return O.b.jk(U.m.map(M));case"Matrix2D":return new Z.e(U.m.map(M));case"Matrix3D":return new Z.g(U.m.map(M));default:return M(U)}}(0,a.i)("FlowGraphNaNBlock",S);class i extends e.b{constructor(U){super(A.t,A.t,(U=>this._polymorphicAbs(U)),"FlowGraphAbsBlock",U)}_polymorphicAbs(U){return h(U,Math.abs)}}(0,a.i)("FlowGraphAbsBlock",i);class Y extends e.b{constructor(U){super(A.t,A.t,(U=>this._polymorphicSign(U)),"FlowGraphSignBlock",U)}_polymorphicSign(U){return h(U,Math.sign)}}(0,a.i)("FlowGraphSignBlock",Y);class d extends e.b{constructor(U){super(A.t,A.t,(U=>this._polymorphicTrunc(U)),"FlowGraphTruncBlock",U)}_polymorphicTrunc(U){return h(U,Math.trunc)}}(0,a.i)("FlowGraphTruncBlock",d);class s extends e.b{constructor(U){super(A.t,A.t,(U=>this._polymorphicFloor(U)),"FlowGraphFloorBlock",U)}_polymorphicFloor(U){return h(U,Math.floor)}}(0,a.i)("FlowGraphFloorBlock",s);class q extends e.b{constructor(U){super(A.c,A.c,(U=>this._polymorphicCeiling(U)),"FlowGraphCeilBlock",U)}_polymorphicCeiling(U){return h(U,Math.ceil)}}(0,a.i)("FlowGraphCeilBlock",q);class m extends e.b{constructor(U){super(A.c,A.c,(U=>this._polymorphicRound(U)),"FlowGraphRoundBlock",U)}_polymorphicRound(U){return h(U,(U=>{var M;return U<0&&null!==(M=this.config)&&void 0!==M&&M.roundHalfAwayFromZero?-Math.round(-U):Math.round(U)}))}}(0,a.i)("FlowGraphRoundBlock",m);class n extends e.b{constructor(U){super(A.c,A.c,(U=>this._polymorphicFraction(U)),"FlowGraphFractBlock",U)}_polymorphicFraction(U){return h(U,(U=>U-Math.floor(U)))}}(0,a.i)("FlowGraphFractBlock",n);class E extends e.b{constructor(U){super(A.c,A.c,(U=>this._polymorphicNeg(U)),"FlowGraphNegationBlock",U)}_polymorphicNeg(U){return h(U,(U=>-U))}}function X(U,M,b){switch((0,C.k)(U)){case"FlowGraphInteger":return new P.e(b(U.value,M.value));case"Vector2":return new O.i(b(U.x,M.x),b(U.y,M.y));case"lk":return new O.l(b(U.x,M.x),b(U.y,M.y),b(U.z,M.z));case"Vector4":return new O.n(b(U.x,M.x),b(U.y,M.y),b(U.z,M.z),b(U.w,M.w));case"Quaternion":return new O.e(b(U.x,M.x),b(U.y,M.y),b(U.z,M.z),b(U.w,M.w));case"Matrix":return O.b.jk(U.m.map(((U,a)=>b(U,M.m[a]))));case"Matrix2D":return new Z.e(U.m.map(((U,a)=>b(U,M.m[a]))));case"Matrix3D":return new Z.g(U.m.map(((U,a)=>b(U,M.m[a]))));default:return b((0,C.r)(U),(0,C.r)(M))}}(0,a.i)("FlowGraphNegationBlock",E);class Q extends H.d{constructor(U){super(A.c,A.c,A.c,((U,M)=>this._polymorphicRemainder(U,M)),"FlowGraphModuloBlock",U)}_polymorphicRemainder(U,M){return X(U,M,((U,M)=>U%M))}}(0,a.i)("FlowGraphModuloBlock",Q);class I extends H.d{constructor(U){super(A.c,A.c,A.c,((U,M)=>this._polymorphicMin(U,M)),"FlowGraphMinBlock",U)}_polymorphicMin(U,M){return X(U,M,Math.min)}}(0,a.i)("FlowGraphMinBlock",I);class v extends H.d{constructor(U){super(A.c,A.c,A.c,((U,M)=>this._polymorphicMax(U,M)),"FlowGraphMaxBlock",U)}_polymorphicMax(U,M){return X(U,M,Math.max)}}function t(U,M,b){return Math.min(Math.max(U,Math.min(M,b)),Math.max(M,b))}function V(U,M,b,a){switch((0,C.k)(U)){case"FlowGraphInteger":return new P.e(a(U.value,M.value,b.value));case"Vector2":return new O.i(a(U.x,M.x,b.x),a(U.y,M.y,b.y));case"lk":return new O.l(a(U.x,M.x,b.x),a(U.y,M.y,b.y),a(U.z,M.z,b.z));case"Vector4":return new O.n(a(U.x,M.x,b.x),a(U.y,M.y,b.y),a(U.z,M.z,b.z),a(U.w,M.w,b.w));case"Quaternion":return new O.e(a(U.x,M.x,b.x),a(U.y,M.y,b.y),a(U.z,M.z,b.z),a(U.w,M.w,b.w));case"Matrix":return O.b.jk(U.m.map(((U,A)=>a(U,M.m[A],b.m[A]))));case"Matrix2D":return new Z.e(U.m.map(((U,A)=>a(U,M.m[A],b.m[A]))));case"Matrix3D":return new Z.g(U.m.map(((U,A)=>a(U,M.m[A],b.m[A]))));default:return a((0,C.r)(U),(0,C.r)(M),(0,C.r)(b))}}(0,a.i)("FlowGraphMaxBlock",v);class k extends x{constructor(U){super(A.c,A.c,A.c,A.c,((U,M,b)=>this._polymorphicClamp(U,M,b)),"FlowGraphClampBlock",U)}_polymorphicClamp(U,M,b){return V(U,M,b,t)}}function N(U){return Math.min(Math.max(U,0),1)}(0,a.i)("FlowGraphClampBlock",k);class R extends e.b{constructor(U){super(A.c,A.c,(U=>this._polymorphicSaturate(U)),"FlowGraphSaturateBlock",U)}_polymorphicSaturate(U){return h(U,N)}}function j(U,M,b){return(1-b)*U+b*M}(0,a.i)("FlowGraphSaturateBlock",R);class p extends x{constructor(U){super(A.c,A.c,A.c,A.c,((U,M,b)=>this._polymorphicInterpolate(U,M,b)),"FlowGraphMathInterpolationBlock",U)}_polymorphicInterpolate(U,M,b){return V(U,M,b,j)}}(0,a.i)("FlowGraphMathInterpolationBlock",p);class g extends H.d{constructor(U){super(A.c,A.c,A.f,((U,M)=>this._polymorphicEq(U,M)),"FlowGraphEqualityBlock",U)}_polymorphicEq(U,M){const b=(0,C.k)(U),a=(0,C.k)(M);return typeof U===typeof M&&((0,C.j)(b,a)||(0,C.f)(b,a)||(0,C.c)(b,a)?U.equals(M):U===M)}}function K(U,M,b){if((0,C.t)(U)&&(0,C.t)(M))return b((0,C.r)(U),(0,C.r)(M));throw new Error(`Cannot compare ${U} and ${M}`)}(0,a.i)("FlowGraphEqualityBlock",g);class w extends H.d{constructor(U){super(A.c,A.c,A.f,((U,M)=>this._polymorphicLessThan(U,M)),"FlowGraphLessThanBlock",U)}_polymorphicLessThan(U,M){return K(U,M,((U,M)=>U<M))}}(0,a.i)("FlowGraphLessThanBlock",w);class T extends H.d{constructor(U){super(A.c,A.c,A.f,((U,M)=>this._polymorphicLessThanOrEqual(U,M)),"FlowGraphLessThanOrEqualBlock",U)}_polymorphicLessThanOrEqual(U,M){return K(U,M,((U,M)=>U<=M))}}(0,a.i)("FlowGraphLessThanOrEqualBlock",T);class G extends H.d{constructor(U){super(A.c,A.c,A.f,((U,M)=>this._polymorphicGreaterThan(U,M)),"FlowGraphGreaterThanBlock",U)}_polymorphicGreaterThan(U,M){return K(U,M,((U,M)=>U>M))}}(0,a.i)("FlowGraphGreaterThanBlock",G);class l extends H.d{constructor(U){super(A.c,A.c,A.f,((U,M)=>this._polymorphicGreaterThanOrEqual(U,M)),"FlowGraphGreaterThanOrEqualBlock",U)}_polymorphicGreaterThanOrEqual(U,M){return K(U,M,((U,M)=>U>=M))}}(0,a.i)("FlowGraphGreaterThanOrEqualBlock",l);class D extends e.b{constructor(U){super(A.c,A.f,(U=>this._polymorphicIsNan(U)),"FlowGraphIsNaNBlock",U)}_polymorphicIsNan(U){if((0,C.t)(U,!0))return isNaN((0,C.r)(U));throw new Error(`Cannot get NaN of ${U}`)}}(0,a.i)("FlowGraphIsNaNBlock",D);class u extends e.b{constructor(U){super(A.c,A.f,(U=>this._polymorphicIsInf(U)),"FlowGraphIsInfBlock",U)}_polymorphicIsInf(U){if((0,C.t)(U))return!isFinite((0,C.r)(U));throw new Error(`Cannot get isInf of ${U}`)}}(0,a.i)("FlowGraphIsInfBlock",u);class c extends e.b{constructor(U){super(A.c,A.c,(U=>this._polymorphicDegToRad(U)),"FlowGraphDegToRadBlock",U)}_degToRad(U){return U*Math.PI/180}_polymorphicDegToRad(U){return h(U,this._degToRad)}}(0,a.i)("FlowGraphDegToRadBlock",c);class UU extends e.b{constructor(U){super(A.c,A.c,(U=>this._polymorphicRadToDeg(U)),"FlowGraphRadToDegBlock",U)}_radToDeg(U){return 180*U/Math.PI}_polymorphicRadToDeg(U){return h(U,this._radToDeg)}}(0,a.i)("FlowGraphRadToDegBlock",UU);class MU extends e.b{constructor(U){super(A.t,A.t,(U=>this._polymorphicSin(U)),"FlowGraphSinBlock",U)}_polymorphicSin(U){return h(U,Math.sin)}}class bU extends e.b{constructor(U){super(A.t,A.t,(U=>this._polymorphicCos(U)),"FlowGraphCosBlock",U)}_polymorphicCos(U){return h(U,Math.cos)}}class aU extends e.b{constructor(U){super(A.t,A.t,(U=>this._polymorphicTan(U)),"FlowGraphTanBlock",U)}_polymorphicTan(U){return h(U,Math.tan)}}class AU extends e.b{constructor(U){super(A.t,A.t,(U=>this._polymorphicAsin(U)),"FlowGraphASinBlock",U)}_polymorphicAsin(U){return h(U,Math.asin)}}(0,a.i)("FlowGraphASinBlock",AU);class HU extends e.b{constructor(U){super(A.t,A.t,(U=>this._polymorphicAcos(U)),"FlowGraphACosBlock",U)}_polymorphicAcos(U){return h(U,Math.acos)}}(0,a.i)("FlowGraphACosBlock",HU);class WU extends e.b{constructor(U){super(A.t,A.t,(U=>this._polymorphicAtan(U)),"FlowGraphATanBlock",U)}_polymorphicAtan(U){return h(U,Math.atan)}}(0,a.i)("FlowGraphATanBlock",WU);class yU extends H.d{constructor(U){super(A.c,A.c,A.c,((U,M)=>this._polymorphicAtan2(U,M)),"FlowGraphATan2Block",U)}_polymorphicAtan2(U,M){return X(U,M,Math.atan2)}}(0,a.i)("FlowGraphATan2Block",yU);class OU extends e.b{constructor(U){super(A.c,A.c,(U=>this._polymorphicSinh(U)),"FlowGraphSinhBlock",U)}_polymorphicSinh(U){return h(U,Math.sinh)}}(0,a.i)("FlowGraphSinhBlock",OU);class eU extends e.b{constructor(U){super(A.c,A.c,(U=>this._polymorphicCosh(U)),"FlowGraphCoshBlock",U)}_polymorphicCosh(U){return h(U,Math.cosh)}}(0,a.i)("FlowGraphCoshBlock",eU);class xU extends e.b{constructor(U){super(A.c,A.c,(U=>this._polymorphicTanh(U)),"FlowGraphTanhBlock",U)}_polymorphicTanh(U){return h(U,Math.tanh)}}(0,a.i)("FlowGraphTanhBlock",xU);class PU extends e.b{constructor(U){super(A.c,A.t,(U=>this._polymorphicAsinh(U)),"FlowGraphASinhBlock",U)}_polymorphicAsinh(U){return h(U,Math.asinh)}}(0,a.i)("FlowGraphASinhBlock",PU);class ZU extends e.b{constructor(U){super(A.c,A.t,(U=>this._polymorphicAcosh(U)),"FlowGraphACoshBlock",U)}_polymorphicAcosh(U){return h(U,Math.acosh)}}(0,a.i)("FlowGraphACoshBlock",ZU);class CU extends e.b{constructor(U){super(A.c,A.t,(U=>this._polymorphicAtanh(U)),"FlowGraphATanhBlock",U)}_polymorphicAtanh(U){return h(U,Math.atanh)}}(0,a.i)("FlowGraphATanhBlock",CU);class rU extends e.b{constructor(U){super(A.c,A.t,(U=>this._polymorphicExp(U)),"FlowGraphExponentialBlock",U)}_polymorphicExp(U){return h(U,Math.exp)}}(0,a.i)("FlowGraphExponentialBlock",rU);class BU extends e.b{constructor(U){super(A.c,A.t,(U=>this._polymorphicLog(U)),"FlowGraphLogBlock",U)}_polymorphicLog(U){return h(U,Math.log)}}(0,a.i)("FlowGraphLogBlock",BU);class JU extends e.b{constructor(U){super(A.c,A.t,(U=>this._polymorphicLog2(U)),"FlowGraphLog2Block",U)}_polymorphicLog2(U){return h(U,Math.log2)}}(0,a.i)("FlowGraphLog2Block",JU);class FU extends e.b{constructor(U){super(A.c,A.t,(U=>this._polymorphicLog10(U)),"FlowGraphLog10Block",U)}_polymorphicLog10(U){return h(U,Math.log10)}}(0,a.i)("FlowGraphLog10Block",FU);class fU extends e.b{constructor(U){super(A.c,A.t,(U=>this._polymorphicSqrt(U)),"FlowGraphSquareRootBlock",U)}_polymorphicSqrt(U){return h(U,Math.sqrt)}}(0,a.i)("FlowGraphSquareRootBlock",fU);class LU extends e.b{constructor(U){super(A.c,A.t,(U=>this._polymorphicCubeRoot(U)),"FlowGraphCubeRootBlock",U)}_polymorphicCubeRoot(U){return h(U,Math.cbrt)}}(0,a.i)("FlowGraphCubeRootBlock",LU);class zU extends H.d{constructor(U){super(A.c,A.t,A.t,((U,M)=>this._polymorphicPow(U,M)),"FlowGraphPowerBlock",U)}_polymorphicPow(U,M){return X(U,M,Math.pow)}}(0,a.i)("FlowGraphPowerBlock",zU);class oU extends e.b{constructor(U){super((0,A.M)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,A.M)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(U=>"boolean"===typeof U?!U:"number"===typeof U?~U:new P.e(~U.value)),"FlowGraphBitwiseNotBlock",U)}}(0,a.i)("FlowGraphBitwiseNotBlock",oU);class SU extends H.d{constructor(U){super((0,A.M)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,A.M)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,A.M)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),((U,M)=>{if("boolean"===typeof U&&"boolean"===typeof M)return U&&M;if("number"===typeof U&&"number"===typeof M)return U&M;if("object"===typeof U&&"object"===typeof M)return new P.e(U.value&M.value);throw new Error(`Cannot perform bitwise AND on ${U} and ${M}`)}),"FlowGraphBitwiseAndBlock",U)}}(0,a.i)("FlowGraphBitwiseAndBlock",SU);class hU extends H.d{constructor(U){super((0,A.M)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,A.M)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,A.M)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),((U,M)=>{if("boolean"===typeof U&&"boolean"===typeof M)return U||M;if("number"===typeof U&&"number"===typeof M)return U|M;if("object"===typeof U&&"object"===typeof M)return new P.e(U.value|M.value);throw new Error(`Cannot perform bitwise OR on ${U} and ${M}`)}),"FlowGraphBitwiseOrBlock",U)}}(0,a.i)("FlowGraphBitwiseOrBlock",hU);class iU extends H.d{constructor(U){super((0,A.M)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,A.M)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,A.M)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),((U,M)=>{if("boolean"===typeof U&&"boolean"===typeof M)return U!==M;if("number"===typeof U&&"number"===typeof M)return U^M;if("object"===typeof U&&"object"===typeof M)return new P.e(U.value^M.value);throw new Error(`Cannot perform bitwise XOR on ${U} and ${M}`)}),"FlowGraphBitwiseXorBlock",U)}}(0,a.i)("FlowGraphBitwiseXorBlock",iU);class YU extends H.d{constructor(U){super(A.i,A.i,A.i,((U,M)=>new P.e(U.value<<M.value)),"FlowGraphBitwiseLeftShiftBlock",U)}}(0,a.i)("FlowGraphBitwiseLeftShiftBlock",YU);class dU extends H.d{constructor(U){super(A.i,A.i,A.i,((U,M)=>new P.e(U.value>>M.value)),"FlowGraphBitwiseRightShiftBlock",U)}}(0,a.i)("FlowGraphBitwiseRightShiftBlock",dU);class sU extends e.b{constructor(U){super(A.i,A.i,(U=>new P.e(Math.clz32(U.value))),"FlowGraphLeadingZerosBlock",U)}}(0,a.i)("FlowGraphLeadingZerosBlock",sU);class qU extends e.b{constructor(U){super(A.i,A.i,(U=>new P.e(U.value?31-Math.clz32(U.value&-U.value):32)),"FlowGraphTrailingZerosBlock",U)}}(0,a.i)("FlowGraphTrailingZerosBlock",qU);class mU extends e.b{constructor(U){super(A.i,A.i,(U=>new P.e(function(U){let M=0;for(;U;)M+=1&U,U>>=1;return M}(U.value))),"FlowGraphOneBitsCounterBlock",U)}}(0,a.i)("FlowGraphOneBitsCounterBlock",mU)},14006:(U,M,b)=>{b.d(M,{d:()=>A});var a=b(14008);class A extends a.c{constructor(U,M,b,a,A,H){super(b,H),this._operation=a,this._className=A,this.a=this.registerDataInput("a",U),this.b=this.registerDataInput("b",M)}_doOperation(U){const M=this.a.getValue(U),b=this.b.getValue(U);return this._operation(M,b)}getClassName(){return this._className}}},14008:(U,M,b)=>{b.d(M,{c:()=>y});var a=b(12795),A=b(12775);const H="cachedOperationValue",W="cachedExecutionId";class y extends a.c{constructor(U,M){super(M),this.value=this.registerDataOutput("value",U),this.isValid=this.registerDataOutput("isValid",A.f)}_updateOutputs(U){const M=U._getExecutionVariable(this,W,-1),b=U._getExecutionVariable(this,H,null);if(void 0!==b&&null!==b&&M===U.executionId)this.isValid.setValue(!0,U),this.value.setValue(b,U);else try{const M=this._doOperation(U);if(void 0===M||null===M)return void this.isValid.setValue(!1,U);U._setExecutionVariable(this,H,M),U._setExecutionVariable(this,W,U.executionId),this.value.setValue(M,U),this.isValid.setValue(!0,U)}catch(a){this.isValid.setValue(!1,U)}}}},14015:(U,M,b)=>{b.d(M,{b:()=>A});var a=b(14008);class A extends a.c{constructor(U,M,b,a,A){super(M,A),this._operation=b,this._className=a,this.a=this.registerDataInput("a",U)}_doOperation(U){return this._operation(this.a.getValue(U))}getClassName(){return this._className}}}}]);