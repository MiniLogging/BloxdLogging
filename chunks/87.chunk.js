"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[87],{14487:(w,p,e)=>{e.r(p),e.d(p,{FlowGraphWaitAllBlock:()=>q});var r=e(12920),I=e(11038),d=e(12872),f=e(12867);class q extends r.c{constructor(w){super(w),this.config=w,this.inFlows=[],this._cachedActivationState=[],this.reset=this._registerSignalInput("reset"),this.completed=this._registerSignalOutput("completed"),this.remainingInputs=this.registerDataOutput("remainingInputs",d.h,new f.b(this.config.inputSignalCount||0));for(let p=0;p<this.config.inputSignalCount;p++)this.inFlows.push(this._registerSignalInput(`in_${p}`));this._unregisterSignalInput("in")}_getCurrentActivationState(w){const p=this._cachedActivationState;if(p.length=0,w._hasExecutionVariable(this,"activationState")){const e=w._getExecutionVariable(this,"activationState",[]);for(let w=0;w<e.length;w++)p.push(e[w])}else for(let e=0;e<this.config.inputSignalCount;e++)p.push(!1);return p}_execute(w,p){const e=this._getCurrentActivationState(w);if(p===this.reset)for(let r=0;r<this.config.inputSignalCount;r++)e[r]=!1;else{const w=this.inFlows.indexOf(p);w>=0&&(e[w]=!0)}if(this.remainingInputs.setValue(new f.b(e.filter((w=>!w)).length),w),w._setExecutionVariable(this,"activationState",e.slice()),e.includes(!1))p!==this.reset&&this.out._activateSignal(w);else{this.completed._activateSignal(w);for(let w=0;w<this.config.inputSignalCount;w++)e[w]=!1}}getClassName(){return"FlowGraphWaitAllBlock"}serialize(w){super.serialize(w),w.config.inputFlows=this.config.inputSignalCount}}(0,I.d)("FlowGraphWaitAllBlock",q)}}]);