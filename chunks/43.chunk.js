"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[43],{13008:(C,M,x)=>{x.r(M),x.d(M,{AnimationGroup:()=>t,TargetedAnimation:()=>L});var f=x(12330),T=x(971),z=x(1008),s=x(1154),S=x(12324),m=x(978);class Q{get currentFrame(){return this._currentFrame}get weight(){return this._weight}get currentValue(){return this._currentValue}get targetPath(){return this._targetPath}get target(){return this._currentActiveTarget}get isAdditive(){return this._host&&this._host.isAdditive}constructor(C,M,x,T){if(this._events=new Array,this._currentFrame=0,this._originalValue=new Array,this._originalBlendValue=null,this._offsetsCache={},this._highLimitsCache={},this._stopped=!1,this._blendingFactor=0,this._currentValue=null,this._currentActiveTarget=null,this._directTarget=null,this._targetPath="",this._weight=1,this._absoluteFrameOffset=0,this._previousElapsedTime=0,this._yoyoDirection=1,this._previousAbsoluteFrame=0,this._targetIsArray=!1,this._animation=M,this._target=C,this._scene=x,this._host=T,this._activeTargets=[],M._runtimeAnimations.push(this),this._animationState={key:0,repeatCount:0,loopMode:this._getCorrectLoopMode()},this._animation.dataType===f.b.ANIMATIONTYPE_MATRIX&&(this._animationState.workValue=m.d.Zero()),this._keys=this._animation.getKeys(),this._minFrame=this._keys[0].frame,this._maxFrame=this._keys[this._keys.length-1].frame,this._minValue=this._keys[0].value,this._maxValue=this._keys[this._keys.length-1].value,0!==this._minFrame){const C={frame:0,value:this._minValue};this._keys.splice(0,0,C)}if(this._target instanceof Array){let C=0;for(const M of this._target)this._preparePath(M,C),this._getOriginalValues(C),C++;this._targetIsArray=!0}else this._preparePath(this._target),this._getOriginalValues(),this._targetIsArray=!1,this._directTarget=this._activeTargets[0];const z=M.getEvents();z&&z.length>0&&z.forEach((C=>{this._events.push(C._clone())})),this._enableBlending=C&&C.animationPropertiesOverride?C.animationPropertiesOverride.enableBlending:this._animation.enableBlending}_preparePath(C){let M=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const x=this._animation.targetPropertyPath;if(x.length>1){let f=C;for(let C=0;C<x.length-1;C++){const M=x[C];if(f=f[M],void 0===f)throw new Error(`Invalid property (${M}) in property path (${x.join(".")})`)}this._targetPath=x[x.length-1],this._activeTargets[M]=f}else this._targetPath=x[0],this._activeTargets[M]=C;if(void 0===this._activeTargets[M][this._targetPath])throw new Error(`Invalid property (${this._targetPath}) in property path (${x.join(".")})`)}get animation(){return this._animation}reset(){if(arguments.length>0&&void 0!==arguments[0]&&arguments[0])if(this._target instanceof Array){let C=0;for(const M of this._target)void 0!==this._originalValue[C]&&this._setValue(M,this._activeTargets[C],this._originalValue[C],-1,C),C++}else void 0!==this._originalValue[0]&&this._setValue(this._target,this._directTarget,this._originalValue[0],-1,0);this._offsetsCache={},this._highLimitsCache={},this._currentFrame=0,this._blendingFactor=0;for(let C=0;C<this._events.length;C++)this._events[C].isDone=!1}isStopped(){return this._stopped}dispose(){const C=this._animation.runtimeAnimations.indexOf(this);C>-1&&this._animation.runtimeAnimations.splice(C,1)}setValue(C,M){if(this._targetIsArray)for(let x=0;x<this._target.length;x++){const f=this._target[x];this._setValue(f,this._activeTargets[x],C,M,x)}else this._setValue(this._target,this._directTarget,C,M,0)}_getOriginalValues(){let C,M=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;const x=this._activeTargets[M];C=x.getLocalMatrix&&"_matrix"===this._targetPath?x.getLocalMatrix():x[this._targetPath],C&&C.clone?this._originalValue[M]=C.clone():this._originalValue[M]=C}_registerTargetForLateAnimationBinding(C,M){const x=C.target;this._scene._registeredForLateAnimationBindings.pushNoDuplicate(x),x._lateAnimationHolders||(x._lateAnimationHolders={}),x._lateAnimationHolders[C.targetPath]||(x._lateAnimationHolders[C.targetPath]={totalWeight:0,totalAdditiveWeight:0,animations:[],additiveAnimations:[],originalValue:M}),C.isAdditive?(x._lateAnimationHolders[C.targetPath].additiveAnimations.push(C),x._lateAnimationHolders[C.targetPath].totalAdditiveWeight+=C.weight):(x._lateAnimationHolders[C.targetPath].animations.push(C),x._lateAnimationHolders[C.targetPath].totalWeight+=C.weight)}_setValue(C,M,x,T,z){if(this._currentActiveTarget=M,this._weight=T,this._enableBlending&&this._blendingFactor<=1){if(!this._originalBlendValue){const C=M[this._targetPath];C.clone?this._originalBlendValue=C.clone():this._originalBlendValue=C}this._originalBlendValue.m?f.b.AllowMatrixDecomposeForInterpolation?this._currentValue?m.d.DecomposeLerpToRef(this._originalBlendValue,x,this._blendingFactor,this._currentValue):this._currentValue=m.d.DecomposeLerp(this._originalBlendValue,x,this._blendingFactor):this._currentValue?m.d.LerpToRef(this._originalBlendValue,x,this._blendingFactor,this._currentValue):this._currentValue=m.d.Lerp(this._originalBlendValue,x,this._blendingFactor):this._currentValue=f.b._UniversalLerp(this._originalBlendValue,x,this._blendingFactor);const T=C&&C.animationPropertiesOverride?C.animationPropertiesOverride.blendingSpeed:this._animation.blendingSpeed;this._blendingFactor+=T}else this._currentValue?this._currentValue.p?this._currentValue.p(x):this._currentValue=x:null!==x&&void 0!==x&&x.clone?this._currentValue=x.clone():this._currentValue=x;-1!==T?this._registerTargetForLateAnimationBinding(this,this._originalValue[z]):this._animationState.loopMode===f.b.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT?this._currentValue.addToRef?this._currentValue.addToRef(this._originalValue[z],M[this._targetPath]):M[this._targetPath]=this._originalValue[z]+this._currentValue:M[this._targetPath]=this._currentValue,C.Fe&&C.Fe(this._animation.targetProperty)}_getCorrectLoopMode(){return this._target&&this._target.animationPropertiesOverride?this._target.animationPropertiesOverride.loopMode:this._animation.loopMode}goToFrame(C){let M=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const x=this._animation.getKeys();C<x[0].frame?C=x[0].frame:C>x[x.length-1].frame&&(C=x[x.length-1].frame);const f=this._events;if(f.length)for(let z=0;z<f.length;z++)f[z].onlyOnce||(f[z].isDone=f[z].frame<C);this._currentFrame=C;const T=this._animation._interpolate(C,this._animationState);this.setValue(T,M)}_prepareForSpeedRatioChange(C){const M=this._previousElapsedTime*(this._animation.framePerSecond*C)/1e3;this._absoluteFrameOffset=this._previousAbsoluteFrame-M}animate(C,M,x,T,z){let s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:-1;const S=this._animation,m=S.targetPropertyPath;if(!m||m.length<1)return this._stopped=!0,!1;let Q=!0;(M<this._minFrame||M>this._maxFrame)&&(M=this._minFrame),(x<this._minFrame||x>this._maxFrame)&&(x=this._maxFrame);const V=x-M;let y,U=C*(S.framePerSecond*z)/1e3+this._absoluteFrameOffset,O=0,d=!1;const D=T&&this._animationState.loopMode===f.b.ANIMATIONLOOPMODE_YOYO;if(D){const C=(U-M)/V,x=Math.sin(C*Math.PI);U=Math.abs(x)*V+M;const f=x>=0?1:-1;this._yoyoDirection!==f&&(d=!0),this._yoyoDirection=f}if(this._previousElapsedTime=C,this._previousAbsoluteFrame=U,!T&&x>=M&&(U>=V&&z>0||U<=0&&z<0))Q=!1,O=S._getKeyValue(this._maxValue);else if(!T&&M>=x&&(U<=V&&z<0||U>=0&&z>0))Q=!1,O=S._getKeyValue(this._minValue);else if(this._animationState.loopMode!==f.b.ANIMATIONLOOPMODE_CYCLE){const C=x.toString()+M.toString();if(!this._offsetsCache[C]){this._animationState.repeatCount=0,this._animationState.loopMode=f.b.ANIMATIONLOOPMODE_CYCLE;const T=S._interpolate(M,this._animationState),z=S._interpolate(x,this._animationState);switch(this._animationState.loopMode=this._getCorrectLoopMode(),S.dataType){case f.b.ANIMATIONTYPE_FLOAT:this._offsetsCache[C]=z-T;break;case f.b.ANIMATIONTYPE_QUATERNION:case f.b.ANIMATIONTYPE_VECTOR3:case f.b.ANIMATIONTYPE_VECTOR2:case f.b.ANIMATIONTYPE_SIZE:case f.b.ANIMATIONTYPE_COLOR3:this._offsetsCache[C]=z.rc(T)}this._highLimitsCache[C]=z}O=this._highLimitsCache[C],y=this._offsetsCache[C]}if(void 0===y)switch(S.dataType){case f.b.ANIMATIONTYPE_FLOAT:y=0;break;case f.b.ANIMATIONTYPE_QUATERNION:y=f.g;break;case f.b.ANIMATIONTYPE_VECTOR3:y=f.q;break;case f.b.ANIMATIONTYPE_VECTOR2:y=f.n;break;case f.b.ANIMATIONTYPE_SIZE:y=f.k;break;case f.b.ANIMATIONTYPE_COLOR3:y=f.c;break;case f.b.ANIMATIONTYPE_COLOR4:y=f.d}let o;if(this._host&&this._host.syncRoot){const C=this._host.syncRoot;o=M+V*((C.masterFrame-C.fromFrame)/(C.toFrame-C.fromFrame))}else o=U>0&&M>x||U<0&&M<x?Q&&0!==V?x+U%V:M:Q&&0!==V?M+U%V:x;const L=this._events;if(!D&&(z>0&&this.currentFrame>o||z<0&&this.currentFrame<o)||D&&d){this._onLoop();for(let C=0;C<L.length;C++)L[C].onlyOnce||(L[C].isDone=!1);this._animationState.key=z>0?0:S.getKeys().length-1}this._currentFrame=o,this._animationState.repeatCount=0===V?0:U/V|0,this._animationState.highLimitValue=O,this._animationState.offsetValue=y;const t=S._interpolate(o,this._animationState);if(this.setValue(t,s),L.length)for(let f=0;f<L.length;f++)if(V>=0&&o>=L[f].frame&&L[f].frame>=M||V<0&&o<=L[f].frame&&L[f].frame<=M){const C=L[f];C.isDone||(C.onlyOnce&&(L.splice(f,1),f--),C.isDone=!0,C.action(o))}return Q||(this._stopped=!0),Q}}var V=x(1118);class y{get syncRoot(){return this._syncRoot}get masterFrame(){return 0===this._runtimeAnimations.length?0:this._runtimeAnimations[0].currentFrame}get weight(){return this._weight}set weight(C){this._weight=-1!==C?Math.min(Math.max(C,0),1):-1}get speedRatio(){return this._speedRatio}set speedRatio(C){for(let M=0;M<this._runtimeAnimations.length;M++){this._runtimeAnimations[M]._prepareForSpeedRatioChange(C)}this._speedRatio=C,null!==this._goToFrame&&this.goToFrame(this._goToFrame)}get elapsedTime(){return null===this._localDelayOffset?0:this._scene._animationTime-this._localDelayOffset}constructor(C,M){let x=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,f=arguments.length>3&&void 0!==arguments[3]?arguments[3]:100,z=arguments.length>4&&void 0!==arguments[4]&&arguments[4],s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,S=arguments.length>6?arguments[6]:void 0,m=arguments.length>7?arguments[7]:void 0,Q=arguments.length>8?arguments[8]:void 0,V=arguments.length>9&&void 0!==arguments[9]&&arguments[9],y=arguments.length>10&&void 0!==arguments[10]?arguments[10]:0;this.target=M,this.fromFrame=x,this.toFrame=f,this.loopAnimation=z,this.onAnimationEnd=S,this.onAnimationLoop=Q,this.isAdditive=V,this.playOrder=y,this._localDelayOffset=null,this._pausedDelay=null,this._manualJumpDelay=null,this._runtimeAnimations=new Array,this.vf=!1,this._speedRatio=1,this._weight=-1,this._syncRoot=null,this._frameToSyncFromJump=null,this._goToFrame=null,this.disposeOnEnd=!0,this.animationStarted=!1,this.onAnimationEndObservable=new T.c,this.onAnimationLoopObservable=new T.c,this._scene=C,m&&this.appendAnimations(M,m),this._speedRatio=s,C._activeAnimatables.push(this)}syncWith(C){if(this._syncRoot=C,C){const C=this._scene._activeAnimatables.indexOf(this);C>-1&&(this._scene._activeAnimatables.splice(C,1),this._scene._activeAnimatables.push(this))}return this}getAnimations(){return this._runtimeAnimations}appendAnimations(C,M){for(let x=0;x<M.length;x++){const f=M[x],T=new Q(C,f,this._scene,this);T._onLoop=()=>{this.onAnimationLoopObservable.notifyObservers(this),this.onAnimationLoop&&this.onAnimationLoop()},this._runtimeAnimations.push(T)}}getAnimationByTargetProperty(C){const M=this._runtimeAnimations;for(let x=0;x<M.length;x++)if(M[x].animation.targetProperty===C)return M[x].animation;return null}getRuntimeAnimationByTargetProperty(C){const M=this._runtimeAnimations;for(let x=0;x<M.length;x++)if(M[x].animation.targetProperty===C)return M[x];return null}reset(){const C=this._runtimeAnimations;for(let M=0;M<C.length;M++)C[M].reset(!0);this._localDelayOffset=null,this._pausedDelay=null}enableBlending(C){const M=this._runtimeAnimations;for(let x=0;x<M.length;x++)M[x].animation.enableBlending=!0,M[x].animation.blendingSpeed=C}disableBlending(){const C=this._runtimeAnimations;for(let M=0;M<C.length;M++)C[M].animation.enableBlending=!1}goToFrame(C){const M=this._runtimeAnimations;if(M[0]){const x=M[0].animation.framePerSecond;this._frameToSyncFromJump=this._frameToSyncFromJump??M[0].currentFrame;const f=0===this.speedRatio?0:(C-this._frameToSyncFromJump)/x*1e3/this.speedRatio;this._manualJumpDelay=-f}for(let x=0;x<M.length;x++)M[x].goToFrame(C,this._weight);this._goToFrame=C}get paused(){return this.vf}pause(){this.vf||(this.vf=!0)}restart(){this.vf=!1}_raiseOnAnimationEnd(){this.onAnimationEnd&&this.onAnimationEnd(),this.onAnimationEndObservable.notifyObservers(this)}stop(C,M){let x=arguments.length>2&&void 0!==arguments[2]&&arguments[2],f=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(C||M){const T=this._scene._activeAnimatables.indexOf(this);if(T>-1){const z=this._runtimeAnimations;for(let x=z.length-1;x>=0;x--){const f=z[x];C&&f.animation.name!=C||(M&&!M(f.target)||(f.dispose(),z.splice(x,1)))}0==z.length&&(x||this._scene._activeAnimatables.splice(T,1),f||this._raiseOnAnimationEnd())}}else{const C=this._scene._activeAnimatables.indexOf(this);if(C>-1){x||this._scene._activeAnimatables.splice(C,1);const M=this._runtimeAnimations;for(let C=0;C<M.length;C++)M[C].dispose();this._runtimeAnimations.length=0,f||this._raiseOnAnimationEnd()}}}waitAsync(){return new Promise((C=>{this.onAnimationEndObservable.add((()=>{C(this)}),void 0,void 0,this,!0)}))}_animate(C){if(this.vf)return this.animationStarted=!1,null===this._pausedDelay&&(this._pausedDelay=C),!0;if(null===this._localDelayOffset?(this._localDelayOffset=C,this._pausedDelay=null):null!==this._pausedDelay&&(this._localDelayOffset+=C-this._pausedDelay,this._pausedDelay=null),null!==this._manualJumpDelay&&(this._localDelayOffset+=this._manualJumpDelay,this._manualJumpDelay=null,this._frameToSyncFromJump=null),this._goToFrame=null,0===this._weight)return!0;let M=!1;const x=this._runtimeAnimations;let f;for(f=0;f<x.length;f++){const T=x[f].animate(C-this._localDelayOffset,this.fromFrame,this.toFrame,this.loopAnimation,this._speedRatio,this._weight);M=M||T}if(this.animationStarted=M,!M){if(this.disposeOnEnd)for(f=this._scene._activeAnimatables.indexOf(this),this._scene._activeAnimatables.splice(f,1),f=0;f<x.length;f++)x[f].dispose();this._raiseOnAnimationEnd(),this.disposeOnEnd&&(this.onAnimationEnd=null,this.onAnimationLoop=null,this.onAnimationLoopObservable.clear(),this.onAnimationEndObservable.clear())}return M}}function U(C){if(0===C.totalWeight&&0===C.totalAdditiveWeight)return C.originalValue;let M=1;const x=m.i.Md[0],f=m.i.Md[1],T=m.i.Quaternion[0];let z=0;const s=C.animations[0],S=C.originalValue;let Q=1,V=!1;if(C.totalWeight<1)Q=1-C.totalWeight,S.decompose(f,T,x);else{if(z=1,M=C.totalWeight,Q=s.weight/M,1==Q){if(!C.totalAdditiveWeight)return s.currentValue;V=!0}s.currentValue.decompose(f,T,x)}if(!V){f.scaleInPlace(Q),x.scaleInPlace(Q),T.scaleInPlace(Q);for(let s=z;s<C.animations.length;s++){const z=C.animations[s];if(0===z.weight)continue;Q=z.weight/M;const S=m.i.Md[2],V=m.i.Md[3],y=m.i.Quaternion[1];z.currentValue.decompose(V,y,S),V.scaleAndAddToRef(Q,f),y.scaleAndAddToRef(m.h.Dot(T,y)>0?Q:-Q,T),S.scaleAndAddToRef(Q,x)}T.normalize()}for(let U=0;U<C.additiveAnimations.length;U++){const M=C.additiveAnimations[U];if(0===M.weight)continue;const z=m.i.Md[2],s=m.i.Md[3],S=m.i.Quaternion[1];M.currentValue.decompose(s,S,z),s.multiplyToRef(f,s),m.m.LerpToRef(f,s,M.weight,f),T.multiplyToRef(S,S),m.h.SlerpToRef(T,S,M.weight,T),z.scaleAndAddToRef(M.weight,x)}const y=s?s._animationState.workValue:m.i.Matrix[0].clone();return m.d.ComposeToRef(f,T,x,y),y}function O(C,M){if(0===C.totalWeight&&0===C.totalAdditiveWeight)return M;const x=C.animations[0],f=C.originalValue;let T=M;if(0===C.totalWeight&&C.totalAdditiveWeight>0)T.p(f);else if(1===C.animations.length){if(m.h.SlerpToRef(f,x.currentValue,Math.min(1,C.totalWeight),T),0===C.totalAdditiveWeight)return T}else if(C.animations.length>1){let x,z,s=1;if(C.totalWeight<1){const M=1-C.totalWeight;x=[],z=[],x.push(f),z.push(M)}else{if(2===C.animations.length&&(m.h.SlerpToRef(C.animations[0].currentValue,C.animations[1].currentValue,C.animations[1].weight/C.totalWeight,M),0===C.totalAdditiveWeight))return M;x=[],z=[],s=C.totalWeight}for(let M=0;M<C.animations.length;M++){const f=C.animations[M];x.push(f.currentValue),z.push(f.weight/s)}let S=0;for(let C=0;C<x.length;)C?(S+=z[C],m.h.SlerpToRef(T,x[C],z[C]/S,T),C++):(m.h.SlerpToRef(x[C],x[C+1],z[C+1]/(z[C]+z[C+1]),M),T=M,S=z[C]+z[C+1],C+=2)}for(let z=0;z<C.additiveAnimations.length;z++){const M=C.additiveAnimations[z];0!==M.weight&&(T.multiplyToRef(M.currentValue,m.i.Quaternion[0]),m.h.SlerpToRef(T,m.i.Quaternion[0],M.weight,T))}return T}var d,D,o=x(1190);d=o.e,(D=S.c)&&(D.prototype.copyAnimationRange=function(C,M,x){let T=arguments.length>3&&void 0!==arguments[3]&&arguments[3],z=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;0===this.animations.length&&(this.animations.push(new f.b(this.name,"_matrix",C.animations[0].framePerSecond,f.b.ANIMATIONTYPE_MATRIX,0)),this.animations[0].setKeys([]));const s=C.animations[0].getRange(M);if(!s)return!1;const S=s.from,m=s.to,Q=C.animations[0].getKeys(),V=C.length,y=C.getParent(),U=this.getParent(),O=T&&y&&V&&this.length&&V!==this.length,d=O&&U&&y?U.length/y.length:1,D=T&&!U&&z&&(1!==z.x||1!==z.y||1!==z.z),o=this.animations[0].getKeys();let L,t,A;for(let f=0,H=Q.length;f<H;f++)L=Q[f],L.frame>=S&&L.frame<=m&&(T?(A=L.value.clone(),O?(t=A.getTranslation(),A.setTranslation(t.scaleInPlace(d))):D&&z?(t=A.getTranslation(),A.setTranslation(t.multiplyInPlace(z))):A=L.value):A=L.value,o.push({frame:L.frame+x,value:A}));return this.animations[0].createRange(M,S+x,m+x),!0}),d&&(d.prototype._animate=function(C){if(!this.animationsEnabled)return;const M=V.e.Now;if(!this._animationTimeLast){if(this._pendingData.length>0)return;this._animationTimeLast=M}this.deltaTime=void 0!==C?C:this.useConstantAnimationDeltaTime?16:(M-this._animationTimeLast)*this.animationTimeScale,this._animationTimeLast=M;const x=this._activeAnimatables;if(0===x.length)return;this._animationTime+=this.deltaTime;const T=this._animationTime;for(let f=0;f<x.length;f++){const C=x[f];!C._animate(T)&&C.disposeOnEnd&&f--}!function(C){if(C._registeredForLateAnimationBindings.length){for(let M=0;M<C._registeredForLateAnimationBindings.length;M++){const x=C._registeredForLateAnimationBindings.data[M];for(const C in x._lateAnimationHolders){const M=x._lateAnimationHolders[C],T=M.animations[0],z=M.originalValue;if(void 0===z||null===z)continue;const s=f.b.AllowMatrixDecomposeForInterpolation&&z.m;let S=x[C];if(s)S=U(M);else if(void 0!==z.w)S=O(M,S||m.h.Identity());else{let C=0,x=1;const s=T&&T._animationState.loopMode===f.b.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT;if(M.totalWeight<1)S=s?z.clone?z.clone():z:T&&z.scale?z.scale(1-M.totalWeight):T?z*(1-M.totalWeight):z.clone?z.clone():z;else if(T){x=M.totalWeight;const f=T.weight/x;S=1!==f?T.currentValue.scale?T.currentValue.scale(f):T.currentValue*f:T.currentValue,s&&(S.addToRef?S.addToRef(z,S):S+=z),C=1}for(let f=C;f<M.animations.length;f++){const C=M.animations[f],T=C.weight/x;T&&(C.currentValue.scaleAndAddToRef?C.currentValue.scaleAndAddToRef(T,S):S+=C.currentValue*T)}for(let f=0;f<M.additiveAnimations.length;f++){const C=M.additiveAnimations[f],x=C.weight;x&&(C.currentValue.scaleAndAddToRef?C.currentValue.scaleAndAddToRef(x,S):S+=C.currentValue*x)}}x[C]=S}x._lateAnimationHolders={}}C._registeredForLateAnimationBindings.reset()}}(this)},d.prototype.sortActiveAnimatables=function(){this._activeAnimatables.sort(((C,M)=>C.playOrder-M.playOrder))},d.prototype.beginWeightedAnimation=function(C,M,x){let f=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,T=arguments.length>4?arguments[4]:void 0,z=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,s=arguments.length>6?arguments[6]:void 0,S=arguments.length>7?arguments[7]:void 0,m=arguments.length>8?arguments[8]:void 0,Q=arguments.length>9?arguments[9]:void 0,V=arguments.length>10&&void 0!==arguments[10]&&arguments[10];const y=this.beginAnimation(C,M,x,T,z,s,S,!1,m,Q,V);return y.weight=f,y},d.prototype.beginAnimation=function(C,M,x,f){let T=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,z=arguments.length>5?arguments[5]:void 0,s=arguments.length>6?arguments[6]:void 0,S=!(arguments.length>7&&void 0!==arguments[7])||arguments[7],m=arguments.length>8?arguments[8]:void 0,Q=arguments.length>9?arguments[9]:void 0,V=arguments.length>10&&void 0!==arguments[10]&&arguments[10];if(T<0){const C=M;M=x,x=C,T=-T}M>x&&(T=-T),S&&this.stopAnimation(C,void 0,m),s||(s=new y(this,C,M,x,f,T,z,void 0,Q,V));const U=!m||m(C);if(C.animations&&U&&s.appendAnimations(C,C.animations),C.getAnimatables){const V=C.getAnimatables();for(let C=0;C<V.length;C++)this.beginAnimation(V[C],M,x,f,T,z,s,S,m,Q)}return s.reset(),s},d.prototype.beginHierarchyAnimation=function(C,M,x,f,T){let z=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,s=arguments.length>6?arguments[6]:void 0,S=arguments.length>7?arguments[7]:void 0,m=!(arguments.length>8&&void 0!==arguments[8])||arguments[8],Q=arguments.length>9?arguments[9]:void 0,V=arguments.length>11&&void 0!==arguments[11]&&arguments[11];const y=C.getDescendants(M),U=[];U.push(this.beginAnimation(C,x,f,T,z,s,S,m,Q,void 0,V));for(const O of y)U.push(this.beginAnimation(O,x,f,T,z,s,S,m,Q,void 0,V));return U},d.prototype.beginDirectAnimation=function(C,M,x,f,T){let z=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1;if(z<0){const C=x;x=f,f=C,z=-z}return x>f&&(z=-z),new y(this,C,x,f,T,z,arguments.length>6?arguments[6]:void 0,M,arguments.length>7?arguments[7]:void 0,arguments.length>8&&void 0!==arguments[8]&&arguments[8])},d.prototype.beginDirectHierarchyAnimation=function(C,M,x,f,T,z,s,S,m){let Q=arguments.length>9&&void 0!==arguments[9]&&arguments[9];const V=C.getDescendants(M),y=[];y.push(this.beginDirectAnimation(C,x,f,T,z,s,S,m,Q));for(const U of V)y.push(this.beginDirectAnimation(U,x,f,T,z,s,S,m,Q));return y},d.prototype.getAnimatableByTarget=function(C){for(let M=0;M<this._activeAnimatables.length;M++)if(this._activeAnimatables[M].target===C)return this._activeAnimatables[M];return null},d.prototype.getAllAnimatablesByTarget=function(C){const M=[];for(let x=0;x<this._activeAnimatables.length;x++)this._activeAnimatables[x].target===C&&M.push(this._activeAnimatables[x]);return M},d.prototype.stopAnimation=function(C,M,x){const f=this.getAllAnimatablesByTarget(C);for(const T of f)T.stop(M,x)},d.prototype.stopAllAnimations=function(){if(this._activeAnimatables){for(let C=0;C<this._activeAnimatables.length;C++)this._activeAnimatables[C].stop(void 0,void 0,!0);this._activeAnimatables.length=0}for(const C of this.animationGroups)C.stop()});class L{getClassName(){return"TargetedAnimation"}serialize(){const C={};return C.animation=this.animation.serialize(),C.targetId=this.target.id,C}}class t{get mask(){return this._mask}set mask(C){this._mask!==C&&(this._mask=C,this.syncWithMask(!0))}syncWithMask(){let C=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(this.mask||C){this._numActiveAnimatables=0;for(let C=0;C<this._animatables.length;++C){const M=this._animatables[C];!this.mask||this.mask.disabled||this.mask.retainsTarget(M.target.name)?(this._numActiveAnimatables++,M.paused&&M.restart()):M.paused||M.pause()}}else this._numActiveAnimatables=this._targetedAnimations.length}removeUnmaskedAnimations(){if(this.mask&&!this.mask.disabled){for(let C=0;C<this._animatables.length;++C){const M=this._animatables[C];this.mask.retainsTarget(M.target.name)||(M.stop(),this._animatables.splice(C,1),--C)}for(let C=0;C<this._targetedAnimations.length;C++){const M=this._targetedAnimations[C];this.mask.retainsTarget(M.target.name)||(this._targetedAnimations.splice(C,1),--C)}}}get from(){return this._from}set from(C){if(this._from!==C){this._from=C;for(let C=0;C<this._animatables.length;C++){this._animatables[C].fromFrame=this._from}}}get to(){return this._to}set to(C){if(this._to!==C){this._to=C;for(let C=0;C<this._animatables.length;C++){this._animatables[C].toFrame=this._to}}}get isStarted(){return this._isStarted}get isPlaying(){return this._isStarted&&!this._isPaused}get speedRatio(){return this._speedRatio}set speedRatio(C){if(this._speedRatio!==C){this._speedRatio=C;for(let C=0;C<this._animatables.length;C++){this._animatables[C].speedRatio=this._speedRatio}}}get loopAnimation(){return this._loopAnimation}set loopAnimation(C){if(this._loopAnimation!==C){this._loopAnimation=C;for(let C=0;C<this._animatables.length;C++){this._animatables[C].loopAnimation=this._loopAnimation}}}get isAdditive(){return this._isAdditive}set isAdditive(C){if(this._isAdditive!==C){this._isAdditive=C;for(let C=0;C<this._animatables.length;C++){this._animatables[C].isAdditive=this._isAdditive}}}get weight(){return this._weight}set weight(C){this._weight!==C&&(this._weight=C,this.setWeightForAllAnimatables(this._weight))}get targetedAnimations(){return this._targetedAnimations}get animatables(){return this._animatables}get children(){return this._targetedAnimations}get playOrder(){return this._playOrder}set playOrder(C){if(this._playOrder!==C&&(this._playOrder=C,this._animatables.length>0)){for(let C=0;C<this._animatables.length;C++)this._animatables[C].playOrder=this._playOrder;this._scene.sortActiveAnimatables()}}get enableBlending(){return this._enableBlending}set enableBlending(C){if(this._enableBlending!==C&&(this._enableBlending=C,null!==C))for(let M=0;M<this._targetedAnimations.length;++M)this._targetedAnimations[M].animation.enableBlending=C}get blendingSpeed(){return this._blendingSpeed}set blendingSpeed(C){if(this._blendingSpeed!==C&&(this._blendingSpeed=C,null!==C))for(let M=0;M<this._targetedAnimations.length;++M)this._targetedAnimations[M].animation.blendingSpeed=C}getLength(C,M){C=C??this._from;return((M=M??this._to)-C)/(this.targetedAnimations[0].animation.framePerSecond*this._speedRatio)}static MergeAnimationGroups(C){let M=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],x=arguments.length>2&&void 0!==arguments[2]&&arguments[2],f=arguments.length>3?arguments[3]:void 0;if(0===C.length)return null;f=f??C[0].weight;let T=Number.MAX_VALUE,z=-Number.MAX_VALUE;if(x)for(const S of C)S.from<T&&(T=S.from),S.to>z&&(z=S.to);const s=new t(C[0].name+"_merged",C[0]._scene,f);for(const S of C){x&&S.normalize(T,z);for(const C of S.targetedAnimations)s.addTargetedAnimation(C.animation,C.target);M&&S.dispose()}return s}constructor(C){let M=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,x=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,f=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;this.name=C,this._targetedAnimations=new Array,this._animatables=new Array,this._from=Number.MAX_VALUE,this._to=-Number.MAX_VALUE,this._speedRatio=1,this._loopAnimation=!1,this._isAdditive=!1,this._weight=-1,this._playOrder=0,this._enableBlending=null,this._blendingSpeed=null,this._numActiveAnimatables=0,this._shouldStart=!0,this._parentContainer=null,this.onAnimationEndObservable=new T.c,this.onAnimationLoopObservable=new T.c,this.onAnimationGroupLoopObservable=new T.c,this.onAnimationGroupEndObservable=new T.c,this.onAnimationGroupPauseObservable=new T.c,this.onAnimationGroupPlayObservable=new T.c,this.metadata=null,this._mask=null,this._animationLoopFlags=[],this._scene=M||z.c.LastCreatedScene,this._weight=x,this._playOrder=f,this.uniqueId=this._scene.getUniqueId(),this._scene.addAnimationGroup(this)}addTargetedAnimation(C,M){const x=new L;x.animation=C,x.target=M;const f=C.getKeys();return this._from>f[0].frame&&(this._from=f[0].frame),this._to<f[f.length-1].frame&&(this._to=f[f.length-1].frame),null!==this._enableBlending&&(C.enableBlending=this._enableBlending),null!==this._blendingSpeed&&(C.blendingSpeed=this._blendingSpeed),this._targetedAnimations.push(x),this._shouldStart=!0,x}removeTargetedAnimation(C){for(let M=this._targetedAnimations.length-1;M>-1;M--){this._targetedAnimations[M].animation===C&&this._targetedAnimations.splice(M,1)}}normalize(){let C=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,M=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;null==C&&(C=this._from),null==M&&(M=this._to);for(let x=0;x<this._targetedAnimations.length;x++){const f=this._targetedAnimations[x].animation.getKeys(),T=f[0],z=f[f.length-1];if(T.frame>C){const M={frame:C,value:T.value,inTangent:T.inTangent,outTangent:T.outTangent,interpolation:T.interpolation};f.splice(0,0,M)}if(z.frame<M){const C={frame:M,value:z.value,inTangent:z.inTangent,outTangent:z.outTangent,interpolation:z.interpolation};f.push(C)}}return this._from=C,this._to=M,this}_processLoop(C,M,x){C.onAnimationLoop=()=>{this.onAnimationLoopObservable.notifyObservers(M),this._animationLoopFlags[x]||(this._animationLoopFlags[x]=!0,this._animationLoopCount++,this._animationLoopCount===this._numActiveAnimatables&&(this.onAnimationGroupLoopObservable.notifyObservers(this),this._animationLoopCount=0,this._animationLoopFlags.length=0))}}start(){let C=arguments.length>0&&void 0!==arguments[0]&&arguments[0],M=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,x=arguments.length>2?arguments[2]:void 0,f=arguments.length>3?arguments[3]:void 0,T=arguments.length>4?arguments[4]:void 0;if(this._isStarted||0===this._targetedAnimations.length)return this;this._loopAnimation=C,this._shouldStart=!1,this._animationLoopCount=0,this._animationLoopFlags.length=0;for(let z=0;z<this._targetedAnimations.length;z++){const s=this._targetedAnimations[z],S=this._scene.beginDirectAnimation(s.target,[s.animation],void 0!==x?x:this._from,void 0!==f?f:this._to,C,M,void 0,void 0,void 0!==T?T:this._isAdditive);S.weight=this._weight,S.playOrder=this._playOrder,S.onAnimationEnd=()=>{this.onAnimationEndObservable.notifyObservers(s),this._checkAnimationGroupEnded(S)},this._processLoop(S,s,z),this._animatables.push(S)}return this.syncWithMask(),this._scene.sortActiveAnimatables(),this._speedRatio=M,this._isStarted=!0,this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}pause(){if(!this._isStarted)return this;this._isPaused=!0;for(let C=0;C<this._animatables.length;C++){this._animatables[C].pause()}return this.onAnimationGroupPauseObservable.notifyObservers(this),this}play(C){return this.isStarted&&this._animatables.length&&!this._shouldStart?(void 0!==C&&(this.loopAnimation=C),this.restart()):(this.stop(),this.start(C,this._speedRatio)),this}reset(){if(!this._isStarted)return this.play(),this.goToFrame(0),this.stop(!0),this;for(let C=0;C<this._animatables.length;C++){this._animatables[C].reset()}return this}restart(){if(!this._isStarted)return this;for(let C=0;C<this._animatables.length;C++){this._animatables[C].restart()}return this.syncWithMask(),this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}stop(){let C=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this._isStarted)return this;const M=this._animatables.slice();for(let f=0;f<M.length;f++)M[f].stop(void 0,void 0,!0,C);let x=0;for(let f=0;f<this._scene._activeAnimatables.length;f++){const M=this._scene._activeAnimatables[f];M._runtimeAnimations.length>0?this._scene._activeAnimatables[x++]=M:C&&this._checkAnimationGroupEnded(M,C)}return this._scene._activeAnimatables.length=x,this._isStarted=!1,this}setWeightForAllAnimatables(C){for(let M=0;M<this._animatables.length;M++){this._animatables[M].weight=C}return this}syncAllAnimationsWith(C){for(let M=0;M<this._animatables.length;M++){this._animatables[M].syncWith(C)}return this}goToFrame(C){if(!this._isStarted)return this;for(let M=0;M<this._animatables.length;M++){this._animatables[M].goToFrame(C)}return this}getCurrentFrame(){var C;return(null===(C=this.animatables[0])||void 0===C?void 0:C.masterFrame)||0}dispose(){this.isStarted&&this.stop(),this._targetedAnimations.length=0,this._animatables.length=0;const C=this._scene.animationGroups.indexOf(this);if(C>-1&&this._scene.animationGroups.splice(C,1),this._parentContainer){const C=this._parentContainer.animationGroups.indexOf(this);C>-1&&this._parentContainer.animationGroups.splice(C,1),this._parentContainer=null}this.onAnimationEndObservable.clear(),this.onAnimationGroupEndObservable.clear(),this.onAnimationGroupPauseObservable.clear(),this.onAnimationGroupPlayObservable.clear(),this.onAnimationLoopObservable.clear(),this.onAnimationGroupLoopObservable.clear()}_checkAnimationGroupEnded(C){let M=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const x=this._animatables.indexOf(C);x>-1&&this._animatables.splice(x,1),0===this._animatables.length&&(this._isStarted=!1,M||this.onAnimationGroupEndObservable.notifyObservers(this))}clone(C,M){let x=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const f=new t(C||this.name,this._scene,this._weight,this._playOrder);f._from=this.from,f._to=this.to,f._speedRatio=this.speedRatio,f._loopAnimation=this.loopAnimation,f._isAdditive=this.isAdditive,f._enableBlending=this.enableBlending,f._blendingSpeed=this.blendingSpeed,f.metadata=this.metadata,f.mask=this.mask;for(const T of this._targetedAnimations)f.addTargetedAnimation(x?T.animation.clone():T.animation,M?M(T.target):T.target);return f}serialize(){const C={};C.name=this.name,C.from=this.from,C.to=this.to,C.speedRatio=this.speedRatio,C.loopAnimation=this.loopAnimation,C.isAdditive=this.isAdditive,C.weight=this.weight,C.playOrder=this.playOrder,C.enableBlending=this.enableBlending,C.blendingSpeed=this.blendingSpeed,C.targetedAnimations=[];for(let M=0;M<this.targetedAnimations.length;M++){const x=this.targetedAnimations[M];C.targetedAnimations[M]=x.serialize()}return s.d&&s.d.HasTags(this)&&(C.tags=s.d.GetTags(this)),this.metadata&&(C.metadata=this.metadata),C}static Parse(C,M){const x=new t(C.name,M,C.weight,C.playOrder);for(let T=0;T<C.targetedAnimations.length;T++){const z=C.targetedAnimations[T],s=f.b.Parse(z.animation),S=z.targetId;if("influence"===z.animation.property){const C=M.getMorphTargetById(S);C&&x.addTargetedAnimation(s,C)}else{const C=M.getNodeById(S);null!=C&&x.addTargetedAnimation(s,C)}}return s.d&&s.d.AddTagsTo(x,C.tags),null!==C.from&&null!==C.to&&x.normalize(C.from,C.to),void 0!==C.speedRatio&&(x._speedRatio=C.speedRatio),void 0!==C.loopAnimation&&(x._loopAnimation=C.loopAnimation),void 0!==C.isAdditive&&(x._isAdditive=C.isAdditive),void 0!==C.weight&&(x._weight=C.weight),void 0!==C.playOrder&&(x._playOrder=C.playOrder),void 0!==C.enableBlending&&(x._enableBlending=C.enableBlending),void 0!==C.blendingSpeed&&(x._blendingSpeed=C.blendingSpeed),void 0!==C.metadata&&(x.metadata=C.metadata),x}static MakeAnimationAdditive(C,M,x){let T;T="object"===typeof M?M:{referenceFrame:M,range:x,cloneOriginalAnimationGroup:arguments.length>3&&void 0!==arguments[3]&&arguments[3],clonedAnimationName:arguments.length>4?arguments[4]:void 0};let z=C;T.cloneOriginalAnimationGroup&&(z=C.clone(T.clonedAnimationGroupName||z.name));const s=z.targetedAnimations;for(let S=0;S<s.length;S++){const C=s[S];C.animation=f.b.MakeAnimationAdditive(C.animation,T)}if(z.isAdditive=!0,T.clipKeys){let C=Number.MAX_VALUE,M=-Number.MAX_VALUE;const x=z.targetedAnimations;for(let f=0;f<x.length;f++){const T=x[f].animation.getKeys();C>T[0].frame&&(C=T[0].frame),M<T[T.length-1].frame&&(M=T[T.length-1].frame)}z._from=C,z._to=M}return z}static ClipKeys(C,M,x,f,T){const z=C.clone(f||C.name);return t.ClipKeysInPlace(z,M,x,T)}static ClipKeysInPlace(C,M,x,f){return t.ClipInPlace(C,M,x,f,!1)}static ClipFrames(C,M,x,f,T){const z=C.clone(f||C.name);return t.ClipFramesInPlace(z,M,x,T)}static ClipFramesInPlace(C,M,x,f){return t.ClipInPlace(C,M,x,f,!0)}static ClipInPlace(C,M,x,f){let T=arguments.length>4&&void 0!==arguments[4]&&arguments[4],z=Number.MAX_VALUE,s=-Number.MAX_VALUE;const S=C.targetedAnimations;for(let m=0;m<S.length;m++){const C=S[m],Q=f?C.animation:C.animation.clone();T&&(Q.createKeyForFrame(M),Q.createKeyForFrame(x));const V=Q.getKeys(),y=[];let U=Number.MAX_VALUE;for(let f=0;f<V.length;f++){const C=V[f];if(!T&&f>=M&&f<=x||T&&C.frame>=M&&C.frame<=x){const M={frame:C.frame,value:C.value.clone?C.value.clone():C.value,inTangent:C.inTangent,outTangent:C.outTangent,interpolation:C.interpolation,lockedTangent:C.lockedTangent};U===Number.MAX_VALUE&&(U=M.frame),M.frame-=U,y.push(M)}}0!==y.length?(z>y[0].frame&&(z=y[0].frame),s<y[y.length-1].frame&&(s=y[y.length-1].frame),Q.setKeys(y,!0),C.animation=Q):(S.splice(m,1),m--)}return C._from=z,C._to=s,C}getClassName(){return"AnimationGroup"}toString(C){let M="Name: "+this.name;return M+=", type: "+this.getClassName(),C&&(M+=", from: "+this._from,M+=", to: "+this._to,M+=", isStarted: "+this._isStarted,M+=", speedRatio: "+this._speedRatio,M+=", targetedAnimations length: "+this._targetedAnimations.length,M+=", animatables length: "+this._animatables),M}}}}]);