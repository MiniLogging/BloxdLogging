"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[94],{14235:(q,c,U)=>{U.r(c),U.d(c,{FlowGraphSetPropertyBlock:()=>g});var J=U(12699),Q=U(12648),s=U(10850);class g extends J.e{constructor(q){super(q),this.config=q,this.object=this.registerDataInput("object",Q.c,q.target),this.value=this.registerDataInput("value",Q.c),this.propertyName=this.registerDataInput("propertyName",Q.c,q.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",Q.c)}_execute(q,c){try{const c=this.object.getValue(q),U=this.value.getValue(q),J=this.propertyName.getValue(q);this._stopRunningAnimations(q,c,J);const Q=this.customSetFunction.getValue(q);Q?Q(c,J,U,q):this._setPropertyValue(c,J,U)}catch(U){this._reportError(q,U)}this.out._activateSignal(q)}_stopRunningAnimations(q,c,U){const J=q._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const Q of J){const s=q.assetsContext.animationGroups.find((q=>q.uniqueId===Q));if(s)for(const g of s.targetedAnimations)if(g.target===c&&g.animation.targetProperty===U){s.stop(!0),s.dispose();const c=J.indexOf(Q);-1!==c&&(J.splice(c,1),q._setGlobalContextVariable("currentlyRunningAnimationGroups",J))}}}_setPropertyValue(q,c,U){const J=c.split(".");let Q=q;for(let s=0;s<J.length-1;s++){const q=J[s];void 0===Q[q]&&(Q[q]={}),Q=Q[q]}Q[J[J.length-1]]=U}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,s.f)("FlowGraphSetPropertyBlock",g)}}]);