"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[94],{14498:(Z,c,L)=>{L.r(c),L.d(c,{FlowGraphSetPropertyBlock:()=>G});var k=L(12875),N=L(12825),R=L(11012);class G extends k.e{constructor(Z){super(Z),this.config=Z,this.object=this.registerDataInput("object",N.e,Z.target),this.value=this.registerDataInput("value",N.e),this.propertyName=this.registerDataInput("propertyName",N.e,Z.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",N.e)}_execute(Z,c){try{const c=this.object.getValue(Z),L=this.value.getValue(Z),k=this.propertyName.getValue(Z);this._stopRunningAnimations(Z,c,k);const N=this.customSetFunction.getValue(Z);N?N(c,k,L,Z):this._setPropertyValue(c,k,L)}catch(L){this._reportError(Z,L)}this.out._activateSignal(Z)}_stopRunningAnimations(Z,c,L){const k=Z._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const N of k){const R=Z.assetsContext.animationGroups.find((Z=>Z.uniqueId===N));if(R)for(const G of R.targetedAnimations)if(G.target===c&&G.animation.targetProperty===L){R.stop(!0),R.dispose();const c=k.indexOf(N);-1!==c&&(k.splice(c,1),Z._setGlobalContextVariable("currentlyRunningAnimationGroups",k))}}}_setPropertyValue(Z,c,L){const k=c.split(".");let N=Z;for(let R=0;R<k.length-1;R++){const Z=k[R];void 0===N[Z]&&(N[Z]={}),N=N[Z]}N[k[k.length-1]]=L}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,R.g)("FlowGraphSetPropertyBlock",G)}}]);