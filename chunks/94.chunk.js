"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[94],{14384:(s,Z,o)=>{o.r(Z),o.d(Z,{FlowGraphSetPropertyBlock:()=>a});var t=o(12831),j=o(12775),S=o(10916);class a extends t.b{constructor(s){super(s),this.config=s,this.object=this.registerDataInput("object",j.d,s.target),this.value=this.registerDataInput("value",j.d),this.propertyName=this.registerDataInput("propertyName",j.d,s.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",j.d)}_execute(s,Z){try{const Z=this.object.getValue(s),o=this.value.getValue(s),t=this.propertyName.getValue(s);this._stopRunningAnimations(s,Z,t);const j=this.customSetFunction.getValue(s);j?j(Z,t,o,s):this._setPropertyValue(Z,t,o)}catch(o){this._reportError(s,o)}this.out._activateSignal(s)}_stopRunningAnimations(s,Z,o){const t=s._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const j of t){const S=s.assetsContext.animationGroups.find((s=>s.uniqueId===j));if(S)for(const a of S.targetedAnimations)if(a.target===Z&&a.animation.targetProperty===o){S.stop(!0),S.dispose();const Z=t.indexOf(j);-1!==Z&&(t.splice(Z,1),s._setGlobalContextVariable("currentlyRunningAnimationGroups",t))}}}_setPropertyValue(s,Z,o){const t=Z.split(".");let j=s;for(let S=0;S<t.length-1;S++){const s=t[S];void 0===j[s]&&(j[s]={}),j=j[s]}j[t[t.length-1]]=o}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,S.f)("FlowGraphSetPropertyBlock",a)}}]);