"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[94],{14298:(q,f,j)=>{j.r(f),j.d(f,{FlowGraphSetPropertyBlock:()=>L});var d=j(12752),g=j(12709),h=j(10965);class L extends d.c{constructor(q){super(q),this.config=q,this.object=this.registerDataInput("object",g.c,q.target),this.value=this.registerDataInput("value",g.c),this.propertyName=this.registerDataInput("propertyName",g.c,q.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",g.c)}_execute(q,f){try{const f=this.object.getValue(q),j=this.value.getValue(q),d=this.propertyName.getValue(q);this._stopRunningAnimations(q,f,d);const g=this.customSetFunction.getValue(q);g?g(f,d,j,q):this._setPropertyValue(f,d,j)}catch(j){this._reportError(q,j)}this.out._activateSignal(q)}_stopRunningAnimations(q,f,j){const d=q._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const g of d){const h=q.assetsContext.animationGroups.find((q=>q.uniqueId===g));if(h)for(const L of h.targetedAnimations)if(L.target===f&&L.animation.targetProperty===j){h.stop(!0),h.dispose();const f=d.indexOf(g);-1!==f&&(d.splice(f,1),q._setGlobalContextVariable("currentlyRunningAnimationGroups",d))}}}_setPropertyValue(q,f,j){const d=f.split(".");let g=q;for(let h=0;h<d.length-1;h++){const q=d[h];void 0===g[q]&&(g[q]={}),g=g[q]}g[d[d.length-1]]=j}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,h.f)("FlowGraphSetPropertyBlock",L)}}]);