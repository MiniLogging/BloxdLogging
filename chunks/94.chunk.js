"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[94],{14347:(x,O,Q)=>{Q.r(O),Q.d(O,{FlowGraphSetPropertyBlock:()=>V});var X=Q(12744),Z=Q(12707),n=Q(10866);class V extends X.d{constructor(x){super(x),this.config=x,this.object=this.registerDataInput("object",Z.d,x.target),this.value=this.registerDataInput("value",Z.d),this.propertyName=this.registerDataInput("propertyName",Z.d,x.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",Z.d)}_execute(x,O){try{const O=this.object.getValue(x),Q=this.value.getValue(x),X=this.propertyName.getValue(x);this._stopRunningAnimations(x,O,X);const Z=this.customSetFunction.getValue(x);Z?Z(O,X,Q,x):this._setPropertyValue(O,X,Q)}catch(Q){this._reportError(x,Q)}this.out._activateSignal(x)}_stopRunningAnimations(x,O,Q){const X=x._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const Z of X){const n=x.assetsContext.animationGroups.find((x=>x.uniqueId===Z));if(n)for(const V of n.targetedAnimations)if(V.target===O&&V.animation.targetProperty===Q){n.stop(!0),n.dispose();const O=X.indexOf(Z);-1!==O&&(X.splice(O,1),x._setGlobalContextVariable("currentlyRunningAnimationGroups",X))}}}_setPropertyValue(x,O,Q){const X=O.split(".");let Z=x;for(let n=0;n<X.length-1;n++){const x=X[n];void 0===Z[x]&&(Z[x]={}),Z=Z[x]}Z[X[X.length-1]]=Q}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,n.d)("FlowGraphSetPropertyBlock",V)}}]);