"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[94],{14134:(z,u,Y)=>{Y.r(u),Y.d(u,{FlowGraphSetPropertyBlock:()=>l});var H=Y(12580),E=Y(12531),J=Y(10918);class l extends H.e{constructor(z){super(z),this.config=z,this.object=this.registerDataInput("object",E.e,z.target),this.value=this.registerDataInput("value",E.e),this.propertyName=this.registerDataInput("propertyName",E.e,z.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",E.e)}_execute(z,u){try{const u=this.object.getValue(z),Y=this.value.getValue(z),H=this.propertyName.getValue(z);this._stopRunningAnimations(z,u,H);const E=this.customSetFunction.getValue(z);E?E(u,H,Y,z):this._setPropertyValue(u,H,Y)}catch(Y){this._reportError(z,Y)}this.out._activateSignal(z)}_stopRunningAnimations(z,u,Y){const H=z._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const E of H){const J=z.assetsContext.animationGroups.find((z=>z.uniqueId===E));if(J)for(const l of J.targetedAnimations)if(l.target===u&&l.animation.targetProperty===Y){J.stop(!0),J.dispose();const u=H.indexOf(E);-1!==u&&(H.splice(u,1),z._setGlobalContextVariable("currentlyRunningAnimationGroups",H))}}}_setPropertyValue(z,u,Y){const H=u.split(".");let E=z;for(let J=0;J<H.length-1;J++){const z=H[J];void 0===E[z]&&(E[z]={}),E=E[z]}E[H[H.length-1]]=Y}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,J.d)("FlowGraphSetPropertyBlock",l)}}]);