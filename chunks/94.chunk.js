"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[94],{14671:(G,V,W)=>{W.r(V),W.d(V,{FlowGraphSetPropertyBlock:()=>k});var J=W(13115),R=W(13071),d=W(11159);class k extends J.e{constructor(G){super(G),this.config=G,this.object=this.registerDataInput("object",R.b,G.target),this.value=this.registerDataInput("value",R.b),this.propertyName=this.registerDataInput("propertyName",R.b,G.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",R.b)}_execute(G,V){try{const V=this.object.getValue(G),W=this.value.getValue(G),J=this.propertyName.getValue(G);this._stopRunningAnimations(G,V,J);const R=this.customSetFunction.getValue(G);R?R(V,J,W,G):this._setPropertyValue(V,J,W)}catch(W){this._reportError(G,W)}this.out._activateSignal(G)}_stopRunningAnimations(G,V,W){const J=G._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const R of J){const d=G.assetsContext.animationGroups.find((G=>G.uniqueId===R));if(d)for(const k of d.targetedAnimations)if(k.target===V&&k.animation.targetProperty===W){d.stop(!0),d.dispose();const V=J.indexOf(R);-1!==V&&(J.splice(V,1),G._setGlobalContextVariable("currentlyRunningAnimationGroups",J))}}}_setPropertyValue(G,V,W){const J=V.split(".");let R=G;for(let d=0;d<J.length-1;d++){const G=J[d];void 0===R[G]&&(R[G]={}),R=R[G]}R[J[J.length-1]]=W}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,d.d)("FlowGraphSetPropertyBlock",k)}}]);