"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[94],{14542:(V,I,m)=>{m.r(I),m.d(I,{FlowGraphSetPropertyBlock:()=>F});var C=m(12934),l=m(12899),s=m(11048);class F extends C.d{constructor(V){super(V),this.config=V,this.object=this.registerDataInput("object",l.b,V.target),this.value=this.registerDataInput("value",l.b),this.propertyName=this.registerDataInput("propertyName",l.b,V.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",l.b)}_execute(V,I){try{const I=this.object.getValue(V),m=this.value.getValue(V),C=this.propertyName.getValue(V);this._stopRunningAnimations(V,I,C);const l=this.customSetFunction.getValue(V);l?l(I,C,m,V):this._setPropertyValue(I,C,m)}catch(m){this._reportError(V,m)}this.out._activateSignal(V)}_stopRunningAnimations(V,I,m){const C=V._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const l of C){const s=V.assetsContext.animationGroups.find((V=>V.uniqueId===l));if(s)for(const F of s.targetedAnimations)if(F.target===I&&F.animation.targetProperty===m){s.stop(!0),s.dispose();const I=C.indexOf(l);-1!==I&&(C.splice(I,1),V._setGlobalContextVariable("currentlyRunningAnimationGroups",C))}}}_setPropertyValue(V,I,m){const C=I.split(".");let l=V;for(let s=0;s<C.length-1;s++){const V=C[s];void 0===l[V]&&(l[V]={}),l=l[V]}l[C[C.length-1]]=m}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,s.h)("FlowGraphSetPropertyBlock",F)}}]);