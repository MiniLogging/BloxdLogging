"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[94],{14234:(h,d,m)=>{m.r(d),m.d(d,{FlowGraphSetPropertyBlock:()=>w});var j=m(12710),A=m(12671),b=m(11080);class w extends j.d{constructor(h){super(h),this.config=h,this.object=this.registerDataInput("object",A.e,h.target),this.value=this.registerDataInput("value",A.e),this.propertyName=this.registerDataInput("propertyName",A.e,h.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",A.e)}_execute(h,d){try{const d=this.object.getValue(h),m=this.value.getValue(h),j=this.propertyName.getValue(h);this._stopRunningAnimations(h,d,j);const A=this.customSetFunction.getValue(h);A?A(d,j,m,h):this._setPropertyValue(d,j,m)}catch(m){this._reportError(h,m)}this.out._activateSignal(h)}_stopRunningAnimations(h,d,m){const j=h._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const A of j){const b=h.assetsContext.animationGroups.find((h=>h.uniqueId===A));if(b)for(const w of b.targetedAnimations)if(w.target===d&&w.animation.targetProperty===m){b.stop(!0),b.dispose();const d=j.indexOf(A);-1!==d&&(j.splice(d,1),h._setGlobalContextVariable("currentlyRunningAnimationGroups",j))}}}_setPropertyValue(h,d,m){const j=d.split(".");let A=h;for(let b=0;b<j.length-1;b++){const h=j[b];void 0===A[h]&&(A[h]={}),A=A[h]}A[j[j.length-1]]=m}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,b.i)("FlowGraphSetPropertyBlock",w)}}]);