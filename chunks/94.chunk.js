"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[94],{14534:(w,p,e)=>{e.r(p),e.d(p,{FlowGraphSetPropertyBlock:()=>f});var r=e(12920),I=e(12872),d=e(11038);class f extends r.c{constructor(w){super(w),this.config=w,this.object=this.registerDataInput("object",I.c,w.target),this.value=this.registerDataInput("value",I.c),this.propertyName=this.registerDataInput("propertyName",I.c,w.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",I.c)}_execute(w,p){try{const p=this.object.getValue(w),e=this.value.getValue(w),r=this.propertyName.getValue(w);this._stopRunningAnimations(w,p,r);const I=this.customSetFunction.getValue(w);I?I(p,r,e,w):this._setPropertyValue(p,r,e)}catch(e){this._reportError(w,e)}this.out._activateSignal(w)}_stopRunningAnimations(w,p,e){const r=w._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const I of r){const d=w.assetsContext.animationGroups.find((w=>w.uniqueId===I));if(d)for(const f of d.targetedAnimations)if(f.target===p&&f.animation.targetProperty===e){d.stop(!0),d.dispose();const p=r.indexOf(I);-1!==p&&(r.splice(p,1),w._setGlobalContextVariable("currentlyRunningAnimationGroups",r))}}}_setPropertyValue(w,p,e){const r=p.split(".");let I=w;for(let d=0;d<r.length-1;d++){const w=r[d];void 0===I[w]&&(I[w]={}),I=I[w]}I[r[r.length-1]]=e}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,d.d)("FlowGraphSetPropertyBlock",f)}}]);