"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14281:(x,O,Q)=>{Q.r(O),Q.d(O,{FlowGraphMultiGateBlock:()=>o});var X=Q(10866),Z=Q(12722),n=Q(12707),V=Q(12703);class o extends Z.e{constructor(x){super(x),this.config=x,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",n.i,new V.b(-1)),this.setNumberOfOutputSignals(null===x||void 0===x?void 0:x.outputSignalCount)}_getNextIndex(x){if(x.includes(!1)||this.config.isLoop&&x.fill(!1),this.config.isRandom){const O=x.map(((x,O)=>x?-1:O)).filter((x=>-1!==x));return O.length?O[Math.floor(Math.random()*O.length)]:-1}return x.indexOf(!1)}setNumberOfOutputSignals(){let x=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>x;){const x=this.outputSignals.pop();x&&(x.disconnectFromAll(),this._unregisterSignalOutput(x.name))}for(;this.outputSignals.length<x;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(x,O){if(x._hasExecutionVariable(this,"indexesUsed")||x._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),O===this.reset)return x._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new V.b(-1),x);const Q=x._getExecutionVariable(this,"indexesUsed",[]),X=this._getNextIndex(Q);X>-1&&(this.lastIndex.setValue(new V.b(X),x),Q[X]=!0,x._setExecutionVariable(this,"indexesUsed",Q),this.outputSignals[X]._activateSignal(x))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(x){super.serialize(x),x.config.outputSignalCount=this.config.outputSignalCount,x.config.isRandom=this.config.isRandom,x.config.loop=this.config.isLoop,x.config.startIndex=this.config.startIndex}}(0,X.d)("FlowGraphMultiGateBlock",o)}}]);