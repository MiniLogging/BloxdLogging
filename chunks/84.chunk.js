"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{13853:(W,F,c)=>{c.r(F),c.d(F,{FlowGraphConsoleLogBlock:()=>A});var T=c(12566),Y=c(12517),Z=c(642),w=c(520);class A extends T.c{constructor(W){if(super(W),this.message=this.registerDataInput("message",Y.c),this.logType=this.registerDataInput("logType",Y.c,"log"),null!==W&&void 0!==W&&W.messageTemplate){const F=this._getTemplateMatches(W.messageTemplate);for(const W of F)this.registerDataInput(W,Y.c)}}_execute(W){const F=this.logType.getValue(W),c=this._getMessageValue(W);"warn"===F?w.e.Warn(c):"error"===F?w.e.Error(c):w.e.Log(c),this.out._activateSignal(W)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(W){var F;if(null!==(F=this.config)&&void 0!==F&&F.messageTemplate){let F=this.config.messageTemplate;const T=this._getTemplateMatches(F);for(const Y of T){var c;const T=null===(c=this.getDataInput(Y))||void 0===c?void 0:c.getValue(W);void 0!==T&&(F=F.replace(new RegExp(`\\{${Y}\\}`,"g"),T.toString()))}return F}return this.message.getValue(W)}_getTemplateMatches(W){const F=/\{([^}]+)\}/g,c=[];let T;for(;null!==(T=F.exec(W));)c.push(T[1]);return c}}(0,Z.h)("FlowGraphConsoleLogBlock",A)}}]);