"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14162:(q,c,U)=>{U.r(c),U.d(c,{FlowGraphMultiGateBlock:()=>X});var J=U(10850),Q=U(12664),s=U(12648),g=U(12642);class X extends Q.e{constructor(q){super(q),this.config=q,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",s.i,new g.b(-1)),this.setNumberOfOutputSignals(null===q||void 0===q?void 0:q.outputSignalCount)}_getNextIndex(q){if(q.includes(!1)||this.config.isLoop&&q.fill(!1),this.config.isRandom){const c=q.map(((q,c)=>q?-1:c)).filter((q=>-1!==q));return c.length?c[Math.floor(Math.random()*c.length)]:-1}return q.indexOf(!1)}setNumberOfOutputSignals(){let q=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>q;){const q=this.outputSignals.pop();q&&(q.disconnectFromAll(),this._unregisterSignalOutput(q.name))}for(;this.outputSignals.length<q;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(q,c){if(q._hasExecutionVariable(this,"indexesUsed")||q._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),c===this.reset)return q._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new g.b(-1),q);const U=q._getExecutionVariable(this,"indexesUsed",[]),J=this._getNextIndex(U);J>-1&&(this.lastIndex.setValue(new g.b(J),q),U[J]=!0,q._setExecutionVariable(this,"indexesUsed",U),this.outputSignals[J]._activateSignal(q))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(q){super.serialize(q),q.config.outputSignalCount=this.config.outputSignalCount,q.config.isRandom=this.config.isRandom,q.config.loop=this.config.isLoop,q.config.startIndex=this.config.startIndex}}(0,J.f)("FlowGraphMultiGateBlock",X)}}]);