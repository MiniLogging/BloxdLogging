"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{13927:(A,X,s)=>{s.r(X),s.d(X,{FlowGraphConsoleLogBlock:()=>K});var N=s(12724),f=s(12677),E=s(616),g=s(470);class K extends N.e{constructor(A){if(super(A),this.message=this.registerDataInput("message",f.b),this.logType=this.registerDataInput("logType",f.b,"log"),null!==A&&void 0!==A&&A.messageTemplate){const X=this._getTemplateMatches(A.messageTemplate);for(const A of X)this.registerDataInput(A,f.b)}}_execute(A){const X=this.logType.getValue(A),s=this._getMessageValue(A);"warn"===X?g.b.Warn(s):"error"===X?g.b.Error(s):g.b.Log(s),this.out._activateSignal(A)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(A){var X;if(null!==(X=this.config)&&void 0!==X&&X.messageTemplate){let X=this.config.messageTemplate;const N=this._getTemplateMatches(X);for(const f of N){var s;const N=null===(s=this.getDataInput(f))||void 0===s?void 0:s.getValue(A);void 0!==N&&(X=X.replace(new RegExp(`\\{${f}\\}`,"g"),N.toString()))}return X}return this.message.getValue(A)}_getTemplateMatches(A){const X=/\{([^}]+)\}/g,s=[];let N;for(;null!==(N=X.exec(A));)s.push(N[1]);return s}}(0,E.f)("FlowGraphConsoleLogBlock",K)}}]);