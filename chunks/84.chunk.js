"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14021:(U,W,l)=>{l.r(W),l.d(W,{FlowGraphThrottleBlock:()=>p});var M=l(12704),t=l(12766),L=l(655);class p extends t.e{constructor(U){super(U),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",M.s),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",M.s,NaN)}_execute(U,W){if(W===this.reset)return this.lastRemainingTime.setValue(NaN,U),U._setExecutionVariable(this,"lastRemainingTime",NaN),void U._setExecutionVariable(this,"timestamp",0);const l=this.duration.getValue(U);if(l<=0||isNaN(l)||!isFinite(l))return this._reportError(U,"Invalid duration in Throttle block");const M=U._getExecutionVariable(this,"lastRemainingTime",NaN),t=Date.now();if(isNaN(M))return this.lastRemainingTime.setValue(0,U),U._setExecutionVariable(this,"lastRemainingTime",0),U._setExecutionVariable(this,"timestamp",t),this.out._activateSignal(U);{const W=t-U._getExecutionVariable(this,"timestamp",0),M=1e3*l;if(M<=W)return this.lastRemainingTime.setValue(0,U),U._setExecutionVariable(this,"lastRemainingTime",0),U._setExecutionVariable(this,"timestamp",t),this.out._activateSignal(U);{const l=M-W;this.lastRemainingTime.setValue(l/1e3,U),U._setExecutionVariable(this,"lastRemainingTime",l)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,L.f)("FlowGraphThrottleBlock",p)}}]);