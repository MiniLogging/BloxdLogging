"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14523:(R,x,H)=>{H.r(x),H.d(x,{FlowGraphThrottleBlock:()=>A});var k=H(13246),c=H(13301),t=H(610);class A extends c.d{constructor(R){super(R),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",k.m),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",k.m,NaN)}_execute(R,x){if(x===this.reset)return this.lastRemainingTime.setValue(NaN,R),R._setExecutionVariable(this,"lastRemainingTime",NaN),void R._setExecutionVariable(this,"timestamp",0);const H=this.duration.getValue(R);if(H<=0||isNaN(H)||!isFinite(H))return this._reportError(R,"Invalid duration in Throttle block");const k=R._getExecutionVariable(this,"lastRemainingTime",NaN),c=Date.now();if(isNaN(k))return this.lastRemainingTime.setValue(0,R),R._setExecutionVariable(this,"lastRemainingTime",0),R._setExecutionVariable(this,"timestamp",c),this.out._activateSignal(R);{const x=c-R._getExecutionVariable(this,"timestamp",0),k=1e3*H;if(k<=x)return this.lastRemainingTime.setValue(0,R),R._setExecutionVariable(this,"lastRemainingTime",0),R._setExecutionVariable(this,"timestamp",c),this.out._activateSignal(R);{const H=k-x;this.lastRemainingTime.setValue(H/1e3,R),R._setExecutionVariable(this,"lastRemainingTime",H)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,t.h)("FlowGraphThrottleBlock",A)}}]);