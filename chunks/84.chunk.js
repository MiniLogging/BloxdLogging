"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14138:(P,Q,O)=>{O.r(Q),O.d(Q,{FlowGraphConsoleLogBlock:()=>q});var b=O(12922),F=O(12871),g=O(696),m=O(561);class q extends b.b{constructor(P){if(super(P),this.message=this.registerDataInput("message",F.d),this.logType=this.registerDataInput("logType",F.d,"log"),null!==P&&void 0!==P&&P.messageTemplate){const Q=this._getTemplateMatches(P.messageTemplate);for(const P of Q)this.registerDataInput(P,F.d)}}_execute(P){const Q=this.logType.getValue(P),O=this._getMessageValue(P);"warn"===Q?m.d.Warn(O):"error"===Q?m.d.Error(O):m.d.Log(O),this.out._activateSignal(P)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(P){var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.messageTemplate){let Q=this.config.messageTemplate;const b=this._getTemplateMatches(Q);for(const F of b){var O;const b=null===(O=this.getDataInput(F))||void 0===O?void 0:O.getValue(P);void 0!==b&&(Q=Q.replace(new RegExp(`\\{${F}\\}`,"g"),b.toString()))}return Q}return this.message.getValue(P)}_getTemplateMatches(P){const Q=/\{([^}]+)\}/g,O=[];let b;for(;null!==(b=Q.exec(P));)O.push(b[1]);return O}}(0,g.f)("FlowGraphConsoleLogBlock",q)}}]);