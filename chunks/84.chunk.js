"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14490:(V,I,m)=>{m.r(I),m.d(I,{FlowGraphMultiGateBlock:()=>k});var C=m(11048),l=m(12914),s=m(12899),F=m(12896);class k extends l.b{constructor(V){super(V),this.config=V,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",s.h,new F.b(-1)),this.setNumberOfOutputSignals(null===V||void 0===V?void 0:V.outputSignalCount)}_getNextIndex(V){if(V.includes(!1)||this.config.isLoop&&V.fill(!1),this.config.isRandom){const I=V.map(((V,I)=>V?-1:I)).filter((V=>-1!==V));return I.length?I[Math.floor(Math.random()*I.length)]:-1}return V.indexOf(!1)}setNumberOfOutputSignals(){let V=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>V;){const V=this.outputSignals.pop();V&&(V.disconnectFromAll(),this._unregisterSignalOutput(V.name))}for(;this.outputSignals.length<V;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(V,I){if(V._hasExecutionVariable(this,"indexesUsed")||V._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),I===this.reset)return V._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new F.b(-1),V);const m=V._getExecutionVariable(this,"indexesUsed",[]),C=this._getNextIndex(m);C>-1&&(this.lastIndex.setValue(new F.b(C),V),m[C]=!0,V._setExecutionVariable(this,"indexesUsed",m),this.outputSignals[C]._activateSignal(V))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(V){super.serialize(V),V.config.outputSignalCount=this.config.outputSignalCount,V.config.isRandom=this.config.isRandom,V.config.loop=this.config.isLoop,V.config.startIndex=this.config.startIndex}}(0,C.h)("FlowGraphMultiGateBlock",k)}}]);