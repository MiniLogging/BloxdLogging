"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14329:(s,Z,o)=>{o.r(Z),o.d(Z,{FlowGraphMultiGateBlock:()=>O});var t=o(10916),j=o(12798),S=o(12775),a=o(12771);class O extends j.c{constructor(s){super(s),this.config=s,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",S.j,new a.b(-1)),this.setNumberOfOutputSignals(null===s||void 0===s?void 0:s.outputSignalCount)}_getNextIndex(s){if(s.includes(!1)||this.config.isLoop&&s.fill(!1),this.config.isRandom){const Z=s.map(((s,Z)=>s?-1:Z)).filter((s=>-1!==s));return Z.length?Z[Math.floor(Math.random()*Z.length)]:-1}return s.indexOf(!1)}setNumberOfOutputSignals(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>s;){const s=this.outputSignals.pop();s&&(s.disconnectFromAll(),this._unregisterSignalOutput(s.name))}for(;this.outputSignals.length<s;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(s,Z){if(s._hasExecutionVariable(this,"indexesUsed")||s._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),Z===this.reset)return s._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new a.b(-1),s);const o=s._getExecutionVariable(this,"indexesUsed",[]),t=this._getNextIndex(o);t>-1&&(this.lastIndex.setValue(new a.b(t),s),o[t]=!0,s._setExecutionVariable(this,"indexesUsed",o),this.outputSignals[t]._activateSignal(s))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(s){super.serialize(s),s.config.outputSignalCount=this.config.outputSignalCount,s.config.isRandom=this.config.isRandom,s.config.loop=this.config.isLoop,s.config.startIndex=this.config.startIndex}}(0,t.f)("FlowGraphMultiGateBlock",O)}}]);