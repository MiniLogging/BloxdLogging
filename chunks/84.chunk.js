"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14079:(c,b,A)=>{A.r(b),A.d(b,{FlowGraphThrottleBlock:()=>h});var o=A(12763),t=A(12813),n=A(633);class h extends t.d{constructor(c){super(c),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",o.t),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",o.t,NaN)}_execute(c,b){if(b===this.reset)return this.lastRemainingTime.setValue(NaN,c),c._setExecutionVariable(this,"lastRemainingTime",NaN),void c._setExecutionVariable(this,"timestamp",0);const A=this.duration.getValue(c);if(A<=0||isNaN(A)||!isFinite(A))return this._reportError(c,"Invalid duration in Throttle block");const o=c._getExecutionVariable(this,"lastRemainingTime",NaN),t=Date.now();if(isNaN(o))return this.lastRemainingTime.setValue(0,c),c._setExecutionVariable(this,"lastRemainingTime",0),c._setExecutionVariable(this,"timestamp",t),this.out._activateSignal(c);{const b=t-c._getExecutionVariable(this,"timestamp",0),o=1e3*A;if(o<=b)return this.lastRemainingTime.setValue(0,c),c._setExecutionVariable(this,"lastRemainingTime",0),c._setExecutionVariable(this,"timestamp",t),this.out._activateSignal(c);{const A=o-b;this.lastRemainingTime.setValue(A/1e3,c),c._setExecutionVariable(this,"lastRemainingTime",A)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,n.d)("FlowGraphThrottleBlock",h)}}]);