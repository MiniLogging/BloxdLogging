"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14256:(u,F,z)=>{z.r(F),z.d(F,{FlowGraphConsoleLogBlock:()=>I});var p=z(13003),b=z(12952),R=z(668),c=z(541);class I extends p.e{constructor(u){if(super(u),this.message=this.registerDataInput("message",b.e),this.logType=this.registerDataInput("logType",b.e,"log"),null!==u&&void 0!==u&&u.messageTemplate){const F=this._getTemplateMatches(u.messageTemplate);for(const u of F)this.registerDataInput(u,b.e)}}_execute(u){const F=this.logType.getValue(u),z=this._getMessageValue(u);"warn"===F?c.b.Warn(z):"error"===F?c.b.Error(z):c.b.Log(z),this.out._activateSignal(u)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(u){var F;if(null!==(F=this.config)&&void 0!==F&&F.messageTemplate){let F=this.config.messageTemplate;const p=this._getTemplateMatches(F);for(const b of p){var z;const p=null===(z=this.getDataInput(b))||void 0===z?void 0:z.getValue(u);void 0!==p&&(F=F.replace(new RegExp(`\\{${b}\\}`,"g"),p.toString()))}return F}return this.message.getValue(u)}_getTemplateMatches(u){const F=/\{([^}]+)\}/g,z=[];let p;for(;null!==(p=F.exec(u));)z.push(p[1]);return z}}(0,R.h)("FlowGraphConsoleLogBlock",I)}}]);