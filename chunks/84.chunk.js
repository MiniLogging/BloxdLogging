"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14114:(U,M,b)=>{b.r(M),b.d(M,{FlowGraphConsoleLogBlock:()=>y});var a=b(12830),A=b(12775),H=b(609),W=b(497);class y extends a.e{constructor(U){if(super(U),this.message=this.registerDataInput("message",A.c),this.logType=this.registerDataInput("logType",A.c,"log"),null!==U&&void 0!==U&&U.messageTemplate){const M=this._getTemplateMatches(U.messageTemplate);for(const U of M)this.registerDataInput(U,A.c)}}_execute(U){const M=this.logType.getValue(U),b=this._getMessageValue(U);"warn"===M?W.b.Warn(b):"error"===M?W.b.Error(b):W.b.Log(b),this.out._activateSignal(U)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(U){var M;if(null!==(M=this.config)&&void 0!==M&&M.messageTemplate){let M=this.config.messageTemplate;const a=this._getTemplateMatches(M);for(const A of a){var b;const a=null===(b=this.getDataInput(A))||void 0===b?void 0:b.getValue(U);void 0!==a&&(M=M.replace(new RegExp(`\\{${A}\\}`,"g"),a.toString()))}return M}return this.message.getValue(U)}_getTemplateMatches(U){const M=/\{([^}]+)\}/g,b=[];let a;for(;null!==(a=M.exec(U));)b.push(a[1]);return b}}(0,H.i)("FlowGraphConsoleLogBlock",y)}}]);