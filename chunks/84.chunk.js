"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14140:(n,k,T)=>{T.r(k),T.d(k,{FlowGraphConsoleLogBlock:()=>w});var c=T(12875),K=T(12831),Q=T(675),G=T(556);class w extends c.c{constructor(n){if(super(n),this.message=this.registerDataInput("message",K.e),this.logType=this.registerDataInput("logType",K.e,"log"),null!==n&&void 0!==n&&n.messageTemplate){const k=this._getTemplateMatches(n.messageTemplate);for(const n of k)this.registerDataInput(n,K.e)}}_execute(n){const k=this.logType.getValue(n),T=this._getMessageValue(n);"warn"===k?G.d.Warn(T):"error"===k?G.d.Error(T):G.d.Log(T),this.out._activateSignal(n)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(n){var k;if(null!==(k=this.config)&&void 0!==k&&k.messageTemplate){let k=this.config.messageTemplate;const c=this._getTemplateMatches(k);for(const K of c){var T;const c=null===(T=this.getDataInput(K))||void 0===T?void 0:T.getValue(n);void 0!==c&&(k=k.replace(new RegExp(`\\{${K}\\}`,"g"),c.toString()))}return k}return this.message.getValue(n)}_getTemplateMatches(n){const k=/\{([^}]+)\}/g,T=[];let c;for(;null!==(c=k.exec(n));)T.push(c[1]);return T}}(0,Q.f)("FlowGraphConsoleLogBlock",w)}}]);