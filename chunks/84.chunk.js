"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14252:(v,d,Q)=>{Q.r(d),Q.d(d,{FlowGraphThrottleBlock:()=>e});var n=Q(12908),T=Q(12966),L=Q(591);class e extends T.d{constructor(v){super(v),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",n.u),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",n.u,NaN)}_execute(v,d){if(d===this.reset)return this.lastRemainingTime.setValue(NaN,v),v._setExecutionVariable(this,"lastRemainingTime",NaN),void v._setExecutionVariable(this,"timestamp",0);const Q=this.duration.getValue(v);if(Q<=0||isNaN(Q)||!isFinite(Q))return this._reportError(v,"Invalid duration in Throttle block");const n=v._getExecutionVariable(this,"lastRemainingTime",NaN),T=Date.now();if(isNaN(n))return this.lastRemainingTime.setValue(0,v),v._setExecutionVariable(this,"lastRemainingTime",0),v._setExecutionVariable(this,"timestamp",T),this.out._activateSignal(v);{const d=T-v._getExecutionVariable(this,"timestamp",0),n=1e3*Q;if(n<=d)return this.lastRemainingTime.setValue(0,v),v._setExecutionVariable(this,"lastRemainingTime",0),v._setExecutionVariable(this,"timestamp",T),this.out._activateSignal(v);{const Q=n-d;this.lastRemainingTime.setValue(Q/1e3,v),v._setExecutionVariable(this,"lastRemainingTime",Q)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,L.f)("FlowGraphThrottleBlock",e)}}]);