"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14118:(Z,U,n)=>{n.r(U),n.d(U,{FlowGraphThrottleBlock:()=>H});var i=n(12826),B=n(12861),l=n(633);class H extends B.e{constructor(Z){super(Z),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",i.s),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",i.s,NaN)}_execute(Z,U){if(U===this.reset)return this.lastRemainingTime.setValue(NaN,Z),Z._setExecutionVariable(this,"lastRemainingTime",NaN),void Z._setExecutionVariable(this,"timestamp",0);const n=this.duration.getValue(Z);if(n<=0||isNaN(n)||!isFinite(n))return this._reportError(Z,"Invalid duration in Throttle block");const i=Z._getExecutionVariable(this,"lastRemainingTime",NaN),B=Date.now();if(isNaN(i))return this.lastRemainingTime.setValue(0,Z),Z._setExecutionVariable(this,"lastRemainingTime",0),Z._setExecutionVariable(this,"timestamp",B),this.out._activateSignal(Z);{const U=B-Z._getExecutionVariable(this,"timestamp",0),i=1e3*n;if(i<=U)return this.lastRemainingTime.setValue(0,Z),Z._setExecutionVariable(this,"lastRemainingTime",0),Z._setExecutionVariable(this,"timestamp",B),this.out._activateSignal(Z);{const n=i-U;this.lastRemainingTime.setValue(n/1e3,Z),Z._setExecutionVariable(this,"lastRemainingTime",n)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,l.g)("FlowGraphThrottleBlock",H)}}]);