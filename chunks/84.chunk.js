"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{13816:(L,j,P)=>{P.r(j),P.d(j,{FlowGraphThrottleBlock:()=>Y});var A=P(12510),R=P(12554),o=P(606);class Y extends R.b{constructor(L){super(L),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",A.p),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",A.p,NaN)}_execute(L,j){if(j===this.reset)return this.lastRemainingTime.setValue(NaN,L),L._setExecutionVariable(this,"lastRemainingTime",NaN),void L._setExecutionVariable(this,"timestamp",0);const P=this.duration.getValue(L);if(P<=0||isNaN(P)||!isFinite(P))return this._reportError(L,"Invalid duration in Throttle block");const A=L._getExecutionVariable(this,"lastRemainingTime",NaN),R=Date.now();if(isNaN(A))return this.lastRemainingTime.setValue(0,L),L._setExecutionVariable(this,"lastRemainingTime",0),L._setExecutionVariable(this,"timestamp",R),this.out._activateSignal(L);{const j=R-L._getExecutionVariable(this,"timestamp",0),A=1e3*P;if(A<=j)return this.lastRemainingTime.setValue(0,L),L._setExecutionVariable(this,"lastRemainingTime",0),L._setExecutionVariable(this,"timestamp",R),this.out._activateSignal(L);{const P=A-j;this.lastRemainingTime.setValue(P/1e3,L),L._setExecutionVariable(this,"lastRemainingTime",P)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,o.h)("FlowGraphThrottleBlock",Y)}}]);