"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14210:(t,q,S)=>{S.r(q),S.d(q,{FlowGraphThrottleBlock:()=>L});var o=S(12927),B=S(12981),z=S(622);class L extends B.d{constructor(t){super(t),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",o.v),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",o.v,NaN)}_execute(t,q){if(q===this.reset)return this.lastRemainingTime.setValue(NaN,t),t._setExecutionVariable(this,"lastRemainingTime",NaN),void t._setExecutionVariable(this,"timestamp",0);const S=this.duration.getValue(t);if(S<=0||isNaN(S)||!isFinite(S))return this._reportError(t,"Invalid duration in Throttle block");const o=t._getExecutionVariable(this,"lastRemainingTime",NaN),B=Date.now();if(isNaN(o))return this.lastRemainingTime.setValue(0,t),t._setExecutionVariable(this,"lastRemainingTime",0),t._setExecutionVariable(this,"timestamp",B),this.out._activateSignal(t);{const q=B-t._getExecutionVariable(this,"timestamp",0),o=1e3*S;if(o<=q)return this.lastRemainingTime.setValue(0,t),t._setExecutionVariable(this,"lastRemainingTime",0),t._setExecutionVariable(this,"timestamp",B),this.out._activateSignal(t);{const S=o-q;this.lastRemainingTime.setValue(S/1e3,t),t._setExecutionVariable(this,"lastRemainingTime",S)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,z.c)("FlowGraphThrottleBlock",L)}}]);