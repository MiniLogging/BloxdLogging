"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14068:(z,u,Y)=>{Y.r(u),Y.d(u,{FlowGraphMultiGateBlock:()=>T});var H=Y(10918),E=Y(12546),J=Y(12531),l=Y(12523);class T extends E.b{constructor(z){super(z),this.config=z,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",J.g,new l.b(-1)),this.setNumberOfOutputSignals(null===z||void 0===z?void 0:z.outputSignalCount)}_getNextIndex(z){if(z.includes(!1)||this.config.isLoop&&z.fill(!1),this.config.isRandom){const u=z.map(((z,u)=>z?-1:u)).filter((z=>-1!==z));return u.length?u[Math.floor(Math.random()*u.length)]:-1}return z.indexOf(!1)}setNumberOfOutputSignals(){let z=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>z;){const z=this.outputSignals.pop();z&&(z.disconnectFromAll(),this._unregisterSignalOutput(z.name))}for(;this.outputSignals.length<z;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(z,u){if(z._hasExecutionVariable(this,"indexesUsed")||z._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),u===this.reset)return z._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new l.b(-1),z);const Y=z._getExecutionVariable(this,"indexesUsed",[]),H=this._getNextIndex(Y);H>-1&&(this.lastIndex.setValue(new l.b(H),z),Y[H]=!0,z._setExecutionVariable(this,"indexesUsed",Y),this.outputSignals[H]._activateSignal(z))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(z){super.serialize(z),z.config.outputSignalCount=this.config.outputSignalCount,z.config.isRandom=this.config.isRandom,z.config.loop=this.config.isLoop,z.config.startIndex=this.config.startIndex}}(0,H.d)("FlowGraphMultiGateBlock",T)}}]);