"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14377:(Q,X,C)=>{C.r(X),C.d(X,{FlowGraphThrottleBlock:()=>f});var l=C(13063),h=C(13120),M=C(620);class f extends h.c{constructor(Q){super(Q),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",l.p),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",l.p,NaN)}_execute(Q,X){if(X===this.reset)return this.lastRemainingTime.setValue(NaN,Q),Q._setExecutionVariable(this,"lastRemainingTime",NaN),void Q._setExecutionVariable(this,"timestamp",0);const C=this.duration.getValue(Q);if(C<=0||isNaN(C)||!isFinite(C))return this._reportError(Q,"Invalid duration in Throttle block");const l=Q._getExecutionVariable(this,"lastRemainingTime",NaN),h=Date.now();if(isNaN(l))return this.lastRemainingTime.setValue(0,Q),Q._setExecutionVariable(this,"lastRemainingTime",0),Q._setExecutionVariable(this,"timestamp",h),this.out._activateSignal(Q);{const X=h-Q._getExecutionVariable(this,"timestamp",0),l=1e3*C;if(l<=X)return this.lastRemainingTime.setValue(0,Q),Q._setExecutionVariable(this,"lastRemainingTime",0),Q._setExecutionVariable(this,"timestamp",h),this.out._activateSignal(Q);{const C=l-X;this.lastRemainingTime.setValue(C/1e3,Q),Q._setExecutionVariable(this,"lastRemainingTime",C)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,M.g)("FlowGraphThrottleBlock",f)}}]);