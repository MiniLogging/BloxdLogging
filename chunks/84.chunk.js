"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{14247:(q,f,j)=>{j.r(f),j.d(f,{FlowGraphMultiGateBlock:()=>Q});var d=j(10965),g=j(12721),h=j(12709),L=j(12704);class Q extends g.b{constructor(q){super(q),this.config=q,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",h.e,new L.c(-1)),this.setNumberOfOutputSignals(null===q||void 0===q?void 0:q.outputSignalCount)}_getNextIndex(q){if(q.includes(!1)||this.config.isLoop&&q.fill(!1),this.config.isRandom){const f=q.map(((q,f)=>q?-1:f)).filter((q=>-1!==q));return f.length?f[Math.floor(Math.random()*f.length)]:-1}return q.indexOf(!1)}setNumberOfOutputSignals(){let q=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>q;){const q=this.outputSignals.pop();q&&(q.disconnectFromAll(),this._unregisterSignalOutput(q.name))}for(;this.outputSignals.length<q;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(q,f){if(q._hasExecutionVariable(this,"indexesUsed")||q._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),f===this.reset)return q._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new L.c(-1),q);const j=q._getExecutionVariable(this,"indexesUsed",[]),d=this._getNextIndex(j);d>-1&&(this.lastIndex.setValue(new L.c(d),q),j[d]=!0,q._setExecutionVariable(this,"indexesUsed",j),this.outputSignals[d]._activateSignal(q))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(q){super.serialize(q),q.config.outputSignalCount=this.config.outputSignalCount,q.config.isRandom=this.config.isRandom,q.config.loop=this.config.isLoop,q.config.startIndex=this.config.startIndex}}(0,d.f)("FlowGraphMultiGateBlock",Q)}}]);