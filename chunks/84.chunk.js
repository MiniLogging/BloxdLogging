"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[84],{13985:(J,T,b)=>{b.r(T),b.d(T,{FlowGraphConsoleLogBlock:()=>Y});var q=b(12647),t=b(12603),j=b(639),B=b(519);class Y extends q.c{constructor(J){if(super(J),this.message=this.registerDataInput("message",t.c),this.logType=this.registerDataInput("logType",t.c,"log"),null!==J&&void 0!==J&&J.messageTemplate){const T=this._getTemplateMatches(J.messageTemplate);for(const J of T)this.registerDataInput(J,t.c)}}_execute(J){const T=this.logType.getValue(J),b=this._getMessageValue(J);"warn"===T?B.d.Warn(b):"error"===T?B.d.Error(b):B.d.Log(b),this.out._activateSignal(J)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(J){var T;if(null!==(T=this.config)&&void 0!==T&&T.messageTemplate){let T=this.config.messageTemplate;const q=this._getTemplateMatches(T);for(const t of q){var b;const q=null===(b=this.getDataInput(t))||void 0===b?void 0:b.getValue(J);void 0!==q&&(T=T.replace(new RegExp(`\\{${t}\\}`,"g"),q.toString()))}return T}return this.message.getValue(J)}_getTemplateMatches(J){const T=/\{([^}]+)\}/g,b=[];let q;for(;null!==(q=T.exec(J));)b.push(q[1]);return b}}(0,j.g)("FlowGraphConsoleLogBlock",Y)}}]);