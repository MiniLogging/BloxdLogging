"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[61],{14024:(n,k,T)=>{T.r(k),T.d(k,{FlowGraphReceiveCustomEventBlock:()=>w});var c=T(12869),K=T(542),Q=T(675),G=T(12817);class w extends c.d{constructor(n){super(n),this.config=n,this.initPriority=1;for(const k in this.config.eventData)this.registerDataOutput(k,this.config.eventData[k].type)}_preparePendingTasks(n){const k=n.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(k&&k.hasObservers()&&k.observers.length>G.e.MaxEventsPerType)return void this._reportError(n,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${G.e.MaxEventsPerType}.`);const T=k.add((k=>{const T=Object.keys(k);for(const K of T){var c;null===(c=this.getDataOutput(K))||void 0===c||c.setValue(k[K],n)}this._execute(n)}));n._setExecutionVariable(this,"_eventObserver",T)}_cancelPendingTasks(n){const k=n.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(k){const T=n._getExecutionVariable(this,"_eventObserver",null);k.remove(T)}else K.e.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(n,k){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,Q.f)("FlowGraphReceiveCustomEventBlock",w)}}]);