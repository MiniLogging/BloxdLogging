"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[61],{14114:(u,F,z)=>{z.r(F),z.d(F,{FlowGraphReceiveCustomEventBlock:()=>I});var p=z(12994),b=z(528),R=z(668),c=z(12929);class I extends p.b{constructor(u){super(u),this.config=u,this.initPriority=1;for(const F in this.config.eventData)this.registerDataOutput(F,this.config.eventData[F].type)}_preparePendingTasks(u){const F=u.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(F&&F.hasObservers()&&F.observers.length>c.c.MaxEventsPerType)return void this._reportError(u,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${c.c.MaxEventsPerType}.`);const z=F.add((F=>{const z=Object.keys(F);for(const b of z){var p;null===(p=this.getDataOutput(b))||void 0===p||p.setValue(F[b],u)}this._execute(u)}));u._setExecutionVariable(this,"_eventObserver",z)}_cancelPendingTasks(u){const F=u.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(F){const z=u._getExecutionVariable(this,"_eventObserver",null);F.remove(z)}else b.e.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(u,F){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,R.h)("FlowGraphReceiveCustomEventBlock",I)}}]);