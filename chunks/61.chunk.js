"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[61],{13840:(J,T,b)=>{b.r(T),b.d(T,{FlowGraphReceiveCustomEventBlock:()=>Y});var q=b(12639),t=b(505),j=b(639),B=b(12582);class Y extends q.d{constructor(J){super(J),this.config=J,this.initPriority=1;for(const T in this.config.eventData)this.registerDataOutput(T,this.config.eventData[T].type)}_preparePendingTasks(J){const T=J.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(T&&T.hasObservers()&&T.observers.length>B.c.MaxEventsPerType)return void this._reportError(J,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${B.c.MaxEventsPerType}.`);const b=T.add((T=>{const b=Object.keys(T);for(const t of b){var q;null===(q=this.getDataOutput(t))||void 0===q||q.setValue(T[t],J)}this._execute(J)}));J._setExecutionVariable(this,"_eventObserver",b)}_cancelPendingTasks(J){const T=J.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(T){const b=J._getExecutionVariable(this,"_eventObserver",null);T.remove(b)}else t.e.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(J,T){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,j.g)("FlowGraphReceiveCustomEventBlock",Y)}}]);