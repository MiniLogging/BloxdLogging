"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[61],{13742:(W,F,c)=>{c.r(F),c.d(F,{FlowGraphReceiveCustomEventBlock:()=>A});var T=c(12556),Y=c(514),Z=c(642),w=c(12507);class A extends T.d{constructor(W){super(W),this.config=W,this.initPriority=1;for(const F in this.config.eventData)this.registerDataOutput(F,this.config.eventData[F].type)}_preparePendingTasks(W){const F=W.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(F&&F.hasObservers()&&F.observers.length>w.e.MaxEventsPerType)return void this._reportError(W,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${w.e.MaxEventsPerType}.`);const c=F.add((F=>{const c=Object.keys(F);for(const Y of c){var T;null===(T=this.getDataOutput(Y))||void 0===T||T.setValue(F[Y],W)}this._execute(W)}));W._setExecutionVariable(this,"_eventObserver",c)}_cancelPendingTasks(W){const F=W.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(F){const c=W._getExecutionVariable(this,"_eventObserver",null);F.remove(c)}else Y.d.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(W,F){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,Z.h)("FlowGraphReceiveCustomEventBlock",A)}}]);