"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[61],{13810:(A,X,s)=>{s.r(X),s.d(X,{FlowGraphReceiveCustomEventBlock:()=>K});var N=s(12709),f=s(456),E=s(616),g=s(12661);class K extends N.e{constructor(A){super(A),this.config=A,this.initPriority=1;for(const X in this.config.eventData)this.registerDataOutput(X,this.config.eventData[X].type)}_preparePendingTasks(A){const X=A.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(X&&X.hasObservers()&&X.observers.length>g.e.MaxEventsPerType)return void this._reportError(A,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${g.e.MaxEventsPerType}.`);const s=X.add((X=>{const s=Object.keys(X);for(const f of s){var N;null===(N=this.getDataOutput(f))||void 0===N||N.setValue(X[f],A)}this._execute(A)}));A._setExecutionVariable(this,"_eventObserver",s)}_cancelPendingTasks(A){const X=A.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(X){const s=A._getExecutionVariable(this,"_eventObserver",null);X.remove(s)}else f.d.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(A,X){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,E.f)("FlowGraphReceiveCustomEventBlock",K)}}]);