"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[61],{14013:(P,Q,O)=>{O.r(Q),O.d(Q,{FlowGraphReceiveCustomEventBlock:()=>q});var b=O(12908),F=O(545),g=O(696),m=O(12856);class q extends b.b{constructor(P){super(P),this.config=P,this.initPriority=1;for(const Q in this.config.eventData)this.registerDataOutput(Q,this.config.eventData[Q].type)}_preparePendingTasks(P){const Q=P.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(Q&&Q.hasObservers()&&Q.observers.length>m.b.MaxEventsPerType)return void this._reportError(P,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${m.b.MaxEventsPerType}.`);const O=Q.add((Q=>{const O=Object.keys(Q);for(const F of O){var b;null===(b=this.getDataOutput(F))||void 0===b||b.setValue(Q[F],P)}this._execute(P)}));P._setExecutionVariable(this,"_eventObserver",O)}_cancelPendingTasks(P){const Q=P.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(Q){const O=P._getExecutionVariable(this,"_eventObserver",null);Q.remove(O)}else F.d.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(P,Q){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,g.f)("FlowGraphReceiveCustomEventBlock",q)}}]);