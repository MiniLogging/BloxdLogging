"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[61],{13990:(U,M,b)=>{b.r(M),b.d(M,{FlowGraphReceiveCustomEventBlock:()=>y});var a=b(12814),A=b(479),H=b(609),W=b(12755);class y extends a.b{constructor(U){super(U),this.config=U,this.initPriority=1;for(const M in this.config.eventData)this.registerDataOutput(M,this.config.eventData[M].type)}_preparePendingTasks(U){const M=U.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(M&&M.hasObservers()&&M.observers.length>W.c.MaxEventsPerType)return void this._reportError(U,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${W.c.MaxEventsPerType}.`);const b=M.add((M=>{const b=Object.keys(M);for(const A of b){var a;null===(a=this.getDataOutput(A))||void 0===a||a.setValue(M[A],U)}this._execute(U)}));U._setExecutionVariable(this,"_eventObserver",b)}_cancelPendingTasks(U){const M=U.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(M){const b=U._getExecutionVariable(this,"_eventObserver",null);M.remove(b)}else A.d.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(U,M){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,H.i)("FlowGraphReceiveCustomEventBlock",y)}}]);