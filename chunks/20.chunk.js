"use strict";(self.xeuzlpp225k=self.xeuzlpp225k||[]).push([[20],{11522:(k,Q,i)=>{i.r(Q),i.d(Q,{Dispose:()=>H,DumpData:()=>G,DumpDataAsync:()=>J,DumpFramebuffer:()=>O,DumpTools:()=>e});var Z=i(11406),U=i(11119),C=i(11311),B=i(11157);let o,m=null;async function O(k,Q,i,Z){let U=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",C=arguments.length>5?arguments[5]:void 0,B=arguments.length>6?arguments[6]:void 0;const o=await i.readPixels(0,0,k,Q);G(k,Q,new Uint8Array(o.buffer),Z,U,C,!0,void 0,B)}async function J(k,Q,i){let Z=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",U=arguments.length>4?arguments[4]:void 0,C=arguments.length>5&&void 0!==arguments[5]&&arguments[5],B=arguments.length>6&&void 0!==arguments[6]&&arguments[6],o=arguments.length>7?arguments[7]:void 0;return await new Promise((m=>{G(k,Q,i,(k=>m(k)),Z,U,C,B,o)}))}function G(k,Q,O,J){let G=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",e=arguments.length>5?arguments[5]:void 0,F=arguments.length>6&&void 0!==arguments[6]&&arguments[6],z=arguments.length>7&&void 0!==arguments[7]&&arguments[7],E=arguments.length>8?arguments[8]:void 0;(async function(){return m||(m=new Promise(((k,Q)=>{let U,C=null;const m={ko:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(i.bind(i,11434)).then((O=>{let{ThinEngine:J}=O;const G=B.b.Instances.length;try{U=new OffscreenCanvas(100,100),C=new J(U,!1,m)}catch(z){var e;G<B.b.Instances.length&&(null===(e=B.b.Instances.pop())||void 0===e||e.dispose()),U=document.createElement("canvas"),C=new J(U,!1,m)}B.b.Instances.pop(),B.b.OnEnginesDisposedObservable.add((k=>{C&&k!==C&&!C.J&&0===B.b.Instances.length&&H()})),C.getCaps().parallelShaderCompile=void 0;const F=new Z.d(C);i.e(52).then(i.bind(i,13852)).then((i=>{let{passPixelShader:B}=i;if(!C)return void Q("Engine is not defined");const m=new Z.g({FQ:C,name:B.name,fragmentShader:B.shader,samplerNames:["textureSampler"]});o={canvas:U,FQ:C,renderer:F,wrapper:m},k(o)}))})).catch(Q)}))),await m})().then((i=>{if(i.FQ.setSize(k,Q,!0),O instanceof Float32Array){const k=new Uint8Array(O.length);let Q=O.length;for(;Q--;){const i=O[Q];k[Q]=Math.round(255*(0,C.Clamp)(i))}O=k}const Z=i.FQ.createRawTexture(O,k,Q,5,!1,!F,1);i.renderer.setViewport(),i.renderer.applyEffectWrapper(i.wrapper),i.wrapper.effect._bindTexture("textureSampler",Z),i.renderer.draw(),z?U.Tools.ToBlob(i.canvas,(k=>{const Q=new FileReader;Q.onload=k=>{const Q=k.target.result;J&&J(Q)},Q.readAsArrayBuffer(k)}),G,E):U.Tools.EncodeScreenshotCanvasData(i.canvas,J,G,e,E),Z.dispose()}))}function H(){var k;o?(o.wrapper.dispose(),o.renderer.dispose(),o.FQ.dispose()):null===(k=m)||void 0===k||k.then((k=>{k.wrapper.dispose(),k.renderer.dispose(),k.FQ.dispose()}));m=null,o=null}const e={DumpData:G,DumpDataAsync:J,DumpFramebuffer:O,Dispose:H};U.Tools.DumpData=G,U.Tools.DumpDataAsync=J,U.Tools.DumpFramebuffer=O}}]);