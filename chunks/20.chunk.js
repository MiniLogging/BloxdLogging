"use strict";(self["3gghkoft8x"]=self["3gghkoft8x"]||[]).push([[20],{12544:(y,S,I)=>{I.r(S),I.d(S,{Dispose:()=>G,DumpData:()=>K,DumpDataAsync:()=>u,DumpFramebuffer:()=>J,DumpTools:()=>p});var V=I(12425),i=I(12128),A=I(12338),B=I(12185);let d,F=null;async function J(y,S,I,V){let i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",A=arguments.length>5?arguments[5]:void 0,B=arguments.length>6?arguments[6]:void 0;const d=await I.readPixels(0,0,y,S);K(y,S,new Uint8Array(d.buffer),V,i,A,!0,void 0,B)}async function u(y,S,I){let V=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",i=arguments.length>4?arguments[4]:void 0,A=arguments.length>5&&void 0!==arguments[5]&&arguments[5],B=arguments.length>6&&void 0!==arguments[6]&&arguments[6],d=arguments.length>7?arguments[7]:void 0;return await new Promise((F=>{K(y,S,I,(y=>F(y)),V,i,A,B,d)}))}function K(y,S,J,u){let K=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",p=arguments.length>5?arguments[5]:void 0,L=arguments.length>6&&void 0!==arguments[6]&&arguments[6],T=arguments.length>7&&void 0!==arguments[7]&&arguments[7],l=arguments.length>8?arguments[8]:void 0;(async function(){return F||(F=new Promise(((y,S)=>{let i,A=null;const F={ei:!0,depth:!1,gi:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(I.bind(I,12459)).then((J=>{let{ThinEngine:u}=J;const K=B.e.Instances.length;try{i=new OffscreenCanvas(100,100),A=new u(i,!1,F)}catch(T){var p;K<B.e.Instances.length&&(null===(p=B.e.Instances.pop())||void 0===p||p.dispose()),i=document.createElement("canvas"),A=new u(i,!1,F)}B.e.Instances.pop(),B.e.OnEnginesDisposedObservable.add((y=>{A&&y!==A&&!A.J&&0===B.e.Instances.length&&G()})),A.getCaps().parallelShaderCompile=void 0;const L=new V.e(A);I.e(52).then(I.bind(I,14815)).then((I=>{let{passPixelShader:B}=I;if(!A)return void S("Engine is not defined");const F=new V.i({sS:A,name:B.name,fragmentShader:B.shader,samplerNames:["textureSampler"]});d={canvas:i,sS:A,renderer:L,wrapper:F},y(d)}))})).catch(S)}))),await F})().then((I=>{if(I.sS.setSize(y,S,!0),J instanceof Float32Array){const y=new Uint8Array(J.length);let S=J.length;for(;S--;){const I=J[S];y[S]=Math.round(255*(0,A.Clamp)(I))}J=y}const V=I.sS.createRawTexture(J,y,S,5,!1,!L,1);I.renderer.setViewport(),I.renderer.applyEffectWrapper(I.wrapper),I.wrapper.effect._bindTexture("textureSampler",V),I.renderer.draw(),T?i.Tools.ToBlob(I.canvas,(y=>{const S=new FileReader;S.onload=y=>{const S=y.target.result;u&&u(S)},S.readAsArrayBuffer(y)}),K,l):i.Tools.EncodeScreenshotCanvasData(I.canvas,u,K,p,l),V.dispose()}))}function G(){var y;d?(d.wrapper.dispose(),d.renderer.dispose(),d.sS.dispose()):null===(y=F)||void 0===y||y.then((y=>{y.wrapper.dispose(),y.renderer.dispose(),y.sS.dispose()}));F=null,d=null}const p={DumpData:K,DumpDataAsync:u,DumpFramebuffer:J,Dispose:G};i.Tools.DumpData=K,i.Tools.DumpDataAsync=u,i.Tools.DumpFramebuffer=J}}]);