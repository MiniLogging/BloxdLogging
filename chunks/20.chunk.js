"use strict";(self.irtrrknfyfo=self.irtrrknfyfo||[]).push([[20],{11589:(B,E,v)=>{v.r(E),v.d(E,{Dispose:()=>Q,DumpData:()=>y,DumpDataAsync:()=>h,DumpFramebuffer:()=>D,DumpTools:()=>P});var z=v(11471),o=v(11193),q=v(11394),c=v(11242);let S,x=null;async function D(B,E,v,z){let o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",q=arguments.length>5?arguments[5]:void 0,c=arguments.length>6?arguments[6]:void 0;const S=await v.readPixels(0,0,B,E);y(B,E,new Uint8Array(S.buffer),z,o,q,!0,void 0,c)}async function h(B,E,v){let z=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",o=arguments.length>4?arguments[4]:void 0,q=arguments.length>5&&void 0!==arguments[5]&&arguments[5],c=arguments.length>6&&void 0!==arguments[6]&&arguments[6],S=arguments.length>7?arguments[7]:void 0;return await new Promise((x=>{y(B,E,v,(B=>x(B)),z,o,q,c,S)}))}function y(B,E,D,h){let y=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",P=arguments.length>5?arguments[5]:void 0,G=arguments.length>6&&void 0!==arguments[6]&&arguments[6],Y=arguments.length>7&&void 0!==arguments[7]&&arguments[7],a=arguments.length>8?arguments[8]:void 0;(async function(){return x||(x=new Promise(((B,E)=>{let o,q=null;const x={zc:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(v.bind(v,11494)).then((D=>{let{ThinEngine:h}=D;const y=c.b.Instances.length;try{o=new OffscreenCanvas(100,100),q=new h(o,!1,x)}catch(Y){var P;y<c.b.Instances.length&&(null===(P=c.b.Instances.pop())||void 0===P||P.dispose()),o=document.createElement("canvas"),q=new h(o,!1,x)}c.b.Instances.pop(),c.b.OnEnginesDisposedObservable.add((B=>{q&&B!==q&&!q.P&&0===c.b.Instances.length&&Q()})),q.getCaps().parallelShaderCompile=void 0;const G=new z.e(q);v.e(52).then(v.bind(v,13842)).then((v=>{let{passPixelShader:c}=v;if(!q)return void E("Engine is not defined");const x=new z.f({PE:q,name:c.name,fragmentShader:c.shader,samplerNames:["textureSampler"]});S={canvas:o,PE:q,renderer:G,wrapper:x},B(S)}))})).catch(E)}))),await x})().then((v=>{if(v.PE.setSize(B,E,!0),D instanceof Float32Array){const B=new Uint8Array(D.length);let E=D.length;for(;E--;){const v=D[E];B[E]=Math.round(255*(0,q.Clamp)(v))}D=B}const z=v.PE.createRawTexture(D,B,E,5,!1,!G,1);v.renderer.setViewport(),v.renderer.applyEffectWrapper(v.wrapper),v.wrapper.effect._bindTexture("textureSampler",z),v.renderer.draw(),Y?o.Tools.ToBlob(v.canvas,(B=>{const E=new FileReader;E.onload=B=>{const E=B.target.result;h&&h(E)},E.readAsArrayBuffer(B)}),y,a):o.Tools.EncodeScreenshotCanvasData(v.canvas,h,y,P,a),z.dispose()}))}function Q(){var B;S?(S.wrapper.dispose(),S.renderer.dispose(),S.PE.dispose()):null===(B=x)||void 0===B||B.then((B=>{B.wrapper.dispose(),B.renderer.dispose(),B.PE.dispose()}));x=null,S=null}const P={DumpData:y,DumpDataAsync:h,DumpFramebuffer:D,Dispose:Q};o.Tools.DumpData=y,o.Tools.DumpDataAsync=h,o.Tools.DumpFramebuffer=D}}]);