"use strict";(self.c2c3ycupenc=self.c2c3ycupenc||[]).push([[20],{11905:(c,r,D)=>{D.r(r),D.d(r,{Dispose:()=>m,DumpData:()=>E,DumpDataAsync:()=>M,DumpFramebuffer:()=>x,DumpTools:()=>Y});var W=D(11771),B=D(11487),t=D(11696),u=D(11538);let a,H=null;async function x(c,r,D,W){let B=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",t=arguments.length>5?arguments[5]:void 0,u=arguments.length>6?arguments[6]:void 0;const a=await D.readPixels(0,0,c,r);E(c,r,new Uint8Array(a.buffer),W,B,t,!0,void 0,u)}async function M(c,r,D){let W=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",B=arguments.length>4?arguments[4]:void 0,t=arguments.length>5&&void 0!==arguments[5]&&arguments[5],u=arguments.length>6&&void 0!==arguments[6]&&arguments[6],a=arguments.length>7?arguments[7]:void 0;return await new Promise((H=>{E(c,r,D,(c=>H(c)),W,B,t,u,a)}))}function E(c,r,x,M){let E=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",Y=arguments.length>5?arguments[5]:void 0,v=arguments.length>6&&void 0!==arguments[6]&&arguments[6],k=arguments.length>7&&void 0!==arguments[7]&&arguments[7],w=arguments.length>8?arguments[8]:void 0;(async function(){return H||(H=new Promise(((c,r)=>{let B,t=null;const H={aa:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(D.bind(D,11797)).then((x=>{let{ThinEngine:M}=x;const E=u.c.Instances.length;try{B=new OffscreenCanvas(100,100),t=new M(B,!1,H)}catch(k){var Y;E<u.c.Instances.length&&(null===(Y=u.c.Instances.pop())||void 0===Y||Y.dispose()),B=document.createElement("canvas"),t=new M(B,!1,H)}u.c.Instances.pop(),u.c.OnEnginesDisposedObservable.add((c=>{t&&c!==t&&!t.M&&0===u.c.Instances.length&&m()})),t.getCaps().parallelShaderCompile=void 0;const v=new W.d(t);D.e(52).then(D.bind(D,14155)).then((D=>{let{passPixelShader:u}=D;if(!t)return void r("Engine is not defined");const H=new W.e({wr:t,name:u.name,fragmentShader:u.shader,samplerNames:["textureSampler"]});a={canvas:B,wr:t,renderer:v,wrapper:H},c(a)}))})).catch(r)}))),await H})().then((D=>{if(D.wr.setSize(c,r,!0),x instanceof Float32Array){const c=new Uint8Array(x.length);let r=x.length;for(;r--;){const D=x[r];c[r]=Math.round(255*(0,t.Clamp)(D))}x=c}const W=D.wr.createRawTexture(x,c,r,5,!1,!v,1);D.renderer.setViewport(),D.renderer.applyEffectWrapper(D.wrapper),D.wrapper.effect._bindTexture("textureSampler",W),D.renderer.draw(),k?B.Tools.ToBlob(D.canvas,(c=>{const r=new FileReader;r.onload=c=>{const r=c.target.result;M&&M(r)},r.readAsArrayBuffer(c)}),E,w):B.Tools.EncodeScreenshotCanvasData(D.canvas,M,E,Y,w),W.dispose()}))}function m(){var c;a?(a.wrapper.dispose(),a.renderer.dispose(),a.wr.dispose()):null===(c=H)||void 0===c||c.then((c=>{c.wrapper.dispose(),c.renderer.dispose(),c.wr.dispose()}));H=null,a=null}const Y={DumpData:E,DumpDataAsync:M,DumpFramebuffer:x,Dispose:m};B.Tools.DumpData=E,B.Tools.DumpDataAsync=M,B.Tools.DumpFramebuffer=x}}]);