"use strict";(self.h66iwo8dvgq=self.h66iwo8dvgq||[]).push([[20],{12072:(b,X,P)=>{P.r(X),P.d(X,{Dispose:()=>e,DumpData:()=>O,DumpDataAsync:()=>f,DumpFramebuffer:()=>w,DumpTools:()=>Y});var Q=P(11944),S=P(11689),d=P(11844),N=P(11732);let a,u=null;async function w(b,X,P,Q){let S=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",d=arguments.length>5?arguments[5]:void 0,N=arguments.length>6?arguments[6]:void 0;const a=await P.readPixels(0,0,b,X);O(b,X,new Uint8Array(a.buffer),Q,S,d,!0,void 0,N)}async function f(b,X,P){let Q=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",S=arguments.length>4?arguments[4]:void 0,d=arguments.length>5&&void 0!==arguments[5]&&arguments[5],N=arguments.length>6&&void 0!==arguments[6]&&arguments[6],a=arguments.length>7?arguments[7]:void 0;return await new Promise((u=>{O(b,X,P,(b=>u(b)),Q,S,d,N,a)}))}function O(b,X,w,f){let O=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",Y=arguments.length>5?arguments[5]:void 0,D=arguments.length>6&&void 0!==arguments[6]&&arguments[6],E=arguments.length>7&&void 0!==arguments[7]&&arguments[7],t=arguments.length>8?arguments[8]:void 0;(async function(){return u||(u=new Promise(((b,X)=>{let S,d=null;const u={Dd:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(P.bind(P,11976)).then((w=>{let{ThinEngine:f}=w;const O=N.e.Instances.length;try{S=new OffscreenCanvas(100,100),d=new f(S,!1,u)}catch(E){var Y;O<N.e.Instances.length&&(null===(Y=N.e.Instances.pop())||void 0===Y||Y.dispose()),S=document.createElement("canvas"),d=new f(S,!1,u)}N.e.Instances.pop(),N.e.OnEnginesDisposedObservable.add((b=>{d&&b!==d&&!d.Y&&0===N.e.Instances.length&&e()})),d.getCaps().parallelShaderCompile=void 0;const D=new Q.d(d);P.e(52).then(P.bind(P,14404)).then((P=>{let{passPixelShader:N}=P;if(!d)return void X("Engine is not defined");const u=new Q.h({EX:d,name:N.name,fragmentShader:N.shader,samplerNames:["textureSampler"]});a={canvas:S,EX:d,renderer:D,wrapper:u},b(a)}))})).catch(X)}))),await u})().then((P=>{if(P.EX.setSize(b,X,!0),w instanceof Float32Array){const b=new Uint8Array(w.length);let X=w.length;for(;X--;){const P=w[X];b[X]=Math.round(255*(0,d.Clamp)(P))}w=b}const Q=P.EX.createRawTexture(w,b,X,5,!1,!D,1);P.renderer.setViewport(),P.renderer.applyEffectWrapper(P.wrapper),P.wrapper.effect._bindTexture("textureSampler",Q),P.renderer.draw(),E?S.Tools.ToBlob(P.canvas,(b=>{const X=new FileReader;X.onload=b=>{const X=b.target.result;f&&f(X)},X.readAsArrayBuffer(b)}),O,t):S.Tools.EncodeScreenshotCanvasData(P.canvas,f,O,Y,t),Q.dispose()}))}function e(){var b;a?(a.wrapper.dispose(),a.renderer.dispose(),a.EX.dispose()):null===(b=u)||void 0===b||b.then((b=>{b.wrapper.dispose(),b.renderer.dispose(),b.EX.dispose()}));u=null,a=null}const Y={DumpData:O,DumpDataAsync:f,DumpFramebuffer:w,Dispose:e};S.Tools.DumpData=O,S.Tools.DumpDataAsync=f,S.Tools.DumpFramebuffer=w}}]);