"use strict";(self.lfntwv94xlc=self.lfntwv94xlc||[]).push([[20],{11550:(m,S,h)=>{h.r(S),h.d(S,{Dispose:()=>Z,DumpData:()=>I,DumpDataAsync:()=>V,DumpFramebuffer:()=>Y,DumpTools:()=>C});var l=h(11446),M=h(11156),O=h(11359),u=h(11196);let b,q=null;async function Y(m,S,h,l){let M=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",O=arguments.length>5?arguments[5]:void 0,u=arguments.length>6?arguments[6]:void 0;const b=await h.readPixels(0,0,m,S);I(m,S,new Uint8Array(b.buffer),l,M,O,!0,void 0,u)}async function V(m,S,h){let l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",M=arguments.length>4?arguments[4]:void 0,O=arguments.length>5&&void 0!==arguments[5]&&arguments[5],u=arguments.length>6&&void 0!==arguments[6]&&arguments[6],b=arguments.length>7?arguments[7]:void 0;return await new Promise((q=>{I(m,S,h,(m=>q(m)),l,M,O,u,b)}))}function I(m,S,Y,V){let I=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",C=arguments.length>5?arguments[5]:void 0,B=arguments.length>6&&void 0!==arguments[6]&&arguments[6],D=arguments.length>7&&void 0!==arguments[7]&&arguments[7],E=arguments.length>8?arguments[8]:void 0;(async function(){return q||(q=new Promise(((m,S)=>{let M,O=null;const q={o:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(h.bind(h,11463)).then((Y=>{let{ThinEngine:V}=Y;const I=u.d.Instances.length;try{M=new OffscreenCanvas(100,100),O=new V(M,!1,q)}catch(D){var C;I<u.d.Instances.length&&(null===(C=u.d.Instances.pop())||void 0===C||C.dispose()),M=document.createElement("canvas"),O=new V(M,!1,q)}u.d.Instances.pop(),u.d.OnEnginesDisposedObservable.add((m=>{O&&m!==O&&!O.u&&0===u.d.Instances.length&&Z()})),O.getCaps().parallelShaderCompile=void 0;const B=new l.b(O);h.e(52).then(h.bind(h,13867)).then((h=>{let{passPixelShader:u}=h;if(!O)return void S("Engine is not defined");const q=new l.d({ES:O,name:u.name,fragmentShader:u.shader,samplerNames:["textureSampler"]});b={canvas:M,ES:O,renderer:B,wrapper:q},m(b)}))})).catch(S)}))),await q})().then((h=>{if(h.ES.setSize(m,S,!0),Y instanceof Float32Array){const m=new Uint8Array(Y.length);let S=Y.length;for(;S--;){const h=Y[S];m[S]=Math.round(255*(0,O.Clamp)(h))}Y=m}const l=h.ES.createRawTexture(Y,m,S,5,!1,!B,1);h.renderer.setViewport(),h.renderer.applyEffectWrapper(h.wrapper),h.wrapper.effect._bindTexture("textureSampler",l),h.renderer.draw(),D?M.Tools.ToBlob(h.canvas,(m=>{const S=new FileReader;S.onload=m=>{const S=m.target.result;V&&V(S)},S.readAsArrayBuffer(m)}),I,E):M.Tools.EncodeScreenshotCanvasData(h.canvas,V,I,C,E),l.dispose()}))}function Z(){var m;b?(b.wrapper.dispose(),b.renderer.dispose(),b.ES.dispose()):null===(m=q)||void 0===m||m.then((m=>{m.wrapper.dispose(),m.renderer.dispose(),m.ES.dispose()}));q=null,b=null}const C={DumpData:I,DumpDataAsync:V,DumpFramebuffer:Y,Dispose:Z};M.Tools.DumpData=I,M.Tools.DumpDataAsync=V,M.Tools.DumpFramebuffer=Y}}]);