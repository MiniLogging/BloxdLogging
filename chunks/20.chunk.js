"use strict";(self["686i8587bmi"]=self["686i8587bmi"]||[]).push([[20],{12972:(h,d,T)=>{T.r(d),T.d(d,{Dispose:()=>r,DumpData:()=>S,DumpDataAsync:()=>Z,DumpFramebuffer:()=>U,DumpTools:()=>c});var Y=T(12867),y=T(12574),C=T(12787),n=T(12625);let X,F=null;async function U(h,d,T,Y){let y=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",C=arguments.length>5?arguments[5]:void 0,n=arguments.length>6?arguments[6]:void 0;const X=await T.readPixels(0,0,h,d);S(h,d,new Uint8Array(X.buffer),Y,y,C,!0,void 0,n)}async function Z(h,d,T){let Y=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",y=arguments.length>4?arguments[4]:void 0,C=arguments.length>5&&void 0!==arguments[5]&&arguments[5],n=arguments.length>6&&void 0!==arguments[6]&&arguments[6],X=arguments.length>7?arguments[7]:void 0;return await new Promise((F=>{S(h,d,T,(h=>F(h)),Y,y,C,n,X)}))}function S(h,d,U,Z){let S=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",c=arguments.length>5?arguments[5]:void 0,O=arguments.length>6&&void 0!==arguments[6]&&arguments[6],f=arguments.length>7&&void 0!==arguments[7]&&arguments[7],J=arguments.length>8?arguments[8]:void 0;(async function(){return F||(F=new Promise(((h,d)=>{let y,C=null;const F={o:!0,depth:!1,xd:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(T.bind(T,12890)).then((U=>{let{ThinEngine:Z}=U;const S=n.d.Instances.length;try{y=new OffscreenCanvas(100,100),C=new Z(y,!1,F)}catch(f){var c;S<n.d.Instances.length&&(null===(c=n.d.Instances.pop())||void 0===c||c.dispose()),y=document.createElement("canvas"),C=new Z(y,!1,F)}n.d.Instances.pop(),n.d.OnEnginesDisposedObservable.add((h=>{C&&h!==C&&!C.U&&0===n.d.Instances.length&&r()})),C.getCaps().parallelShaderCompile=void 0;const O=new Y.d(C);T.e(52).then(T.bind(T,15286)).then((T=>{let{passPixelShader:n}=T;if(!C)return void d("Engine is not defined");const F=new Y.h({Hd:C,name:n.name,fragmentShader:n.shader,samplerNames:["textureSampler"]});X={canvas:y,Hd:C,renderer:O,wrapper:F},h(X)}))})).catch(d)}))),await F})().then((T=>{if(T.Hd.setSize(h,d,!0),U instanceof Float32Array){const h=new Uint8Array(U.length);let d=U.length;for(;d--;){const T=U[d];h[d]=Math.round(255*(0,C.Clamp)(T))}U=h}const Y=T.Hd.createRawTexture(U,h,d,5,!1,!O,1);T.renderer.setViewport(),T.renderer.applyEffectWrapper(T.wrapper),T.wrapper.effect._bindTexture("textureSampler",Y),T.renderer.draw(),f?y.Tools.ToBlob(T.canvas,(h=>{const d=new FileReader;d.onload=h=>{const d=h.target.result;Z&&Z(d)},d.readAsArrayBuffer(h)}),S,J):y.Tools.EncodeScreenshotCanvasData(T.canvas,Z,S,c,J),Y.dispose()}))}function r(){var h;X?(X.wrapper.dispose(),X.renderer.dispose(),X.Hd.dispose()):null===(h=F)||void 0===h||h.then((h=>{h.wrapper.dispose(),h.renderer.dispose(),h.Hd.dispose()}));F=null,X=null}const c={DumpData:S,DumpDataAsync:Z,DumpFramebuffer:U,Dispose:r};y.Tools.DumpData=S,y.Tools.DumpDataAsync=Z,y.Tools.DumpFramebuffer=U}}]);