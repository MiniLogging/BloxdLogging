"use strict";(self.zjjkhojdx1=self.zjjkhojdx1||[]).push([[20],{11456:(k,h,o)=>{o.r(h),o.d(h,{Dispose:()=>a,DumpData:()=>K,DumpDataAsync:()=>A,DumpFramebuffer:()=>l,DumpTools:()=>N});var x=o(11339),I=o(11078),q=o(11260),Y=o(11120);let J,G=null;async function l(k,h,o,x){let I=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",q=arguments.length>5?arguments[5]:void 0,Y=arguments.length>6?arguments[6]:void 0;const J=await o.readPixels(0,0,k,h);K(k,h,new Uint8Array(J.buffer),x,I,q,!0,void 0,Y)}async function A(k,h,o){let x=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",I=arguments.length>4?arguments[4]:void 0,q=arguments.length>5&&void 0!==arguments[5]&&arguments[5],Y=arguments.length>6&&void 0!==arguments[6]&&arguments[6],J=arguments.length>7?arguments[7]:void 0;return await new Promise((G=>{K(k,h,o,(k=>G(k)),x,I,q,Y,J)}))}function K(k,h,l,A){let K=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",N=arguments.length>5?arguments[5]:void 0,X=arguments.length>6&&void 0!==arguments[6]&&arguments[6],c=arguments.length>7&&void 0!==arguments[7]&&arguments[7],W=arguments.length>8?arguments[8]:void 0;(async function(){return G||(G=new Promise(((k,h)=>{let I,q=null;const G={nh:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(o.bind(o,11372)).then((l=>{let{ThinEngine:A}=l;const K=Y.b.Instances.length;try{I=new OffscreenCanvas(100,100),q=new A(I,!1,G)}catch(c){var N;K<Y.b.Instances.length&&(null===(N=Y.b.Instances.pop())||void 0===N||N.dispose()),I=document.createElement("canvas"),q=new A(I,!1,G)}Y.b.Instances.pop(),Y.b.OnEnginesDisposedObservable.add((k=>{q&&k!==q&&!q.l&&0===Y.b.Instances.length&&a()})),q.getCaps().parallelShaderCompile=void 0;const X=new x.c(q);o.e(52).then(o.bind(o,13693)).then((o=>{let{passPixelShader:Y}=o;if(!q)return void h("Engine is not defined");const G=new x.e({bh:q,name:Y.name,fragmentShader:Y.shader,samplerNames:["textureSampler"]});J={canvas:I,bh:q,renderer:X,wrapper:G},k(J)}))})).catch(h)}))),await G})().then((o=>{if(o.bh.setSize(k,h,!0),l instanceof Float32Array){const k=new Uint8Array(l.length);let h=l.length;for(;h--;){const o=l[h];k[h]=Math.round(255*(0,q.Clamp)(o))}l=k}const x=o.bh.createRawTexture(l,k,h,5,!1,!X,1);o.renderer.setViewport(),o.renderer.applyEffectWrapper(o.wrapper),o.wrapper.effect._bindTexture("textureSampler",x),o.renderer.draw(),c?I.Tools.ToBlob(o.canvas,(k=>{const h=new FileReader;h.onload=k=>{const h=k.target.result;A&&A(h)},h.readAsArrayBuffer(k)}),K,W):I.Tools.EncodeScreenshotCanvasData(o.canvas,A,K,N,W),x.dispose()}))}function a(){var k;J?(J.wrapper.dispose(),J.renderer.dispose(),J.bh.dispose()):null===(k=G)||void 0===k||k.then((k=>{k.wrapper.dispose(),k.renderer.dispose(),k.bh.dispose()}));G=null,J=null}const N={DumpData:K,DumpDataAsync:A,DumpFramebuffer:l,Dispose:a};I.Tools.DumpData=K,I.Tools.DumpDataAsync=A,I.Tools.DumpFramebuffer=l}}]);