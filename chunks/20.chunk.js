"use strict";(self["3nlrbof8msu"]=self["3nlrbof8msu"]||[]).push([[20],{12955:(t,b,Z)=>{Z.r(b),Z.d(b,{Dispose:()=>r,DumpData:()=>I,DumpDataAsync:()=>g,DumpFramebuffer:()=>Y,DumpTools:()=>M});var J=Z(12838),S=Z(12549),P=Z(12745),v=Z(12585);let h,C=null;async function Y(t,b,Z,J){let S=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",P=arguments.length>5?arguments[5]:void 0,v=arguments.length>6?arguments[6]:void 0;const h=await Z.readPixels(0,0,t,b);I(t,b,new Uint8Array(h.buffer),J,S,P,!0,void 0,v)}async function g(t,b,Z){let J=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",S=arguments.length>4?arguments[4]:void 0,P=arguments.length>5&&void 0!==arguments[5]&&arguments[5],v=arguments.length>6&&void 0!==arguments[6]&&arguments[6],h=arguments.length>7?arguments[7]:void 0;return await new Promise((C=>{I(t,b,Z,(t=>C(t)),J,S,P,v,h)}))}function I(t,b,Y,g){let I=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",M=arguments.length>5?arguments[5]:void 0,T=arguments.length>6&&void 0!==arguments[6]&&arguments[6],a=arguments.length>7&&void 0!==arguments[7]&&arguments[7],k=arguments.length>8?arguments[8]:void 0;(async function(){return C||(C=new Promise(((t,b)=>{let S,P=null;const C={o:!0,depth:!1,Ub:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(Z.bind(Z,12866)).then((Y=>{let{ThinEngine:g}=Y;const I=v.e.Instances.length;try{S=new OffscreenCanvas(100,100),P=new g(S,!1,C)}catch(a){var M;I<v.e.Instances.length&&(null===(M=v.e.Instances.pop())||void 0===M||M.dispose()),S=document.createElement("canvas"),P=new g(S,!1,C)}v.e.Instances.pop(),v.e.OnEnginesDisposedObservable.add((t=>{P&&t!==P&&!P.h&&0===v.e.Instances.length&&r()})),P.getCaps().parallelShaderCompile=void 0;const T=new J.b(P);Z.e(52).then(Z.bind(Z,15205)).then((Z=>{let{passPixelShader:v}=Z;if(!P)return void b("Engine is not defined");const C=new J.d({ZZ:P,name:v.name,fragmentShader:v.shader,samplerNames:["textureSampler"]});h={canvas:S,ZZ:P,renderer:T,wrapper:C},t(h)}))})).catch(b)}))),await C})().then((Z=>{if(Z.ZZ.setSize(t,b,!0),Y instanceof Float32Array){const t=new Uint8Array(Y.length);let b=Y.length;for(;b--;){const Z=Y[b];t[b]=Math.round(255*(0,P.Clamp)(Z))}Y=t}const J=Z.ZZ.createRawTexture(Y,t,b,5,!1,!T,1);Z.renderer.setViewport(),Z.renderer.applyEffectWrapper(Z.wrapper),Z.wrapper.effect._bindTexture("textureSampler",J),Z.renderer.draw(),a?S.Tools.ToBlob(Z.canvas,(t=>{const b=new FileReader;b.onload=t=>{const b=t.target.result;g&&g(b)},b.readAsArrayBuffer(t)}),I,k):S.Tools.EncodeScreenshotCanvasData(Z.canvas,g,I,M,k),J.dispose()}))}function r(){var t;h?(h.wrapper.dispose(),h.renderer.dispose(),h.ZZ.dispose()):null===(t=C)||void 0===t||t.then((t=>{t.wrapper.dispose(),t.renderer.dispose(),t.ZZ.dispose()}));C=null,h=null}const M={DumpData:I,DumpDataAsync:g,DumpFramebuffer:Y,Dispose:r};S.Tools.DumpData=I,S.Tools.DumpDataAsync=g,S.Tools.DumpFramebuffer=Y}}]);