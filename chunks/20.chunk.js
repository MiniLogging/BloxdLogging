"use strict";(self.fkqm0epoq5=self.fkqm0epoq5||[]).push([[20],{11940:(D,l,G)=>{G.r(l),G.d(l,{Dispose:()=>j,DumpData:()=>g,DumpDataAsync:()=>n,DumpFramebuffer:()=>R,DumpTools:()=>e});var V=G(11822),N=G(11530),M=G(11728),b=G(11571);let X,t=null;async function R(D,l,G,V){let N=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",M=arguments.length>5?arguments[5]:void 0,b=arguments.length>6?arguments[6]:void 0;const X=await G.readPixels(0,0,D,l);g(D,l,new Uint8Array(X.buffer),V,N,M,!0,void 0,b)}async function n(D,l,G){let V=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",N=arguments.length>4?arguments[4]:void 0,M=arguments.length>5&&void 0!==arguments[5]&&arguments[5],b=arguments.length>6&&void 0!==arguments[6]&&arguments[6],X=arguments.length>7?arguments[7]:void 0;return await new Promise((t=>{g(D,l,G,(D=>t(D)),V,N,M,b,X)}))}function g(D,l,R,n){let g=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",e=arguments.length>5?arguments[5]:void 0,K=arguments.length>6&&void 0!==arguments[6]&&arguments[6],F=arguments.length>7&&void 0!==arguments[7]&&arguments[7],d=arguments.length>8?arguments[8]:void 0;(async function(){return t||(t=new Promise(((D,l)=>{let N,M=null;const t={Xb:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(G.bind(G,11851)).then((R=>{let{ThinEngine:n}=R;const g=b.d.Instances.length;try{N=new OffscreenCanvas(100,100),M=new n(N,!1,t)}catch(F){var e;g<b.d.Instances.length&&(null===(e=b.d.Instances.pop())||void 0===e||e.dispose()),N=document.createElement("canvas"),M=new n(N,!1,t)}b.d.Instances.pop(),b.d.OnEnginesDisposedObservable.add((D=>{M&&D!==M&&!M.X&&0===b.d.Instances.length&&j()})),M.getCaps().parallelShaderCompile=void 0;const K=new V.b(M);G.e(52).then(G.bind(G,14169)).then((G=>{let{passPixelShader:b}=G;if(!M)return void l("Engine is not defined");const t=new V.e({el:M,name:b.name,fragmentShader:b.shader,samplerNames:["textureSampler"]});X={canvas:N,el:M,renderer:K,wrapper:t},D(X)}))})).catch(l)}))),await t})().then((G=>{if(G.el.setSize(D,l,!0),R instanceof Float32Array){const D=new Uint8Array(R.length);let l=R.length;for(;l--;){const G=R[l];D[l]=Math.round(255*(0,M.Clamp)(G))}R=D}const V=G.el.createRawTexture(R,D,l,5,!1,!K,1);G.renderer.setViewport(),G.renderer.applyEffectWrapper(G.wrapper),G.wrapper.effect._bindTexture("textureSampler",V),G.renderer.draw(),F?N.Tools.ToBlob(G.canvas,(D=>{const l=new FileReader;l.onload=D=>{const l=D.target.result;n&&n(l)},l.readAsArrayBuffer(D)}),g,d):N.Tools.EncodeScreenshotCanvasData(G.canvas,n,g,e,d),V.dispose()}))}function j(){var D;X?(X.wrapper.dispose(),X.renderer.dispose(),X.el.dispose()):null===(D=t)||void 0===D||D.then((D=>{D.wrapper.dispose(),D.renderer.dispose(),D.el.dispose()}));t=null,X=null}const e={DumpData:g,DumpDataAsync:n,DumpFramebuffer:R,Dispose:j};N.Tools.DumpData=g,N.Tools.DumpDataAsync=n,N.Tools.DumpFramebuffer=R}}]);