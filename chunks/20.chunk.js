"use strict";(self.hbnkweqmycf=self.hbnkweqmycf||[]).push([[20],{11835:(F,P,f)=>{f.r(P),f.d(P,{Dispose:()=>T,DumpData:()=>u,DumpDataAsync:()=>i,DumpFramebuffer:()=>j,DumpTools:()=>Y});var c=f(11730),N=f(11462),q=f(11664),H=f(11501);let A,o=null;async function j(F,P,f,c){let N=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",q=arguments.length>5?arguments[5]:void 0,H=arguments.length>6?arguments[6]:void 0;const A=await f.readPixels(0,0,F,P);u(F,P,new Uint8Array(A.buffer),c,N,q,!0,void 0,H)}async function i(F,P,f){let c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",N=arguments.length>4?arguments[4]:void 0,q=arguments.length>5&&void 0!==arguments[5]&&arguments[5],H=arguments.length>6&&void 0!==arguments[6]&&arguments[6],A=arguments.length>7?arguments[7]:void 0;return await new Promise((o=>{u(F,P,f,(F=>o(F)),c,N,q,H,A)}))}function u(F,P,j,i){let u=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",Y=arguments.length>5?arguments[5]:void 0,t=arguments.length>6&&void 0!==arguments[6]&&arguments[6],C=arguments.length>7&&void 0!==arguments[7]&&arguments[7],L=arguments.length>8?arguments[8]:void 0;(async function(){return o||(o=new Promise(((F,P)=>{let N,q=null;const o={If:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(f.bind(f,11752)).then((j=>{let{ThinEngine:i}=j;const u=H.b.Instances.length;try{N=new OffscreenCanvas(100,100),q=new i(N,!1,o)}catch(C){var Y;u<H.b.Instances.length&&(null===(Y=H.b.Instances.pop())||void 0===Y||Y.dispose()),N=document.createElement("canvas"),q=new i(N,!1,o)}H.b.Instances.pop(),H.b.OnEnginesDisposedObservable.add((F=>{q&&F!==q&&!q.u&&0===H.b.Instances.length&&T()})),q.getCaps().parallelShaderCompile=void 0;const t=new c.b(q);f.e(52).then(f.bind(f,14082)).then((f=>{let{passPixelShader:H}=f;if(!q)return void P("Engine is not defined");const o=new c.f({YP:q,name:H.name,fragmentShader:H.shader,samplerNames:["textureSampler"]});A={canvas:N,YP:q,renderer:t,wrapper:o},F(A)}))})).catch(P)}))),await o})().then((f=>{if(f.YP.setSize(F,P,!0),j instanceof Float32Array){const F=new Uint8Array(j.length);let P=j.length;for(;P--;){const f=j[P];F[P]=Math.round(255*(0,q.Clamp)(f))}j=F}const c=f.YP.createRawTexture(j,F,P,5,!1,!t,1);f.renderer.setViewport(),f.renderer.applyEffectWrapper(f.wrapper),f.wrapper.effect._bindTexture("textureSampler",c),f.renderer.draw(),C?N.Tools.ToBlob(f.canvas,(F=>{const P=new FileReader;P.onload=F=>{const P=F.target.result;i&&i(P)},P.readAsArrayBuffer(F)}),u,L):N.Tools.EncodeScreenshotCanvasData(f.canvas,i,u,Y,L),c.dispose()}))}function T(){var F;A?(A.wrapper.dispose(),A.renderer.dispose(),A.YP.dispose()):null===(F=o)||void 0===F||F.then((F=>{F.wrapper.dispose(),F.renderer.dispose(),F.YP.dispose()}));o=null,A=null}const Y={DumpData:u,DumpDataAsync:i,DumpFramebuffer:j,Dispose:T};N.Tools.DumpData=u,N.Tools.DumpDataAsync=i,N.Tools.DumpFramebuffer=j}}]);