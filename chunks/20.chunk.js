"use strict";(self.g111kvdsqxc=self.g111kvdsqxc||[]).push([[20],{11502:(K,H,M)=>{M.r(H),M.d(H,{Dispose:()=>G,DumpData:()=>z,DumpDataAsync:()=>f,DumpFramebuffer:()=>I,DumpTools:()=>a});var q=M(11399),w=M(11100),u=M(11307),y=M(11143);let h,W=null;async function I(K,H,M,q){let w=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",u=arguments.length>5?arguments[5]:void 0,y=arguments.length>6?arguments[6]:void 0;const h=await M.readPixels(0,0,K,H);z(K,H,new Uint8Array(h.buffer),q,w,u,!0,void 0,y)}async function f(K,H,M){let q=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",w=arguments.length>4?arguments[4]:void 0,u=arguments.length>5&&void 0!==arguments[5]&&arguments[5],y=arguments.length>6&&void 0!==arguments[6]&&arguments[6],h=arguments.length>7?arguments[7]:void 0;return await new Promise((W=>{z(K,H,M,(K=>W(K)),q,w,u,y,h)}))}function z(K,H,I,f){let z=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",a=arguments.length>5?arguments[5]:void 0,v=arguments.length>6&&void 0!==arguments[6]&&arguments[6],O=arguments.length>7&&void 0!==arguments[7]&&arguments[7],L=arguments.length>8?arguments[8]:void 0;(async function(){return W||(W=new Promise(((K,H)=>{let w,u=null;const W={o:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(M.bind(M,11415)).then((I=>{let{ThinEngine:f}=I;const z=y.b.Instances.length;try{w=new OffscreenCanvas(100,100),u=new f(w,!1,W)}catch(O){var a;z<y.b.Instances.length&&(null===(a=y.b.Instances.pop())||void 0===a||a.dispose()),w=document.createElement("canvas"),u=new f(w,!1,W)}y.b.Instances.pop(),y.b.OnEnginesDisposedObservable.add((K=>{u&&K!==u&&!u.W&&0===y.b.Instances.length&&G()})),u.getCaps().parallelShaderCompile=void 0;const v=new q.e(u);M.e(52).then(M.bind(M,13758)).then((M=>{let{passPixelShader:y}=M;if(!u)return void H("Engine is not defined");const W=new q.g({vH:u,name:y.name,fragmentShader:y.shader,samplerNames:["textureSampler"]});h={canvas:w,vH:u,renderer:v,wrapper:W},K(h)}))})).catch(H)}))),await W})().then((M=>{if(M.vH.setSize(K,H,!0),I instanceof Float32Array){const K=new Uint8Array(I.length);let H=I.length;for(;H--;){const M=I[H];K[H]=Math.round(255*(0,u.Clamp)(M))}I=K}const q=M.vH.createRawTexture(I,K,H,5,!1,!v,1);M.renderer.setViewport(),M.renderer.applyEffectWrapper(M.wrapper),M.wrapper.effect._bindTexture("textureSampler",q),M.renderer.draw(),O?w.Tools.ToBlob(M.canvas,(K=>{const H=new FileReader;H.onload=K=>{const H=K.target.result;f&&f(H)},H.readAsArrayBuffer(K)}),z,L):w.Tools.EncodeScreenshotCanvasData(M.canvas,f,z,a,L),q.dispose()}))}function G(){var K;h?(h.wrapper.dispose(),h.renderer.dispose(),h.vH.dispose()):null===(K=W)||void 0===K||K.then((K=>{K.wrapper.dispose(),K.renderer.dispose(),K.vH.dispose()}));W=null,h=null}const a={DumpData:z,DumpDataAsync:f,DumpFramebuffer:I,Dispose:G};w.Tools.DumpData=z,w.Tools.DumpDataAsync=f,w.Tools.DumpFramebuffer=I}}]);