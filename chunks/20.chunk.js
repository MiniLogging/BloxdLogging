"use strict";(self.a14qw1h7fq=self.a14qw1h7fq||[]).push([[20],{11402:(R,J,B)=>{B.r(J),B.d(J,{Dispose:()=>E,DumpData:()=>l,DumpDataAsync:()=>D,DumpFramebuffer:()=>e,DumpTools:()=>O});var Q=B(11294),h=B(11030),y=B(11201),N=B(11065);let r,q=null;async function e(R,J,B,Q){let h=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",y=arguments.length>5?arguments[5]:void 0,N=arguments.length>6?arguments[6]:void 0;const r=await B.readPixels(0,0,R,J);l(R,J,new Uint8Array(r.buffer),Q,h,y,!0,void 0,N)}async function D(R,J,B){let Q=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",h=arguments.length>4?arguments[4]:void 0,y=arguments.length>5&&void 0!==arguments[5]&&arguments[5],N=arguments.length>6&&void 0!==arguments[6]&&arguments[6],r=arguments.length>7?arguments[7]:void 0;return await new Promise((q=>{l(R,J,B,(R=>q(R)),Q,h,y,N,r)}))}function l(R,J,e,D){let l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",O=arguments.length>5?arguments[5]:void 0,n=arguments.length>6&&void 0!==arguments[6]&&arguments[6],P=arguments.length>7&&void 0!==arguments[7]&&arguments[7],A=arguments.length>8?arguments[8]:void 0;(async function(){return q||(q=new Promise(((R,J)=>{let h,y=null;const q={kh:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(B.bind(B,11317)).then((e=>{let{ThinEngine:D}=e;const l=N.e.Instances.length;try{h=new OffscreenCanvas(100,100),y=new D(h,!1,q)}catch(P){var O;l<N.e.Instances.length&&(null===(O=N.e.Instances.pop())||void 0===O||O.dispose()),h=document.createElement("canvas"),y=new D(h,!1,q)}N.e.Instances.pop(),N.e.OnEnginesDisposedObservable.add((R=>{y&&R!==y&&!y.D&&0===N.e.Instances.length&&E()})),y.getCaps().parallelShaderCompile=void 0;const n=new Q.e(y);B.e(52).then(B.bind(B,13677)).then((B=>{let{passPixelShader:N}=B;if(!y)return void J("Engine is not defined");const q=new Q.f({OJ:y,name:N.name,fragmentShader:N.shader,samplerNames:["textureSampler"]});r={canvas:h,OJ:y,renderer:n,wrapper:q},R(r)}))})).catch(J)}))),await q})().then((B=>{if(B.OJ.setSize(R,J,!0),e instanceof Float32Array){const R=new Uint8Array(e.length);let J=e.length;for(;J--;){const B=e[J];R[J]=Math.round(255*(0,y.Clamp)(B))}e=R}const Q=B.OJ.createRawTexture(e,R,J,5,!1,!n,1);B.renderer.setViewport(),B.renderer.applyEffectWrapper(B.wrapper),B.wrapper.effect._bindTexture("textureSampler",Q),B.renderer.draw(),P?h.Tools.ToBlob(B.canvas,(R=>{const J=new FileReader;J.onload=R=>{const J=R.target.result;D&&D(J)},J.readAsArrayBuffer(R)}),l,A):h.Tools.EncodeScreenshotCanvasData(B.canvas,D,l,O,A),Q.dispose()}))}function E(){var R;r?(r.wrapper.dispose(),r.renderer.dispose(),r.OJ.dispose()):null===(R=q)||void 0===R||R.then((R=>{R.wrapper.dispose(),R.renderer.dispose(),R.OJ.dispose()}));q=null,r=null}const O={DumpData:l,DumpDataAsync:D,DumpFramebuffer:e,Dispose:E};h.Tools.DumpData=l,h.Tools.DumpDataAsync=D,h.Tools.DumpFramebuffer=e}}]);