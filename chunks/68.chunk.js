"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[68],{13971:(z,u,Y)=>{Y.r(u),Y.d(u,{FlowGraphAbsBlock:()=>i,FlowGraphAcosBlock:()=>Jz,FlowGraphAcoshBlock:()=>Mz,FlowGraphAddBlock:()=>C,FlowGraphAsinBlock:()=>Ez,FlowGraphAsinhBlock:()=>gz,FlowGraphAtan2Block:()=>Tz,FlowGraphAtanBlock:()=>lz,FlowGraphAtanhBlock:()=>qz,FlowGraphBitwiseAndBlock:()=>sz,FlowGraphBitwiseLeftShiftBlock:()=>Xz,FlowGraphBitwiseNotBlock:()=>Zz,FlowGraphBitwiseOrBlock:()=>vz,FlowGraphBitwiseRightShiftBlock:()=>Qz,FlowGraphBitwiseXorBlock:()=>iz,FlowGraphCeilBlock:()=>A,FlowGraphClampBlock:()=>m,FlowGraphCosBlock:()=>Yz,FlowGraphCoshBlock:()=>Lz,FlowGraphCubeRootBlock:()=>tz,FlowGraphDegToRadBlock:()=>r,FlowGraphDivideBlock:()=>o,FlowGraphEBlock:()=>t,FlowGraphEqualityBlock:()=>a,FlowGraphExpBlock:()=>Cz,FlowGraphFloorBlock:()=>V,FlowGraphFractionBlock:()=>G,FlowGraphGreaterThanBlock:()=>e,FlowGraphGreaterThanOrEqualBlock:()=>N,FlowGraphInfBlock:()=>Z,FlowGraphIsInfinityBlock:()=>f,FlowGraphIsNanBlock:()=>B,FlowGraphLeadingZerosBlock:()=>Vz,FlowGraphLessThanBlock:()=>k,FlowGraphLessThanOrEqualBlock:()=>P,FlowGraphLog10Block:()=>oz,FlowGraphLog2Block:()=>hz,FlowGraphLogBlock:()=>Kz,FlowGraphMathInterpolationBlock:()=>y,FlowGraphMaxBlock:()=>U,FlowGraphMinBlock:()=>c,FlowGraphModuloBlock:()=>w,FlowGraphMultiplyBlock:()=>h,FlowGraphNaNBlock:()=>s,FlowGraphNegationBlock:()=>F,FlowGraphOneBitsCounterBlock:()=>xz,FlowGraphPiBlock:()=>W,FlowGraphPowerBlock:()=>Wz,FlowGraphRadToDegBlock:()=>zz,FlowGraphRandomBlock:()=>d,FlowGraphRoundBlock:()=>x,FlowGraphSaturateBlock:()=>S,FlowGraphSignBlock:()=>X,FlowGraphSinBlock:()=>uz,FlowGraphSinhBlock:()=>bz,FlowGraphSquareRootBlock:()=>dz,FlowGraphSubtractBlock:()=>K,FlowGraphTanBlock:()=>Hz,FlowGraphTanhBlock:()=>Dz,FlowGraphTrailingZerosBlock:()=>Az,FlowGraphTruncBlock:()=>Q});var H=Y(10918),E=Y(12531),J=Y(13977),l=Y(13983);class T extends l.e{constructor(z,u,Y,H){super(z,H),this._operation=u,this._className=Y}_doOperation(z){return this._operation(z)}getClassName(){return this._className}}var b=Y(10903),L=Y(13992);class D extends l.e{constructor(z,u,Y,H,E,J,l){super(H,l),this._operation=E,this._className=J,this.a=this.registerDataInput("a",z),this.b=this.registerDataInput("b",u),this.c=this.registerDataInput("c",Y)}_doOperation(z){return this._operation(this.a.getValue(z),this.b.getValue(z),this.c.getValue(z))}getClassName(){return this._className}}var g=Y(12523),M=Y(12533),q=Y(12565);class C extends J.e{constructor(z){super((0,E.K)(null===z||void 0===z?void 0:z.type),(0,E.K)(null===z||void 0===z?void 0:z.type),(0,E.K)(null===z||void 0===z?void 0:z.type),((z,u)=>this._polymorphicAdd(z,u)),"FlowGraphAddBlock",z)}_polymorphicAdd(z,u){const Y=(0,q.i)(z),H=(0,q.i)(u);if((0,q.f)(Y,H)||(0,q.e)(Y,H)||(0,q.d)(Y,H))return z.add(u);if("Quaternion"===Y||"Vector4"===H)return new b.t(z.x,z.y,z.z,z.w).addInPlace(u);if("Vector4"===Y||"Quaternion"===H)return z.add(u);var E;if(null!==(E=this.config)&&void 0!==E&&E.preventIntegerFloatArithmetic&&typeof z!==typeof u)throw new Error("Cannot add different types of numbers.");return(0,q.l)(z)+(0,q.l)(u)}}(0,H.d)("FlowGraphAddBlock",C);class K extends J.e{constructor(z){super((0,E.K)(null===z||void 0===z?void 0:z.type),(0,E.K)(null===z||void 0===z?void 0:z.type),(0,E.K)(null===z||void 0===z?void 0:z.type),((z,u)=>this._polymorphicSubtract(z,u)),"FlowGraphSubtractBlock",z)}_polymorphicSubtract(z,u){const Y=(0,q.i)(z),H=(0,q.i)(u);if((0,q.f)(Y,H)||(0,q.d)(Y,H)||(0,q.e)(Y,H))return z.JY(u);if("Quaternion"===Y||"Vector4"===H)return new b.t(z.x,z.y,z.z,z.w).dg(u);if("Vector4"===Y||"Quaternion"===H)return z.JY(u);var E;if(null!==(E=this.config)&&void 0!==E&&E.preventIntegerFloatArithmetic&&typeof z!==typeof u)throw new Error("Cannot add different types of numbers.");return(0,q.l)(z)-(0,q.l)(u)}}(0,H.d)("FlowGraphSubtractBlock",K);class h extends J.e{constructor(z){super((0,E.K)(null===z||void 0===z?void 0:z.type),(0,E.K)(null===z||void 0===z?void 0:z.type),(0,E.K)(null===z||void 0===z?void 0:z.type),((z,u)=>this._polymorphicMultiply(z,u)),"FlowGraphMultiplyBlock",z)}_polymorphicMultiply(z,u){const Y=(0,q.i)(z),H=(0,q.i)(u);if((0,q.f)(Y,H)||(0,q.d)(Y,H))return z.multiply(u);if("Quaternion"===Y||"Vector4"===H)return new b.t(z.x,z.y,z.z,z.w).multiplyInPlace(u);if("Vector4"===Y||"Quaternion"===H)return z.multiply(u);if((0,q.e)(Y,H)){var E;if(null!==(E=this.config)&&void 0!==E&&E.useMatrixPerComponent){const H=z.m;for(let z=0;z<H.length;z++)H[z]*=u.m[z];return"Matrix2D"===Y?new M.e(H):"Matrix3D"===Y?new M.i(H):b.b.Nl(H)}return u.multiply(z)}var J;if(null!==(J=this.config)&&void 0!==J&&J.preventIntegerFloatArithmetic&&typeof z!==typeof u)throw new Error("Cannot add different types of numbers.");return(0,q.l)(z)*(0,q.l)(u)}}(0,H.d)("FlowGraphMultiplyBlock",h);class o extends J.e{constructor(z){super((0,E.K)(null===z||void 0===z?void 0:z.type),(0,E.K)(null===z||void 0===z?void 0:z.type),(0,E.K)(null===z||void 0===z?void 0:z.type),((z,u)=>this._polymorphicDivide(z,u)),"FlowGraphDivideBlock",z)}_polymorphicDivide(z,u){const Y=(0,q.i)(z),H=(0,q.i)(u);if((0,q.f)(Y,H)||(0,q.d)(Y,H))return z.divide(u);if("Quaternion"===Y||"Quaternion"===H){const Y=z.clone();return Y.x/=u.x,Y.y/=u.y,Y.z/=u.z,Y.w/=u.w,Y}if("Quaternion"===Y||"Vector4"===H)return new b.t(z.x,z.y,z.z,z.w).divideInPlace(u);if("Vector4"===Y||"Quaternion"===H)return z.divide(u);if((0,q.e)(Y,H)){var E;if(null!==(E=this.config)&&void 0!==E&&E.useMatrixPerComponent){const H=z.m;for(let z=0;z<H.length;z++)H[z]/=u.m[z];return"Matrix2D"===Y?new M.e(H):"Matrix3D"===Y?new M.i(H):b.b.Nl(H)}return z.divide(u)}var J;if(null!==(J=this.config)&&void 0!==J&&J.preventIntegerFloatArithmetic&&typeof z!==typeof u)throw new Error("Cannot add different types of numbers.");return(0,q.l)(z)/(0,q.l)(u)}}(0,H.d)("FlowGraphDivideBlock",o);class d extends T{constructor(z){super(E.p,(z=>this._random(z)),"FlowGraphRandomBlock",z),this.min=this.registerDataInput("min",E.p,(null===z||void 0===z?void 0:z.min)??0),this.max=this.registerDataInput("max",E.p,(null===z||void 0===z?void 0:z.max)??1),null!==z&&void 0!==z&&z.seed&&(this._seed=z.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const z=1e4*Math.sin(this._seed++);return z-Math.floor(z)}return Math.random()}_random(z){const u=this.min.getValue(z),Y=this.max.getValue(z);return this._getRandomValue()*(Y-u)+u}}(0,H.d)("FlowGraphRandomBlock",d);class t extends T{constructor(z){super(E.p,(()=>Math.E),"FlowGraphEBlock",z)}}(0,H.d)("FlowGraphEBlock",t);class W extends T{constructor(z){super(E.p,(()=>Math.PI),"FlowGraphPIBlock",z)}}(0,H.d)("FlowGraphPIBlock",W);class Z extends T{constructor(z){super(E.p,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",z)}}(0,H.d)("FlowGraphInfBlock",Z);class s extends T{constructor(z){super(E.p,(()=>Number.NaN),"FlowGraphNaNBlock",z)}}function v(z,u){switch((0,q.i)(z)){case"FlowGraphInteger":return new g.b(u(z.value));case"Vector2":return new b.m(u(z.x),u(z.y));case"Pl":return new b.p(u(z.x),u(z.y),u(z.z));case"Vector4":return new b.t(u(z.x),u(z.y),u(z.z),u(z.w));case"Quaternion":return new b.f(u(z.x),u(z.y),u(z.z),u(z.w));case"Matrix":return b.b.Nl(z.m.map(u));case"Matrix2D":return new M.e(z.m.map(u));case"Matrix3D":return new M.i(z.m.map(u));default:return u(z)}}(0,H.d)("FlowGraphNaNBlock",s);class i extends L.e{constructor(z){super(E.p,E.p,(z=>this._polymorphicAbs(z)),"FlowGraphAbsBlock",z)}_polymorphicAbs(z){return v(z,Math.abs)}}(0,H.d)("FlowGraphAbsBlock",i);class X extends L.e{constructor(z){super(E.p,E.p,(z=>this._polymorphicSign(z)),"FlowGraphSignBlock",z)}_polymorphicSign(z){return v(z,Math.sign)}}(0,H.d)("FlowGraphSignBlock",X);class Q extends L.e{constructor(z){super(E.p,E.p,(z=>this._polymorphicTrunc(z)),"FlowGraphTruncBlock",z)}_polymorphicTrunc(z){return v(z,Math.trunc)}}(0,H.d)("FlowGraphTruncBlock",Q);class V extends L.e{constructor(z){super(E.p,E.p,(z=>this._polymorphicFloor(z)),"FlowGraphFloorBlock",z)}_polymorphicFloor(z){return v(z,Math.floor)}}(0,H.d)("FlowGraphFloorBlock",V);class A extends L.e{constructor(z){super(E.e,E.e,(z=>this._polymorphicCeiling(z)),"FlowGraphCeilBlock",z)}_polymorphicCeiling(z){return v(z,Math.ceil)}}(0,H.d)("FlowGraphCeilBlock",A);class x extends L.e{constructor(z){super(E.e,E.e,(z=>this._polymorphicRound(z)),"FlowGraphRoundBlock",z)}_polymorphicRound(z){return v(z,(z=>{var u;return z<0&&null!==(u=this.config)&&void 0!==u&&u.roundHalfAwayFromZero?-Math.round(-z):Math.round(z)}))}}(0,H.d)("FlowGraphRoundBlock",x);class G extends L.e{constructor(z){super(E.e,E.e,(z=>this._polymorphicFraction(z)),"FlowGraphFractBlock",z)}_polymorphicFraction(z){return v(z,(z=>z-Math.floor(z)))}}(0,H.d)("FlowGraphFractBlock",G);class F extends L.e{constructor(z){super(E.e,E.e,(z=>this._polymorphicNeg(z)),"FlowGraphNegationBlock",z)}_polymorphicNeg(z){return v(z,(z=>-z))}}function R(z,u,Y){switch((0,q.i)(z)){case"FlowGraphInteger":return new g.b(Y(z.value,u.value));case"Vector2":return new b.m(Y(z.x,u.x),Y(z.y,u.y));case"Pl":return new b.p(Y(z.x,u.x),Y(z.y,u.y),Y(z.z,u.z));case"Vector4":return new b.t(Y(z.x,u.x),Y(z.y,u.y),Y(z.z,u.z),Y(z.w,u.w));case"Quaternion":return new b.f(Y(z.x,u.x),Y(z.y,u.y),Y(z.z,u.z),Y(z.w,u.w));case"Matrix":return b.b.Nl(z.m.map(((z,H)=>Y(z,u.m[H]))));case"Matrix2D":return new M.e(z.m.map(((z,H)=>Y(z,u.m[H]))));case"Matrix3D":return new M.i(z.m.map(((z,H)=>Y(z,u.m[H]))));default:return Y((0,q.l)(z),(0,q.l)(u))}}(0,H.d)("FlowGraphNegationBlock",F);class w extends J.e{constructor(z){super(E.e,E.e,E.e,((z,u)=>this._polymorphicRemainder(z,u)),"FlowGraphModuloBlock",z)}_polymorphicRemainder(z,u){return R(z,u,((z,u)=>z%u))}}(0,H.d)("FlowGraphModuloBlock",w);class c extends J.e{constructor(z){super(E.e,E.e,E.e,((z,u)=>this._polymorphicMin(z,u)),"FlowGraphMinBlock",z)}_polymorphicMin(z,u){return R(z,u,Math.min)}}(0,H.d)("FlowGraphMinBlock",c);class U extends J.e{constructor(z){super(E.e,E.e,E.e,((z,u)=>this._polymorphicMax(z,u)),"FlowGraphMaxBlock",z)}_polymorphicMax(z,u){return R(z,u,Math.max)}}function O(z,u,Y){return Math.min(Math.max(z,Math.min(u,Y)),Math.max(u,Y))}function n(z,u,Y,H){switch((0,q.i)(z)){case"FlowGraphInteger":return new g.b(H(z.value,u.value,Y.value));case"Vector2":return new b.m(H(z.x,u.x,Y.x),H(z.y,u.y,Y.y));case"Pl":return new b.p(H(z.x,u.x,Y.x),H(z.y,u.y,Y.y),H(z.z,u.z,Y.z));case"Vector4":return new b.t(H(z.x,u.x,Y.x),H(z.y,u.y,Y.y),H(z.z,u.z,Y.z),H(z.w,u.w,Y.w));case"Quaternion":return new b.f(H(z.x,u.x,Y.x),H(z.y,u.y,Y.y),H(z.z,u.z,Y.z),H(z.w,u.w,Y.w));case"Matrix":return b.b.Nl(z.m.map(((z,E)=>H(z,u.m[E],Y.m[E]))));case"Matrix2D":return new M.e(z.m.map(((z,E)=>H(z,u.m[E],Y.m[E]))));case"Matrix3D":return new M.i(z.m.map(((z,E)=>H(z,u.m[E],Y.m[E]))));default:return H((0,q.l)(z),(0,q.l)(u),(0,q.l)(Y))}}(0,H.d)("FlowGraphMaxBlock",U);class m extends D{constructor(z){super(E.e,E.e,E.e,E.e,((z,u,Y)=>this._polymorphicClamp(z,u,Y)),"FlowGraphClampBlock",z)}_polymorphicClamp(z,u,Y){return n(z,u,Y,O)}}function p(z){return Math.min(Math.max(z,0),1)}(0,H.d)("FlowGraphClampBlock",m);class S extends L.e{constructor(z){super(E.e,E.e,(z=>this._polymorphicSaturate(z)),"FlowGraphSaturateBlock",z)}_polymorphicSaturate(z){return v(z,p)}}function I(z,u,Y){return(1-Y)*z+Y*u}(0,H.d)("FlowGraphSaturateBlock",S);class y extends D{constructor(z){super(E.e,E.e,E.e,E.e,((z,u,Y)=>this._polymorphicInterpolate(z,u,Y)),"FlowGraphMathInterpolationBlock",z)}_polymorphicInterpolate(z,u,Y){return n(z,u,Y,I)}}(0,H.d)("FlowGraphMathInterpolationBlock",y);class a extends J.e{constructor(z){super(E.e,E.e,E.f,((z,u)=>this._polymorphicEq(z,u)),"FlowGraphEqualityBlock",z)}_polymorphicEq(z,u){const Y=(0,q.i)(z),H=(0,q.i)(u);return typeof z===typeof u&&((0,q.f)(Y,H)||(0,q.e)(Y,H)||(0,q.d)(Y,H)?z.equals(u):z===u)}}function j(z,u,Y){if((0,q.m)(z)&&(0,q.m)(u))return Y((0,q.l)(z),(0,q.l)(u));throw new Error(`Cannot compare ${z} and ${u}`)}(0,H.d)("FlowGraphEqualityBlock",a);class k extends J.e{constructor(z){super(E.e,E.e,E.f,((z,u)=>this._polymorphicLessThan(z,u)),"FlowGraphLessThanBlock",z)}_polymorphicLessThan(z,u){return j(z,u,((z,u)=>z<u))}}(0,H.d)("FlowGraphLessThanBlock",k);class P extends J.e{constructor(z){super(E.e,E.e,E.f,((z,u)=>this._polymorphicLessThanOrEqual(z,u)),"FlowGraphLessThanOrEqualBlock",z)}_polymorphicLessThanOrEqual(z,u){return j(z,u,((z,u)=>z<=u))}}(0,H.d)("FlowGraphLessThanOrEqualBlock",P);class e extends J.e{constructor(z){super(E.e,E.e,E.f,((z,u)=>this._polymorphicGreaterThan(z,u)),"FlowGraphGreaterThanBlock",z)}_polymorphicGreaterThan(z,u){return j(z,u,((z,u)=>z>u))}}(0,H.d)("FlowGraphGreaterThanBlock",e);class N extends J.e{constructor(z){super(E.e,E.e,E.f,((z,u)=>this._polymorphicGreaterThanOrEqual(z,u)),"FlowGraphGreaterThanOrEqualBlock",z)}_polymorphicGreaterThanOrEqual(z,u){return j(z,u,((z,u)=>z>=u))}}(0,H.d)("FlowGraphGreaterThanOrEqualBlock",N);class B extends L.e{constructor(z){super(E.e,E.f,(z=>this._polymorphicIsNan(z)),"FlowGraphIsNaNBlock",z)}_polymorphicIsNan(z){if((0,q.m)(z,!0))return isNaN((0,q.l)(z));throw new Error(`Cannot get NaN of ${z}`)}}(0,H.d)("FlowGraphIsNaNBlock",B);class f extends L.e{constructor(z){super(E.e,E.f,(z=>this._polymorphicIsInf(z)),"FlowGraphIsInfBlock",z)}_polymorphicIsInf(z){if((0,q.m)(z))return!isFinite((0,q.l)(z));throw new Error(`Cannot get isInf of ${z}`)}}(0,H.d)("FlowGraphIsInfBlock",f);class r extends L.e{constructor(z){super(E.e,E.e,(z=>this._polymorphicDegToRad(z)),"FlowGraphDegToRadBlock",z)}_degToRad(z){return z*Math.PI/180}_polymorphicDegToRad(z){return v(z,this._degToRad)}}(0,H.d)("FlowGraphDegToRadBlock",r);class zz extends L.e{constructor(z){super(E.e,E.e,(z=>this._polymorphicRadToDeg(z)),"FlowGraphRadToDegBlock",z)}_radToDeg(z){return 180*z/Math.PI}_polymorphicRadToDeg(z){return v(z,this._radToDeg)}}(0,H.d)("FlowGraphRadToDegBlock",zz);class uz extends L.e{constructor(z){super(E.p,E.p,(z=>this._polymorphicSin(z)),"FlowGraphSinBlock",z)}_polymorphicSin(z){return v(z,Math.sin)}}class Yz extends L.e{constructor(z){super(E.p,E.p,(z=>this._polymorphicCos(z)),"FlowGraphCosBlock",z)}_polymorphicCos(z){return v(z,Math.cos)}}class Hz extends L.e{constructor(z){super(E.p,E.p,(z=>this._polymorphicTan(z)),"FlowGraphTanBlock",z)}_polymorphicTan(z){return v(z,Math.tan)}}class Ez extends L.e{constructor(z){super(E.p,E.p,(z=>this._polymorphicAsin(z)),"FlowGraphASinBlock",z)}_polymorphicAsin(z){return v(z,Math.asin)}}(0,H.d)("FlowGraphASinBlock",Ez);class Jz extends L.e{constructor(z){super(E.p,E.p,(z=>this._polymorphicAcos(z)),"FlowGraphACosBlock",z)}_polymorphicAcos(z){return v(z,Math.acos)}}(0,H.d)("FlowGraphACosBlock",Jz);class lz extends L.e{constructor(z){super(E.p,E.p,(z=>this._polymorphicAtan(z)),"FlowGraphATanBlock",z)}_polymorphicAtan(z){return v(z,Math.atan)}}(0,H.d)("FlowGraphATanBlock",lz);class Tz extends J.e{constructor(z){super(E.e,E.e,E.e,((z,u)=>this._polymorphicAtan2(z,u)),"FlowGraphATan2Block",z)}_polymorphicAtan2(z,u){return R(z,u,Math.atan2)}}(0,H.d)("FlowGraphATan2Block",Tz);class bz extends L.e{constructor(z){super(E.e,E.e,(z=>this._polymorphicSinh(z)),"FlowGraphSinhBlock",z)}_polymorphicSinh(z){return v(z,Math.sinh)}}(0,H.d)("FlowGraphSinhBlock",bz);class Lz extends L.e{constructor(z){super(E.e,E.e,(z=>this._polymorphicCosh(z)),"FlowGraphCoshBlock",z)}_polymorphicCosh(z){return v(z,Math.cosh)}}(0,H.d)("FlowGraphCoshBlock",Lz);class Dz extends L.e{constructor(z){super(E.e,E.e,(z=>this._polymorphicTanh(z)),"FlowGraphTanhBlock",z)}_polymorphicTanh(z){return v(z,Math.tanh)}}(0,H.d)("FlowGraphTanhBlock",Dz);class gz extends L.e{constructor(z){super(E.e,E.p,(z=>this._polymorphicAsinh(z)),"FlowGraphASinhBlock",z)}_polymorphicAsinh(z){return v(z,Math.asinh)}}(0,H.d)("FlowGraphASinhBlock",gz);class Mz extends L.e{constructor(z){super(E.e,E.p,(z=>this._polymorphicAcosh(z)),"FlowGraphACoshBlock",z)}_polymorphicAcosh(z){return v(z,Math.acosh)}}(0,H.d)("FlowGraphACoshBlock",Mz);class qz extends L.e{constructor(z){super(E.e,E.p,(z=>this._polymorphicAtanh(z)),"FlowGraphATanhBlock",z)}_polymorphicAtanh(z){return v(z,Math.atanh)}}(0,H.d)("FlowGraphATanhBlock",qz);class Cz extends L.e{constructor(z){super(E.e,E.p,(z=>this._polymorphicExp(z)),"FlowGraphExponentialBlock",z)}_polymorphicExp(z){return v(z,Math.exp)}}(0,H.d)("FlowGraphExponentialBlock",Cz);class Kz extends L.e{constructor(z){super(E.e,E.p,(z=>this._polymorphicLog(z)),"FlowGraphLogBlock",z)}_polymorphicLog(z){return v(z,Math.log)}}(0,H.d)("FlowGraphLogBlock",Kz);class hz extends L.e{constructor(z){super(E.e,E.p,(z=>this._polymorphicLog2(z)),"FlowGraphLog2Block",z)}_polymorphicLog2(z){return v(z,Math.log2)}}(0,H.d)("FlowGraphLog2Block",hz);class oz extends L.e{constructor(z){super(E.e,E.p,(z=>this._polymorphicLog10(z)),"FlowGraphLog10Block",z)}_polymorphicLog10(z){return v(z,Math.log10)}}(0,H.d)("FlowGraphLog10Block",oz);class dz extends L.e{constructor(z){super(E.e,E.p,(z=>this._polymorphicSqrt(z)),"FlowGraphSquareRootBlock",z)}_polymorphicSqrt(z){return v(z,Math.sqrt)}}(0,H.d)("FlowGraphSquareRootBlock",dz);class tz extends L.e{constructor(z){super(E.e,E.p,(z=>this._polymorphicCubeRoot(z)),"FlowGraphCubeRootBlock",z)}_polymorphicCubeRoot(z){return v(z,Math.cbrt)}}(0,H.d)("FlowGraphCubeRootBlock",tz);class Wz extends J.e{constructor(z){super(E.e,E.p,E.p,((z,u)=>this._polymorphicPow(z,u)),"FlowGraphPowerBlock",z)}_polymorphicPow(z,u){return R(z,u,Math.pow)}}(0,H.d)("FlowGraphPowerBlock",Wz);class Zz extends L.e{constructor(z){super((0,E.K)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),(0,E.K)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),(z=>"boolean"===typeof z?!z:"number"===typeof z?~z:new g.b(~z.value)),"FlowGraphBitwiseNotBlock",z)}}(0,H.d)("FlowGraphBitwiseNotBlock",Zz);class sz extends J.e{constructor(z){super((0,E.K)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),(0,E.K)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),(0,E.K)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),((z,u)=>{if("boolean"===typeof z&&"boolean"===typeof u)return z&&u;if("number"===typeof z&&"number"===typeof u)return z&u;if("object"===typeof z&&"object"===typeof u)return new g.b(z.value&u.value);throw new Error(`Cannot perform bitwise AND on ${z} and ${u}`)}),"FlowGraphBitwiseAndBlock",z)}}(0,H.d)("FlowGraphBitwiseAndBlock",sz);class vz extends J.e{constructor(z){super((0,E.K)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),(0,E.K)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),(0,E.K)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),((z,u)=>{if("boolean"===typeof z&&"boolean"===typeof u)return z||u;if("number"===typeof z&&"number"===typeof u)return z|u;if("object"===typeof z&&"object"===typeof u)return new g.b(z.value|u.value);throw new Error(`Cannot perform bitwise OR on ${z} and ${u}`)}),"FlowGraphBitwiseOrBlock",z)}}(0,H.d)("FlowGraphBitwiseOrBlock",vz);class iz extends J.e{constructor(z){super((0,E.K)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),(0,E.K)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),(0,E.K)((null===z||void 0===z?void 0:z.valueType)||"FlowGraphInteger"),((z,u)=>{if("boolean"===typeof z&&"boolean"===typeof u)return z!==u;if("number"===typeof z&&"number"===typeof u)return z^u;if("object"===typeof z&&"object"===typeof u)return new g.b(z.value^u.value);throw new Error(`Cannot perform bitwise XOR on ${z} and ${u}`)}),"FlowGraphBitwiseXorBlock",z)}}(0,H.d)("FlowGraphBitwiseXorBlock",iz);class Xz extends J.e{constructor(z){super(E.g,E.g,E.g,((z,u)=>new g.b(z.value<<u.value)),"FlowGraphBitwiseLeftShiftBlock",z)}}(0,H.d)("FlowGraphBitwiseLeftShiftBlock",Xz);class Qz extends J.e{constructor(z){super(E.g,E.g,E.g,((z,u)=>new g.b(z.value>>u.value)),"FlowGraphBitwiseRightShiftBlock",z)}}(0,H.d)("FlowGraphBitwiseRightShiftBlock",Qz);class Vz extends L.e{constructor(z){super(E.g,E.g,(z=>new g.b(Math.clz32(z.value))),"FlowGraphLeadingZerosBlock",z)}}(0,H.d)("FlowGraphLeadingZerosBlock",Vz);class Az extends L.e{constructor(z){super(E.g,E.g,(z=>new g.b(z.value?31-Math.clz32(z.value&-z.value):32)),"FlowGraphTrailingZerosBlock",z)}}(0,H.d)("FlowGraphTrailingZerosBlock",Az);class xz extends L.e{constructor(z){super(E.g,E.g,(z=>new g.b(function(z){let u=0;for(;z;)u+=1&z,z>>=1;return u}(z.value))),"FlowGraphOneBitsCounterBlock",z)}}(0,H.d)("FlowGraphOneBitsCounterBlock",xz)},13977:(z,u,Y)=>{Y.d(u,{e:()=>E});var H=Y(13983);class E extends H.e{constructor(z,u,Y,H,E,J){super(Y,J),this._operation=H,this._className=E,this.a=this.registerDataInput("a",z),this.b=this.registerDataInput("b",u)}_doOperation(z){const u=this.a.getValue(z),Y=this.b.getValue(z);return this._operation(u,Y)}getClassName(){return this._className}}},13983:(z,u,Y)=>{Y.d(u,{e:()=>T});var H=Y(12549),E=Y(12531);const J="cachedOperationValue",l="cachedExecutionId";class T extends H.b{constructor(z,u){super(u),this.value=this.registerDataOutput("value",z),this.isValid=this.registerDataOutput("isValid",E.f)}_updateOutputs(z){const u=z._getExecutionVariable(this,l,-1),Y=z._getExecutionVariable(this,J,null);if(void 0!==Y&&null!==Y&&u===z.executionId)this.isValid.setValue(!0,z),this.value.setValue(Y,z);else try{const u=this._doOperation(z);if(void 0===u||null===u)return void this.isValid.setValue(!1,z);z._setExecutionVariable(this,J,u),z._setExecutionVariable(this,l,z.executionId),this.value.setValue(u,z),this.isValid.setValue(!0,z)}catch(H){this.isValid.setValue(!1,z)}}}},13992:(z,u,Y)=>{Y.d(u,{e:()=>E});var H=Y(13983);class E extends H.e{constructor(z,u,Y,H,E){super(u,E),this._operation=Y,this._className=H,this.a=this.registerDataInput("a",z)}_doOperation(z){return this._operation(this.a.getValue(z))}getClassName(){return this._className}}}}]);