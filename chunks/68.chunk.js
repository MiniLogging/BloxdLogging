"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[68],{14157:(q,f,j)=>{j.r(f),j.d(f,{FlowGraphAbsBlock:()=>Z,FlowGraphAcosBlock:()=>hq,FlowGraphAcoshBlock:()=>zq,FlowGraphAddBlock:()=>D,FlowGraphAsinBlock:()=>gq,FlowGraphAsinhBlock:()=>Xq,FlowGraphAtan2Block:()=>Qq,FlowGraphAtanBlock:()=>Lq,FlowGraphAtanhBlock:()=>Bq,FlowGraphBitwiseAndBlock:()=>Sq,FlowGraphBitwiseLeftShiftBlock:()=>Iq,FlowGraphBitwiseNotBlock:()=>sq,FlowGraphBitwiseOrBlock:()=>eq,FlowGraphBitwiseRightShiftBlock:()=>Tq,FlowGraphBitwiseXorBlock:()=>Zq,FlowGraphCeilBlock:()=>n,FlowGraphClampBlock:()=>A,FlowGraphCosBlock:()=>jq,FlowGraphCoshBlock:()=>rq,FlowGraphCubeRootBlock:()=>wq,FlowGraphDegToRadBlock:()=>J,FlowGraphDivideBlock:()=>O,FlowGraphEBlock:()=>w,FlowGraphEqualityBlock:()=>V,FlowGraphExpBlock:()=>Dq,FlowGraphFloorBlock:()=>W,FlowGraphFractionBlock:()=>Y,FlowGraphGreaterThanBlock:()=>c,FlowGraphGreaterThanOrEqualBlock:()=>G,FlowGraphInfBlock:()=>s,FlowGraphIsInfinityBlock:()=>K,FlowGraphIsNanBlock:()=>m,FlowGraphLeadingZerosBlock:()=>Wq,FlowGraphLessThanBlock:()=>P,FlowGraphLessThanOrEqualBlock:()=>C,FlowGraphLog10Block:()=>Oq,FlowGraphLog2Block:()=>tq,FlowGraphLogBlock:()=>iq,FlowGraphMathInterpolationBlock:()=>l,FlowGraphMaxBlock:()=>b,FlowGraphMinBlock:()=>o,FlowGraphModuloBlock:()=>M,FlowGraphMultiplyBlock:()=>t,FlowGraphNaNBlock:()=>S,FlowGraphNegationBlock:()=>v,FlowGraphOneBitsCounterBlock:()=>Uq,FlowGraphPiBlock:()=>E,FlowGraphPowerBlock:()=>Eq,FlowGraphRadToDegBlock:()=>qq,FlowGraphRandomBlock:()=>N,FlowGraphRoundBlock:()=>U,FlowGraphSaturateBlock:()=>y,FlowGraphSignBlock:()=>I,FlowGraphSinBlock:()=>fq,FlowGraphSinhBlock:()=>Hq,FlowGraphSquareRootBlock:()=>Nq,FlowGraphSubtractBlock:()=>i,FlowGraphTanBlock:()=>dq,FlowGraphTanhBlock:()=>uq,FlowGraphTrailingZerosBlock:()=>nq,FlowGraphTruncBlock:()=>T});var d=j(10965),g=j(12709),h=j(14165),L=j(14173);class Q extends L.d{constructor(q,f,j,d){super(q,d),this._operation=f,this._className=j}_doOperation(q){return this._operation(q)}getClassName(){return this._className}}var H=j(10941),r=j(14179);class u extends L.d{constructor(q,f,j,d,g,h,L){super(d,L),this._operation=g,this._className=h,this.a=this.registerDataInput("a",q),this.b=this.registerDataInput("b",f),this.c=this.registerDataInput("c",j)}_doOperation(q){return this._operation(this.a.getValue(q),this.b.getValue(q),this.c.getValue(q))}getClassName(){return this._className}}var X=j(12704),z=j(12712),B=j(12740);class D extends h.b{constructor(q){super((0,g.D)(null===q||void 0===q?void 0:q.type),(0,g.D)(null===q||void 0===q?void 0:q.type),(0,g.D)(null===q||void 0===q?void 0:q.type),((q,f)=>this._polymorphicAdd(q,f)),"FlowGraphAddBlock",q)}_polymorphicAdd(q,f){const j=(0,B.h)(q),d=(0,B.h)(f);if((0,B.g)(j,d)||(0,B.f)(j,d)||(0,B.d)(j,d))return q.add(f);if("Quaternion"===j||"Vector4"===d)return new H.m(q.x,q.y,q.z,q.w).addInPlace(f);if("Vector4"===j||"Quaternion"===d)return q.add(f);var g;if(null!==(g=this.config)&&void 0!==g&&g.preventIntegerFloatArithmetic&&typeof q!==typeof f)throw new Error("Cannot add different types of numbers.");return(0,B.m)(q)+(0,B.m)(f)}}(0,d.f)("FlowGraphAddBlock",D);class i extends h.b{constructor(q){super((0,g.D)(null===q||void 0===q?void 0:q.type),(0,g.D)(null===q||void 0===q?void 0:q.type),(0,g.D)(null===q||void 0===q?void 0:q.type),((q,f)=>this._polymorphicSubtract(q,f)),"FlowGraphSubtractBlock",q)}_polymorphicSubtract(q,f){const j=(0,B.h)(q),d=(0,B.h)(f);if((0,B.g)(j,d)||(0,B.d)(j,d)||(0,B.f)(j,d))return q.ej(f);if("Quaternion"===j||"Vector4"===d)return new H.m(q.x,q.y,q.z,q.w).eX(f);if("Vector4"===j||"Quaternion"===d)return q.ej(f);var g;if(null!==(g=this.config)&&void 0!==g&&g.preventIntegerFloatArithmetic&&typeof q!==typeof f)throw new Error("Cannot add different types of numbers.");return(0,B.m)(q)-(0,B.m)(f)}}(0,d.f)("FlowGraphSubtractBlock",i);class t extends h.b{constructor(q){super((0,g.D)(null===q||void 0===q?void 0:q.type),(0,g.D)(null===q||void 0===q?void 0:q.type),(0,g.D)(null===q||void 0===q?void 0:q.type),((q,f)=>this._polymorphicMultiply(q,f)),"FlowGraphMultiplyBlock",q)}_polymorphicMultiply(q,f){const j=(0,B.h)(q),d=(0,B.h)(f);if((0,B.g)(j,d)||(0,B.d)(j,d))return q.multiply(f);if("Quaternion"===j||"Vector4"===d)return new H.m(q.x,q.y,q.z,q.w).multiplyInPlace(f);if("Vector4"===j||"Quaternion"===d)return q.multiply(f);if((0,B.f)(j,d)){var g;if(null!==(g=this.config)&&void 0!==g&&g.useMatrixPerComponent){const d=q.m;for(let q=0;q<d.length;q++)d[q]*=f.m[q];return"Matrix2D"===j?new z.d(d):"Matrix3D"===j?new z.g(d):H.b.Pf(d)}return f.multiply(q)}var h;if(null!==(h=this.config)&&void 0!==h&&h.preventIntegerFloatArithmetic&&typeof q!==typeof f)throw new Error("Cannot add different types of numbers.");return(0,B.m)(q)*(0,B.m)(f)}}(0,d.f)("FlowGraphMultiplyBlock",t);class O extends h.b{constructor(q){super((0,g.D)(null===q||void 0===q?void 0:q.type),(0,g.D)(null===q||void 0===q?void 0:q.type),(0,g.D)(null===q||void 0===q?void 0:q.type),((q,f)=>this._polymorphicDivide(q,f)),"FlowGraphDivideBlock",q)}_polymorphicDivide(q,f){const j=(0,B.h)(q),d=(0,B.h)(f);if((0,B.g)(j,d)||(0,B.d)(j,d))return q.divide(f);if("Quaternion"===j||"Quaternion"===d){const j=q.clone();return j.x/=f.x,j.y/=f.y,j.z/=f.z,j.w/=f.w,j}if("Quaternion"===j||"Vector4"===d)return new H.m(q.x,q.y,q.z,q.w).divideInPlace(f);if("Vector4"===j||"Quaternion"===d)return q.divide(f);if((0,B.f)(j,d)){var g;if(null!==(g=this.config)&&void 0!==g&&g.useMatrixPerComponent){const d=q.m;for(let q=0;q<d.length;q++)d[q]/=f.m[q];return"Matrix2D"===j?new z.d(d):"Matrix3D"===j?new z.g(d):H.b.Pf(d)}return q.divide(f)}var h;if(null!==(h=this.config)&&void 0!==h&&h.preventIntegerFloatArithmetic&&typeof q!==typeof f)throw new Error("Cannot add different types of numbers.");return(0,B.m)(q)/(0,B.m)(f)}}(0,d.f)("FlowGraphDivideBlock",O);class N extends Q{constructor(q){super(g.o,(q=>this._random(q)),"FlowGraphRandomBlock",q),this.min=this.registerDataInput("min",g.o,(null===q||void 0===q?void 0:q.min)??0),this.max=this.registerDataInput("max",g.o,(null===q||void 0===q?void 0:q.max)??1),null!==q&&void 0!==q&&q.seed&&(this._seed=q.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const q=1e4*Math.sin(this._seed++);return q-Math.floor(q)}return Math.random()}_random(q){const f=this.min.getValue(q),j=this.max.getValue(q);return this._getRandomValue()*(j-f)+f}}(0,d.f)("FlowGraphRandomBlock",N);class w extends Q{constructor(q){super(g.o,(()=>Math.E),"FlowGraphEBlock",q)}}(0,d.f)("FlowGraphEBlock",w);class E extends Q{constructor(q){super(g.o,(()=>Math.PI),"FlowGraphPIBlock",q)}}(0,d.f)("FlowGraphPIBlock",E);class s extends Q{constructor(q){super(g.o,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",q)}}(0,d.f)("FlowGraphInfBlock",s);class S extends Q{constructor(q){super(g.o,(()=>Number.NaN),"FlowGraphNaNBlock",q)}}function e(q,f){switch((0,B.h)(q)){case"FlowGraphInteger":return new X.c(f(q.value));case"Vector2":return new H.i(f(q.x),f(q.y));case"kf":return new H.j(f(q.x),f(q.y),f(q.z));case"Vector4":return new H.m(f(q.x),f(q.y),f(q.z),f(q.w));case"Quaternion":return new H.e(f(q.x),f(q.y),f(q.z),f(q.w));case"Matrix":return H.b.Pf(q.m.map(f));case"Matrix2D":return new z.d(q.m.map(f));case"Matrix3D":return new z.g(q.m.map(f));default:return f(q)}}(0,d.f)("FlowGraphNaNBlock",S);class Z extends r.c{constructor(q){super(g.o,g.o,(q=>this._polymorphicAbs(q)),"FlowGraphAbsBlock",q)}_polymorphicAbs(q){return e(q,Math.abs)}}(0,d.f)("FlowGraphAbsBlock",Z);class I extends r.c{constructor(q){super(g.o,g.o,(q=>this._polymorphicSign(q)),"FlowGraphSignBlock",q)}_polymorphicSign(q){return e(q,Math.sign)}}(0,d.f)("FlowGraphSignBlock",I);class T extends r.c{constructor(q){super(g.o,g.o,(q=>this._polymorphicTrunc(q)),"FlowGraphTruncBlock",q)}_polymorphicTrunc(q){return e(q,Math.trunc)}}(0,d.f)("FlowGraphTruncBlock",T);class W extends r.c{constructor(q){super(g.o,g.o,(q=>this._polymorphicFloor(q)),"FlowGraphFloorBlock",q)}_polymorphicFloor(q){return e(q,Math.floor)}}(0,d.f)("FlowGraphFloorBlock",W);class n extends r.c{constructor(q){super(g.c,g.c,(q=>this._polymorphicCeiling(q)),"FlowGraphCeilBlock",q)}_polymorphicCeiling(q){return e(q,Math.ceil)}}(0,d.f)("FlowGraphCeilBlock",n);class U extends r.c{constructor(q){super(g.c,g.c,(q=>this._polymorphicRound(q)),"FlowGraphRoundBlock",q)}_polymorphicRound(q){return e(q,(q=>{var f;return q<0&&null!==(f=this.config)&&void 0!==f&&f.roundHalfAwayFromZero?-Math.round(-q):Math.round(q)}))}}(0,d.f)("FlowGraphRoundBlock",U);class Y extends r.c{constructor(q){super(g.c,g.c,(q=>this._polymorphicFraction(q)),"FlowGraphFractBlock",q)}_polymorphicFraction(q){return e(q,(q=>q-Math.floor(q)))}}(0,d.f)("FlowGraphFractBlock",Y);class v extends r.c{constructor(q){super(g.c,g.c,(q=>this._polymorphicNeg(q)),"FlowGraphNegationBlock",q)}_polymorphicNeg(q){return e(q,(q=>-q))}}function F(q,f,j){switch((0,B.h)(q)){case"FlowGraphInteger":return new X.c(j(q.value,f.value));case"Vector2":return new H.i(j(q.x,f.x),j(q.y,f.y));case"kf":return new H.j(j(q.x,f.x),j(q.y,f.y),j(q.z,f.z));case"Vector4":return new H.m(j(q.x,f.x),j(q.y,f.y),j(q.z,f.z),j(q.w,f.w));case"Quaternion":return new H.e(j(q.x,f.x),j(q.y,f.y),j(q.z,f.z),j(q.w,f.w));case"Matrix":return H.b.Pf(q.m.map(((q,d)=>j(q,f.m[d]))));case"Matrix2D":return new z.d(q.m.map(((q,d)=>j(q,f.m[d]))));case"Matrix3D":return new z.g(q.m.map(((q,d)=>j(q,f.m[d]))));default:return j((0,B.m)(q),(0,B.m)(f))}}(0,d.f)("FlowGraphNegationBlock",v);class M extends h.b{constructor(q){super(g.c,g.c,g.c,((q,f)=>this._polymorphicRemainder(q,f)),"FlowGraphModuloBlock",q)}_polymorphicRemainder(q,f){return F(q,f,((q,f)=>q%f))}}(0,d.f)("FlowGraphModuloBlock",M);class o extends h.b{constructor(q){super(g.c,g.c,g.c,((q,f)=>this._polymorphicMin(q,f)),"FlowGraphMinBlock",q)}_polymorphicMin(q,f){return F(q,f,Math.min)}}(0,d.f)("FlowGraphMinBlock",o);class b extends h.b{constructor(q){super(g.c,g.c,g.c,((q,f)=>this._polymorphicMax(q,f)),"FlowGraphMaxBlock",q)}_polymorphicMax(q,f){return F(q,f,Math.max)}}function x(q,f,j){return Math.min(Math.max(q,Math.min(f,j)),Math.max(f,j))}function R(q,f,j,d){switch((0,B.h)(q)){case"FlowGraphInteger":return new X.c(d(q.value,f.value,j.value));case"Vector2":return new H.i(d(q.x,f.x,j.x),d(q.y,f.y,j.y));case"kf":return new H.j(d(q.x,f.x,j.x),d(q.y,f.y,j.y),d(q.z,f.z,j.z));case"Vector4":return new H.m(d(q.x,f.x,j.x),d(q.y,f.y,j.y),d(q.z,f.z,j.z),d(q.w,f.w,j.w));case"Quaternion":return new H.e(d(q.x,f.x,j.x),d(q.y,f.y,j.y),d(q.z,f.z,j.z),d(q.w,f.w,j.w));case"Matrix":return H.b.Pf(q.m.map(((q,g)=>d(q,f.m[g],j.m[g]))));case"Matrix2D":return new z.d(q.m.map(((q,g)=>d(q,f.m[g],j.m[g]))));case"Matrix3D":return new z.g(q.m.map(((q,g)=>d(q,f.m[g],j.m[g]))));default:return d((0,B.m)(q),(0,B.m)(f),(0,B.m)(j))}}(0,d.f)("FlowGraphMaxBlock",b);class A extends u{constructor(q){super(g.c,g.c,g.c,g.c,((q,f,j)=>this._polymorphicClamp(q,f,j)),"FlowGraphClampBlock",q)}_polymorphicClamp(q,f,j){return R(q,f,j,x)}}function k(q){return Math.min(Math.max(q,0),1)}(0,d.f)("FlowGraphClampBlock",A);class y extends r.c{constructor(q){super(g.c,g.c,(q=>this._polymorphicSaturate(q)),"FlowGraphSaturateBlock",q)}_polymorphicSaturate(q){return e(q,k)}}function p(q,f,j){return(1-j)*q+j*f}(0,d.f)("FlowGraphSaturateBlock",y);class l extends u{constructor(q){super(g.c,g.c,g.c,g.c,((q,f,j)=>this._polymorphicInterpolate(q,f,j)),"FlowGraphMathInterpolationBlock",q)}_polymorphicInterpolate(q,f,j){return R(q,f,j,p)}}(0,d.f)("FlowGraphMathInterpolationBlock",l);class V extends h.b{constructor(q){super(g.c,g.c,g.d,((q,f)=>this._polymorphicEq(q,f)),"FlowGraphEqualityBlock",q)}_polymorphicEq(q,f){const j=(0,B.h)(q),d=(0,B.h)(f);return typeof q===typeof f&&((0,B.g)(j,d)||(0,B.f)(j,d)||(0,B.d)(j,d)?q.equals(f):q===f)}}function a(q,f,j){if((0,B.q)(q)&&(0,B.q)(f))return j((0,B.m)(q),(0,B.m)(f));throw new Error(`Cannot compare ${q} and ${f}`)}(0,d.f)("FlowGraphEqualityBlock",V);class P extends h.b{constructor(q){super(g.c,g.c,g.d,((q,f)=>this._polymorphicLessThan(q,f)),"FlowGraphLessThanBlock",q)}_polymorphicLessThan(q,f){return a(q,f,((q,f)=>q<f))}}(0,d.f)("FlowGraphLessThanBlock",P);class C extends h.b{constructor(q){super(g.c,g.c,g.d,((q,f)=>this._polymorphicLessThanOrEqual(q,f)),"FlowGraphLessThanOrEqualBlock",q)}_polymorphicLessThanOrEqual(q,f){return a(q,f,((q,f)=>q<=f))}}(0,d.f)("FlowGraphLessThanOrEqualBlock",C);class c extends h.b{constructor(q){super(g.c,g.c,g.d,((q,f)=>this._polymorphicGreaterThan(q,f)),"FlowGraphGreaterThanBlock",q)}_polymorphicGreaterThan(q,f){return a(q,f,((q,f)=>q>f))}}(0,d.f)("FlowGraphGreaterThanBlock",c);class G extends h.b{constructor(q){super(g.c,g.c,g.d,((q,f)=>this._polymorphicGreaterThanOrEqual(q,f)),"FlowGraphGreaterThanOrEqualBlock",q)}_polymorphicGreaterThanOrEqual(q,f){return a(q,f,((q,f)=>q>=f))}}(0,d.f)("FlowGraphGreaterThanOrEqualBlock",G);class m extends r.c{constructor(q){super(g.c,g.d,(q=>this._polymorphicIsNan(q)),"FlowGraphIsNaNBlock",q)}_polymorphicIsNan(q){if((0,B.q)(q,!0))return isNaN((0,B.m)(q));throw new Error(`Cannot get NaN of ${q}`)}}(0,d.f)("FlowGraphIsNaNBlock",m);class K extends r.c{constructor(q){super(g.c,g.d,(q=>this._polymorphicIsInf(q)),"FlowGraphIsInfBlock",q)}_polymorphicIsInf(q){if((0,B.q)(q))return!isFinite((0,B.m)(q));throw new Error(`Cannot get isInf of ${q}`)}}(0,d.f)("FlowGraphIsInfBlock",K);class J extends r.c{constructor(q){super(g.c,g.c,(q=>this._polymorphicDegToRad(q)),"FlowGraphDegToRadBlock",q)}_degToRad(q){return q*Math.PI/180}_polymorphicDegToRad(q){return e(q,this._degToRad)}}(0,d.f)("FlowGraphDegToRadBlock",J);class qq extends r.c{constructor(q){super(g.c,g.c,(q=>this._polymorphicRadToDeg(q)),"FlowGraphRadToDegBlock",q)}_radToDeg(q){return 180*q/Math.PI}_polymorphicRadToDeg(q){return e(q,this._radToDeg)}}(0,d.f)("FlowGraphRadToDegBlock",qq);class fq extends r.c{constructor(q){super(g.o,g.o,(q=>this._polymorphicSin(q)),"FlowGraphSinBlock",q)}_polymorphicSin(q){return e(q,Math.sin)}}class jq extends r.c{constructor(q){super(g.o,g.o,(q=>this._polymorphicCos(q)),"FlowGraphCosBlock",q)}_polymorphicCos(q){return e(q,Math.cos)}}class dq extends r.c{constructor(q){super(g.o,g.o,(q=>this._polymorphicTan(q)),"FlowGraphTanBlock",q)}_polymorphicTan(q){return e(q,Math.tan)}}class gq extends r.c{constructor(q){super(g.o,g.o,(q=>this._polymorphicAsin(q)),"FlowGraphASinBlock",q)}_polymorphicAsin(q){return e(q,Math.asin)}}(0,d.f)("FlowGraphASinBlock",gq);class hq extends r.c{constructor(q){super(g.o,g.o,(q=>this._polymorphicAcos(q)),"FlowGraphACosBlock",q)}_polymorphicAcos(q){return e(q,Math.acos)}}(0,d.f)("FlowGraphACosBlock",hq);class Lq extends r.c{constructor(q){super(g.o,g.o,(q=>this._polymorphicAtan(q)),"FlowGraphATanBlock",q)}_polymorphicAtan(q){return e(q,Math.atan)}}(0,d.f)("FlowGraphATanBlock",Lq);class Qq extends h.b{constructor(q){super(g.c,g.c,g.c,((q,f)=>this._polymorphicAtan2(q,f)),"FlowGraphATan2Block",q)}_polymorphicAtan2(q,f){return F(q,f,Math.atan2)}}(0,d.f)("FlowGraphATan2Block",Qq);class Hq extends r.c{constructor(q){super(g.c,g.c,(q=>this._polymorphicSinh(q)),"FlowGraphSinhBlock",q)}_polymorphicSinh(q){return e(q,Math.sinh)}}(0,d.f)("FlowGraphSinhBlock",Hq);class rq extends r.c{constructor(q){super(g.c,g.c,(q=>this._polymorphicCosh(q)),"FlowGraphCoshBlock",q)}_polymorphicCosh(q){return e(q,Math.cosh)}}(0,d.f)("FlowGraphCoshBlock",rq);class uq extends r.c{constructor(q){super(g.c,g.c,(q=>this._polymorphicTanh(q)),"FlowGraphTanhBlock",q)}_polymorphicTanh(q){return e(q,Math.tanh)}}(0,d.f)("FlowGraphTanhBlock",uq);class Xq extends r.c{constructor(q){super(g.c,g.o,(q=>this._polymorphicAsinh(q)),"FlowGraphASinhBlock",q)}_polymorphicAsinh(q){return e(q,Math.asinh)}}(0,d.f)("FlowGraphASinhBlock",Xq);class zq extends r.c{constructor(q){super(g.c,g.o,(q=>this._polymorphicAcosh(q)),"FlowGraphACoshBlock",q)}_polymorphicAcosh(q){return e(q,Math.acosh)}}(0,d.f)("FlowGraphACoshBlock",zq);class Bq extends r.c{constructor(q){super(g.c,g.o,(q=>this._polymorphicAtanh(q)),"FlowGraphATanhBlock",q)}_polymorphicAtanh(q){return e(q,Math.atanh)}}(0,d.f)("FlowGraphATanhBlock",Bq);class Dq extends r.c{constructor(q){super(g.c,g.o,(q=>this._polymorphicExp(q)),"FlowGraphExponentialBlock",q)}_polymorphicExp(q){return e(q,Math.exp)}}(0,d.f)("FlowGraphExponentialBlock",Dq);class iq extends r.c{constructor(q){super(g.c,g.o,(q=>this._polymorphicLog(q)),"FlowGraphLogBlock",q)}_polymorphicLog(q){return e(q,Math.log)}}(0,d.f)("FlowGraphLogBlock",iq);class tq extends r.c{constructor(q){super(g.c,g.o,(q=>this._polymorphicLog2(q)),"FlowGraphLog2Block",q)}_polymorphicLog2(q){return e(q,Math.log2)}}(0,d.f)("FlowGraphLog2Block",tq);class Oq extends r.c{constructor(q){super(g.c,g.o,(q=>this._polymorphicLog10(q)),"FlowGraphLog10Block",q)}_polymorphicLog10(q){return e(q,Math.log10)}}(0,d.f)("FlowGraphLog10Block",Oq);class Nq extends r.c{constructor(q){super(g.c,g.o,(q=>this._polymorphicSqrt(q)),"FlowGraphSquareRootBlock",q)}_polymorphicSqrt(q){return e(q,Math.sqrt)}}(0,d.f)("FlowGraphSquareRootBlock",Nq);class wq extends r.c{constructor(q){super(g.c,g.o,(q=>this._polymorphicCubeRoot(q)),"FlowGraphCubeRootBlock",q)}_polymorphicCubeRoot(q){return e(q,Math.cbrt)}}(0,d.f)("FlowGraphCubeRootBlock",wq);class Eq extends h.b{constructor(q){super(g.c,g.o,g.o,((q,f)=>this._polymorphicPow(q,f)),"FlowGraphPowerBlock",q)}_polymorphicPow(q,f){return F(q,f,Math.pow)}}(0,d.f)("FlowGraphPowerBlock",Eq);class sq extends r.c{constructor(q){super((0,g.D)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,g.D)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(q=>"boolean"===typeof q?!q:"number"===typeof q?~q:new X.c(~q.value)),"FlowGraphBitwiseNotBlock",q)}}(0,d.f)("FlowGraphBitwiseNotBlock",sq);class Sq extends h.b{constructor(q){super((0,g.D)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,g.D)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,g.D)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),((q,f)=>{if("boolean"===typeof q&&"boolean"===typeof f)return q&&f;if("number"===typeof q&&"number"===typeof f)return q&f;if("object"===typeof q&&"object"===typeof f)return new X.c(q.value&f.value);throw new Error(`Cannot perform bitwise AND on ${q} and ${f}`)}),"FlowGraphBitwiseAndBlock",q)}}(0,d.f)("FlowGraphBitwiseAndBlock",Sq);class eq extends h.b{constructor(q){super((0,g.D)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,g.D)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,g.D)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),((q,f)=>{if("boolean"===typeof q&&"boolean"===typeof f)return q||f;if("number"===typeof q&&"number"===typeof f)return q|f;if("object"===typeof q&&"object"===typeof f)return new X.c(q.value|f.value);throw new Error(`Cannot perform bitwise OR on ${q} and ${f}`)}),"FlowGraphBitwiseOrBlock",q)}}(0,d.f)("FlowGraphBitwiseOrBlock",eq);class Zq extends h.b{constructor(q){super((0,g.D)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,g.D)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,g.D)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),((q,f)=>{if("boolean"===typeof q&&"boolean"===typeof f)return q!==f;if("number"===typeof q&&"number"===typeof f)return q^f;if("object"===typeof q&&"object"===typeof f)return new X.c(q.value^f.value);throw new Error(`Cannot perform bitwise XOR on ${q} and ${f}`)}),"FlowGraphBitwiseXorBlock",q)}}(0,d.f)("FlowGraphBitwiseXorBlock",Zq);class Iq extends h.b{constructor(q){super(g.e,g.e,g.e,((q,f)=>new X.c(q.value<<f.value)),"FlowGraphBitwiseLeftShiftBlock",q)}}(0,d.f)("FlowGraphBitwiseLeftShiftBlock",Iq);class Tq extends h.b{constructor(q){super(g.e,g.e,g.e,((q,f)=>new X.c(q.value>>f.value)),"FlowGraphBitwiseRightShiftBlock",q)}}(0,d.f)("FlowGraphBitwiseRightShiftBlock",Tq);class Wq extends r.c{constructor(q){super(g.e,g.e,(q=>new X.c(Math.clz32(q.value))),"FlowGraphLeadingZerosBlock",q)}}(0,d.f)("FlowGraphLeadingZerosBlock",Wq);class nq extends r.c{constructor(q){super(g.e,g.e,(q=>new X.c(q.value?31-Math.clz32(q.value&-q.value):32)),"FlowGraphTrailingZerosBlock",q)}}(0,d.f)("FlowGraphTrailingZerosBlock",nq);class Uq extends r.c{constructor(q){super(g.e,g.e,(q=>new X.c(function(q){let f=0;for(;q;)f+=1&q,q>>=1;return f}(q.value))),"FlowGraphOneBitsCounterBlock",q)}}(0,d.f)("FlowGraphOneBitsCounterBlock",Uq)},14165:(q,f,j)=>{j.d(f,{b:()=>g});var d=j(14173);class g extends d.d{constructor(q,f,j,d,g,h){super(j,h),this._operation=d,this._className=g,this.a=this.registerDataInput("a",q),this.b=this.registerDataInput("b",f)}_doOperation(q){const f=this.a.getValue(q),j=this.b.getValue(q);return this._operation(f,j)}getClassName(){return this._className}}},14173:(q,f,j)=>{j.d(f,{d:()=>Q});var d=j(12726),g=j(12709);const h="cachedOperationValue",L="cachedExecutionId";class Q extends d.e{constructor(q,f){super(f),this.value=this.registerDataOutput("value",q),this.isValid=this.registerDataOutput("isValid",g.d)}_updateOutputs(q){const f=q._getExecutionVariable(this,L,-1),j=q._getExecutionVariable(this,h,null);if(void 0!==j&&null!==j&&f===q.executionId)this.isValid.setValue(!0,q),this.value.setValue(j,q);else try{const f=this._doOperation(q);if(void 0===f||null===f)return void this.isValid.setValue(!1,q);q._setExecutionVariable(this,h,f),q._setExecutionVariable(this,L,q.executionId),this.value.setValue(f,q),this.isValid.setValue(!0,q)}catch(d){this.isValid.setValue(!1,q)}}}},14179:(q,f,j)=>{j.d(f,{c:()=>g});var d=j(14173);class g extends d.d{constructor(q,f,j,d,g){super(f,g),this._operation=j,this._className=d,this.a=this.registerDataInput("a",q)}_doOperation(q){return this._operation(this.a.getValue(q))}getClassName(){return this._className}}}}]);