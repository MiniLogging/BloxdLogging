"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[68],{14395:(w,p,e)=>{e.r(p),e.d(p,{FlowGraphAbsBlock:()=>t,FlowGraphAcosBlock:()=>dw,FlowGraphAcoshBlock:()=>mw,FlowGraphAddBlock:()=>K,FlowGraphAsinBlock:()=>Iw,FlowGraphAsinhBlock:()=>kw,FlowGraphAtan2Block:()=>qw,FlowGraphAtanBlock:()=>fw,FlowGraphAtanhBlock:()=>Jw,FlowGraphBitwiseAndBlock:()=>Mw,FlowGraphBitwiseLeftShiftBlock:()=>nw,FlowGraphBitwiseNotBlock:()=>zw,FlowGraphBitwiseOrBlock:()=>iw,FlowGraphBitwiseRightShiftBlock:()=>lw,FlowGraphBitwiseXorBlock:()=>tw,FlowGraphCeilBlock:()=>U,FlowGraphClampBlock:()=>W,FlowGraphCosBlock:()=>ew,FlowGraphCoshBlock:()=>jw,FlowGraphCubeRootBlock:()=>aw,FlowGraphDegToRadBlock:()=>S,FlowGraphDivideBlock:()=>s,FlowGraphEBlock:()=>a,FlowGraphEqualityBlock:()=>T,FlowGraphExpBlock:()=>Kw,FlowGraphFloorBlock:()=>N,FlowGraphFractionBlock:()=>R,FlowGraphGreaterThanBlock:()=>o,FlowGraphGreaterThanOrEqualBlock:()=>C,FlowGraphInfBlock:()=>z,FlowGraphIsInfinityBlock:()=>x,FlowGraphIsNanBlock:()=>Q,FlowGraphLeadingZerosBlock:()=>Nw,FlowGraphLessThanBlock:()=>G,FlowGraphLessThanOrEqualBlock:()=>g,FlowGraphLog10Block:()=>sw,FlowGraphLog2Block:()=>cw,FlowGraphLogBlock:()=>yw,FlowGraphMathInterpolationBlock:()=>D,FlowGraphMaxBlock:()=>u,FlowGraphMinBlock:()=>P,FlowGraphModuloBlock:()=>h,FlowGraphMultiplyBlock:()=>c,FlowGraphNaNBlock:()=>M,FlowGraphNegationBlock:()=>V,FlowGraphOneBitsCounterBlock:()=>vw,FlowGraphPiBlock:()=>A,FlowGraphPowerBlock:()=>Aw,FlowGraphRadToDegBlock:()=>ww,FlowGraphRandomBlock:()=>O,FlowGraphRoundBlock:()=>v,FlowGraphSaturateBlock:()=>H,FlowGraphSignBlock:()=>n,FlowGraphSinBlock:()=>pw,FlowGraphSinhBlock:()=>Ew,FlowGraphSquareRootBlock:()=>Ow,FlowGraphSubtractBlock:()=>y,FlowGraphTanBlock:()=>rw,FlowGraphTanhBlock:()=>Xw,FlowGraphTrailingZerosBlock:()=>Uw,FlowGraphTruncBlock:()=>l});var r=e(11038),I=e(12872),d=e(14400),f=e(14402);class q extends f.c{constructor(w,p,e,r){super(w,r),this._operation=p,this._className=e}_doOperation(w){return this._operation(w)}getClassName(){return this._className}}var E=e(11023),j=e(14404);class X extends f.c{constructor(w,p,e,r,I,d,f){super(r,f),this._operation=I,this._className=d,this.a=this.registerDataInput("a",w),this.b=this.registerDataInput("b",p),this.c=this.registerDataInput("c",e)}_doOperation(w){return this._operation(this.a.getValue(w),this.b.getValue(w),this.c.getValue(w))}getClassName(){return this._className}}var k=e(12867),m=e(12878),J=e(12905);class K extends d.e{constructor(w){super((0,I.L)(null===w||void 0===w?void 0:w.type),(0,I.L)(null===w||void 0===w?void 0:w.type),(0,I.L)(null===w||void 0===w?void 0:w.type),((w,p)=>this._polymorphicAdd(w,p)),"FlowGraphAddBlock",w)}_polymorphicAdd(w,p){const e=(0,J.i)(w),r=(0,J.i)(p);if((0,J.h)(e,r)||(0,J.d)(e,r)||(0,J.c)(e,r))return w.add(p);if("Quaternion"===e||"Vector4"===r)return new E.o(w.x,w.y,w.z,w.w).addInPlace(p);if("Vector4"===e||"Quaternion"===r)return w.add(p);var I;if(null!==(I=this.config)&&void 0!==I&&I.preventIntegerFloatArithmetic&&typeof w!==typeof p)throw new Error("Cannot add different types of numbers.");return(0,J.n)(w)+(0,J.n)(p)}}(0,r.d)("FlowGraphAddBlock",K);class y extends d.e{constructor(w){super((0,I.L)(null===w||void 0===w?void 0:w.type),(0,I.L)(null===w||void 0===w?void 0:w.type),(0,I.L)(null===w||void 0===w?void 0:w.type),((w,p)=>this._polymorphicSubtract(w,p)),"FlowGraphSubtractBlock",w)}_polymorphicSubtract(w,p){const e=(0,J.i)(w),r=(0,J.i)(p);if((0,J.h)(e,r)||(0,J.c)(e,r)||(0,J.d)(e,r))return w.Je(p);if("Quaternion"===e||"Vector4"===r)return new E.o(w.x,w.y,w.z,w.w).zk(p);if("Vector4"===e||"Quaternion"===r)return w.Je(p);var I;if(null!==(I=this.config)&&void 0!==I&&I.preventIntegerFloatArithmetic&&typeof w!==typeof p)throw new Error("Cannot add different types of numbers.");return(0,J.n)(w)-(0,J.n)(p)}}(0,r.d)("FlowGraphSubtractBlock",y);class c extends d.e{constructor(w){super((0,I.L)(null===w||void 0===w?void 0:w.type),(0,I.L)(null===w||void 0===w?void 0:w.type),(0,I.L)(null===w||void 0===w?void 0:w.type),((w,p)=>this._polymorphicMultiply(w,p)),"FlowGraphMultiplyBlock",w)}_polymorphicMultiply(w,p){const e=(0,J.i)(w),r=(0,J.i)(p);if((0,J.h)(e,r)||(0,J.c)(e,r))return w.multiply(p);if("Quaternion"===e||"Vector4"===r)return new E.o(w.x,w.y,w.z,w.w).multiplyInPlace(p);if("Vector4"===e||"Quaternion"===r)return w.multiply(p);if((0,J.d)(e,r)){var I;if(null!==(I=this.config)&&void 0!==I&&I.useMatrixPerComponent){const r=w.m;for(let w=0;w<r.length;w++)r[w]*=p.m[w];return"Matrix2D"===e?new m.e(r):"Matrix3D"===e?new m.g(r):E.b.Ve(r)}return p.multiply(w)}var d;if(null!==(d=this.config)&&void 0!==d&&d.preventIntegerFloatArithmetic&&typeof w!==typeof p)throw new Error("Cannot add different types of numbers.");return(0,J.n)(w)*(0,J.n)(p)}}(0,r.d)("FlowGraphMultiplyBlock",c);class s extends d.e{constructor(w){super((0,I.L)(null===w||void 0===w?void 0:w.type),(0,I.L)(null===w||void 0===w?void 0:w.type),(0,I.L)(null===w||void 0===w?void 0:w.type),((w,p)=>this._polymorphicDivide(w,p)),"FlowGraphDivideBlock",w)}_polymorphicDivide(w,p){const e=(0,J.i)(w),r=(0,J.i)(p);if((0,J.h)(e,r)||(0,J.c)(e,r))return w.divide(p);if("Quaternion"===e||"Quaternion"===r){const e=w.clone();return e.x/=p.x,e.y/=p.y,e.z/=p.z,e.w/=p.w,e}if("Quaternion"===e||"Vector4"===r)return new E.o(w.x,w.y,w.z,w.w).divideInPlace(p);if("Vector4"===e||"Quaternion"===r)return w.divide(p);if((0,J.d)(e,r)){var I;if(null!==(I=this.config)&&void 0!==I&&I.useMatrixPerComponent){const r=w.m;for(let w=0;w<r.length;w++)r[w]/=p.m[w];return"Matrix2D"===e?new m.e(r):"Matrix3D"===e?new m.g(r):E.b.Ve(r)}return w.divide(p)}var d;if(null!==(d=this.config)&&void 0!==d&&d.preventIntegerFloatArithmetic&&typeof w!==typeof p)throw new Error("Cannot add different types of numbers.");return(0,J.n)(w)/(0,J.n)(p)}}(0,r.d)("FlowGraphDivideBlock",s);class O extends q{constructor(w){super(I.o,(w=>this._random(w)),"FlowGraphRandomBlock",w),this.min=this.registerDataInput("min",I.o,(null===w||void 0===w?void 0:w.min)??0),this.max=this.registerDataInput("max",I.o,(null===w||void 0===w?void 0:w.max)??1),null!==w&&void 0!==w&&w.seed&&(this._seed=w.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const w=1e4*Math.sin(this._seed++);return w-Math.floor(w)}return Math.random()}_random(w){const p=this.min.getValue(w),e=this.max.getValue(w);return this._getRandomValue()*(e-p)+p}}(0,r.d)("FlowGraphRandomBlock",O);class a extends q{constructor(w){super(I.o,(()=>Math.E),"FlowGraphEBlock",w)}}(0,r.d)("FlowGraphEBlock",a);class A extends q{constructor(w){super(I.o,(()=>Math.PI),"FlowGraphPIBlock",w)}}(0,r.d)("FlowGraphPIBlock",A);class z extends q{constructor(w){super(I.o,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",w)}}(0,r.d)("FlowGraphInfBlock",z);class M extends q{constructor(w){super(I.o,(()=>Number.NaN),"FlowGraphNaNBlock",w)}}function i(w,p){switch((0,J.i)(w)){case"FlowGraphInteger":return new k.b(p(w.value));case"Vector2":return new E.g(p(w.x),p(w.y));case"ne":return new E.k(p(w.x),p(w.y),p(w.z));case"Vector4":return new E.o(p(w.x),p(w.y),p(w.z),p(w.w));case"Quaternion":return new E.c(p(w.x),p(w.y),p(w.z),p(w.w));case"Matrix":return E.b.Ve(w.m.map(p));case"Matrix2D":return new m.e(w.m.map(p));case"Matrix3D":return new m.g(w.m.map(p));default:return p(w)}}(0,r.d)("FlowGraphNaNBlock",M);class t extends j.e{constructor(w){super(I.o,I.o,(w=>this._polymorphicAbs(w)),"FlowGraphAbsBlock",w)}_polymorphicAbs(w){return i(w,Math.abs)}}(0,r.d)("FlowGraphAbsBlock",t);class n extends j.e{constructor(w){super(I.o,I.o,(w=>this._polymorphicSign(w)),"FlowGraphSignBlock",w)}_polymorphicSign(w){return i(w,Math.sign)}}(0,r.d)("FlowGraphSignBlock",n);class l extends j.e{constructor(w){super(I.o,I.o,(w=>this._polymorphicTrunc(w)),"FlowGraphTruncBlock",w)}_polymorphicTrunc(w){return i(w,Math.trunc)}}(0,r.d)("FlowGraphTruncBlock",l);class N extends j.e{constructor(w){super(I.o,I.o,(w=>this._polymorphicFloor(w)),"FlowGraphFloorBlock",w)}_polymorphicFloor(w){return i(w,Math.floor)}}(0,r.d)("FlowGraphFloorBlock",N);class U extends j.e{constructor(w){super(I.c,I.c,(w=>this._polymorphicCeiling(w)),"FlowGraphCeilBlock",w)}_polymorphicCeiling(w){return i(w,Math.ceil)}}(0,r.d)("FlowGraphCeilBlock",U);class v extends j.e{constructor(w){super(I.c,I.c,(w=>this._polymorphicRound(w)),"FlowGraphRoundBlock",w)}_polymorphicRound(w){return i(w,(w=>{var p;return w<0&&null!==(p=this.config)&&void 0!==p&&p.roundHalfAwayFromZero?-Math.round(-w):Math.round(w)}))}}(0,r.d)("FlowGraphRoundBlock",v);class R extends j.e{constructor(w){super(I.c,I.c,(w=>this._polymorphicFraction(w)),"FlowGraphFractBlock",w)}_polymorphicFraction(w){return i(w,(w=>w-Math.floor(w)))}}(0,r.d)("FlowGraphFractBlock",R);class V extends j.e{constructor(w){super(I.c,I.c,(w=>this._polymorphicNeg(w)),"FlowGraphNegationBlock",w)}_polymorphicNeg(w){return i(w,(w=>-w))}}function b(w,p,e){switch((0,J.i)(w)){case"FlowGraphInteger":return new k.b(e(w.value,p.value));case"Vector2":return new E.g(e(w.x,p.x),e(w.y,p.y));case"ne":return new E.k(e(w.x,p.x),e(w.y,p.y),e(w.z,p.z));case"Vector4":return new E.o(e(w.x,p.x),e(w.y,p.y),e(w.z,p.z),e(w.w,p.w));case"Quaternion":return new E.c(e(w.x,p.x),e(w.y,p.y),e(w.z,p.z),e(w.w,p.w));case"Matrix":return E.b.Ve(w.m.map(((w,r)=>e(w,p.m[r]))));case"Matrix2D":return new m.e(w.m.map(((w,r)=>e(w,p.m[r]))));case"Matrix3D":return new m.g(w.m.map(((w,r)=>e(w,p.m[r]))));default:return e((0,J.n)(w),(0,J.n)(p))}}(0,r.d)("FlowGraphNegationBlock",V);class h extends d.e{constructor(w){super(I.c,I.c,I.c,((w,p)=>this._polymorphicRemainder(w,p)),"FlowGraphModuloBlock",w)}_polymorphicRemainder(w,p){return b(w,p,((w,p)=>w%p))}}(0,r.d)("FlowGraphModuloBlock",h);class P extends d.e{constructor(w){super(I.c,I.c,I.c,((w,p)=>this._polymorphicMin(w,p)),"FlowGraphMinBlock",w)}_polymorphicMin(w,p){return b(w,p,Math.min)}}(0,r.d)("FlowGraphMinBlock",P);class u extends d.e{constructor(w){super(I.c,I.c,I.c,((w,p)=>this._polymorphicMax(w,p)),"FlowGraphMaxBlock",w)}_polymorphicMax(w,p){return b(w,p,Math.max)}}function Y(w,p,e){return Math.min(Math.max(w,Math.min(p,e)),Math.max(p,e))}function L(w,p,e,r){switch((0,J.i)(w)){case"FlowGraphInteger":return new k.b(r(w.value,p.value,e.value));case"Vector2":return new E.g(r(w.x,p.x,e.x),r(w.y,p.y,e.y));case"ne":return new E.k(r(w.x,p.x,e.x),r(w.y,p.y,e.y),r(w.z,p.z,e.z));case"Vector4":return new E.o(r(w.x,p.x,e.x),r(w.y,p.y,e.y),r(w.z,p.z,e.z),r(w.w,p.w,e.w));case"Quaternion":return new E.c(r(w.x,p.x,e.x),r(w.y,p.y,e.y),r(w.z,p.z,e.z),r(w.w,p.w,e.w));case"Matrix":return E.b.Ve(w.m.map(((w,I)=>r(w,p.m[I],e.m[I]))));case"Matrix2D":return new m.e(w.m.map(((w,I)=>r(w,p.m[I],e.m[I]))));case"Matrix3D":return new m.g(w.m.map(((w,I)=>r(w,p.m[I],e.m[I]))));default:return r((0,J.n)(w),(0,J.n)(p),(0,J.n)(e))}}(0,r.d)("FlowGraphMaxBlock",u);class W extends X{constructor(w){super(I.c,I.c,I.c,I.c,((w,p,e)=>this._polymorphicClamp(w,p,e)),"FlowGraphClampBlock",w)}_polymorphicClamp(w,p,e){return L(w,p,e,Y)}}function F(w){return Math.min(Math.max(w,0),1)}(0,r.d)("FlowGraphClampBlock",W);class H extends j.e{constructor(w){super(I.c,I.c,(w=>this._polymorphicSaturate(w)),"FlowGraphSaturateBlock",w)}_polymorphicSaturate(w){return i(w,F)}}function B(w,p,e){return(1-e)*w+e*p}(0,r.d)("FlowGraphSaturateBlock",H);class D extends X{constructor(w){super(I.c,I.c,I.c,I.c,((w,p,e)=>this._polymorphicInterpolate(w,p,e)),"FlowGraphMathInterpolationBlock",w)}_polymorphicInterpolate(w,p,e){return L(w,p,e,B)}}(0,r.d)("FlowGraphMathInterpolationBlock",D);class T extends d.e{constructor(w){super(I.c,I.c,I.g,((w,p)=>this._polymorphicEq(w,p)),"FlowGraphEqualityBlock",w)}_polymorphicEq(w,p){const e=(0,J.i)(w),r=(0,J.i)(p);return typeof w===typeof p&&((0,J.h)(e,r)||(0,J.d)(e,r)||(0,J.c)(e,r)?w.equals(p):w===p)}}function Z(w,p,e){if((0,J.o)(w)&&(0,J.o)(p))return e((0,J.n)(w),(0,J.n)(p));throw new Error(`Cannot compare ${w} and ${p}`)}(0,r.d)("FlowGraphEqualityBlock",T);class G extends d.e{constructor(w){super(I.c,I.c,I.g,((w,p)=>this._polymorphicLessThan(w,p)),"FlowGraphLessThanBlock",w)}_polymorphicLessThan(w,p){return Z(w,p,((w,p)=>w<p))}}(0,r.d)("FlowGraphLessThanBlock",G);class g extends d.e{constructor(w){super(I.c,I.c,I.g,((w,p)=>this._polymorphicLessThanOrEqual(w,p)),"FlowGraphLessThanOrEqualBlock",w)}_polymorphicLessThanOrEqual(w,p){return Z(w,p,((w,p)=>w<=p))}}(0,r.d)("FlowGraphLessThanOrEqualBlock",g);class o extends d.e{constructor(w){super(I.c,I.c,I.g,((w,p)=>this._polymorphicGreaterThan(w,p)),"FlowGraphGreaterThanBlock",w)}_polymorphicGreaterThan(w,p){return Z(w,p,((w,p)=>w>p))}}(0,r.d)("FlowGraphGreaterThanBlock",o);class C extends d.e{constructor(w){super(I.c,I.c,I.g,((w,p)=>this._polymorphicGreaterThanOrEqual(w,p)),"FlowGraphGreaterThanOrEqualBlock",w)}_polymorphicGreaterThanOrEqual(w,p){return Z(w,p,((w,p)=>w>=p))}}(0,r.d)("FlowGraphGreaterThanOrEqualBlock",C);class Q extends j.e{constructor(w){super(I.c,I.g,(w=>this._polymorphicIsNan(w)),"FlowGraphIsNaNBlock",w)}_polymorphicIsNan(w){if((0,J.o)(w,!0))return isNaN((0,J.n)(w));throw new Error(`Cannot get NaN of ${w}`)}}(0,r.d)("FlowGraphIsNaNBlock",Q);class x extends j.e{constructor(w){super(I.c,I.g,(w=>this._polymorphicIsInf(w)),"FlowGraphIsInfBlock",w)}_polymorphicIsInf(w){if((0,J.o)(w))return!isFinite((0,J.n)(w));throw new Error(`Cannot get isInf of ${w}`)}}(0,r.d)("FlowGraphIsInfBlock",x);class S extends j.e{constructor(w){super(I.c,I.c,(w=>this._polymorphicDegToRad(w)),"FlowGraphDegToRadBlock",w)}_degToRad(w){return w*Math.PI/180}_polymorphicDegToRad(w){return i(w,this._degToRad)}}(0,r.d)("FlowGraphDegToRadBlock",S);class ww extends j.e{constructor(w){super(I.c,I.c,(w=>this._polymorphicRadToDeg(w)),"FlowGraphRadToDegBlock",w)}_radToDeg(w){return 180*w/Math.PI}_polymorphicRadToDeg(w){return i(w,this._radToDeg)}}(0,r.d)("FlowGraphRadToDegBlock",ww);class pw extends j.e{constructor(w){super(I.o,I.o,(w=>this._polymorphicSin(w)),"FlowGraphSinBlock",w)}_polymorphicSin(w){return i(w,Math.sin)}}class ew extends j.e{constructor(w){super(I.o,I.o,(w=>this._polymorphicCos(w)),"FlowGraphCosBlock",w)}_polymorphicCos(w){return i(w,Math.cos)}}class rw extends j.e{constructor(w){super(I.o,I.o,(w=>this._polymorphicTan(w)),"FlowGraphTanBlock",w)}_polymorphicTan(w){return i(w,Math.tan)}}class Iw extends j.e{constructor(w){super(I.o,I.o,(w=>this._polymorphicAsin(w)),"FlowGraphASinBlock",w)}_polymorphicAsin(w){return i(w,Math.asin)}}(0,r.d)("FlowGraphASinBlock",Iw);class dw extends j.e{constructor(w){super(I.o,I.o,(w=>this._polymorphicAcos(w)),"FlowGraphACosBlock",w)}_polymorphicAcos(w){return i(w,Math.acos)}}(0,r.d)("FlowGraphACosBlock",dw);class fw extends j.e{constructor(w){super(I.o,I.o,(w=>this._polymorphicAtan(w)),"FlowGraphATanBlock",w)}_polymorphicAtan(w){return i(w,Math.atan)}}(0,r.d)("FlowGraphATanBlock",fw);class qw extends d.e{constructor(w){super(I.c,I.c,I.c,((w,p)=>this._polymorphicAtan2(w,p)),"FlowGraphATan2Block",w)}_polymorphicAtan2(w,p){return b(w,p,Math.atan2)}}(0,r.d)("FlowGraphATan2Block",qw);class Ew extends j.e{constructor(w){super(I.c,I.c,(w=>this._polymorphicSinh(w)),"FlowGraphSinhBlock",w)}_polymorphicSinh(w){return i(w,Math.sinh)}}(0,r.d)("FlowGraphSinhBlock",Ew);class jw extends j.e{constructor(w){super(I.c,I.c,(w=>this._polymorphicCosh(w)),"FlowGraphCoshBlock",w)}_polymorphicCosh(w){return i(w,Math.cosh)}}(0,r.d)("FlowGraphCoshBlock",jw);class Xw extends j.e{constructor(w){super(I.c,I.c,(w=>this._polymorphicTanh(w)),"FlowGraphTanhBlock",w)}_polymorphicTanh(w){return i(w,Math.tanh)}}(0,r.d)("FlowGraphTanhBlock",Xw);class kw extends j.e{constructor(w){super(I.c,I.o,(w=>this._polymorphicAsinh(w)),"FlowGraphASinhBlock",w)}_polymorphicAsinh(w){return i(w,Math.asinh)}}(0,r.d)("FlowGraphASinhBlock",kw);class mw extends j.e{constructor(w){super(I.c,I.o,(w=>this._polymorphicAcosh(w)),"FlowGraphACoshBlock",w)}_polymorphicAcosh(w){return i(w,Math.acosh)}}(0,r.d)("FlowGraphACoshBlock",mw);class Jw extends j.e{constructor(w){super(I.c,I.o,(w=>this._polymorphicAtanh(w)),"FlowGraphATanhBlock",w)}_polymorphicAtanh(w){return i(w,Math.atanh)}}(0,r.d)("FlowGraphATanhBlock",Jw);class Kw extends j.e{constructor(w){super(I.c,I.o,(w=>this._polymorphicExp(w)),"FlowGraphExponentialBlock",w)}_polymorphicExp(w){return i(w,Math.exp)}}(0,r.d)("FlowGraphExponentialBlock",Kw);class yw extends j.e{constructor(w){super(I.c,I.o,(w=>this._polymorphicLog(w)),"FlowGraphLogBlock",w)}_polymorphicLog(w){return i(w,Math.log)}}(0,r.d)("FlowGraphLogBlock",yw);class cw extends j.e{constructor(w){super(I.c,I.o,(w=>this._polymorphicLog2(w)),"FlowGraphLog2Block",w)}_polymorphicLog2(w){return i(w,Math.log2)}}(0,r.d)("FlowGraphLog2Block",cw);class sw extends j.e{constructor(w){super(I.c,I.o,(w=>this._polymorphicLog10(w)),"FlowGraphLog10Block",w)}_polymorphicLog10(w){return i(w,Math.log10)}}(0,r.d)("FlowGraphLog10Block",sw);class Ow extends j.e{constructor(w){super(I.c,I.o,(w=>this._polymorphicSqrt(w)),"FlowGraphSquareRootBlock",w)}_polymorphicSqrt(w){return i(w,Math.sqrt)}}(0,r.d)("FlowGraphSquareRootBlock",Ow);class aw extends j.e{constructor(w){super(I.c,I.o,(w=>this._polymorphicCubeRoot(w)),"FlowGraphCubeRootBlock",w)}_polymorphicCubeRoot(w){return i(w,Math.cbrt)}}(0,r.d)("FlowGraphCubeRootBlock",aw);class Aw extends d.e{constructor(w){super(I.c,I.o,I.o,((w,p)=>this._polymorphicPow(w,p)),"FlowGraphPowerBlock",w)}_polymorphicPow(w,p){return b(w,p,Math.pow)}}(0,r.d)("FlowGraphPowerBlock",Aw);class zw extends j.e{constructor(w){super((0,I.L)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,I.L)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(w=>"boolean"===typeof w?!w:"number"===typeof w?~w:new k.b(~w.value)),"FlowGraphBitwiseNotBlock",w)}}(0,r.d)("FlowGraphBitwiseNotBlock",zw);class Mw extends d.e{constructor(w){super((0,I.L)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,I.L)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,I.L)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),((w,p)=>{if("boolean"===typeof w&&"boolean"===typeof p)return w&&p;if("number"===typeof w&&"number"===typeof p)return w&p;if("object"===typeof w&&"object"===typeof p)return new k.b(w.value&p.value);throw new Error(`Cannot perform bitwise AND on ${w} and ${p}`)}),"FlowGraphBitwiseAndBlock",w)}}(0,r.d)("FlowGraphBitwiseAndBlock",Mw);class iw extends d.e{constructor(w){super((0,I.L)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,I.L)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,I.L)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),((w,p)=>{if("boolean"===typeof w&&"boolean"===typeof p)return w||p;if("number"===typeof w&&"number"===typeof p)return w|p;if("object"===typeof w&&"object"===typeof p)return new k.b(w.value|p.value);throw new Error(`Cannot perform bitwise OR on ${w} and ${p}`)}),"FlowGraphBitwiseOrBlock",w)}}(0,r.d)("FlowGraphBitwiseOrBlock",iw);class tw extends d.e{constructor(w){super((0,I.L)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,I.L)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),(0,I.L)((null===w||void 0===w?void 0:w.valueType)||"FlowGraphInteger"),((w,p)=>{if("boolean"===typeof w&&"boolean"===typeof p)return w!==p;if("number"===typeof w&&"number"===typeof p)return w^p;if("object"===typeof w&&"object"===typeof p)return new k.b(w.value^p.value);throw new Error(`Cannot perform bitwise XOR on ${w} and ${p}`)}),"FlowGraphBitwiseXorBlock",w)}}(0,r.d)("FlowGraphBitwiseXorBlock",tw);class nw extends d.e{constructor(w){super(I.h,I.h,I.h,((w,p)=>new k.b(w.value<<p.value)),"FlowGraphBitwiseLeftShiftBlock",w)}}(0,r.d)("FlowGraphBitwiseLeftShiftBlock",nw);class lw extends d.e{constructor(w){super(I.h,I.h,I.h,((w,p)=>new k.b(w.value>>p.value)),"FlowGraphBitwiseRightShiftBlock",w)}}(0,r.d)("FlowGraphBitwiseRightShiftBlock",lw);class Nw extends j.e{constructor(w){super(I.h,I.h,(w=>new k.b(Math.clz32(w.value))),"FlowGraphLeadingZerosBlock",w)}}(0,r.d)("FlowGraphLeadingZerosBlock",Nw);class Uw extends j.e{constructor(w){super(I.h,I.h,(w=>new k.b(w.value?31-Math.clz32(w.value&-w.value):32)),"FlowGraphTrailingZerosBlock",w)}}(0,r.d)("FlowGraphTrailingZerosBlock",Uw);class vw extends j.e{constructor(w){super(I.h,I.h,(w=>new k.b(function(w){let p=0;for(;w;)p+=1&w,w>>=1;return p}(w.value))),"FlowGraphOneBitsCounterBlock",w)}}(0,r.d)("FlowGraphOneBitsCounterBlock",vw)},14400:(w,p,e)=>{e.d(p,{e:()=>I});var r=e(14402);class I extends r.c{constructor(w,p,e,r,I,d){super(e,d),this._operation=r,this._className=I,this.a=this.registerDataInput("a",w),this.b=this.registerDataInput("b",p)}_doOperation(w){const p=this.a.getValue(w),e=this.b.getValue(w);return this._operation(p,e)}getClassName(){return this._className}}},14402:(w,p,e)=>{e.d(p,{c:()=>q});var r=e(12893),I=e(12872);const d="cachedOperationValue",f="cachedExecutionId";class q extends r.e{constructor(w,p){super(p),this.value=this.registerDataOutput("value",w),this.isValid=this.registerDataOutput("isValid",I.g)}_updateOutputs(w){const p=w._getExecutionVariable(this,f,-1),e=w._getExecutionVariable(this,d,null);if(void 0!==e&&null!==e&&p===w.executionId)this.isValid.setValue(!0,w),this.value.setValue(e,w);else try{const p=this._doOperation(w);if(void 0===p||null===p)return void this.isValid.setValue(!1,w);w._setExecutionVariable(this,d,p),w._setExecutionVariable(this,f,w.executionId),this.value.setValue(p,w),this.isValid.setValue(!0,w)}catch(r){this.isValid.setValue(!1,w)}}}},14404:(w,p,e)=>{e.d(p,{e:()=>I});var r=e(14402);class I extends r.c{constructor(w,p,e,r,I){super(p,I),this._operation=e,this._className=r,this.a=this.registerDataInput("a",w)}_doOperation(w){return this._operation(this.a.getValue(w))}getClassName(){return this._className}}}}]);