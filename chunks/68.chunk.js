"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[68],{14418:(V,I,m)=>{m.r(I),m.d(I,{FlowGraphAbsBlock:()=>H,FlowGraphAcosBlock:()=>sV,FlowGraphAcoshBlock:()=>XV,FlowGraphAddBlock:()=>v,FlowGraphAsinBlock:()=>lV,FlowGraphAsinhBlock:()=>YV,FlowGraphAtan2Block:()=>kV,FlowGraphAtanBlock:()=>FV,FlowGraphAtanhBlock:()=>OV,FlowGraphBitwiseAndBlock:()=>SV,FlowGraphBitwiseLeftShiftBlock:()=>yV,FlowGraphBitwiseNotBlock:()=>xV,FlowGraphBitwiseOrBlock:()=>cV,FlowGraphBitwiseRightShiftBlock:()=>zV,FlowGraphBitwiseXorBlock:()=>HV,FlowGraphCeilBlock:()=>B,FlowGraphClampBlock:()=>q,FlowGraphCosBlock:()=>mV,FlowGraphCoshBlock:()=>EV,FlowGraphCubeRootBlock:()=>TV,FlowGraphDegToRadBlock:()=>L,FlowGraphDivideBlock:()=>D,FlowGraphEBlock:()=>T,FlowGraphEqualityBlock:()=>M,FlowGraphExpBlock:()=>vV,FlowGraphFloorBlock:()=>Z,FlowGraphFractionBlock:()=>Q,FlowGraphGreaterThanBlock:()=>J,FlowGraphGreaterThanOrEqualBlock:()=>U,FlowGraphInfBlock:()=>x,FlowGraphIsInfinityBlock:()=>a,FlowGraphIsNanBlock:()=>e,FlowGraphLeadingZerosBlock:()=>ZV,FlowGraphLessThanBlock:()=>w,FlowGraphLessThanOrEqualBlock:()=>A,FlowGraphLog10Block:()=>DV,FlowGraphLog2Block:()=>tV,FlowGraphLogBlock:()=>NV,FlowGraphMathInterpolationBlock:()=>p,FlowGraphMaxBlock:()=>d,FlowGraphMinBlock:()=>h,FlowGraphModuloBlock:()=>g,FlowGraphMultiplyBlock:()=>t,FlowGraphNaNBlock:()=>S,FlowGraphNegationBlock:()=>G,FlowGraphOneBitsCounterBlock:()=>WV,FlowGraphPiBlock:()=>n,FlowGraphPowerBlock:()=>nV,FlowGraphRadToDegBlock:()=>VV,FlowGraphRandomBlock:()=>b,FlowGraphRoundBlock:()=>W,FlowGraphSaturateBlock:()=>u,FlowGraphSignBlock:()=>y,FlowGraphSinBlock:()=>IV,FlowGraphSinhBlock:()=>jV,FlowGraphSquareRootBlock:()=>bV,FlowGraphSubtractBlock:()=>N,FlowGraphTanBlock:()=>CV,FlowGraphTanhBlock:()=>KV,FlowGraphTrailingZerosBlock:()=>BV,FlowGraphTruncBlock:()=>z});var C=m(11048),l=m(12899),s=m(14422),F=m(14427);class k extends F.e{constructor(V,I,m,C){super(V,C),this._operation=I,this._className=m}_doOperation(V){return this._operation(V)}getClassName(){return this._className}}var j=m(11040),E=m(14429);class K extends F.e{constructor(V,I,m,C,l,s,F){super(C,F),this._operation=l,this._className=s,this.a=this.registerDataInput("a",V),this.b=this.registerDataInput("b",I),this.c=this.registerDataInput("c",m)}_doOperation(V){return this._operation(this.a.getValue(V),this.b.getValue(V),this.c.getValue(V))}getClassName(){return this._className}}var Y=m(12896),X=m(12901),O=m(12926);class v extends s.d{constructor(V){super((0,l.I)(null===V||void 0===V?void 0:V.type),(0,l.I)(null===V||void 0===V?void 0:V.type),(0,l.I)(null===V||void 0===V?void 0:V.type),((V,I)=>this._polymorphicAdd(V,I)),"FlowGraphAddBlock",V)}_polymorphicAdd(V,I){const m=(0,O.h)(V),C=(0,O.h)(I);if((0,O.g)(m,C)||(0,O.f)(m,C)||(0,O.d)(m,C))return V.add(I);if("Quaternion"===m||"Vector4"===C)return new j.n(V.x,V.y,V.z,V.w).addInPlace(I);if("Vector4"===m||"Quaternion"===C)return V.add(I);var l;if(null!==(l=this.config)&&void 0!==l&&l.preventIntegerFloatArithmetic&&typeof V!==typeof I)throw new Error("Cannot add different types of numbers.");return(0,O.l)(V)+(0,O.l)(I)}}(0,C.h)("FlowGraphAddBlock",v);class N extends s.d{constructor(V){super((0,l.I)(null===V||void 0===V?void 0:V.type),(0,l.I)(null===V||void 0===V?void 0:V.type),(0,l.I)(null===V||void 0===V?void 0:V.type),((V,I)=>this._polymorphicSubtract(V,I)),"FlowGraphSubtractBlock",V)}_polymorphicSubtract(V,I){const m=(0,O.h)(V),C=(0,O.h)(I);if((0,O.g)(m,C)||(0,O.d)(m,C)||(0,O.f)(m,C))return V.Fm(I);if("Quaternion"===m||"Vector4"===C)return new j.n(V.x,V.y,V.z,V.w).WK(I);if("Vector4"===m||"Quaternion"===C)return V.Fm(I);var l;if(null!==(l=this.config)&&void 0!==l&&l.preventIntegerFloatArithmetic&&typeof V!==typeof I)throw new Error("Cannot add different types of numbers.");return(0,O.l)(V)-(0,O.l)(I)}}(0,C.h)("FlowGraphSubtractBlock",N);class t extends s.d{constructor(V){super((0,l.I)(null===V||void 0===V?void 0:V.type),(0,l.I)(null===V||void 0===V?void 0:V.type),(0,l.I)(null===V||void 0===V?void 0:V.type),((V,I)=>this._polymorphicMultiply(V,I)),"FlowGraphMultiplyBlock",V)}_polymorphicMultiply(V,I){const m=(0,O.h)(V),C=(0,O.h)(I);if((0,O.g)(m,C)||(0,O.d)(m,C))return V.multiply(I);if("Quaternion"===m||"Vector4"===C)return new j.n(V.x,V.y,V.z,V.w).multiplyInPlace(I);if("Vector4"===m||"Quaternion"===C)return V.multiply(I);if((0,O.f)(m,C)){var l;if(null!==(l=this.config)&&void 0!==l&&l.useMatrixPerComponent){const C=V.m;for(let V=0;V<C.length;V++)C[V]*=I.m[V];return"Matrix2D"===m?new X.d(C):"Matrix3D"===m?new X.f(C):j.b.Ik(C)}return I.multiply(V)}var s;if(null!==(s=this.config)&&void 0!==s&&s.preventIntegerFloatArithmetic&&typeof V!==typeof I)throw new Error("Cannot add different types of numbers.");return(0,O.l)(V)*(0,O.l)(I)}}(0,C.h)("FlowGraphMultiplyBlock",t);class D extends s.d{constructor(V){super((0,l.I)(null===V||void 0===V?void 0:V.type),(0,l.I)(null===V||void 0===V?void 0:V.type),(0,l.I)(null===V||void 0===V?void 0:V.type),((V,I)=>this._polymorphicDivide(V,I)),"FlowGraphDivideBlock",V)}_polymorphicDivide(V,I){const m=(0,O.h)(V),C=(0,O.h)(I);if((0,O.g)(m,C)||(0,O.d)(m,C))return V.divide(I);if("Quaternion"===m||"Quaternion"===C){const m=V.clone();return m.x/=I.x,m.y/=I.y,m.z/=I.z,m.w/=I.w,m}if("Quaternion"===m||"Vector4"===C)return new j.n(V.x,V.y,V.z,V.w).divideInPlace(I);if("Vector4"===m||"Quaternion"===C)return V.divide(I);if((0,O.f)(m,C)){var l;if(null!==(l=this.config)&&void 0!==l&&l.useMatrixPerComponent){const C=V.m;for(let V=0;V<C.length;V++)C[V]/=I.m[V];return"Matrix2D"===m?new X.d(C):"Matrix3D"===m?new X.f(C):j.b.Ik(C)}return V.divide(I)}var s;if(null!==(s=this.config)&&void 0!==s&&s.preventIntegerFloatArithmetic&&typeof V!==typeof I)throw new Error("Cannot add different types of numbers.");return(0,O.l)(V)/(0,O.l)(I)}}(0,C.h)("FlowGraphDivideBlock",D);class b extends k{constructor(V){super(l.r,(V=>this._random(V)),"FlowGraphRandomBlock",V),this.min=this.registerDataInput("min",l.r,(null===V||void 0===V?void 0:V.min)??0),this.max=this.registerDataInput("max",l.r,(null===V||void 0===V?void 0:V.max)??1),null!==V&&void 0!==V&&V.seed&&(this._seed=V.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const V=1e4*Math.sin(this._seed++);return V-Math.floor(V)}return Math.random()}_random(V){const I=this.min.getValue(V),m=this.max.getValue(V);return this._getRandomValue()*(m-I)+I}}(0,C.h)("FlowGraphRandomBlock",b);class T extends k{constructor(V){super(l.r,(()=>Math.E),"FlowGraphEBlock",V)}}(0,C.h)("FlowGraphEBlock",T);class n extends k{constructor(V){super(l.r,(()=>Math.PI),"FlowGraphPIBlock",V)}}(0,C.h)("FlowGraphPIBlock",n);class x extends k{constructor(V){super(l.r,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",V)}}(0,C.h)("FlowGraphInfBlock",x);class S extends k{constructor(V){super(l.r,(()=>Number.NaN),"FlowGraphNaNBlock",V)}}function c(V,I){switch((0,O.h)(V)){case"FlowGraphInteger":return new Y.b(I(V.value));case"Vector2":return new j.k(I(V.x),I(V.y));case"LF":return new j.m(I(V.x),I(V.y),I(V.z));case"Vector4":return new j.n(I(V.x),I(V.y),I(V.z),I(V.w));case"Quaternion":return new j.e(I(V.x),I(V.y),I(V.z),I(V.w));case"Matrix":return j.b.Ik(V.m.map(I));case"Matrix2D":return new X.d(V.m.map(I));case"Matrix3D":return new X.f(V.m.map(I));default:return I(V)}}(0,C.h)("FlowGraphNaNBlock",S);class H extends E.d{constructor(V){super(l.r,l.r,(V=>this._polymorphicAbs(V)),"FlowGraphAbsBlock",V)}_polymorphicAbs(V){return c(V,Math.abs)}}(0,C.h)("FlowGraphAbsBlock",H);class y extends E.d{constructor(V){super(l.r,l.r,(V=>this._polymorphicSign(V)),"FlowGraphSignBlock",V)}_polymorphicSign(V){return c(V,Math.sign)}}(0,C.h)("FlowGraphSignBlock",y);class z extends E.d{constructor(V){super(l.r,l.r,(V=>this._polymorphicTrunc(V)),"FlowGraphTruncBlock",V)}_polymorphicTrunc(V){return c(V,Math.trunc)}}(0,C.h)("FlowGraphTruncBlock",z);class Z extends E.d{constructor(V){super(l.r,l.r,(V=>this._polymorphicFloor(V)),"FlowGraphFloorBlock",V)}_polymorphicFloor(V){return c(V,Math.floor)}}(0,C.h)("FlowGraphFloorBlock",Z);class B extends E.d{constructor(V){super(l.b,l.b,(V=>this._polymorphicCeiling(V)),"FlowGraphCeilBlock",V)}_polymorphicCeiling(V){return c(V,Math.ceil)}}(0,C.h)("FlowGraphCeilBlock",B);class W extends E.d{constructor(V){super(l.b,l.b,(V=>this._polymorphicRound(V)),"FlowGraphRoundBlock",V)}_polymorphicRound(V){return c(V,(V=>{var I;return V<0&&null!==(I=this.config)&&void 0!==I&&I.roundHalfAwayFromZero?-Math.round(-V):Math.round(V)}))}}(0,C.h)("FlowGraphRoundBlock",W);class Q extends E.d{constructor(V){super(l.b,l.b,(V=>this._polymorphicFraction(V)),"FlowGraphFractBlock",V)}_polymorphicFraction(V){return c(V,(V=>V-Math.floor(V)))}}(0,C.h)("FlowGraphFractBlock",Q);class G extends E.d{constructor(V){super(l.b,l.b,(V=>this._polymorphicNeg(V)),"FlowGraphNegationBlock",V)}_polymorphicNeg(V){return c(V,(V=>-V))}}function r(V,I,m){switch((0,O.h)(V)){case"FlowGraphInteger":return new Y.b(m(V.value,I.value));case"Vector2":return new j.k(m(V.x,I.x),m(V.y,I.y));case"LF":return new j.m(m(V.x,I.x),m(V.y,I.y),m(V.z,I.z));case"Vector4":return new j.n(m(V.x,I.x),m(V.y,I.y),m(V.z,I.z),m(V.w,I.w));case"Quaternion":return new j.e(m(V.x,I.x),m(V.y,I.y),m(V.z,I.z),m(V.w,I.w));case"Matrix":return j.b.Ik(V.m.map(((V,C)=>m(V,I.m[C]))));case"Matrix2D":return new X.d(V.m.map(((V,C)=>m(V,I.m[C]))));case"Matrix3D":return new X.f(V.m.map(((V,C)=>m(V,I.m[C]))));default:return m((0,O.l)(V),(0,O.l)(I))}}(0,C.h)("FlowGraphNegationBlock",G);class g extends s.d{constructor(V){super(l.b,l.b,l.b,((V,I)=>this._polymorphicRemainder(V,I)),"FlowGraphModuloBlock",V)}_polymorphicRemainder(V,I){return r(V,I,((V,I)=>V%I))}}(0,C.h)("FlowGraphModuloBlock",g);class h extends s.d{constructor(V){super(l.b,l.b,l.b,((V,I)=>this._polymorphicMin(V,I)),"FlowGraphMinBlock",V)}_polymorphicMin(V,I){return r(V,I,Math.min)}}(0,C.h)("FlowGraphMinBlock",h);class d extends s.d{constructor(V){super(l.b,l.b,l.b,((V,I)=>this._polymorphicMax(V,I)),"FlowGraphMaxBlock",V)}_polymorphicMax(V,I){return r(V,I,Math.max)}}function R(V,I,m){return Math.min(Math.max(V,Math.min(I,m)),Math.max(I,m))}function i(V,I,m,C){switch((0,O.h)(V)){case"FlowGraphInteger":return new Y.b(C(V.value,I.value,m.value));case"Vector2":return new j.k(C(V.x,I.x,m.x),C(V.y,I.y,m.y));case"LF":return new j.m(C(V.x,I.x,m.x),C(V.y,I.y,m.y),C(V.z,I.z,m.z));case"Vector4":return new j.n(C(V.x,I.x,m.x),C(V.y,I.y,m.y),C(V.z,I.z,m.z),C(V.w,I.w,m.w));case"Quaternion":return new j.e(C(V.x,I.x,m.x),C(V.y,I.y,m.y),C(V.z,I.z,m.z),C(V.w,I.w,m.w));case"Matrix":return j.b.Ik(V.m.map(((V,l)=>C(V,I.m[l],m.m[l]))));case"Matrix2D":return new X.d(V.m.map(((V,l)=>C(V,I.m[l],m.m[l]))));case"Matrix3D":return new X.f(V.m.map(((V,l)=>C(V,I.m[l],m.m[l]))));default:return C((0,O.l)(V),(0,O.l)(I),(0,O.l)(m))}}(0,C.h)("FlowGraphMaxBlock",d);class q extends K{constructor(V){super(l.b,l.b,l.b,l.b,((V,I,m)=>this._polymorphicClamp(V,I,m)),"FlowGraphClampBlock",V)}_polymorphicClamp(V,I,m){return i(V,I,m,R)}}function P(V){return Math.min(Math.max(V,0),1)}(0,C.h)("FlowGraphClampBlock",q);class u extends E.d{constructor(V){super(l.b,l.b,(V=>this._polymorphicSaturate(V)),"FlowGraphSaturateBlock",V)}_polymorphicSaturate(V){return c(V,P)}}function o(V,I,m){return(1-m)*V+m*I}(0,C.h)("FlowGraphSaturateBlock",u);class p extends K{constructor(V){super(l.b,l.b,l.b,l.b,((V,I,m)=>this._polymorphicInterpolate(V,I,m)),"FlowGraphMathInterpolationBlock",V)}_polymorphicInterpolate(V,I,m){return i(V,I,m,o)}}(0,C.h)("FlowGraphMathInterpolationBlock",p);class M extends s.d{constructor(V){super(l.b,l.b,l.d,((V,I)=>this._polymorphicEq(V,I)),"FlowGraphEqualityBlock",V)}_polymorphicEq(V,I){const m=(0,O.h)(V),C=(0,O.h)(I);return typeof V===typeof I&&((0,O.g)(m,C)||(0,O.f)(m,C)||(0,O.d)(m,C)?V.equals(I):V===I)}}function f(V,I,m){if((0,O.p)(V)&&(0,O.p)(I))return m((0,O.l)(V),(0,O.l)(I));throw new Error(`Cannot compare ${V} and ${I}`)}(0,C.h)("FlowGraphEqualityBlock",M);class w extends s.d{constructor(V){super(l.b,l.b,l.d,((V,I)=>this._polymorphicLessThan(V,I)),"FlowGraphLessThanBlock",V)}_polymorphicLessThan(V,I){return f(V,I,((V,I)=>V<I))}}(0,C.h)("FlowGraphLessThanBlock",w);class A extends s.d{constructor(V){super(l.b,l.b,l.d,((V,I)=>this._polymorphicLessThanOrEqual(V,I)),"FlowGraphLessThanOrEqualBlock",V)}_polymorphicLessThanOrEqual(V,I){return f(V,I,((V,I)=>V<=I))}}(0,C.h)("FlowGraphLessThanOrEqualBlock",A);class J extends s.d{constructor(V){super(l.b,l.b,l.d,((V,I)=>this._polymorphicGreaterThan(V,I)),"FlowGraphGreaterThanBlock",V)}_polymorphicGreaterThan(V,I){return f(V,I,((V,I)=>V>I))}}(0,C.h)("FlowGraphGreaterThanBlock",J);class U extends s.d{constructor(V){super(l.b,l.b,l.d,((V,I)=>this._polymorphicGreaterThanOrEqual(V,I)),"FlowGraphGreaterThanOrEqualBlock",V)}_polymorphicGreaterThanOrEqual(V,I){return f(V,I,((V,I)=>V>=I))}}(0,C.h)("FlowGraphGreaterThanOrEqualBlock",U);class e extends E.d{constructor(V){super(l.b,l.d,(V=>this._polymorphicIsNan(V)),"FlowGraphIsNaNBlock",V)}_polymorphicIsNan(V){if((0,O.p)(V,!0))return isNaN((0,O.l)(V));throw new Error(`Cannot get NaN of ${V}`)}}(0,C.h)("FlowGraphIsNaNBlock",e);class a extends E.d{constructor(V){super(l.b,l.d,(V=>this._polymorphicIsInf(V)),"FlowGraphIsInfBlock",V)}_polymorphicIsInf(V){if((0,O.p)(V))return!isFinite((0,O.l)(V));throw new Error(`Cannot get isInf of ${V}`)}}(0,C.h)("FlowGraphIsInfBlock",a);class L extends E.d{constructor(V){super(l.b,l.b,(V=>this._polymorphicDegToRad(V)),"FlowGraphDegToRadBlock",V)}_degToRad(V){return V*Math.PI/180}_polymorphicDegToRad(V){return c(V,this._degToRad)}}(0,C.h)("FlowGraphDegToRadBlock",L);class VV extends E.d{constructor(V){super(l.b,l.b,(V=>this._polymorphicRadToDeg(V)),"FlowGraphRadToDegBlock",V)}_radToDeg(V){return 180*V/Math.PI}_polymorphicRadToDeg(V){return c(V,this._radToDeg)}}(0,C.h)("FlowGraphRadToDegBlock",VV);class IV extends E.d{constructor(V){super(l.r,l.r,(V=>this._polymorphicSin(V)),"FlowGraphSinBlock",V)}_polymorphicSin(V){return c(V,Math.sin)}}class mV extends E.d{constructor(V){super(l.r,l.r,(V=>this._polymorphicCos(V)),"FlowGraphCosBlock",V)}_polymorphicCos(V){return c(V,Math.cos)}}class CV extends E.d{constructor(V){super(l.r,l.r,(V=>this._polymorphicTan(V)),"FlowGraphTanBlock",V)}_polymorphicTan(V){return c(V,Math.tan)}}class lV extends E.d{constructor(V){super(l.r,l.r,(V=>this._polymorphicAsin(V)),"FlowGraphASinBlock",V)}_polymorphicAsin(V){return c(V,Math.asin)}}(0,C.h)("FlowGraphASinBlock",lV);class sV extends E.d{constructor(V){super(l.r,l.r,(V=>this._polymorphicAcos(V)),"FlowGraphACosBlock",V)}_polymorphicAcos(V){return c(V,Math.acos)}}(0,C.h)("FlowGraphACosBlock",sV);class FV extends E.d{constructor(V){super(l.r,l.r,(V=>this._polymorphicAtan(V)),"FlowGraphATanBlock",V)}_polymorphicAtan(V){return c(V,Math.atan)}}(0,C.h)("FlowGraphATanBlock",FV);class kV extends s.d{constructor(V){super(l.b,l.b,l.b,((V,I)=>this._polymorphicAtan2(V,I)),"FlowGraphATan2Block",V)}_polymorphicAtan2(V,I){return r(V,I,Math.atan2)}}(0,C.h)("FlowGraphATan2Block",kV);class jV extends E.d{constructor(V){super(l.b,l.b,(V=>this._polymorphicSinh(V)),"FlowGraphSinhBlock",V)}_polymorphicSinh(V){return c(V,Math.sinh)}}(0,C.h)("FlowGraphSinhBlock",jV);class EV extends E.d{constructor(V){super(l.b,l.b,(V=>this._polymorphicCosh(V)),"FlowGraphCoshBlock",V)}_polymorphicCosh(V){return c(V,Math.cosh)}}(0,C.h)("FlowGraphCoshBlock",EV);class KV extends E.d{constructor(V){super(l.b,l.b,(V=>this._polymorphicTanh(V)),"FlowGraphTanhBlock",V)}_polymorphicTanh(V){return c(V,Math.tanh)}}(0,C.h)("FlowGraphTanhBlock",KV);class YV extends E.d{constructor(V){super(l.b,l.r,(V=>this._polymorphicAsinh(V)),"FlowGraphASinhBlock",V)}_polymorphicAsinh(V){return c(V,Math.asinh)}}(0,C.h)("FlowGraphASinhBlock",YV);class XV extends E.d{constructor(V){super(l.b,l.r,(V=>this._polymorphicAcosh(V)),"FlowGraphACoshBlock",V)}_polymorphicAcosh(V){return c(V,Math.acosh)}}(0,C.h)("FlowGraphACoshBlock",XV);class OV extends E.d{constructor(V){super(l.b,l.r,(V=>this._polymorphicAtanh(V)),"FlowGraphATanhBlock",V)}_polymorphicAtanh(V){return c(V,Math.atanh)}}(0,C.h)("FlowGraphATanhBlock",OV);class vV extends E.d{constructor(V){super(l.b,l.r,(V=>this._polymorphicExp(V)),"FlowGraphExponentialBlock",V)}_polymorphicExp(V){return c(V,Math.exp)}}(0,C.h)("FlowGraphExponentialBlock",vV);class NV extends E.d{constructor(V){super(l.b,l.r,(V=>this._polymorphicLog(V)),"FlowGraphLogBlock",V)}_polymorphicLog(V){return c(V,Math.log)}}(0,C.h)("FlowGraphLogBlock",NV);class tV extends E.d{constructor(V){super(l.b,l.r,(V=>this._polymorphicLog2(V)),"FlowGraphLog2Block",V)}_polymorphicLog2(V){return c(V,Math.log2)}}(0,C.h)("FlowGraphLog2Block",tV);class DV extends E.d{constructor(V){super(l.b,l.r,(V=>this._polymorphicLog10(V)),"FlowGraphLog10Block",V)}_polymorphicLog10(V){return c(V,Math.log10)}}(0,C.h)("FlowGraphLog10Block",DV);class bV extends E.d{constructor(V){super(l.b,l.r,(V=>this._polymorphicSqrt(V)),"FlowGraphSquareRootBlock",V)}_polymorphicSqrt(V){return c(V,Math.sqrt)}}(0,C.h)("FlowGraphSquareRootBlock",bV);class TV extends E.d{constructor(V){super(l.b,l.r,(V=>this._polymorphicCubeRoot(V)),"FlowGraphCubeRootBlock",V)}_polymorphicCubeRoot(V){return c(V,Math.cbrt)}}(0,C.h)("FlowGraphCubeRootBlock",TV);class nV extends s.d{constructor(V){super(l.b,l.r,l.r,((V,I)=>this._polymorphicPow(V,I)),"FlowGraphPowerBlock",V)}_polymorphicPow(V,I){return r(V,I,Math.pow)}}(0,C.h)("FlowGraphPowerBlock",nV);class xV extends E.d{constructor(V){super((0,l.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,l.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(V=>"boolean"===typeof V?!V:"number"===typeof V?~V:new Y.b(~V.value)),"FlowGraphBitwiseNotBlock",V)}}(0,C.h)("FlowGraphBitwiseNotBlock",xV);class SV extends s.d{constructor(V){super((0,l.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,l.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,l.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),((V,I)=>{if("boolean"===typeof V&&"boolean"===typeof I)return V&&I;if("number"===typeof V&&"number"===typeof I)return V&I;if("object"===typeof V&&"object"===typeof I)return new Y.b(V.value&I.value);throw new Error(`Cannot perform bitwise AND on ${V} and ${I}`)}),"FlowGraphBitwiseAndBlock",V)}}(0,C.h)("FlowGraphBitwiseAndBlock",SV);class cV extends s.d{constructor(V){super((0,l.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,l.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,l.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),((V,I)=>{if("boolean"===typeof V&&"boolean"===typeof I)return V||I;if("number"===typeof V&&"number"===typeof I)return V|I;if("object"===typeof V&&"object"===typeof I)return new Y.b(V.value|I.value);throw new Error(`Cannot perform bitwise OR on ${V} and ${I}`)}),"FlowGraphBitwiseOrBlock",V)}}(0,C.h)("FlowGraphBitwiseOrBlock",cV);class HV extends s.d{constructor(V){super((0,l.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,l.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),(0,l.I)((null===V||void 0===V?void 0:V.valueType)||"FlowGraphInteger"),((V,I)=>{if("boolean"===typeof V&&"boolean"===typeof I)return V!==I;if("number"===typeof V&&"number"===typeof I)return V^I;if("object"===typeof V&&"object"===typeof I)return new Y.b(V.value^I.value);throw new Error(`Cannot perform bitwise XOR on ${V} and ${I}`)}),"FlowGraphBitwiseXorBlock",V)}}(0,C.h)("FlowGraphBitwiseXorBlock",HV);class yV extends s.d{constructor(V){super(l.h,l.h,l.h,((V,I)=>new Y.b(V.value<<I.value)),"FlowGraphBitwiseLeftShiftBlock",V)}}(0,C.h)("FlowGraphBitwiseLeftShiftBlock",yV);class zV extends s.d{constructor(V){super(l.h,l.h,l.h,((V,I)=>new Y.b(V.value>>I.value)),"FlowGraphBitwiseRightShiftBlock",V)}}(0,C.h)("FlowGraphBitwiseRightShiftBlock",zV);class ZV extends E.d{constructor(V){super(l.h,l.h,(V=>new Y.b(Math.clz32(V.value))),"FlowGraphLeadingZerosBlock",V)}}(0,C.h)("FlowGraphLeadingZerosBlock",ZV);class BV extends E.d{constructor(V){super(l.h,l.h,(V=>new Y.b(V.value?31-Math.clz32(V.value&-V.value):32)),"FlowGraphTrailingZerosBlock",V)}}(0,C.h)("FlowGraphTrailingZerosBlock",BV);class WV extends E.d{constructor(V){super(l.h,l.h,(V=>new Y.b(function(V){let I=0;for(;V;)I+=1&V,V>>=1;return I}(V.value))),"FlowGraphOneBitsCounterBlock",V)}}(0,C.h)("FlowGraphOneBitsCounterBlock",WV)},14422:(V,I,m)=>{m.d(I,{d:()=>l});var C=m(14427);class l extends C.e{constructor(V,I,m,C,l,s){super(m,s),this._operation=C,this._className=l,this.a=this.registerDataInput("a",V),this.b=this.registerDataInput("b",I)}_doOperation(V){const I=this.a.getValue(V),m=this.b.getValue(V);return this._operation(I,m)}getClassName(){return this._className}}},14427:(V,I,m)=>{m.d(I,{e:()=>k});var C=m(12921),l=m(12899);const s="cachedOperationValue",F="cachedExecutionId";class k extends C.e{constructor(V,I){super(I),this.value=this.registerDataOutput("value",V),this.isValid=this.registerDataOutput("isValid",l.d)}_updateOutputs(V){const I=V._getExecutionVariable(this,F,-1),m=V._getExecutionVariable(this,s,null);if(void 0!==m&&null!==m&&I===V.executionId)this.isValid.setValue(!0,V),this.value.setValue(m,V);else try{const I=this._doOperation(V);if(void 0===I||null===I)return void this.isValid.setValue(!1,V);V._setExecutionVariable(this,s,I),V._setExecutionVariable(this,F,V.executionId),this.value.setValue(I,V),this.isValid.setValue(!0,V)}catch(C){this.isValid.setValue(!1,V)}}}},14429:(V,I,m)=>{m.d(I,{d:()=>l});var C=m(14427);class l extends C.e{constructor(V,I,m,C,l){super(I,l),this._operation=m,this._className=C,this.a=this.registerDataInput("a",V)}_doOperation(V){return this._operation(this.a.getValue(V))}getClassName(){return this._className}}}}]);