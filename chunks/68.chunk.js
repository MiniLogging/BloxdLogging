"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[68],{14201:(x,O,Q)=>{Q.r(O),Q.d(O,{FlowGraphAbsBlock:()=>k,FlowGraphAcosBlock:()=>nx,FlowGraphAcoshBlock:()=>hx,FlowGraphAddBlock:()=>a,FlowGraphAsinBlock:()=>Zx,FlowGraphAsinhBlock:()=>Lx,FlowGraphAtan2Block:()=>ox,FlowGraphAtanBlock:()=>Vx,FlowGraphAtanhBlock:()=>Nx,FlowGraphBitwiseAndBlock:()=>qx,FlowGraphBitwiseLeftShiftBlock:()=>Jx,FlowGraphBitwiseNotBlock:()=>sx,FlowGraphBitwiseOrBlock:()=>Gx,FlowGraphBitwiseRightShiftBlock:()=>tx,FlowGraphBitwiseXorBlock:()=>kx,FlowGraphCeilBlock:()=>d,FlowGraphClampBlock:()=>y,FlowGraphCosBlock:()=>Qx,FlowGraphCoshBlock:()=>Cx,FlowGraphCubeRootBlock:()=>vx,FlowGraphDegToRadBlock:()=>w,FlowGraphDivideBlock:()=>Y,FlowGraphEBlock:()=>v,FlowGraphEqualityBlock:()=>e,FlowGraphExpBlock:()=>ax,FlowGraphFloorBlock:()=>c,FlowGraphFractionBlock:()=>A,FlowGraphGreaterThanBlock:()=>S,FlowGraphGreaterThanOrEqualBlock:()=>p,FlowGraphInfBlock:()=>s,FlowGraphIsInfinityBlock:()=>m,FlowGraphIsNanBlock:()=>P,FlowGraphLeadingZerosBlock:()=>cx,FlowGraphLessThanBlock:()=>i,FlowGraphLessThanOrEqualBlock:()=>H,FlowGraphLog10Block:()=>Yx,FlowGraphLog2Block:()=>Mx,FlowGraphLogBlock:()=>Kx,FlowGraphMathInterpolationBlock:()=>T,FlowGraphMaxBlock:()=>b,FlowGraphMinBlock:()=>F,FlowGraphModuloBlock:()=>z,FlowGraphMultiplyBlock:()=>M,FlowGraphNaNBlock:()=>q,FlowGraphNegationBlock:()=>f,FlowGraphOneBitsCounterBlock:()=>ux,FlowGraphPiBlock:()=>R,FlowGraphPowerBlock:()=>Rx,FlowGraphRadToDegBlock:()=>xx,FlowGraphRandomBlock:()=>g,FlowGraphRoundBlock:()=>u,FlowGraphSaturateBlock:()=>r,FlowGraphSignBlock:()=>J,FlowGraphSinBlock:()=>Ox,FlowGraphSinhBlock:()=>lx,FlowGraphSquareRootBlock:()=>gx,FlowGraphSubtractBlock:()=>K,FlowGraphTanBlock:()=>Xx,FlowGraphTanhBlock:()=>Ux,FlowGraphTrailingZerosBlock:()=>dx,FlowGraphTruncBlock:()=>t});var X=Q(10866),Z=Q(12707),n=Q(14205),V=Q(14213);class o extends V.d{constructor(x,O,Q,X){super(x,X),this._operation=O,this._className=Q}_doOperation(x){return this._operation(x)}getClassName(){return this._className}}var l=Q(10849),C=Q(14216);class U extends V.d{constructor(x,O,Q,X,Z,n,V){super(X,V),this._operation=Z,this._className=n,this.a=this.registerDataInput("a",x),this.b=this.registerDataInput("b",O),this.c=this.registerDataInput("c",Q)}_doOperation(x){return this._operation(this.a.getValue(x),this.b.getValue(x),this.c.getValue(x))}getClassName(){return this._className}}var L=Q(12703),h=Q(12712),N=Q(12730);class a extends n.e{constructor(x){super((0,Z.G)(null===x||void 0===x?void 0:x.type),(0,Z.G)(null===x||void 0===x?void 0:x.type),(0,Z.G)(null===x||void 0===x?void 0:x.type),((x,O)=>this._polymorphicAdd(x,O)),"FlowGraphAddBlock",x)}_polymorphicAdd(x,O){const Q=(0,N.o)(x),X=(0,N.o)(O);if((0,N.k)(Q,X)||(0,N.g)(Q,X)||(0,N.d)(Q,X))return x.add(O);if("Quaternion"===Q||"Vector4"===X)return new l.o(x.x,x.y,x.z,x.w).addInPlace(O);if("Vector4"===Q||"Quaternion"===X)return x.add(O);var Z;if(null!==(Z=this.config)&&void 0!==Z&&Z.preventIntegerFloatArithmetic&&typeof x!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,N.u)(x)+(0,N.u)(O)}}(0,X.d)("FlowGraphAddBlock",a);class K extends n.e{constructor(x){super((0,Z.G)(null===x||void 0===x?void 0:x.type),(0,Z.G)(null===x||void 0===x?void 0:x.type),(0,Z.G)(null===x||void 0===x?void 0:x.type),((x,O)=>this._polymorphicSubtract(x,O)),"FlowGraphSubtractBlock",x)}_polymorphicSubtract(x,O){const Q=(0,N.o)(x),X=(0,N.o)(O);if((0,N.k)(Q,X)||(0,N.d)(Q,X)||(0,N.g)(Q,X))return x.hQ(O);if("Quaternion"===Q||"Vector4"===X)return new l.o(x.x,x.y,x.z,x.w).EU(O);if("Vector4"===Q||"Quaternion"===X)return x.hQ(O);var Z;if(null!==(Z=this.config)&&void 0!==Z&&Z.preventIntegerFloatArithmetic&&typeof x!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,N.u)(x)-(0,N.u)(O)}}(0,X.d)("FlowGraphSubtractBlock",K);class M extends n.e{constructor(x){super((0,Z.G)(null===x||void 0===x?void 0:x.type),(0,Z.G)(null===x||void 0===x?void 0:x.type),(0,Z.G)(null===x||void 0===x?void 0:x.type),((x,O)=>this._polymorphicMultiply(x,O)),"FlowGraphMultiplyBlock",x)}_polymorphicMultiply(x,O){const Q=(0,N.o)(x),X=(0,N.o)(O);if((0,N.k)(Q,X)||(0,N.d)(Q,X))return x.multiply(O);if("Quaternion"===Q||"Vector4"===X)return new l.o(x.x,x.y,x.z,x.w).multiplyInPlace(O);if("Vector4"===Q||"Quaternion"===X)return x.multiply(O);if((0,N.g)(Q,X)){var Z;if(null!==(Z=this.config)&&void 0!==Z&&Z.useMatrixPerComponent){const X=x.m;for(let x=0;x<X.length;x++)X[x]*=O.m[x];return"Matrix2D"===Q?new h.e(X):"Matrix3D"===Q?new h.h(X):l.c.Xo(X)}return O.multiply(x)}var n;if(null!==(n=this.config)&&void 0!==n&&n.preventIntegerFloatArithmetic&&typeof x!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,N.u)(x)*(0,N.u)(O)}}(0,X.d)("FlowGraphMultiplyBlock",M);class Y extends n.e{constructor(x){super((0,Z.G)(null===x||void 0===x?void 0:x.type),(0,Z.G)(null===x||void 0===x?void 0:x.type),(0,Z.G)(null===x||void 0===x?void 0:x.type),((x,O)=>this._polymorphicDivide(x,O)),"FlowGraphDivideBlock",x)}_polymorphicDivide(x,O){const Q=(0,N.o)(x),X=(0,N.o)(O);if((0,N.k)(Q,X)||(0,N.d)(Q,X))return x.divide(O);if("Quaternion"===Q||"Quaternion"===X){const Q=x.clone();return Q.x/=O.x,Q.y/=O.y,Q.z/=O.z,Q.w/=O.w,Q}if("Quaternion"===Q||"Vector4"===X)return new l.o(x.x,x.y,x.z,x.w).divideInPlace(O);if("Vector4"===Q||"Quaternion"===X)return x.divide(O);if((0,N.g)(Q,X)){var Z;if(null!==(Z=this.config)&&void 0!==Z&&Z.useMatrixPerComponent){const X=x.m;for(let x=0;x<X.length;x++)X[x]/=O.m[x];return"Matrix2D"===Q?new h.e(X):"Matrix3D"===Q?new h.h(X):l.c.Xo(X)}return x.divide(O)}var n;if(null!==(n=this.config)&&void 0!==n&&n.preventIntegerFloatArithmetic&&typeof x!==typeof O)throw new Error("Cannot add different types of numbers.");return(0,N.u)(x)/(0,N.u)(O)}}(0,X.d)("FlowGraphDivideBlock",Y);class g extends o{constructor(x){super(Z.q,(x=>this._random(x)),"FlowGraphRandomBlock",x),this.min=this.registerDataInput("min",Z.q,(null===x||void 0===x?void 0:x.min)??0),this.max=this.registerDataInput("max",Z.q,(null===x||void 0===x?void 0:x.max)??1),null!==x&&void 0!==x&&x.seed&&(this._seed=x.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const x=1e4*Math.sin(this._seed++);return x-Math.floor(x)}return Math.random()}_random(x){const O=this.min.getValue(x),Q=this.max.getValue(x);return this._getRandomValue()*(Q-O)+O}}(0,X.d)("FlowGraphRandomBlock",g);class v extends o{constructor(x){super(Z.q,(()=>Math.E),"FlowGraphEBlock",x)}}(0,X.d)("FlowGraphEBlock",v);class R extends o{constructor(x){super(Z.q,(()=>Math.PI),"FlowGraphPIBlock",x)}}(0,X.d)("FlowGraphPIBlock",R);class s extends o{constructor(x){super(Z.q,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",x)}}(0,X.d)("FlowGraphInfBlock",s);class q extends o{constructor(x){super(Z.q,(()=>Number.NaN),"FlowGraphNaNBlock",x)}}function G(x,O){switch((0,N.o)(x)){case"FlowGraphInteger":return new L.b(O(x.value));case"Vector2":return new l.l(O(x.x),O(x.y));case"Oo":return new l.n(O(x.x),O(x.y),O(x.z));case"Vector4":return new l.o(O(x.x),O(x.y),O(x.z),O(x.w));case"Quaternion":return new l.g(O(x.x),O(x.y),O(x.z),O(x.w));case"Matrix":return l.c.Xo(x.m.map(O));case"Matrix2D":return new h.e(x.m.map(O));case"Matrix3D":return new h.h(x.m.map(O));default:return O(x)}}(0,X.d)("FlowGraphNaNBlock",q);class k extends C.e{constructor(x){super(Z.q,Z.q,(x=>this._polymorphicAbs(x)),"FlowGraphAbsBlock",x)}_polymorphicAbs(x){return G(x,Math.abs)}}(0,X.d)("FlowGraphAbsBlock",k);class J extends C.e{constructor(x){super(Z.q,Z.q,(x=>this._polymorphicSign(x)),"FlowGraphSignBlock",x)}_polymorphicSign(x){return G(x,Math.sign)}}(0,X.d)("FlowGraphSignBlock",J);class t extends C.e{constructor(x){super(Z.q,Z.q,(x=>this._polymorphicTrunc(x)),"FlowGraphTruncBlock",x)}_polymorphicTrunc(x){return G(x,Math.trunc)}}(0,X.d)("FlowGraphTruncBlock",t);class c extends C.e{constructor(x){super(Z.q,Z.q,(x=>this._polymorphicFloor(x)),"FlowGraphFloorBlock",x)}_polymorphicFloor(x){return G(x,Math.floor)}}(0,X.d)("FlowGraphFloorBlock",c);class d extends C.e{constructor(x){super(Z.d,Z.d,(x=>this._polymorphicCeiling(x)),"FlowGraphCeilBlock",x)}_polymorphicCeiling(x){return G(x,Math.ceil)}}(0,X.d)("FlowGraphCeilBlock",d);class u extends C.e{constructor(x){super(Z.d,Z.d,(x=>this._polymorphicRound(x)),"FlowGraphRoundBlock",x)}_polymorphicRound(x){return G(x,(x=>{var O;return x<0&&null!==(O=this.config)&&void 0!==O&&O.roundHalfAwayFromZero?-Math.round(-x):Math.round(x)}))}}(0,X.d)("FlowGraphRoundBlock",u);class A extends C.e{constructor(x){super(Z.d,Z.d,(x=>this._polymorphicFraction(x)),"FlowGraphFractBlock",x)}_polymorphicFraction(x){return G(x,(x=>x-Math.floor(x)))}}(0,X.d)("FlowGraphFractBlock",A);class f extends C.e{constructor(x){super(Z.d,Z.d,(x=>this._polymorphicNeg(x)),"FlowGraphNegationBlock",x)}_polymorphicNeg(x){return G(x,(x=>-x))}}function E(x,O,Q){switch((0,N.o)(x)){case"FlowGraphInteger":return new L.b(Q(x.value,O.value));case"Vector2":return new l.l(Q(x.x,O.x),Q(x.y,O.y));case"Oo":return new l.n(Q(x.x,O.x),Q(x.y,O.y),Q(x.z,O.z));case"Vector4":return new l.o(Q(x.x,O.x),Q(x.y,O.y),Q(x.z,O.z),Q(x.w,O.w));case"Quaternion":return new l.g(Q(x.x,O.x),Q(x.y,O.y),Q(x.z,O.z),Q(x.w,O.w));case"Matrix":return l.c.Xo(x.m.map(((x,X)=>Q(x,O.m[X]))));case"Matrix2D":return new h.e(x.m.map(((x,X)=>Q(x,O.m[X]))));case"Matrix3D":return new h.h(x.m.map(((x,X)=>Q(x,O.m[X]))));default:return Q((0,N.u)(x),(0,N.u)(O))}}(0,X.d)("FlowGraphNegationBlock",f);class z extends n.e{constructor(x){super(Z.d,Z.d,Z.d,((x,O)=>this._polymorphicRemainder(x,O)),"FlowGraphModuloBlock",x)}_polymorphicRemainder(x,O){return E(x,O,((x,O)=>x%O))}}(0,X.d)("FlowGraphModuloBlock",z);class F extends n.e{constructor(x){super(Z.d,Z.d,Z.d,((x,O)=>this._polymorphicMin(x,O)),"FlowGraphMinBlock",x)}_polymorphicMin(x,O){return E(x,O,Math.min)}}(0,X.d)("FlowGraphMinBlock",F);class b extends n.e{constructor(x){super(Z.d,Z.d,Z.d,((x,O)=>this._polymorphicMax(x,O)),"FlowGraphMaxBlock",x)}_polymorphicMax(x,O){return E(x,O,Math.max)}}function D(x,O,Q){return Math.min(Math.max(x,Math.min(O,Q)),Math.max(O,Q))}function W(x,O,Q,X){switch((0,N.o)(x)){case"FlowGraphInteger":return new L.b(X(x.value,O.value,Q.value));case"Vector2":return new l.l(X(x.x,O.x,Q.x),X(x.y,O.y,Q.y));case"Oo":return new l.n(X(x.x,O.x,Q.x),X(x.y,O.y,Q.y),X(x.z,O.z,Q.z));case"Vector4":return new l.o(X(x.x,O.x,Q.x),X(x.y,O.y,Q.y),X(x.z,O.z,Q.z),X(x.w,O.w,Q.w));case"Quaternion":return new l.g(X(x.x,O.x,Q.x),X(x.y,O.y,Q.y),X(x.z,O.z,Q.z),X(x.w,O.w,Q.w));case"Matrix":return l.c.Xo(x.m.map(((x,Z)=>X(x,O.m[Z],Q.m[Z]))));case"Matrix2D":return new h.e(x.m.map(((x,Z)=>X(x,O.m[Z],Q.m[Z]))));case"Matrix3D":return new h.h(x.m.map(((x,Z)=>X(x,O.m[Z],Q.m[Z]))));default:return X((0,N.u)(x),(0,N.u)(O),(0,N.u)(Q))}}(0,X.d)("FlowGraphMaxBlock",b);class y extends U{constructor(x){super(Z.d,Z.d,Z.d,Z.d,((x,O,Q)=>this._polymorphicClamp(x,O,Q)),"FlowGraphClampBlock",x)}_polymorphicClamp(x,O,Q){return W(x,O,Q,D)}}function I(x){return Math.min(Math.max(x,0),1)}(0,X.d)("FlowGraphClampBlock",y);class r extends C.e{constructor(x){super(Z.d,Z.d,(x=>this._polymorphicSaturate(x)),"FlowGraphSaturateBlock",x)}_polymorphicSaturate(x){return G(x,I)}}function j(x,O,Q){return(1-Q)*x+Q*O}(0,X.d)("FlowGraphSaturateBlock",r);class T extends U{constructor(x){super(Z.d,Z.d,Z.d,Z.d,((x,O,Q)=>this._polymorphicInterpolate(x,O,Q)),"FlowGraphMathInterpolationBlock",x)}_polymorphicInterpolate(x,O,Q){return W(x,O,Q,j)}}(0,X.d)("FlowGraphMathInterpolationBlock",T);class e extends n.e{constructor(x){super(Z.d,Z.d,Z.g,((x,O)=>this._polymorphicEq(x,O)),"FlowGraphEqualityBlock",x)}_polymorphicEq(x,O){const Q=(0,N.o)(x),X=(0,N.o)(O);return typeof x===typeof O&&((0,N.k)(Q,X)||(0,N.g)(Q,X)||(0,N.d)(Q,X)?x.equals(O):x===O)}}function B(x,O,Q){if((0,N.v)(x)&&(0,N.v)(O))return Q((0,N.u)(x),(0,N.u)(O));throw new Error(`Cannot compare ${x} and ${O}`)}(0,X.d)("FlowGraphEqualityBlock",e);class i extends n.e{constructor(x){super(Z.d,Z.d,Z.g,((x,O)=>this._polymorphicLessThan(x,O)),"FlowGraphLessThanBlock",x)}_polymorphicLessThan(x,O){return B(x,O,((x,O)=>x<O))}}(0,X.d)("FlowGraphLessThanBlock",i);class H extends n.e{constructor(x){super(Z.d,Z.d,Z.g,((x,O)=>this._polymorphicLessThanOrEqual(x,O)),"FlowGraphLessThanOrEqualBlock",x)}_polymorphicLessThanOrEqual(x,O){return B(x,O,((x,O)=>x<=O))}}(0,X.d)("FlowGraphLessThanOrEqualBlock",H);class S extends n.e{constructor(x){super(Z.d,Z.d,Z.g,((x,O)=>this._polymorphicGreaterThan(x,O)),"FlowGraphGreaterThanBlock",x)}_polymorphicGreaterThan(x,O){return B(x,O,((x,O)=>x>O))}}(0,X.d)("FlowGraphGreaterThanBlock",S);class p extends n.e{constructor(x){super(Z.d,Z.d,Z.g,((x,O)=>this._polymorphicGreaterThanOrEqual(x,O)),"FlowGraphGreaterThanOrEqualBlock",x)}_polymorphicGreaterThanOrEqual(x,O){return B(x,O,((x,O)=>x>=O))}}(0,X.d)("FlowGraphGreaterThanOrEqualBlock",p);class P extends C.e{constructor(x){super(Z.d,Z.g,(x=>this._polymorphicIsNan(x)),"FlowGraphIsNaNBlock",x)}_polymorphicIsNan(x){if((0,N.v)(x,!0))return isNaN((0,N.u)(x));throw new Error(`Cannot get NaN of ${x}`)}}(0,X.d)("FlowGraphIsNaNBlock",P);class m extends C.e{constructor(x){super(Z.d,Z.g,(x=>this._polymorphicIsInf(x)),"FlowGraphIsInfBlock",x)}_polymorphicIsInf(x){if((0,N.v)(x))return!isFinite((0,N.u)(x));throw new Error(`Cannot get isInf of ${x}`)}}(0,X.d)("FlowGraphIsInfBlock",m);class w extends C.e{constructor(x){super(Z.d,Z.d,(x=>this._polymorphicDegToRad(x)),"FlowGraphDegToRadBlock",x)}_degToRad(x){return x*Math.PI/180}_polymorphicDegToRad(x){return G(x,this._degToRad)}}(0,X.d)("FlowGraphDegToRadBlock",w);class xx extends C.e{constructor(x){super(Z.d,Z.d,(x=>this._polymorphicRadToDeg(x)),"FlowGraphRadToDegBlock",x)}_radToDeg(x){return 180*x/Math.PI}_polymorphicRadToDeg(x){return G(x,this._radToDeg)}}(0,X.d)("FlowGraphRadToDegBlock",xx);class Ox extends C.e{constructor(x){super(Z.q,Z.q,(x=>this._polymorphicSin(x)),"FlowGraphSinBlock",x)}_polymorphicSin(x){return G(x,Math.sin)}}class Qx extends C.e{constructor(x){super(Z.q,Z.q,(x=>this._polymorphicCos(x)),"FlowGraphCosBlock",x)}_polymorphicCos(x){return G(x,Math.cos)}}class Xx extends C.e{constructor(x){super(Z.q,Z.q,(x=>this._polymorphicTan(x)),"FlowGraphTanBlock",x)}_polymorphicTan(x){return G(x,Math.tan)}}class Zx extends C.e{constructor(x){super(Z.q,Z.q,(x=>this._polymorphicAsin(x)),"FlowGraphASinBlock",x)}_polymorphicAsin(x){return G(x,Math.asin)}}(0,X.d)("FlowGraphASinBlock",Zx);class nx extends C.e{constructor(x){super(Z.q,Z.q,(x=>this._polymorphicAcos(x)),"FlowGraphACosBlock",x)}_polymorphicAcos(x){return G(x,Math.acos)}}(0,X.d)("FlowGraphACosBlock",nx);class Vx extends C.e{constructor(x){super(Z.q,Z.q,(x=>this._polymorphicAtan(x)),"FlowGraphATanBlock",x)}_polymorphicAtan(x){return G(x,Math.atan)}}(0,X.d)("FlowGraphATanBlock",Vx);class ox extends n.e{constructor(x){super(Z.d,Z.d,Z.d,((x,O)=>this._polymorphicAtan2(x,O)),"FlowGraphATan2Block",x)}_polymorphicAtan2(x,O){return E(x,O,Math.atan2)}}(0,X.d)("FlowGraphATan2Block",ox);class lx extends C.e{constructor(x){super(Z.d,Z.d,(x=>this._polymorphicSinh(x)),"FlowGraphSinhBlock",x)}_polymorphicSinh(x){return G(x,Math.sinh)}}(0,X.d)("FlowGraphSinhBlock",lx);class Cx extends C.e{constructor(x){super(Z.d,Z.d,(x=>this._polymorphicCosh(x)),"FlowGraphCoshBlock",x)}_polymorphicCosh(x){return G(x,Math.cosh)}}(0,X.d)("FlowGraphCoshBlock",Cx);class Ux extends C.e{constructor(x){super(Z.d,Z.d,(x=>this._polymorphicTanh(x)),"FlowGraphTanhBlock",x)}_polymorphicTanh(x){return G(x,Math.tanh)}}(0,X.d)("FlowGraphTanhBlock",Ux);class Lx extends C.e{constructor(x){super(Z.d,Z.q,(x=>this._polymorphicAsinh(x)),"FlowGraphASinhBlock",x)}_polymorphicAsinh(x){return G(x,Math.asinh)}}(0,X.d)("FlowGraphASinhBlock",Lx);class hx extends C.e{constructor(x){super(Z.d,Z.q,(x=>this._polymorphicAcosh(x)),"FlowGraphACoshBlock",x)}_polymorphicAcosh(x){return G(x,Math.acosh)}}(0,X.d)("FlowGraphACoshBlock",hx);class Nx extends C.e{constructor(x){super(Z.d,Z.q,(x=>this._polymorphicAtanh(x)),"FlowGraphATanhBlock",x)}_polymorphicAtanh(x){return G(x,Math.atanh)}}(0,X.d)("FlowGraphATanhBlock",Nx);class ax extends C.e{constructor(x){super(Z.d,Z.q,(x=>this._polymorphicExp(x)),"FlowGraphExponentialBlock",x)}_polymorphicExp(x){return G(x,Math.exp)}}(0,X.d)("FlowGraphExponentialBlock",ax);class Kx extends C.e{constructor(x){super(Z.d,Z.q,(x=>this._polymorphicLog(x)),"FlowGraphLogBlock",x)}_polymorphicLog(x){return G(x,Math.log)}}(0,X.d)("FlowGraphLogBlock",Kx);class Mx extends C.e{constructor(x){super(Z.d,Z.q,(x=>this._polymorphicLog2(x)),"FlowGraphLog2Block",x)}_polymorphicLog2(x){return G(x,Math.log2)}}(0,X.d)("FlowGraphLog2Block",Mx);class Yx extends C.e{constructor(x){super(Z.d,Z.q,(x=>this._polymorphicLog10(x)),"FlowGraphLog10Block",x)}_polymorphicLog10(x){return G(x,Math.log10)}}(0,X.d)("FlowGraphLog10Block",Yx);class gx extends C.e{constructor(x){super(Z.d,Z.q,(x=>this._polymorphicSqrt(x)),"FlowGraphSquareRootBlock",x)}_polymorphicSqrt(x){return G(x,Math.sqrt)}}(0,X.d)("FlowGraphSquareRootBlock",gx);class vx extends C.e{constructor(x){super(Z.d,Z.q,(x=>this._polymorphicCubeRoot(x)),"FlowGraphCubeRootBlock",x)}_polymorphicCubeRoot(x){return G(x,Math.cbrt)}}(0,X.d)("FlowGraphCubeRootBlock",vx);class Rx extends n.e{constructor(x){super(Z.d,Z.q,Z.q,((x,O)=>this._polymorphicPow(x,O)),"FlowGraphPowerBlock",x)}_polymorphicPow(x,O){return E(x,O,Math.pow)}}(0,X.d)("FlowGraphPowerBlock",Rx);class sx extends C.e{constructor(x){super((0,Z.G)((null===x||void 0===x?void 0:x.valueType)||"FlowGraphInteger"),(0,Z.G)((null===x||void 0===x?void 0:x.valueType)||"FlowGraphInteger"),(x=>"boolean"===typeof x?!x:"number"===typeof x?~x:new L.b(~x.value)),"FlowGraphBitwiseNotBlock",x)}}(0,X.d)("FlowGraphBitwiseNotBlock",sx);class qx extends n.e{constructor(x){super((0,Z.G)((null===x||void 0===x?void 0:x.valueType)||"FlowGraphInteger"),(0,Z.G)((null===x||void 0===x?void 0:x.valueType)||"FlowGraphInteger"),(0,Z.G)((null===x||void 0===x?void 0:x.valueType)||"FlowGraphInteger"),((x,O)=>{if("boolean"===typeof x&&"boolean"===typeof O)return x&&O;if("number"===typeof x&&"number"===typeof O)return x&O;if("object"===typeof x&&"object"===typeof O)return new L.b(x.value&O.value);throw new Error(`Cannot perform bitwise AND on ${x} and ${O}`)}),"FlowGraphBitwiseAndBlock",x)}}(0,X.d)("FlowGraphBitwiseAndBlock",qx);class Gx extends n.e{constructor(x){super((0,Z.G)((null===x||void 0===x?void 0:x.valueType)||"FlowGraphInteger"),(0,Z.G)((null===x||void 0===x?void 0:x.valueType)||"FlowGraphInteger"),(0,Z.G)((null===x||void 0===x?void 0:x.valueType)||"FlowGraphInteger"),((x,O)=>{if("boolean"===typeof x&&"boolean"===typeof O)return x||O;if("number"===typeof x&&"number"===typeof O)return x|O;if("object"===typeof x&&"object"===typeof O)return new L.b(x.value|O.value);throw new Error(`Cannot perform bitwise OR on ${x} and ${O}`)}),"FlowGraphBitwiseOrBlock",x)}}(0,X.d)("FlowGraphBitwiseOrBlock",Gx);class kx extends n.e{constructor(x){super((0,Z.G)((null===x||void 0===x?void 0:x.valueType)||"FlowGraphInteger"),(0,Z.G)((null===x||void 0===x?void 0:x.valueType)||"FlowGraphInteger"),(0,Z.G)((null===x||void 0===x?void 0:x.valueType)||"FlowGraphInteger"),((x,O)=>{if("boolean"===typeof x&&"boolean"===typeof O)return x!==O;if("number"===typeof x&&"number"===typeof O)return x^O;if("object"===typeof x&&"object"===typeof O)return new L.b(x.value^O.value);throw new Error(`Cannot perform bitwise XOR on ${x} and ${O}`)}),"FlowGraphBitwiseXorBlock",x)}}(0,X.d)("FlowGraphBitwiseXorBlock",kx);class Jx extends n.e{constructor(x){super(Z.i,Z.i,Z.i,((x,O)=>new L.b(x.value<<O.value)),"FlowGraphBitwiseLeftShiftBlock",x)}}(0,X.d)("FlowGraphBitwiseLeftShiftBlock",Jx);class tx extends n.e{constructor(x){super(Z.i,Z.i,Z.i,((x,O)=>new L.b(x.value>>O.value)),"FlowGraphBitwiseRightShiftBlock",x)}}(0,X.d)("FlowGraphBitwiseRightShiftBlock",tx);class cx extends C.e{constructor(x){super(Z.i,Z.i,(x=>new L.b(Math.clz32(x.value))),"FlowGraphLeadingZerosBlock",x)}}(0,X.d)("FlowGraphLeadingZerosBlock",cx);class dx extends C.e{constructor(x){super(Z.i,Z.i,(x=>new L.b(x.value?31-Math.clz32(x.value&-x.value):32)),"FlowGraphTrailingZerosBlock",x)}}(0,X.d)("FlowGraphTrailingZerosBlock",dx);class ux extends C.e{constructor(x){super(Z.i,Z.i,(x=>new L.b(function(x){let O=0;for(;x;)O+=1&x,x>>=1;return O}(x.value))),"FlowGraphOneBitsCounterBlock",x)}}(0,X.d)("FlowGraphOneBitsCounterBlock",ux)},14205:(x,O,Q)=>{Q.d(O,{e:()=>Z});var X=Q(14213);class Z extends X.d{constructor(x,O,Q,X,Z,n){super(Q,n),this._operation=X,this._className=Z,this.a=this.registerDataInput("a",x),this.b=this.registerDataInput("b",O)}_doOperation(x){const O=this.a.getValue(x),Q=this.b.getValue(x);return this._operation(O,Q)}getClassName(){return this._className}}},14213:(x,O,Q)=>{Q.d(O,{d:()=>o});var X=Q(12726),Z=Q(12707);const n="cachedOperationValue",V="cachedExecutionId";class o extends X.d{constructor(x,O){super(O),this.value=this.registerDataOutput("value",x),this.isValid=this.registerDataOutput("isValid",Z.g)}_updateOutputs(x){const O=x._getExecutionVariable(this,V,-1),Q=x._getExecutionVariable(this,n,null);if(void 0!==Q&&null!==Q&&O===x.executionId)this.isValid.setValue(!0,x),this.value.setValue(Q,x);else try{const O=this._doOperation(x);if(void 0===O||null===O)return void this.isValid.setValue(!1,x);x._setExecutionVariable(this,n,O),x._setExecutionVariable(this,V,x.executionId),this.value.setValue(O,x),this.isValid.setValue(!0,x)}catch(X){this.isValid.setValue(!1,x)}}}},14216:(x,O,Q)=>{Q.d(O,{e:()=>Z});var X=Q(14213);class Z extends X.d{constructor(x,O,Q,X,Z){super(O,Z),this._operation=Q,this._className=X,this.a=this.registerDataInput("a",x)}_doOperation(x){return this._operation(this.a.getValue(x))}getClassName(){return this._className}}}}]);