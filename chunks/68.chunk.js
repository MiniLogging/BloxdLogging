"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[68],{14528:(G,V,W)=>{W.r(V),W.d(V,{FlowGraphAbsBlock:()=>H,FlowGraphAcosBlock:()=>dG,FlowGraphAcoshBlock:()=>qG,FlowGraphAddBlock:()=>t,FlowGraphAsinBlock:()=>RG,FlowGraphAsinhBlock:()=>xG,FlowGraphAtan2Block:()=>zG,FlowGraphAtanBlock:()=>kG,FlowGraphAtanhBlock:()=>LG,FlowGraphBitwiseAndBlock:()=>yG,FlowGraphBitwiseLeftShiftBlock:()=>nG,FlowGraphBitwiseNotBlock:()=>rG,FlowGraphBitwiseOrBlock:()=>uG,FlowGraphBitwiseRightShiftBlock:()=>DG,FlowGraphBitwiseXorBlock:()=>HG,FlowGraphCeilBlock:()=>e,FlowGraphClampBlock:()=>a,FlowGraphCosBlock:()=>WG,FlowGraphCoshBlock:()=>PG,FlowGraphCubeRootBlock:()=>pG,FlowGraphDegToRadBlock:()=>O,FlowGraphDivideBlock:()=>B,FlowGraphEBlock:()=>p,FlowGraphEqualityBlock:()=>Q,FlowGraphExpBlock:()=>tG,FlowGraphFloorBlock:()=>i,FlowGraphFractionBlock:()=>f,FlowGraphGreaterThanBlock:()=>o,FlowGraphGreaterThanOrEqualBlock:()=>c,FlowGraphInfBlock:()=>r,FlowGraphIsInfinityBlock:()=>I,FlowGraphIsNanBlock:()=>j,FlowGraphLeadingZerosBlock:()=>iG,FlowGraphLessThanBlock:()=>E,FlowGraphLessThanOrEqualBlock:()=>h,FlowGraphLog10Block:()=>BG,FlowGraphLog2Block:()=>gG,FlowGraphLogBlock:()=>YG,FlowGraphMathInterpolationBlock:()=>s,FlowGraphMaxBlock:()=>w,FlowGraphMinBlock:()=>m,FlowGraphModuloBlock:()=>l,FlowGraphMultiplyBlock:()=>g,FlowGraphNaNBlock:()=>y,FlowGraphNegationBlock:()=>v,FlowGraphOneBitsCounterBlock:()=>FG,FlowGraphPiBlock:()=>b,FlowGraphPowerBlock:()=>bG,FlowGraphRadToDegBlock:()=>GG,FlowGraphRandomBlock:()=>S,FlowGraphRoundBlock:()=>F,FlowGraphSaturateBlock:()=>T,FlowGraphSignBlock:()=>n,FlowGraphSinBlock:()=>VG,FlowGraphSinhBlock:()=>XG,FlowGraphSquareRootBlock:()=>SG,FlowGraphSubtractBlock:()=>Y,FlowGraphTanBlock:()=>JG,FlowGraphTanhBlock:()=>AG,FlowGraphTrailingZerosBlock:()=>eG,FlowGraphTruncBlock:()=>D});var J=W(11159),R=W(13071),d=W(14533),k=W(14535);class z extends k.c{constructor(G,V,W,J){super(G,J),this._operation=V,this._className=W}_doOperation(G){return this._operation(G)}getClassName(){return this._className}}var X=W(11136),P=W(14544);class A extends k.c{constructor(G,V,W,J,R,d,k){super(J,k),this._operation=R,this._className=d,this.a=this.registerDataInput("a",G),this.b=this.registerDataInput("b",V),this.c=this.registerDataInput("c",W)}_doOperation(G){return this._operation(this.a.getValue(G),this.b.getValue(G),this.c.getValue(G))}getClassName(){return this._className}}var x=W(13067),q=W(13074),L=W(13104);class t extends d.c{constructor(G){super((0,R.I)(null===G||void 0===G?void 0:G.type),(0,R.I)(null===G||void 0===G?void 0:G.type),(0,R.I)(null===G||void 0===G?void 0:G.type),((G,V)=>this._polymorphicAdd(G,V)),"FlowGraphAddBlock",G)}_polymorphicAdd(G,V){const W=(0,L.k)(G),J=(0,L.k)(V);if((0,L.g)(W,J)||(0,L.e)(W,J)||(0,L.c)(W,J))return G.add(V);if("Quaternion"===W||"Vector4"===J)return new X.q(G.x,G.y,G.z,G.w).addInPlace(V);if("Vector4"===W||"Quaternion"===J)return G.add(V);var R;if(null!==(R=this.config)&&void 0!==R&&R.preventIntegerFloatArithmetic&&typeof G!==typeof V)throw new Error("Cannot add different types of numbers.");return(0,L.r)(G)+(0,L.r)(V)}}(0,J.d)("FlowGraphAddBlock",t);class Y extends d.c{constructor(G){super((0,R.I)(null===G||void 0===G?void 0:G.type),(0,R.I)(null===G||void 0===G?void 0:G.type),(0,R.I)(null===G||void 0===G?void 0:G.type),((G,V)=>this._polymorphicSubtract(G,V)),"FlowGraphSubtractBlock",G)}_polymorphicSubtract(G,V){const W=(0,L.k)(G),J=(0,L.k)(V);if((0,L.g)(W,J)||(0,L.c)(W,J)||(0,L.e)(W,J))return G.zW(V);if("Quaternion"===W||"Vector4"===J)return new X.q(G.x,G.y,G.z,G.w).FA(V);if("Vector4"===W||"Quaternion"===J)return G.zW(V);var R;if(null!==(R=this.config)&&void 0!==R&&R.preventIntegerFloatArithmetic&&typeof G!==typeof V)throw new Error("Cannot add different types of numbers.");return(0,L.r)(G)-(0,L.r)(V)}}(0,J.d)("FlowGraphSubtractBlock",Y);class g extends d.c{constructor(G){super((0,R.I)(null===G||void 0===G?void 0:G.type),(0,R.I)(null===G||void 0===G?void 0:G.type),(0,R.I)(null===G||void 0===G?void 0:G.type),((G,V)=>this._polymorphicMultiply(G,V)),"FlowGraphMultiplyBlock",G)}_polymorphicMultiply(G,V){const W=(0,L.k)(G),J=(0,L.k)(V);if((0,L.g)(W,J)||(0,L.c)(W,J))return G.multiply(V);if("Quaternion"===W||"Vector4"===J)return new X.q(G.x,G.y,G.z,G.w).multiplyInPlace(V);if("Vector4"===W||"Quaternion"===J)return G.multiply(V);if((0,L.e)(W,J)){var R;if(null!==(R=this.config)&&void 0!==R&&R.useMatrixPerComponent){const J=G.m;for(let G=0;G<J.length;G++)J[G]*=V.m[G];return"Matrix2D"===W?new q.e(J):"Matrix3D"===W?new q.g(J):X.c.ld(J)}return V.multiply(G)}var d;if(null!==(d=this.config)&&void 0!==d&&d.preventIntegerFloatArithmetic&&typeof G!==typeof V)throw new Error("Cannot add different types of numbers.");return(0,L.r)(G)*(0,L.r)(V)}}(0,J.d)("FlowGraphMultiplyBlock",g);class B extends d.c{constructor(G){super((0,R.I)(null===G||void 0===G?void 0:G.type),(0,R.I)(null===G||void 0===G?void 0:G.type),(0,R.I)(null===G||void 0===G?void 0:G.type),((G,V)=>this._polymorphicDivide(G,V)),"FlowGraphDivideBlock",G)}_polymorphicDivide(G,V){const W=(0,L.k)(G),J=(0,L.k)(V);if((0,L.g)(W,J)||(0,L.c)(W,J))return G.divide(V);if("Quaternion"===W||"Quaternion"===J){const W=G.clone();return W.x/=V.x,W.y/=V.y,W.z/=V.z,W.w/=V.w,W}if("Quaternion"===W||"Vector4"===J)return new X.q(G.x,G.y,G.z,G.w).divideInPlace(V);if("Vector4"===W||"Quaternion"===J)return G.divide(V);if((0,L.e)(W,J)){var R;if(null!==(R=this.config)&&void 0!==R&&R.useMatrixPerComponent){const J=G.m;for(let G=0;G<J.length;G++)J[G]/=V.m[G];return"Matrix2D"===W?new q.e(J):"Matrix3D"===W?new q.g(J):X.c.ld(J)}return G.divide(V)}var d;if(null!==(d=this.config)&&void 0!==d&&d.preventIntegerFloatArithmetic&&typeof G!==typeof V)throw new Error("Cannot add different types of numbers.");return(0,L.r)(G)/(0,L.r)(V)}}(0,J.d)("FlowGraphDivideBlock",B);class S extends z{constructor(G){super(R.r,(G=>this._random(G)),"FlowGraphRandomBlock",G),this.min=this.registerDataInput("min",R.r,(null===G||void 0===G?void 0:G.min)??0),this.max=this.registerDataInput("max",R.r,(null===G||void 0===G?void 0:G.max)??1),null!==G&&void 0!==G&&G.seed&&(this._seed=G.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const G=1e4*Math.sin(this._seed++);return G-Math.floor(G)}return Math.random()}_random(G){const V=this.min.getValue(G),W=this.max.getValue(G);return this._getRandomValue()*(W-V)+V}}(0,J.d)("FlowGraphRandomBlock",S);class p extends z{constructor(G){super(R.r,(()=>Math.E),"FlowGraphEBlock",G)}}(0,J.d)("FlowGraphEBlock",p);class b extends z{constructor(G){super(R.r,(()=>Math.PI),"FlowGraphPIBlock",G)}}(0,J.d)("FlowGraphPIBlock",b);class r extends z{constructor(G){super(R.r,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",G)}}(0,J.d)("FlowGraphInfBlock",r);class y extends z{constructor(G){super(R.r,(()=>Number.NaN),"FlowGraphNaNBlock",G)}}function u(G,V){switch((0,L.k)(G)){case"FlowGraphInteger":return new x.e(V(G.value));case"Vector2":return new X.k(V(G.x),V(G.y));case"ed":return new X.o(V(G.x),V(G.y),V(G.z));case"Vector4":return new X.q(V(G.x),V(G.y),V(G.z),V(G.w));case"Quaternion":return new X.g(V(G.x),V(G.y),V(G.z),V(G.w));case"Matrix":return X.c.ld(G.m.map(V));case"Matrix2D":return new q.e(G.m.map(V));case"Matrix3D":return new q.g(G.m.map(V));default:return V(G)}}(0,J.d)("FlowGraphNaNBlock",y);class H extends P.e{constructor(G){super(R.r,R.r,(G=>this._polymorphicAbs(G)),"FlowGraphAbsBlock",G)}_polymorphicAbs(G){return u(G,Math.abs)}}(0,J.d)("FlowGraphAbsBlock",H);class n extends P.e{constructor(G){super(R.r,R.r,(G=>this._polymorphicSign(G)),"FlowGraphSignBlock",G)}_polymorphicSign(G){return u(G,Math.sign)}}(0,J.d)("FlowGraphSignBlock",n);class D extends P.e{constructor(G){super(R.r,R.r,(G=>this._polymorphicTrunc(G)),"FlowGraphTruncBlock",G)}_polymorphicTrunc(G){return u(G,Math.trunc)}}(0,J.d)("FlowGraphTruncBlock",D);class i extends P.e{constructor(G){super(R.r,R.r,(G=>this._polymorphicFloor(G)),"FlowGraphFloorBlock",G)}_polymorphicFloor(G){return u(G,Math.floor)}}(0,J.d)("FlowGraphFloorBlock",i);class e extends P.e{constructor(G){super(R.b,R.b,(G=>this._polymorphicCeiling(G)),"FlowGraphCeilBlock",G)}_polymorphicCeiling(G){return u(G,Math.ceil)}}(0,J.d)("FlowGraphCeilBlock",e);class F extends P.e{constructor(G){super(R.b,R.b,(G=>this._polymorphicRound(G)),"FlowGraphRoundBlock",G)}_polymorphicRound(G){return u(G,(G=>{var V;return G<0&&null!==(V=this.config)&&void 0!==V&&V.roundHalfAwayFromZero?-Math.round(-G):Math.round(G)}))}}(0,J.d)("FlowGraphRoundBlock",F);class f extends P.e{constructor(G){super(R.b,R.b,(G=>this._polymorphicFraction(G)),"FlowGraphFractBlock",G)}_polymorphicFraction(G){return u(G,(G=>G-Math.floor(G)))}}(0,J.d)("FlowGraphFractBlock",f);class v extends P.e{constructor(G){super(R.b,R.b,(G=>this._polymorphicNeg(G)),"FlowGraphNegationBlock",G)}_polymorphicNeg(G){return u(G,(G=>-G))}}function C(G,V,W){switch((0,L.k)(G)){case"FlowGraphInteger":return new x.e(W(G.value,V.value));case"Vector2":return new X.k(W(G.x,V.x),W(G.y,V.y));case"ed":return new X.o(W(G.x,V.x),W(G.y,V.y),W(G.z,V.z));case"Vector4":return new X.q(W(G.x,V.x),W(G.y,V.y),W(G.z,V.z),W(G.w,V.w));case"Quaternion":return new X.g(W(G.x,V.x),W(G.y,V.y),W(G.z,V.z),W(G.w,V.w));case"Matrix":return X.c.ld(G.m.map(((G,J)=>W(G,V.m[J]))));case"Matrix2D":return new q.e(G.m.map(((G,J)=>W(G,V.m[J]))));case"Matrix3D":return new q.g(G.m.map(((G,J)=>W(G,V.m[J]))));default:return W((0,L.r)(G),(0,L.r)(V))}}(0,J.d)("FlowGraphNegationBlock",v);class l extends d.c{constructor(G){super(R.b,R.b,R.b,((G,V)=>this._polymorphicRemainder(G,V)),"FlowGraphModuloBlock",G)}_polymorphicRemainder(G,V){return C(G,V,((G,V)=>G%V))}}(0,J.d)("FlowGraphModuloBlock",l);class m extends d.c{constructor(G){super(R.b,R.b,R.b,((G,V)=>this._polymorphicMin(G,V)),"FlowGraphMinBlock",G)}_polymorphicMin(G,V){return C(G,V,Math.min)}}(0,J.d)("FlowGraphMinBlock",m);class w extends d.c{constructor(G){super(R.b,R.b,R.b,((G,V)=>this._polymorphicMax(G,V)),"FlowGraphMaxBlock",G)}_polymorphicMax(G,V){return C(G,V,Math.max)}}function N(G,V,W){return Math.min(Math.max(G,Math.min(V,W)),Math.max(V,W))}function U(G,V,W,J){switch((0,L.k)(G)){case"FlowGraphInteger":return new x.e(J(G.value,V.value,W.value));case"Vector2":return new X.k(J(G.x,V.x,W.x),J(G.y,V.y,W.y));case"ed":return new X.o(J(G.x,V.x,W.x),J(G.y,V.y,W.y),J(G.z,V.z,W.z));case"Vector4":return new X.q(J(G.x,V.x,W.x),J(G.y,V.y,W.y),J(G.z,V.z,W.z),J(G.w,V.w,W.w));case"Quaternion":return new X.g(J(G.x,V.x,W.x),J(G.y,V.y,W.y),J(G.z,V.z,W.z),J(G.w,V.w,W.w));case"Matrix":return X.c.ld(G.m.map(((G,R)=>J(G,V.m[R],W.m[R]))));case"Matrix2D":return new q.e(G.m.map(((G,R)=>J(G,V.m[R],W.m[R]))));case"Matrix3D":return new q.g(G.m.map(((G,R)=>J(G,V.m[R],W.m[R]))));default:return J((0,L.r)(G),(0,L.r)(V),(0,L.r)(W))}}(0,J.d)("FlowGraphMaxBlock",w);class a extends A{constructor(G){super(R.b,R.b,R.b,R.b,((G,V,W)=>this._polymorphicClamp(G,V,W)),"FlowGraphClampBlock",G)}_polymorphicClamp(G,V,W){return U(G,V,W,N)}}function M(G){return Math.min(Math.max(G,0),1)}(0,J.d)("FlowGraphClampBlock",a);class T extends P.e{constructor(G){super(R.b,R.b,(G=>this._polymorphicSaturate(G)),"FlowGraphSaturateBlock",G)}_polymorphicSaturate(G){return u(G,M)}}function K(G,V,W){return(1-W)*G+W*V}(0,J.d)("FlowGraphSaturateBlock",T);class s extends A{constructor(G){super(R.b,R.b,R.b,R.b,((G,V,W)=>this._polymorphicInterpolate(G,V,W)),"FlowGraphMathInterpolationBlock",G)}_polymorphicInterpolate(G,V,W){return U(G,V,W,K)}}(0,J.d)("FlowGraphMathInterpolationBlock",s);class Q extends d.c{constructor(G){super(R.b,R.b,R.d,((G,V)=>this._polymorphicEq(G,V)),"FlowGraphEqualityBlock",G)}_polymorphicEq(G,V){const W=(0,L.k)(G),J=(0,L.k)(V);return typeof G===typeof V&&((0,L.g)(W,J)||(0,L.e)(W,J)||(0,L.c)(W,J)?G.equals(V):G===V)}}function Z(G,V,W){if((0,L.t)(G)&&(0,L.t)(V))return W((0,L.r)(G),(0,L.r)(V));throw new Error(`Cannot compare ${G} and ${V}`)}(0,J.d)("FlowGraphEqualityBlock",Q);class E extends d.c{constructor(G){super(R.b,R.b,R.d,((G,V)=>this._polymorphicLessThan(G,V)),"FlowGraphLessThanBlock",G)}_polymorphicLessThan(G,V){return Z(G,V,((G,V)=>G<V))}}(0,J.d)("FlowGraphLessThanBlock",E);class h extends d.c{constructor(G){super(R.b,R.b,R.d,((G,V)=>this._polymorphicLessThanOrEqual(G,V)),"FlowGraphLessThanOrEqualBlock",G)}_polymorphicLessThanOrEqual(G,V){return Z(G,V,((G,V)=>G<=V))}}(0,J.d)("FlowGraphLessThanOrEqualBlock",h);class o extends d.c{constructor(G){super(R.b,R.b,R.d,((G,V)=>this._polymorphicGreaterThan(G,V)),"FlowGraphGreaterThanBlock",G)}_polymorphicGreaterThan(G,V){return Z(G,V,((G,V)=>G>V))}}(0,J.d)("FlowGraphGreaterThanBlock",o);class c extends d.c{constructor(G){super(R.b,R.b,R.d,((G,V)=>this._polymorphicGreaterThanOrEqual(G,V)),"FlowGraphGreaterThanOrEqualBlock",G)}_polymorphicGreaterThanOrEqual(G,V){return Z(G,V,((G,V)=>G>=V))}}(0,J.d)("FlowGraphGreaterThanOrEqualBlock",c);class j extends P.e{constructor(G){super(R.b,R.d,(G=>this._polymorphicIsNan(G)),"FlowGraphIsNaNBlock",G)}_polymorphicIsNan(G){if((0,L.t)(G,!0))return isNaN((0,L.r)(G));throw new Error(`Cannot get NaN of ${G}`)}}(0,J.d)("FlowGraphIsNaNBlock",j);class I extends P.e{constructor(G){super(R.b,R.d,(G=>this._polymorphicIsInf(G)),"FlowGraphIsInfBlock",G)}_polymorphicIsInf(G){if((0,L.t)(G))return!isFinite((0,L.r)(G));throw new Error(`Cannot get isInf of ${G}`)}}(0,J.d)("FlowGraphIsInfBlock",I);class O extends P.e{constructor(G){super(R.b,R.b,(G=>this._polymorphicDegToRad(G)),"FlowGraphDegToRadBlock",G)}_degToRad(G){return G*Math.PI/180}_polymorphicDegToRad(G){return u(G,this._degToRad)}}(0,J.d)("FlowGraphDegToRadBlock",O);class GG extends P.e{constructor(G){super(R.b,R.b,(G=>this._polymorphicRadToDeg(G)),"FlowGraphRadToDegBlock",G)}_radToDeg(G){return 180*G/Math.PI}_polymorphicRadToDeg(G){return u(G,this._radToDeg)}}(0,J.d)("FlowGraphRadToDegBlock",GG);class VG extends P.e{constructor(G){super(R.r,R.r,(G=>this._polymorphicSin(G)),"FlowGraphSinBlock",G)}_polymorphicSin(G){return u(G,Math.sin)}}class WG extends P.e{constructor(G){super(R.r,R.r,(G=>this._polymorphicCos(G)),"FlowGraphCosBlock",G)}_polymorphicCos(G){return u(G,Math.cos)}}class JG extends P.e{constructor(G){super(R.r,R.r,(G=>this._polymorphicTan(G)),"FlowGraphTanBlock",G)}_polymorphicTan(G){return u(G,Math.tan)}}class RG extends P.e{constructor(G){super(R.r,R.r,(G=>this._polymorphicAsin(G)),"FlowGraphASinBlock",G)}_polymorphicAsin(G){return u(G,Math.asin)}}(0,J.d)("FlowGraphASinBlock",RG);class dG extends P.e{constructor(G){super(R.r,R.r,(G=>this._polymorphicAcos(G)),"FlowGraphACosBlock",G)}_polymorphicAcos(G){return u(G,Math.acos)}}(0,J.d)("FlowGraphACosBlock",dG);class kG extends P.e{constructor(G){super(R.r,R.r,(G=>this._polymorphicAtan(G)),"FlowGraphATanBlock",G)}_polymorphicAtan(G){return u(G,Math.atan)}}(0,J.d)("FlowGraphATanBlock",kG);class zG extends d.c{constructor(G){super(R.b,R.b,R.b,((G,V)=>this._polymorphicAtan2(G,V)),"FlowGraphATan2Block",G)}_polymorphicAtan2(G,V){return C(G,V,Math.atan2)}}(0,J.d)("FlowGraphATan2Block",zG);class XG extends P.e{constructor(G){super(R.b,R.b,(G=>this._polymorphicSinh(G)),"FlowGraphSinhBlock",G)}_polymorphicSinh(G){return u(G,Math.sinh)}}(0,J.d)("FlowGraphSinhBlock",XG);class PG extends P.e{constructor(G){super(R.b,R.b,(G=>this._polymorphicCosh(G)),"FlowGraphCoshBlock",G)}_polymorphicCosh(G){return u(G,Math.cosh)}}(0,J.d)("FlowGraphCoshBlock",PG);class AG extends P.e{constructor(G){super(R.b,R.b,(G=>this._polymorphicTanh(G)),"FlowGraphTanhBlock",G)}_polymorphicTanh(G){return u(G,Math.tanh)}}(0,J.d)("FlowGraphTanhBlock",AG);class xG extends P.e{constructor(G){super(R.b,R.r,(G=>this._polymorphicAsinh(G)),"FlowGraphASinhBlock",G)}_polymorphicAsinh(G){return u(G,Math.asinh)}}(0,J.d)("FlowGraphASinhBlock",xG);class qG extends P.e{constructor(G){super(R.b,R.r,(G=>this._polymorphicAcosh(G)),"FlowGraphACoshBlock",G)}_polymorphicAcosh(G){return u(G,Math.acosh)}}(0,J.d)("FlowGraphACoshBlock",qG);class LG extends P.e{constructor(G){super(R.b,R.r,(G=>this._polymorphicAtanh(G)),"FlowGraphATanhBlock",G)}_polymorphicAtanh(G){return u(G,Math.atanh)}}(0,J.d)("FlowGraphATanhBlock",LG);class tG extends P.e{constructor(G){super(R.b,R.r,(G=>this._polymorphicExp(G)),"FlowGraphExponentialBlock",G)}_polymorphicExp(G){return u(G,Math.exp)}}(0,J.d)("FlowGraphExponentialBlock",tG);class YG extends P.e{constructor(G){super(R.b,R.r,(G=>this._polymorphicLog(G)),"FlowGraphLogBlock",G)}_polymorphicLog(G){return u(G,Math.log)}}(0,J.d)("FlowGraphLogBlock",YG);class gG extends P.e{constructor(G){super(R.b,R.r,(G=>this._polymorphicLog2(G)),"FlowGraphLog2Block",G)}_polymorphicLog2(G){return u(G,Math.log2)}}(0,J.d)("FlowGraphLog2Block",gG);class BG extends P.e{constructor(G){super(R.b,R.r,(G=>this._polymorphicLog10(G)),"FlowGraphLog10Block",G)}_polymorphicLog10(G){return u(G,Math.log10)}}(0,J.d)("FlowGraphLog10Block",BG);class SG extends P.e{constructor(G){super(R.b,R.r,(G=>this._polymorphicSqrt(G)),"FlowGraphSquareRootBlock",G)}_polymorphicSqrt(G){return u(G,Math.sqrt)}}(0,J.d)("FlowGraphSquareRootBlock",SG);class pG extends P.e{constructor(G){super(R.b,R.r,(G=>this._polymorphicCubeRoot(G)),"FlowGraphCubeRootBlock",G)}_polymorphicCubeRoot(G){return u(G,Math.cbrt)}}(0,J.d)("FlowGraphCubeRootBlock",pG);class bG extends d.c{constructor(G){super(R.b,R.r,R.r,((G,V)=>this._polymorphicPow(G,V)),"FlowGraphPowerBlock",G)}_polymorphicPow(G,V){return C(G,V,Math.pow)}}(0,J.d)("FlowGraphPowerBlock",bG);class rG extends P.e{constructor(G){super((0,R.I)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),(0,R.I)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),(G=>"boolean"===typeof G?!G:"number"===typeof G?~G:new x.e(~G.value)),"FlowGraphBitwiseNotBlock",G)}}(0,J.d)("FlowGraphBitwiseNotBlock",rG);class yG extends d.c{constructor(G){super((0,R.I)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),(0,R.I)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),(0,R.I)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),((G,V)=>{if("boolean"===typeof G&&"boolean"===typeof V)return G&&V;if("number"===typeof G&&"number"===typeof V)return G&V;if("object"===typeof G&&"object"===typeof V)return new x.e(G.value&V.value);throw new Error(`Cannot perform bitwise AND on ${G} and ${V}`)}),"FlowGraphBitwiseAndBlock",G)}}(0,J.d)("FlowGraphBitwiseAndBlock",yG);class uG extends d.c{constructor(G){super((0,R.I)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),(0,R.I)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),(0,R.I)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),((G,V)=>{if("boolean"===typeof G&&"boolean"===typeof V)return G||V;if("number"===typeof G&&"number"===typeof V)return G|V;if("object"===typeof G&&"object"===typeof V)return new x.e(G.value|V.value);throw new Error(`Cannot perform bitwise OR on ${G} and ${V}`)}),"FlowGraphBitwiseOrBlock",G)}}(0,J.d)("FlowGraphBitwiseOrBlock",uG);class HG extends d.c{constructor(G){super((0,R.I)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),(0,R.I)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),(0,R.I)((null===G||void 0===G?void 0:G.valueType)||"FlowGraphInteger"),((G,V)=>{if("boolean"===typeof G&&"boolean"===typeof V)return G!==V;if("number"===typeof G&&"number"===typeof V)return G^V;if("object"===typeof G&&"object"===typeof V)return new x.e(G.value^V.value);throw new Error(`Cannot perform bitwise XOR on ${G} and ${V}`)}),"FlowGraphBitwiseXorBlock",G)}}(0,J.d)("FlowGraphBitwiseXorBlock",HG);class nG extends d.c{constructor(G){super(R.h,R.h,R.h,((G,V)=>new x.e(G.value<<V.value)),"FlowGraphBitwiseLeftShiftBlock",G)}}(0,J.d)("FlowGraphBitwiseLeftShiftBlock",nG);class DG extends d.c{constructor(G){super(R.h,R.h,R.h,((G,V)=>new x.e(G.value>>V.value)),"FlowGraphBitwiseRightShiftBlock",G)}}(0,J.d)("FlowGraphBitwiseRightShiftBlock",DG);class iG extends P.e{constructor(G){super(R.h,R.h,(G=>new x.e(Math.clz32(G.value))),"FlowGraphLeadingZerosBlock",G)}}(0,J.d)("FlowGraphLeadingZerosBlock",iG);class eG extends P.e{constructor(G){super(R.h,R.h,(G=>new x.e(G.value?31-Math.clz32(G.value&-G.value):32)),"FlowGraphTrailingZerosBlock",G)}}(0,J.d)("FlowGraphTrailingZerosBlock",eG);class FG extends P.e{constructor(G){super(R.h,R.h,(G=>new x.e(function(G){let V=0;for(;G;)V+=1&G,G>>=1;return V}(G.value))),"FlowGraphOneBitsCounterBlock",G)}}(0,J.d)("FlowGraphOneBitsCounterBlock",FG)},14533:(G,V,W)=>{W.d(V,{c:()=>R});var J=W(14535);class R extends J.c{constructor(G,V,W,J,R,d){super(W,d),this._operation=J,this._className=R,this.a=this.registerDataInput("a",G),this.b=this.registerDataInput("b",V)}_doOperation(G){const V=this.a.getValue(G),W=this.b.getValue(G);return this._operation(V,W)}getClassName(){return this._className}}},14535:(G,V,W)=>{W.d(V,{c:()=>z});var J=W(13093),R=W(13071);const d="cachedOperationValue",k="cachedExecutionId";class z extends J.c{constructor(G,V){super(V),this.value=this.registerDataOutput("value",G),this.isValid=this.registerDataOutput("isValid",R.d)}_updateOutputs(G){const V=G._getExecutionVariable(this,k,-1),W=G._getExecutionVariable(this,d,null);if(void 0!==W&&null!==W&&V===G.executionId)this.isValid.setValue(!0,G),this.value.setValue(W,G);else try{const V=this._doOperation(G);if(void 0===V||null===V)return void this.isValid.setValue(!1,G);G._setExecutionVariable(this,d,V),G._setExecutionVariable(this,k,G.executionId),this.value.setValue(V,G),this.isValid.setValue(!0,G)}catch(J){this.isValid.setValue(!1,G)}}}},14544:(G,V,W)=>{W.d(V,{e:()=>R});var J=W(14535);class R extends J.c{constructor(G,V,W,J,R){super(V,R),this._operation=W,this._className=J,this.a=this.registerDataInput("a",G)}_doOperation(G){return this._operation(this.a.getValue(G))}getClassName(){return this._className}}}}]);