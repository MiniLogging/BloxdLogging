"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[68],{14261:(s,Z,o)=>{o.r(Z),o.d(Z,{FlowGraphAbsBlock:()=>N,FlowGraphAcosBlock:()=>Ss,FlowGraphAcoshBlock:()=>Ds,FlowGraphAddBlock:()=>Y,FlowGraphAsinBlock:()=>js,FlowGraphAsinhBlock:()=>Qs,FlowGraphAtan2Block:()=>Os,FlowGraphAtanBlock:()=>as,FlowGraphAtanhBlock:()=>zs,FlowGraphBitwiseAndBlock:()=>Fs,FlowGraphBitwiseLeftShiftBlock:()=>Ls,FlowGraphBitwiseNotBlock:()=>Hs,FlowGraphBitwiseOrBlock:()=>is,FlowGraphBitwiseRightShiftBlock:()=>Vs,FlowGraphBitwiseXorBlock:()=>Ns,FlowGraphCeilBlock:()=>l,FlowGraphClampBlock:()=>x,FlowGraphCosBlock:()=>os,FlowGraphCoshBlock:()=>Gs,FlowGraphCubeRootBlock:()=>Us,FlowGraphDegToRadBlock:()=>J,FlowGraphDivideBlock:()=>A,FlowGraphEBlock:()=>U,FlowGraphEqualityBlock:()=>K,FlowGraphExpBlock:()=>Ys,FlowGraphFloorBlock:()=>g,FlowGraphFractionBlock:()=>e,FlowGraphGreaterThanBlock:()=>r,FlowGraphGreaterThanOrEqualBlock:()=>T,FlowGraphInfBlock:()=>H,FlowGraphIsInfinityBlock:()=>n,FlowGraphIsNanBlock:()=>m,FlowGraphLeadingZerosBlock:()=>gs,FlowGraphLessThanBlock:()=>E,FlowGraphLessThanOrEqualBlock:()=>P,FlowGraphLog10Block:()=>As,FlowGraphLog2Block:()=>fs,FlowGraphLogBlock:()=>bs,FlowGraphMathInterpolationBlock:()=>C,FlowGraphMaxBlock:()=>q,FlowGraphMinBlock:()=>W,FlowGraphModuloBlock:()=>X,FlowGraphMultiplyBlock:()=>f,FlowGraphNaNBlock:()=>F,FlowGraphNegationBlock:()=>c,FlowGraphOneBitsCounterBlock:()=>Rs,FlowGraphPiBlock:()=>u,FlowGraphPowerBlock:()=>us,FlowGraphRadToDegBlock:()=>ss,FlowGraphRandomBlock:()=>d,FlowGraphRoundBlock:()=>R,FlowGraphSaturateBlock:()=>y,FlowGraphSignBlock:()=>L,FlowGraphSinBlock:()=>Zs,FlowGraphSinhBlock:()=>vs,FlowGraphSquareRootBlock:()=>ds,FlowGraphSubtractBlock:()=>b,FlowGraphTanBlock:()=>ts,FlowGraphTanhBlock:()=>Bs,FlowGraphTrailingZerosBlock:()=>ls,FlowGraphTruncBlock:()=>V});var t=o(10916),j=o(12775),S=o(14265),a=o(14271);class O extends a.e{constructor(s,Z,o,t){super(s,t),this._operation=Z,this._className=o}_doOperation(s){return this._operation(s)}getClassName(){return this._className}}var v=o(10900),G=o(14273);class B extends a.e{constructor(s,Z,o,t,j,S,a){super(t,a),this._operation=j,this._className=S,this.a=this.registerDataInput("a",s),this.b=this.registerDataInput("b",Z),this.c=this.registerDataInput("c",o)}_doOperation(s){return this._operation(this.a.getValue(s),this.b.getValue(s),this.c.getValue(s))}getClassName(){return this._className}}var Q=o(12771),D=o(12784),z=o(12816);class Y extends S.e{constructor(s){super((0,j.U)(null===s||void 0===s?void 0:s.type),(0,j.U)(null===s||void 0===s?void 0:s.type),(0,j.U)(null===s||void 0===s?void 0:s.type),((s,Z)=>this._polymorphicAdd(s,Z)),"FlowGraphAddBlock",s)}_polymorphicAdd(s,Z){const o=(0,z.i)(s),t=(0,z.i)(Z);if((0,z.f)(o,t)||(0,z.e)(o,t)||(0,z.c)(o,t))return s.add(Z);if("Quaternion"===o||"Vector4"===t)return new v.p(s.x,s.y,s.z,s.w).addInPlace(Z);if("Vector4"===o||"Quaternion"===t)return s.add(Z);var j;if(null!==(j=this.config)&&void 0!==j&&j.preventIntegerFloatArithmetic&&typeof s!==typeof Z)throw new Error("Cannot add different types of numbers.");return(0,z.o)(s)+(0,z.o)(Z)}}(0,t.f)("FlowGraphAddBlock",Y);class b extends S.e{constructor(s){super((0,j.U)(null===s||void 0===s?void 0:s.type),(0,j.U)(null===s||void 0===s?void 0:s.type),(0,j.U)(null===s||void 0===s?void 0:s.type),((s,Z)=>this._polymorphicSubtract(s,Z)),"FlowGraphSubtractBlock",s)}_polymorphicSubtract(s,Z){const o=(0,z.i)(s),t=(0,z.i)(Z);if((0,z.f)(o,t)||(0,z.c)(o,t)||(0,z.e)(o,t))return s.Go(Z);if("Quaternion"===o||"Vector4"===t)return new v.p(s.x,s.y,s.z,s.w).RB(Z);if("Vector4"===o||"Quaternion"===t)return s.Go(Z);var j;if(null!==(j=this.config)&&void 0!==j&&j.preventIntegerFloatArithmetic&&typeof s!==typeof Z)throw new Error("Cannot add different types of numbers.");return(0,z.o)(s)-(0,z.o)(Z)}}(0,t.f)("FlowGraphSubtractBlock",b);class f extends S.e{constructor(s){super((0,j.U)(null===s||void 0===s?void 0:s.type),(0,j.U)(null===s||void 0===s?void 0:s.type),(0,j.U)(null===s||void 0===s?void 0:s.type),((s,Z)=>this._polymorphicMultiply(s,Z)),"FlowGraphMultiplyBlock",s)}_polymorphicMultiply(s,Z){const o=(0,z.i)(s),t=(0,z.i)(Z);if((0,z.f)(o,t)||(0,z.c)(o,t))return s.multiply(Z);if("Quaternion"===o||"Vector4"===t)return new v.p(s.x,s.y,s.z,s.w).multiplyInPlace(Z);if("Vector4"===o||"Quaternion"===t)return s.multiply(Z);if((0,z.e)(o,t)){var j;if(null!==(j=this.config)&&void 0!==j&&j.useMatrixPerComponent){const t=s.m;for(let s=0;s<t.length;s++)t[s]*=Z.m[s];return"Matrix2D"===o?new D.c(t):"Matrix3D"===o?new D.d(t):v.b.oO(t)}return Z.multiply(s)}var S;if(null!==(S=this.config)&&void 0!==S&&S.preventIntegerFloatArithmetic&&typeof s!==typeof Z)throw new Error("Cannot add different types of numbers.");return(0,z.o)(s)*(0,z.o)(Z)}}(0,t.f)("FlowGraphMultiplyBlock",f);class A extends S.e{constructor(s){super((0,j.U)(null===s||void 0===s?void 0:s.type),(0,j.U)(null===s||void 0===s?void 0:s.type),(0,j.U)(null===s||void 0===s?void 0:s.type),((s,Z)=>this._polymorphicDivide(s,Z)),"FlowGraphDivideBlock",s)}_polymorphicDivide(s,Z){const o=(0,z.i)(s),t=(0,z.i)(Z);if((0,z.f)(o,t)||(0,z.c)(o,t))return s.divide(Z);if("Quaternion"===o||"Quaternion"===t){const o=s.clone();return o.x/=Z.x,o.y/=Z.y,o.z/=Z.z,o.w/=Z.w,o}if("Quaternion"===o||"Vector4"===t)return new v.p(s.x,s.y,s.z,s.w).divideInPlace(Z);if("Vector4"===o||"Quaternion"===t)return s.divide(Z);if((0,z.e)(o,t)){var j;if(null!==(j=this.config)&&void 0!==j&&j.useMatrixPerComponent){const t=s.m;for(let s=0;s<t.length;s++)t[s]/=Z.m[s];return"Matrix2D"===o?new D.c(t):"Matrix3D"===o?new D.d(t):v.b.oO(t)}return s.divide(Z)}var S;if(null!==(S=this.config)&&void 0!==S&&S.preventIntegerFloatArithmetic&&typeof s!==typeof Z)throw new Error("Cannot add different types of numbers.");return(0,z.o)(s)/(0,z.o)(Z)}}(0,t.f)("FlowGraphDivideBlock",A);class d extends O{constructor(s){super(j.w,(s=>this._random(s)),"FlowGraphRandomBlock",s),this.min=this.registerDataInput("min",j.w,(null===s||void 0===s?void 0:s.min)??0),this.max=this.registerDataInput("max",j.w,(null===s||void 0===s?void 0:s.max)??1),null!==s&&void 0!==s&&s.seed&&(this._seed=s.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const s=1e4*Math.sin(this._seed++);return s-Math.floor(s)}return Math.random()}_random(s){const Z=this.min.getValue(s),o=this.max.getValue(s);return this._getRandomValue()*(o-Z)+Z}}(0,t.f)("FlowGraphRandomBlock",d);class U extends O{constructor(s){super(j.w,(()=>Math.E),"FlowGraphEBlock",s)}}(0,t.f)("FlowGraphEBlock",U);class u extends O{constructor(s){super(j.w,(()=>Math.PI),"FlowGraphPIBlock",s)}}(0,t.f)("FlowGraphPIBlock",u);class H extends O{constructor(s){super(j.w,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",s)}}(0,t.f)("FlowGraphInfBlock",H);class F extends O{constructor(s){super(j.w,(()=>Number.NaN),"FlowGraphNaNBlock",s)}}function i(s,Z){switch((0,z.i)(s)){case"FlowGraphInteger":return new Q.b(Z(s.value));case"Vector2":return new v.j(Z(s.x),Z(s.y));case"sO":return new v.n(Z(s.x),Z(s.y),Z(s.z));case"Vector4":return new v.p(Z(s.x),Z(s.y),Z(s.z),Z(s.w));case"Quaternion":return new v.e(Z(s.x),Z(s.y),Z(s.z),Z(s.w));case"Matrix":return v.b.oO(s.m.map(Z));case"Matrix2D":return new D.c(s.m.map(Z));case"Matrix3D":return new D.d(s.m.map(Z));default:return Z(s)}}(0,t.f)("FlowGraphNaNBlock",F);class N extends G.b{constructor(s){super(j.w,j.w,(s=>this._polymorphicAbs(s)),"FlowGraphAbsBlock",s)}_polymorphicAbs(s){return i(s,Math.abs)}}(0,t.f)("FlowGraphAbsBlock",N);class L extends G.b{constructor(s){super(j.w,j.w,(s=>this._polymorphicSign(s)),"FlowGraphSignBlock",s)}_polymorphicSign(s){return i(s,Math.sign)}}(0,t.f)("FlowGraphSignBlock",L);class V extends G.b{constructor(s){super(j.w,j.w,(s=>this._polymorphicTrunc(s)),"FlowGraphTruncBlock",s)}_polymorphicTrunc(s){return i(s,Math.trunc)}}(0,t.f)("FlowGraphTruncBlock",V);class g extends G.b{constructor(s){super(j.w,j.w,(s=>this._polymorphicFloor(s)),"FlowGraphFloorBlock",s)}_polymorphicFloor(s){return i(s,Math.floor)}}(0,t.f)("FlowGraphFloorBlock",g);class l extends G.b{constructor(s){super(j.d,j.d,(s=>this._polymorphicCeiling(s)),"FlowGraphCeilBlock",s)}_polymorphicCeiling(s){return i(s,Math.ceil)}}(0,t.f)("FlowGraphCeilBlock",l);class R extends G.b{constructor(s){super(j.d,j.d,(s=>this._polymorphicRound(s)),"FlowGraphRoundBlock",s)}_polymorphicRound(s){return i(s,(s=>{var Z;return s<0&&null!==(Z=this.config)&&void 0!==Z&&Z.roundHalfAwayFromZero?-Math.round(-s):Math.round(s)}))}}(0,t.f)("FlowGraphRoundBlock",R);class e extends G.b{constructor(s){super(j.d,j.d,(s=>this._polymorphicFraction(s)),"FlowGraphFractBlock",s)}_polymorphicFraction(s){return i(s,(s=>s-Math.floor(s)))}}(0,t.f)("FlowGraphFractBlock",e);class c extends G.b{constructor(s){super(j.d,j.d,(s=>this._polymorphicNeg(s)),"FlowGraphNegationBlock",s)}_polymorphicNeg(s){return i(s,(s=>-s))}}function w(s,Z,o){switch((0,z.i)(s)){case"FlowGraphInteger":return new Q.b(o(s.value,Z.value));case"Vector2":return new v.j(o(s.x,Z.x),o(s.y,Z.y));case"sO":return new v.n(o(s.x,Z.x),o(s.y,Z.y),o(s.z,Z.z));case"Vector4":return new v.p(o(s.x,Z.x),o(s.y,Z.y),o(s.z,Z.z),o(s.w,Z.w));case"Quaternion":return new v.e(o(s.x,Z.x),o(s.y,Z.y),o(s.z,Z.z),o(s.w,Z.w));case"Matrix":return v.b.oO(s.m.map(((s,t)=>o(s,Z.m[t]))));case"Matrix2D":return new D.c(s.m.map(((s,t)=>o(s,Z.m[t]))));case"Matrix3D":return new D.d(s.m.map(((s,t)=>o(s,Z.m[t]))));default:return o((0,z.o)(s),(0,z.o)(Z))}}(0,t.f)("FlowGraphNegationBlock",c);class X extends S.e{constructor(s){super(j.d,j.d,j.d,((s,Z)=>this._polymorphicRemainder(s,Z)),"FlowGraphModuloBlock",s)}_polymorphicRemainder(s,Z){return w(s,Z,((s,Z)=>s%Z))}}(0,t.f)("FlowGraphModuloBlock",X);class W extends S.e{constructor(s){super(j.d,j.d,j.d,((s,Z)=>this._polymorphicMin(s,Z)),"FlowGraphMinBlock",s)}_polymorphicMin(s,Z){return w(s,Z,Math.min)}}(0,t.f)("FlowGraphMinBlock",W);class q extends S.e{constructor(s){super(j.d,j.d,j.d,((s,Z)=>this._polymorphicMax(s,Z)),"FlowGraphMaxBlock",s)}_polymorphicMax(s,Z){return w(s,Z,Math.max)}}function h(s,Z,o){return Math.min(Math.max(s,Math.min(Z,o)),Math.max(Z,o))}function M(s,Z,o,t){switch((0,z.i)(s)){case"FlowGraphInteger":return new Q.b(t(s.value,Z.value,o.value));case"Vector2":return new v.j(t(s.x,Z.x,o.x),t(s.y,Z.y,o.y));case"sO":return new v.n(t(s.x,Z.x,o.x),t(s.y,Z.y,o.y),t(s.z,Z.z,o.z));case"Vector4":return new v.p(t(s.x,Z.x,o.x),t(s.y,Z.y,o.y),t(s.z,Z.z,o.z),t(s.w,Z.w,o.w));case"Quaternion":return new v.e(t(s.x,Z.x,o.x),t(s.y,Z.y,o.y),t(s.z,Z.z,o.z),t(s.w,Z.w,o.w));case"Matrix":return v.b.oO(s.m.map(((s,j)=>t(s,Z.m[j],o.m[j]))));case"Matrix2D":return new D.c(s.m.map(((s,j)=>t(s,Z.m[j],o.m[j]))));case"Matrix3D":return new D.d(s.m.map(((s,j)=>t(s,Z.m[j],o.m[j]))));default:return t((0,z.o)(s),(0,z.o)(Z),(0,z.o)(o))}}(0,t.f)("FlowGraphMaxBlock",q);class x extends B{constructor(s){super(j.d,j.d,j.d,j.d,((s,Z,o)=>this._polymorphicClamp(s,Z,o)),"FlowGraphClampBlock",s)}_polymorphicClamp(s,Z,o){return M(s,Z,o,h)}}function k(s){return Math.min(Math.max(s,0),1)}(0,t.f)("FlowGraphClampBlock",x);class y extends G.b{constructor(s){super(j.d,j.d,(s=>this._polymorphicSaturate(s)),"FlowGraphSaturateBlock",s)}_polymorphicSaturate(s){return i(s,k)}}function I(s,Z,o){return(1-o)*s+o*Z}(0,t.f)("FlowGraphSaturateBlock",y);class C extends B{constructor(s){super(j.d,j.d,j.d,j.d,((s,Z,o)=>this._polymorphicInterpolate(s,Z,o)),"FlowGraphMathInterpolationBlock",s)}_polymorphicInterpolate(s,Z,o){return M(s,Z,o,I)}}(0,t.f)("FlowGraphMathInterpolationBlock",C);class K extends S.e{constructor(s){super(j.d,j.d,j.g,((s,Z)=>this._polymorphicEq(s,Z)),"FlowGraphEqualityBlock",s)}_polymorphicEq(s,Z){const o=(0,z.i)(s),t=(0,z.i)(Z);return typeof s===typeof Z&&((0,z.f)(o,t)||(0,z.e)(o,t)||(0,z.c)(o,t)?s.equals(Z):s===Z)}}function p(s,Z,o){if((0,z.s)(s)&&(0,z.s)(Z))return o((0,z.o)(s),(0,z.o)(Z));throw new Error(`Cannot compare ${s} and ${Z}`)}(0,t.f)("FlowGraphEqualityBlock",K);class E extends S.e{constructor(s){super(j.d,j.d,j.g,((s,Z)=>this._polymorphicLessThan(s,Z)),"FlowGraphLessThanBlock",s)}_polymorphicLessThan(s,Z){return p(s,Z,((s,Z)=>s<Z))}}(0,t.f)("FlowGraphLessThanBlock",E);class P extends S.e{constructor(s){super(j.d,j.d,j.g,((s,Z)=>this._polymorphicLessThanOrEqual(s,Z)),"FlowGraphLessThanOrEqualBlock",s)}_polymorphicLessThanOrEqual(s,Z){return p(s,Z,((s,Z)=>s<=Z))}}(0,t.f)("FlowGraphLessThanOrEqualBlock",P);class r extends S.e{constructor(s){super(j.d,j.d,j.g,((s,Z)=>this._polymorphicGreaterThan(s,Z)),"FlowGraphGreaterThanBlock",s)}_polymorphicGreaterThan(s,Z){return p(s,Z,((s,Z)=>s>Z))}}(0,t.f)("FlowGraphGreaterThanBlock",r);class T extends S.e{constructor(s){super(j.d,j.d,j.g,((s,Z)=>this._polymorphicGreaterThanOrEqual(s,Z)),"FlowGraphGreaterThanOrEqualBlock",s)}_polymorphicGreaterThanOrEqual(s,Z){return p(s,Z,((s,Z)=>s>=Z))}}(0,t.f)("FlowGraphGreaterThanOrEqualBlock",T);class m extends G.b{constructor(s){super(j.d,j.g,(s=>this._polymorphicIsNan(s)),"FlowGraphIsNaNBlock",s)}_polymorphicIsNan(s){if((0,z.s)(s,!0))return isNaN((0,z.o)(s));throw new Error(`Cannot get NaN of ${s}`)}}(0,t.f)("FlowGraphIsNaNBlock",m);class n extends G.b{constructor(s){super(j.d,j.g,(s=>this._polymorphicIsInf(s)),"FlowGraphIsInfBlock",s)}_polymorphicIsInf(s){if((0,z.s)(s))return!isFinite((0,z.o)(s));throw new Error(`Cannot get isInf of ${s}`)}}(0,t.f)("FlowGraphIsInfBlock",n);class J extends G.b{constructor(s){super(j.d,j.d,(s=>this._polymorphicDegToRad(s)),"FlowGraphDegToRadBlock",s)}_degToRad(s){return s*Math.PI/180}_polymorphicDegToRad(s){return i(s,this._degToRad)}}(0,t.f)("FlowGraphDegToRadBlock",J);class ss extends G.b{constructor(s){super(j.d,j.d,(s=>this._polymorphicRadToDeg(s)),"FlowGraphRadToDegBlock",s)}_radToDeg(s){return 180*s/Math.PI}_polymorphicRadToDeg(s){return i(s,this._radToDeg)}}(0,t.f)("FlowGraphRadToDegBlock",ss);class Zs extends G.b{constructor(s){super(j.w,j.w,(s=>this._polymorphicSin(s)),"FlowGraphSinBlock",s)}_polymorphicSin(s){return i(s,Math.sin)}}class os extends G.b{constructor(s){super(j.w,j.w,(s=>this._polymorphicCos(s)),"FlowGraphCosBlock",s)}_polymorphicCos(s){return i(s,Math.cos)}}class ts extends G.b{constructor(s){super(j.w,j.w,(s=>this._polymorphicTan(s)),"FlowGraphTanBlock",s)}_polymorphicTan(s){return i(s,Math.tan)}}class js extends G.b{constructor(s){super(j.w,j.w,(s=>this._polymorphicAsin(s)),"FlowGraphASinBlock",s)}_polymorphicAsin(s){return i(s,Math.asin)}}(0,t.f)("FlowGraphASinBlock",js);class Ss extends G.b{constructor(s){super(j.w,j.w,(s=>this._polymorphicAcos(s)),"FlowGraphACosBlock",s)}_polymorphicAcos(s){return i(s,Math.acos)}}(0,t.f)("FlowGraphACosBlock",Ss);class as extends G.b{constructor(s){super(j.w,j.w,(s=>this._polymorphicAtan(s)),"FlowGraphATanBlock",s)}_polymorphicAtan(s){return i(s,Math.atan)}}(0,t.f)("FlowGraphATanBlock",as);class Os extends S.e{constructor(s){super(j.d,j.d,j.d,((s,Z)=>this._polymorphicAtan2(s,Z)),"FlowGraphATan2Block",s)}_polymorphicAtan2(s,Z){return w(s,Z,Math.atan2)}}(0,t.f)("FlowGraphATan2Block",Os);class vs extends G.b{constructor(s){super(j.d,j.d,(s=>this._polymorphicSinh(s)),"FlowGraphSinhBlock",s)}_polymorphicSinh(s){return i(s,Math.sinh)}}(0,t.f)("FlowGraphSinhBlock",vs);class Gs extends G.b{constructor(s){super(j.d,j.d,(s=>this._polymorphicCosh(s)),"FlowGraphCoshBlock",s)}_polymorphicCosh(s){return i(s,Math.cosh)}}(0,t.f)("FlowGraphCoshBlock",Gs);class Bs extends G.b{constructor(s){super(j.d,j.d,(s=>this._polymorphicTanh(s)),"FlowGraphTanhBlock",s)}_polymorphicTanh(s){return i(s,Math.tanh)}}(0,t.f)("FlowGraphTanhBlock",Bs);class Qs extends G.b{constructor(s){super(j.d,j.w,(s=>this._polymorphicAsinh(s)),"FlowGraphASinhBlock",s)}_polymorphicAsinh(s){return i(s,Math.asinh)}}(0,t.f)("FlowGraphASinhBlock",Qs);class Ds extends G.b{constructor(s){super(j.d,j.w,(s=>this._polymorphicAcosh(s)),"FlowGraphACoshBlock",s)}_polymorphicAcosh(s){return i(s,Math.acosh)}}(0,t.f)("FlowGraphACoshBlock",Ds);class zs extends G.b{constructor(s){super(j.d,j.w,(s=>this._polymorphicAtanh(s)),"FlowGraphATanhBlock",s)}_polymorphicAtanh(s){return i(s,Math.atanh)}}(0,t.f)("FlowGraphATanhBlock",zs);class Ys extends G.b{constructor(s){super(j.d,j.w,(s=>this._polymorphicExp(s)),"FlowGraphExponentialBlock",s)}_polymorphicExp(s){return i(s,Math.exp)}}(0,t.f)("FlowGraphExponentialBlock",Ys);class bs extends G.b{constructor(s){super(j.d,j.w,(s=>this._polymorphicLog(s)),"FlowGraphLogBlock",s)}_polymorphicLog(s){return i(s,Math.log)}}(0,t.f)("FlowGraphLogBlock",bs);class fs extends G.b{constructor(s){super(j.d,j.w,(s=>this._polymorphicLog2(s)),"FlowGraphLog2Block",s)}_polymorphicLog2(s){return i(s,Math.log2)}}(0,t.f)("FlowGraphLog2Block",fs);class As extends G.b{constructor(s){super(j.d,j.w,(s=>this._polymorphicLog10(s)),"FlowGraphLog10Block",s)}_polymorphicLog10(s){return i(s,Math.log10)}}(0,t.f)("FlowGraphLog10Block",As);class ds extends G.b{constructor(s){super(j.d,j.w,(s=>this._polymorphicSqrt(s)),"FlowGraphSquareRootBlock",s)}_polymorphicSqrt(s){return i(s,Math.sqrt)}}(0,t.f)("FlowGraphSquareRootBlock",ds);class Us extends G.b{constructor(s){super(j.d,j.w,(s=>this._polymorphicCubeRoot(s)),"FlowGraphCubeRootBlock",s)}_polymorphicCubeRoot(s){return i(s,Math.cbrt)}}(0,t.f)("FlowGraphCubeRootBlock",Us);class us extends S.e{constructor(s){super(j.d,j.w,j.w,((s,Z)=>this._polymorphicPow(s,Z)),"FlowGraphPowerBlock",s)}_polymorphicPow(s,Z){return w(s,Z,Math.pow)}}(0,t.f)("FlowGraphPowerBlock",us);class Hs extends G.b{constructor(s){super((0,j.U)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),(0,j.U)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),(s=>"boolean"===typeof s?!s:"number"===typeof s?~s:new Q.b(~s.value)),"FlowGraphBitwiseNotBlock",s)}}(0,t.f)("FlowGraphBitwiseNotBlock",Hs);class Fs extends S.e{constructor(s){super((0,j.U)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),(0,j.U)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),(0,j.U)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),((s,Z)=>{if("boolean"===typeof s&&"boolean"===typeof Z)return s&&Z;if("number"===typeof s&&"number"===typeof Z)return s&Z;if("object"===typeof s&&"object"===typeof Z)return new Q.b(s.value&Z.value);throw new Error(`Cannot perform bitwise AND on ${s} and ${Z}`)}),"FlowGraphBitwiseAndBlock",s)}}(0,t.f)("FlowGraphBitwiseAndBlock",Fs);class is extends S.e{constructor(s){super((0,j.U)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),(0,j.U)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),(0,j.U)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),((s,Z)=>{if("boolean"===typeof s&&"boolean"===typeof Z)return s||Z;if("number"===typeof s&&"number"===typeof Z)return s|Z;if("object"===typeof s&&"object"===typeof Z)return new Q.b(s.value|Z.value);throw new Error(`Cannot perform bitwise OR on ${s} and ${Z}`)}),"FlowGraphBitwiseOrBlock",s)}}(0,t.f)("FlowGraphBitwiseOrBlock",is);class Ns extends S.e{constructor(s){super((0,j.U)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),(0,j.U)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),(0,j.U)((null===s||void 0===s?void 0:s.valueType)||"FlowGraphInteger"),((s,Z)=>{if("boolean"===typeof s&&"boolean"===typeof Z)return s!==Z;if("number"===typeof s&&"number"===typeof Z)return s^Z;if("object"===typeof s&&"object"===typeof Z)return new Q.b(s.value^Z.value);throw new Error(`Cannot perform bitwise XOR on ${s} and ${Z}`)}),"FlowGraphBitwiseXorBlock",s)}}(0,t.f)("FlowGraphBitwiseXorBlock",Ns);class Ls extends S.e{constructor(s){super(j.j,j.j,j.j,((s,Z)=>new Q.b(s.value<<Z.value)),"FlowGraphBitwiseLeftShiftBlock",s)}}(0,t.f)("FlowGraphBitwiseLeftShiftBlock",Ls);class Vs extends S.e{constructor(s){super(j.j,j.j,j.j,((s,Z)=>new Q.b(s.value>>Z.value)),"FlowGraphBitwiseRightShiftBlock",s)}}(0,t.f)("FlowGraphBitwiseRightShiftBlock",Vs);class gs extends G.b{constructor(s){super(j.j,j.j,(s=>new Q.b(Math.clz32(s.value))),"FlowGraphLeadingZerosBlock",s)}}(0,t.f)("FlowGraphLeadingZerosBlock",gs);class ls extends G.b{constructor(s){super(j.j,j.j,(s=>new Q.b(s.value?31-Math.clz32(s.value&-s.value):32)),"FlowGraphTrailingZerosBlock",s)}}(0,t.f)("FlowGraphTrailingZerosBlock",ls);class Rs extends G.b{constructor(s){super(j.j,j.j,(s=>new Q.b(function(s){let Z=0;for(;s;)Z+=1&s,s>>=1;return Z}(s.value))),"FlowGraphOneBitsCounterBlock",s)}}(0,t.f)("FlowGraphOneBitsCounterBlock",Rs)},14265:(s,Z,o)=>{o.d(Z,{e:()=>j});var t=o(14271);class j extends t.e{constructor(s,Z,o,t,j,S){super(o,S),this._operation=t,this._className=j,this.a=this.registerDataInput("a",s),this.b=this.registerDataInput("b",Z)}_doOperation(s){const Z=this.a.getValue(s),o=this.b.getValue(s);return this._operation(Z,o)}getClassName(){return this._className}}},14271:(s,Z,o)=>{o.d(Z,{e:()=>O});var t=o(12802),j=o(12775);const S="cachedOperationValue",a="cachedExecutionId";class O extends t.e{constructor(s,Z){super(Z),this.value=this.registerDataOutput("value",s),this.isValid=this.registerDataOutput("isValid",j.g)}_updateOutputs(s){const Z=s._getExecutionVariable(this,a,-1),o=s._getExecutionVariable(this,S,null);if(void 0!==o&&null!==o&&Z===s.executionId)this.isValid.setValue(!0,s),this.value.setValue(o,s);else try{const Z=this._doOperation(s);if(void 0===Z||null===Z)return void this.isValid.setValue(!1,s);s._setExecutionVariable(this,S,Z),s._setExecutionVariable(this,a,s.executionId),this.value.setValue(Z,s),this.isValid.setValue(!0,s)}catch(t){this.isValid.setValue(!1,s)}}}},14273:(s,Z,o)=>{o.d(Z,{b:()=>j});var t=o(14271);class j extends t.e{constructor(s,Z,o,t,j){super(Z,j),this._operation=o,this._className=t,this.a=this.registerDataInput("a",s)}_doOperation(s){return this._operation(this.a.getValue(s))}getClassName(){return this._className}}}}]);