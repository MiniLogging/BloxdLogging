"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[68],{14112:(h,d,m)=>{m.r(d),m.d(d,{FlowGraphAbsBlock:()=>i,FlowGraphAcosBlock:()=>bh,FlowGraphAcoshBlock:()=>Eh,FlowGraphAddBlock:()=>R,FlowGraphAsinBlock:()=>Ah,FlowGraphAsinhBlock:()=>qh,FlowGraphAtan2Block:()=>ah,FlowGraphAtanBlock:()=>wh,FlowGraphAtanhBlock:()=>Ih,FlowGraphBitwiseAndBlock:()=>oh,FlowGraphBitwiseLeftShiftBlock:()=>gh,FlowGraphBitwiseNotBlock:()=>Th,FlowGraphBitwiseOrBlock:()=>yh,FlowGraphBitwiseRightShiftBlock:()=>Fh,FlowGraphBitwiseXorBlock:()=>ih,FlowGraphCeilBlock:()=>H,FlowGraphClampBlock:()=>Q,FlowGraphCosBlock:()=>mh,FlowGraphCoshBlock:()=>Sh,FlowGraphCubeRootBlock:()=>vh,FlowGraphDegToRadBlock:()=>G,FlowGraphDivideBlock:()=>B,FlowGraphEBlock:()=>v,FlowGraphEqualityBlock:()=>O,FlowGraphExpBlock:()=>Rh,FlowGraphFloorBlock:()=>f,FlowGraphFractionBlock:()=>k,FlowGraphGreaterThanBlock:()=>X,FlowGraphGreaterThanOrEqualBlock:()=>z,FlowGraphInfBlock:()=>T,FlowGraphIsInfinityBlock:()=>P,FlowGraphIsNanBlock:()=>u,FlowGraphLeadingZerosBlock:()=>fh,FlowGraphLessThanBlock:()=>p,FlowGraphLessThanOrEqualBlock:()=>e,FlowGraphLog10Block:()=>Bh,FlowGraphLog2Block:()=>Lh,FlowGraphLogBlock:()=>Zh,FlowGraphMathInterpolationBlock:()=>J,FlowGraphMaxBlock:()=>r,FlowGraphMinBlock:()=>W,FlowGraphModuloBlock:()=>N,FlowGraphMultiplyBlock:()=>L,FlowGraphNaNBlock:()=>o,FlowGraphNegationBlock:()=>l,FlowGraphOneBitsCounterBlock:()=>ch,FlowGraphPiBlock:()=>C,FlowGraphPowerBlock:()=>Ch,FlowGraphRadToDegBlock:()=>hh,FlowGraphRandomBlock:()=>V,FlowGraphRoundBlock:()=>c,FlowGraphSaturateBlock:()=>U,FlowGraphSignBlock:()=>g,FlowGraphSinBlock:()=>dh,FlowGraphSinhBlock:()=>Dh,FlowGraphSquareRootBlock:()=>Vh,FlowGraphSubtractBlock:()=>Z,FlowGraphTanBlock:()=>jh,FlowGraphTanhBlock:()=>Mh,FlowGraphTrailingZerosBlock:()=>Hh,FlowGraphTruncBlock:()=>F});var j=m(11080),A=m(12671),b=m(14121),w=m(14124);class a extends w.d{constructor(h,d,m,j){super(h,j),this._operation=d,this._className=m}_doOperation(h){return this._operation(h)}getClassName(){return this._className}}var D=m(11058),S=m(14128);class M extends w.d{constructor(h,d,m,j,A,b,w){super(j,w),this._operation=A,this._className=b,this.a=this.registerDataInput("a",h),this.b=this.registerDataInput("b",d),this.c=this.registerDataInput("c",m)}_doOperation(h){return this._operation(this.a.getValue(h),this.b.getValue(h),this.c.getValue(h))}getClassName(){return this._className}}var q=m(12668),E=m(12674),I=m(12695);class R extends b.b{constructor(h){super((0,A.M)(null===h||void 0===h?void 0:h.type),(0,A.M)(null===h||void 0===h?void 0:h.type),(0,A.M)(null===h||void 0===h?void 0:h.type),((h,d)=>this._polymorphicAdd(h,d)),"FlowGraphAddBlock",h)}_polymorphicAdd(h,d){const m=(0,I.l)(h),j=(0,I.l)(d);if((0,I.i)(m,j)||(0,I.f)(m,j)||(0,I.e)(m,j))return h.add(d);if("Quaternion"===m||"Vector4"===j)return new D.m(h.x,h.y,h.z,h.w).addInPlace(d);if("Vector4"===m||"Quaternion"===j)return h.add(d);var A;if(null!==(A=this.config)&&void 0!==A&&A.preventIntegerFloatArithmetic&&typeof h!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,I.s)(h)+(0,I.s)(d)}}(0,j.i)("FlowGraphAddBlock",R);class Z extends b.b{constructor(h){super((0,A.M)(null===h||void 0===h?void 0:h.type),(0,A.M)(null===h||void 0===h?void 0:h.type),(0,A.M)(null===h||void 0===h?void 0:h.type),((h,d)=>this._polymorphicSubtract(h,d)),"FlowGraphSubtractBlock",h)}_polymorphicSubtract(h,d){const m=(0,I.l)(h),j=(0,I.l)(d);if((0,I.i)(m,j)||(0,I.e)(m,j)||(0,I.f)(m,j))return h.fm(d);if("Quaternion"===m||"Vector4"===j)return new D.m(h.x,h.y,h.z,h.w).Dq(d);if("Vector4"===m||"Quaternion"===j)return h.fm(d);var A;if(null!==(A=this.config)&&void 0!==A&&A.preventIntegerFloatArithmetic&&typeof h!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,I.s)(h)-(0,I.s)(d)}}(0,j.i)("FlowGraphSubtractBlock",Z);class L extends b.b{constructor(h){super((0,A.M)(null===h||void 0===h?void 0:h.type),(0,A.M)(null===h||void 0===h?void 0:h.type),(0,A.M)(null===h||void 0===h?void 0:h.type),((h,d)=>this._polymorphicMultiply(h,d)),"FlowGraphMultiplyBlock",h)}_polymorphicMultiply(h,d){const m=(0,I.l)(h),j=(0,I.l)(d);if((0,I.i)(m,j)||(0,I.e)(m,j))return h.multiply(d);if("Quaternion"===m||"Vector4"===j)return new D.m(h.x,h.y,h.z,h.w).multiplyInPlace(d);if("Vector4"===m||"Quaternion"===j)return h.multiply(d);if((0,I.f)(m,j)){var A;if(null!==(A=this.config)&&void 0!==A&&A.useMatrixPerComponent){const j=h.m;for(let h=0;h<j.length;h++)j[h]*=d.m[h];return"Matrix2D"===m?new E.e(j):"Matrix3D"===m?new E.f(j):D.b.Ud(j)}return d.multiply(h)}var b;if(null!==(b=this.config)&&void 0!==b&&b.preventIntegerFloatArithmetic&&typeof h!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,I.s)(h)*(0,I.s)(d)}}(0,j.i)("FlowGraphMultiplyBlock",L);class B extends b.b{constructor(h){super((0,A.M)(null===h||void 0===h?void 0:h.type),(0,A.M)(null===h||void 0===h?void 0:h.type),(0,A.M)(null===h||void 0===h?void 0:h.type),((h,d)=>this._polymorphicDivide(h,d)),"FlowGraphDivideBlock",h)}_polymorphicDivide(h,d){const m=(0,I.l)(h),j=(0,I.l)(d);if((0,I.i)(m,j)||(0,I.e)(m,j))return h.divide(d);if("Quaternion"===m||"Quaternion"===j){const m=h.clone();return m.x/=d.x,m.y/=d.y,m.z/=d.z,m.w/=d.w,m}if("Quaternion"===m||"Vector4"===j)return new D.m(h.x,h.y,h.z,h.w).divideInPlace(d);if("Vector4"===m||"Quaternion"===j)return h.divide(d);if((0,I.f)(m,j)){var A;if(null!==(A=this.config)&&void 0!==A&&A.useMatrixPerComponent){const j=h.m;for(let h=0;h<j.length;h++)j[h]/=d.m[h];return"Matrix2D"===m?new E.e(j):"Matrix3D"===m?new E.f(j):D.b.Ud(j)}return h.divide(d)}var b;if(null!==(b=this.config)&&void 0!==b&&b.preventIntegerFloatArithmetic&&typeof h!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,I.s)(h)/(0,I.s)(d)}}(0,j.i)("FlowGraphDivideBlock",B);class V extends a{constructor(h){super(A.y,(h=>this._random(h)),"FlowGraphRandomBlock",h),this.min=this.registerDataInput("min",A.y,(null===h||void 0===h?void 0:h.min)??0),this.max=this.registerDataInput("max",A.y,(null===h||void 0===h?void 0:h.max)??1),null!==h&&void 0!==h&&h.seed&&(this._seed=h.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const h=1e4*Math.sin(this._seed++);return h-Math.floor(h)}return Math.random()}_random(h){const d=this.min.getValue(h),m=this.max.getValue(h);return this._getRandomValue()*(m-d)+d}}(0,j.i)("FlowGraphRandomBlock",V);class v extends a{constructor(h){super(A.y,(()=>Math.E),"FlowGraphEBlock",h)}}(0,j.i)("FlowGraphEBlock",v);class C extends a{constructor(h){super(A.y,(()=>Math.PI),"FlowGraphPIBlock",h)}}(0,j.i)("FlowGraphPIBlock",C);class T extends a{constructor(h){super(A.y,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",h)}}(0,j.i)("FlowGraphInfBlock",T);class o extends a{constructor(h){super(A.y,(()=>Number.NaN),"FlowGraphNaNBlock",h)}}function y(h,d){switch((0,I.l)(h)){case"FlowGraphInteger":return new q.b(d(h.value));case"Vector2":return new D.h(d(h.x),d(h.y));case"Qd":return new D.i(d(h.x),d(h.y),d(h.z));case"Vector4":return new D.m(d(h.x),d(h.y),d(h.z),d(h.w));case"Quaternion":return new D.c(d(h.x),d(h.y),d(h.z),d(h.w));case"Matrix":return D.b.Ud(h.m.map(d));case"Matrix2D":return new E.e(h.m.map(d));case"Matrix3D":return new E.f(h.m.map(d));default:return d(h)}}(0,j.i)("FlowGraphNaNBlock",o);class i extends S.b{constructor(h){super(A.y,A.y,(h=>this._polymorphicAbs(h)),"FlowGraphAbsBlock",h)}_polymorphicAbs(h){return y(h,Math.abs)}}(0,j.i)("FlowGraphAbsBlock",i);class g extends S.b{constructor(h){super(A.y,A.y,(h=>this._polymorphicSign(h)),"FlowGraphSignBlock",h)}_polymorphicSign(h){return y(h,Math.sign)}}(0,j.i)("FlowGraphSignBlock",g);class F extends S.b{constructor(h){super(A.y,A.y,(h=>this._polymorphicTrunc(h)),"FlowGraphTruncBlock",h)}_polymorphicTrunc(h){return y(h,Math.trunc)}}(0,j.i)("FlowGraphTruncBlock",F);class f extends S.b{constructor(h){super(A.y,A.y,(h=>this._polymorphicFloor(h)),"FlowGraphFloorBlock",h)}_polymorphicFloor(h){return y(h,Math.floor)}}(0,j.i)("FlowGraphFloorBlock",f);class H extends S.b{constructor(h){super(A.e,A.e,(h=>this._polymorphicCeiling(h)),"FlowGraphCeilBlock",h)}_polymorphicCeiling(h){return y(h,Math.ceil)}}(0,j.i)("FlowGraphCeilBlock",H);class c extends S.b{constructor(h){super(A.e,A.e,(h=>this._polymorphicRound(h)),"FlowGraphRoundBlock",h)}_polymorphicRound(h){return y(h,(h=>{var d;return h<0&&null!==(d=this.config)&&void 0!==d&&d.roundHalfAwayFromZero?-Math.round(-h):Math.round(h)}))}}(0,j.i)("FlowGraphRoundBlock",c);class k extends S.b{constructor(h){super(A.e,A.e,(h=>this._polymorphicFraction(h)),"FlowGraphFractBlock",h)}_polymorphicFraction(h){return y(h,(h=>h-Math.floor(h)))}}(0,j.i)("FlowGraphFractBlock",k);class l extends S.b{constructor(h){super(A.e,A.e,(h=>this._polymorphicNeg(h)),"FlowGraphNegationBlock",h)}_polymorphicNeg(h){return y(h,(h=>-h))}}function K(h,d,m){switch((0,I.l)(h)){case"FlowGraphInteger":return new q.b(m(h.value,d.value));case"Vector2":return new D.h(m(h.x,d.x),m(h.y,d.y));case"Qd":return new D.i(m(h.x,d.x),m(h.y,d.y),m(h.z,d.z));case"Vector4":return new D.m(m(h.x,d.x),m(h.y,d.y),m(h.z,d.z),m(h.w,d.w));case"Quaternion":return new D.c(m(h.x,d.x),m(h.y,d.y),m(h.z,d.z),m(h.w,d.w));case"Matrix":return D.b.Ud(h.m.map(((h,j)=>m(h,d.m[j]))));case"Matrix2D":return new E.e(h.m.map(((h,j)=>m(h,d.m[j]))));case"Matrix3D":return new E.f(h.m.map(((h,j)=>m(h,d.m[j]))));default:return m((0,I.s)(h),(0,I.s)(d))}}(0,j.i)("FlowGraphNegationBlock",l);class N extends b.b{constructor(h){super(A.e,A.e,A.e,((h,d)=>this._polymorphicRemainder(h,d)),"FlowGraphModuloBlock",h)}_polymorphicRemainder(h,d){return K(h,d,((h,d)=>h%d))}}(0,j.i)("FlowGraphModuloBlock",N);class W extends b.b{constructor(h){super(A.e,A.e,A.e,((h,d)=>this._polymorphicMin(h,d)),"FlowGraphMinBlock",h)}_polymorphicMin(h,d){return K(h,d,Math.min)}}(0,j.i)("FlowGraphMinBlock",W);class r extends b.b{constructor(h){super(A.e,A.e,A.e,((h,d)=>this._polymorphicMax(h,d)),"FlowGraphMaxBlock",h)}_polymorphicMax(h,d){return K(h,d,Math.max)}}function Y(h,d,m){return Math.min(Math.max(h,Math.min(d,m)),Math.max(d,m))}function x(h,d,m,j){switch((0,I.l)(h)){case"FlowGraphInteger":return new q.b(j(h.value,d.value,m.value));case"Vector2":return new D.h(j(h.x,d.x,m.x),j(h.y,d.y,m.y));case"Qd":return new D.i(j(h.x,d.x,m.x),j(h.y,d.y,m.y),j(h.z,d.z,m.z));case"Vector4":return new D.m(j(h.x,d.x,m.x),j(h.y,d.y,m.y),j(h.z,d.z,m.z),j(h.w,d.w,m.w));case"Quaternion":return new D.c(j(h.x,d.x,m.x),j(h.y,d.y,m.y),j(h.z,d.z,m.z),j(h.w,d.w,m.w));case"Matrix":return D.b.Ud(h.m.map(((h,A)=>j(h,d.m[A],m.m[A]))));case"Matrix2D":return new E.e(h.m.map(((h,A)=>j(h,d.m[A],m.m[A]))));case"Matrix3D":return new E.f(h.m.map(((h,A)=>j(h,d.m[A],m.m[A]))));default:return j((0,I.s)(h),(0,I.s)(d),(0,I.s)(m))}}(0,j.i)("FlowGraphMaxBlock",r);class Q extends M{constructor(h){super(A.e,A.e,A.e,A.e,((h,d,m)=>this._polymorphicClamp(h,d,m)),"FlowGraphClampBlock",h)}_polymorphicClamp(h,d,m){return x(h,d,m,Y)}}function t(h){return Math.min(Math.max(h,0),1)}(0,j.i)("FlowGraphClampBlock",Q);class U extends S.b{constructor(h){super(A.e,A.e,(h=>this._polymorphicSaturate(h)),"FlowGraphSaturateBlock",h)}_polymorphicSaturate(h){return y(h,t)}}function s(h,d,m){return(1-m)*h+m*d}(0,j.i)("FlowGraphSaturateBlock",U);class J extends M{constructor(h){super(A.e,A.e,A.e,A.e,((h,d,m)=>this._polymorphicInterpolate(h,d,m)),"FlowGraphMathInterpolationBlock",h)}_polymorphicInterpolate(h,d,m){return x(h,d,m,s)}}(0,j.i)("FlowGraphMathInterpolationBlock",J);class O extends b.b{constructor(h){super(A.e,A.e,A.f,((h,d)=>this._polymorphicEq(h,d)),"FlowGraphEqualityBlock",h)}_polymorphicEq(h,d){const m=(0,I.l)(h),j=(0,I.l)(d);return typeof h===typeof d&&((0,I.i)(m,j)||(0,I.f)(m,j)||(0,I.e)(m,j)?h.equals(d):h===d)}}function n(h,d,m){if((0,I.t)(h)&&(0,I.t)(d))return m((0,I.s)(h),(0,I.s)(d));throw new Error(`Cannot compare ${h} and ${d}`)}(0,j.i)("FlowGraphEqualityBlock",O);class p extends b.b{constructor(h){super(A.e,A.e,A.f,((h,d)=>this._polymorphicLessThan(h,d)),"FlowGraphLessThanBlock",h)}_polymorphicLessThan(h,d){return n(h,d,((h,d)=>h<d))}}(0,j.i)("FlowGraphLessThanBlock",p);class e extends b.b{constructor(h){super(A.e,A.e,A.f,((h,d)=>this._polymorphicLessThanOrEqual(h,d)),"FlowGraphLessThanOrEqualBlock",h)}_polymorphicLessThanOrEqual(h,d){return n(h,d,((h,d)=>h<=d))}}(0,j.i)("FlowGraphLessThanOrEqualBlock",e);class X extends b.b{constructor(h){super(A.e,A.e,A.f,((h,d)=>this._polymorphicGreaterThan(h,d)),"FlowGraphGreaterThanBlock",h)}_polymorphicGreaterThan(h,d){return n(h,d,((h,d)=>h>d))}}(0,j.i)("FlowGraphGreaterThanBlock",X);class z extends b.b{constructor(h){super(A.e,A.e,A.f,((h,d)=>this._polymorphicGreaterThanOrEqual(h,d)),"FlowGraphGreaterThanOrEqualBlock",h)}_polymorphicGreaterThanOrEqual(h,d){return n(h,d,((h,d)=>h>=d))}}(0,j.i)("FlowGraphGreaterThanOrEqualBlock",z);class u extends S.b{constructor(h){super(A.e,A.f,(h=>this._polymorphicIsNan(h)),"FlowGraphIsNaNBlock",h)}_polymorphicIsNan(h){if((0,I.t)(h,!0))return isNaN((0,I.s)(h));throw new Error(`Cannot get NaN of ${h}`)}}(0,j.i)("FlowGraphIsNaNBlock",u);class P extends S.b{constructor(h){super(A.e,A.f,(h=>this._polymorphicIsInf(h)),"FlowGraphIsInfBlock",h)}_polymorphicIsInf(h){if((0,I.t)(h))return!isFinite((0,I.s)(h));throw new Error(`Cannot get isInf of ${h}`)}}(0,j.i)("FlowGraphIsInfBlock",P);class G extends S.b{constructor(h){super(A.e,A.e,(h=>this._polymorphicDegToRad(h)),"FlowGraphDegToRadBlock",h)}_degToRad(h){return h*Math.PI/180}_polymorphicDegToRad(h){return y(h,this._degToRad)}}(0,j.i)("FlowGraphDegToRadBlock",G);class hh extends S.b{constructor(h){super(A.e,A.e,(h=>this._polymorphicRadToDeg(h)),"FlowGraphRadToDegBlock",h)}_radToDeg(h){return 180*h/Math.PI}_polymorphicRadToDeg(h){return y(h,this._radToDeg)}}(0,j.i)("FlowGraphRadToDegBlock",hh);class dh extends S.b{constructor(h){super(A.y,A.y,(h=>this._polymorphicSin(h)),"FlowGraphSinBlock",h)}_polymorphicSin(h){return y(h,Math.sin)}}class mh extends S.b{constructor(h){super(A.y,A.y,(h=>this._polymorphicCos(h)),"FlowGraphCosBlock",h)}_polymorphicCos(h){return y(h,Math.cos)}}class jh extends S.b{constructor(h){super(A.y,A.y,(h=>this._polymorphicTan(h)),"FlowGraphTanBlock",h)}_polymorphicTan(h){return y(h,Math.tan)}}class Ah extends S.b{constructor(h){super(A.y,A.y,(h=>this._polymorphicAsin(h)),"FlowGraphASinBlock",h)}_polymorphicAsin(h){return y(h,Math.asin)}}(0,j.i)("FlowGraphASinBlock",Ah);class bh extends S.b{constructor(h){super(A.y,A.y,(h=>this._polymorphicAcos(h)),"FlowGraphACosBlock",h)}_polymorphicAcos(h){return y(h,Math.acos)}}(0,j.i)("FlowGraphACosBlock",bh);class wh extends S.b{constructor(h){super(A.y,A.y,(h=>this._polymorphicAtan(h)),"FlowGraphATanBlock",h)}_polymorphicAtan(h){return y(h,Math.atan)}}(0,j.i)("FlowGraphATanBlock",wh);class ah extends b.b{constructor(h){super(A.e,A.e,A.e,((h,d)=>this._polymorphicAtan2(h,d)),"FlowGraphATan2Block",h)}_polymorphicAtan2(h,d){return K(h,d,Math.atan2)}}(0,j.i)("FlowGraphATan2Block",ah);class Dh extends S.b{constructor(h){super(A.e,A.e,(h=>this._polymorphicSinh(h)),"FlowGraphSinhBlock",h)}_polymorphicSinh(h){return y(h,Math.sinh)}}(0,j.i)("FlowGraphSinhBlock",Dh);class Sh extends S.b{constructor(h){super(A.e,A.e,(h=>this._polymorphicCosh(h)),"FlowGraphCoshBlock",h)}_polymorphicCosh(h){return y(h,Math.cosh)}}(0,j.i)("FlowGraphCoshBlock",Sh);class Mh extends S.b{constructor(h){super(A.e,A.e,(h=>this._polymorphicTanh(h)),"FlowGraphTanhBlock",h)}_polymorphicTanh(h){return y(h,Math.tanh)}}(0,j.i)("FlowGraphTanhBlock",Mh);class qh extends S.b{constructor(h){super(A.e,A.y,(h=>this._polymorphicAsinh(h)),"FlowGraphASinhBlock",h)}_polymorphicAsinh(h){return y(h,Math.asinh)}}(0,j.i)("FlowGraphASinhBlock",qh);class Eh extends S.b{constructor(h){super(A.e,A.y,(h=>this._polymorphicAcosh(h)),"FlowGraphACoshBlock",h)}_polymorphicAcosh(h){return y(h,Math.acosh)}}(0,j.i)("FlowGraphACoshBlock",Eh);class Ih extends S.b{constructor(h){super(A.e,A.y,(h=>this._polymorphicAtanh(h)),"FlowGraphATanhBlock",h)}_polymorphicAtanh(h){return y(h,Math.atanh)}}(0,j.i)("FlowGraphATanhBlock",Ih);class Rh extends S.b{constructor(h){super(A.e,A.y,(h=>this._polymorphicExp(h)),"FlowGraphExponentialBlock",h)}_polymorphicExp(h){return y(h,Math.exp)}}(0,j.i)("FlowGraphExponentialBlock",Rh);class Zh extends S.b{constructor(h){super(A.e,A.y,(h=>this._polymorphicLog(h)),"FlowGraphLogBlock",h)}_polymorphicLog(h){return y(h,Math.log)}}(0,j.i)("FlowGraphLogBlock",Zh);class Lh extends S.b{constructor(h){super(A.e,A.y,(h=>this._polymorphicLog2(h)),"FlowGraphLog2Block",h)}_polymorphicLog2(h){return y(h,Math.log2)}}(0,j.i)("FlowGraphLog2Block",Lh);class Bh extends S.b{constructor(h){super(A.e,A.y,(h=>this._polymorphicLog10(h)),"FlowGraphLog10Block",h)}_polymorphicLog10(h){return y(h,Math.log10)}}(0,j.i)("FlowGraphLog10Block",Bh);class Vh extends S.b{constructor(h){super(A.e,A.y,(h=>this._polymorphicSqrt(h)),"FlowGraphSquareRootBlock",h)}_polymorphicSqrt(h){return y(h,Math.sqrt)}}(0,j.i)("FlowGraphSquareRootBlock",Vh);class vh extends S.b{constructor(h){super(A.e,A.y,(h=>this._polymorphicCubeRoot(h)),"FlowGraphCubeRootBlock",h)}_polymorphicCubeRoot(h){return y(h,Math.cbrt)}}(0,j.i)("FlowGraphCubeRootBlock",vh);class Ch extends b.b{constructor(h){super(A.e,A.y,A.y,((h,d)=>this._polymorphicPow(h,d)),"FlowGraphPowerBlock",h)}_polymorphicPow(h,d){return K(h,d,Math.pow)}}(0,j.i)("FlowGraphPowerBlock",Ch);class Th extends S.b{constructor(h){super((0,A.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,A.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(h=>"boolean"===typeof h?!h:"number"===typeof h?~h:new q.b(~h.value)),"FlowGraphBitwiseNotBlock",h)}}(0,j.i)("FlowGraphBitwiseNotBlock",Th);class oh extends b.b{constructor(h){super((0,A.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,A.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,A.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),((h,d)=>{if("boolean"===typeof h&&"boolean"===typeof d)return h&&d;if("number"===typeof h&&"number"===typeof d)return h&d;if("object"===typeof h&&"object"===typeof d)return new q.b(h.value&d.value);throw new Error(`Cannot perform bitwise AND on ${h} and ${d}`)}),"FlowGraphBitwiseAndBlock",h)}}(0,j.i)("FlowGraphBitwiseAndBlock",oh);class yh extends b.b{constructor(h){super((0,A.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,A.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,A.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),((h,d)=>{if("boolean"===typeof h&&"boolean"===typeof d)return h||d;if("number"===typeof h&&"number"===typeof d)return h|d;if("object"===typeof h&&"object"===typeof d)return new q.b(h.value|d.value);throw new Error(`Cannot perform bitwise OR on ${h} and ${d}`)}),"FlowGraphBitwiseOrBlock",h)}}(0,j.i)("FlowGraphBitwiseOrBlock",yh);class ih extends b.b{constructor(h){super((0,A.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,A.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),(0,A.M)((null===h||void 0===h?void 0:h.valueType)||"FlowGraphInteger"),((h,d)=>{if("boolean"===typeof h&&"boolean"===typeof d)return h!==d;if("number"===typeof h&&"number"===typeof d)return h^d;if("object"===typeof h&&"object"===typeof d)return new q.b(h.value^d.value);throw new Error(`Cannot perform bitwise XOR on ${h} and ${d}`)}),"FlowGraphBitwiseXorBlock",h)}}(0,j.i)("FlowGraphBitwiseXorBlock",ih);class gh extends b.b{constructor(h){super(A.i,A.i,A.i,((h,d)=>new q.b(h.value<<d.value)),"FlowGraphBitwiseLeftShiftBlock",h)}}(0,j.i)("FlowGraphBitwiseLeftShiftBlock",gh);class Fh extends b.b{constructor(h){super(A.i,A.i,A.i,((h,d)=>new q.b(h.value>>d.value)),"FlowGraphBitwiseRightShiftBlock",h)}}(0,j.i)("FlowGraphBitwiseRightShiftBlock",Fh);class fh extends S.b{constructor(h){super(A.i,A.i,(h=>new q.b(Math.clz32(h.value))),"FlowGraphLeadingZerosBlock",h)}}(0,j.i)("FlowGraphLeadingZerosBlock",fh);class Hh extends S.b{constructor(h){super(A.i,A.i,(h=>new q.b(h.value?31-Math.clz32(h.value&-h.value):32)),"FlowGraphTrailingZerosBlock",h)}}(0,j.i)("FlowGraphTrailingZerosBlock",Hh);class ch extends S.b{constructor(h){super(A.i,A.i,(h=>new q.b(function(h){let d=0;for(;h;)d+=1&h,h>>=1;return d}(h.value))),"FlowGraphOneBitsCounterBlock",h)}}(0,j.i)("FlowGraphOneBitsCounterBlock",ch)},14121:(h,d,m)=>{m.d(d,{b:()=>A});var j=m(14124);class A extends j.d{constructor(h,d,m,j,A,b){super(m,b),this._operation=j,this._className=A,this.a=this.registerDataInput("a",h),this.b=this.registerDataInput("b",d)}_doOperation(h){const d=this.a.getValue(h),m=this.b.getValue(h);return this._operation(d,m)}getClassName(){return this._className}}},14124:(h,d,m)=>{m.d(d,{d:()=>a});var j=m(12687),A=m(12671);const b="cachedOperationValue",w="cachedExecutionId";class a extends j.d{constructor(h,d){super(d),this.value=this.registerDataOutput("value",h),this.isValid=this.registerDataOutput("isValid",A.f)}_updateOutputs(h){const d=h._getExecutionVariable(this,w,-1),m=h._getExecutionVariable(this,b,null);if(void 0!==m&&null!==m&&d===h.executionId)this.isValid.setValue(!0,h),this.value.setValue(m,h);else try{const d=this._doOperation(h);if(void 0===d||null===d)return void this.isValid.setValue(!1,h);h._setExecutionVariable(this,b,d),h._setExecutionVariable(this,w,h.executionId),this.value.setValue(d,h),this.isValid.setValue(!0,h)}catch(j){this.isValid.setValue(!1,h)}}}},14128:(h,d,m)=>{m.d(d,{b:()=>A});var j=m(14124);class A extends j.d{constructor(h,d,m,j,A){super(d,A),this._operation=m,this._className=j,this.a=this.registerDataInput("a",h)}_doOperation(h){return this._operation(this.a.getValue(h))}getClassName(){return this._className}}}}]);