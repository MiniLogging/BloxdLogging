"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[68],{14349:(Z,c,L)=>{L.r(c),L.d(c,{FlowGraphAbsBlock:()=>h,FlowGraphAcosBlock:()=>RZ,FlowGraphAcoshBlock:()=>tZ,FlowGraphAddBlock:()=>x,FlowGraphAsinBlock:()=>NZ,FlowGraphAsinhBlock:()=>iZ,FlowGraphAtan2Block:()=>VZ,FlowGraphAtanBlock:()=>GZ,FlowGraphAtanhBlock:()=>EZ,FlowGraphBitwiseAndBlock:()=>uZ,FlowGraphBitwiseLeftShiftBlock:()=>BZ,FlowGraphBitwiseNotBlock:()=>oZ,FlowGraphBitwiseOrBlock:()=>XZ,FlowGraphBitwiseRightShiftBlock:()=>DZ,FlowGraphBitwiseXorBlock:()=>hZ,FlowGraphCeilBlock:()=>H,FlowGraphClampBlock:()=>s,FlowGraphCosBlock:()=>LZ,FlowGraphCoshBlock:()=>JZ,FlowGraphCubeRootBlock:()=>PZ,FlowGraphDegToRadBlock:()=>C,FlowGraphDivideBlock:()=>w,FlowGraphEBlock:()=>P,FlowGraphEqualityBlock:()=>U,FlowGraphExpBlock:()=>xZ,FlowGraphFloorBlock:()=>e,FlowGraphFractionBlock:()=>W,FlowGraphGreaterThanBlock:()=>y,FlowGraphGreaterThanOrEqualBlock:()=>v,FlowGraphInfBlock:()=>o,FlowGraphIsInfinityBlock:()=>a,FlowGraphIsNanBlock:()=>Y,FlowGraphLeadingZerosBlock:()=>eZ,FlowGraphLessThanBlock:()=>n,FlowGraphLessThanOrEqualBlock:()=>g,FlowGraphLog10Block:()=>wZ,FlowGraphLog2Block:()=>OZ,FlowGraphLogBlock:()=>qZ,FlowGraphMathInterpolationBlock:()=>F,FlowGraphMaxBlock:()=>r,FlowGraphMinBlock:()=>Q,FlowGraphModuloBlock:()=>d,FlowGraphMultiplyBlock:()=>O,FlowGraphNaNBlock:()=>u,FlowGraphNegationBlock:()=>T,FlowGraphOneBitsCounterBlock:()=>lZ,FlowGraphPiBlock:()=>j,FlowGraphPowerBlock:()=>jZ,FlowGraphRadToDegBlock:()=>ZZ,FlowGraphRandomBlock:()=>M,FlowGraphRoundBlock:()=>l,FlowGraphSaturateBlock:()=>A,FlowGraphSignBlock:()=>B,FlowGraphSinBlock:()=>cZ,FlowGraphSinhBlock:()=>pZ,FlowGraphSquareRootBlock:()=>MZ,FlowGraphSubtractBlock:()=>q,FlowGraphTanBlock:()=>kZ,FlowGraphTanhBlock:()=>zZ,FlowGraphTrailingZerosBlock:()=>HZ,FlowGraphTruncBlock:()=>D});var k=L(11012),N=L(12825),R=L(14358),G=L(14364);class V extends G.d{constructor(Z,c,L,k){super(Z,k),this._operation=c,this._className=L}_doOperation(Z){return this._operation(Z)}getClassName(){return this._className}}var p=L(10993),J=L(14370);class z extends G.d{constructor(Z,c,L,k,N,R,G){super(k,G),this._operation=N,this._className=R,this.a=this.registerDataInput("a",Z),this.b=this.registerDataInput("b",c),this.c=this.registerDataInput("c",L)}_doOperation(Z){return this._operation(this.a.getValue(Z),this.b.getValue(Z),this.c.getValue(Z))}getClassName(){return this._className}}var i=L(12817),t=L(12834),E=L(12858);class x extends R.d{constructor(Z){super((0,N.H)(null===Z||void 0===Z?void 0:Z.type),(0,N.H)(null===Z||void 0===Z?void 0:Z.type),(0,N.H)(null===Z||void 0===Z?void 0:Z.type),((Z,c)=>this._polymorphicAdd(Z,c)),"FlowGraphAddBlock",Z)}_polymorphicAdd(Z,c){const L=(0,E.l)(Z),k=(0,E.l)(c);if((0,E.i)(L,k)||(0,E.f)(L,k)||(0,E.b)(L,k))return Z.add(c);if("Quaternion"===L||"Vector4"===k)return new p.j(Z.x,Z.y,Z.z,Z.w).addInPlace(c);if("Vector4"===L||"Quaternion"===k)return Z.add(c);var N;if(null!==(N=this.config)&&void 0!==N&&N.preventIntegerFloatArithmetic&&typeof Z!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,E.q)(Z)+(0,E.q)(c)}}(0,k.g)("FlowGraphAddBlock",x);class q extends R.d{constructor(Z){super((0,N.H)(null===Z||void 0===Z?void 0:Z.type),(0,N.H)(null===Z||void 0===Z?void 0:Z.type),(0,N.H)(null===Z||void 0===Z?void 0:Z.type),((Z,c)=>this._polymorphicSubtract(Z,c)),"FlowGraphSubtractBlock",Z)}_polymorphicSubtract(Z,c){const L=(0,E.l)(Z),k=(0,E.l)(c);if((0,E.i)(L,k)||(0,E.b)(L,k)||(0,E.f)(L,k))return Z.yL(c);if("Quaternion"===L||"Vector4"===k)return new p.j(Z.x,Z.y,Z.z,Z.w).sz(c);if("Vector4"===L||"Quaternion"===k)return Z.yL(c);var N;if(null!==(N=this.config)&&void 0!==N&&N.preventIntegerFloatArithmetic&&typeof Z!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,E.q)(Z)-(0,E.q)(c)}}(0,k.g)("FlowGraphSubtractBlock",q);class O extends R.d{constructor(Z){super((0,N.H)(null===Z||void 0===Z?void 0:Z.type),(0,N.H)(null===Z||void 0===Z?void 0:Z.type),(0,N.H)(null===Z||void 0===Z?void 0:Z.type),((Z,c)=>this._polymorphicMultiply(Z,c)),"FlowGraphMultiplyBlock",Z)}_polymorphicMultiply(Z,c){const L=(0,E.l)(Z),k=(0,E.l)(c);if((0,E.i)(L,k)||(0,E.b)(L,k))return Z.multiply(c);if("Quaternion"===L||"Vector4"===k)return new p.j(Z.x,Z.y,Z.z,Z.w).multiplyInPlace(c);if("Vector4"===L||"Quaternion"===k)return Z.multiply(c);if((0,E.f)(L,k)){var N;if(null!==(N=this.config)&&void 0!==N&&N.useMatrixPerComponent){const k=Z.m;for(let Z=0;Z<k.length;Z++)k[Z]*=c.m[Z];return"Matrix2D"===L?new t.e(k):"Matrix3D"===L?new t.g(k):p.b.oc(k)}return c.multiply(Z)}var R;if(null!==(R=this.config)&&void 0!==R&&R.preventIntegerFloatArithmetic&&typeof Z!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,E.q)(Z)*(0,E.q)(c)}}(0,k.g)("FlowGraphMultiplyBlock",O);class w extends R.d{constructor(Z){super((0,N.H)(null===Z||void 0===Z?void 0:Z.type),(0,N.H)(null===Z||void 0===Z?void 0:Z.type),(0,N.H)(null===Z||void 0===Z?void 0:Z.type),((Z,c)=>this._polymorphicDivide(Z,c)),"FlowGraphDivideBlock",Z)}_polymorphicDivide(Z,c){const L=(0,E.l)(Z),k=(0,E.l)(c);if((0,E.i)(L,k)||(0,E.b)(L,k))return Z.divide(c);if("Quaternion"===L||"Quaternion"===k){const L=Z.clone();return L.x/=c.x,L.y/=c.y,L.z/=c.z,L.w/=c.w,L}if("Quaternion"===L||"Vector4"===k)return new p.j(Z.x,Z.y,Z.z,Z.w).divideInPlace(c);if("Vector4"===L||"Quaternion"===k)return Z.divide(c);if((0,E.f)(L,k)){var N;if(null!==(N=this.config)&&void 0!==N&&N.useMatrixPerComponent){const k=Z.m;for(let Z=0;Z<k.length;Z++)k[Z]/=c.m[Z];return"Matrix2D"===L?new t.e(k):"Matrix3D"===L?new t.g(k):p.b.oc(k)}return Z.divide(c)}var R;if(null!==(R=this.config)&&void 0!==R&&R.preventIntegerFloatArithmetic&&typeof Z!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,E.q)(Z)/(0,E.q)(c)}}(0,k.g)("FlowGraphDivideBlock",w);class M extends V{constructor(Z){super(N.t,(Z=>this._random(Z)),"FlowGraphRandomBlock",Z),this.min=this.registerDataInput("min",N.t,(null===Z||void 0===Z?void 0:Z.min)??0),this.max=this.registerDataInput("max",N.t,(null===Z||void 0===Z?void 0:Z.max)??1),null!==Z&&void 0!==Z&&Z.seed&&(this._seed=Z.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const Z=1e4*Math.sin(this._seed++);return Z-Math.floor(Z)}return Math.random()}_random(Z){const c=this.min.getValue(Z),L=this.max.getValue(Z);return this._getRandomValue()*(L-c)+c}}(0,k.g)("FlowGraphRandomBlock",M);class P extends V{constructor(Z){super(N.t,(()=>Math.E),"FlowGraphEBlock",Z)}}(0,k.g)("FlowGraphEBlock",P);class j extends V{constructor(Z){super(N.t,(()=>Math.PI),"FlowGraphPIBlock",Z)}}(0,k.g)("FlowGraphPIBlock",j);class o extends V{constructor(Z){super(N.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",Z)}}(0,k.g)("FlowGraphInfBlock",o);class u extends V{constructor(Z){super(N.t,(()=>Number.NaN),"FlowGraphNaNBlock",Z)}}function X(Z,c){switch((0,E.l)(Z)){case"FlowGraphInteger":return new i.b(c(Z.value));case"Vector2":return new p.f(c(Z.x),c(Z.y));case"Mc":return new p.h(c(Z.x),c(Z.y),c(Z.z));case"Vector4":return new p.j(c(Z.x),c(Z.y),c(Z.z),c(Z.w));case"Quaternion":return new p.c(c(Z.x),c(Z.y),c(Z.z),c(Z.w));case"Matrix":return p.b.oc(Z.m.map(c));case"Matrix2D":return new t.e(Z.m.map(c));case"Matrix3D":return new t.g(Z.m.map(c));default:return c(Z)}}(0,k.g)("FlowGraphNaNBlock",u);class h extends J.d{constructor(Z){super(N.t,N.t,(Z=>this._polymorphicAbs(Z)),"FlowGraphAbsBlock",Z)}_polymorphicAbs(Z){return X(Z,Math.abs)}}(0,k.g)("FlowGraphAbsBlock",h);class B extends J.d{constructor(Z){super(N.t,N.t,(Z=>this._polymorphicSign(Z)),"FlowGraphSignBlock",Z)}_polymorphicSign(Z){return X(Z,Math.sign)}}(0,k.g)("FlowGraphSignBlock",B);class D extends J.d{constructor(Z){super(N.t,N.t,(Z=>this._polymorphicTrunc(Z)),"FlowGraphTruncBlock",Z)}_polymorphicTrunc(Z){return X(Z,Math.trunc)}}(0,k.g)("FlowGraphTruncBlock",D);class e extends J.d{constructor(Z){super(N.t,N.t,(Z=>this._polymorphicFloor(Z)),"FlowGraphFloorBlock",Z)}_polymorphicFloor(Z){return X(Z,Math.floor)}}(0,k.g)("FlowGraphFloorBlock",e);class H extends J.d{constructor(Z){super(N.e,N.e,(Z=>this._polymorphicCeiling(Z)),"FlowGraphCeilBlock",Z)}_polymorphicCeiling(Z){return X(Z,Math.ceil)}}(0,k.g)("FlowGraphCeilBlock",H);class l extends J.d{constructor(Z){super(N.e,N.e,(Z=>this._polymorphicRound(Z)),"FlowGraphRoundBlock",Z)}_polymorphicRound(Z){return X(Z,(Z=>{var c;return Z<0&&null!==(c=this.config)&&void 0!==c&&c.roundHalfAwayFromZero?-Math.round(-Z):Math.round(Z)}))}}(0,k.g)("FlowGraphRoundBlock",l);class W extends J.d{constructor(Z){super(N.e,N.e,(Z=>this._polymorphicFraction(Z)),"FlowGraphFractBlock",Z)}_polymorphicFraction(Z){return X(Z,(Z=>Z-Math.floor(Z)))}}(0,k.g)("FlowGraphFractBlock",W);class T extends J.d{constructor(Z){super(N.e,N.e,(Z=>this._polymorphicNeg(Z)),"FlowGraphNegationBlock",Z)}_polymorphicNeg(Z){return X(Z,(Z=>-Z))}}function I(Z,c,L){switch((0,E.l)(Z)){case"FlowGraphInteger":return new i.b(L(Z.value,c.value));case"Vector2":return new p.f(L(Z.x,c.x),L(Z.y,c.y));case"Mc":return new p.h(L(Z.x,c.x),L(Z.y,c.y),L(Z.z,c.z));case"Vector4":return new p.j(L(Z.x,c.x),L(Z.y,c.y),L(Z.z,c.z),L(Z.w,c.w));case"Quaternion":return new p.c(L(Z.x,c.x),L(Z.y,c.y),L(Z.z,c.z),L(Z.w,c.w));case"Matrix":return p.b.oc(Z.m.map(((Z,k)=>L(Z,c.m[k]))));case"Matrix2D":return new t.e(Z.m.map(((Z,k)=>L(Z,c.m[k]))));case"Matrix3D":return new t.g(Z.m.map(((Z,k)=>L(Z,c.m[k]))));default:return L((0,E.q)(Z),(0,E.q)(c))}}(0,k.g)("FlowGraphNegationBlock",T);class d extends R.d{constructor(Z){super(N.e,N.e,N.e,((Z,c)=>this._polymorphicRemainder(Z,c)),"FlowGraphModuloBlock",Z)}_polymorphicRemainder(Z,c){return I(Z,c,((Z,c)=>Z%c))}}(0,k.g)("FlowGraphModuloBlock",d);class Q extends R.d{constructor(Z){super(N.e,N.e,N.e,((Z,c)=>this._polymorphicMin(Z,c)),"FlowGraphMinBlock",Z)}_polymorphicMin(Z,c){return I(Z,c,Math.min)}}(0,k.g)("FlowGraphMinBlock",Q);class r extends R.d{constructor(Z){super(N.e,N.e,N.e,((Z,c)=>this._polymorphicMax(Z,c)),"FlowGraphMaxBlock",Z)}_polymorphicMax(Z,c){return I(Z,c,Math.max)}}function f(Z,c,L){return Math.min(Math.max(Z,Math.min(c,L)),Math.max(c,L))}function S(Z,c,L,k){switch((0,E.l)(Z)){case"FlowGraphInteger":return new i.b(k(Z.value,c.value,L.value));case"Vector2":return new p.f(k(Z.x,c.x,L.x),k(Z.y,c.y,L.y));case"Mc":return new p.h(k(Z.x,c.x,L.x),k(Z.y,c.y,L.y),k(Z.z,c.z,L.z));case"Vector4":return new p.j(k(Z.x,c.x,L.x),k(Z.y,c.y,L.y),k(Z.z,c.z,L.z),k(Z.w,c.w,L.w));case"Quaternion":return new p.c(k(Z.x,c.x,L.x),k(Z.y,c.y,L.y),k(Z.z,c.z,L.z),k(Z.w,c.w,L.w));case"Matrix":return p.b.oc(Z.m.map(((Z,N)=>k(Z,c.m[N],L.m[N]))));case"Matrix2D":return new t.e(Z.m.map(((Z,N)=>k(Z,c.m[N],L.m[N]))));case"Matrix3D":return new t.g(Z.m.map(((Z,N)=>k(Z,c.m[N],L.m[N]))));default:return k((0,E.q)(Z),(0,E.q)(c),(0,E.q)(L))}}(0,k.g)("FlowGraphMaxBlock",r);class s extends z{constructor(Z){super(N.e,N.e,N.e,N.e,((Z,c,L)=>this._polymorphicClamp(Z,c,L)),"FlowGraphClampBlock",Z)}_polymorphicClamp(Z,c,L){return S(Z,c,L,f)}}function m(Z){return Math.min(Math.max(Z,0),1)}(0,k.g)("FlowGraphClampBlock",s);class A extends J.d{constructor(Z){super(N.e,N.e,(Z=>this._polymorphicSaturate(Z)),"FlowGraphSaturateBlock",Z)}_polymorphicSaturate(Z){return X(Z,m)}}function b(Z,c,L){return(1-L)*Z+L*c}(0,k.g)("FlowGraphSaturateBlock",A);class F extends z{constructor(Z){super(N.e,N.e,N.e,N.e,((Z,c,L)=>this._polymorphicInterpolate(Z,c,L)),"FlowGraphMathInterpolationBlock",Z)}_polymorphicInterpolate(Z,c,L){return S(Z,c,L,b)}}(0,k.g)("FlowGraphMathInterpolationBlock",F);class U extends R.d{constructor(Z){super(N.e,N.e,N.g,((Z,c)=>this._polymorphicEq(Z,c)),"FlowGraphEqualityBlock",Z)}_polymorphicEq(Z,c){const L=(0,E.l)(Z),k=(0,E.l)(c);return typeof Z===typeof c&&((0,E.i)(L,k)||(0,E.f)(L,k)||(0,E.b)(L,k)?Z.equals(c):Z===c)}}function K(Z,c,L){if((0,E.u)(Z)&&(0,E.u)(c))return L((0,E.q)(Z),(0,E.q)(c));throw new Error(`Cannot compare ${Z} and ${c}`)}(0,k.g)("FlowGraphEqualityBlock",U);class n extends R.d{constructor(Z){super(N.e,N.e,N.g,((Z,c)=>this._polymorphicLessThan(Z,c)),"FlowGraphLessThanBlock",Z)}_polymorphicLessThan(Z,c){return K(Z,c,((Z,c)=>Z<c))}}(0,k.g)("FlowGraphLessThanBlock",n);class g extends R.d{constructor(Z){super(N.e,N.e,N.g,((Z,c)=>this._polymorphicLessThanOrEqual(Z,c)),"FlowGraphLessThanOrEqualBlock",Z)}_polymorphicLessThanOrEqual(Z,c){return K(Z,c,((Z,c)=>Z<=c))}}(0,k.g)("FlowGraphLessThanOrEqualBlock",g);class y extends R.d{constructor(Z){super(N.e,N.e,N.g,((Z,c)=>this._polymorphicGreaterThan(Z,c)),"FlowGraphGreaterThanBlock",Z)}_polymorphicGreaterThan(Z,c){return K(Z,c,((Z,c)=>Z>c))}}(0,k.g)("FlowGraphGreaterThanBlock",y);class v extends R.d{constructor(Z){super(N.e,N.e,N.g,((Z,c)=>this._polymorphicGreaterThanOrEqual(Z,c)),"FlowGraphGreaterThanOrEqualBlock",Z)}_polymorphicGreaterThanOrEqual(Z,c){return K(Z,c,((Z,c)=>Z>=c))}}(0,k.g)("FlowGraphGreaterThanOrEqualBlock",v);class Y extends J.d{constructor(Z){super(N.e,N.g,(Z=>this._polymorphicIsNan(Z)),"FlowGraphIsNaNBlock",Z)}_polymorphicIsNan(Z){if((0,E.u)(Z,!0))return isNaN((0,E.q)(Z));throw new Error(`Cannot get NaN of ${Z}`)}}(0,k.g)("FlowGraphIsNaNBlock",Y);class a extends J.d{constructor(Z){super(N.e,N.g,(Z=>this._polymorphicIsInf(Z)),"FlowGraphIsInfBlock",Z)}_polymorphicIsInf(Z){if((0,E.u)(Z))return!isFinite((0,E.q)(Z));throw new Error(`Cannot get isInf of ${Z}`)}}(0,k.g)("FlowGraphIsInfBlock",a);class C extends J.d{constructor(Z){super(N.e,N.e,(Z=>this._polymorphicDegToRad(Z)),"FlowGraphDegToRadBlock",Z)}_degToRad(Z){return Z*Math.PI/180}_polymorphicDegToRad(Z){return X(Z,this._degToRad)}}(0,k.g)("FlowGraphDegToRadBlock",C);class ZZ extends J.d{constructor(Z){super(N.e,N.e,(Z=>this._polymorphicRadToDeg(Z)),"FlowGraphRadToDegBlock",Z)}_radToDeg(Z){return 180*Z/Math.PI}_polymorphicRadToDeg(Z){return X(Z,this._radToDeg)}}(0,k.g)("FlowGraphRadToDegBlock",ZZ);class cZ extends J.d{constructor(Z){super(N.t,N.t,(Z=>this._polymorphicSin(Z)),"FlowGraphSinBlock",Z)}_polymorphicSin(Z){return X(Z,Math.sin)}}class LZ extends J.d{constructor(Z){super(N.t,N.t,(Z=>this._polymorphicCos(Z)),"FlowGraphCosBlock",Z)}_polymorphicCos(Z){return X(Z,Math.cos)}}class kZ extends J.d{constructor(Z){super(N.t,N.t,(Z=>this._polymorphicTan(Z)),"FlowGraphTanBlock",Z)}_polymorphicTan(Z){return X(Z,Math.tan)}}class NZ extends J.d{constructor(Z){super(N.t,N.t,(Z=>this._polymorphicAsin(Z)),"FlowGraphASinBlock",Z)}_polymorphicAsin(Z){return X(Z,Math.asin)}}(0,k.g)("FlowGraphASinBlock",NZ);class RZ extends J.d{constructor(Z){super(N.t,N.t,(Z=>this._polymorphicAcos(Z)),"FlowGraphACosBlock",Z)}_polymorphicAcos(Z){return X(Z,Math.acos)}}(0,k.g)("FlowGraphACosBlock",RZ);class GZ extends J.d{constructor(Z){super(N.t,N.t,(Z=>this._polymorphicAtan(Z)),"FlowGraphATanBlock",Z)}_polymorphicAtan(Z){return X(Z,Math.atan)}}(0,k.g)("FlowGraphATanBlock",GZ);class VZ extends R.d{constructor(Z){super(N.e,N.e,N.e,((Z,c)=>this._polymorphicAtan2(Z,c)),"FlowGraphATan2Block",Z)}_polymorphicAtan2(Z,c){return I(Z,c,Math.atan2)}}(0,k.g)("FlowGraphATan2Block",VZ);class pZ extends J.d{constructor(Z){super(N.e,N.e,(Z=>this._polymorphicSinh(Z)),"FlowGraphSinhBlock",Z)}_polymorphicSinh(Z){return X(Z,Math.sinh)}}(0,k.g)("FlowGraphSinhBlock",pZ);class JZ extends J.d{constructor(Z){super(N.e,N.e,(Z=>this._polymorphicCosh(Z)),"FlowGraphCoshBlock",Z)}_polymorphicCosh(Z){return X(Z,Math.cosh)}}(0,k.g)("FlowGraphCoshBlock",JZ);class zZ extends J.d{constructor(Z){super(N.e,N.e,(Z=>this._polymorphicTanh(Z)),"FlowGraphTanhBlock",Z)}_polymorphicTanh(Z){return X(Z,Math.tanh)}}(0,k.g)("FlowGraphTanhBlock",zZ);class iZ extends J.d{constructor(Z){super(N.e,N.t,(Z=>this._polymorphicAsinh(Z)),"FlowGraphASinhBlock",Z)}_polymorphicAsinh(Z){return X(Z,Math.asinh)}}(0,k.g)("FlowGraphASinhBlock",iZ);class tZ extends J.d{constructor(Z){super(N.e,N.t,(Z=>this._polymorphicAcosh(Z)),"FlowGraphACoshBlock",Z)}_polymorphicAcosh(Z){return X(Z,Math.acosh)}}(0,k.g)("FlowGraphACoshBlock",tZ);class EZ extends J.d{constructor(Z){super(N.e,N.t,(Z=>this._polymorphicAtanh(Z)),"FlowGraphATanhBlock",Z)}_polymorphicAtanh(Z){return X(Z,Math.atanh)}}(0,k.g)("FlowGraphATanhBlock",EZ);class xZ extends J.d{constructor(Z){super(N.e,N.t,(Z=>this._polymorphicExp(Z)),"FlowGraphExponentialBlock",Z)}_polymorphicExp(Z){return X(Z,Math.exp)}}(0,k.g)("FlowGraphExponentialBlock",xZ);class qZ extends J.d{constructor(Z){super(N.e,N.t,(Z=>this._polymorphicLog(Z)),"FlowGraphLogBlock",Z)}_polymorphicLog(Z){return X(Z,Math.log)}}(0,k.g)("FlowGraphLogBlock",qZ);class OZ extends J.d{constructor(Z){super(N.e,N.t,(Z=>this._polymorphicLog2(Z)),"FlowGraphLog2Block",Z)}_polymorphicLog2(Z){return X(Z,Math.log2)}}(0,k.g)("FlowGraphLog2Block",OZ);class wZ extends J.d{constructor(Z){super(N.e,N.t,(Z=>this._polymorphicLog10(Z)),"FlowGraphLog10Block",Z)}_polymorphicLog10(Z){return X(Z,Math.log10)}}(0,k.g)("FlowGraphLog10Block",wZ);class MZ extends J.d{constructor(Z){super(N.e,N.t,(Z=>this._polymorphicSqrt(Z)),"FlowGraphSquareRootBlock",Z)}_polymorphicSqrt(Z){return X(Z,Math.sqrt)}}(0,k.g)("FlowGraphSquareRootBlock",MZ);class PZ extends J.d{constructor(Z){super(N.e,N.t,(Z=>this._polymorphicCubeRoot(Z)),"FlowGraphCubeRootBlock",Z)}_polymorphicCubeRoot(Z){return X(Z,Math.cbrt)}}(0,k.g)("FlowGraphCubeRootBlock",PZ);class jZ extends R.d{constructor(Z){super(N.e,N.t,N.t,((Z,c)=>this._polymorphicPow(Z,c)),"FlowGraphPowerBlock",Z)}_polymorphicPow(Z,c){return I(Z,c,Math.pow)}}(0,k.g)("FlowGraphPowerBlock",jZ);class oZ extends J.d{constructor(Z){super((0,N.H)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,N.H)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(Z=>"boolean"===typeof Z?!Z:"number"===typeof Z?~Z:new i.b(~Z.value)),"FlowGraphBitwiseNotBlock",Z)}}(0,k.g)("FlowGraphBitwiseNotBlock",oZ);class uZ extends R.d{constructor(Z){super((0,N.H)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,N.H)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,N.H)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),((Z,c)=>{if("boolean"===typeof Z&&"boolean"===typeof c)return Z&&c;if("number"===typeof Z&&"number"===typeof c)return Z&c;if("object"===typeof Z&&"object"===typeof c)return new i.b(Z.value&c.value);throw new Error(`Cannot perform bitwise AND on ${Z} and ${c}`)}),"FlowGraphBitwiseAndBlock",Z)}}(0,k.g)("FlowGraphBitwiseAndBlock",uZ);class XZ extends R.d{constructor(Z){super((0,N.H)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,N.H)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,N.H)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),((Z,c)=>{if("boolean"===typeof Z&&"boolean"===typeof c)return Z||c;if("number"===typeof Z&&"number"===typeof c)return Z|c;if("object"===typeof Z&&"object"===typeof c)return new i.b(Z.value|c.value);throw new Error(`Cannot perform bitwise OR on ${Z} and ${c}`)}),"FlowGraphBitwiseOrBlock",Z)}}(0,k.g)("FlowGraphBitwiseOrBlock",XZ);class hZ extends R.d{constructor(Z){super((0,N.H)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,N.H)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,N.H)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),((Z,c)=>{if("boolean"===typeof Z&&"boolean"===typeof c)return Z!==c;if("number"===typeof Z&&"number"===typeof c)return Z^c;if("object"===typeof Z&&"object"===typeof c)return new i.b(Z.value^c.value);throw new Error(`Cannot perform bitwise XOR on ${Z} and ${c}`)}),"FlowGraphBitwiseXorBlock",Z)}}(0,k.g)("FlowGraphBitwiseXorBlock",hZ);class BZ extends R.d{constructor(Z){super(N.i,N.i,N.i,((Z,c)=>new i.b(Z.value<<c.value)),"FlowGraphBitwiseLeftShiftBlock",Z)}}(0,k.g)("FlowGraphBitwiseLeftShiftBlock",BZ);class DZ extends R.d{constructor(Z){super(N.i,N.i,N.i,((Z,c)=>new i.b(Z.value>>c.value)),"FlowGraphBitwiseRightShiftBlock",Z)}}(0,k.g)("FlowGraphBitwiseRightShiftBlock",DZ);class eZ extends J.d{constructor(Z){super(N.i,N.i,(Z=>new i.b(Math.clz32(Z.value))),"FlowGraphLeadingZerosBlock",Z)}}(0,k.g)("FlowGraphLeadingZerosBlock",eZ);class HZ extends J.d{constructor(Z){super(N.i,N.i,(Z=>new i.b(Z.value?31-Math.clz32(Z.value&-Z.value):32)),"FlowGraphTrailingZerosBlock",Z)}}(0,k.g)("FlowGraphTrailingZerosBlock",HZ);class lZ extends J.d{constructor(Z){super(N.i,N.i,(Z=>new i.b(function(Z){let c=0;for(;Z;)c+=1&Z,Z>>=1;return c}(Z.value))),"FlowGraphOneBitsCounterBlock",Z)}}(0,k.g)("FlowGraphOneBitsCounterBlock",lZ)},14358:(Z,c,L)=>{L.d(c,{d:()=>N});var k=L(14364);class N extends k.d{constructor(Z,c,L,k,N,R){super(L,R),this._operation=k,this._className=N,this.a=this.registerDataInput("a",Z),this.b=this.registerDataInput("b",c)}_doOperation(Z){const c=this.a.getValue(Z),L=this.b.getValue(Z);return this._operation(c,L)}getClassName(){return this._className}}},14364:(Z,c,L)=>{L.d(c,{d:()=>V});var k=L(12846),N=L(12825);const R="cachedOperationValue",G="cachedExecutionId";class V extends k.c{constructor(Z,c){super(c),this.value=this.registerDataOutput("value",Z),this.isValid=this.registerDataOutput("isValid",N.g)}_updateOutputs(Z){const c=Z._getExecutionVariable(this,G,-1),L=Z._getExecutionVariable(this,R,null);if(void 0!==L&&null!==L&&c===Z.executionId)this.isValid.setValue(!0,Z),this.value.setValue(L,Z);else try{const c=this._doOperation(Z);if(void 0===c||null===c)return void this.isValid.setValue(!1,Z);Z._setExecutionVariable(this,R,c),Z._setExecutionVariable(this,G,Z.executionId),this.value.setValue(c,Z),this.isValid.setValue(!0,Z)}catch(k){this.isValid.setValue(!1,Z)}}}},14370:(Z,c,L)=>{L.d(c,{d:()=>N});var k=L(14364);class N extends k.d{constructor(Z,c,L,k,N){super(c,N),this._operation=L,this._className=k,this.a=this.registerDataInput("a",Z)}_doOperation(Z){return this._operation(this.a.getValue(Z))}getClassName(){return this._className}}}}]);