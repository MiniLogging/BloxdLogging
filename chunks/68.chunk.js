"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[68],{14084:(q,c,U)=>{U.r(c),U.d(c,{FlowGraphAbsBlock:()=>i,FlowGraphAcosBlock:()=>sq,FlowGraphAcoshBlock:()=>Kq,FlowGraphAddBlock:()=>H,FlowGraphAsinBlock:()=>Qq,FlowGraphAsinhBlock:()=>uq,FlowGraphAtan2Block:()=>Xq,FlowGraphAtanBlock:()=>gq,FlowGraphAtanhBlock:()=>rq,FlowGraphBitwiseAndBlock:()=>tq,FlowGraphBitwiseLeftShiftBlock:()=>Fq,FlowGraphBitwiseNotBlock:()=>Iq,FlowGraphBitwiseOrBlock:()=>Cq,FlowGraphBitwiseRightShiftBlock:()=>vq,FlowGraphBitwiseXorBlock:()=>iq,FlowGraphCeilBlock:()=>k,FlowGraphClampBlock:()=>T,FlowGraphCosBlock:()=>Uq,FlowGraphCoshBlock:()=>Wq,FlowGraphCubeRootBlock:()=>pq,FlowGraphDegToRadBlock:()=>E,FlowGraphDivideBlock:()=>o,FlowGraphEBlock:()=>p,FlowGraphEqualityBlock:()=>N,FlowGraphExpBlock:()=>Hq,FlowGraphFloorBlock:()=>Y,FlowGraphFractionBlock:()=>O,FlowGraphGreaterThanBlock:()=>l,FlowGraphGreaterThanOrEqualBlock:()=>j,FlowGraphInfBlock:()=>I,FlowGraphIsInfinityBlock:()=>A,FlowGraphIsNanBlock:()=>f,FlowGraphLeadingZerosBlock:()=>Yq,FlowGraphLessThanBlock:()=>w,FlowGraphLessThanOrEqualBlock:()=>L,FlowGraphLog10Block:()=>oq,FlowGraphLog2Block:()=>hq,FlowGraphLogBlock:()=>bq,FlowGraphMathInterpolationBlock:()=>B,FlowGraphMaxBlock:()=>z,FlowGraphMinBlock:()=>x,FlowGraphModuloBlock:()=>Z,FlowGraphMultiplyBlock:()=>h,FlowGraphNaNBlock:()=>t,FlowGraphNegationBlock:()=>G,FlowGraphOneBitsCounterBlock:()=>Vq,FlowGraphPiBlock:()=>R,FlowGraphPowerBlock:()=>Rq,FlowGraphRadToDegBlock:()=>qq,FlowGraphRandomBlock:()=>a,FlowGraphRoundBlock:()=>V,FlowGraphSaturateBlock:()=>d,FlowGraphSignBlock:()=>F,FlowGraphSinBlock:()=>cq,FlowGraphSinhBlock:()=>nq,FlowGraphSquareRootBlock:()=>aq,FlowGraphSubtractBlock:()=>b,FlowGraphTanBlock:()=>Jq,FlowGraphTanhBlock:()=>Dq,FlowGraphTrailingZerosBlock:()=>kq,FlowGraphTruncBlock:()=>v});var J=U(10850),Q=U(12648),s=U(14093),g=U(14099);class X extends g.d{constructor(q,c,U,J){super(q,J),this._operation=c,this._className=U}_doOperation(q){return this._operation(q)}getClassName(){return this._className}}var n=U(10833),W=U(14105);class D extends g.d{constructor(q,c,U,J,Q,s,g){super(J,g),this._operation=Q,this._className=s,this.a=this.registerDataInput("a",q),this.b=this.registerDataInput("b",c),this.c=this.registerDataInput("c",U)}_doOperation(q){return this._operation(this.a.getValue(q),this.b.getValue(q),this.c.getValue(q))}getClassName(){return this._className}}var u=U(12642),K=U(12653),r=U(12677);class H extends s.e{constructor(q){super((0,Q.S)(null===q||void 0===q?void 0:q.type),(0,Q.S)(null===q||void 0===q?void 0:q.type),(0,Q.S)(null===q||void 0===q?void 0:q.type),((q,c)=>this._polymorphicAdd(q,c)),"FlowGraphAddBlock",q)}_polymorphicAdd(q,c){const U=(0,r.l)(q),J=(0,r.l)(c);if((0,r.h)(U,J)||(0,r.g)(U,J)||(0,r.e)(U,J))return q.add(c);if("Quaternion"===U||"Vector4"===J)return new n.q(q.x,q.y,q.z,q.w).addInPlace(c);if("Vector4"===U||"Quaternion"===J)return q.add(c);var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.preventIntegerFloatArithmetic&&typeof q!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,r.n)(q)+(0,r.n)(c)}}(0,J.f)("FlowGraphAddBlock",H);class b extends s.e{constructor(q){super((0,Q.S)(null===q||void 0===q?void 0:q.type),(0,Q.S)(null===q||void 0===q?void 0:q.type),(0,Q.S)(null===q||void 0===q?void 0:q.type),((q,c)=>this._polymorphicSubtract(q,c)),"FlowGraphSubtractBlock",q)}_polymorphicSubtract(q,c){const U=(0,r.l)(q),J=(0,r.l)(c);if((0,r.h)(U,J)||(0,r.e)(U,J)||(0,r.g)(U,J))return q.eU(c);if("Quaternion"===U||"Vector4"===J)return new n.q(q.x,q.y,q.z,q.w).Uu(c);if("Vector4"===U||"Quaternion"===J)return q.eU(c);var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.preventIntegerFloatArithmetic&&typeof q!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,r.n)(q)-(0,r.n)(c)}}(0,J.f)("FlowGraphSubtractBlock",b);class h extends s.e{constructor(q){super((0,Q.S)(null===q||void 0===q?void 0:q.type),(0,Q.S)(null===q||void 0===q?void 0:q.type),(0,Q.S)(null===q||void 0===q?void 0:q.type),((q,c)=>this._polymorphicMultiply(q,c)),"FlowGraphMultiplyBlock",q)}_polymorphicMultiply(q,c){const U=(0,r.l)(q),J=(0,r.l)(c);if((0,r.h)(U,J)||(0,r.e)(U,J))return q.multiply(c);if("Quaternion"===U||"Vector4"===J)return new n.q(q.x,q.y,q.z,q.w).multiplyInPlace(c);if("Vector4"===U||"Quaternion"===J)return q.multiply(c);if((0,r.g)(U,J)){var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.useMatrixPerComponent){const J=q.m;for(let q=0;q<J.length;q++)J[q]*=c.m[q];return"Matrix2D"===U?new K.d(J):"Matrix3D"===U?new K.f(J):n.d.Ic(J)}return c.multiply(q)}var s;if(null!==(s=this.config)&&void 0!==s&&s.preventIntegerFloatArithmetic&&typeof q!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,r.n)(q)*(0,r.n)(c)}}(0,J.f)("FlowGraphMultiplyBlock",h);class o extends s.e{constructor(q){super((0,Q.S)(null===q||void 0===q?void 0:q.type),(0,Q.S)(null===q||void 0===q?void 0:q.type),(0,Q.S)(null===q||void 0===q?void 0:q.type),((q,c)=>this._polymorphicDivide(q,c)),"FlowGraphDivideBlock",q)}_polymorphicDivide(q,c){const U=(0,r.l)(q),J=(0,r.l)(c);if((0,r.h)(U,J)||(0,r.e)(U,J))return q.divide(c);if("Quaternion"===U||"Quaternion"===J){const U=q.clone();return U.x/=c.x,U.y/=c.y,U.z/=c.z,U.w/=c.w,U}if("Quaternion"===U||"Vector4"===J)return new n.q(q.x,q.y,q.z,q.w).divideInPlace(c);if("Vector4"===U||"Quaternion"===J)return q.divide(c);if((0,r.g)(U,J)){var Q;if(null!==(Q=this.config)&&void 0!==Q&&Q.useMatrixPerComponent){const J=q.m;for(let q=0;q<J.length;q++)J[q]/=c.m[q];return"Matrix2D"===U?new K.d(J):"Matrix3D"===U?new K.f(J):n.d.Ic(J)}return q.divide(c)}var s;if(null!==(s=this.config)&&void 0!==s&&s.preventIntegerFloatArithmetic&&typeof q!==typeof c)throw new Error("Cannot add different types of numbers.");return(0,r.n)(q)/(0,r.n)(c)}}(0,J.f)("FlowGraphDivideBlock",o);class a extends X{constructor(q){super(Q.t,(q=>this._random(q)),"FlowGraphRandomBlock",q),this.min=this.registerDataInput("min",Q.t,(null===q||void 0===q?void 0:q.min)??0),this.max=this.registerDataInput("max",Q.t,(null===q||void 0===q?void 0:q.max)??1),null!==q&&void 0!==q&&q.seed&&(this._seed=q.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const q=1e4*Math.sin(this._seed++);return q-Math.floor(q)}return Math.random()}_random(q){const c=this.min.getValue(q),U=this.max.getValue(q);return this._getRandomValue()*(U-c)+c}}(0,J.f)("FlowGraphRandomBlock",a);class p extends X{constructor(q){super(Q.t,(()=>Math.E),"FlowGraphEBlock",q)}}(0,J.f)("FlowGraphEBlock",p);class R extends X{constructor(q){super(Q.t,(()=>Math.PI),"FlowGraphPIBlock",q)}}(0,J.f)("FlowGraphPIBlock",R);class I extends X{constructor(q){super(Q.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",q)}}(0,J.f)("FlowGraphInfBlock",I);class t extends X{constructor(q){super(Q.t,(()=>Number.NaN),"FlowGraphNaNBlock",q)}}function C(q,c){switch((0,r.l)(q)){case"FlowGraphInteger":return new u.b(c(q.value));case"Vector2":return new n.l(c(q.x),c(q.y));case"hc":return new n.p(c(q.x),c(q.y),c(q.z));case"Vector4":return new n.q(c(q.x),c(q.y),c(q.z),c(q.w));case"Quaternion":return new n.g(c(q.x),c(q.y),c(q.z),c(q.w));case"Matrix":return n.d.Ic(q.m.map(c));case"Matrix2D":return new K.d(q.m.map(c));case"Matrix3D":return new K.f(q.m.map(c));default:return c(q)}}(0,J.f)("FlowGraphNaNBlock",t);class i extends W.c{constructor(q){super(Q.t,Q.t,(q=>this._polymorphicAbs(q)),"FlowGraphAbsBlock",q)}_polymorphicAbs(q){return C(q,Math.abs)}}(0,J.f)("FlowGraphAbsBlock",i);class F extends W.c{constructor(q){super(Q.t,Q.t,(q=>this._polymorphicSign(q)),"FlowGraphSignBlock",q)}_polymorphicSign(q){return C(q,Math.sign)}}(0,J.f)("FlowGraphSignBlock",F);class v extends W.c{constructor(q){super(Q.t,Q.t,(q=>this._polymorphicTrunc(q)),"FlowGraphTruncBlock",q)}_polymorphicTrunc(q){return C(q,Math.trunc)}}(0,J.f)("FlowGraphTruncBlock",v);class Y extends W.c{constructor(q){super(Q.t,Q.t,(q=>this._polymorphicFloor(q)),"FlowGraphFloorBlock",q)}_polymorphicFloor(q){return C(q,Math.floor)}}(0,J.f)("FlowGraphFloorBlock",Y);class k extends W.c{constructor(q){super(Q.c,Q.c,(q=>this._polymorphicCeiling(q)),"FlowGraphCeilBlock",q)}_polymorphicCeiling(q){return C(q,Math.ceil)}}(0,J.f)("FlowGraphCeilBlock",k);class V extends W.c{constructor(q){super(Q.c,Q.c,(q=>this._polymorphicRound(q)),"FlowGraphRoundBlock",q)}_polymorphicRound(q){return C(q,(q=>{var c;return q<0&&null!==(c=this.config)&&void 0!==c&&c.roundHalfAwayFromZero?-Math.round(-q):Math.round(q)}))}}(0,J.f)("FlowGraphRoundBlock",V);class O extends W.c{constructor(q){super(Q.c,Q.c,(q=>this._polymorphicFraction(q)),"FlowGraphFractBlock",q)}_polymorphicFraction(q){return C(q,(q=>q-Math.floor(q)))}}(0,J.f)("FlowGraphFractBlock",O);class G extends W.c{constructor(q){super(Q.c,Q.c,(q=>this._polymorphicNeg(q)),"FlowGraphNegationBlock",q)}_polymorphicNeg(q){return C(q,(q=>-q))}}function S(q,c,U){switch((0,r.l)(q)){case"FlowGraphInteger":return new u.b(U(q.value,c.value));case"Vector2":return new n.l(U(q.x,c.x),U(q.y,c.y));case"hc":return new n.p(U(q.x,c.x),U(q.y,c.y),U(q.z,c.z));case"Vector4":return new n.q(U(q.x,c.x),U(q.y,c.y),U(q.z,c.z),U(q.w,c.w));case"Quaternion":return new n.g(U(q.x,c.x),U(q.y,c.y),U(q.z,c.z),U(q.w,c.w));case"Matrix":return n.d.Ic(q.m.map(((q,J)=>U(q,c.m[J]))));case"Matrix2D":return new K.d(q.m.map(((q,J)=>U(q,c.m[J]))));case"Matrix3D":return new K.f(q.m.map(((q,J)=>U(q,c.m[J]))));default:return U((0,r.n)(q),(0,r.n)(c))}}(0,J.f)("FlowGraphNegationBlock",G);class Z extends s.e{constructor(q){super(Q.c,Q.c,Q.c,((q,c)=>this._polymorphicRemainder(q,c)),"FlowGraphModuloBlock",q)}_polymorphicRemainder(q,c){return S(q,c,((q,c)=>q%c))}}(0,J.f)("FlowGraphModuloBlock",Z);class x extends s.e{constructor(q){super(Q.c,Q.c,Q.c,((q,c)=>this._polymorphicMin(q,c)),"FlowGraphMinBlock",q)}_polymorphicMin(q,c){return S(q,c,Math.min)}}(0,J.f)("FlowGraphMinBlock",x);class z extends s.e{constructor(q){super(Q.c,Q.c,Q.c,((q,c)=>this._polymorphicMax(q,c)),"FlowGraphMaxBlock",q)}_polymorphicMax(q,c){return S(q,c,Math.max)}}function y(q,c,U){return Math.min(Math.max(q,Math.min(c,U)),Math.max(c,U))}function M(q,c,U,J){switch((0,r.l)(q)){case"FlowGraphInteger":return new u.b(J(q.value,c.value,U.value));case"Vector2":return new n.l(J(q.x,c.x,U.x),J(q.y,c.y,U.y));case"hc":return new n.p(J(q.x,c.x,U.x),J(q.y,c.y,U.y),J(q.z,c.z,U.z));case"Vector4":return new n.q(J(q.x,c.x,U.x),J(q.y,c.y,U.y),J(q.z,c.z,U.z),J(q.w,c.w,U.w));case"Quaternion":return new n.g(J(q.x,c.x,U.x),J(q.y,c.y,U.y),J(q.z,c.z,U.z),J(q.w,c.w,U.w));case"Matrix":return n.d.Ic(q.m.map(((q,Q)=>J(q,c.m[Q],U.m[Q]))));case"Matrix2D":return new K.d(q.m.map(((q,Q)=>J(q,c.m[Q],U.m[Q]))));case"Matrix3D":return new K.f(q.m.map(((q,Q)=>J(q,c.m[Q],U.m[Q]))));default:return J((0,r.n)(q),(0,r.n)(c),(0,r.n)(U))}}(0,J.f)("FlowGraphMaxBlock",z);class T extends D{constructor(q){super(Q.c,Q.c,Q.c,Q.c,((q,c,U)=>this._polymorphicClamp(q,c,U)),"FlowGraphClampBlock",q)}_polymorphicClamp(q,c,U){return M(q,c,U,y)}}function m(q){return Math.min(Math.max(q,0),1)}(0,J.f)("FlowGraphClampBlock",T);class d extends W.c{constructor(q){super(Q.c,Q.c,(q=>this._polymorphicSaturate(q)),"FlowGraphSaturateBlock",q)}_polymorphicSaturate(q){return C(q,m)}}function e(q,c,U){return(1-U)*q+U*c}(0,J.f)("FlowGraphSaturateBlock",d);class B extends D{constructor(q){super(Q.c,Q.c,Q.c,Q.c,((q,c,U)=>this._polymorphicInterpolate(q,c,U)),"FlowGraphMathInterpolationBlock",q)}_polymorphicInterpolate(q,c,U){return M(q,c,U,e)}}(0,J.f)("FlowGraphMathInterpolationBlock",B);class N extends s.e{constructor(q){super(Q.c,Q.c,Q.e,((q,c)=>this._polymorphicEq(q,c)),"FlowGraphEqualityBlock",q)}_polymorphicEq(q,c){const U=(0,r.l)(q),J=(0,r.l)(c);return typeof q===typeof c&&((0,r.h)(U,J)||(0,r.g)(U,J)||(0,r.e)(U,J)?q.equals(c):q===c)}}function P(q,c,U){if((0,r.q)(q)&&(0,r.q)(c))return U((0,r.n)(q),(0,r.n)(c));throw new Error(`Cannot compare ${q} and ${c}`)}(0,J.f)("FlowGraphEqualityBlock",N);class w extends s.e{constructor(q){super(Q.c,Q.c,Q.e,((q,c)=>this._polymorphicLessThan(q,c)),"FlowGraphLessThanBlock",q)}_polymorphicLessThan(q,c){return P(q,c,((q,c)=>q<c))}}(0,J.f)("FlowGraphLessThanBlock",w);class L extends s.e{constructor(q){super(Q.c,Q.c,Q.e,((q,c)=>this._polymorphicLessThanOrEqual(q,c)),"FlowGraphLessThanOrEqualBlock",q)}_polymorphicLessThanOrEqual(q,c){return P(q,c,((q,c)=>q<=c))}}(0,J.f)("FlowGraphLessThanOrEqualBlock",L);class l extends s.e{constructor(q){super(Q.c,Q.c,Q.e,((q,c)=>this._polymorphicGreaterThan(q,c)),"FlowGraphGreaterThanBlock",q)}_polymorphicGreaterThan(q,c){return P(q,c,((q,c)=>q>c))}}(0,J.f)("FlowGraphGreaterThanBlock",l);class j extends s.e{constructor(q){super(Q.c,Q.c,Q.e,((q,c)=>this._polymorphicGreaterThanOrEqual(q,c)),"FlowGraphGreaterThanOrEqualBlock",q)}_polymorphicGreaterThanOrEqual(q,c){return P(q,c,((q,c)=>q>=c))}}(0,J.f)("FlowGraphGreaterThanOrEqualBlock",j);class f extends W.c{constructor(q){super(Q.c,Q.e,(q=>this._polymorphicIsNan(q)),"FlowGraphIsNaNBlock",q)}_polymorphicIsNan(q){if((0,r.q)(q,!0))return isNaN((0,r.n)(q));throw new Error(`Cannot get NaN of ${q}`)}}(0,J.f)("FlowGraphIsNaNBlock",f);class A extends W.c{constructor(q){super(Q.c,Q.e,(q=>this._polymorphicIsInf(q)),"FlowGraphIsInfBlock",q)}_polymorphicIsInf(q){if((0,r.q)(q))return!isFinite((0,r.n)(q));throw new Error(`Cannot get isInf of ${q}`)}}(0,J.f)("FlowGraphIsInfBlock",A);class E extends W.c{constructor(q){super(Q.c,Q.c,(q=>this._polymorphicDegToRad(q)),"FlowGraphDegToRadBlock",q)}_degToRad(q){return q*Math.PI/180}_polymorphicDegToRad(q){return C(q,this._degToRad)}}(0,J.f)("FlowGraphDegToRadBlock",E);class qq extends W.c{constructor(q){super(Q.c,Q.c,(q=>this._polymorphicRadToDeg(q)),"FlowGraphRadToDegBlock",q)}_radToDeg(q){return 180*q/Math.PI}_polymorphicRadToDeg(q){return C(q,this._radToDeg)}}(0,J.f)("FlowGraphRadToDegBlock",qq);class cq extends W.c{constructor(q){super(Q.t,Q.t,(q=>this._polymorphicSin(q)),"FlowGraphSinBlock",q)}_polymorphicSin(q){return C(q,Math.sin)}}class Uq extends W.c{constructor(q){super(Q.t,Q.t,(q=>this._polymorphicCos(q)),"FlowGraphCosBlock",q)}_polymorphicCos(q){return C(q,Math.cos)}}class Jq extends W.c{constructor(q){super(Q.t,Q.t,(q=>this._polymorphicTan(q)),"FlowGraphTanBlock",q)}_polymorphicTan(q){return C(q,Math.tan)}}class Qq extends W.c{constructor(q){super(Q.t,Q.t,(q=>this._polymorphicAsin(q)),"FlowGraphASinBlock",q)}_polymorphicAsin(q){return C(q,Math.asin)}}(0,J.f)("FlowGraphASinBlock",Qq);class sq extends W.c{constructor(q){super(Q.t,Q.t,(q=>this._polymorphicAcos(q)),"FlowGraphACosBlock",q)}_polymorphicAcos(q){return C(q,Math.acos)}}(0,J.f)("FlowGraphACosBlock",sq);class gq extends W.c{constructor(q){super(Q.t,Q.t,(q=>this._polymorphicAtan(q)),"FlowGraphATanBlock",q)}_polymorphicAtan(q){return C(q,Math.atan)}}(0,J.f)("FlowGraphATanBlock",gq);class Xq extends s.e{constructor(q){super(Q.c,Q.c,Q.c,((q,c)=>this._polymorphicAtan2(q,c)),"FlowGraphATan2Block",q)}_polymorphicAtan2(q,c){return S(q,c,Math.atan2)}}(0,J.f)("FlowGraphATan2Block",Xq);class nq extends W.c{constructor(q){super(Q.c,Q.c,(q=>this._polymorphicSinh(q)),"FlowGraphSinhBlock",q)}_polymorphicSinh(q){return C(q,Math.sinh)}}(0,J.f)("FlowGraphSinhBlock",nq);class Wq extends W.c{constructor(q){super(Q.c,Q.c,(q=>this._polymorphicCosh(q)),"FlowGraphCoshBlock",q)}_polymorphicCosh(q){return C(q,Math.cosh)}}(0,J.f)("FlowGraphCoshBlock",Wq);class Dq extends W.c{constructor(q){super(Q.c,Q.c,(q=>this._polymorphicTanh(q)),"FlowGraphTanhBlock",q)}_polymorphicTanh(q){return C(q,Math.tanh)}}(0,J.f)("FlowGraphTanhBlock",Dq);class uq extends W.c{constructor(q){super(Q.c,Q.t,(q=>this._polymorphicAsinh(q)),"FlowGraphASinhBlock",q)}_polymorphicAsinh(q){return C(q,Math.asinh)}}(0,J.f)("FlowGraphASinhBlock",uq);class Kq extends W.c{constructor(q){super(Q.c,Q.t,(q=>this._polymorphicAcosh(q)),"FlowGraphACoshBlock",q)}_polymorphicAcosh(q){return C(q,Math.acosh)}}(0,J.f)("FlowGraphACoshBlock",Kq);class rq extends W.c{constructor(q){super(Q.c,Q.t,(q=>this._polymorphicAtanh(q)),"FlowGraphATanhBlock",q)}_polymorphicAtanh(q){return C(q,Math.atanh)}}(0,J.f)("FlowGraphATanhBlock",rq);class Hq extends W.c{constructor(q){super(Q.c,Q.t,(q=>this._polymorphicExp(q)),"FlowGraphExponentialBlock",q)}_polymorphicExp(q){return C(q,Math.exp)}}(0,J.f)("FlowGraphExponentialBlock",Hq);class bq extends W.c{constructor(q){super(Q.c,Q.t,(q=>this._polymorphicLog(q)),"FlowGraphLogBlock",q)}_polymorphicLog(q){return C(q,Math.log)}}(0,J.f)("FlowGraphLogBlock",bq);class hq extends W.c{constructor(q){super(Q.c,Q.t,(q=>this._polymorphicLog2(q)),"FlowGraphLog2Block",q)}_polymorphicLog2(q){return C(q,Math.log2)}}(0,J.f)("FlowGraphLog2Block",hq);class oq extends W.c{constructor(q){super(Q.c,Q.t,(q=>this._polymorphicLog10(q)),"FlowGraphLog10Block",q)}_polymorphicLog10(q){return C(q,Math.log10)}}(0,J.f)("FlowGraphLog10Block",oq);class aq extends W.c{constructor(q){super(Q.c,Q.t,(q=>this._polymorphicSqrt(q)),"FlowGraphSquareRootBlock",q)}_polymorphicSqrt(q){return C(q,Math.sqrt)}}(0,J.f)("FlowGraphSquareRootBlock",aq);class pq extends W.c{constructor(q){super(Q.c,Q.t,(q=>this._polymorphicCubeRoot(q)),"FlowGraphCubeRootBlock",q)}_polymorphicCubeRoot(q){return C(q,Math.cbrt)}}(0,J.f)("FlowGraphCubeRootBlock",pq);class Rq extends s.e{constructor(q){super(Q.c,Q.t,Q.t,((q,c)=>this._polymorphicPow(q,c)),"FlowGraphPowerBlock",q)}_polymorphicPow(q,c){return S(q,c,Math.pow)}}(0,J.f)("FlowGraphPowerBlock",Rq);class Iq extends W.c{constructor(q){super((0,Q.S)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,Q.S)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(q=>"boolean"===typeof q?!q:"number"===typeof q?~q:new u.b(~q.value)),"FlowGraphBitwiseNotBlock",q)}}(0,J.f)("FlowGraphBitwiseNotBlock",Iq);class tq extends s.e{constructor(q){super((0,Q.S)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,Q.S)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,Q.S)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),((q,c)=>{if("boolean"===typeof q&&"boolean"===typeof c)return q&&c;if("number"===typeof q&&"number"===typeof c)return q&c;if("object"===typeof q&&"object"===typeof c)return new u.b(q.value&c.value);throw new Error(`Cannot perform bitwise AND on ${q} and ${c}`)}),"FlowGraphBitwiseAndBlock",q)}}(0,J.f)("FlowGraphBitwiseAndBlock",tq);class Cq extends s.e{constructor(q){super((0,Q.S)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,Q.S)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,Q.S)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),((q,c)=>{if("boolean"===typeof q&&"boolean"===typeof c)return q||c;if("number"===typeof q&&"number"===typeof c)return q|c;if("object"===typeof q&&"object"===typeof c)return new u.b(q.value|c.value);throw new Error(`Cannot perform bitwise OR on ${q} and ${c}`)}),"FlowGraphBitwiseOrBlock",q)}}(0,J.f)("FlowGraphBitwiseOrBlock",Cq);class iq extends s.e{constructor(q){super((0,Q.S)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,Q.S)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),(0,Q.S)((null===q||void 0===q?void 0:q.valueType)||"FlowGraphInteger"),((q,c)=>{if("boolean"===typeof q&&"boolean"===typeof c)return q!==c;if("number"===typeof q&&"number"===typeof c)return q^c;if("object"===typeof q&&"object"===typeof c)return new u.b(q.value^c.value);throw new Error(`Cannot perform bitwise XOR on ${q} and ${c}`)}),"FlowGraphBitwiseXorBlock",q)}}(0,J.f)("FlowGraphBitwiseXorBlock",iq);class Fq extends s.e{constructor(q){super(Q.i,Q.i,Q.i,((q,c)=>new u.b(q.value<<c.value)),"FlowGraphBitwiseLeftShiftBlock",q)}}(0,J.f)("FlowGraphBitwiseLeftShiftBlock",Fq);class vq extends s.e{constructor(q){super(Q.i,Q.i,Q.i,((q,c)=>new u.b(q.value>>c.value)),"FlowGraphBitwiseRightShiftBlock",q)}}(0,J.f)("FlowGraphBitwiseRightShiftBlock",vq);class Yq extends W.c{constructor(q){super(Q.i,Q.i,(q=>new u.b(Math.clz32(q.value))),"FlowGraphLeadingZerosBlock",q)}}(0,J.f)("FlowGraphLeadingZerosBlock",Yq);class kq extends W.c{constructor(q){super(Q.i,Q.i,(q=>new u.b(q.value?31-Math.clz32(q.value&-q.value):32)),"FlowGraphTrailingZerosBlock",q)}}(0,J.f)("FlowGraphTrailingZerosBlock",kq);class Vq extends W.c{constructor(q){super(Q.i,Q.i,(q=>new u.b(function(q){let c=0;for(;q;)c+=1&q,q>>=1;return c}(q.value))),"FlowGraphOneBitsCounterBlock",q)}}(0,J.f)("FlowGraphOneBitsCounterBlock",Vq)},14093:(q,c,U)=>{U.d(c,{e:()=>Q});var J=U(14099);class Q extends J.d{constructor(q,c,U,J,Q,s){super(U,s),this._operation=J,this._className=Q,this.a=this.registerDataInput("a",q),this.b=this.registerDataInput("b",c)}_doOperation(q){const c=this.a.getValue(q),U=this.b.getValue(q);return this._operation(c,U)}getClassName(){return this._className}}},14099:(q,c,U)=>{U.d(c,{d:()=>X});var J=U(12667),Q=U(12648);const s="cachedOperationValue",g="cachedExecutionId";class X extends J.c{constructor(q,c){super(c),this.value=this.registerDataOutput("value",q),this.isValid=this.registerDataOutput("isValid",Q.e)}_updateOutputs(q){const c=q._getExecutionVariable(this,g,-1),U=q._getExecutionVariable(this,s,null);if(void 0!==U&&null!==U&&c===q.executionId)this.isValid.setValue(!0,q),this.value.setValue(U,q);else try{const c=this._doOperation(q);if(void 0===c||null===c)return void this.isValid.setValue(!1,q);q._setExecutionVariable(this,s,c),q._setExecutionVariable(this,g,q.executionId),this.value.setValue(c,q),this.isValid.setValue(!0,q)}catch(J){this.isValid.setValue(!1,q)}}}},14105:(q,c,U)=>{U.d(c,{c:()=>Q});var J=U(14099);class Q extends J.d{constructor(q,c,U,J,Q){super(c,Q),this._operation=U,this._className=J,this.a=this.registerDataInput("a",q)}_doOperation(q){return this._operation(this.a.getValue(q))}getClassName(){return this._className}}}}]);