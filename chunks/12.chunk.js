"use strict";(self.g111kvdsqxc=self.g111kvdsqxc||[]).push([[12,20],{11502:(K,H,M)=>{M.r(H),M.d(H,{Dispose:()=>G,DumpData:()=>z,DumpDataAsync:()=>f,DumpFramebuffer:()=>I,DumpTools:()=>a});var q=M(11399),w=M(11100),u=M(11307),y=M(11143);let h,W=null;async function I(K,H,M,q){let w=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",u=arguments.length>5?arguments[5]:void 0,y=arguments.length>6?arguments[6]:void 0;const h=await M.readPixels(0,0,K,H);z(K,H,new Uint8Array(h.buffer),q,w,u,!0,void 0,y)}async function f(K,H,M){let q=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",w=arguments.length>4?arguments[4]:void 0,u=arguments.length>5&&void 0!==arguments[5]&&arguments[5],y=arguments.length>6&&void 0!==arguments[6]&&arguments[6],h=arguments.length>7?arguments[7]:void 0;return await new Promise((W=>{z(K,H,M,(K=>W(K)),q,w,u,y,h)}))}function z(K,H,I,f){let z=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",a=arguments.length>5?arguments[5]:void 0,v=arguments.length>6&&void 0!==arguments[6]&&arguments[6],O=arguments.length>7&&void 0!==arguments[7]&&arguments[7],L=arguments.length>8?arguments[8]:void 0;(async function(){return W||(W=new Promise(((K,H)=>{let w,u=null;const W={o:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(M.bind(M,11415)).then((I=>{let{ThinEngine:f}=I;const z=y.b.Instances.length;try{w=new OffscreenCanvas(100,100),u=new f(w,!1,W)}catch(O){var a;z<y.b.Instances.length&&(null===(a=y.b.Instances.pop())||void 0===a||a.dispose()),w=document.createElement("canvas"),u=new f(w,!1,W)}y.b.Instances.pop(),y.b.OnEnginesDisposedObservable.add((K=>{u&&K!==u&&!u.W&&0===y.b.Instances.length&&G()})),u.getCaps().parallelShaderCompile=void 0;const v=new q.e(u);M.e(52).then(M.bind(M,13758)).then((M=>{let{passPixelShader:y}=M;if(!u)return void H("Engine is not defined");const W=new q.g({vH:u,name:y.name,fragmentShader:y.shader,samplerNames:["textureSampler"]});h={canvas:w,vH:u,renderer:v,wrapper:W},K(h)}))})).catch(H)}))),await W})().then((M=>{if(M.vH.setSize(K,H,!0),I instanceof Float32Array){const K=new Uint8Array(I.length);let H=I.length;for(;H--;){const M=I[H];K[H]=Math.round(255*(0,u.Clamp)(M))}I=K}const q=M.vH.createRawTexture(I,K,H,5,!1,!v,1);M.renderer.setViewport(),M.renderer.applyEffectWrapper(M.wrapper),M.wrapper.effect._bindTexture("textureSampler",q),M.renderer.draw(),O?w.Tools.ToBlob(M.canvas,(K=>{const H=new FileReader;H.onload=K=>{const H=K.target.result;f&&f(H)},H.readAsArrayBuffer(K)}),z,L):w.Tools.EncodeScreenshotCanvasData(M.canvas,f,z,a,L),q.dispose()}))}function G(){var K;h?(h.wrapper.dispose(),h.renderer.dispose(),h.vH.dispose()):null===(K=W)||void 0===K||K.then((K=>{K.wrapper.dispose(),K.renderer.dispose(),K.vH.dispose()}));W=null,h=null}const a={DumpData:z,DumpDataAsync:f,DumpFramebuffer:I,Dispose:G};w.Tools.DumpData=z,w.Tools.DumpDataAsync=f,w.Tools.DumpFramebuffer=I},11259:(K,H,M)=>{M.r(H),M.d(H,{CreateScreenshot:()=>C,CreateScreenshotAsync:()=>i,CreateScreenshotUsingRenderTarget:()=>E,CreateScreenshotUsingRenderTargetAsync:()=>l,CreateScreenshotWithResizeAsync:()=>Z,ScreenshotTools:()=>D});var q=M(11267),w=M(11349),u=M(11393),y=M(11242),h=M(11325),W=M(11399),I=M(11412),f=M(11290);class z extends W.g{static _GetDefines(K){if(!K)return null;return K.extractDriverInfo().toLowerCase().indexOf("mali")>-1?"#define MALI 1\n":null}_gatherImports(K,H){K?(this._webGPUReady=!0,H.push(Promise.all([M.e(54).then(M.bind(M,13767)),M.e(55).then(M.bind(M,13774))]))):H.push(Promise.all([M.e(56).then(M.bind(M,13783)),M.e(57).then(M.bind(M,13791))]))}constructor(K){const H={...arguments.length>2?arguments[2]:void 0,name:K,vH:(arguments.length>1&&void 0!==arguments[1]?arguments[1]:null)||I.c.LastCreatedEngine,useShaderStore:!0,useAsPostProcess:!0,vertexShader:z.VertexUrl,fragmentShader:z.FragmentUrl,uniforms:z.Uniforms};super({...H,defines:z._GetDefines(H.vH)}),this.texelSize=new f.Vector2(0,0)}bind(){let K=arguments.length>0&&void 0!==arguments[0]&&arguments[0];super.bind(K),this._drawWrapper.effect.setFloat2("texelSize",this.texelSize.x,this.texelSize.y)}}z.VertexUrl="fxaa",z.FragmentUrl="fxaa",z.Uniforms=["texelSize"];class G extends u.d{getClassName(){return"FxaaPostProcess"}constructor(K,H){let M=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,w=arguments.length>3?arguments[3]:void 0,u=arguments.length>4?arguments[4]:void 0,y=arguments.length>5?arguments[5]:void 0,h=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0;const W={uniforms:z.Uniforms,size:"number"===typeof H?H:void 0,camera:M,samplingMode:w||q.b.BILINEAR_SAMPLINGMODE,vH:u,reusable:y,textureType:h,...H};super(K,z.FragmentUrl,{effectWrapper:"number"!==typeof H&&H.effectWrapper?void 0:new z(K,u,W),...W}),this.onApplyObservable.add((K=>{this._effectWrapper.texelSize=this.texelSize}))}static _Parse(K,H,M,q){return h.c.Parse((()=>new G(K.name,K.options,H,K.renderTargetSamplingMode,M.getEngine(),K.reusable)),K,M,q)}}(0,y.f)("BABYLON.FxaaPostProcess",G);var a=M(11112),v=M(11100),O=M(11502),L=M(11507),S=M(11176);let B=null;function C(K,H,M,q){let w=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",u=arguments.length>5&&void 0!==arguments[5]&&arguments[5],y=arguments.length>6?arguments[6]:void 0,h=arguments.length>7&&void 0!==arguments[7]&&arguments[7];const{height:W,width:I}=s(K,H,M);if(!W||!I)return void a.e.Error("Invalid 'size' parameter !");H.sK().activeCamera===H?K.onEndFrameObservable.addOnce((()=>{B||(B=document.createElement("canvas")),B.width=I,B.height=W;const H=B.getContext("2d"),M=K.getRenderingCanvas();if(!H||!M)return void a.e.Error("Failed to create screenshot. Rendering context or rendering canvas is not available.");const f=M.width,z=M.height,G=B.width,O=B.height,L=G/f,S=O/z,C=h?Math.max(L,S):Math.min(L,S),i=f*C,Z=z*C,E=(G-i)/2,l=(O-Z)/2;H.drawImage(M,0,0,f,z,E,l,i,Z),u?(v.Tools.EncodeScreenshotCanvasData(B,void 0,w,void 0,y),q&&q("")):v.Tools.EncodeScreenshotCanvasData(B,q,w,void 0,y)})):E(K,H,M,(K=>{if(u){const H=new Blob([K]);v.Tools.DownloadBlob(H),q&&q("")}else q&&q(K)}),w,1,K.getCreationOptions().antialias,void 0,void 0,void 0,void 0,y)}async function i(K,H,M){let q=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",w=arguments.length>4?arguments[4]:void 0,u=arguments.length>5&&void 0!==arguments[5]&&arguments[5];return await new Promise(((y,h)=>{C(K,H,M,(K=>{"undefined"!==typeof K?y(K):h(new Error("Data is undefined"))}),q,void 0,w,u)}))}async function Z(K,H,M,q){let w=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",u=arguments.length>5?arguments[5]:void 0,y=arguments.length>6&&void 0!==arguments[6]&&arguments[6];return await new Promise((h=>{C(K,H,{width:M,height:q},(()=>{h()}),w,!0,u,y)}))}function E(K,H,u,y){let h=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",W=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,I=arguments.length>6&&void 0!==arguments[6]&&arguments[6],f=arguments.length>7?arguments[7]:void 0,z=arguments.length>8&&void 0!==arguments[8]&&arguments[8],v=arguments.length>9&&void 0!==arguments[9]&&arguments[9],B=!(arguments.length>10&&void 0!==arguments[10])||arguments[10],C=arguments.length>11?arguments[11]:void 0,i=arguments.length>12?arguments[12]:void 0,Z=arguments.length>13?arguments[13]:void 0;const{height:E,width:l,finalWidth:D,finalHeight:V}=s(K,H,u),n={width:l,height:E};if(!E||!l)return void a.e.Error("Invalid 'size' parameter !");K.skipFrameRender=!0;const c=K.getRenderWidth,k=K.getRenderHeight;K.getRenderWidth=function(){return!(arguments.length>0&&void 0!==arguments[0]&&arguments[0])&&K._currentRenderTarget?K._currentRenderTarget.width:l},K.getRenderHeight=function(){return!(arguments.length>0&&void 0!==arguments[0]&&arguments[0])&&K._currentRenderTarget?K._currentRenderTarget.height:E},K.onResizeObservable.hasObservers()&&K.onResizeObservable.notifyObservers(K);const T=H.sK(),d=new w.b("screenShot",n,T,!1,!1,0,!1,q.b.BILINEAR_SAMPLINGMODE,void 0,v,void 0,void 0,void 0,W);d.renderList=T.meshes.slice(),d.samples=W,d.renderSprites=z,d.activeCamera=H,d.forceLayerMaskCheck=B,null===i||void 0===i||i(d);const x=Z||O.DumpData,Q=()=>{T.incrementRenderId(),T.resetCachedMaterial(),(0,S.e)((()=>d.isReadyForRendering()&&H.isReady(!0)),(()=>{K.onEndFrameObservable.addOnce((()=>{D===l&&V===E?d.readPixels(void 0,void 0,void 0,!1).then((K=>{x(l,E,K,y,h,f,!0,void 0,C),d.dispose()})):(K.isWebGPU?M.e(51).then(M.bind(M,13754)):M.e(52).then(M.bind(M,13758))).then((async()=>await(0,L.c)("pass",d.getInternalTexture(),T,void 0,void 0,void 0,D,V).then((H=>{K._readTexturePixels(H,D,V,-1,0,null,!0,!1,0,0).then((K=>{x(D,V,K,y,h,f,!0,void 0,C),H.dispose()}))}))))})),T.incrementRenderId(),T.resetCachedMaterial();const q=T.activeCamera,w=T.activeCameras,u=H.outputRenderTarget,W=T.spritesEnabled;T.activeCamera=H,T.activeCameras=null,H.outputRenderTarget=d,T.spritesEnabled=z;const I=T.meshes;T.meshes=d.renderList||T.meshes;try{T.render()}finally{T.activeCamera=q,T.activeCameras=w,H.outputRenderTarget=u,T.spritesEnabled=W,T.meshes=I,K.getRenderWidth=c,K.getRenderHeight=k,K.onResizeObservable.hasObservers()&&K.onResizeObservable.notifyObservers(K),H.getProjectionMatrix(!0),K.skipFrameRender=!1}}),(()=>{K.skipFrameRender=!1,K.getRenderWidth=c,K.getRenderHeight=k}))};if(I){const K=new G("antialiasing",1,T.activeCamera);d.addPostProcess(K),K.uh=!0,K.onEffectCreatedObservable.addOnce((K=>{K.isReady()?Q():K.onCompiled=()=>{Q()}}))}else Q()}async function l(K,H,M){let q=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",w=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,u=arguments.length>5&&void 0!==arguments[5]&&arguments[5],y=arguments.length>6?arguments[6]:void 0,h=arguments.length>7&&void 0!==arguments[7]&&arguments[7],W=arguments.length>8&&void 0!==arguments[8]&&arguments[8],I=!(arguments.length>9&&void 0!==arguments[9])||arguments[9],f=arguments.length>10?arguments[10]:void 0,z=arguments.length>11?arguments[11]:void 0,G=arguments.length>12?arguments[12]:void 0;return await new Promise(((a,v)=>{E(K,H,M,(K=>{"undefined"!==typeof K?a(K):v(new Error("Data is undefined"))}),q,w,u,y,h,W,I,f,z,G)}))}function s(K,H,M){let q=0,w=0,u=0,y=0;if("object"===typeof M){const h=M.precision?Math.abs(M.precision):1;M.width&&M.height?(q=M.height*h,w=M.width*h):M.width&&!M.height?(w=M.width*h,q=Math.round(w/K.getAspectRatio(H))):M.height&&!M.width?(q=M.height*h,w=Math.round(q*K.getAspectRatio(H))):(w=Math.round(K.getRenderWidth()*h),q=Math.round(w/K.getAspectRatio(H))),M.finalWidth&&M.finalHeight?(y=M.finalHeight,u=M.finalWidth):M.finalWidth&&!M.finalHeight?(u=M.finalWidth,y=Math.round(u/K.getAspectRatio(H))):M.finalHeight&&!M.finalWidth?(y=M.finalHeight,u=Math.round(y*K.getAspectRatio(H))):(u=w,y=q)}else isNaN(M)||(q=M,w=M,u=M,y=M);return w&&(w=Math.floor(w)),q&&(q=Math.floor(q)),u&&(u=Math.floor(u)),y&&(y=Math.floor(y)),{height:0|q,width:0|w,finalWidth:0|u,finalHeight:0|y}}const D={CreateScreenshot:C,CreateScreenshotAsync:i,CreateScreenshotWithResizeAsync:Z,CreateScreenshotUsingRenderTarget:E,CreateScreenshotUsingRenderTargetAsync:l};v.Tools.CreateScreenshot=C,v.Tools.CreateScreenshotAsync=i,v.Tools.CreateScreenshotUsingRenderTarget=E,v.Tools.CreateScreenshotUsingRenderTargetAsync=l}}]);