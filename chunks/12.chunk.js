"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[12],{2201:(L,j,P)=>{P.r(j),P.d(j,{Dispose:()=>V,DumpData:()=>g,DumpDataAsync:()=>S,DumpFramebuffer:()=>D,DumpTools:()=>N});var A=P(2062),R=P(475),o=P(670),Y=P(519);let u,a=null;async function D(L,j,P,A){let R=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",o=arguments.length>5?arguments[5]:void 0,Y=arguments.length>6?arguments[6]:void 0;const u=await P.readPixels(0,0,L,j);g(L,j,new Uint8Array(u.buffer),A,R,o,!0,void 0,Y)}async function S(L,j,P){let A=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",R=arguments.length>4?arguments[4]:void 0,o=arguments.length>5&&void 0!==arguments[5]&&arguments[5],Y=arguments.length>6&&void 0!==arguments[6]&&arguments[6],u=arguments.length>7?arguments[7]:void 0;return await new Promise((a=>{g(L,j,P,(L=>a(L)),A,R,o,Y,u)}))}function g(L,j,D,S){let g=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",N=arguments.length>5?arguments[5]:void 0,C=arguments.length>6&&void 0!==arguments[6]&&arguments[6],b=arguments.length>7&&void 0!==arguments[7]&&arguments[7],f=arguments.length>8?arguments[8]:void 0;(async function(){return a||(a=new Promise(((L,j)=>{let R,o=null;const a={Kg:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(P.bind(P,2080)).then((D=>{let{ThinEngine:S}=D;const g=Y.b.Instances.length;try{R=new OffscreenCanvas(100,100),o=new S(R,!1,a)}catch(b){var N;g<Y.b.Instances.length&&(null===(N=Y.b.Instances.pop())||void 0===N||N.dispose()),R=document.createElement("canvas"),o=new S(R,!1,a)}Y.b.Instances.pop(),Y.b.OnEnginesDisposedObservable.add((L=>{o&&L!==o&&!o.u&&0===Y.b.Instances.length&&V()})),o.getCaps().parallelShaderCompile=void 0;const C=new A.b(o);P.e(46).then(P.bind(P,13069)).then((P=>{let{passPixelShader:Y}=P;if(!o)return void j("Engine is not defined");const a=new A.e({Pi:o,name:Y.name,fragmentShader:Y.shader,samplerNames:["textureSampler"]});u={canvas:R,Pi:o,renderer:C,wrapper:a},L(u)}))})).catch(j)}))),await a})().then((P=>{if(P.Pi.setSize(L,j,!0),D instanceof Float32Array){const L=new Uint8Array(D.length);let j=D.length;for(;j--;){const P=D[j];L[j]=Math.round(255*(0,o.Clamp)(P))}D=L}const A=P.Pi.createRawTexture(D,L,j,5,!1,!C,1);P.renderer.setViewport(),P.renderer.applyEffectWrapper(P.wrapper),P.wrapper.effect._bindTexture("textureSampler",A),P.renderer.draw(),b?R.d.ToBlob(P.canvas,(L=>{const j=new FileReader;j.onload=L=>{const j=L.target.result;S&&S(j)},j.readAsArrayBuffer(L)}),g,f):R.d.EncodeScreenshotCanvasData(P.canvas,S,g,N,f),A.dispose()}))}function V(){var L;u?(u.wrapper.dispose(),u.renderer.dispose(),u.Pi.dispose()):null===(L=a)||void 0===L||L.then((L=>{L.wrapper.dispose(),L.renderer.dispose(),L.Pi.dispose()}));a=null,u=null}const N={DumpData:g,DumpDataAsync:S,DumpFramebuffer:D,Dispose:V};R.d.DumpData=g,R.d.DumpDataAsync=S,R.d.DumpFramebuffer=D}}]);