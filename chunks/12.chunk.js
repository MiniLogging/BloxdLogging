"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[12],{13222:(V,p,W)=>{W.r(p),W.d(p,{_DDSTextureLoader:()=>E});var N=W(11757),d=W(11766);class E{constructor(){this.supportCascades=!0}loadCubeData(V,p,W,E){const z=p.getEngine();let S,Q=!1,J=1e3;if(Array.isArray(V))for(let N=0;N<V.length;N++){const W=V[N];S=d.e.GetDDSInfo(W),p.width=S.width,p.height=S.height,Q=(S.isRGB||S.isLuminance||S.mipmapCount>1)&&p.generateMipMaps,z._unpackFlipY(S.isCompressed),d.e.UploadDDSLevels(z,p,W,S,Q,6,-1,N),S.isFourCC||1!==S.mipmapCount?J=S.mipmapCount-1:z.generateMipMapsForCubemap(p)}else{const E=V;S=d.e.GetDDSInfo(E),p.width=S.width,p.height=S.height,W&&(S.sphericalPolynomial=new N.i),Q=(S.isRGB||S.isLuminance||S.mipmapCount>1)&&p.generateMipMaps,z._unpackFlipY(S.isCompressed),d.e.UploadDDSLevels(z,p,E,S,Q,6),S.isFourCC||1!==S.mipmapCount?J=S.mipmapCount-1:z.generateMipMapsForCubemap(p,!1)}z._setCubeMapTextureParams(p,Q,J),p.isReady=!0,p.onLoadedObservable.notifyObservers(p),p.onLoadedObservable.clear(),E&&E({isDDS:!0,width:p.width,info:S,data:V,texture:p})}loadData(V,p,W){const N=d.e.GetDDSInfo(V),E=(N.isRGB||N.isLuminance||N.mipmapCount>1)&&p.generateMipMaps&&Math.max(N.width,N.height)>>N.mipmapCount-1===1;W(N.width,N.height,E,N.isFourCC,(()=>{d.e.UploadDDSLevels(p.getEngine(),p,V,N,E,1)}))}}}}]);