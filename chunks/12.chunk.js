"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[12],{12615:(K,b,e)=>{e.r(b),e.d(b,{_DDSTextureLoader:()=>j});var z=e(11479),k=e(11497);class j{constructor(){this.supportCascades=!0}loadCubeData(K,b,e,j){const T=b.getEngine();let F,l=!1,Y=1e3;if(Array.isArray(K))for(let z=0;z<K.length;z++){const e=K[z];F=k.c.GetDDSInfo(e),b.width=F.width,b.height=F.height,l=(F.isRGB||F.isLuminance||F.mipmapCount>1)&&b.generateMipMaps,T._unpackFlipY(F.isCompressed),k.c.UploadDDSLevels(T,b,e,F,l,6,-1,z),F.isFourCC||1!==F.mipmapCount?Y=F.mipmapCount-1:T.generateMipMapsForCubemap(b)}else{const j=K;F=k.c.GetDDSInfo(j),b.width=F.width,b.height=F.height,e&&(F.sphericalPolynomial=new z.c),l=(F.isRGB||F.isLuminance||F.mipmapCount>1)&&b.generateMipMaps,T._unpackFlipY(F.isCompressed),k.c.UploadDDSLevels(T,b,j,F,l,6),F.isFourCC||1!==F.mipmapCount?Y=F.mipmapCount-1:T.generateMipMapsForCubemap(b,!1)}T._setCubeMapTextureParams(b,l,Y),b.isReady=!0,b.onLoadedObservable.notifyObservers(b),b.onLoadedObservable.clear(),j&&j({isDDS:!0,width:b.width,info:F,data:K,texture:b})}loadData(K,b,e){const z=k.c.GetDDSInfo(K),j=(z.isRGB||z.isLuminance||z.mipmapCount>1)&&b.generateMipMaps&&Math.max(z.width,z.height)>>z.mipmapCount-1===1;e(z.width,z.height,j,z.isFourCC,(()=>{k.c.UploadDDSLevels(b.getEngine(),b,K,z,j,1)}))}}}}]);