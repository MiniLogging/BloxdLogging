"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{10317:(L,J,o)=>{o.r(J),o.d(J,{_TGATextureLoader:()=>b});var g=o(1082);function V(L){let J=0;return{id_length:L[J++],colormap_type:L[J++],image_type:L[J++],colormap_index:L[J++]|L[J++]<<8,colormap_length:L[J++]|L[J++]<<8,colormap_size:L[J++],origin:[L[J++]|L[J++]<<8,L[J++]|L[J++]<<8],width:L[J++]|L[J++]<<8,height:L[J++]|L[J++]<<8,pixel_size:L[J++],flags:L[J++]}}function q(L,J){if(J.length<19)return void g.e.Error("Unable to load TGA file - Not enough data to contain header");let o=18;const q=V(J);if(q.id_length+o>J.length)return void g.e.Error("Unable to load TGA file - Not enough data");o+=q.id_length;let b,D=!1,Z=!1,C=!1;switch(q.image_type){case 9:D=!0;case 1:Z=!0;break;case 10:D=!0;case 2:break;case 11:D=!0;case 3:C=!0}const v=q.pixel_size>>3,U=q.width*q.height*v;let k,H,e,T,O,l,a;if(Z&&(k=J.subarray(o,o+=q.colormap_length*(q.colormap_size>>3))),D){let L,g,V;b=new Uint8Array(U);let q=0;const I=new Uint8Array(v);for(;o<U&&q<U;)if(L=J[o++],g=1+(127&L),128&L){for(V=0;V<v;++V)I[V]=J[o++];for(V=0;V<g;++V)b.set(I,q+V*v);q+=v*g}else{for(g*=v,V=0;V<g;++V)b[q+V]=J[o++];q+=g}}else b=J.subarray(o,o+=Z?q.width*q.height:U);switch((48&q.flags)>>4){default:case 2:H=0,T=1,a=q.width,e=0,O=1,l=q.height;break;case 0:H=0,T=1,a=q.width,e=q.height-1,O=-1,l=-1;break;case 3:H=q.width-1,T=-1,a=-1,e=0,O=1,l=q.height;break;case 1:H=q.width-1,T=-1,a=-1,e=q.height-1,O=-1,l=-1}const S="_getImageData"+(C?"Grey":"")+q.pixel_size+"bits",y=I[S](q,k,b,e,O,l,H,T,a);L.getEngine()._uploadDataToTextureDirectly(L,y)}const I={GetTGAHeader:V,UploadContent:q,_getImageData8bits:function(L,J,o,g,V,q,I,b,D){const Z=o,C=J,v=L.width,U=L.height;let k,H,e,T=0;const O=new Uint8Array(v*U*4);for(e=g;e!==q;e+=V)for(H=I;H!==D;H+=b,T++)k=Z[T],O[4*(H+v*e)+3]=255,O[4*(H+v*e)+2]=C[3*k+0],O[4*(H+v*e)+1]=C[3*k+1],O[4*(H+v*e)+0]=C[3*k+2];return O},_getImageData16bits:function(L,J,o,g,V,q,I,b,D){const Z=o,C=L.width,v=L.height;let U,k,H,e=0;const T=new Uint8Array(C*v*4);for(H=g;H!==q;H+=V)for(k=I;k!==D;k+=b,e+=2){U=Z[e+0]+(Z[e+1]<<8);const L=255*((31744&U)>>10)/31|0,J=255*((992&U)>>5)/31|0,o=255*(31&U)/31|0;T[4*(k+C*H)+0]=L,T[4*(k+C*H)+1]=J,T[4*(k+C*H)+2]=o,T[4*(k+C*H)+3]=32768&U?0:255}return T},_getImageData24bits:function(L,J,o,g,V,q,I,b,D){const Z=o,C=L.width,v=L.height;let U,k,H=0;const e=new Uint8Array(C*v*4);for(k=g;k!==q;k+=V)for(U=I;U!==D;U+=b,H+=3)e[4*(U+C*k)+3]=255,e[4*(U+C*k)+2]=Z[H+0],e[4*(U+C*k)+1]=Z[H+1],e[4*(U+C*k)+0]=Z[H+2];return e},_getImageData32bits:function(L,J,o,g,V,q,I,b,D){const Z=o,C=L.width,v=L.height;let U,k,H=0;const e=new Uint8Array(C*v*4);for(k=g;k!==q;k+=V)for(U=I;U!==D;U+=b,H+=4)e[4*(U+C*k)+2]=Z[H+0],e[4*(U+C*k)+1]=Z[H+1],e[4*(U+C*k)+0]=Z[H+2],e[4*(U+C*k)+3]=Z[H+3];return e},_getImageDataGrey8bits:function(L,J,o,g,V,q,I,b,D){const Z=o,C=L.width,v=L.height;let U,k,H,e=0;const T=new Uint8Array(C*v*4);for(H=g;H!==q;H+=V)for(k=I;k!==D;k+=b,e++)U=Z[e],T[4*(k+C*H)+0]=U,T[4*(k+C*H)+1]=U,T[4*(k+C*H)+2]=U,T[4*(k+C*H)+3]=255;return T},_getImageDataGrey16bits:function(L,J,o,g,V,q,I,b,D){const Z=o,C=L.width,v=L.height;let U,k,H=0;const e=new Uint8Array(C*v*4);for(k=g;k!==q;k+=V)for(U=I;U!==D;U+=b,H+=2)e[4*(U+C*k)+0]=Z[H+0],e[4*(U+C*k)+1]=Z[H+0],e[4*(U+C*k)+2]=Z[H+0],e[4*(U+C*k)+3]=Z[H+1];return e}};class b{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(L,J,o){const g=new Uint8Array(L.buffer,L.byteOffset,L.byteLength),I=V(g);o(I.width,I.height,J.generateMipMaps,!1,(()=>{q(J,g)}))}}}}]);