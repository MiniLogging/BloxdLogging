"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{10473:(U,b,e)=>{e.r(b),e.d(b,{_TGATextureLoader:()=>D});var K=e(1032);function p(U){let b=0;return{id_length:U[b++],colormap_type:U[b++],image_type:U[b++],colormap_index:U[b++]|U[b++]<<8,colormap_length:U[b++]|U[b++]<<8,colormap_size:U[b++],origin:[U[b++]|U[b++]<<8,U[b++]|U[b++]<<8],width:U[b++]|U[b++]<<8,height:U[b++]|U[b++]<<8,pixel_size:U[b++],flags:U[b++]}}function m(U,b){if(b.length<19)return void K.b.Error("Unable to load TGA file - Not enough data to contain header");let e=18;const m=p(b);if(m.id_length+e>b.length)return void K.b.Error("Unable to load TGA file - Not enough data");e+=m.id_length;let D,S=!1,u=!1,r=!1;switch(m.image_type){case 9:S=!0;case 1:u=!0;break;case 10:S=!0;case 2:break;case 11:S=!0;case 3:r=!0}const W=m.pixel_size>>3,f=m.width*m.height*W;let l,P,G,E,A,Y,V;if(u&&(l=b.subarray(e,e+=m.colormap_length*(m.colormap_size>>3))),S){let U,K,p;D=new Uint8Array(f);let m=0;const i=new Uint8Array(W);for(;e<f&&m<f;)if(U=b[e++],K=1+(127&U),128&U){for(p=0;p<W;++p)i[p]=b[e++];for(p=0;p<K;++p)D.set(i,m+p*W);m+=W*K}else{for(K*=W,p=0;p<K;++p)D[m+p]=b[e++];m+=K}}else D=b.subarray(e,e+=u?m.width*m.height:f);switch((48&m.flags)>>4){default:case 2:P=0,E=1,V=m.width,G=0,A=1,Y=m.height;break;case 0:P=0,E=1,V=m.width,G=m.height-1,A=-1,Y=-1;break;case 3:P=m.width-1,E=-1,V=-1,G=0,A=1,Y=m.height;break;case 1:P=m.width-1,E=-1,V=-1,G=m.height-1,A=-1,Y=-1}const M="_getImageData"+(r?"Grey":"")+m.pixel_size+"bits",Z=i[M](m,l,D,G,A,Y,P,E,V);U.getEngine()._uploadDataToTextureDirectly(U,Z)}const i={GetTGAHeader:p,UploadContent:m,_getImageData8bits:function(U,b,e,K,p,m,i,D,S){const u=e,r=b,W=U.width,f=U.height;let l,P,G,E=0;const A=new Uint8Array(W*f*4);for(G=K;G!==m;G+=p)for(P=i;P!==S;P+=D,E++)l=u[E],A[4*(P+W*G)+3]=255,A[4*(P+W*G)+2]=r[3*l+0],A[4*(P+W*G)+1]=r[3*l+1],A[4*(P+W*G)+0]=r[3*l+2];return A},_getImageData16bits:function(U,b,e,K,p,m,i,D,S){const u=e,r=U.width,W=U.height;let f,l,P,G=0;const E=new Uint8Array(r*W*4);for(P=K;P!==m;P+=p)for(l=i;l!==S;l+=D,G+=2){f=u[G+0]+(u[G+1]<<8);const U=255*((31744&f)>>10)/31|0,b=255*((992&f)>>5)/31|0,e=255*(31&f)/31|0;E[4*(l+r*P)+0]=U,E[4*(l+r*P)+1]=b,E[4*(l+r*P)+2]=e,E[4*(l+r*P)+3]=32768&f?0:255}return E},_getImageData24bits:function(U,b,e,K,p,m,i,D,S){const u=e,r=U.width,W=U.height;let f,l,P=0;const G=new Uint8Array(r*W*4);for(l=K;l!==m;l+=p)for(f=i;f!==S;f+=D,P+=3)G[4*(f+r*l)+3]=255,G[4*(f+r*l)+2]=u[P+0],G[4*(f+r*l)+1]=u[P+1],G[4*(f+r*l)+0]=u[P+2];return G},_getImageData32bits:function(U,b,e,K,p,m,i,D,S){const u=e,r=U.width,W=U.height;let f,l,P=0;const G=new Uint8Array(r*W*4);for(l=K;l!==m;l+=p)for(f=i;f!==S;f+=D,P+=4)G[4*(f+r*l)+2]=u[P+0],G[4*(f+r*l)+1]=u[P+1],G[4*(f+r*l)+0]=u[P+2],G[4*(f+r*l)+3]=u[P+3];return G},_getImageDataGrey8bits:function(U,b,e,K,p,m,i,D,S){const u=e,r=U.width,W=U.height;let f,l,P,G=0;const E=new Uint8Array(r*W*4);for(P=K;P!==m;P+=p)for(l=i;l!==S;l+=D,G++)f=u[G],E[4*(l+r*P)+0]=f,E[4*(l+r*P)+1]=f,E[4*(l+r*P)+2]=f,E[4*(l+r*P)+3]=255;return E},_getImageDataGrey16bits:function(U,b,e,K,p,m,i,D,S){const u=e,r=U.width,W=U.height;let f,l,P=0;const G=new Uint8Array(r*W*4);for(l=K;l!==m;l+=p)for(f=i;f!==S;f+=D,P+=2)G[4*(f+r*l)+0]=u[P+0],G[4*(f+r*l)+1]=u[P+0],G[4*(f+r*l)+2]=u[P+0],G[4*(f+r*l)+3]=u[P+1];return G}};class D{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(U,b,e){const K=new Uint8Array(U.buffer,U.byteOffset,U.byteLength),i=p(K);e(i.width,i.height,b.generateMipMaps,!1,(()=>{m(b,K)}))}}}}]);