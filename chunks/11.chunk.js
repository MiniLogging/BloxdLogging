"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{11048:(b,o,l)=>{l.r(o),l.d(o,{_TGATextureLoader:()=>n});var g=l(1137);function I(b){let o=0;return{id_length:b[o++],colormap_type:b[o++],image_type:b[o++],colormap_index:b[o++]|b[o++]<<8,colormap_length:b[o++]|b[o++]<<8,colormap_size:b[o++],origin:[b[o++]|b[o++]<<8,b[o++]|b[o++]<<8],width:b[o++]|b[o++]<<8,height:b[o++]|b[o++]<<8,pixel_size:b[o++],flags:b[o++]}}function v(b,o){if(o.length<19)return void g.d.Error("Unable to load TGA file - Not enough data to contain header");let l=18;const v=I(o);if(v.id_length+l>o.length)return void g.d.Error("Unable to load TGA file - Not enough data");l+=v.id_length;let n,T=!1,t=!1,A=!1;switch(v.image_type){case 9:T=!0;case 1:t=!0;break;case 10:T=!0;case 2:break;case 11:T=!0;case 3:A=!0}const w=v.pixel_size>>3,C=v.width*v.height*w;let U,m,N,x,k,D,a;if(t&&(U=o.subarray(l,l+=v.colormap_length*(v.colormap_size>>3))),T){let b,g,I;n=new Uint8Array(C);let v=0;const W=new Uint8Array(w);for(;l<C&&v<C;)if(b=o[l++],g=1+(127&b),128&b){for(I=0;I<w;++I)W[I]=o[l++];for(I=0;I<g;++I)n.set(W,v+I*w);v+=w*g}else{for(g*=w,I=0;I<g;++I)n[v+I]=o[l++];v+=g}}else n=o.subarray(l,l+=t?v.width*v.height:C);switch((48&v.flags)>>4){default:case 2:m=0,x=1,a=v.width,N=0,k=1,D=v.height;break;case 0:m=0,x=1,a=v.width,N=v.height-1,k=-1,D=-1;break;case 3:m=v.width-1,x=-1,a=-1,N=0,k=1,D=v.height;break;case 1:m=v.width-1,x=-1,a=-1,N=v.height-1,k=-1,D=-1}const c="_getImageData"+(A?"Grey":"")+v.pixel_size+"bits",G=W[c](v,U,n,N,k,D,m,x,a);b.getEngine()._uploadDataToTextureDirectly(b,G)}const W={GetTGAHeader:I,UploadContent:v,_getImageData8bits:function(b,o,l,g,I,v,W,n,T){const t=l,A=o,w=b.width,C=b.height;let U,m,N,x=0;const k=new Uint8Array(w*C*4);for(N=g;N!==v;N+=I)for(m=W;m!==T;m+=n,x++)U=t[x],k[4*(m+w*N)+3]=255,k[4*(m+w*N)+2]=A[3*U+0],k[4*(m+w*N)+1]=A[3*U+1],k[4*(m+w*N)+0]=A[3*U+2];return k},_getImageData16bits:function(b,o,l,g,I,v,W,n,T){const t=l,A=b.width,w=b.height;let C,U,m,N=0;const x=new Uint8Array(A*w*4);for(m=g;m!==v;m+=I)for(U=W;U!==T;U+=n,N+=2){C=t[N+0]+(t[N+1]<<8);const b=255*((31744&C)>>10)/31|0,o=255*((992&C)>>5)/31|0,l=255*(31&C)/31|0;x[4*(U+A*m)+0]=b,x[4*(U+A*m)+1]=o,x[4*(U+A*m)+2]=l,x[4*(U+A*m)+3]=32768&C?0:255}return x},_getImageData24bits:function(b,o,l,g,I,v,W,n,T){const t=l,A=b.width,w=b.height;let C,U,m=0;const N=new Uint8Array(A*w*4);for(U=g;U!==v;U+=I)for(C=W;C!==T;C+=n,m+=3)N[4*(C+A*U)+3]=255,N[4*(C+A*U)+2]=t[m+0],N[4*(C+A*U)+1]=t[m+1],N[4*(C+A*U)+0]=t[m+2];return N},_getImageData32bits:function(b,o,l,g,I,v,W,n,T){const t=l,A=b.width,w=b.height;let C,U,m=0;const N=new Uint8Array(A*w*4);for(U=g;U!==v;U+=I)for(C=W;C!==T;C+=n,m+=4)N[4*(C+A*U)+2]=t[m+0],N[4*(C+A*U)+1]=t[m+1],N[4*(C+A*U)+0]=t[m+2],N[4*(C+A*U)+3]=t[m+3];return N},_getImageDataGrey8bits:function(b,o,l,g,I,v,W,n,T){const t=l,A=b.width,w=b.height;let C,U,m,N=0;const x=new Uint8Array(A*w*4);for(m=g;m!==v;m+=I)for(U=W;U!==T;U+=n,N++)C=t[N],x[4*(U+A*m)+0]=C,x[4*(U+A*m)+1]=C,x[4*(U+A*m)+2]=C,x[4*(U+A*m)+3]=255;return x},_getImageDataGrey16bits:function(b,o,l,g,I,v,W,n,T){const t=l,A=b.width,w=b.height;let C,U,m=0;const N=new Uint8Array(A*w*4);for(U=g;U!==v;U+=I)for(C=W;C!==T;C+=n,m+=2)N[4*(C+A*U)+0]=t[m+0],N[4*(C+A*U)+1]=t[m+0],N[4*(C+A*U)+2]=t[m+0],N[4*(C+A*U)+3]=t[m+1];return N}};class n{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(b,o,l){const g=new Uint8Array(b.buffer,b.byteOffset,b.byteLength),W=I(g);l(W.width,W.height,o.generateMipMaps,!1,(()=>{v(o,g)}))}}}}]);