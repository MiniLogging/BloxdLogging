"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{11112:(f,H,Q)=>{Q.r(H),Q.d(H,{_TGATextureLoader:()=>e});var a=Q(1093);function d(f){let H=0;return{id_length:f[H++],colormap_type:f[H++],image_type:f[H++],colormap_index:f[H++]|f[H++]<<8,colormap_length:f[H++]|f[H++]<<8,colormap_size:f[H++],origin:[f[H++]|f[H++]<<8,f[H++]|f[H++]<<8],width:f[H++]|f[H++]<<8,height:f[H++]|f[H++]<<8,pixel_size:f[H++],flags:f[H++]}}function s(f,H){if(H.length<19)return void a.c.Error("Unable to load TGA file - Not enough data to contain header");let Q=18;const s=d(H);if(s.id_length+Q>H.length)return void a.c.Error("Unable to load TGA file - Not enough data");Q+=s.id_length;let e,c=!1,J=!1,u=!1;switch(s.image_type){case 9:c=!0;case 1:J=!0;break;case 10:c=!0;case 2:break;case 11:c=!0;case 3:u=!0}const Y=s.pixel_size>>3,k=s.width*s.height*Y;let X,F,r,v,S,M,q;if(J&&(X=H.subarray(Q,Q+=s.colormap_length*(s.colormap_size>>3))),c){let f,a,d;e=new Uint8Array(k);let s=0;const n=new Uint8Array(Y);for(;Q<k&&s<k;)if(f=H[Q++],a=1+(127&f),128&f){for(d=0;d<Y;++d)n[d]=H[Q++];for(d=0;d<a;++d)e.set(n,s+d*Y);s+=Y*a}else{for(a*=Y,d=0;d<a;++d)e[s+d]=H[Q++];s+=a}}else e=H.subarray(Q,Q+=J?s.width*s.height:k);switch((48&s.flags)>>4){default:case 2:F=0,v=1,q=s.width,r=0,S=1,M=s.height;break;case 0:F=0,v=1,q=s.width,r=s.height-1,S=-1,M=-1;break;case 3:F=s.width-1,v=-1,q=-1,r=0,S=1,M=s.height;break;case 1:F=s.width-1,v=-1,q=-1,r=s.height-1,S=-1,M=-1}const z="_getImageData"+(u?"Grey":"")+s.pixel_size+"bits",I=n[z](s,X,e,r,S,M,F,v,q);f.getEngine()._uploadDataToTextureDirectly(f,I)}const n={GetTGAHeader:d,UploadContent:s,_getImageData8bits:function(f,H,Q,a,d,s,n,e,c){const J=Q,u=H,Y=f.width,k=f.height;let X,F,r,v=0;const S=new Uint8Array(Y*k*4);for(r=a;r!==s;r+=d)for(F=n;F!==c;F+=e,v++)X=J[v],S[4*(F+Y*r)+3]=255,S[4*(F+Y*r)+2]=u[3*X+0],S[4*(F+Y*r)+1]=u[3*X+1],S[4*(F+Y*r)+0]=u[3*X+2];return S},_getImageData16bits:function(f,H,Q,a,d,s,n,e,c){const J=Q,u=f.width,Y=f.height;let k,X,F,r=0;const v=new Uint8Array(u*Y*4);for(F=a;F!==s;F+=d)for(X=n;X!==c;X+=e,r+=2){k=J[r+0]+(J[r+1]<<8);const f=255*((31744&k)>>10)/31|0,H=255*((992&k)>>5)/31|0,Q=255*(31&k)/31|0;v[4*(X+u*F)+0]=f,v[4*(X+u*F)+1]=H,v[4*(X+u*F)+2]=Q,v[4*(X+u*F)+3]=32768&k?0:255}return v},_getImageData24bits:function(f,H,Q,a,d,s,n,e,c){const J=Q,u=f.width,Y=f.height;let k,X,F=0;const r=new Uint8Array(u*Y*4);for(X=a;X!==s;X+=d)for(k=n;k!==c;k+=e,F+=3)r[4*(k+u*X)+3]=255,r[4*(k+u*X)+2]=J[F+0],r[4*(k+u*X)+1]=J[F+1],r[4*(k+u*X)+0]=J[F+2];return r},_getImageData32bits:function(f,H,Q,a,d,s,n,e,c){const J=Q,u=f.width,Y=f.height;let k,X,F=0;const r=new Uint8Array(u*Y*4);for(X=a;X!==s;X+=d)for(k=n;k!==c;k+=e,F+=4)r[4*(k+u*X)+2]=J[F+0],r[4*(k+u*X)+1]=J[F+1],r[4*(k+u*X)+0]=J[F+2],r[4*(k+u*X)+3]=J[F+3];return r},_getImageDataGrey8bits:function(f,H,Q,a,d,s,n,e,c){const J=Q,u=f.width,Y=f.height;let k,X,F,r=0;const v=new Uint8Array(u*Y*4);for(F=a;F!==s;F+=d)for(X=n;X!==c;X+=e,r++)k=J[r],v[4*(X+u*F)+0]=k,v[4*(X+u*F)+1]=k,v[4*(X+u*F)+2]=k,v[4*(X+u*F)+3]=255;return v},_getImageDataGrey16bits:function(f,H,Q,a,d,s,n,e,c){const J=Q,u=f.width,Y=f.height;let k,X,F=0;const r=new Uint8Array(u*Y*4);for(X=a;X!==s;X+=d)for(k=n;k!==c;k+=e,F+=2)r[4*(k+u*X)+0]=J[F+0],r[4*(k+u*X)+1]=J[F+0],r[4*(k+u*X)+2]=J[F+0],r[4*(k+u*X)+3]=J[F+1];return r}};class e{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(f,H,Q){const a=new Uint8Array(f.buffer,f.byteOffset,f.byteLength),n=d(a);Q(n.width,n.height,H.generateMipMaps,!1,(()=>{s(H,a)}))}}}}]);