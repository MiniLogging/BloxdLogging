"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{10344:(r,L,M)=>{M.r(L),M.d(L,{_TGATextureLoader:()=>s});var S=M(1027);function T(r){let L=0;return{id_length:r[L++],colormap_type:r[L++],image_type:r[L++],colormap_index:r[L++]|r[L++]<<8,colormap_length:r[L++]|r[L++]<<8,colormap_size:r[L++],origin:[r[L++]|r[L++]<<8,r[L++]|r[L++]<<8],width:r[L++]|r[L++]<<8,height:r[L++]|r[L++]<<8,pixel_size:r[L++],flags:r[L++]}}function C(r,L){if(L.length<19)return void S.c.Error("Unable to load TGA file - Not enough data to contain header");let M=18;const C=T(L);if(C.id_length+M>L.length)return void S.c.Error("Unable to load TGA file - Not enough data");M+=C.id_length;let s,v=!1,u=!1,J=!1;switch(C.image_type){case 9:v=!0;case 1:u=!0;break;case 10:v=!0;case 2:break;case 11:v=!0;case 3:J=!0}const f=C.pixel_size>>3,t=C.width*C.height*f;let o,h,U,G,W,l,e;if(u&&(o=L.subarray(M,M+=C.colormap_length*(C.colormap_size>>3))),v){let r,S,T;s=new Uint8Array(t);let C=0;const y=new Uint8Array(f);for(;M<t&&C<t;)if(r=L[M++],S=1+(127&r),128&r){for(T=0;T<f;++T)y[T]=L[M++];for(T=0;T<S;++T)s.set(y,C+T*f);C+=f*S}else{for(S*=f,T=0;T<S;++T)s[C+T]=L[M++];C+=S}}else s=L.subarray(M,M+=u?C.width*C.height:t);switch((48&C.flags)>>4){default:case 2:h=0,G=1,e=C.width,U=0,W=1,l=C.height;break;case 0:h=0,G=1,e=C.width,U=C.height-1,W=-1,l=-1;break;case 3:h=C.width-1,G=-1,e=-1,U=0,W=1,l=C.height;break;case 1:h=C.width-1,G=-1,e=-1,U=C.height-1,W=-1,l=-1}const w="_getImageData"+(J?"Grey":"")+C.pixel_size+"bits",j=y[w](C,o,s,U,W,l,h,G,e);r.getEngine()._uploadDataToTextureDirectly(r,j)}const y={GetTGAHeader:T,UploadContent:C,_getImageData8bits:function(r,L,M,S,T,C,y,s,v){const u=M,J=L,f=r.width,t=r.height;let o,h,U,G=0;const W=new Uint8Array(f*t*4);for(U=S;U!==C;U+=T)for(h=y;h!==v;h+=s,G++)o=u[G],W[4*(h+f*U)+3]=255,W[4*(h+f*U)+2]=J[3*o+0],W[4*(h+f*U)+1]=J[3*o+1],W[4*(h+f*U)+0]=J[3*o+2];return W},_getImageData16bits:function(r,L,M,S,T,C,y,s,v){const u=M,J=r.width,f=r.height;let t,o,h,U=0;const G=new Uint8Array(J*f*4);for(h=S;h!==C;h+=T)for(o=y;o!==v;o+=s,U+=2){t=u[U+0]+(u[U+1]<<8);const r=255*((31744&t)>>10)/31|0,L=255*((992&t)>>5)/31|0,M=255*(31&t)/31|0;G[4*(o+J*h)+0]=r,G[4*(o+J*h)+1]=L,G[4*(o+J*h)+2]=M,G[4*(o+J*h)+3]=32768&t?0:255}return G},_getImageData24bits:function(r,L,M,S,T,C,y,s,v){const u=M,J=r.width,f=r.height;let t,o,h=0;const U=new Uint8Array(J*f*4);for(o=S;o!==C;o+=T)for(t=y;t!==v;t+=s,h+=3)U[4*(t+J*o)+3]=255,U[4*(t+J*o)+2]=u[h+0],U[4*(t+J*o)+1]=u[h+1],U[4*(t+J*o)+0]=u[h+2];return U},_getImageData32bits:function(r,L,M,S,T,C,y,s,v){const u=M,J=r.width,f=r.height;let t,o,h=0;const U=new Uint8Array(J*f*4);for(o=S;o!==C;o+=T)for(t=y;t!==v;t+=s,h+=4)U[4*(t+J*o)+2]=u[h+0],U[4*(t+J*o)+1]=u[h+1],U[4*(t+J*o)+0]=u[h+2],U[4*(t+J*o)+3]=u[h+3];return U},_getImageDataGrey8bits:function(r,L,M,S,T,C,y,s,v){const u=M,J=r.width,f=r.height;let t,o,h,U=0;const G=new Uint8Array(J*f*4);for(h=S;h!==C;h+=T)for(o=y;o!==v;o+=s,U++)t=u[U],G[4*(o+J*h)+0]=t,G[4*(o+J*h)+1]=t,G[4*(o+J*h)+2]=t,G[4*(o+J*h)+3]=255;return G},_getImageDataGrey16bits:function(r,L,M,S,T,C,y,s,v){const u=M,J=r.width,f=r.height;let t,o,h=0;const U=new Uint8Array(J*f*4);for(o=S;o!==C;o+=T)for(t=y;t!==v;t+=s,h+=2)U[4*(t+J*o)+0]=u[h+0],U[4*(t+J*o)+1]=u[h+0],U[4*(t+J*o)+2]=u[h+0],U[4*(t+J*o)+3]=u[h+1];return U}};class s{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(r,L,M){const S=new Uint8Array(r.buffer,r.byteOffset,r.byteLength),y=T(S);M(y.width,y.height,L.generateMipMaps,!1,(()=>{C(L,S)}))}}}}]);