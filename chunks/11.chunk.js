"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{10744:(O,q,s)=>{s.r(q),s.d(q,{_TGATextureLoader:()=>y});var Z=s(1077);function D(O){let q=0;return{id_length:O[q++],colormap_type:O[q++],image_type:O[q++],colormap_index:O[q++]|O[q++]<<8,colormap_length:O[q++]|O[q++]<<8,colormap_size:O[q++],origin:[O[q++]|O[q++]<<8,O[q++]|O[q++]<<8],width:O[q++]|O[q++]<<8,height:O[q++]|O[q++]<<8,pixel_size:O[q++],flags:O[q++]}}function B(O,q){if(q.length<19)return void Z.d.Error("Unable to load TGA file - Not enough data to contain header");let s=18;const B=D(q);if(B.id_length+s>q.length)return void Z.d.Error("Unable to load TGA file - Not enough data");s+=B.id_length;let y,o=!1,w=!1,h=!1;switch(B.image_type){case 9:o=!0;case 1:w=!0;break;case 10:o=!0;case 2:break;case 11:o=!0;case 3:h=!0}const n=B.pixel_size>>3,r=B.width*B.height*n;let j,f,u,c,W,m,g;if(w&&(j=q.subarray(s,s+=B.colormap_length*(B.colormap_size>>3))),o){let O,Z,D;y=new Uint8Array(r);let B=0;const P=new Uint8Array(n);for(;s<r&&B<r;)if(O=q[s++],Z=1+(127&O),128&O){for(D=0;D<n;++D)P[D]=q[s++];for(D=0;D<Z;++D)y.set(P,B+D*n);B+=n*Z}else{for(Z*=n,D=0;D<Z;++D)y[B+D]=q[s++];B+=Z}}else y=q.subarray(s,s+=w?B.width*B.height:r);switch((48&B.flags)>>4){default:case 2:f=0,c=1,g=B.width,u=0,W=1,m=B.height;break;case 0:f=0,c=1,g=B.width,u=B.height-1,W=-1,m=-1;break;case 3:f=B.width-1,c=-1,g=-1,u=0,W=1,m=B.height;break;case 1:f=B.width-1,c=-1,g=-1,u=B.height-1,W=-1,m=-1}const R="_getImageData"+(h?"Grey":"")+B.pixel_size+"bits",N=P[R](B,j,y,u,W,m,f,c,g);O.getEngine()._uploadDataToTextureDirectly(O,N)}const P={GetTGAHeader:D,UploadContent:B,_getImageData8bits:function(O,q,s,Z,D,B,P,y,o){const w=s,h=q,n=O.width,r=O.height;let j,f,u,c=0;const W=new Uint8Array(n*r*4);for(u=Z;u!==B;u+=D)for(f=P;f!==o;f+=y,c++)j=w[c],W[4*(f+n*u)+3]=255,W[4*(f+n*u)+2]=h[3*j+0],W[4*(f+n*u)+1]=h[3*j+1],W[4*(f+n*u)+0]=h[3*j+2];return W},_getImageData16bits:function(O,q,s,Z,D,B,P,y,o){const w=s,h=O.width,n=O.height;let r,j,f,u=0;const c=new Uint8Array(h*n*4);for(f=Z;f!==B;f+=D)for(j=P;j!==o;j+=y,u+=2){r=w[u+0]+(w[u+1]<<8);const O=255*((31744&r)>>10)/31|0,q=255*((992&r)>>5)/31|0,s=255*(31&r)/31|0;c[4*(j+h*f)+0]=O,c[4*(j+h*f)+1]=q,c[4*(j+h*f)+2]=s,c[4*(j+h*f)+3]=32768&r?0:255}return c},_getImageData24bits:function(O,q,s,Z,D,B,P,y,o){const w=s,h=O.width,n=O.height;let r,j,f=0;const u=new Uint8Array(h*n*4);for(j=Z;j!==B;j+=D)for(r=P;r!==o;r+=y,f+=3)u[4*(r+h*j)+3]=255,u[4*(r+h*j)+2]=w[f+0],u[4*(r+h*j)+1]=w[f+1],u[4*(r+h*j)+0]=w[f+2];return u},_getImageData32bits:function(O,q,s,Z,D,B,P,y,o){const w=s,h=O.width,n=O.height;let r,j,f=0;const u=new Uint8Array(h*n*4);for(j=Z;j!==B;j+=D)for(r=P;r!==o;r+=y,f+=4)u[4*(r+h*j)+2]=w[f+0],u[4*(r+h*j)+1]=w[f+1],u[4*(r+h*j)+0]=w[f+2],u[4*(r+h*j)+3]=w[f+3];return u},_getImageDataGrey8bits:function(O,q,s,Z,D,B,P,y,o){const w=s,h=O.width,n=O.height;let r,j,f,u=0;const c=new Uint8Array(h*n*4);for(f=Z;f!==B;f+=D)for(j=P;j!==o;j+=y,u++)r=w[u],c[4*(j+h*f)+0]=r,c[4*(j+h*f)+1]=r,c[4*(j+h*f)+2]=r,c[4*(j+h*f)+3]=255;return c},_getImageDataGrey16bits:function(O,q,s,Z,D,B,P,y,o){const w=s,h=O.width,n=O.height;let r,j,f=0;const u=new Uint8Array(h*n*4);for(j=Z;j!==B;j+=D)for(r=P;r!==o;r+=y,f+=2)u[4*(r+h*j)+0]=w[f+0],u[4*(r+h*j)+1]=w[f+0],u[4*(r+h*j)+2]=w[f+0],u[4*(r+h*j)+3]=w[f+1];return u}};class y{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(O,q,s){const Z=new Uint8Array(O.buffer,O.byteOffset,O.byteLength),P=D(Z);s(P.width,P.height,q.generateMipMaps,!1,(()=>{B(q,Z)}))}}}}]);