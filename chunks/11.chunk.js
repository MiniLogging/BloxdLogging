"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{10263:(q,X,Q)=>{Q.r(X),Q.d(X,{_TGATextureLoader:()=>b});var y=Q(1099);function x(q){let X=0;return{id_length:q[X++],colormap_type:q[X++],image_type:q[X++],colormap_index:q[X++]|q[X++]<<8,colormap_length:q[X++]|q[X++]<<8,colormap_size:q[X++],origin:[q[X++]|q[X++]<<8,q[X++]|q[X++]<<8],width:q[X++]|q[X++]<<8,height:q[X++]|q[X++]<<8,pixel_size:q[X++],flags:q[X++]}}function u(q,X){if(X.length<19)return void y.b.Error("Unable to load TGA file - Not enough data to contain header");let Q=18;const u=x(X);if(u.id_length+Q>X.length)return void y.b.Error("Unable to load TGA file - Not enough data");Q+=u.id_length;let b,D=!1,a=!1,R=!1;switch(u.image_type){case 9:D=!0;case 1:a=!0;break;case 10:D=!0;case 2:break;case 11:D=!0;case 3:R=!0}const L=u.pixel_size>>3,f=u.width*u.height*L;let k,j,I,d,e,i,A;if(a&&(k=X.subarray(Q,Q+=u.colormap_length*(u.colormap_size>>3))),D){let q,y,x;b=new Uint8Array(f);let u=0;const H=new Uint8Array(L);for(;Q<f&&u<f;)if(q=X[Q++],y=1+(127&q),128&q){for(x=0;x<L;++x)H[x]=X[Q++];for(x=0;x<y;++x)b.set(H,u+x*L);u+=L*y}else{for(y*=L,x=0;x<y;++x)b[u+x]=X[Q++];u+=y}}else b=X.subarray(Q,Q+=a?u.width*u.height:f);switch((48&u.flags)>>4){default:case 2:j=0,d=1,A=u.width,I=0,e=1,i=u.height;break;case 0:j=0,d=1,A=u.width,I=u.height-1,e=-1,i=-1;break;case 3:j=u.width-1,d=-1,A=-1,I=0,e=1,i=u.height;break;case 1:j=u.width-1,d=-1,A=-1,I=u.height-1,e=-1,i=-1}const B="_getImageData"+(R?"Grey":"")+u.pixel_size+"bits",w=H[B](u,k,b,I,e,i,j,d,A);q.getEngine()._uploadDataToTextureDirectly(q,w)}const H={GetTGAHeader:x,UploadContent:u,_getImageData8bits:function(q,X,Q,y,x,u,H,b,D){const a=Q,R=X,L=q.width,f=q.height;let k,j,I,d=0;const e=new Uint8Array(L*f*4);for(I=y;I!==u;I+=x)for(j=H;j!==D;j+=b,d++)k=a[d],e[4*(j+L*I)+3]=255,e[4*(j+L*I)+2]=R[3*k+0],e[4*(j+L*I)+1]=R[3*k+1],e[4*(j+L*I)+0]=R[3*k+2];return e},_getImageData16bits:function(q,X,Q,y,x,u,H,b,D){const a=Q,R=q.width,L=q.height;let f,k,j,I=0;const d=new Uint8Array(R*L*4);for(j=y;j!==u;j+=x)for(k=H;k!==D;k+=b,I+=2){f=a[I+0]+(a[I+1]<<8);const q=255*((31744&f)>>10)/31|0,X=255*((992&f)>>5)/31|0,Q=255*(31&f)/31|0;d[4*(k+R*j)+0]=q,d[4*(k+R*j)+1]=X,d[4*(k+R*j)+2]=Q,d[4*(k+R*j)+3]=32768&f?0:255}return d},_getImageData24bits:function(q,X,Q,y,x,u,H,b,D){const a=Q,R=q.width,L=q.height;let f,k,j=0;const I=new Uint8Array(R*L*4);for(k=y;k!==u;k+=x)for(f=H;f!==D;f+=b,j+=3)I[4*(f+R*k)+3]=255,I[4*(f+R*k)+2]=a[j+0],I[4*(f+R*k)+1]=a[j+1],I[4*(f+R*k)+0]=a[j+2];return I},_getImageData32bits:function(q,X,Q,y,x,u,H,b,D){const a=Q,R=q.width,L=q.height;let f,k,j=0;const I=new Uint8Array(R*L*4);for(k=y;k!==u;k+=x)for(f=H;f!==D;f+=b,j+=4)I[4*(f+R*k)+2]=a[j+0],I[4*(f+R*k)+1]=a[j+1],I[4*(f+R*k)+0]=a[j+2],I[4*(f+R*k)+3]=a[j+3];return I},_getImageDataGrey8bits:function(q,X,Q,y,x,u,H,b,D){const a=Q,R=q.width,L=q.height;let f,k,j,I=0;const d=new Uint8Array(R*L*4);for(j=y;j!==u;j+=x)for(k=H;k!==D;k+=b,I++)f=a[I],d[4*(k+R*j)+0]=f,d[4*(k+R*j)+1]=f,d[4*(k+R*j)+2]=f,d[4*(k+R*j)+3]=255;return d},_getImageDataGrey16bits:function(q,X,Q,y,x,u,H,b,D){const a=Q,R=q.width,L=q.height;let f,k,j=0;const I=new Uint8Array(R*L*4);for(k=y;k!==u;k+=x)for(f=H;f!==D;f+=b,j+=2)I[4*(f+R*k)+0]=a[j+0],I[4*(f+R*k)+1]=a[j+0],I[4*(f+R*k)+2]=a[j+0],I[4*(f+R*k)+3]=a[j+1];return I}};class b{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(q,X,Q){const y=new Uint8Array(q.buffer,q.byteOffset,q.byteLength),H=x(y);Q(H.width,H.height,X.generateMipMaps,!1,(()=>{u(X,y)}))}}}}]);