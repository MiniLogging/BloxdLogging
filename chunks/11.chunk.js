"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{10718:(j,S,h)=>{h.r(S),h.d(S,{_TGATextureLoader:()=>f});var m=h(1050);function I(j){let S=0;return{id_length:j[S++],colormap_type:j[S++],image_type:j[S++],colormap_index:j[S++]|j[S++]<<8,colormap_length:j[S++]|j[S++]<<8,colormap_size:j[S++],origin:[j[S++]|j[S++]<<8,j[S++]|j[S++]<<8],width:j[S++]|j[S++]<<8,height:j[S++]|j[S++]<<8,pixel_size:j[S++],flags:j[S++]}}function d(j,S){if(S.length<19)return void m.b.Error("Unable to load TGA file - Not enough data to contain header");let h=18;const d=I(S);if(d.id_length+h>S.length)return void m.b.Error("Unable to load TGA file - Not enough data");h+=d.id_length;let f,r=!1,a=!1,M=!1;switch(d.image_type){case 9:r=!0;case 1:a=!0;break;case 10:r=!0;case 2:break;case 11:r=!0;case 3:M=!0}const O=d.pixel_size>>3,p=d.width*d.height*O;let e,w,l,P,v,o,R;if(a&&(e=S.subarray(h,h+=d.colormap_length*(d.colormap_size>>3))),r){let j,m,I;f=new Uint8Array(p);let d=0;const U=new Uint8Array(O);for(;h<p&&d<p;)if(j=S[h++],m=1+(127&j),128&j){for(I=0;I<O;++I)U[I]=S[h++];for(I=0;I<m;++I)f.set(U,d+I*O);d+=O*m}else{for(m*=O,I=0;I<m;++I)f[d+I]=S[h++];d+=m}}else f=S.subarray(h,h+=a?d.width*d.height:p);switch((48&d.flags)>>4){default:case 2:w=0,P=1,R=d.width,l=0,v=1,o=d.height;break;case 0:w=0,P=1,R=d.width,l=d.height-1,v=-1,o=-1;break;case 3:w=d.width-1,P=-1,R=-1,l=0,v=1,o=d.height;break;case 1:w=d.width-1,P=-1,R=-1,l=d.height-1,v=-1,o=-1}const i="_getImageData"+(M?"Grey":"")+d.pixel_size+"bits",N=U[i](d,e,f,l,v,o,w,P,R);j.getEngine()._uploadDataToTextureDirectly(j,N)}const U={GetTGAHeader:I,UploadContent:d,_getImageData8bits:function(j,S,h,m,I,d,U,f,r){const a=h,M=S,O=j.width,p=j.height;let e,w,l,P=0;const v=new Uint8Array(O*p*4);for(l=m;l!==d;l+=I)for(w=U;w!==r;w+=f,P++)e=a[P],v[4*(w+O*l)+3]=255,v[4*(w+O*l)+2]=M[3*e+0],v[4*(w+O*l)+1]=M[3*e+1],v[4*(w+O*l)+0]=M[3*e+2];return v},_getImageData16bits:function(j,S,h,m,I,d,U,f,r){const a=h,M=j.width,O=j.height;let p,e,w,l=0;const P=new Uint8Array(M*O*4);for(w=m;w!==d;w+=I)for(e=U;e!==r;e+=f,l+=2){p=a[l+0]+(a[l+1]<<8);const j=255*((31744&p)>>10)/31|0,S=255*((992&p)>>5)/31|0,h=255*(31&p)/31|0;P[4*(e+M*w)+0]=j,P[4*(e+M*w)+1]=S,P[4*(e+M*w)+2]=h,P[4*(e+M*w)+3]=32768&p?0:255}return P},_getImageData24bits:function(j,S,h,m,I,d,U,f,r){const a=h,M=j.width,O=j.height;let p,e,w=0;const l=new Uint8Array(M*O*4);for(e=m;e!==d;e+=I)for(p=U;p!==r;p+=f,w+=3)l[4*(p+M*e)+3]=255,l[4*(p+M*e)+2]=a[w+0],l[4*(p+M*e)+1]=a[w+1],l[4*(p+M*e)+0]=a[w+2];return l},_getImageData32bits:function(j,S,h,m,I,d,U,f,r){const a=h,M=j.width,O=j.height;let p,e,w=0;const l=new Uint8Array(M*O*4);for(e=m;e!==d;e+=I)for(p=U;p!==r;p+=f,w+=4)l[4*(p+M*e)+2]=a[w+0],l[4*(p+M*e)+1]=a[w+1],l[4*(p+M*e)+0]=a[w+2],l[4*(p+M*e)+3]=a[w+3];return l},_getImageDataGrey8bits:function(j,S,h,m,I,d,U,f,r){const a=h,M=j.width,O=j.height;let p,e,w,l=0;const P=new Uint8Array(M*O*4);for(w=m;w!==d;w+=I)for(e=U;e!==r;e+=f,l++)p=a[l],P[4*(e+M*w)+0]=p,P[4*(e+M*w)+1]=p,P[4*(e+M*w)+2]=p,P[4*(e+M*w)+3]=255;return P},_getImageDataGrey16bits:function(j,S,h,m,I,d,U,f,r){const a=h,M=j.width,O=j.height;let p,e,w=0;const l=new Uint8Array(M*O*4);for(e=m;e!==d;e+=I)for(p=U;p!==r;p+=f,w+=2)l[4*(p+M*e)+0]=a[w+0],l[4*(p+M*e)+1]=a[w+0],l[4*(p+M*e)+2]=a[w+0],l[4*(p+M*e)+3]=a[w+1];return l}};class f{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(j,S,h){const m=new Uint8Array(j.buffer,j.byteOffset,j.byteLength),U=I(m);h(U.width,U.height,S.generateMipMaps,!1,(()=>{d(S,m)}))}}}}]);