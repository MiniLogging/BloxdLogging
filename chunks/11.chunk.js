"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{10527:(M,E,b)=>{b.r(E),b.d(E,{_TGATextureLoader:()=>n});var x=b(1060);function k(M){let E=0;return{id_length:M[E++],colormap_type:M[E++],image_type:M[E++],colormap_index:M[E++]|M[E++]<<8,colormap_length:M[E++]|M[E++]<<8,colormap_size:M[E++],origin:[M[E++]|M[E++]<<8,M[E++]|M[E++]<<8],width:M[E++]|M[E++]<<8,height:M[E++]|M[E++]<<8,pixel_size:M[E++],flags:M[E++]}}function a(M,E){if(E.length<19)return void x.d.Error("Unable to load TGA file - Not enough data to contain header");let b=18;const a=k(E);if(a.id_length+b>E.length)return void x.d.Error("Unable to load TGA file - Not enough data");b+=a.id_length;let n,J=!1,u=!1,T=!1;switch(a.image_type){case 9:J=!0;case 1:u=!0;break;case 10:J=!0;case 2:break;case 11:J=!0;case 3:T=!0}const V=a.pixel_size>>3,I=a.width*a.height*V;let t,y,B,r,c,C,R;if(u&&(t=E.subarray(b,b+=a.colormap_length*(a.colormap_size>>3))),J){let M,x,k;n=new Uint8Array(I);let a=0;const g=new Uint8Array(V);for(;b<I&&a<I;)if(M=E[b++],x=1+(127&M),128&M){for(k=0;k<V;++k)g[k]=E[b++];for(k=0;k<x;++k)n.set(g,a+k*V);a+=V*x}else{for(x*=V,k=0;k<x;++k)n[a+k]=E[b++];a+=x}}else n=E.subarray(b,b+=u?a.width*a.height:I);switch((48&a.flags)>>4){default:case 2:y=0,r=1,R=a.width,B=0,c=1,C=a.height;break;case 0:y=0,r=1,R=a.width,B=a.height-1,c=-1,C=-1;break;case 3:y=a.width-1,r=-1,R=-1,B=0,c=1,C=a.height;break;case 1:y=a.width-1,r=-1,R=-1,B=a.height-1,c=-1,C=-1}const w="_getImageData"+(T?"Grey":"")+a.pixel_size+"bits",S=g[w](a,t,n,B,c,C,y,r,R);M.getEngine()._uploadDataToTextureDirectly(M,S)}const g={GetTGAHeader:k,UploadContent:a,_getImageData8bits:function(M,E,b,x,k,a,g,n,J){const u=b,T=E,V=M.width,I=M.height;let t,y,B,r=0;const c=new Uint8Array(V*I*4);for(B=x;B!==a;B+=k)for(y=g;y!==J;y+=n,r++)t=u[r],c[4*(y+V*B)+3]=255,c[4*(y+V*B)+2]=T[3*t+0],c[4*(y+V*B)+1]=T[3*t+1],c[4*(y+V*B)+0]=T[3*t+2];return c},_getImageData16bits:function(M,E,b,x,k,a,g,n,J){const u=b,T=M.width,V=M.height;let I,t,y,B=0;const r=new Uint8Array(T*V*4);for(y=x;y!==a;y+=k)for(t=g;t!==J;t+=n,B+=2){I=u[B+0]+(u[B+1]<<8);const M=255*((31744&I)>>10)/31|0,E=255*((992&I)>>5)/31|0,b=255*(31&I)/31|0;r[4*(t+T*y)+0]=M,r[4*(t+T*y)+1]=E,r[4*(t+T*y)+2]=b,r[4*(t+T*y)+3]=32768&I?0:255}return r},_getImageData24bits:function(M,E,b,x,k,a,g,n,J){const u=b,T=M.width,V=M.height;let I,t,y=0;const B=new Uint8Array(T*V*4);for(t=x;t!==a;t+=k)for(I=g;I!==J;I+=n,y+=3)B[4*(I+T*t)+3]=255,B[4*(I+T*t)+2]=u[y+0],B[4*(I+T*t)+1]=u[y+1],B[4*(I+T*t)+0]=u[y+2];return B},_getImageData32bits:function(M,E,b,x,k,a,g,n,J){const u=b,T=M.width,V=M.height;let I,t,y=0;const B=new Uint8Array(T*V*4);for(t=x;t!==a;t+=k)for(I=g;I!==J;I+=n,y+=4)B[4*(I+T*t)+2]=u[y+0],B[4*(I+T*t)+1]=u[y+1],B[4*(I+T*t)+0]=u[y+2],B[4*(I+T*t)+3]=u[y+3];return B},_getImageDataGrey8bits:function(M,E,b,x,k,a,g,n,J){const u=b,T=M.width,V=M.height;let I,t,y,B=0;const r=new Uint8Array(T*V*4);for(y=x;y!==a;y+=k)for(t=g;t!==J;t+=n,B++)I=u[B],r[4*(t+T*y)+0]=I,r[4*(t+T*y)+1]=I,r[4*(t+T*y)+2]=I,r[4*(t+T*y)+3]=255;return r},_getImageDataGrey16bits:function(M,E,b,x,k,a,g,n,J){const u=b,T=M.width,V=M.height;let I,t,y=0;const B=new Uint8Array(T*V*4);for(t=x;t!==a;t+=k)for(I=g;I!==J;I+=n,y+=2)B[4*(I+T*t)+0]=u[y+0],B[4*(I+T*t)+1]=u[y+0],B[4*(I+T*t)+2]=u[y+0],B[4*(I+T*t)+3]=u[y+1];return B}};class n{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(M,E,b){const x=new Uint8Array(M.buffer,M.byteOffset,M.byteLength),g=k(x);b(g.width,g.height,E.generateMipMaps,!1,(()=>{a(E,x)}))}}}}]);