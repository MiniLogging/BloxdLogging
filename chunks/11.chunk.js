"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{10229:(b,G,i)=>{i.r(G),i.d(G,{_TGATextureLoader:()=>E});var g=i(1112);function c(b){let G=0;return{id_length:b[G++],colormap_type:b[G++],image_type:b[G++],colormap_index:b[G++]|b[G++]<<8,colormap_length:b[G++]|b[G++]<<8,colormap_size:b[G++],origin:[b[G++]|b[G++]<<8,b[G++]|b[G++]<<8],width:b[G++]|b[G++]<<8,height:b[G++]|b[G++]<<8,pixel_size:b[G++],flags:b[G++]}}function V(b,G){if(G.length<19)return void g.b.Error("Unable to load TGA file - Not enough data to contain header");let i=18;const V=c(G);if(V.id_length+i>G.length)return void g.b.Error("Unable to load TGA file - Not enough data");i+=V.id_length;let E,Z=!1,Y=!1,J=!1;switch(V.image_type){case 9:Z=!0;case 1:Y=!0;break;case 10:Z=!0;case 2:break;case 11:Z=!0;case 3:J=!0}const q=V.pixel_size>>3,o=V.width*V.height*q;let s,F,l,v,u,W,x;if(Y&&(s=G.subarray(i,i+=V.colormap_length*(V.colormap_size>>3))),Z){let b,g,c;E=new Uint8Array(o);let V=0;const z=new Uint8Array(q);for(;i<o&&V<o;)if(b=G[i++],g=1+(127&b),128&b){for(c=0;c<q;++c)z[c]=G[i++];for(c=0;c<g;++c)E.set(z,V+c*q);V+=q*g}else{for(g*=q,c=0;c<g;++c)E[V+c]=G[i++];V+=g}}else E=G.subarray(i,i+=Y?V.width*V.height:o);switch((48&V.flags)>>4){default:case 2:F=0,v=1,x=V.width,l=0,u=1,W=V.height;break;case 0:F=0,v=1,x=V.width,l=V.height-1,u=-1,W=-1;break;case 3:F=V.width-1,v=-1,x=-1,l=0,u=1,W=V.height;break;case 1:F=V.width-1,v=-1,x=-1,l=V.height-1,u=-1,W=-1}const M="_getImageData"+(J?"Grey":"")+V.pixel_size+"bits",A=z[M](V,s,E,l,u,W,F,v,x);b.getEngine()._uploadDataToTextureDirectly(b,A)}const z={GetTGAHeader:c,UploadContent:V,_getImageData8bits:function(b,G,i,g,c,V,z,E,Z){const Y=i,J=G,q=b.width,o=b.height;let s,F,l,v=0;const u=new Uint8Array(q*o*4);for(l=g;l!==V;l+=c)for(F=z;F!==Z;F+=E,v++)s=Y[v],u[4*(F+q*l)+3]=255,u[4*(F+q*l)+2]=J[3*s+0],u[4*(F+q*l)+1]=J[3*s+1],u[4*(F+q*l)+0]=J[3*s+2];return u},_getImageData16bits:function(b,G,i,g,c,V,z,E,Z){const Y=i,J=b.width,q=b.height;let o,s,F,l=0;const v=new Uint8Array(J*q*4);for(F=g;F!==V;F+=c)for(s=z;s!==Z;s+=E,l+=2){o=Y[l+0]+(Y[l+1]<<8);const b=255*((31744&o)>>10)/31|0,G=255*((992&o)>>5)/31|0,i=255*(31&o)/31|0;v[4*(s+J*F)+0]=b,v[4*(s+J*F)+1]=G,v[4*(s+J*F)+2]=i,v[4*(s+J*F)+3]=32768&o?0:255}return v},_getImageData24bits:function(b,G,i,g,c,V,z,E,Z){const Y=i,J=b.width,q=b.height;let o,s,F=0;const l=new Uint8Array(J*q*4);for(s=g;s!==V;s+=c)for(o=z;o!==Z;o+=E,F+=3)l[4*(o+J*s)+3]=255,l[4*(o+J*s)+2]=Y[F+0],l[4*(o+J*s)+1]=Y[F+1],l[4*(o+J*s)+0]=Y[F+2];return l},_getImageData32bits:function(b,G,i,g,c,V,z,E,Z){const Y=i,J=b.width,q=b.height;let o,s,F=0;const l=new Uint8Array(J*q*4);for(s=g;s!==V;s+=c)for(o=z;o!==Z;o+=E,F+=4)l[4*(o+J*s)+2]=Y[F+0],l[4*(o+J*s)+1]=Y[F+1],l[4*(o+J*s)+0]=Y[F+2],l[4*(o+J*s)+3]=Y[F+3];return l},_getImageDataGrey8bits:function(b,G,i,g,c,V,z,E,Z){const Y=i,J=b.width,q=b.height;let o,s,F,l=0;const v=new Uint8Array(J*q*4);for(F=g;F!==V;F+=c)for(s=z;s!==Z;s+=E,l++)o=Y[l],v[4*(s+J*F)+0]=o,v[4*(s+J*F)+1]=o,v[4*(s+J*F)+2]=o,v[4*(s+J*F)+3]=255;return v},_getImageDataGrey16bits:function(b,G,i,g,c,V,z,E,Z){const Y=i,J=b.width,q=b.height;let o,s,F=0;const l=new Uint8Array(J*q*4);for(s=g;s!==V;s+=c)for(o=z;o!==Z;o+=E,F+=2)l[4*(o+J*s)+0]=Y[F+0],l[4*(o+J*s)+1]=Y[F+0],l[4*(o+J*s)+2]=Y[F+0],l[4*(o+J*s)+3]=Y[F+1];return l}};class E{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(b,G,i){const g=new Uint8Array(b.buffer,b.byteOffset,b.byteLength),z=c(g);i(z.width,z.height,G.generateMipMaps,!1,(()=>{V(G,g)}))}}}}]);