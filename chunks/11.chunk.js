"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{2539:(n,k,T)=>{T.r(k),T.d(k,{Dispose:()=>W,DumpData:()=>P,DumpDataAsync:()=>S,DumpFramebuffer:()=>I,DumpTools:()=>J});var c=T(2374),K=T(542),Q=T(747),G=T(588);let w,E=null;async function I(n,k,T,c){let K=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",Q=arguments.length>5?arguments[5]:void 0,G=arguments.length>6?arguments[6]:void 0;const w=await T.readPixels(0,0,n,k);P(n,k,new Uint8Array(w.buffer),c,K,Q,!0,void 0,G)}async function S(n,k,T){let c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",K=arguments.length>4?arguments[4]:void 0,Q=arguments.length>5&&void 0!==arguments[5]&&arguments[5],G=arguments.length>6&&void 0!==arguments[6]&&arguments[6],w=arguments.length>7?arguments[7]:void 0;return await new Promise((E=>{P(n,k,T,(n=>E(n)),c,K,Q,G,w)}))}function P(n,k,I,S){let P=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",J=arguments.length>5?arguments[5]:void 0,H=arguments.length>6&&void 0!==arguments[6]&&arguments[6],s=arguments.length>7&&void 0!==arguments[7]&&arguments[7],b=arguments.length>8?arguments[8]:void 0;(async function(){return E||(E=new Promise(((n,k)=>{let K,Q=null;const E={Sg:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(T.bind(T,2391)).then((I=>{let{ThinEngine:S}=I;const P=G.e.Instances.length;try{K=new OffscreenCanvas(100,100),Q=new S(K,!1,E)}catch(s){var J;P<G.e.Instances.length&&(null===(J=G.e.Instances.pop())||void 0===J||J.dispose()),K=document.createElement("canvas"),Q=new S(K,!1,E)}G.e.Instances.pop(),G.e.OnEnginesDisposedObservable.add((n=>{Q&&n!==Q&&!Q.u&&0===G.e.Instances.length&&W()})),Q.getCaps().parallelShaderCompile=void 0;const H=new c.b(Q);T.e(35).then(T.bind(T,13382)).then((T=>{let{passPixelShader:G}=T;if(!Q)return void k("Engine is not defined");const E=new c.e({Hi:Q,name:G.name,fragmentShader:G.shader,samplerNames:["textureSampler"]});w={canvas:K,Hi:Q,renderer:H,wrapper:E},n(w)}))})).catch(k)}))),await E})().then((T=>{if(T.Hi.setSize(n,k,!0),I instanceof Float32Array){const n=new Uint8Array(I.length);let k=I.length;for(;k--;){const T=I[k];n[k]=Math.round(255*(0,Q.b)(T))}I=n}const c=T.Hi.createRawTexture(I,n,k,5,!1,!H,1);T.renderer.setViewport(),T.renderer.applyEffectWrapper(T.wrapper),T.wrapper.effect._bindTexture("textureSampler",c),T.renderer.draw(),s?K.e.ToBlob(T.canvas,(n=>{const k=new FileReader;k.onload=n=>{const k=n.target.result;S&&S(k)},k.readAsArrayBuffer(n)}),P,b):K.e.EncodeScreenshotCanvasData(T.canvas,S,P,J,b),c.dispose()}))}function W(){var n;w?(w.wrapper.dispose(),w.renderer.dispose(),w.Hi.dispose()):null===(n=E)||void 0===n||n.then((n=>{n.wrapper.dispose(),n.renderer.dispose(),n.Hi.dispose()}));E=null,w=null}const J={DumpData:P,DumpDataAsync:S,DumpFramebuffer:I,Dispose:W};K.e.DumpData=P,K.e.DumpDataAsync=S,K.e.DumpFramebuffer=I}}]);