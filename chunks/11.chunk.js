"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{10930:(F,e,a)=>{a.r(e),a.d(e,{_TGATextureLoader:()=>t});var k=a(1095);function h(F){let e=0;return{id_length:F[e++],colormap_type:F[e++],image_type:F[e++],colormap_index:F[e++]|F[e++]<<8,colormap_length:F[e++]|F[e++]<<8,colormap_size:F[e++],origin:[F[e++]|F[e++]<<8,F[e++]|F[e++]<<8],width:F[e++]|F[e++]<<8,height:F[e++]|F[e++]<<8,pixel_size:F[e++],flags:F[e++]}}function z(F,e){if(e.length<19)return void k.b.Error("Unable to load TGA file - Not enough data to contain header");let a=18;const z=h(e);if(z.id_length+a>e.length)return void k.b.Error("Unable to load TGA file - Not enough data");a+=z.id_length;let t,H=!1,p=!1,y=!1;switch(z.image_type){case 9:H=!0;case 1:p=!0;break;case 10:H=!0;case 2:break;case 11:H=!0;case 3:y=!0}const L=z.pixel_size>>3,s=z.width*z.height*L;let Z,A,w,I,b,u,r;if(p&&(Z=e.subarray(a,a+=z.colormap_length*(z.colormap_size>>3))),H){let F,k,h;t=new Uint8Array(s);let z=0;const x=new Uint8Array(L);for(;a<s&&z<s;)if(F=e[a++],k=1+(127&F),128&F){for(h=0;h<L;++h)x[h]=e[a++];for(h=0;h<k;++h)t.set(x,z+h*L);z+=L*k}else{for(k*=L,h=0;h<k;++h)t[z+h]=e[a++];z+=k}}else t=e.subarray(a,a+=p?z.width*z.height:s);switch((48&z.flags)>>4){default:case 2:A=0,I=1,r=z.width,w=0,b=1,u=z.height;break;case 0:A=0,I=1,r=z.width,w=z.height-1,b=-1,u=-1;break;case 3:A=z.width-1,I=-1,r=-1,w=0,b=1,u=z.height;break;case 1:A=z.width-1,I=-1,r=-1,w=z.height-1,b=-1,u=-1}const O="_getImageData"+(y?"Grey":"")+z.pixel_size+"bits",j=x[O](z,Z,t,w,b,u,A,I,r);F.getEngine()._uploadDataToTextureDirectly(F,j)}const x={GetTGAHeader:h,UploadContent:z,_getImageData8bits:function(F,e,a,k,h,z,x,t,H){const p=a,y=e,L=F.width,s=F.height;let Z,A,w,I=0;const b=new Uint8Array(L*s*4);for(w=k;w!==z;w+=h)for(A=x;A!==H;A+=t,I++)Z=p[I],b[4*(A+L*w)+3]=255,b[4*(A+L*w)+2]=y[3*Z+0],b[4*(A+L*w)+1]=y[3*Z+1],b[4*(A+L*w)+0]=y[3*Z+2];return b},_getImageData16bits:function(F,e,a,k,h,z,x,t,H){const p=a,y=F.width,L=F.height;let s,Z,A,w=0;const I=new Uint8Array(y*L*4);for(A=k;A!==z;A+=h)for(Z=x;Z!==H;Z+=t,w+=2){s=p[w+0]+(p[w+1]<<8);const F=255*((31744&s)>>10)/31|0,e=255*((992&s)>>5)/31|0,a=255*(31&s)/31|0;I[4*(Z+y*A)+0]=F,I[4*(Z+y*A)+1]=e,I[4*(Z+y*A)+2]=a,I[4*(Z+y*A)+3]=32768&s?0:255}return I},_getImageData24bits:function(F,e,a,k,h,z,x,t,H){const p=a,y=F.width,L=F.height;let s,Z,A=0;const w=new Uint8Array(y*L*4);for(Z=k;Z!==z;Z+=h)for(s=x;s!==H;s+=t,A+=3)w[4*(s+y*Z)+3]=255,w[4*(s+y*Z)+2]=p[A+0],w[4*(s+y*Z)+1]=p[A+1],w[4*(s+y*Z)+0]=p[A+2];return w},_getImageData32bits:function(F,e,a,k,h,z,x,t,H){const p=a,y=F.width,L=F.height;let s,Z,A=0;const w=new Uint8Array(y*L*4);for(Z=k;Z!==z;Z+=h)for(s=x;s!==H;s+=t,A+=4)w[4*(s+y*Z)+2]=p[A+0],w[4*(s+y*Z)+1]=p[A+1],w[4*(s+y*Z)+0]=p[A+2],w[4*(s+y*Z)+3]=p[A+3];return w},_getImageDataGrey8bits:function(F,e,a,k,h,z,x,t,H){const p=a,y=F.width,L=F.height;let s,Z,A,w=0;const I=new Uint8Array(y*L*4);for(A=k;A!==z;A+=h)for(Z=x;Z!==H;Z+=t,w++)s=p[w],I[4*(Z+y*A)+0]=s,I[4*(Z+y*A)+1]=s,I[4*(Z+y*A)+2]=s,I[4*(Z+y*A)+3]=255;return I},_getImageDataGrey16bits:function(F,e,a,k,h,z,x,t,H){const p=a,y=F.width,L=F.height;let s,Z,A=0;const w=new Uint8Array(y*L*4);for(Z=k;Z!==z;Z+=h)for(s=x;s!==H;s+=t,A+=2)w[4*(s+y*Z)+0]=p[A+0],w[4*(s+y*Z)+1]=p[A+0],w[4*(s+y*Z)+2]=p[A+0],w[4*(s+y*Z)+3]=p[A+1];return w}};class t{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(F,e,a){const k=new Uint8Array(F.buffer,F.byteOffset,F.byteLength),x=h(k);a(x.width,x.height,e.generateMipMaps,!1,(()=>{z(e,k)}))}}}}]);