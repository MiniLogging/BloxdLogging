"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{10709:(t,b,Y)=>{Y.r(b),Y.d(b,{_TGATextureLoader:()=>R});var o=Y(1144);function x(t){let b=0;return{id_length:t[b++],colormap_type:t[b++],image_type:t[b++],colormap_index:t[b++]|t[b++]<<8,colormap_length:t[b++]|t[b++]<<8,colormap_size:t[b++],origin:[t[b++]|t[b++]<<8,t[b++]|t[b++]<<8],width:t[b++]|t[b++]<<8,height:t[b++]|t[b++]<<8,pixel_size:t[b++],flags:t[b++]}}function F(t,b){if(b.length<19)return void o.b.Error("Unable to load TGA file - Not enough data to contain header");let Y=18;const F=x(b);if(F.id_length+Y>b.length)return void o.b.Error("Unable to load TGA file - Not enough data");Y+=F.id_length;let R,d=!1,E=!1,U=!1;switch(F.image_type){case 9:d=!0;case 1:E=!0;break;case 10:d=!0;case 2:break;case 11:d=!0;case 3:U=!0}const C=F.pixel_size>>3,p=F.width*F.height*C;let W,T,y,v,B,J,m;if(E&&(W=b.subarray(Y,Y+=F.colormap_length*(F.colormap_size>>3))),d){let t,o,x;R=new Uint8Array(p);let F=0;const r=new Uint8Array(C);for(;Y<p&&F<p;)if(t=b[Y++],o=1+(127&t),128&t){for(x=0;x<C;++x)r[x]=b[Y++];for(x=0;x<o;++x)R.set(r,F+x*C);F+=C*o}else{for(o*=C,x=0;x<o;++x)R[F+x]=b[Y++];F+=o}}else R=b.subarray(Y,Y+=E?F.width*F.height:p);switch((48&F.flags)>>4){default:case 2:T=0,v=1,m=F.width,y=0,B=1,J=F.height;break;case 0:T=0,v=1,m=F.width,y=F.height-1,B=-1,J=-1;break;case 3:T=F.width-1,v=-1,m=-1,y=0,B=1,J=F.height;break;case 1:T=F.width-1,v=-1,m=-1,y=F.height-1,B=-1,J=-1}const K="_getImageData"+(U?"Grey":"")+F.pixel_size+"bits",L=r[K](F,W,R,y,B,J,T,v,m);t.getEngine()._uploadDataToTextureDirectly(t,L)}const r={GetTGAHeader:x,UploadContent:F,_getImageData8bits:function(t,b,Y,o,x,F,r,R,d){const E=Y,U=b,C=t.width,p=t.height;let W,T,y,v=0;const B=new Uint8Array(C*p*4);for(y=o;y!==F;y+=x)for(T=r;T!==d;T+=R,v++)W=E[v],B[4*(T+C*y)+3]=255,B[4*(T+C*y)+2]=U[3*W+0],B[4*(T+C*y)+1]=U[3*W+1],B[4*(T+C*y)+0]=U[3*W+2];return B},_getImageData16bits:function(t,b,Y,o,x,F,r,R,d){const E=Y,U=t.width,C=t.height;let p,W,T,y=0;const v=new Uint8Array(U*C*4);for(T=o;T!==F;T+=x)for(W=r;W!==d;W+=R,y+=2){p=E[y+0]+(E[y+1]<<8);const t=255*((31744&p)>>10)/31|0,b=255*((992&p)>>5)/31|0,Y=255*(31&p)/31|0;v[4*(W+U*T)+0]=t,v[4*(W+U*T)+1]=b,v[4*(W+U*T)+2]=Y,v[4*(W+U*T)+3]=32768&p?0:255}return v},_getImageData24bits:function(t,b,Y,o,x,F,r,R,d){const E=Y,U=t.width,C=t.height;let p,W,T=0;const y=new Uint8Array(U*C*4);for(W=o;W!==F;W+=x)for(p=r;p!==d;p+=R,T+=3)y[4*(p+U*W)+3]=255,y[4*(p+U*W)+2]=E[T+0],y[4*(p+U*W)+1]=E[T+1],y[4*(p+U*W)+0]=E[T+2];return y},_getImageData32bits:function(t,b,Y,o,x,F,r,R,d){const E=Y,U=t.width,C=t.height;let p,W,T=0;const y=new Uint8Array(U*C*4);for(W=o;W!==F;W+=x)for(p=r;p!==d;p+=R,T+=4)y[4*(p+U*W)+2]=E[T+0],y[4*(p+U*W)+1]=E[T+1],y[4*(p+U*W)+0]=E[T+2],y[4*(p+U*W)+3]=E[T+3];return y},_getImageDataGrey8bits:function(t,b,Y,o,x,F,r,R,d){const E=Y,U=t.width,C=t.height;let p,W,T,y=0;const v=new Uint8Array(U*C*4);for(T=o;T!==F;T+=x)for(W=r;W!==d;W+=R,y++)p=E[y],v[4*(W+U*T)+0]=p,v[4*(W+U*T)+1]=p,v[4*(W+U*T)+2]=p,v[4*(W+U*T)+3]=255;return v},_getImageDataGrey16bits:function(t,b,Y,o,x,F,r,R,d){const E=Y,U=t.width,C=t.height;let p,W,T=0;const y=new Uint8Array(U*C*4);for(W=o;W!==F;W+=x)for(p=r;p!==d;p+=R,T+=2)y[4*(p+U*W)+0]=E[T+0],y[4*(p+U*W)+1]=E[T+0],y[4*(p+U*W)+2]=E[T+0],y[4*(p+U*W)+3]=E[T+1];return y}};class R{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(t,b,Y){const o=new Uint8Array(t.buffer,t.byteOffset,t.byteLength),r=x(o);Y(r.width,r.height,b.generateMipMaps,!1,(()=>{F(b,o)}))}}}}]);