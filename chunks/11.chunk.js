"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{10172:(I,k,i)=>{i.r(k),i.d(k,{_TGATextureLoader:()=>x});var d=i(1079);function u(I){let k=0;return{id_length:I[k++],colormap_type:I[k++],image_type:I[k++],colormap_index:I[k++]|I[k++]<<8,colormap_length:I[k++]|I[k++]<<8,colormap_size:I[k++],origin:[I[k++]|I[k++]<<8,I[k++]|I[k++]<<8],width:I[k++]|I[k++]<<8,height:I[k++]|I[k++]<<8,pixel_size:I[k++],flags:I[k++]}}function H(I,k){if(k.length<19)return void d.d.Error("Unable to load TGA file - Not enough data to contain header");let i=18;const H=u(k);if(H.id_length+i>k.length)return void d.d.Error("Unable to load TGA file - Not enough data");i+=H.id_length;let x,j=!1,l=!1,g=!1;switch(H.image_type){case 9:j=!0;case 1:l=!0;break;case 10:j=!0;case 2:break;case 11:j=!0;case 3:g=!0}const P=H.pixel_size>>3,J=H.width*H.height*P;let L,s,h,Z,n,B,b;if(l&&(L=k.subarray(i,i+=H.colormap_length*(H.colormap_size>>3))),j){let I,d,u;x=new Uint8Array(J);let H=0;const Y=new Uint8Array(P);for(;i<J&&H<J;)if(I=k[i++],d=1+(127&I),128&I){for(u=0;u<P;++u)Y[u]=k[i++];for(u=0;u<d;++u)x.set(Y,H+u*P);H+=P*d}else{for(d*=P,u=0;u<d;++u)x[H+u]=k[i++];H+=d}}else x=k.subarray(i,i+=l?H.width*H.height:J);switch((48&H.flags)>>4){default:case 2:s=0,Z=1,b=H.width,h=0,n=1,B=H.height;break;case 0:s=0,Z=1,b=H.width,h=H.height-1,n=-1,B=-1;break;case 3:s=H.width-1,Z=-1,b=-1,h=0,n=1,B=H.height;break;case 1:s=H.width-1,Z=-1,b=-1,h=H.height-1,n=-1,B=-1}const o="_getImageData"+(g?"Grey":"")+H.pixel_size+"bits",F=Y[o](H,L,x,h,n,B,s,Z,b);I.getEngine()._uploadDataToTextureDirectly(I,F)}const Y={GetTGAHeader:u,UploadContent:H,_getImageData8bits:function(I,k,i,d,u,H,Y,x,j){const l=i,g=k,P=I.width,J=I.height;let L,s,h,Z=0;const n=new Uint8Array(P*J*4);for(h=d;h!==H;h+=u)for(s=Y;s!==j;s+=x,Z++)L=l[Z],n[4*(s+P*h)+3]=255,n[4*(s+P*h)+2]=g[3*L+0],n[4*(s+P*h)+1]=g[3*L+1],n[4*(s+P*h)+0]=g[3*L+2];return n},_getImageData16bits:function(I,k,i,d,u,H,Y,x,j){const l=i,g=I.width,P=I.height;let J,L,s,h=0;const Z=new Uint8Array(g*P*4);for(s=d;s!==H;s+=u)for(L=Y;L!==j;L+=x,h+=2){J=l[h+0]+(l[h+1]<<8);const I=255*((31744&J)>>10)/31|0,k=255*((992&J)>>5)/31|0,i=255*(31&J)/31|0;Z[4*(L+g*s)+0]=I,Z[4*(L+g*s)+1]=k,Z[4*(L+g*s)+2]=i,Z[4*(L+g*s)+3]=32768&J?0:255}return Z},_getImageData24bits:function(I,k,i,d,u,H,Y,x,j){const l=i,g=I.width,P=I.height;let J,L,s=0;const h=new Uint8Array(g*P*4);for(L=d;L!==H;L+=u)for(J=Y;J!==j;J+=x,s+=3)h[4*(J+g*L)+3]=255,h[4*(J+g*L)+2]=l[s+0],h[4*(J+g*L)+1]=l[s+1],h[4*(J+g*L)+0]=l[s+2];return h},_getImageData32bits:function(I,k,i,d,u,H,Y,x,j){const l=i,g=I.width,P=I.height;let J,L,s=0;const h=new Uint8Array(g*P*4);for(L=d;L!==H;L+=u)for(J=Y;J!==j;J+=x,s+=4)h[4*(J+g*L)+2]=l[s+0],h[4*(J+g*L)+1]=l[s+1],h[4*(J+g*L)+0]=l[s+2],h[4*(J+g*L)+3]=l[s+3];return h},_getImageDataGrey8bits:function(I,k,i,d,u,H,Y,x,j){const l=i,g=I.width,P=I.height;let J,L,s,h=0;const Z=new Uint8Array(g*P*4);for(s=d;s!==H;s+=u)for(L=Y;L!==j;L+=x,h++)J=l[h],Z[4*(L+g*s)+0]=J,Z[4*(L+g*s)+1]=J,Z[4*(L+g*s)+2]=J,Z[4*(L+g*s)+3]=255;return Z},_getImageDataGrey16bits:function(I,k,i,d,u,H,Y,x,j){const l=i,g=I.width,P=I.height;let J,L,s=0;const h=new Uint8Array(g*P*4);for(L=d;L!==H;L+=u)for(J=Y;J!==j;J+=x,s+=2)h[4*(J+g*L)+0]=l[s+0],h[4*(J+g*L)+1]=l[s+0],h[4*(J+g*L)+2]=l[s+0],h[4*(J+g*L)+3]=l[s+1];return h}};class x{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(I,k,i){const d=new Uint8Array(I.buffer,I.byteOffset,I.byteLength),Y=u(d);i(Y.width,Y.height,k.generateMipMaps,!1,(()=>{H(k,d)}))}}}}]);