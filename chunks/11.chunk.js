"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{10984:(I,S,d)=>{d.r(S),d.d(S,{_TGATextureLoader:()=>q});var N=d(1098);function O(I){let S=0;return{id_length:I[S++],colormap_type:I[S++],image_type:I[S++],colormap_index:I[S++]|I[S++]<<8,colormap_length:I[S++]|I[S++]<<8,colormap_size:I[S++],origin:[I[S++]|I[S++]<<8,I[S++]|I[S++]<<8],width:I[S++]|I[S++]<<8,height:I[S++]|I[S++]<<8,pixel_size:I[S++],flags:I[S++]}}function g(I,S){if(S.length<19)return void N.e.Error("Unable to load TGA file - Not enough data to contain header");let d=18;const g=O(S);if(g.id_length+d>S.length)return void N.e.Error("Unable to load TGA file - Not enough data");d+=g.id_length;let q,a=!1,f=!1,Y=!1;switch(g.image_type){case 9:a=!0;case 1:f=!0;break;case 10:a=!0;case 2:break;case 11:a=!0;case 3:Y=!0}const p=g.pixel_size>>3,E=g.width*g.height*p;let o,k,U,i,G,t,j;if(f&&(o=S.subarray(d,d+=g.colormap_length*(g.colormap_size>>3))),a){let I,N,O;q=new Uint8Array(E);let g=0;const T=new Uint8Array(p);for(;d<E&&g<E;)if(I=S[d++],N=1+(127&I),128&I){for(O=0;O<p;++O)T[O]=S[d++];for(O=0;O<N;++O)q.set(T,g+O*p);g+=p*N}else{for(N*=p,O=0;O<N;++O)q[g+O]=S[d++];g+=N}}else q=S.subarray(d,d+=f?g.width*g.height:E);switch((48&g.flags)>>4){default:case 2:k=0,i=1,j=g.width,U=0,G=1,t=g.height;break;case 0:k=0,i=1,j=g.width,U=g.height-1,G=-1,t=-1;break;case 3:k=g.width-1,i=-1,j=-1,U=0,G=1,t=g.height;break;case 1:k=g.width-1,i=-1,j=-1,U=g.height-1,G=-1,t=-1}const C="_getImageData"+(Y?"Grey":"")+g.pixel_size+"bits",n=T[C](g,o,q,U,G,t,k,i,j);I.getEngine()._uploadDataToTextureDirectly(I,n)}const T={GetTGAHeader:O,UploadContent:g,_getImageData8bits:function(I,S,d,N,O,g,T,q,a){const f=d,Y=S,p=I.width,E=I.height;let o,k,U,i=0;const G=new Uint8Array(p*E*4);for(U=N;U!==g;U+=O)for(k=T;k!==a;k+=q,i++)o=f[i],G[4*(k+p*U)+3]=255,G[4*(k+p*U)+2]=Y[3*o+0],G[4*(k+p*U)+1]=Y[3*o+1],G[4*(k+p*U)+0]=Y[3*o+2];return G},_getImageData16bits:function(I,S,d,N,O,g,T,q,a){const f=d,Y=I.width,p=I.height;let E,o,k,U=0;const i=new Uint8Array(Y*p*4);for(k=N;k!==g;k+=O)for(o=T;o!==a;o+=q,U+=2){E=f[U+0]+(f[U+1]<<8);const I=255*((31744&E)>>10)/31|0,S=255*((992&E)>>5)/31|0,d=255*(31&E)/31|0;i[4*(o+Y*k)+0]=I,i[4*(o+Y*k)+1]=S,i[4*(o+Y*k)+2]=d,i[4*(o+Y*k)+3]=32768&E?0:255}return i},_getImageData24bits:function(I,S,d,N,O,g,T,q,a){const f=d,Y=I.width,p=I.height;let E,o,k=0;const U=new Uint8Array(Y*p*4);for(o=N;o!==g;o+=O)for(E=T;E!==a;E+=q,k+=3)U[4*(E+Y*o)+3]=255,U[4*(E+Y*o)+2]=f[k+0],U[4*(E+Y*o)+1]=f[k+1],U[4*(E+Y*o)+0]=f[k+2];return U},_getImageData32bits:function(I,S,d,N,O,g,T,q,a){const f=d,Y=I.width,p=I.height;let E,o,k=0;const U=new Uint8Array(Y*p*4);for(o=N;o!==g;o+=O)for(E=T;E!==a;E+=q,k+=4)U[4*(E+Y*o)+2]=f[k+0],U[4*(E+Y*o)+1]=f[k+1],U[4*(E+Y*o)+0]=f[k+2],U[4*(E+Y*o)+3]=f[k+3];return U},_getImageDataGrey8bits:function(I,S,d,N,O,g,T,q,a){const f=d,Y=I.width,p=I.height;let E,o,k,U=0;const i=new Uint8Array(Y*p*4);for(k=N;k!==g;k+=O)for(o=T;o!==a;o+=q,U++)E=f[U],i[4*(o+Y*k)+0]=E,i[4*(o+Y*k)+1]=E,i[4*(o+Y*k)+2]=E,i[4*(o+Y*k)+3]=255;return i},_getImageDataGrey16bits:function(I,S,d,N,O,g,T,q,a){const f=d,Y=I.width,p=I.height;let E,o,k=0;const U=new Uint8Array(Y*p*4);for(o=N;o!==g;o+=O)for(E=T;E!==a;E+=q,k+=2)U[4*(E+Y*o)+0]=f[k+0],U[4*(E+Y*o)+1]=f[k+0],U[4*(E+Y*o)+2]=f[k+0],U[4*(E+Y*o)+3]=f[k+1];return U}};class q{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(I,S,d){const N=new Uint8Array(I.buffer,I.byteOffset,I.byteLength),T=O(N);d(T.width,T.height,S.generateMipMaps,!1,(()=>{g(S,N)}))}}}}]);