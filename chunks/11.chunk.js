"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{10074:(a,i,K)=>{K.r(i),K.d(i,{_TGATextureLoader:()=>e});var j=K(1112);function N(a){let i=0;return{id_length:a[i++],colormap_type:a[i++],image_type:a[i++],colormap_index:a[i++]|a[i++]<<8,colormap_length:a[i++]|a[i++]<<8,colormap_size:a[i++],origin:[a[i++]|a[i++]<<8,a[i++]|a[i++]<<8],width:a[i++]|a[i++]<<8,height:a[i++]|a[i++]<<8,pixel_size:a[i++],flags:a[i++]}}function E(a,i){if(i.length<19)return void j.c.Error("Unable to load TGA file - Not enough data to contain header");let K=18;const E=N(i);if(E.id_length+K>i.length)return void j.c.Error("Unable to load TGA file - Not enough data");K+=E.id_length;let e,Y=!1,H=!1,f=!1;switch(E.image_type){case 9:Y=!0;case 1:H=!0;break;case 10:Y=!0;case 2:break;case 11:Y=!0;case 3:f=!0}const o=E.pixel_size>>3,U=E.width*E.height*o;let q,u,g,s,B,h,p;if(H&&(q=i.subarray(K,K+=E.colormap_length*(E.colormap_size>>3))),Y){let a,j,N;e=new Uint8Array(U);let E=0;const v=new Uint8Array(o);for(;K<U&&E<U;)if(a=i[K++],j=1+(127&a),128&a){for(N=0;N<o;++N)v[N]=i[K++];for(N=0;N<j;++N)e.set(v,E+N*o);E+=o*j}else{for(j*=o,N=0;N<j;++N)e[E+N]=i[K++];E+=j}}else e=i.subarray(K,K+=H?E.width*E.height:U);switch((48&E.flags)>>4){default:case 2:u=0,s=1,p=E.width,g=0,B=1,h=E.height;break;case 0:u=0,s=1,p=E.width,g=E.height-1,B=-1,h=-1;break;case 3:u=E.width-1,s=-1,p=-1,g=0,B=1,h=E.height;break;case 1:u=E.width-1,s=-1,p=-1,g=E.height-1,B=-1,h=-1}const T="_getImageData"+(f?"Grey":"")+E.pixel_size+"bits",G=v[T](E,q,e,g,B,h,u,s,p);a.getEngine()._uploadDataToTextureDirectly(a,G)}const v={GetTGAHeader:N,UploadContent:E,_getImageData8bits:function(a,i,K,j,N,E,v,e,Y){const H=K,f=i,o=a.width,U=a.height;let q,u,g,s=0;const B=new Uint8Array(o*U*4);for(g=j;g!==E;g+=N)for(u=v;u!==Y;u+=e,s++)q=H[s],B[4*(u+o*g)+3]=255,B[4*(u+o*g)+2]=f[3*q+0],B[4*(u+o*g)+1]=f[3*q+1],B[4*(u+o*g)+0]=f[3*q+2];return B},_getImageData16bits:function(a,i,K,j,N,E,v,e,Y){const H=K,f=a.width,o=a.height;let U,q,u,g=0;const s=new Uint8Array(f*o*4);for(u=j;u!==E;u+=N)for(q=v;q!==Y;q+=e,g+=2){U=H[g+0]+(H[g+1]<<8);const a=255*((31744&U)>>10)/31|0,i=255*((992&U)>>5)/31|0,K=255*(31&U)/31|0;s[4*(q+f*u)+0]=a,s[4*(q+f*u)+1]=i,s[4*(q+f*u)+2]=K,s[4*(q+f*u)+3]=32768&U?0:255}return s},_getImageData24bits:function(a,i,K,j,N,E,v,e,Y){const H=K,f=a.width,o=a.height;let U,q,u=0;const g=new Uint8Array(f*o*4);for(q=j;q!==E;q+=N)for(U=v;U!==Y;U+=e,u+=3)g[4*(U+f*q)+3]=255,g[4*(U+f*q)+2]=H[u+0],g[4*(U+f*q)+1]=H[u+1],g[4*(U+f*q)+0]=H[u+2];return g},_getImageData32bits:function(a,i,K,j,N,E,v,e,Y){const H=K,f=a.width,o=a.height;let U,q,u=0;const g=new Uint8Array(f*o*4);for(q=j;q!==E;q+=N)for(U=v;U!==Y;U+=e,u+=4)g[4*(U+f*q)+2]=H[u+0],g[4*(U+f*q)+1]=H[u+1],g[4*(U+f*q)+0]=H[u+2],g[4*(U+f*q)+3]=H[u+3];return g},_getImageDataGrey8bits:function(a,i,K,j,N,E,v,e,Y){const H=K,f=a.width,o=a.height;let U,q,u,g=0;const s=new Uint8Array(f*o*4);for(u=j;u!==E;u+=N)for(q=v;q!==Y;q+=e,g++)U=H[g],s[4*(q+f*u)+0]=U,s[4*(q+f*u)+1]=U,s[4*(q+f*u)+2]=U,s[4*(q+f*u)+3]=255;return s},_getImageDataGrey16bits:function(a,i,K,j,N,E,v,e,Y){const H=K,f=a.width,o=a.height;let U,q,u=0;const g=new Uint8Array(f*o*4);for(q=j;q!==E;q+=N)for(U=v;U!==Y;U+=e,u+=2)g[4*(U+f*q)+0]=H[u+0],g[4*(U+f*q)+1]=H[u+0],g[4*(U+f*q)+2]=H[u+0],g[4*(U+f*q)+3]=H[u+1];return g}};class e{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(a,i,K){const j=new Uint8Array(a.buffer,a.byteOffset,a.byteLength),v=N(j);K(v.width,v.height,i.generateMipMaps,!1,(()=>{E(i,j)}))}}}}]);