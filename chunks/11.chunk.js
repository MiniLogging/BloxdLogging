"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{10978:(o,i,p)=>{p.r(i),p.d(i,{_TGATextureLoader:()=>z});var b=p(1059);function k(o){let i=0;return{id_length:o[i++],colormap_type:o[i++],image_type:o[i++],colormap_index:o[i++]|o[i++]<<8,colormap_length:o[i++]|o[i++]<<8,colormap_size:o[i++],origin:[o[i++]|o[i++]<<8,o[i++]|o[i++]<<8],width:o[i++]|o[i++]<<8,height:o[i++]|o[i++]<<8,pixel_size:o[i++],flags:o[i++]}}function u(o,i){if(i.length<19)return void b.c.Error("Unable to load TGA file - Not enough data to contain header");let p=18;const u=k(i);if(u.id_length+p>i.length)return void b.c.Error("Unable to load TGA file - Not enough data");p+=u.id_length;let z,g=!1,J=!1,a=!1;switch(u.image_type){case 9:g=!0;case 1:J=!0;break;case 10:g=!0;case 2:break;case 11:g=!0;case 3:a=!0}const G=u.pixel_size>>3,O=u.width*u.height*G;let C,l,R,E,F,e,W;if(J&&(C=i.subarray(p,p+=u.colormap_length*(u.colormap_size>>3))),g){let o,b,k;z=new Uint8Array(O);let u=0;const j=new Uint8Array(G);for(;p<O&&u<O;)if(o=i[p++],b=1+(127&o),128&o){for(k=0;k<G;++k)j[k]=i[p++];for(k=0;k<b;++k)z.set(j,u+k*G);u+=G*b}else{for(b*=G,k=0;k<b;++k)z[u+k]=i[p++];u+=b}}else z=i.subarray(p,p+=J?u.width*u.height:O);switch((48&u.flags)>>4){default:case 2:l=0,E=1,W=u.width,R=0,F=1,e=u.height;break;case 0:l=0,E=1,W=u.width,R=u.height-1,F=-1,e=-1;break;case 3:l=u.width-1,E=-1,W=-1,R=0,F=1,e=u.height;break;case 1:l=u.width-1,E=-1,W=-1,R=u.height-1,F=-1,e=-1}const M="_getImageData"+(a?"Grey":"")+u.pixel_size+"bits",T=j[M](u,C,z,R,F,e,l,E,W);o.getEngine()._uploadDataToTextureDirectly(o,T)}const j={GetTGAHeader:k,UploadContent:u,_getImageData8bits:function(o,i,p,b,k,u,j,z,g){const J=p,a=i,G=o.width,O=o.height;let C,l,R,E=0;const F=new Uint8Array(G*O*4);for(R=b;R!==u;R+=k)for(l=j;l!==g;l+=z,E++)C=J[E],F[4*(l+G*R)+3]=255,F[4*(l+G*R)+2]=a[3*C+0],F[4*(l+G*R)+1]=a[3*C+1],F[4*(l+G*R)+0]=a[3*C+2];return F},_getImageData16bits:function(o,i,p,b,k,u,j,z,g){const J=p,a=o.width,G=o.height;let O,C,l,R=0;const E=new Uint8Array(a*G*4);for(l=b;l!==u;l+=k)for(C=j;C!==g;C+=z,R+=2){O=J[R+0]+(J[R+1]<<8);const o=255*((31744&O)>>10)/31|0,i=255*((992&O)>>5)/31|0,p=255*(31&O)/31|0;E[4*(C+a*l)+0]=o,E[4*(C+a*l)+1]=i,E[4*(C+a*l)+2]=p,E[4*(C+a*l)+3]=32768&O?0:255}return E},_getImageData24bits:function(o,i,p,b,k,u,j,z,g){const J=p,a=o.width,G=o.height;let O,C,l=0;const R=new Uint8Array(a*G*4);for(C=b;C!==u;C+=k)for(O=j;O!==g;O+=z,l+=3)R[4*(O+a*C)+3]=255,R[4*(O+a*C)+2]=J[l+0],R[4*(O+a*C)+1]=J[l+1],R[4*(O+a*C)+0]=J[l+2];return R},_getImageData32bits:function(o,i,p,b,k,u,j,z,g){const J=p,a=o.width,G=o.height;let O,C,l=0;const R=new Uint8Array(a*G*4);for(C=b;C!==u;C+=k)for(O=j;O!==g;O+=z,l+=4)R[4*(O+a*C)+2]=J[l+0],R[4*(O+a*C)+1]=J[l+1],R[4*(O+a*C)+0]=J[l+2],R[4*(O+a*C)+3]=J[l+3];return R},_getImageDataGrey8bits:function(o,i,p,b,k,u,j,z,g){const J=p,a=o.width,G=o.height;let O,C,l,R=0;const E=new Uint8Array(a*G*4);for(l=b;l!==u;l+=k)for(C=j;C!==g;C+=z,R++)O=J[R],E[4*(C+a*l)+0]=O,E[4*(C+a*l)+1]=O,E[4*(C+a*l)+2]=O,E[4*(C+a*l)+3]=255;return E},_getImageDataGrey16bits:function(o,i,p,b,k,u,j,z,g){const J=p,a=o.width,G=o.height;let O,C,l=0;const R=new Uint8Array(a*G*4);for(C=b;C!==u;C+=k)for(O=j;O!==g;O+=z,l+=2)R[4*(O+a*C)+0]=J[l+0],R[4*(O+a*C)+1]=J[l+0],R[4*(O+a*C)+2]=J[l+0],R[4*(O+a*C)+3]=J[l+1];return R}};class z{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(o,i,p){const b=new Uint8Array(o.buffer,o.byteOffset,o.byteLength),j=k(b);p(j.width,j.height,i.generateMipMaps,!1,(()=>{u(i,b)}))}}}}]);