"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{11285:(x,Z,l)=>{l.r(Z),l.d(Z,{_TGATextureLoader:()=>P});var t=l(1156);function L(x){let Z=0;return{id_length:x[Z++],colormap_type:x[Z++],image_type:x[Z++],colormap_index:x[Z++]|x[Z++]<<8,colormap_length:x[Z++]|x[Z++]<<8,colormap_size:x[Z++],origin:[x[Z++]|x[Z++]<<8,x[Z++]|x[Z++]<<8],width:x[Z++]|x[Z++]<<8,height:x[Z++]|x[Z++]<<8,pixel_size:x[Z++],flags:x[Z++]}}function z(x,Z){if(Z.length<19)return void t.b.Error("Unable to load TGA file - Not enough data to contain header");let l=18;const z=L(Z);if(z.id_length+l>Z.length)return void t.b.Error("Unable to load TGA file - Not enough data");l+=z.id_length;let P,C=!1,j=!1,V=!1;switch(z.image_type){case 9:C=!0;case 1:j=!0;break;case 10:C=!0;case 2:break;case 11:C=!0;case 3:V=!0}const Q=z.pixel_size>>3,c=z.width*z.height*Q;let a,I,u,n,v,X,W;if(j&&(a=Z.subarray(l,l+=z.colormap_length*(z.colormap_size>>3))),C){let x,t,L;P=new Uint8Array(c);let z=0;const A=new Uint8Array(Q);for(;l<c&&z<c;)if(x=Z[l++],t=1+(127&x),128&x){for(L=0;L<Q;++L)A[L]=Z[l++];for(L=0;L<t;++L)P.set(A,z+L*Q);z+=Q*t}else{for(t*=Q,L=0;L<t;++L)P[z+L]=Z[l++];z+=t}}else P=Z.subarray(l,l+=j?z.width*z.height:c);switch((48&z.flags)>>4){default:case 2:I=0,n=1,W=z.width,u=0,v=1,X=z.height;break;case 0:I=0,n=1,W=z.width,u=z.height-1,v=-1,X=-1;break;case 3:I=z.width-1,n=-1,W=-1,u=0,v=1,X=z.height;break;case 1:I=z.width-1,n=-1,W=-1,u=z.height-1,v=-1,X=-1}const f="_getImageData"+(V?"Grey":"")+z.pixel_size+"bits",S=A[f](z,a,P,u,v,X,I,n,W);x.getEngine()._uploadDataToTextureDirectly(x,S)}const A={GetTGAHeader:L,UploadContent:z,_getImageData8bits:function(x,Z,l,t,L,z,A,P,C){const j=l,V=Z,Q=x.width,c=x.height;let a,I,u,n=0;const v=new Uint8Array(Q*c*4);for(u=t;u!==z;u+=L)for(I=A;I!==C;I+=P,n++)a=j[n],v[4*(I+Q*u)+3]=255,v[4*(I+Q*u)+2]=V[3*a+0],v[4*(I+Q*u)+1]=V[3*a+1],v[4*(I+Q*u)+0]=V[3*a+2];return v},_getImageData16bits:function(x,Z,l,t,L,z,A,P,C){const j=l,V=x.width,Q=x.height;let c,a,I,u=0;const n=new Uint8Array(V*Q*4);for(I=t;I!==z;I+=L)for(a=A;a!==C;a+=P,u+=2){c=j[u+0]+(j[u+1]<<8);const x=255*((31744&c)>>10)/31|0,Z=255*((992&c)>>5)/31|0,l=255*(31&c)/31|0;n[4*(a+V*I)+0]=x,n[4*(a+V*I)+1]=Z,n[4*(a+V*I)+2]=l,n[4*(a+V*I)+3]=32768&c?0:255}return n},_getImageData24bits:function(x,Z,l,t,L,z,A,P,C){const j=l,V=x.width,Q=x.height;let c,a,I=0;const u=new Uint8Array(V*Q*4);for(a=t;a!==z;a+=L)for(c=A;c!==C;c+=P,I+=3)u[4*(c+V*a)+3]=255,u[4*(c+V*a)+2]=j[I+0],u[4*(c+V*a)+1]=j[I+1],u[4*(c+V*a)+0]=j[I+2];return u},_getImageData32bits:function(x,Z,l,t,L,z,A,P,C){const j=l,V=x.width,Q=x.height;let c,a,I=0;const u=new Uint8Array(V*Q*4);for(a=t;a!==z;a+=L)for(c=A;c!==C;c+=P,I+=4)u[4*(c+V*a)+2]=j[I+0],u[4*(c+V*a)+1]=j[I+1],u[4*(c+V*a)+0]=j[I+2],u[4*(c+V*a)+3]=j[I+3];return u},_getImageDataGrey8bits:function(x,Z,l,t,L,z,A,P,C){const j=l,V=x.width,Q=x.height;let c,a,I,u=0;const n=new Uint8Array(V*Q*4);for(I=t;I!==z;I+=L)for(a=A;a!==C;a+=P,u++)c=j[u],n[4*(a+V*I)+0]=c,n[4*(a+V*I)+1]=c,n[4*(a+V*I)+2]=c,n[4*(a+V*I)+3]=255;return n},_getImageDataGrey16bits:function(x,Z,l,t,L,z,A,P,C){const j=l,V=x.width,Q=x.height;let c,a,I=0;const u=new Uint8Array(V*Q*4);for(a=t;a!==z;a+=L)for(c=A;c!==C;c+=P,I+=2)u[4*(c+V*a)+0]=j[I+0],u[4*(c+V*a)+1]=j[I+0],u[4*(c+V*a)+2]=j[I+0],u[4*(c+V*a)+3]=j[I+1];return u}};class P{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(x,Z,l){const t=new Uint8Array(x.buffer,x.byteOffset,x.byteLength),A=L(t);l(A.width,A.height,Z.generateMipMaps,!1,(()=>{z(Z,t)}))}}}}]);