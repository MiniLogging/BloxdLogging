"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[11],{10284:(N,Z,d)=>{d.r(Z),d.d(Z,{_TGATextureLoader:()=>w});var X=d(1051);function I(N){let Z=0;return{id_length:N[Z++],colormap_type:N[Z++],image_type:N[Z++],colormap_index:N[Z++]|N[Z++]<<8,colormap_length:N[Z++]|N[Z++]<<8,colormap_size:N[Z++],origin:[N[Z++]|N[Z++]<<8,N[Z++]|N[Z++]<<8],width:N[Z++]|N[Z++]<<8,height:N[Z++]|N[Z++]<<8,pixel_size:N[Z++],flags:N[Z++]}}function m(N,Z){if(Z.length<19)return void X.e.Error("Unable to load TGA file - Not enough data to contain header");let d=18;const m=I(Z);if(m.id_length+d>Z.length)return void X.e.Error("Unable to load TGA file - Not enough data");d+=m.id_length;let w,S=!1,e=!1,j=!1;switch(m.image_type){case 9:S=!0;case 1:e=!0;break;case 10:S=!0;case 2:break;case 11:S=!0;case 3:j=!0}const B=m.pixel_size>>3,D=m.width*m.height*B;let v,T,k,h,U,C,M;if(e&&(v=Z.subarray(d,d+=m.colormap_length*(m.colormap_size>>3))),S){let N,X,I;w=new Uint8Array(D);let m=0;const z=new Uint8Array(B);for(;d<D&&m<D;)if(N=Z[d++],X=1+(127&N),128&N){for(I=0;I<B;++I)z[I]=Z[d++];for(I=0;I<X;++I)w.set(z,m+I*B);m+=B*X}else{for(X*=B,I=0;I<X;++I)w[m+I]=Z[d++];m+=X}}else w=Z.subarray(d,d+=e?m.width*m.height:D);switch((48&m.flags)>>4){default:case 2:T=0,h=1,M=m.width,k=0,U=1,C=m.height;break;case 0:T=0,h=1,M=m.width,k=m.height-1,U=-1,C=-1;break;case 3:T=m.width-1,h=-1,M=-1,k=0,U=1,C=m.height;break;case 1:T=m.width-1,h=-1,M=-1,k=m.height-1,U=-1,C=-1}const Q="_getImageData"+(j?"Grey":"")+m.pixel_size+"bits",A=z[Q](m,v,w,k,U,C,T,h,M);N.getEngine()._uploadDataToTextureDirectly(N,A)}const z={GetTGAHeader:I,UploadContent:m,_getImageData8bits:function(N,Z,d,X,I,m,z,w,S){const e=d,j=Z,B=N.width,D=N.height;let v,T,k,h=0;const U=new Uint8Array(B*D*4);for(k=X;k!==m;k+=I)for(T=z;T!==S;T+=w,h++)v=e[h],U[4*(T+B*k)+3]=255,U[4*(T+B*k)+2]=j[3*v+0],U[4*(T+B*k)+1]=j[3*v+1],U[4*(T+B*k)+0]=j[3*v+2];return U},_getImageData16bits:function(N,Z,d,X,I,m,z,w,S){const e=d,j=N.width,B=N.height;let D,v,T,k=0;const h=new Uint8Array(j*B*4);for(T=X;T!==m;T+=I)for(v=z;v!==S;v+=w,k+=2){D=e[k+0]+(e[k+1]<<8);const N=255*((31744&D)>>10)/31|0,Z=255*((992&D)>>5)/31|0,d=255*(31&D)/31|0;h[4*(v+j*T)+0]=N,h[4*(v+j*T)+1]=Z,h[4*(v+j*T)+2]=d,h[4*(v+j*T)+3]=32768&D?0:255}return h},_getImageData24bits:function(N,Z,d,X,I,m,z,w,S){const e=d,j=N.width,B=N.height;let D,v,T=0;const k=new Uint8Array(j*B*4);for(v=X;v!==m;v+=I)for(D=z;D!==S;D+=w,T+=3)k[4*(D+j*v)+3]=255,k[4*(D+j*v)+2]=e[T+0],k[4*(D+j*v)+1]=e[T+1],k[4*(D+j*v)+0]=e[T+2];return k},_getImageData32bits:function(N,Z,d,X,I,m,z,w,S){const e=d,j=N.width,B=N.height;let D,v,T=0;const k=new Uint8Array(j*B*4);for(v=X;v!==m;v+=I)for(D=z;D!==S;D+=w,T+=4)k[4*(D+j*v)+2]=e[T+0],k[4*(D+j*v)+1]=e[T+1],k[4*(D+j*v)+0]=e[T+2],k[4*(D+j*v)+3]=e[T+3];return k},_getImageDataGrey8bits:function(N,Z,d,X,I,m,z,w,S){const e=d,j=N.width,B=N.height;let D,v,T,k=0;const h=new Uint8Array(j*B*4);for(T=X;T!==m;T+=I)for(v=z;v!==S;v+=w,k++)D=e[k],h[4*(v+j*T)+0]=D,h[4*(v+j*T)+1]=D,h[4*(v+j*T)+2]=D,h[4*(v+j*T)+3]=255;return h},_getImageDataGrey16bits:function(N,Z,d,X,I,m,z,w,S){const e=d,j=N.width,B=N.height;let D,v,T=0;const k=new Uint8Array(j*B*4);for(v=X;v!==m;v+=I)for(D=z;D!==S;D+=w,T+=2)k[4*(D+j*v)+0]=e[T+0],k[4*(D+j*v)+1]=e[T+0],k[4*(D+j*v)+2]=e[T+0],k[4*(D+j*v)+3]=e[T+1];return k}};class w{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(N,Z,d){const X=new Uint8Array(N.buffer,N.byteOffset,N.byteLength),z=I(X);d(z.width,z.height,Z.generateMipMaps,!1,(()=>{m(Z,X)}))}}}}]);