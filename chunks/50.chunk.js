"use strict";(self.uw9p3pwwsje=self.uw9p3pwwsje||[]).push([[50],{15176:(D,h,o)=>{o.r(h),o.d(h,{_TGATextureLoader:()=>R});var H=o(12658);function g(D){let h=0;return{id_length:D[h++],colormap_type:D[h++],image_type:D[h++],colormap_index:D[h++]|D[h++]<<8,colormap_length:D[h++]|D[h++]<<8,colormap_size:D[h++],origin:[D[h++]|D[h++]<<8,D[h++]|D[h++]<<8],width:D[h++]|D[h++]<<8,height:D[h++]|D[h++]<<8,pixel_size:D[h++],flags:D[h++]}}function j(D,h){if(h.length<19)return void H.d.Error("Unable to load TGA file - Not enough data to contain header");let o=18;const j=g(h);if(j.id_length+o>h.length)return void H.d.Error("Unable to load TGA file - Not enough data");o+=j.id_length;let R,t=!1,S=!1,k=!1;switch(j.image_type){case 9:t=!0;case 1:S=!0;break;case 10:t=!0;case 2:break;case 11:t=!0;case 3:k=!0}const K=j.pixel_size>>3,Q=j.width*j.height*K;let v,r,B,s,U,q,c;if(S&&(v=h.subarray(o,o+=j.colormap_length*(j.colormap_size>>3))),t){let D,H,g;R=new Uint8Array(Q);let j=0;const M=new Uint8Array(K);for(;o<Q&&j<Q;)if(D=h[o++],H=1+(127&D),128&D){for(g=0;g<K;++g)M[g]=h[o++];for(g=0;g<H;++g)R.set(M,j+g*K);j+=K*H}else{for(H*=K,g=0;g<H;++g)R[j+g]=h[o++];j+=H}}else R=h.subarray(o,o+=S?j.width*j.height:Q);switch((48&j.flags)>>4){default:case 2:r=0,s=1,c=j.width,B=0,U=1,q=j.height;break;case 0:r=0,s=1,c=j.width,B=j.height-1,U=-1,q=-1;break;case 3:r=j.width-1,s=-1,c=-1,B=0,U=1,q=j.height;break;case 1:r=j.width-1,s=-1,c=-1,B=j.height-1,U=-1,q=-1}const y="_getImageData"+(k?"Grey":"")+j.pixel_size+"bits",b=M[y](j,v,R,B,U,q,r,s,c);D.getEngine()._uploadDataToTextureDirectly(D,b)}const M={GetTGAHeader:g,UploadContent:j,_getImageData8bits:function(D,h,o,H,g,j,M,R,t){const S=o,k=h,K=D.width,Q=D.height;let v,r,B,s=0;const U=new Uint8Array(K*Q*4);for(B=H;B!==j;B+=g)for(r=M;r!==t;r+=R,s++)v=S[s],U[4*(r+K*B)+3]=255,U[4*(r+K*B)+2]=k[3*v+0],U[4*(r+K*B)+1]=k[3*v+1],U[4*(r+K*B)+0]=k[3*v+2];return U},_getImageData16bits:function(D,h,o,H,g,j,M,R,t){const S=o,k=D.width,K=D.height;let Q,v,r,B=0;const s=new Uint8Array(k*K*4);for(r=H;r!==j;r+=g)for(v=M;v!==t;v+=R,B+=2){Q=S[B+0]+(S[B+1]<<8);const D=255*((31744&Q)>>10)/31|0,h=255*((992&Q)>>5)/31|0,o=255*(31&Q)/31|0;s[4*(v+k*r)+0]=D,s[4*(v+k*r)+1]=h,s[4*(v+k*r)+2]=o,s[4*(v+k*r)+3]=32768&Q?0:255}return s},_getImageData24bits:function(D,h,o,H,g,j,M,R,t){const S=o,k=D.width,K=D.height;let Q,v,r=0;const B=new Uint8Array(k*K*4);for(v=H;v!==j;v+=g)for(Q=M;Q!==t;Q+=R,r+=3)B[4*(Q+k*v)+3]=255,B[4*(Q+k*v)+2]=S[r+0],B[4*(Q+k*v)+1]=S[r+1],B[4*(Q+k*v)+0]=S[r+2];return B},_getImageData32bits:function(D,h,o,H,g,j,M,R,t){const S=o,k=D.width,K=D.height;let Q,v,r=0;const B=new Uint8Array(k*K*4);for(v=H;v!==j;v+=g)for(Q=M;Q!==t;Q+=R,r+=4)B[4*(Q+k*v)+2]=S[r+0],B[4*(Q+k*v)+1]=S[r+1],B[4*(Q+k*v)+0]=S[r+2],B[4*(Q+k*v)+3]=S[r+3];return B},_getImageDataGrey8bits:function(D,h,o,H,g,j,M,R,t){const S=o,k=D.width,K=D.height;let Q,v,r,B=0;const s=new Uint8Array(k*K*4);for(r=H;r!==j;r+=g)for(v=M;v!==t;v+=R,B++)Q=S[B],s[4*(v+k*r)+0]=Q,s[4*(v+k*r)+1]=Q,s[4*(v+k*r)+2]=Q,s[4*(v+k*r)+3]=255;return s},_getImageDataGrey16bits:function(D,h,o,H,g,j,M,R,t){const S=o,k=D.width,K=D.height;let Q,v,r=0;const B=new Uint8Array(k*K*4);for(v=H;v!==j;v+=g)for(Q=M;Q!==t;Q+=R,r+=2)B[4*(Q+k*v)+0]=S[r+0],B[4*(Q+k*v)+1]=S[r+0],B[4*(Q+k*v)+2]=S[r+0],B[4*(Q+k*v)+3]=S[r+1];return B}};class R{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(D,h,o){const H=new Uint8Array(D.buffer,D.byteOffset,D.byteLength),M=g(H);o(M.width,M.height,h.generateMipMaps,!1,(()=>{j(h,H)}))}}}}]);