"use strict";(self.zcqpiao938m=self.zcqpiao938m||[]).push([[50],{14266:(C,U,K)=>{K.r(U),K.d(U,{_TGATextureLoader:()=>e});var m=K(11679);function O(C){let U=0;return{id_length:C[U++],colormap_type:C[U++],image_type:C[U++],colormap_index:C[U++]|C[U++]<<8,colormap_length:C[U++]|C[U++]<<8,colormap_size:C[U++],origin:[C[U++]|C[U++]<<8,C[U++]|C[U++]<<8],width:C[U++]|C[U++]<<8,height:C[U++]|C[U++]<<8,pixel_size:C[U++],flags:C[U++]}}function X(C,U){if(U.length<19)return void m.d.Error("Unable to load TGA file - Not enough data to contain header");let K=18;const X=O(U);if(X.id_length+K>U.length)return void m.d.Error("Unable to load TGA file - Not enough data");K+=X.id_length;let e,t=!1,z=!1,j=!1;switch(X.image_type){case 9:t=!0;case 1:z=!0;break;case 10:t=!0;case 2:break;case 11:t=!0;case 3:j=!0}const p=X.pixel_size>>3,E=X.width*X.height*p;let u,b,v,Q,V,f,F;if(z&&(u=U.subarray(K,K+=X.colormap_length*(X.colormap_size>>3))),t){let C,m,O;e=new Uint8Array(E);let X=0;const A=new Uint8Array(p);for(;K<E&&X<E;)if(C=U[K++],m=1+(127&C),128&C){for(O=0;O<p;++O)A[O]=U[K++];for(O=0;O<m;++O)e.set(A,X+O*p);X+=p*m}else{for(m*=p,O=0;O<m;++O)e[X+O]=U[K++];X+=m}}else e=U.subarray(K,K+=z?X.width*X.height:E);switch((48&X.flags)>>4){default:case 2:b=0,Q=1,F=X.width,v=0,V=1,f=X.height;break;case 0:b=0,Q=1,F=X.width,v=X.height-1,V=-1,f=-1;break;case 3:b=X.width-1,Q=-1,F=-1,v=0,V=1,f=X.height;break;case 1:b=X.width-1,Q=-1,F=-1,v=X.height-1,V=-1,f=-1}const Z="_getImageData"+(j?"Grey":"")+X.pixel_size+"bits",P=A[Z](X,u,e,v,V,f,b,Q,F);C.getEngine()._uploadDataToTextureDirectly(C,P)}const A={GetTGAHeader:O,UploadContent:X,_getImageData8bits:function(C,U,K,m,O,X,A,e,t){const z=K,j=U,p=C.width,E=C.height;let u,b,v,Q=0;const V=new Uint8Array(p*E*4);for(v=m;v!==X;v+=O)for(b=A;b!==t;b+=e,Q++)u=z[Q],V[4*(b+p*v)+3]=255,V[4*(b+p*v)+2]=j[3*u+0],V[4*(b+p*v)+1]=j[3*u+1],V[4*(b+p*v)+0]=j[3*u+2];return V},_getImageData16bits:function(C,U,K,m,O,X,A,e,t){const z=K,j=C.width,p=C.height;let E,u,b,v=0;const Q=new Uint8Array(j*p*4);for(b=m;b!==X;b+=O)for(u=A;u!==t;u+=e,v+=2){E=z[v+0]+(z[v+1]<<8);const C=255*((31744&E)>>10)/31|0,U=255*((992&E)>>5)/31|0,K=255*(31&E)/31|0;Q[4*(u+j*b)+0]=C,Q[4*(u+j*b)+1]=U,Q[4*(u+j*b)+2]=K,Q[4*(u+j*b)+3]=32768&E?0:255}return Q},_getImageData24bits:function(C,U,K,m,O,X,A,e,t){const z=K,j=C.width,p=C.height;let E,u,b=0;const v=new Uint8Array(j*p*4);for(u=m;u!==X;u+=O)for(E=A;E!==t;E+=e,b+=3)v[4*(E+j*u)+3]=255,v[4*(E+j*u)+2]=z[b+0],v[4*(E+j*u)+1]=z[b+1],v[4*(E+j*u)+0]=z[b+2];return v},_getImageData32bits:function(C,U,K,m,O,X,A,e,t){const z=K,j=C.width,p=C.height;let E,u,b=0;const v=new Uint8Array(j*p*4);for(u=m;u!==X;u+=O)for(E=A;E!==t;E+=e,b+=4)v[4*(E+j*u)+2]=z[b+0],v[4*(E+j*u)+1]=z[b+1],v[4*(E+j*u)+0]=z[b+2],v[4*(E+j*u)+3]=z[b+3];return v},_getImageDataGrey8bits:function(C,U,K,m,O,X,A,e,t){const z=K,j=C.width,p=C.height;let E,u,b,v=0;const Q=new Uint8Array(j*p*4);for(b=m;b!==X;b+=O)for(u=A;u!==t;u+=e,v++)E=z[v],Q[4*(u+j*b)+0]=E,Q[4*(u+j*b)+1]=E,Q[4*(u+j*b)+2]=E,Q[4*(u+j*b)+3]=255;return Q},_getImageDataGrey16bits:function(C,U,K,m,O,X,A,e,t){const z=K,j=C.width,p=C.height;let E,u,b=0;const v=new Uint8Array(j*p*4);for(u=m;u!==X;u+=O)for(E=A;E!==t;E+=e,b+=2)v[4*(E+j*u)+0]=z[b+0],v[4*(E+j*u)+1]=z[b+0],v[4*(E+j*u)+2]=z[b+0],v[4*(E+j*u)+3]=z[b+1];return v}};class e{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(C,U,K){const m=new Uint8Array(C.buffer,C.byteOffset,C.byteLength),A=O(m);K(A.width,A.height,U.generateMipMaps,!1,(()=>{X(U,m)}))}}}}]);