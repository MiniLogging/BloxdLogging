"use strict";(self.ipz2em9uj1g=self.ipz2em9uj1g||[]).push([[50],{15086:(r,O,W)=>{W.r(O),W.d(O,{_TGATextureLoader:()=>h});var q=W(12453);function Q(r){let O=0;return{id_length:r[O++],colormap_type:r[O++],image_type:r[O++],colormap_index:r[O++]|r[O++]<<8,colormap_length:r[O++]|r[O++]<<8,colormap_size:r[O++],origin:[r[O++]|r[O++]<<8,r[O++]|r[O++]<<8],width:r[O++]|r[O++]<<8,height:r[O++]|r[O++]<<8,pixel_size:r[O++],flags:r[O++]}}function C(r,O){if(O.length<19)return void q.b.Error("Unable to load TGA file - Not enough data to contain header");let W=18;const C=Q(O);if(C.id_length+W>O.length)return void q.b.Error("Unable to load TGA file - Not enough data");W+=C.id_length;let h,J=!1,mr=!1,d=!1;switch(C.image_type){case 9:J=!0;case 1:mr=!0;break;case 10:J=!0;case 2:break;case 11:J=!0;case 3:d=!0}const v=C.pixel_size>>3,g=C.width*C.height*v;let K,U,P,b,e,Y,G;if(mr&&(K=O.subarray(W,W+=C.colormap_length*(C.colormap_size>>3))),J){let r,q,Q;h=new Uint8Array(g);let C=0;const T=new Uint8Array(v);for(;W<g&&C<g;)if(r=O[W++],q=1+(127&r),128&r){for(Q=0;Q<v;++Q)T[Q]=O[W++];for(Q=0;Q<q;++Q)h.set(T,C+Q*v);C+=v*q}else{for(q*=v,Q=0;Q<q;++Q)h[C+Q]=O[W++];C+=q}}else h=O.subarray(W,W+=mr?C.width*C.height:g);switch((48&C.flags)>>4){default:case 2:U=0,b=1,G=C.width,P=0,e=1,Y=C.height;break;case 0:U=0,b=1,G=C.width,P=C.height-1,e=-1,Y=-1;break;case 3:U=C.width-1,b=-1,G=-1,P=0,e=1,Y=C.height;break;case 1:U=C.width-1,b=-1,G=-1,P=C.height-1,e=-1,Y=-1}const X="_getImageData"+(d?"Grey":"")+C.pixel_size+"bits",S=T[X](C,K,h,P,e,Y,U,b,G);r.getEngine()._uploadDataToTextureDirectly(r,S)}const T={GetTGAHeader:Q,UploadContent:C,_getImageData8bits:function(r,O,W,q,Q,C,T,h,J){const mr=W,d=O,v=r.width,g=r.height;let K,U,P,b=0;const e=new Uint8Array(v*g*4);for(P=q;P!==C;P+=Q)for(U=T;U!==J;U+=h,b++)K=mr[b],e[4*(U+v*P)+3]=255,e[4*(U+v*P)+2]=d[3*K+0],e[4*(U+v*P)+1]=d[3*K+1],e[4*(U+v*P)+0]=d[3*K+2];return e},_getImageData16bits:function(r,O,W,q,Q,C,T,h,J){const mr=W,d=r.width,v=r.height;let g,K,U,P=0;const b=new Uint8Array(d*v*4);for(U=q;U!==C;U+=Q)for(K=T;K!==J;K+=h,P+=2){g=mr[P+0]+(mr[P+1]<<8);const r=255*((31744&g)>>10)/31|0,O=255*((992&g)>>5)/31|0,W=255*(31&g)/31|0;b[4*(K+d*U)+0]=r,b[4*(K+d*U)+1]=O,b[4*(K+d*U)+2]=W,b[4*(K+d*U)+3]=32768&g?0:255}return b},_getImageData24bits:function(r,O,W,q,Q,C,T,h,J){const mr=W,d=r.width,v=r.height;let g,K,U=0;const P=new Uint8Array(d*v*4);for(K=q;K!==C;K+=Q)for(g=T;g!==J;g+=h,U+=3)P[4*(g+d*K)+3]=255,P[4*(g+d*K)+2]=mr[U+0],P[4*(g+d*K)+1]=mr[U+1],P[4*(g+d*K)+0]=mr[U+2];return P},_getImageData32bits:function(r,O,W,q,Q,C,T,h,J){const mr=W,d=r.width,v=r.height;let g,K,U=0;const P=new Uint8Array(d*v*4);for(K=q;K!==C;K+=Q)for(g=T;g!==J;g+=h,U+=4)P[4*(g+d*K)+2]=mr[U+0],P[4*(g+d*K)+1]=mr[U+1],P[4*(g+d*K)+0]=mr[U+2],P[4*(g+d*K)+3]=mr[U+3];return P},_getImageDataGrey8bits:function(r,O,W,q,Q,C,T,h,J){const mr=W,d=r.width,v=r.height;let g,K,U,P=0;const b=new Uint8Array(d*v*4);for(U=q;U!==C;U+=Q)for(K=T;K!==J;K+=h,P++)g=mr[P],b[4*(K+d*U)+0]=g,b[4*(K+d*U)+1]=g,b[4*(K+d*U)+2]=g,b[4*(K+d*U)+3]=255;return b},_getImageDataGrey16bits:function(r,O,W,q,Q,C,T,h,J){const mr=W,d=r.width,v=r.height;let g,K,U=0;const P=new Uint8Array(d*v*4);for(K=q;K!==C;K+=Q)for(g=T;g!==J;g+=h,U+=2)P[4*(g+d*K)+0]=mr[U+0],P[4*(g+d*K)+1]=mr[U+0],P[4*(g+d*K)+2]=mr[U+0],P[4*(g+d*K)+3]=mr[U+1];return P}};class h{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(r,O,W){const q=new Uint8Array(r.buffer,r.byteOffset,r.byteLength),T=Q(q);W(T.width,T.height,O.generateMipMaps,!1,(()=>{C(O,q)}))}}}}]);