"use strict";(self.agop5zpabxv=self.agop5zpabxv||[]).push([[50],{14768:(H,u,J)=>{J.r(u),J.d(u,{_TGATextureLoader:()=>g});var O=J(12185);function U(H){let u=0;return{id_length:H[u++],colormap_type:H[u++],image_type:H[u++],colormap_index:H[u++]|H[u++]<<8,colormap_length:H[u++]|H[u++]<<8,colormap_size:H[u++],origin:[H[u++]|H[u++]<<8,H[u++]|H[u++]<<8],width:H[u++]|H[u++]<<8,height:H[u++]|H[u++]<<8,pixel_size:H[u++],flags:H[u++]}}function h(H,u){if(u.length<19)return void O.b.Error("Unable to load TGA file - Not enough data to contain header");let J=18;const h=U(u);if(h.id_length+J>u.length)return void O.b.Error("Unable to load TGA file - Not enough data");J+=h.id_length;let g,B=!1,b=!1,d=!1;switch(h.image_type){case 9:B=!0;case 1:b=!0;break;case 10:B=!0;case 2:break;case 11:B=!0;case 3:d=!0}const G=h.pixel_size>>3,P=h.width*h.height*G;let mH,l,r,p,a,k,C;if(b&&(mH=u.subarray(J,J+=h.colormap_length*(h.colormap_size>>3))),B){let H,O,U;g=new Uint8Array(P);let h=0;const w=new Uint8Array(G);for(;J<P&&h<P;)if(H=u[J++],O=1+(127&H),128&H){for(U=0;U<G;++U)w[U]=u[J++];for(U=0;U<O;++U)g.set(w,h+U*G);h+=G*O}else{for(O*=G,U=0;U<O;++U)g[h+U]=u[J++];h+=O}}else g=u.subarray(J,J+=b?h.width*h.height:P);switch((48&h.flags)>>4){default:case 2:l=0,p=1,C=h.width,r=0,a=1,k=h.height;break;case 0:l=0,p=1,C=h.width,r=h.height-1,a=-1,k=-1;break;case 3:l=h.width-1,p=-1,C=-1,r=0,a=1,k=h.height;break;case 1:l=h.width-1,p=-1,C=-1,r=h.height-1,a=-1,k=-1}const j="_getImageData"+(d?"Grey":"")+h.pixel_size+"bits",M=w[j](h,mH,g,r,a,k,l,p,C);H.getEngine()._uploadDataToTextureDirectly(H,M)}const w={GetTGAHeader:U,UploadContent:h,_getImageData8bits:function(H,u,J,O,U,h,w,g,B){const b=J,d=u,G=H.width,P=H.height;let mH,l,r,p=0;const a=new Uint8Array(G*P*4);for(r=O;r!==h;r+=U)for(l=w;l!==B;l+=g,p++)mH=b[p],a[4*(l+G*r)+3]=255,a[4*(l+G*r)+2]=d[3*mH+0],a[4*(l+G*r)+1]=d[3*mH+1],a[4*(l+G*r)+0]=d[3*mH+2];return a},_getImageData16bits:function(H,u,J,O,U,h,w,g,B){const b=J,d=H.width,G=H.height;let P,mH,l,r=0;const p=new Uint8Array(d*G*4);for(l=O;l!==h;l+=U)for(mH=w;mH!==B;mH+=g,r+=2){P=b[r+0]+(b[r+1]<<8);const H=255*((31744&P)>>10)/31|0,u=255*((992&P)>>5)/31|0,J=255*(31&P)/31|0;p[4*(mH+d*l)+0]=H,p[4*(mH+d*l)+1]=u,p[4*(mH+d*l)+2]=J,p[4*(mH+d*l)+3]=32768&P?0:255}return p},_getImageData24bits:function(H,u,J,O,U,h,w,g,B){const b=J,d=H.width,G=H.height;let P,mH,l=0;const r=new Uint8Array(d*G*4);for(mH=O;mH!==h;mH+=U)for(P=w;P!==B;P+=g,l+=3)r[4*(P+d*mH)+3]=255,r[4*(P+d*mH)+2]=b[l+0],r[4*(P+d*mH)+1]=b[l+1],r[4*(P+d*mH)+0]=b[l+2];return r},_getImageData32bits:function(H,u,J,O,U,h,w,g,B){const b=J,d=H.width,G=H.height;let P,mH,l=0;const r=new Uint8Array(d*G*4);for(mH=O;mH!==h;mH+=U)for(P=w;P!==B;P+=g,l+=4)r[4*(P+d*mH)+2]=b[l+0],r[4*(P+d*mH)+1]=b[l+1],r[4*(P+d*mH)+0]=b[l+2],r[4*(P+d*mH)+3]=b[l+3];return r},_getImageDataGrey8bits:function(H,u,J,O,U,h,w,g,B){const b=J,d=H.width,G=H.height;let P,mH,l,r=0;const p=new Uint8Array(d*G*4);for(l=O;l!==h;l+=U)for(mH=w;mH!==B;mH+=g,r++)P=b[r],p[4*(mH+d*l)+0]=P,p[4*(mH+d*l)+1]=P,p[4*(mH+d*l)+2]=P,p[4*(mH+d*l)+3]=255;return p},_getImageDataGrey16bits:function(H,u,J,O,U,h,w,g,B){const b=J,d=H.width,G=H.height;let P,mH,l=0;const r=new Uint8Array(d*G*4);for(mH=O;mH!==h;mH+=U)for(P=w;P!==B;P+=g,l+=2)r[4*(P+d*mH)+0]=b[l+0],r[4*(P+d*mH)+1]=b[l+0],r[4*(P+d*mH)+2]=b[l+0],r[4*(P+d*mH)+3]=b[l+1];return r}};class g{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(H,u,J){const O=new Uint8Array(H.buffer,H.byteOffset,H.byteLength),w=U(O);J(w.width,w.height,u.generateMipMaps,!1,(()=>{h(u,O)}))}}}}]);