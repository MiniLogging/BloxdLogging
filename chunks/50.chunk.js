"use strict";(self.h6ljd275xwr=self.h6ljd275xwr||[]).push([[50],{13868:(n,y,H)=>{H.r(y),H.d(y,{_TGATextureLoader:()=>i});var o=H(11114);function G(n){let y=0;return{id_length:n[y++],colormap_type:n[y++],image_type:n[y++],colormap_index:n[y++]|n[y++]<<8,colormap_length:n[y++]|n[y++]<<8,colormap_size:n[y++],origin:[n[y++]|n[y++]<<8,n[y++]|n[y++]<<8],width:n[y++]|n[y++]<<8,height:n[y++]|n[y++]<<8,pixel_size:n[y++],flags:n[y++]}}function h(n,y){if(y.length<19)return void o.d.Error("Unable to load TGA file - Not enough data to contain header");let H=18;const h=G(y);if(h.id_length+H>y.length)return void o.d.Error("Unable to load TGA file - Not enough data");H+=h.id_length;let i,B=!1,V=!1,q=!1;switch(h.image_type){case 9:B=!0;case 1:V=!0;break;case 10:B=!0;case 2:break;case 11:B=!0;case 3:q=!0}const b=h.pixel_size>>3,A=h.width*h.height*b;let U,T,W,z,Q,l,v;if(V&&(U=y.subarray(H,H+=h.colormap_length*(h.colormap_size>>3))),B){let n,o,G;i=new Uint8Array(A);let h=0;const k=new Uint8Array(b);for(;H<A&&h<A;)if(n=y[H++],o=1+(127&n),128&n){for(G=0;G<b;++G)k[G]=y[H++];for(G=0;G<o;++G)i.set(k,h+G*b);h+=b*o}else{for(o*=b,G=0;G<o;++G)i[h+G]=y[H++];h+=o}}else i=y.subarray(H,H+=V?h.width*h.height:A);switch((48&h.flags)>>4){default:case 2:T=0,z=1,v=h.width,W=0,Q=1,l=h.height;break;case 0:T=0,z=1,v=h.width,W=h.height-1,Q=-1,l=-1;break;case 3:T=h.width-1,z=-1,v=-1,W=0,Q=1,l=h.height;break;case 1:T=h.width-1,z=-1,v=-1,W=h.height-1,Q=-1,l=-1}const F="_getImageData"+(q?"Grey":"")+h.pixel_size+"bits",g=k[F](h,U,i,W,Q,l,T,z,v);n.getEngine()._uploadDataToTextureDirectly(n,g)}const k={GetTGAHeader:G,UploadContent:h,_getImageData8bits:function(n,y,H,o,G,h,k,i,B){const V=H,q=y,b=n.width,A=n.height;let U,T,W,z=0;const Q=new Uint8Array(b*A*4);for(W=o;W!==h;W+=G)for(T=k;T!==B;T+=i,z++)U=V[z],Q[4*(T+b*W)+3]=255,Q[4*(T+b*W)+2]=q[3*U+0],Q[4*(T+b*W)+1]=q[3*U+1],Q[4*(T+b*W)+0]=q[3*U+2];return Q},_getImageData16bits:function(n,y,H,o,G,h,k,i,B){const V=H,q=n.width,b=n.height;let A,U,T,W=0;const z=new Uint8Array(q*b*4);for(T=o;T!==h;T+=G)for(U=k;U!==B;U+=i,W+=2){A=V[W+0]+(V[W+1]<<8);const n=255*((31744&A)>>10)/31|0,y=255*((992&A)>>5)/31|0,H=255*(31&A)/31|0;z[4*(U+q*T)+0]=n,z[4*(U+q*T)+1]=y,z[4*(U+q*T)+2]=H,z[4*(U+q*T)+3]=32768&A?0:255}return z},_getImageData24bits:function(n,y,H,o,G,h,k,i,B){const V=H,q=n.width,b=n.height;let A,U,T=0;const W=new Uint8Array(q*b*4);for(U=o;U!==h;U+=G)for(A=k;A!==B;A+=i,T+=3)W[4*(A+q*U)+3]=255,W[4*(A+q*U)+2]=V[T+0],W[4*(A+q*U)+1]=V[T+1],W[4*(A+q*U)+0]=V[T+2];return W},_getImageData32bits:function(n,y,H,o,G,h,k,i,B){const V=H,q=n.width,b=n.height;let A,U,T=0;const W=new Uint8Array(q*b*4);for(U=o;U!==h;U+=G)for(A=k;A!==B;A+=i,T+=4)W[4*(A+q*U)+2]=V[T+0],W[4*(A+q*U)+1]=V[T+1],W[4*(A+q*U)+0]=V[T+2],W[4*(A+q*U)+3]=V[T+3];return W},_getImageDataGrey8bits:function(n,y,H,o,G,h,k,i,B){const V=H,q=n.width,b=n.height;let A,U,T,W=0;const z=new Uint8Array(q*b*4);for(T=o;T!==h;T+=G)for(U=k;U!==B;U+=i,W++)A=V[W],z[4*(U+q*T)+0]=A,z[4*(U+q*T)+1]=A,z[4*(U+q*T)+2]=A,z[4*(U+q*T)+3]=255;return z},_getImageDataGrey16bits:function(n,y,H,o,G,h,k,i,B){const V=H,q=n.width,b=n.height;let A,U,T=0;const W=new Uint8Array(q*b*4);for(U=o;U!==h;U+=G)for(A=k;A!==B;A+=i,T+=2)W[4*(A+q*U)+0]=V[T+0],W[4*(A+q*U)+1]=V[T+0],W[4*(A+q*U)+2]=V[T+0],W[4*(A+q*U)+3]=V[T+1];return W}};class i{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(n,y,H){const o=new Uint8Array(n.buffer,n.byteOffset,n.byteLength),k=G(o);H(k.width,k.height,y.generateMipMaps,!1,(()=>{h(y,o)}))}}}}]);