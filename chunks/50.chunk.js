"use strict";(self.hmihoa2fs98=self.hmihoa2fs98||[]).push([[50],{14117:(b,d,P)=>{P.r(d),P.d(d,{_TGATextureLoader:()=>C});var G=P(11504);function W(b){let d=0;return{id_length:b[d++],colormap_type:b[d++],image_type:b[d++],colormap_index:b[d++]|b[d++]<<8,colormap_length:b[d++]|b[d++]<<8,colormap_size:b[d++],origin:[b[d++]|b[d++]<<8,b[d++]|b[d++]<<8],width:b[d++]|b[d++]<<8,height:b[d++]|b[d++]<<8,pixel_size:b[d++],flags:b[d++]}}function i(b,d){if(d.length<19)return void G.e.Error("Unable to load TGA file - Not enough data to contain header");let P=18;const i=W(d);if(i.id_length+P>d.length)return void G.e.Error("Unable to load TGA file - Not enough data");P+=i.id_length;let C,J=!1,L=!1,x=!1;switch(i.image_type){case 9:J=!0;case 1:L=!0;break;case 10:J=!0;case 2:break;case 11:J=!0;case 3:x=!0}const Y=i.pixel_size>>3,s=i.width*i.height*Y;let E,w,t,r,B,n,Z;if(L&&(E=d.subarray(P,P+=i.colormap_length*(i.colormap_size>>3))),J){let b,G,W;C=new Uint8Array(s);let i=0;const q=new Uint8Array(Y);for(;P<s&&i<s;)if(b=d[P++],G=1+(127&b),128&b){for(W=0;W<Y;++W)q[W]=d[P++];for(W=0;W<G;++W)C.set(q,i+W*Y);i+=Y*G}else{for(G*=Y,W=0;W<G;++W)C[i+W]=d[P++];i+=G}}else C=d.subarray(P,P+=L?i.width*i.height:s);switch((48&i.flags)>>4){default:case 2:w=0,r=1,Z=i.width,t=0,B=1,n=i.height;break;case 0:w=0,r=1,Z=i.width,t=i.height-1,B=-1,n=-1;break;case 3:w=i.width-1,r=-1,Z=-1,t=0,B=1,n=i.height;break;case 1:w=i.width-1,r=-1,Z=-1,t=i.height-1,B=-1,n=-1}const o="_getImageData"+(x?"Grey":"")+i.pixel_size+"bits",A=q[o](i,E,C,t,B,n,w,r,Z);b.getEngine()._uploadDataToTextureDirectly(b,A)}const q={GetTGAHeader:W,UploadContent:i,_getImageData8bits:function(b,d,P,G,W,i,q,C,J){const L=P,x=d,Y=b.width,s=b.height;let E,w,t,r=0;const B=new Uint8Array(Y*s*4);for(t=G;t!==i;t+=W)for(w=q;w!==J;w+=C,r++)E=L[r],B[4*(w+Y*t)+3]=255,B[4*(w+Y*t)+2]=x[3*E+0],B[4*(w+Y*t)+1]=x[3*E+1],B[4*(w+Y*t)+0]=x[3*E+2];return B},_getImageData16bits:function(b,d,P,G,W,i,q,C,J){const L=P,x=b.width,Y=b.height;let s,E,w,t=0;const r=new Uint8Array(x*Y*4);for(w=G;w!==i;w+=W)for(E=q;E!==J;E+=C,t+=2){s=L[t+0]+(L[t+1]<<8);const b=255*((31744&s)>>10)/31|0,d=255*((992&s)>>5)/31|0,P=255*(31&s)/31|0;r[4*(E+x*w)+0]=b,r[4*(E+x*w)+1]=d,r[4*(E+x*w)+2]=P,r[4*(E+x*w)+3]=32768&s?0:255}return r},_getImageData24bits:function(b,d,P,G,W,i,q,C,J){const L=P,x=b.width,Y=b.height;let s,E,w=0;const t=new Uint8Array(x*Y*4);for(E=G;E!==i;E+=W)for(s=q;s!==J;s+=C,w+=3)t[4*(s+x*E)+3]=255,t[4*(s+x*E)+2]=L[w+0],t[4*(s+x*E)+1]=L[w+1],t[4*(s+x*E)+0]=L[w+2];return t},_getImageData32bits:function(b,d,P,G,W,i,q,C,J){const L=P,x=b.width,Y=b.height;let s,E,w=0;const t=new Uint8Array(x*Y*4);for(E=G;E!==i;E+=W)for(s=q;s!==J;s+=C,w+=4)t[4*(s+x*E)+2]=L[w+0],t[4*(s+x*E)+1]=L[w+1],t[4*(s+x*E)+0]=L[w+2],t[4*(s+x*E)+3]=L[w+3];return t},_getImageDataGrey8bits:function(b,d,P,G,W,i,q,C,J){const L=P,x=b.width,Y=b.height;let s,E,w,t=0;const r=new Uint8Array(x*Y*4);for(w=G;w!==i;w+=W)for(E=q;E!==J;E+=C,t++)s=L[t],r[4*(E+x*w)+0]=s,r[4*(E+x*w)+1]=s,r[4*(E+x*w)+2]=s,r[4*(E+x*w)+3]=255;return r},_getImageDataGrey16bits:function(b,d,P,G,W,i,q,C,J){const L=P,x=b.width,Y=b.height;let s,E,w=0;const t=new Uint8Array(x*Y*4);for(E=G;E!==i;E+=W)for(s=q;s!==J;s+=C,w+=2)t[4*(s+x*E)+0]=L[w+0],t[4*(s+x*E)+1]=L[w+0],t[4*(s+x*E)+2]=L[w+0],t[4*(s+x*E)+3]=L[w+1];return t}};class C{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(b,d,P){const G=new Uint8Array(b.buffer,b.byteOffset,b.byteLength),q=W(G);P(q.width,q.height,d.generateMipMaps,!1,(()=>{i(d,G)}))}}}}]);