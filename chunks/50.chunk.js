"use strict";(self.kdlk57exiqh=self.kdlk57exiqh||[]).push([[50],{14636:(i,x,e)=>{e.r(x),e.d(x,{_TGATextureLoader:()=>J});var j=e(12072);function E(i){let x=0;return{id_length:i[x++],colormap_type:i[x++],image_type:i[x++],colormap_index:i[x++]|i[x++]<<8,colormap_length:i[x++]|i[x++]<<8,colormap_size:i[x++],origin:[i[x++]|i[x++]<<8,i[x++]|i[x++]<<8],width:i[x++]|i[x++]<<8,height:i[x++]|i[x++]<<8,pixel_size:i[x++],flags:i[x++]}}function a(i,x){if(x.length<19)return void j.c.Error("Unable to load TGA file - Not enough data to contain header");let e=18;const a=E(x);if(a.id_length+e>x.length)return void j.c.Error("Unable to load TGA file - Not enough data");e+=a.id_length;let J,u=!1,b=!1,g=!1;switch(a.image_type){case 9:u=!0;case 1:b=!0;break;case 10:u=!0;case 2:break;case 11:u=!0;case 3:g=!0}const A=a.pixel_size>>3,K=a.width*a.height*A;let L,o,M,z,T,Q,t;if(b&&(L=x.subarray(e,e+=a.colormap_length*(a.colormap_size>>3))),u){let i,j,E;J=new Uint8Array(K);let a=0;const Y=new Uint8Array(A);for(;e<K&&a<K;)if(i=x[e++],j=1+(127&i),128&i){for(E=0;E<A;++E)Y[E]=x[e++];for(E=0;E<j;++E)J.set(Y,a+E*A);a+=A*j}else{for(j*=A,E=0;E<j;++E)J[a+E]=x[e++];a+=j}}else J=x.subarray(e,e+=b?a.width*a.height:K);switch((48&a.flags)>>4){default:case 2:o=0,z=1,t=a.width,M=0,T=1,Q=a.height;break;case 0:o=0,z=1,t=a.width,M=a.height-1,T=-1,Q=-1;break;case 3:o=a.width-1,z=-1,t=-1,M=0,T=1,Q=a.height;break;case 1:o=a.width-1,z=-1,t=-1,M=a.height-1,T=-1,Q=-1}const V="_getImageData"+(g?"Grey":"")+a.pixel_size+"bits",S=Y[V](a,L,J,M,T,Q,o,z,t);i.getEngine()._uploadDataToTextureDirectly(i,S)}const Y={GetTGAHeader:E,UploadContent:a,_getImageData8bits:function(i,x,e,j,E,a,Y,J,u){const b=e,g=x,A=i.width,K=i.height;let L,o,M,z=0;const T=new Uint8Array(A*K*4);for(M=j;M!==a;M+=E)for(o=Y;o!==u;o+=J,z++)L=b[z],T[4*(o+A*M)+3]=255,T[4*(o+A*M)+2]=g[3*L+0],T[4*(o+A*M)+1]=g[3*L+1],T[4*(o+A*M)+0]=g[3*L+2];return T},_getImageData16bits:function(i,x,e,j,E,a,Y,J,u){const b=e,g=i.width,A=i.height;let K,L,o,M=0;const z=new Uint8Array(g*A*4);for(o=j;o!==a;o+=E)for(L=Y;L!==u;L+=J,M+=2){K=b[M+0]+(b[M+1]<<8);const i=255*((31744&K)>>10)/31|0,x=255*((992&K)>>5)/31|0,e=255*(31&K)/31|0;z[4*(L+g*o)+0]=i,z[4*(L+g*o)+1]=x,z[4*(L+g*o)+2]=e,z[4*(L+g*o)+3]=32768&K?0:255}return z},_getImageData24bits:function(i,x,e,j,E,a,Y,J,u){const b=e,g=i.width,A=i.height;let K,L,o=0;const M=new Uint8Array(g*A*4);for(L=j;L!==a;L+=E)for(K=Y;K!==u;K+=J,o+=3)M[4*(K+g*L)+3]=255,M[4*(K+g*L)+2]=b[o+0],M[4*(K+g*L)+1]=b[o+1],M[4*(K+g*L)+0]=b[o+2];return M},_getImageData32bits:function(i,x,e,j,E,a,Y,J,u){const b=e,g=i.width,A=i.height;let K,L,o=0;const M=new Uint8Array(g*A*4);for(L=j;L!==a;L+=E)for(K=Y;K!==u;K+=J,o+=4)M[4*(K+g*L)+2]=b[o+0],M[4*(K+g*L)+1]=b[o+1],M[4*(K+g*L)+0]=b[o+2],M[4*(K+g*L)+3]=b[o+3];return M},_getImageDataGrey8bits:function(i,x,e,j,E,a,Y,J,u){const b=e,g=i.width,A=i.height;let K,L,o,M=0;const z=new Uint8Array(g*A*4);for(o=j;o!==a;o+=E)for(L=Y;L!==u;L+=J,M++)K=b[M],z[4*(L+g*o)+0]=K,z[4*(L+g*o)+1]=K,z[4*(L+g*o)+2]=K,z[4*(L+g*o)+3]=255;return z},_getImageDataGrey16bits:function(i,x,e,j,E,a,Y,J,u){const b=e,g=i.width,A=i.height;let K,L,o=0;const M=new Uint8Array(g*A*4);for(L=j;L!==a;L+=E)for(K=Y;K!==u;K+=J,o+=2)M[4*(K+g*L)+0]=b[o+0],M[4*(K+g*L)+1]=b[o+0],M[4*(K+g*L)+2]=b[o+0],M[4*(K+g*L)+3]=b[o+1];return M}};class J{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(i,x,e){const j=new Uint8Array(i.buffer,i.byteOffset,i.byteLength),Y=E(j);e(Y.width,Y.height,x.generateMipMaps,!1,(()=>{a(x,j)}))}}}}]);