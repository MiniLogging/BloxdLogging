"use strict";(self.bjbkv7h3qsd=self.bjbkv7h3qsd||[]).push([[50],{13659:(G,A,j)=>{j.r(A),j.d(A,{_TGATextureLoader:()=>s});var u=j(11065);function k(G){let A=0;return{id_length:G[A++],colormap_type:G[A++],image_type:G[A++],colormap_index:G[A++]|G[A++]<<8,colormap_length:G[A++]|G[A++]<<8,colormap_size:G[A++],origin:[G[A++]|G[A++]<<8,G[A++]|G[A++]<<8],width:G[A++]|G[A++]<<8,height:G[A++]|G[A++]<<8,pixel_size:G[A++],flags:G[A++]}}function B(G,A){if(A.length<19)return void u.e.Error("Unable to load TGA file - Not enough data to contain header");let j=18;const B=k(A);if(B.id_length+j>A.length)return void u.e.Error("Unable to load TGA file - Not enough data");j+=B.id_length;let s,O=!1,d=!1,h=!1;switch(B.image_type){case 9:O=!0;case 1:d=!0;break;case 10:O=!0;case 2:break;case 11:O=!0;case 3:h=!0}const H=B.pixel_size>>3,F=B.width*B.height*H;let R,U,S,C,t,Y,n;if(d&&(R=A.subarray(j,j+=B.colormap_length*(B.colormap_size>>3))),O){let G,u,k;s=new Uint8Array(F);let B=0;const x=new Uint8Array(H);for(;j<F&&B<F;)if(G=A[j++],u=1+(127&G),128&G){for(k=0;k<H;++k)x[k]=A[j++];for(k=0;k<u;++k)s.set(x,B+k*H);B+=H*u}else{for(u*=H,k=0;k<u;++k)s[B+k]=A[j++];B+=u}}else s=A.subarray(j,j+=d?B.width*B.height:F);switch((48&B.flags)>>4){default:case 2:U=0,C=1,n=B.width,S=0,t=1,Y=B.height;break;case 0:U=0,C=1,n=B.width,S=B.height-1,t=-1,Y=-1;break;case 3:U=B.width-1,C=-1,n=-1,S=0,t=1,Y=B.height;break;case 1:U=B.width-1,C=-1,n=-1,S=B.height-1,t=-1,Y=-1}const Q="_getImageData"+(h?"Grey":"")+B.pixel_size+"bits",X=x[Q](B,R,s,S,t,Y,U,C,n);G.getEngine()._uploadDataToTextureDirectly(G,X)}const x={GetTGAHeader:k,UploadContent:B,_getImageData8bits:function(G,A,j,u,k,B,x,s,O){const d=j,h=A,H=G.width,F=G.height;let R,U,S,C=0;const t=new Uint8Array(H*F*4);for(S=u;S!==B;S+=k)for(U=x;U!==O;U+=s,C++)R=d[C],t[4*(U+H*S)+3]=255,t[4*(U+H*S)+2]=h[3*R+0],t[4*(U+H*S)+1]=h[3*R+1],t[4*(U+H*S)+0]=h[3*R+2];return t},_getImageData16bits:function(G,A,j,u,k,B,x,s,O){const d=j,h=G.width,H=G.height;let F,R,U,S=0;const C=new Uint8Array(h*H*4);for(U=u;U!==B;U+=k)for(R=x;R!==O;R+=s,S+=2){F=d[S+0]+(d[S+1]<<8);const G=255*((31744&F)>>10)/31|0,A=255*((992&F)>>5)/31|0,j=255*(31&F)/31|0;C[4*(R+h*U)+0]=G,C[4*(R+h*U)+1]=A,C[4*(R+h*U)+2]=j,C[4*(R+h*U)+3]=32768&F?0:255}return C},_getImageData24bits:function(G,A,j,u,k,B,x,s,O){const d=j,h=G.width,H=G.height;let F,R,U=0;const S=new Uint8Array(h*H*4);for(R=u;R!==B;R+=k)for(F=x;F!==O;F+=s,U+=3)S[4*(F+h*R)+3]=255,S[4*(F+h*R)+2]=d[U+0],S[4*(F+h*R)+1]=d[U+1],S[4*(F+h*R)+0]=d[U+2];return S},_getImageData32bits:function(G,A,j,u,k,B,x,s,O){const d=j,h=G.width,H=G.height;let F,R,U=0;const S=new Uint8Array(h*H*4);for(R=u;R!==B;R+=k)for(F=x;F!==O;F+=s,U+=4)S[4*(F+h*R)+2]=d[U+0],S[4*(F+h*R)+1]=d[U+1],S[4*(F+h*R)+0]=d[U+2],S[4*(F+h*R)+3]=d[U+3];return S},_getImageDataGrey8bits:function(G,A,j,u,k,B,x,s,O){const d=j,h=G.width,H=G.height;let F,R,U,S=0;const C=new Uint8Array(h*H*4);for(U=u;U!==B;U+=k)for(R=x;R!==O;R+=s,S++)F=d[S],C[4*(R+h*U)+0]=F,C[4*(R+h*U)+1]=F,C[4*(R+h*U)+2]=F,C[4*(R+h*U)+3]=255;return C},_getImageDataGrey16bits:function(G,A,j,u,k,B,x,s,O){const d=j,h=G.width,H=G.height;let F,R,U=0;const S=new Uint8Array(h*H*4);for(R=u;R!==B;R+=k)for(F=x;F!==O;F+=s,U+=2)S[4*(F+h*R)+0]=d[U+0],S[4*(F+h*R)+1]=d[U+0],S[4*(F+h*R)+2]=d[U+0],S[4*(F+h*R)+3]=d[U+1];return S}};class s{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(G,A,j){const u=new Uint8Array(G.buffer,G.byteOffset,G.byteLength),x=k(u);j(x.width,x.height,A.generateMipMaps,!1,(()=>{B(A,u)}))}}}}]);