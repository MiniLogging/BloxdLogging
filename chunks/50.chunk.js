"use strict";(self.vb3rpbgyozo=self.vb3rpbgyozo||[]).push([[50],{15214:(q,I,l)=>{l.r(I),l.d(I,{_TGATextureLoader:()=>a});var w=l(12591);function t(q){let I=0;return{id_length:q[I++],colormap_type:q[I++],image_type:q[I++],colormap_index:q[I++]|q[I++]<<8,colormap_length:q[I++]|q[I++]<<8,colormap_size:q[I++],origin:[q[I++]|q[I++]<<8,q[I++]|q[I++]<<8],width:q[I++]|q[I++]<<8,height:q[I++]|q[I++]<<8,pixel_size:q[I++],flags:q[I++]}}function O(q,I){if(I.length<19)return void w.b.Error("Unable to load TGA file - Not enough data to contain header");let l=18;const O=t(I);if(O.id_length+l>I.length)return void w.b.Error("Unable to load TGA file - Not enough data");l+=O.id_length;let a,F=!1,s=!1,Z=!1;switch(O.image_type){case 9:F=!0;case 1:s=!0;break;case 10:F=!0;case 2:break;case 11:F=!0;case 3:Z=!0}const r=O.pixel_size>>3,x=O.width*O.height*r;let o,d,T,V,U,B,v;if(s&&(o=I.subarray(l,l+=O.colormap_length*(O.colormap_size>>3))),F){let q,w,t;a=new Uint8Array(x);let O=0;const c=new Uint8Array(r);for(;l<x&&O<x;)if(q=I[l++],w=1+(127&q),128&q){for(t=0;t<r;++t)c[t]=I[l++];for(t=0;t<w;++t)a.set(c,O+t*r);O+=r*w}else{for(w*=r,t=0;t<w;++t)a[O+t]=I[l++];O+=w}}else a=I.subarray(l,l+=s?O.width*O.height:x);switch((48&O.flags)>>4){default:case 2:d=0,V=1,v=O.width,T=0,U=1,B=O.height;break;case 0:d=0,V=1,v=O.width,T=O.height-1,U=-1,B=-1;break;case 3:d=O.width-1,V=-1,v=-1,T=0,U=1,B=O.height;break;case 1:d=O.width-1,V=-1,v=-1,T=O.height-1,U=-1,B=-1}const k="_getImageData"+(Z?"Grey":"")+O.pixel_size+"bits",C=c[k](O,o,a,T,U,B,d,V,v);q.getEngine()._uploadDataToTextureDirectly(q,C)}const c={GetTGAHeader:t,UploadContent:O,_getImageData8bits:function(q,I,l,w,t,O,c,a,F){const s=l,Z=I,r=q.width,x=q.height;let o,d,T,V=0;const U=new Uint8Array(r*x*4);for(T=w;T!==O;T+=t)for(d=c;d!==F;d+=a,V++)o=s[V],U[4*(d+r*T)+3]=255,U[4*(d+r*T)+2]=Z[3*o+0],U[4*(d+r*T)+1]=Z[3*o+1],U[4*(d+r*T)+0]=Z[3*o+2];return U},_getImageData16bits:function(q,I,l,w,t,O,c,a,F){const s=l,Z=q.width,r=q.height;let x,o,d,T=0;const V=new Uint8Array(Z*r*4);for(d=w;d!==O;d+=t)for(o=c;o!==F;o+=a,T+=2){x=s[T+0]+(s[T+1]<<8);const q=255*((31744&x)>>10)/31|0,I=255*((992&x)>>5)/31|0,l=255*(31&x)/31|0;V[4*(o+Z*d)+0]=q,V[4*(o+Z*d)+1]=I,V[4*(o+Z*d)+2]=l,V[4*(o+Z*d)+3]=32768&x?0:255}return V},_getImageData24bits:function(q,I,l,w,t,O,c,a,F){const s=l,Z=q.width,r=q.height;let x,o,d=0;const T=new Uint8Array(Z*r*4);for(o=w;o!==O;o+=t)for(x=c;x!==F;x+=a,d+=3)T[4*(x+Z*o)+3]=255,T[4*(x+Z*o)+2]=s[d+0],T[4*(x+Z*o)+1]=s[d+1],T[4*(x+Z*o)+0]=s[d+2];return T},_getImageData32bits:function(q,I,l,w,t,O,c,a,F){const s=l,Z=q.width,r=q.height;let x,o,d=0;const T=new Uint8Array(Z*r*4);for(o=w;o!==O;o+=t)for(x=c;x!==F;x+=a,d+=4)T[4*(x+Z*o)+2]=s[d+0],T[4*(x+Z*o)+1]=s[d+1],T[4*(x+Z*o)+0]=s[d+2],T[4*(x+Z*o)+3]=s[d+3];return T},_getImageDataGrey8bits:function(q,I,l,w,t,O,c,a,F){const s=l,Z=q.width,r=q.height;let x,o,d,T=0;const V=new Uint8Array(Z*r*4);for(d=w;d!==O;d+=t)for(o=c;o!==F;o+=a,T++)x=s[T],V[4*(o+Z*d)+0]=x,V[4*(o+Z*d)+1]=x,V[4*(o+Z*d)+2]=x,V[4*(o+Z*d)+3]=255;return V},_getImageDataGrey16bits:function(q,I,l,w,t,O,c,a,F){const s=l,Z=q.width,r=q.height;let x,o,d=0;const T=new Uint8Array(Z*r*4);for(o=w;o!==O;o+=t)for(x=c;x!==F;x+=a,d+=2)T[4*(x+Z*o)+0]=s[d+0],T[4*(x+Z*o)+1]=s[d+0],T[4*(x+Z*o)+2]=s[d+0],T[4*(x+Z*o)+3]=s[d+1];return T}};class a{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(q,I,l){const w=new Uint8Array(q.buffer,q.byteOffset,q.byteLength),c=t(w);l(c.width,c.height,I.generateMipMaps,!1,(()=>{O(I,w)}))}}}}]);