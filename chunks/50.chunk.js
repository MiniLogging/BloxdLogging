"use strict";(self.g111kvdsqxc=self.g111kvdsqxc||[]).push([[50],{13743:(K,H,M)=>{M.r(H),M.d(H,{_TGATextureLoader:()=>h});var q=M(11112);function w(K){let H=0;return{id_length:K[H++],colormap_type:K[H++],image_type:K[H++],colormap_index:K[H++]|K[H++]<<8,colormap_length:K[H++]|K[H++]<<8,colormap_size:K[H++],origin:[K[H++]|K[H++]<<8,K[H++]|K[H++]<<8],width:K[H++]|K[H++]<<8,height:K[H++]|K[H++]<<8,pixel_size:K[H++],flags:K[H++]}}function u(K,H){if(H.length<19)return void q.e.Error("Unable to load TGA file - Not enough data to contain header");let M=18;const u=w(H);if(u.id_length+M>H.length)return void q.e.Error("Unable to load TGA file - Not enough data");M+=u.id_length;let h,W=!1,I=!1,f=!1;switch(u.image_type){case 9:W=!0;case 1:I=!0;break;case 10:W=!0;case 2:break;case 11:W=!0;case 3:f=!0}const z=u.pixel_size>>3,G=u.width*u.height*z;let a,v,O,L,S,B,C;if(I&&(a=H.subarray(M,M+=u.colormap_length*(u.colormap_size>>3))),W){let K,q,w;h=new Uint8Array(G);let u=0;const y=new Uint8Array(z);for(;M<G&&u<G;)if(K=H[M++],q=1+(127&K),128&K){for(w=0;w<z;++w)y[w]=H[M++];for(w=0;w<q;++w)h.set(y,u+w*z);u+=z*q}else{for(q*=z,w=0;w<q;++w)h[u+w]=H[M++];u+=q}}else h=H.subarray(M,M+=I?u.width*u.height:G);switch((48&u.flags)>>4){default:case 2:v=0,L=1,C=u.width,O=0,S=1,B=u.height;break;case 0:v=0,L=1,C=u.width,O=u.height-1,S=-1,B=-1;break;case 3:v=u.width-1,L=-1,C=-1,O=0,S=1,B=u.height;break;case 1:v=u.width-1,L=-1,C=-1,O=u.height-1,S=-1,B=-1}const i="_getImageData"+(f?"Grey":"")+u.pixel_size+"bits",Z=y[i](u,a,h,O,S,B,v,L,C);K.getEngine()._uploadDataToTextureDirectly(K,Z)}const y={GetTGAHeader:w,UploadContent:u,_getImageData8bits:function(K,H,M,q,w,u,y,h,W){const I=M,f=H,z=K.width,G=K.height;let a,v,O,L=0;const S=new Uint8Array(z*G*4);for(O=q;O!==u;O+=w)for(v=y;v!==W;v+=h,L++)a=I[L],S[4*(v+z*O)+3]=255,S[4*(v+z*O)+2]=f[3*a+0],S[4*(v+z*O)+1]=f[3*a+1],S[4*(v+z*O)+0]=f[3*a+2];return S},_getImageData16bits:function(K,H,M,q,w,u,y,h,W){const I=M,f=K.width,z=K.height;let G,a,v,O=0;const L=new Uint8Array(f*z*4);for(v=q;v!==u;v+=w)for(a=y;a!==W;a+=h,O+=2){G=I[O+0]+(I[O+1]<<8);const K=255*((31744&G)>>10)/31|0,H=255*((992&G)>>5)/31|0,M=255*(31&G)/31|0;L[4*(a+f*v)+0]=K,L[4*(a+f*v)+1]=H,L[4*(a+f*v)+2]=M,L[4*(a+f*v)+3]=32768&G?0:255}return L},_getImageData24bits:function(K,H,M,q,w,u,y,h,W){const I=M,f=K.width,z=K.height;let G,a,v=0;const O=new Uint8Array(f*z*4);for(a=q;a!==u;a+=w)for(G=y;G!==W;G+=h,v+=3)O[4*(G+f*a)+3]=255,O[4*(G+f*a)+2]=I[v+0],O[4*(G+f*a)+1]=I[v+1],O[4*(G+f*a)+0]=I[v+2];return O},_getImageData32bits:function(K,H,M,q,w,u,y,h,W){const I=M,f=K.width,z=K.height;let G,a,v=0;const O=new Uint8Array(f*z*4);for(a=q;a!==u;a+=w)for(G=y;G!==W;G+=h,v+=4)O[4*(G+f*a)+2]=I[v+0],O[4*(G+f*a)+1]=I[v+1],O[4*(G+f*a)+0]=I[v+2],O[4*(G+f*a)+3]=I[v+3];return O},_getImageDataGrey8bits:function(K,H,M,q,w,u,y,h,W){const I=M,f=K.width,z=K.height;let G,a,v,O=0;const L=new Uint8Array(f*z*4);for(v=q;v!==u;v+=w)for(a=y;a!==W;a+=h,O++)G=I[O],L[4*(a+f*v)+0]=G,L[4*(a+f*v)+1]=G,L[4*(a+f*v)+2]=G,L[4*(a+f*v)+3]=255;return L},_getImageDataGrey16bits:function(K,H,M,q,w,u,y,h,W){const I=M,f=K.width,z=K.height;let G,a,v=0;const O=new Uint8Array(f*z*4);for(a=q;a!==u;a+=w)for(G=y;G!==W;G+=h,v+=2)O[4*(G+f*a)+0]=I[v+0],O[4*(G+f*a)+1]=I[v+0],O[4*(G+f*a)+2]=I[v+0],O[4*(G+f*a)+3]=I[v+1];return O}};class h{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(K,H,M){const q=new Uint8Array(K.buffer,K.byteOffset,K.byteLength),y=w(q);M(y.width,y.height,H.generateMipMaps,!1,(()=>{u(H,q)}))}}}}]);