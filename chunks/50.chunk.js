"use strict";(self.zjjkhojdx1=self.zjjkhojdx1||[]).push([[50],{13673:(k,h,o)=>{o.r(h),o.d(h,{_TGATextureLoader:()=>J});var x=o(11098);function I(k){let h=0;return{id_length:k[h++],colormap_type:k[h++],image_type:k[h++],colormap_index:k[h++]|k[h++]<<8,colormap_length:k[h++]|k[h++]<<8,colormap_size:k[h++],origin:[k[h++]|k[h++]<<8,k[h++]|k[h++]<<8],width:k[h++]|k[h++]<<8,height:k[h++]|k[h++]<<8,pixel_size:k[h++],flags:k[h++]}}function q(k,h){if(h.length<19)return void x.c.Error("Unable to load TGA file - Not enough data to contain header");let o=18;const q=I(h);if(q.id_length+o>h.length)return void x.c.Error("Unable to load TGA file - Not enough data");o+=q.id_length;let J,G=!1,l=!1,A=!1;switch(q.image_type){case 9:G=!0;case 1:l=!0;break;case 10:G=!0;case 2:break;case 11:G=!0;case 3:A=!0}const K=q.pixel_size>>3,a=q.width*q.height*K;let N,X,c,W,f,M,T;if(l&&(N=h.subarray(o,o+=q.colormap_length*(q.colormap_size>>3))),G){let k,x,I;J=new Uint8Array(a);let q=0;const Y=new Uint8Array(K);for(;o<a&&q<a;)if(k=h[o++],x=1+(127&k),128&k){for(I=0;I<K;++I)Y[I]=h[o++];for(I=0;I<x;++I)J.set(Y,q+I*K);q+=K*x}else{for(x*=K,I=0;I<x;++I)J[q+I]=h[o++];q+=x}}else J=h.subarray(o,o+=l?q.width*q.height:a);switch((48&q.flags)>>4){default:case 2:X=0,W=1,T=q.width,c=0,f=1,M=q.height;break;case 0:X=0,W=1,T=q.width,c=q.height-1,f=-1,M=-1;break;case 3:X=q.width-1,W=-1,T=-1,c=0,f=1,M=q.height;break;case 1:X=q.width-1,W=-1,T=-1,c=q.height-1,f=-1,M=-1}const j="_getImageData"+(A?"Grey":"")+q.pixel_size+"bits",d=Y[j](q,N,J,c,f,M,X,W,T);k.getEngine()._uploadDataToTextureDirectly(k,d)}const Y={GetTGAHeader:I,UploadContent:q,_getImageData8bits:function(k,h,o,x,I,q,Y,J,G){const l=o,A=h,K=k.width,a=k.height;let N,X,c,W=0;const f=new Uint8Array(K*a*4);for(c=x;c!==q;c+=I)for(X=Y;X!==G;X+=J,W++)N=l[W],f[4*(X+K*c)+3]=255,f[4*(X+K*c)+2]=A[3*N+0],f[4*(X+K*c)+1]=A[3*N+1],f[4*(X+K*c)+0]=A[3*N+2];return f},_getImageData16bits:function(k,h,o,x,I,q,Y,J,G){const l=o,A=k.width,K=k.height;let a,N,X,c=0;const W=new Uint8Array(A*K*4);for(X=x;X!==q;X+=I)for(N=Y;N!==G;N+=J,c+=2){a=l[c+0]+(l[c+1]<<8);const k=255*((31744&a)>>10)/31|0,h=255*((992&a)>>5)/31|0,o=255*(31&a)/31|0;W[4*(N+A*X)+0]=k,W[4*(N+A*X)+1]=h,W[4*(N+A*X)+2]=o,W[4*(N+A*X)+3]=32768&a?0:255}return W},_getImageData24bits:function(k,h,o,x,I,q,Y,J,G){const l=o,A=k.width,K=k.height;let a,N,X=0;const c=new Uint8Array(A*K*4);for(N=x;N!==q;N+=I)for(a=Y;a!==G;a+=J,X+=3)c[4*(a+A*N)+3]=255,c[4*(a+A*N)+2]=l[X+0],c[4*(a+A*N)+1]=l[X+1],c[4*(a+A*N)+0]=l[X+2];return c},_getImageData32bits:function(k,h,o,x,I,q,Y,J,G){const l=o,A=k.width,K=k.height;let a,N,X=0;const c=new Uint8Array(A*K*4);for(N=x;N!==q;N+=I)for(a=Y;a!==G;a+=J,X+=4)c[4*(a+A*N)+2]=l[X+0],c[4*(a+A*N)+1]=l[X+1],c[4*(a+A*N)+0]=l[X+2],c[4*(a+A*N)+3]=l[X+3];return c},_getImageDataGrey8bits:function(k,h,o,x,I,q,Y,J,G){const l=o,A=k.width,K=k.height;let a,N,X,c=0;const W=new Uint8Array(A*K*4);for(X=x;X!==q;X+=I)for(N=Y;N!==G;N+=J,c++)a=l[c],W[4*(N+A*X)+0]=a,W[4*(N+A*X)+1]=a,W[4*(N+A*X)+2]=a,W[4*(N+A*X)+3]=255;return W},_getImageDataGrey16bits:function(k,h,o,x,I,q,Y,J,G){const l=o,A=k.width,K=k.height;let a,N,X=0;const c=new Uint8Array(A*K*4);for(N=x;N!==q;N+=I)for(a=Y;a!==G;a+=J,X+=2)c[4*(a+A*N)+0]=l[X+0],c[4*(a+A*N)+1]=l[X+0],c[4*(a+A*N)+2]=l[X+0],c[4*(a+A*N)+3]=l[X+1];return c}};class J{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(k,h,o){const x=new Uint8Array(k.buffer,k.byteOffset,k.byteLength),Y=I(x);o(Y.width,Y.height,h.generateMipMaps,!1,(()=>{q(h,x)}))}}}}]);