"use strict";(self.qcdfysujsyf=self.qcdfysujsyf||[]).push([[50],{15163:(K,A,T)=>{T.r(A),T.d(A,{_TGATextureLoader:()=>O});var G=T(12548);function B(K){let A=0;return{id_length:K[A++],colormap_type:K[A++],image_type:K[A++],colormap_index:K[A++]|K[A++]<<8,colormap_length:K[A++]|K[A++]<<8,colormap_size:K[A++],origin:[K[A++]|K[A++]<<8,K[A++]|K[A++]<<8],width:K[A++]|K[A++]<<8,height:K[A++]|K[A++]<<8,pixel_size:K[A++],flags:K[A++]}}function L(K,A){if(A.length<19)return void G.d.Error("Unable to load TGA file - Not enough data to contain header");let T=18;const L=B(A);if(L.id_length+T>A.length)return void G.d.Error("Unable to load TGA file - Not enough data");T+=L.id_length;let O,C=!1,Q=!1,Y=!1;switch(L.image_type){case 9:C=!0;case 1:Q=!0;break;case 10:C=!0;case 2:break;case 11:C=!0;case 3:Y=!0}const Z=L.pixel_size>>3,x=L.width*L.height*Z;let J,b,P,F,d,N,D;if(Q&&(J=A.subarray(T,T+=L.colormap_length*(L.colormap_size>>3))),C){let K,G,B;O=new Uint8Array(x);let L=0;const f=new Uint8Array(Z);for(;T<x&&L<x;)if(K=A[T++],G=1+(127&K),128&K){for(B=0;B<Z;++B)f[B]=A[T++];for(B=0;B<G;++B)O.set(f,L+B*Z);L+=Z*G}else{for(G*=Z,B=0;B<G;++B)O[L+B]=A[T++];L+=G}}else O=A.subarray(T,T+=Q?L.width*L.height:x);switch((48&L.flags)>>4){default:case 2:b=0,F=1,D=L.width,P=0,d=1,N=L.height;break;case 0:b=0,F=1,D=L.width,P=L.height-1,d=-1,N=-1;break;case 3:b=L.width-1,F=-1,D=-1,P=0,d=1,N=L.height;break;case 1:b=L.width-1,F=-1,D=-1,P=L.height-1,d=-1,N=-1}const mK="_getImageData"+(Y?"Grey":"")+L.pixel_size+"bits",U=f[mK](L,J,O,P,d,N,b,F,D);K.getEngine()._uploadDataToTextureDirectly(K,U)}const f={GetTGAHeader:B,UploadContent:L,_getImageData8bits:function(K,A,T,G,B,L,f,O,C){const Q=T,Y=A,Z=K.width,x=K.height;let J,b,P,F=0;const d=new Uint8Array(Z*x*4);for(P=G;P!==L;P+=B)for(b=f;b!==C;b+=O,F++)J=Q[F],d[4*(b+Z*P)+3]=255,d[4*(b+Z*P)+2]=Y[3*J+0],d[4*(b+Z*P)+1]=Y[3*J+1],d[4*(b+Z*P)+0]=Y[3*J+2];return d},_getImageData16bits:function(K,A,T,G,B,L,f,O,C){const Q=T,Y=K.width,Z=K.height;let x,J,b,P=0;const F=new Uint8Array(Y*Z*4);for(b=G;b!==L;b+=B)for(J=f;J!==C;J+=O,P+=2){x=Q[P+0]+(Q[P+1]<<8);const K=255*((31744&x)>>10)/31|0,A=255*((992&x)>>5)/31|0,T=255*(31&x)/31|0;F[4*(J+Y*b)+0]=K,F[4*(J+Y*b)+1]=A,F[4*(J+Y*b)+2]=T,F[4*(J+Y*b)+3]=32768&x?0:255}return F},_getImageData24bits:function(K,A,T,G,B,L,f,O,C){const Q=T,Y=K.width,Z=K.height;let x,J,b=0;const P=new Uint8Array(Y*Z*4);for(J=G;J!==L;J+=B)for(x=f;x!==C;x+=O,b+=3)P[4*(x+Y*J)+3]=255,P[4*(x+Y*J)+2]=Q[b+0],P[4*(x+Y*J)+1]=Q[b+1],P[4*(x+Y*J)+0]=Q[b+2];return P},_getImageData32bits:function(K,A,T,G,B,L,f,O,C){const Q=T,Y=K.width,Z=K.height;let x,J,b=0;const P=new Uint8Array(Y*Z*4);for(J=G;J!==L;J+=B)for(x=f;x!==C;x+=O,b+=4)P[4*(x+Y*J)+2]=Q[b+0],P[4*(x+Y*J)+1]=Q[b+1],P[4*(x+Y*J)+0]=Q[b+2],P[4*(x+Y*J)+3]=Q[b+3];return P},_getImageDataGrey8bits:function(K,A,T,G,B,L,f,O,C){const Q=T,Y=K.width,Z=K.height;let x,J,b,P=0;const F=new Uint8Array(Y*Z*4);for(b=G;b!==L;b+=B)for(J=f;J!==C;J+=O,P++)x=Q[P],F[4*(J+Y*b)+0]=x,F[4*(J+Y*b)+1]=x,F[4*(J+Y*b)+2]=x,F[4*(J+Y*b)+3]=255;return F},_getImageDataGrey16bits:function(K,A,T,G,B,L,f,O,C){const Q=T,Y=K.width,Z=K.height;let x,J,b=0;const P=new Uint8Array(Y*Z*4);for(J=G;J!==L;J+=B)for(x=f;x!==C;x+=O,b+=2)P[4*(x+Y*J)+0]=Q[b+0],P[4*(x+Y*J)+1]=Q[b+0],P[4*(x+Y*J)+2]=Q[b+0],P[4*(x+Y*J)+3]=Q[b+1];return P}};class O{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(K,A,T){const G=new Uint8Array(K.buffer,K.byteOffset,K.byteLength),f=B(G);T(f.width,f.height,A.generateMipMaps,!1,(()=>{L(A,G)}))}}}}]);