"use strict";(self.dwifukwnts=self.dwifukwnts||[]).push([[50],{14056:(U,X,b)=>{b.r(X),b.d(X,{_TGATextureLoader:()=>z});var F=b(11408);function E(U){let X=0;return{id_length:U[X++],colormap_type:U[X++],image_type:U[X++],colormap_index:U[X++]|U[X++]<<8,colormap_length:U[X++]|U[X++]<<8,colormap_size:U[X++],origin:[U[X++]|U[X++]<<8,U[X++]|U[X++]<<8],width:U[X++]|U[X++]<<8,height:U[X++]|U[X++]<<8,pixel_size:U[X++],flags:U[X++]}}function w(U,X){if(X.length<19)return void F.e.Error("Unable to load TGA file - Not enough data to contain header");let b=18;const w=E(X);if(w.id_length+b>X.length)return void F.e.Error("Unable to load TGA file - Not enough data");b+=w.id_length;let z,q=!1,p=!1,S=!1;switch(w.image_type){case 9:q=!0;case 1:p=!0;break;case 10:q=!0;case 2:break;case 11:q=!0;case 3:S=!0}const R=w.pixel_size>>3,n=w.width*w.height*R;let a,J,m,x,I,O,N;if(p&&(a=X.subarray(b,b+=w.colormap_length*(w.colormap_size>>3))),q){let U,F,E;z=new Uint8Array(n);let w=0;const Q=new Uint8Array(R);for(;b<n&&w<n;)if(U=X[b++],F=1+(127&U),128&U){for(E=0;E<R;++E)Q[E]=X[b++];for(E=0;E<F;++E)z.set(Q,w+E*R);w+=R*F}else{for(F*=R,E=0;E<F;++E)z[w+E]=X[b++];w+=F}}else z=X.subarray(b,b+=p?w.width*w.height:n);switch((48&w.flags)>>4){default:case 2:J=0,x=1,N=w.width,m=0,I=1,O=w.height;break;case 0:J=0,x=1,N=w.width,m=w.height-1,I=-1,O=-1;break;case 3:J=w.width-1,x=-1,N=-1,m=0,I=1,O=w.height;break;case 1:J=w.width-1,x=-1,N=-1,m=w.height-1,I=-1,O=-1}const u="_getImageData"+(S?"Grey":"")+w.pixel_size+"bits",i=Q[u](w,a,z,m,I,O,J,x,N);U.getEngine()._uploadDataToTextureDirectly(U,i)}const Q={GetTGAHeader:E,UploadContent:w,_getImageData8bits:function(U,X,b,F,E,w,Q,z,q){const p=b,S=X,R=U.width,n=U.height;let a,J,m,x=0;const I=new Uint8Array(R*n*4);for(m=F;m!==w;m+=E)for(J=Q;J!==q;J+=z,x++)a=p[x],I[4*(J+R*m)+3]=255,I[4*(J+R*m)+2]=S[3*a+0],I[4*(J+R*m)+1]=S[3*a+1],I[4*(J+R*m)+0]=S[3*a+2];return I},_getImageData16bits:function(U,X,b,F,E,w,Q,z,q){const p=b,S=U.width,R=U.height;let n,a,J,m=0;const x=new Uint8Array(S*R*4);for(J=F;J!==w;J+=E)for(a=Q;a!==q;a+=z,m+=2){n=p[m+0]+(p[m+1]<<8);const U=255*((31744&n)>>10)/31|0,X=255*((992&n)>>5)/31|0,b=255*(31&n)/31|0;x[4*(a+S*J)+0]=U,x[4*(a+S*J)+1]=X,x[4*(a+S*J)+2]=b,x[4*(a+S*J)+3]=32768&n?0:255}return x},_getImageData24bits:function(U,X,b,F,E,w,Q,z,q){const p=b,S=U.width,R=U.height;let n,a,J=0;const m=new Uint8Array(S*R*4);for(a=F;a!==w;a+=E)for(n=Q;n!==q;n+=z,J+=3)m[4*(n+S*a)+3]=255,m[4*(n+S*a)+2]=p[J+0],m[4*(n+S*a)+1]=p[J+1],m[4*(n+S*a)+0]=p[J+2];return m},_getImageData32bits:function(U,X,b,F,E,w,Q,z,q){const p=b,S=U.width,R=U.height;let n,a,J=0;const m=new Uint8Array(S*R*4);for(a=F;a!==w;a+=E)for(n=Q;n!==q;n+=z,J+=4)m[4*(n+S*a)+2]=p[J+0],m[4*(n+S*a)+1]=p[J+1],m[4*(n+S*a)+0]=p[J+2],m[4*(n+S*a)+3]=p[J+3];return m},_getImageDataGrey8bits:function(U,X,b,F,E,w,Q,z,q){const p=b,S=U.width,R=U.height;let n,a,J,m=0;const x=new Uint8Array(S*R*4);for(J=F;J!==w;J+=E)for(a=Q;a!==q;a+=z,m++)n=p[m],x[4*(a+S*J)+0]=n,x[4*(a+S*J)+1]=n,x[4*(a+S*J)+2]=n,x[4*(a+S*J)+3]=255;return x},_getImageDataGrey16bits:function(U,X,b,F,E,w,Q,z,q){const p=b,S=U.width,R=U.height;let n,a,J=0;const m=new Uint8Array(S*R*4);for(a=F;a!==w;a+=E)for(n=Q;n!==q;n+=z,J+=2)m[4*(n+S*a)+0]=p[J+0],m[4*(n+S*a)+1]=p[J+0],m[4*(n+S*a)+2]=p[J+0],m[4*(n+S*a)+3]=p[J+1];return m}};class z{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(U,X,b){const F=new Uint8Array(U.buffer,U.byteOffset,U.byteLength),Q=E(F);b(Q.width,Q.height,X.generateMipMaps,!1,(()=>{w(X,F)}))}}}}]);