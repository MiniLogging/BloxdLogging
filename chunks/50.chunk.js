"use strict";(self.pp3k1ov3ibi=self.pp3k1ov3ibi||[]).push([[50],{14863:(M,Z,P)=>{P.r(Z),P.d(Z,{_TGATextureLoader:()=>G});var x=P(12199);function c(M){let Z=0;return{id_length:M[Z++],colormap_type:M[Z++],image_type:M[Z++],colormap_index:M[Z++]|M[Z++]<<8,colormap_length:M[Z++]|M[Z++]<<8,colormap_size:M[Z++],origin:[M[Z++]|M[Z++]<<8,M[Z++]|M[Z++]<<8],width:M[Z++]|M[Z++]<<8,height:M[Z++]|M[Z++]<<8,pixel_size:M[Z++],flags:M[Z++]}}function w(M,Z){if(Z.length<19)return void x.d.Error("Unable to load TGA file - Not enough data to contain header");let P=18;const w=c(Z);if(w.id_length+P>Z.length)return void x.d.Error("Unable to load TGA file - Not enough data");P+=w.id_length;let G,mM=!1,K=!1,d=!1;switch(w.image_type){case 9:mM=!0;case 1:K=!0;break;case 10:mM=!0;case 2:break;case 11:mM=!0;case 3:d=!0}const O=w.pixel_size>>3,H=w.width*w.height*O;let j,B,U,n,L,u,N;if(K&&(j=Z.subarray(P,P+=w.colormap_length*(w.colormap_size>>3))),mM){let M,x,c;G=new Uint8Array(H);let w=0;const v=new Uint8Array(O);for(;P<H&&w<H;)if(M=Z[P++],x=1+(127&M),128&M){for(c=0;c<O;++c)v[c]=Z[P++];for(c=0;c<x;++c)G.set(v,w+c*O);w+=O*x}else{for(x*=O,c=0;c<x;++c)G[w+c]=Z[P++];w+=x}}else G=Z.subarray(P,P+=K?w.width*w.height:H);switch((48&w.flags)>>4){default:case 2:B=0,n=1,N=w.width,U=0,L=1,u=w.height;break;case 0:B=0,n=1,N=w.width,U=w.height-1,L=-1,u=-1;break;case 3:B=w.width-1,n=-1,N=-1,U=0,L=1,u=w.height;break;case 1:B=w.width-1,n=-1,N=-1,U=w.height-1,L=-1,u=-1}const J="_getImageData"+(d?"Grey":"")+w.pixel_size+"bits",t=v[J](w,j,G,U,L,u,B,n,N);M.getEngine()._uploadDataToTextureDirectly(M,t)}const v={GetTGAHeader:c,UploadContent:w,_getImageData8bits:function(M,Z,P,x,c,w,v,G,mM){const K=P,d=Z,O=M.width,H=M.height;let j,B,U,n=0;const L=new Uint8Array(O*H*4);for(U=x;U!==w;U+=c)for(B=v;B!==mM;B+=G,n++)j=K[n],L[4*(B+O*U)+3]=255,L[4*(B+O*U)+2]=d[3*j+0],L[4*(B+O*U)+1]=d[3*j+1],L[4*(B+O*U)+0]=d[3*j+2];return L},_getImageData16bits:function(M,Z,P,x,c,w,v,G,mM){const K=P,d=M.width,O=M.height;let H,j,B,U=0;const n=new Uint8Array(d*O*4);for(B=x;B!==w;B+=c)for(j=v;j!==mM;j+=G,U+=2){H=K[U+0]+(K[U+1]<<8);const M=255*((31744&H)>>10)/31|0,Z=255*((992&H)>>5)/31|0,P=255*(31&H)/31|0;n[4*(j+d*B)+0]=M,n[4*(j+d*B)+1]=Z,n[4*(j+d*B)+2]=P,n[4*(j+d*B)+3]=32768&H?0:255}return n},_getImageData24bits:function(M,Z,P,x,c,w,v,G,mM){const K=P,d=M.width,O=M.height;let H,j,B=0;const U=new Uint8Array(d*O*4);for(j=x;j!==w;j+=c)for(H=v;H!==mM;H+=G,B+=3)U[4*(H+d*j)+3]=255,U[4*(H+d*j)+2]=K[B+0],U[4*(H+d*j)+1]=K[B+1],U[4*(H+d*j)+0]=K[B+2];return U},_getImageData32bits:function(M,Z,P,x,c,w,v,G,mM){const K=P,d=M.width,O=M.height;let H,j,B=0;const U=new Uint8Array(d*O*4);for(j=x;j!==w;j+=c)for(H=v;H!==mM;H+=G,B+=4)U[4*(H+d*j)+2]=K[B+0],U[4*(H+d*j)+1]=K[B+1],U[4*(H+d*j)+0]=K[B+2],U[4*(H+d*j)+3]=K[B+3];return U},_getImageDataGrey8bits:function(M,Z,P,x,c,w,v,G,mM){const K=P,d=M.width,O=M.height;let H,j,B,U=0;const n=new Uint8Array(d*O*4);for(B=x;B!==w;B+=c)for(j=v;j!==mM;j+=G,U++)H=K[U],n[4*(j+d*B)+0]=H,n[4*(j+d*B)+1]=H,n[4*(j+d*B)+2]=H,n[4*(j+d*B)+3]=255;return n},_getImageDataGrey16bits:function(M,Z,P,x,c,w,v,G,mM){const K=P,d=M.width,O=M.height;let H,j,B=0;const U=new Uint8Array(d*O*4);for(j=x;j!==w;j+=c)for(H=v;H!==mM;H+=G,B+=2)U[4*(H+d*j)+0]=K[B+0],U[4*(H+d*j)+1]=K[B+0],U[4*(H+d*j)+2]=K[B+0],U[4*(H+d*j)+3]=K[B+1];return U}};class G{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(M,Z,P){const x=new Uint8Array(M.buffer,M.byteOffset,M.byteLength),v=c(x);P(v.width,v.height,Z.generateMipMaps,!1,(()=>{w(Z,x)}))}}}}]);