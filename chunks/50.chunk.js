"use strict";(self["1kjc9ee3uyt"]=self["1kjc9ee3uyt"]||[]).push([[50],{14035:(w,E,G)=>{G.r(E),G.d(E,{_TGATextureLoader:()=>x});var P=G(11518);function h(w){let E=0;return{id_length:w[E++],colormap_type:w[E++],image_type:w[E++],colormap_index:w[E++]|w[E++]<<8,colormap_length:w[E++]|w[E++]<<8,colormap_size:w[E++],origin:[w[E++]|w[E++]<<8,w[E++]|w[E++]<<8],width:w[E++]|w[E++]<<8,height:w[E++]|w[E++]<<8,pixel_size:w[E++],flags:w[E++]}}function B(w,E){if(E.length<19)return void P.e.Error("Unable to load TGA file - Not enough data to contain header");let G=18;const B=h(E);if(B.id_length+G>E.length)return void P.e.Error("Unable to load TGA file - Not enough data");G+=B.id_length;let x,U=!1,l=!1,i=!1;switch(B.image_type){case 9:U=!0;case 1:l=!0;break;case 10:U=!0;case 2:break;case 11:U=!0;case 3:i=!0}const O=B.pixel_size>>3,u=B.width*B.height*O;let V,a,Q,c,Z,J,d;if(l&&(V=E.subarray(G,G+=B.colormap_length*(B.colormap_size>>3))),U){let w,P,h;x=new Uint8Array(u);let B=0;const y=new Uint8Array(O);for(;G<u&&B<u;)if(w=E[G++],P=1+(127&w),128&w){for(h=0;h<O;++h)y[h]=E[G++];for(h=0;h<P;++h)x.set(y,B+h*O);B+=O*P}else{for(P*=O,h=0;h<P;++h)x[B+h]=E[G++];B+=P}}else x=E.subarray(G,G+=l?B.width*B.height:u);switch((48&B.flags)>>4){default:case 2:a=0,c=1,d=B.width,Q=0,Z=1,J=B.height;break;case 0:a=0,c=1,d=B.width,Q=B.height-1,Z=-1,J=-1;break;case 3:a=B.width-1,c=-1,d=-1,Q=0,Z=1,J=B.height;break;case 1:a=B.width-1,c=-1,d=-1,Q=B.height-1,Z=-1,J=-1}const K="_getImageData"+(i?"Grey":"")+B.pixel_size+"bits",t=y[K](B,V,x,Q,Z,J,a,c,d);w.getEngine()._uploadDataToTextureDirectly(w,t)}const y={GetTGAHeader:h,UploadContent:B,_getImageData8bits:function(w,E,G,P,h,B,y,x,U){const l=G,i=E,O=w.width,u=w.height;let V,a,Q,c=0;const Z=new Uint8Array(O*u*4);for(Q=P;Q!==B;Q+=h)for(a=y;a!==U;a+=x,c++)V=l[c],Z[4*(a+O*Q)+3]=255,Z[4*(a+O*Q)+2]=i[3*V+0],Z[4*(a+O*Q)+1]=i[3*V+1],Z[4*(a+O*Q)+0]=i[3*V+2];return Z},_getImageData16bits:function(w,E,G,P,h,B,y,x,U){const l=G,i=w.width,O=w.height;let u,V,a,Q=0;const c=new Uint8Array(i*O*4);for(a=P;a!==B;a+=h)for(V=y;V!==U;V+=x,Q+=2){u=l[Q+0]+(l[Q+1]<<8);const w=255*((31744&u)>>10)/31|0,E=255*((992&u)>>5)/31|0,G=255*(31&u)/31|0;c[4*(V+i*a)+0]=w,c[4*(V+i*a)+1]=E,c[4*(V+i*a)+2]=G,c[4*(V+i*a)+3]=32768&u?0:255}return c},_getImageData24bits:function(w,E,G,P,h,B,y,x,U){const l=G,i=w.width,O=w.height;let u,V,a=0;const Q=new Uint8Array(i*O*4);for(V=P;V!==B;V+=h)for(u=y;u!==U;u+=x,a+=3)Q[4*(u+i*V)+3]=255,Q[4*(u+i*V)+2]=l[a+0],Q[4*(u+i*V)+1]=l[a+1],Q[4*(u+i*V)+0]=l[a+2];return Q},_getImageData32bits:function(w,E,G,P,h,B,y,x,U){const l=G,i=w.width,O=w.height;let u,V,a=0;const Q=new Uint8Array(i*O*4);for(V=P;V!==B;V+=h)for(u=y;u!==U;u+=x,a+=4)Q[4*(u+i*V)+2]=l[a+0],Q[4*(u+i*V)+1]=l[a+1],Q[4*(u+i*V)+0]=l[a+2],Q[4*(u+i*V)+3]=l[a+3];return Q},_getImageDataGrey8bits:function(w,E,G,P,h,B,y,x,U){const l=G,i=w.width,O=w.height;let u,V,a,Q=0;const c=new Uint8Array(i*O*4);for(a=P;a!==B;a+=h)for(V=y;V!==U;V+=x,Q++)u=l[Q],c[4*(V+i*a)+0]=u,c[4*(V+i*a)+1]=u,c[4*(V+i*a)+2]=u,c[4*(V+i*a)+3]=255;return c},_getImageDataGrey16bits:function(w,E,G,P,h,B,y,x,U){const l=G,i=w.width,O=w.height;let u,V,a=0;const Q=new Uint8Array(i*O*4);for(V=P;V!==B;V+=h)for(u=y;u!==U;u+=x,a+=2)Q[4*(u+i*V)+0]=l[a+0],Q[4*(u+i*V)+1]=l[a+0],Q[4*(u+i*V)+2]=l[a+0],Q[4*(u+i*V)+3]=l[a+1];return Q}};class x{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(w,E,G){const P=new Uint8Array(w.buffer,w.byteOffset,w.byteLength),y=h(P);G(y.width,y.height,E.generateMipMaps,!1,(()=>{B(E,P)}))}}}}]);