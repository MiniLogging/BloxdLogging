"use strict";(self.irtrrknfyfo=self.irtrrknfyfo||[]).push([[50],{13828:(B,E,v)=>{v.r(E),v.d(E,{_TGATextureLoader:()=>S});var z=v(11213);function o(B){let E=0;return{id_length:B[E++],colormap_type:B[E++],image_type:B[E++],colormap_index:B[E++]|B[E++]<<8,colormap_length:B[E++]|B[E++]<<8,colormap_size:B[E++],origin:[B[E++]|B[E++]<<8,B[E++]|B[E++]<<8],width:B[E++]|B[E++]<<8,height:B[E++]|B[E++]<<8,pixel_size:B[E++],flags:B[E++]}}function q(B,E){if(E.length<19)return void z.c.Error("Unable to load TGA file - Not enough data to contain header");let v=18;const q=o(E);if(q.id_length+v>E.length)return void z.c.Error("Unable to load TGA file - Not enough data");v+=q.id_length;let S,x=!1,D=!1,h=!1;switch(q.image_type){case 9:x=!0;case 1:D=!0;break;case 10:x=!0;case 2:break;case 11:x=!0;case 3:h=!0}const y=q.pixel_size>>3,Q=q.width*q.height*y;let P,G,Y,a,m,g,V;if(D&&(P=E.subarray(v,v+=q.colormap_length*(q.colormap_size>>3))),x){let B,z,o;S=new Uint8Array(Q);let q=0;const c=new Uint8Array(y);for(;v<Q&&q<Q;)if(B=E[v++],z=1+(127&B),128&B){for(o=0;o<y;++o)c[o]=E[v++];for(o=0;o<z;++o)S.set(c,q+o*y);q+=y*z}else{for(z*=y,o=0;o<z;++o)S[q+o]=E[v++];q+=z}}else S=E.subarray(v,v+=D?q.width*q.height:Q);switch((48&q.flags)>>4){default:case 2:G=0,a=1,V=q.width,Y=0,m=1,g=q.height;break;case 0:G=0,a=1,V=q.width,Y=q.height-1,m=-1,g=-1;break;case 3:G=q.width-1,a=-1,V=-1,Y=0,m=1,g=q.height;break;case 1:G=q.width-1,a=-1,V=-1,Y=q.height-1,m=-1,g=-1}const T="_getImageData"+(h?"Grey":"")+q.pixel_size+"bits",N=c[T](q,P,S,Y,m,g,G,a,V);B.getEngine()._uploadDataToTextureDirectly(B,N)}const c={GetTGAHeader:o,UploadContent:q,_getImageData8bits:function(B,E,v,z,o,q,c,S,x){const D=v,h=E,y=B.width,Q=B.height;let P,G,Y,a=0;const m=new Uint8Array(y*Q*4);for(Y=z;Y!==q;Y+=o)for(G=c;G!==x;G+=S,a++)P=D[a],m[4*(G+y*Y)+3]=255,m[4*(G+y*Y)+2]=h[3*P+0],m[4*(G+y*Y)+1]=h[3*P+1],m[4*(G+y*Y)+0]=h[3*P+2];return m},_getImageData16bits:function(B,E,v,z,o,q,c,S,x){const D=v,h=B.width,y=B.height;let Q,P,G,Y=0;const a=new Uint8Array(h*y*4);for(G=z;G!==q;G+=o)for(P=c;P!==x;P+=S,Y+=2){Q=D[Y+0]+(D[Y+1]<<8);const B=255*((31744&Q)>>10)/31|0,E=255*((992&Q)>>5)/31|0,v=255*(31&Q)/31|0;a[4*(P+h*G)+0]=B,a[4*(P+h*G)+1]=E,a[4*(P+h*G)+2]=v,a[4*(P+h*G)+3]=32768&Q?0:255}return a},_getImageData24bits:function(B,E,v,z,o,q,c,S,x){const D=v,h=B.width,y=B.height;let Q,P,G=0;const Y=new Uint8Array(h*y*4);for(P=z;P!==q;P+=o)for(Q=c;Q!==x;Q+=S,G+=3)Y[4*(Q+h*P)+3]=255,Y[4*(Q+h*P)+2]=D[G+0],Y[4*(Q+h*P)+1]=D[G+1],Y[4*(Q+h*P)+0]=D[G+2];return Y},_getImageData32bits:function(B,E,v,z,o,q,c,S,x){const D=v,h=B.width,y=B.height;let Q,P,G=0;const Y=new Uint8Array(h*y*4);for(P=z;P!==q;P+=o)for(Q=c;Q!==x;Q+=S,G+=4)Y[4*(Q+h*P)+2]=D[G+0],Y[4*(Q+h*P)+1]=D[G+1],Y[4*(Q+h*P)+0]=D[G+2],Y[4*(Q+h*P)+3]=D[G+3];return Y},_getImageDataGrey8bits:function(B,E,v,z,o,q,c,S,x){const D=v,h=B.width,y=B.height;let Q,P,G,Y=0;const a=new Uint8Array(h*y*4);for(G=z;G!==q;G+=o)for(P=c;P!==x;P+=S,Y++)Q=D[Y],a[4*(P+h*G)+0]=Q,a[4*(P+h*G)+1]=Q,a[4*(P+h*G)+2]=Q,a[4*(P+h*G)+3]=255;return a},_getImageDataGrey16bits:function(B,E,v,z,o,q,c,S,x){const D=v,h=B.width,y=B.height;let Q,P,G=0;const Y=new Uint8Array(h*y*4);for(P=z;P!==q;P+=o)for(Q=c;Q!==x;Q+=S,G+=2)Y[4*(Q+h*P)+0]=D[G+0],Y[4*(Q+h*P)+1]=D[G+0],Y[4*(Q+h*P)+2]=D[G+0],Y[4*(Q+h*P)+3]=D[G+1];return Y}};class S{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(B,E,v){const z=new Uint8Array(B.buffer,B.byteOffset,B.byteLength),c=o(z);v(c.width,c.height,E.generateMipMaps,!1,(()=>{q(E,z)}))}}}}]);