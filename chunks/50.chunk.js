"use strict";(self.ex92n20nlz8=self.ex92n20nlz8||[]).push([[50],{15024:(I,g,b)=>{b.r(g),b.d(g,{_TGATextureLoader:()=>J});var e=b(12420);function c(I){let g=0;return{id_length:I[g++],colormap_type:I[g++],image_type:I[g++],colormap_index:I[g++]|I[g++]<<8,colormap_length:I[g++]|I[g++]<<8,colormap_size:I[g++],origin:[I[g++]|I[g++]<<8,I[g++]|I[g++]<<8],width:I[g++]|I[g++]<<8,height:I[g++]|I[g++]<<8,pixel_size:I[g++],flags:I[g++]}}function z(I,g){if(g.length<19)return void e.b.Error("Unable to load TGA file - Not enough data to contain header");let b=18;const z=c(g);if(z.id_length+b>g.length)return void e.b.Error("Unable to load TGA file - Not enough data");b+=z.id_length;let J,o=!1,n=!1,G=!1;switch(z.image_type){case 9:o=!0;case 1:n=!0;break;case 10:o=!0;case 2:break;case 11:o=!0;case 3:G=!0}const D=z.pixel_size>>3,p=z.width*z.height*D;let x,Z,k,S,f,V,a;if(n&&(x=g.subarray(b,b+=z.colormap_length*(z.colormap_size>>3))),o){let I,e,c;J=new Uint8Array(p);let z=0;const M=new Uint8Array(D);for(;b<p&&z<p;)if(I=g[b++],e=1+(127&I),128&I){for(c=0;c<D;++c)M[c]=g[b++];for(c=0;c<e;++c)J.set(M,z+c*D);z+=D*e}else{for(e*=D,c=0;c<e;++c)J[z+c]=g[b++];z+=e}}else J=g.subarray(b,b+=n?z.width*z.height:p);switch((48&z.flags)>>4){default:case 2:Z=0,S=1,a=z.width,k=0,f=1,V=z.height;break;case 0:Z=0,S=1,a=z.width,k=z.height-1,f=-1,V=-1;break;case 3:Z=z.width-1,S=-1,a=-1,k=0,f=1,V=z.height;break;case 1:Z=z.width-1,S=-1,a=-1,k=z.height-1,f=-1,V=-1}const v="_getImageData"+(G?"Grey":"")+z.pixel_size+"bits",X=M[v](z,x,J,k,f,V,Z,S,a);I.getEngine()._uploadDataToTextureDirectly(I,X)}const M={GetTGAHeader:c,UploadContent:z,_getImageData8bits:function(I,g,b,e,c,z,M,J,o){const n=b,G=g,D=I.width,p=I.height;let x,Z,k,S=0;const f=new Uint8Array(D*p*4);for(k=e;k!==z;k+=c)for(Z=M;Z!==o;Z+=J,S++)x=n[S],f[4*(Z+D*k)+3]=255,f[4*(Z+D*k)+2]=G[3*x+0],f[4*(Z+D*k)+1]=G[3*x+1],f[4*(Z+D*k)+0]=G[3*x+2];return f},_getImageData16bits:function(I,g,b,e,c,z,M,J,o){const n=b,G=I.width,D=I.height;let p,x,Z,k=0;const S=new Uint8Array(G*D*4);for(Z=e;Z!==z;Z+=c)for(x=M;x!==o;x+=J,k+=2){p=n[k+0]+(n[k+1]<<8);const I=255*((31744&p)>>10)/31|0,g=255*((992&p)>>5)/31|0,b=255*(31&p)/31|0;S[4*(x+G*Z)+0]=I,S[4*(x+G*Z)+1]=g,S[4*(x+G*Z)+2]=b,S[4*(x+G*Z)+3]=32768&p?0:255}return S},_getImageData24bits:function(I,g,b,e,c,z,M,J,o){const n=b,G=I.width,D=I.height;let p,x,Z=0;const k=new Uint8Array(G*D*4);for(x=e;x!==z;x+=c)for(p=M;p!==o;p+=J,Z+=3)k[4*(p+G*x)+3]=255,k[4*(p+G*x)+2]=n[Z+0],k[4*(p+G*x)+1]=n[Z+1],k[4*(p+G*x)+0]=n[Z+2];return k},_getImageData32bits:function(I,g,b,e,c,z,M,J,o){const n=b,G=I.width,D=I.height;let p,x,Z=0;const k=new Uint8Array(G*D*4);for(x=e;x!==z;x+=c)for(p=M;p!==o;p+=J,Z+=4)k[4*(p+G*x)+2]=n[Z+0],k[4*(p+G*x)+1]=n[Z+1],k[4*(p+G*x)+0]=n[Z+2],k[4*(p+G*x)+3]=n[Z+3];return k},_getImageDataGrey8bits:function(I,g,b,e,c,z,M,J,o){const n=b,G=I.width,D=I.height;let p,x,Z,k=0;const S=new Uint8Array(G*D*4);for(Z=e;Z!==z;Z+=c)for(x=M;x!==o;x+=J,k++)p=n[k],S[4*(x+G*Z)+0]=p,S[4*(x+G*Z)+1]=p,S[4*(x+G*Z)+2]=p,S[4*(x+G*Z)+3]=255;return S},_getImageDataGrey16bits:function(I,g,b,e,c,z,M,J,o){const n=b,G=I.width,D=I.height;let p,x,Z=0;const k=new Uint8Array(G*D*4);for(x=e;x!==z;x+=c)for(p=M;p!==o;p+=J,Z+=2)k[4*(p+G*x)+0]=n[Z+0],k[4*(p+G*x)+1]=n[Z+0],k[4*(p+G*x)+2]=n[Z+0],k[4*(p+G*x)+3]=n[Z+1];return k}};class J{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(I,g,b){const e=new Uint8Array(I.buffer,I.byteOffset,I.byteLength),M=c(e);b(M.width,M.height,g.generateMipMaps,!1,(()=>{z(g,e)}))}}}}]);