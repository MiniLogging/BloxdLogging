"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[50],{13686:(P,f,Y)=>{Y.r(f),Y.d(f,{_TGATextureLoader:()=>o});var C=Y(11025);function q(P){let f=0;return{id_length:P[f++],colormap_type:P[f++],image_type:P[f++],colormap_index:P[f++]|P[f++]<<8,colormap_length:P[f++]|P[f++]<<8,colormap_size:P[f++],origin:[P[f++]|P[f++]<<8,P[f++]|P[f++]<<8],width:P[f++]|P[f++]<<8,height:P[f++]|P[f++]<<8,pixel_size:P[f++],flags:P[f++]}}function m(P,f){if(f.length<19)return void C.e.Error("Unable to load TGA file - Not enough data to contain header");let Y=18;const m=q(f);if(m.id_length+Y>f.length)return void C.e.Error("Unable to load TGA file - Not enough data");Y+=m.id_length;let o,w=!1,d=!1,R=!1;switch(m.image_type){case 9:w=!0;case 1:d=!0;break;case 10:w=!0;case 2:break;case 11:w=!0;case 3:R=!0}const y=m.pixel_size>>3,r=m.width*m.height*y;let i,u,g,S,K,M,V;if(d&&(i=f.subarray(Y,Y+=m.colormap_length*(m.colormap_size>>3))),w){let P,C,q;o=new Uint8Array(r);let m=0;const L=new Uint8Array(y);for(;Y<r&&m<r;)if(P=f[Y++],C=1+(127&P),128&P){for(q=0;q<y;++q)L[q]=f[Y++];for(q=0;q<C;++q)o.set(L,m+q*y);m+=y*C}else{for(C*=y,q=0;q<C;++q)o[m+q]=f[Y++];m+=C}}else o=f.subarray(Y,Y+=d?m.width*m.height:r);switch((48&m.flags)>>4){default:case 2:u=0,S=1,V=m.width,g=0,K=1,M=m.height;break;case 0:u=0,S=1,V=m.width,g=m.height-1,K=-1,M=-1;break;case 3:u=m.width-1,S=-1,V=-1,g=0,K=1,M=m.height;break;case 1:u=m.width-1,S=-1,V=-1,g=m.height-1,K=-1,M=-1}const O="_getImageData"+(R?"Grey":"")+m.pixel_size+"bits",n=L[O](m,i,o,g,K,M,u,S,V);P.getEngine()._uploadDataToTextureDirectly(P,n)}const L={GetTGAHeader:q,UploadContent:m,_getImageData8bits:function(P,f,Y,C,q,m,L,o,w){const d=Y,R=f,y=P.width,r=P.height;let i,u,g,S=0;const K=new Uint8Array(y*r*4);for(g=C;g!==m;g+=q)for(u=L;u!==w;u+=o,S++)i=d[S],K[4*(u+y*g)+3]=255,K[4*(u+y*g)+2]=R[3*i+0],K[4*(u+y*g)+1]=R[3*i+1],K[4*(u+y*g)+0]=R[3*i+2];return K},_getImageData16bits:function(P,f,Y,C,q,m,L,o,w){const d=Y,R=P.width,y=P.height;let r,i,u,g=0;const S=new Uint8Array(R*y*4);for(u=C;u!==m;u+=q)for(i=L;i!==w;i+=o,g+=2){r=d[g+0]+(d[g+1]<<8);const P=255*((31744&r)>>10)/31|0,f=255*((992&r)>>5)/31|0,Y=255*(31&r)/31|0;S[4*(i+R*u)+0]=P,S[4*(i+R*u)+1]=f,S[4*(i+R*u)+2]=Y,S[4*(i+R*u)+3]=32768&r?0:255}return S},_getImageData24bits:function(P,f,Y,C,q,m,L,o,w){const d=Y,R=P.width,y=P.height;let r,i,u=0;const g=new Uint8Array(R*y*4);for(i=C;i!==m;i+=q)for(r=L;r!==w;r+=o,u+=3)g[4*(r+R*i)+3]=255,g[4*(r+R*i)+2]=d[u+0],g[4*(r+R*i)+1]=d[u+1],g[4*(r+R*i)+0]=d[u+2];return g},_getImageData32bits:function(P,f,Y,C,q,m,L,o,w){const d=Y,R=P.width,y=P.height;let r,i,u=0;const g=new Uint8Array(R*y*4);for(i=C;i!==m;i+=q)for(r=L;r!==w;r+=o,u+=4)g[4*(r+R*i)+2]=d[u+0],g[4*(r+R*i)+1]=d[u+1],g[4*(r+R*i)+0]=d[u+2],g[4*(r+R*i)+3]=d[u+3];return g},_getImageDataGrey8bits:function(P,f,Y,C,q,m,L,o,w){const d=Y,R=P.width,y=P.height;let r,i,u,g=0;const S=new Uint8Array(R*y*4);for(u=C;u!==m;u+=q)for(i=L;i!==w;i+=o,g++)r=d[g],S[4*(i+R*u)+0]=r,S[4*(i+R*u)+1]=r,S[4*(i+R*u)+2]=r,S[4*(i+R*u)+3]=255;return S},_getImageDataGrey16bits:function(P,f,Y,C,q,m,L,o,w){const d=Y,R=P.width,y=P.height;let r,i,u=0;const g=new Uint8Array(R*y*4);for(i=C;i!==m;i+=q)for(r=L;r!==w;r+=o,u+=2)g[4*(r+R*i)+0]=d[u+0],g[4*(r+R*i)+1]=d[u+0],g[4*(r+R*i)+2]=d[u+0],g[4*(r+R*i)+3]=d[u+1];return g}};class o{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(P,f,Y){const C=new Uint8Array(P.buffer,P.byteOffset,P.byteLength),L=q(C);Y(L.width,L.height,f.generateMipMaps,!1,(()=>{m(f,C)}))}}}}]);