"use strict";(self.gpkvekif0vo=self.gpkvekif0vo||[]).push([[50],{14875:(a,O,i)=>{i.r(O),i.d(O,{_TGATextureLoader:()=>Q});var H=i(12209);function b(a){let O=0;return{id_length:a[O++],colormap_type:a[O++],image_type:a[O++],colormap_index:a[O++]|a[O++]<<8,colormap_length:a[O++]|a[O++]<<8,colormap_size:a[O++],origin:[a[O++]|a[O++]<<8,a[O++]|a[O++]<<8],width:a[O++]|a[O++]<<8,height:a[O++]|a[O++]<<8,pixel_size:a[O++],flags:a[O++]}}function G(a,O){if(O.length<19)return void H.c.Error("Unable to load TGA file - Not enough data to contain header");let i=18;const G=b(O);if(G.id_length+i>O.length)return void H.c.Error("Unable to load TGA file - Not enough data");i+=G.id_length;let Q,k=!1,I=!1,P=!1;switch(G.image_type){case 9:k=!0;case 1:I=!0;break;case 10:k=!0;case 2:break;case 11:k=!0;case 3:P=!0}const e=G.pixel_size>>3,h=G.width*G.height*e;let j,Z,F,r,J,ma,M;if(I&&(j=O.subarray(i,i+=G.colormap_length*(G.colormap_size>>3))),k){let a,H,b;Q=new Uint8Array(h);let G=0;const q=new Uint8Array(e);for(;i<h&&G<h;)if(a=O[i++],H=1+(127&a),128&a){for(b=0;b<e;++b)q[b]=O[i++];for(b=0;b<H;++b)Q.set(q,G+b*e);G+=e*H}else{for(H*=e,b=0;b<H;++b)Q[G+b]=O[i++];G+=H}}else Q=O.subarray(i,i+=I?G.width*G.height:h);switch((48&G.flags)>>4){default:case 2:Z=0,r=1,M=G.width,F=0,J=1,ma=G.height;break;case 0:Z=0,r=1,M=G.width,F=G.height-1,J=-1,ma=-1;break;case 3:Z=G.width-1,r=-1,M=-1,F=0,J=1,ma=G.height;break;case 1:Z=G.width-1,r=-1,M=-1,F=G.height-1,J=-1,ma=-1}const C="_getImageData"+(P?"Grey":"")+G.pixel_size+"bits",n=q[C](G,j,Q,F,J,ma,Z,r,M);a.getEngine()._uploadDataToTextureDirectly(a,n)}const q={GetTGAHeader:b,UploadContent:G,_getImageData8bits:function(a,O,i,H,b,G,q,Q,k){const I=i,P=O,e=a.width,h=a.height;let j,Z,F,r=0;const J=new Uint8Array(e*h*4);for(F=H;F!==G;F+=b)for(Z=q;Z!==k;Z+=Q,r++)j=I[r],J[4*(Z+e*F)+3]=255,J[4*(Z+e*F)+2]=P[3*j+0],J[4*(Z+e*F)+1]=P[3*j+1],J[4*(Z+e*F)+0]=P[3*j+2];return J},_getImageData16bits:function(a,O,i,H,b,G,q,Q,k){const I=i,P=a.width,e=a.height;let h,j,Z,F=0;const r=new Uint8Array(P*e*4);for(Z=H;Z!==G;Z+=b)for(j=q;j!==k;j+=Q,F+=2){h=I[F+0]+(I[F+1]<<8);const a=255*((31744&h)>>10)/31|0,O=255*((992&h)>>5)/31|0,i=255*(31&h)/31|0;r[4*(j+P*Z)+0]=a,r[4*(j+P*Z)+1]=O,r[4*(j+P*Z)+2]=i,r[4*(j+P*Z)+3]=32768&h?0:255}return r},_getImageData24bits:function(a,O,i,H,b,G,q,Q,k){const I=i,P=a.width,e=a.height;let h,j,Z=0;const F=new Uint8Array(P*e*4);for(j=H;j!==G;j+=b)for(h=q;h!==k;h+=Q,Z+=3)F[4*(h+P*j)+3]=255,F[4*(h+P*j)+2]=I[Z+0],F[4*(h+P*j)+1]=I[Z+1],F[4*(h+P*j)+0]=I[Z+2];return F},_getImageData32bits:function(a,O,i,H,b,G,q,Q,k){const I=i,P=a.width,e=a.height;let h,j,Z=0;const F=new Uint8Array(P*e*4);for(j=H;j!==G;j+=b)for(h=q;h!==k;h+=Q,Z+=4)F[4*(h+P*j)+2]=I[Z+0],F[4*(h+P*j)+1]=I[Z+1],F[4*(h+P*j)+0]=I[Z+2],F[4*(h+P*j)+3]=I[Z+3];return F},_getImageDataGrey8bits:function(a,O,i,H,b,G,q,Q,k){const I=i,P=a.width,e=a.height;let h,j,Z,F=0;const r=new Uint8Array(P*e*4);for(Z=H;Z!==G;Z+=b)for(j=q;j!==k;j+=Q,F++)h=I[F],r[4*(j+P*Z)+0]=h,r[4*(j+P*Z)+1]=h,r[4*(j+P*Z)+2]=h,r[4*(j+P*Z)+3]=255;return r},_getImageDataGrey16bits:function(a,O,i,H,b,G,q,Q,k){const I=i,P=a.width,e=a.height;let h,j,Z=0;const F=new Uint8Array(P*e*4);for(j=H;j!==G;j+=b)for(h=q;h!==k;h+=Q,Z+=2)F[4*(h+P*j)+0]=I[Z+0],F[4*(h+P*j)+1]=I[Z+0],F[4*(h+P*j)+2]=I[Z+0],F[4*(h+P*j)+3]=I[Z+1];return F}};class Q{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(a,O,i){const H=new Uint8Array(a.buffer,a.byteOffset,a.byteLength),q=b(H);i(q.width,q.height,O.generateMipMaps,!1,(()=>{G(O,H)}))}}}}]);