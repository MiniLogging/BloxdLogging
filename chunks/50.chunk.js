"use strict";(self["9x1utqq1axc"]=self["9x1utqq1axc"]||[]).push([[50],{14789:(y,c,A)=>{A.r(c),A.d(c,{_TGATextureLoader:()=>W});var l=A(12161);function w(y){let c=0;return{id_length:y[c++],colormap_type:y[c++],image_type:y[c++],colormap_index:y[c++]|y[c++]<<8,colormap_length:y[c++]|y[c++]<<8,colormap_size:y[c++],origin:[y[c++]|y[c++]<<8,y[c++]|y[c++]<<8],width:y[c++]|y[c++]<<8,height:y[c++]|y[c++]<<8,pixel_size:y[c++],flags:y[c++]}}function N(y,c){if(c.length<19)return void l.c.Error("Unable to load TGA file - Not enough data to contain header");let A=18;const N=w(c);if(N.id_length+A>c.length)return void l.c.Error("Unable to load TGA file - Not enough data");A+=N.id_length;let W,h=!1,I=!1,q=!1;switch(N.image_type){case 9:h=!0;case 1:I=!0;break;case 10:h=!0;case 2:break;case 11:h=!0;case 3:q=!0}const o=N.pixel_size>>3,O=N.width*N.height*o;let L,i,H,P,D,t,s;if(I&&(L=c.subarray(A,A+=N.colormap_length*(N.colormap_size>>3))),h){let y,l,w;W=new Uint8Array(O);let N=0;const p=new Uint8Array(o);for(;A<O&&N<O;)if(y=c[A++],l=1+(127&y),128&y){for(w=0;w<o;++w)p[w]=c[A++];for(w=0;w<l;++w)W.set(p,N+w*o);N+=o*l}else{for(l*=o,w=0;w<l;++w)W[N+w]=c[A++];N+=l}}else W=c.subarray(A,A+=I?N.width*N.height:O);switch((48&N.flags)>>4){default:case 2:i=0,P=1,s=N.width,H=0,D=1,t=N.height;break;case 0:i=0,P=1,s=N.width,H=N.height-1,D=-1,t=-1;break;case 3:i=N.width-1,P=-1,s=-1,H=0,D=1,t=N.height;break;case 1:i=N.width-1,P=-1,s=-1,H=N.height-1,D=-1,t=-1}const B="_getImageData"+(q?"Grey":"")+N.pixel_size+"bits",X=p[B](N,L,W,H,D,t,i,P,s);y.getEngine()._uploadDataToTextureDirectly(y,X)}const p={GetTGAHeader:w,UploadContent:N,_getImageData8bits:function(y,c,A,l,w,N,p,W,h){const I=A,q=c,o=y.width,O=y.height;let L,i,H,P=0;const D=new Uint8Array(o*O*4);for(H=l;H!==N;H+=w)for(i=p;i!==h;i+=W,P++)L=I[P],D[4*(i+o*H)+3]=255,D[4*(i+o*H)+2]=q[3*L+0],D[4*(i+o*H)+1]=q[3*L+1],D[4*(i+o*H)+0]=q[3*L+2];return D},_getImageData16bits:function(y,c,A,l,w,N,p,W,h){const I=A,q=y.width,o=y.height;let O,L,i,H=0;const P=new Uint8Array(q*o*4);for(i=l;i!==N;i+=w)for(L=p;L!==h;L+=W,H+=2){O=I[H+0]+(I[H+1]<<8);const y=255*((31744&O)>>10)/31|0,c=255*((992&O)>>5)/31|0,A=255*(31&O)/31|0;P[4*(L+q*i)+0]=y,P[4*(L+q*i)+1]=c,P[4*(L+q*i)+2]=A,P[4*(L+q*i)+3]=32768&O?0:255}return P},_getImageData24bits:function(y,c,A,l,w,N,p,W,h){const I=A,q=y.width,o=y.height;let O,L,i=0;const H=new Uint8Array(q*o*4);for(L=l;L!==N;L+=w)for(O=p;O!==h;O+=W,i+=3)H[4*(O+q*L)+3]=255,H[4*(O+q*L)+2]=I[i+0],H[4*(O+q*L)+1]=I[i+1],H[4*(O+q*L)+0]=I[i+2];return H},_getImageData32bits:function(y,c,A,l,w,N,p,W,h){const I=A,q=y.width,o=y.height;let O,L,i=0;const H=new Uint8Array(q*o*4);for(L=l;L!==N;L+=w)for(O=p;O!==h;O+=W,i+=4)H[4*(O+q*L)+2]=I[i+0],H[4*(O+q*L)+1]=I[i+1],H[4*(O+q*L)+0]=I[i+2],H[4*(O+q*L)+3]=I[i+3];return H},_getImageDataGrey8bits:function(y,c,A,l,w,N,p,W,h){const I=A,q=y.width,o=y.height;let O,L,i,H=0;const P=new Uint8Array(q*o*4);for(i=l;i!==N;i+=w)for(L=p;L!==h;L+=W,H++)O=I[H],P[4*(L+q*i)+0]=O,P[4*(L+q*i)+1]=O,P[4*(L+q*i)+2]=O,P[4*(L+q*i)+3]=255;return P},_getImageDataGrey16bits:function(y,c,A,l,w,N,p,W,h){const I=A,q=y.width,o=y.height;let O,L,i=0;const H=new Uint8Array(q*o*4);for(L=l;L!==N;L+=w)for(O=p;O!==h;O+=W,i+=2)H[4*(O+q*L)+0]=I[i+0],H[4*(O+q*L)+1]=I[i+0],H[4*(O+q*L)+2]=I[i+0],H[4*(O+q*L)+3]=I[i+1];return H}};class W{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(y,c,A){const l=new Uint8Array(y.buffer,y.byteOffset,y.byteLength),p=w(l);A(p.width,p.height,c.generateMipMaps,!1,(()=>{N(c,l)}))}}}}]);