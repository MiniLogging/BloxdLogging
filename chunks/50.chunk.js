"use strict";(self.wy695la1oic=self.wy695la1oic||[]).push([[50],{13872:(S,v,D)=>{D.r(v),D.d(v,{_TGATextureLoader:()=>B});var z=D(11190);function e(S){let v=0;return{id_length:S[v++],colormap_type:S[v++],image_type:S[v++],colormap_index:S[v++]|S[v++]<<8,colormap_length:S[v++]|S[v++]<<8,colormap_size:S[v++],origin:[S[v++]|S[v++]<<8,S[v++]|S[v++]<<8],width:S[v++]|S[v++]<<8,height:S[v++]|S[v++]<<8,pixel_size:S[v++],flags:S[v++]}}function N(S,v){if(v.length<19)return void z.b.Error("Unable to load TGA file - Not enough data to contain header");let D=18;const N=e(v);if(N.id_length+D>v.length)return void z.b.Error("Unable to load TGA file - Not enough data");D+=N.id_length;let B,g=!1,E=!1,h=!1;switch(N.image_type){case 9:g=!0;case 1:E=!0;break;case 10:g=!0;case 2:break;case 11:g=!0;case 3:h=!0}const A=N.pixel_size>>3,w=N.width*N.height*A;let n,R,O,I,K,q,u;if(E&&(n=v.subarray(D,D+=N.colormap_length*(N.colormap_size>>3))),g){let S,z,e;B=new Uint8Array(w);let N=0;const m=new Uint8Array(A);for(;D<w&&N<w;)if(S=v[D++],z=1+(127&S),128&S){for(e=0;e<A;++e)m[e]=v[D++];for(e=0;e<z;++e)B.set(m,N+e*A);N+=A*z}else{for(z*=A,e=0;e<z;++e)B[N+e]=v[D++];N+=z}}else B=v.subarray(D,D+=E?N.width*N.height:w);switch((48&N.flags)>>4){default:case 2:R=0,I=1,u=N.width,O=0,K=1,q=N.height;break;case 0:R=0,I=1,u=N.width,O=N.height-1,K=-1,q=-1;break;case 3:R=N.width-1,I=-1,u=-1,O=0,K=1,q=N.height;break;case 1:R=N.width-1,I=-1,u=-1,O=N.height-1,K=-1,q=-1}const s="_getImageData"+(h?"Grey":"")+N.pixel_size+"bits",r=m[s](N,n,B,O,K,q,R,I,u);S.getEngine()._uploadDataToTextureDirectly(S,r)}const m={GetTGAHeader:e,UploadContent:N,_getImageData8bits:function(S,v,D,z,e,N,m,B,g){const E=D,h=v,A=S.width,w=S.height;let n,R,O,I=0;const K=new Uint8Array(A*w*4);for(O=z;O!==N;O+=e)for(R=m;R!==g;R+=B,I++)n=E[I],K[4*(R+A*O)+3]=255,K[4*(R+A*O)+2]=h[3*n+0],K[4*(R+A*O)+1]=h[3*n+1],K[4*(R+A*O)+0]=h[3*n+2];return K},_getImageData16bits:function(S,v,D,z,e,N,m,B,g){const E=D,h=S.width,A=S.height;let w,n,R,O=0;const I=new Uint8Array(h*A*4);for(R=z;R!==N;R+=e)for(n=m;n!==g;n+=B,O+=2){w=E[O+0]+(E[O+1]<<8);const S=255*((31744&w)>>10)/31|0,v=255*((992&w)>>5)/31|0,D=255*(31&w)/31|0;I[4*(n+h*R)+0]=S,I[4*(n+h*R)+1]=v,I[4*(n+h*R)+2]=D,I[4*(n+h*R)+3]=32768&w?0:255}return I},_getImageData24bits:function(S,v,D,z,e,N,m,B,g){const E=D,h=S.width,A=S.height;let w,n,R=0;const O=new Uint8Array(h*A*4);for(n=z;n!==N;n+=e)for(w=m;w!==g;w+=B,R+=3)O[4*(w+h*n)+3]=255,O[4*(w+h*n)+2]=E[R+0],O[4*(w+h*n)+1]=E[R+1],O[4*(w+h*n)+0]=E[R+2];return O},_getImageData32bits:function(S,v,D,z,e,N,m,B,g){const E=D,h=S.width,A=S.height;let w,n,R=0;const O=new Uint8Array(h*A*4);for(n=z;n!==N;n+=e)for(w=m;w!==g;w+=B,R+=4)O[4*(w+h*n)+2]=E[R+0],O[4*(w+h*n)+1]=E[R+1],O[4*(w+h*n)+0]=E[R+2],O[4*(w+h*n)+3]=E[R+3];return O},_getImageDataGrey8bits:function(S,v,D,z,e,N,m,B,g){const E=D,h=S.width,A=S.height;let w,n,R,O=0;const I=new Uint8Array(h*A*4);for(R=z;R!==N;R+=e)for(n=m;n!==g;n+=B,O++)w=E[O],I[4*(n+h*R)+0]=w,I[4*(n+h*R)+1]=w,I[4*(n+h*R)+2]=w,I[4*(n+h*R)+3]=255;return I},_getImageDataGrey16bits:function(S,v,D,z,e,N,m,B,g){const E=D,h=S.width,A=S.height;let w,n,R=0;const O=new Uint8Array(h*A*4);for(n=z;n!==N;n+=e)for(w=m;w!==g;w+=B,R+=2)O[4*(w+h*n)+0]=E[R+0],O[4*(w+h*n)+1]=E[R+0],O[4*(w+h*n)+2]=E[R+0],O[4*(w+h*n)+3]=E[R+1];return O}};class B{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(S,v,D){const z=new Uint8Array(S.buffer,S.byteOffset,S.byteLength),m=e(z);D(m.width,m.height,v.generateMipMaps,!1,(()=>{N(v,z)}))}}}}]);