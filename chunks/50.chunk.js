"use strict";(self.ra6kpa9z1sg=self.ra6kpa9z1sg||[]).push([[50],{15241:(p,b,M)=>{M.r(b),M.d(b,{_TGATextureLoader:()=>P});var h=M(12622);function Q(p){let b=0;return{id_length:p[b++],colormap_type:p[b++],image_type:p[b++],colormap_index:p[b++]|p[b++]<<8,colormap_length:p[b++]|p[b++]<<8,colormap_size:p[b++],origin:[p[b++]|p[b++]<<8,p[b++]|p[b++]<<8],width:p[b++]|p[b++]<<8,height:p[b++]|p[b++]<<8,pixel_size:p[b++],flags:p[b++]}}function mp(p,b){if(b.length<19)return void h.d.Error("Unable to load TGA file - Not enough data to contain header");let M=18;const mp=Q(b);if(mp.id_length+M>b.length)return void h.d.Error("Unable to load TGA file - Not enough data");M+=mp.id_length;let P,w=!1,t=!1,z=!1;switch(mp.image_type){case 9:w=!0;case 1:t=!0;break;case 10:w=!0;case 2:break;case 11:w=!0;case 3:z=!0}const x=mp.pixel_size>>3,S=mp.width*mp.height*x;let X,c,J,g,f,Y,a;if(t&&(X=b.subarray(M,M+=mp.colormap_length*(mp.colormap_size>>3))),w){let p,h,Q;P=new Uint8Array(S);let mp=0;const y=new Uint8Array(x);for(;M<S&&mp<S;)if(p=b[M++],h=1+(127&p),128&p){for(Q=0;Q<x;++Q)y[Q]=b[M++];for(Q=0;Q<h;++Q)P.set(y,mp+Q*x);mp+=x*h}else{for(h*=x,Q=0;Q<h;++Q)P[mp+Q]=b[M++];mp+=h}}else P=b.subarray(M,M+=t?mp.width*mp.height:S);switch((48&mp.flags)>>4){default:case 2:c=0,g=1,a=mp.width,J=0,f=1,Y=mp.height;break;case 0:c=0,g=1,a=mp.width,J=mp.height-1,f=-1,Y=-1;break;case 3:c=mp.width-1,g=-1,a=-1,J=0,f=1,Y=mp.height;break;case 1:c=mp.width-1,g=-1,a=-1,J=mp.height-1,f=-1,Y=-1}const o="_getImageData"+(z?"Grey":"")+mp.pixel_size+"bits",l=y[o](mp,X,P,J,f,Y,c,g,a);p.getEngine()._uploadDataToTextureDirectly(p,l)}const y={GetTGAHeader:Q,UploadContent:mp,_getImageData8bits:function(p,b,M,h,Q,mp,y,P,w){const t=M,z=b,x=p.width,S=p.height;let X,c,J,g=0;const f=new Uint8Array(x*S*4);for(J=h;J!==mp;J+=Q)for(c=y;c!==w;c+=P,g++)X=t[g],f[4*(c+x*J)+3]=255,f[4*(c+x*J)+2]=z[3*X+0],f[4*(c+x*J)+1]=z[3*X+1],f[4*(c+x*J)+0]=z[3*X+2];return f},_getImageData16bits:function(p,b,M,h,Q,mp,y,P,w){const t=M,z=p.width,x=p.height;let S,X,c,J=0;const g=new Uint8Array(z*x*4);for(c=h;c!==mp;c+=Q)for(X=y;X!==w;X+=P,J+=2){S=t[J+0]+(t[J+1]<<8);const p=255*((31744&S)>>10)/31|0,b=255*((992&S)>>5)/31|0,M=255*(31&S)/31|0;g[4*(X+z*c)+0]=p,g[4*(X+z*c)+1]=b,g[4*(X+z*c)+2]=M,g[4*(X+z*c)+3]=32768&S?0:255}return g},_getImageData24bits:function(p,b,M,h,Q,mp,y,P,w){const t=M,z=p.width,x=p.height;let S,X,c=0;const J=new Uint8Array(z*x*4);for(X=h;X!==mp;X+=Q)for(S=y;S!==w;S+=P,c+=3)J[4*(S+z*X)+3]=255,J[4*(S+z*X)+2]=t[c+0],J[4*(S+z*X)+1]=t[c+1],J[4*(S+z*X)+0]=t[c+2];return J},_getImageData32bits:function(p,b,M,h,Q,mp,y,P,w){const t=M,z=p.width,x=p.height;let S,X,c=0;const J=new Uint8Array(z*x*4);for(X=h;X!==mp;X+=Q)for(S=y;S!==w;S+=P,c+=4)J[4*(S+z*X)+2]=t[c+0],J[4*(S+z*X)+1]=t[c+1],J[4*(S+z*X)+0]=t[c+2],J[4*(S+z*X)+3]=t[c+3];return J},_getImageDataGrey8bits:function(p,b,M,h,Q,mp,y,P,w){const t=M,z=p.width,x=p.height;let S,X,c,J=0;const g=new Uint8Array(z*x*4);for(c=h;c!==mp;c+=Q)for(X=y;X!==w;X+=P,J++)S=t[J],g[4*(X+z*c)+0]=S,g[4*(X+z*c)+1]=S,g[4*(X+z*c)+2]=S,g[4*(X+z*c)+3]=255;return g},_getImageDataGrey16bits:function(p,b,M,h,Q,mp,y,P,w){const t=M,z=p.width,x=p.height;let S,X,c=0;const J=new Uint8Array(z*x*4);for(X=h;X!==mp;X+=Q)for(S=y;S!==w;S+=P,c+=2)J[4*(S+z*X)+0]=t[c+0],J[4*(S+z*X)+1]=t[c+0],J[4*(S+z*X)+2]=t[c+0],J[4*(S+z*X)+3]=t[c+1];return J}};class P{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(p,b,M){const h=new Uint8Array(p.buffer,p.byteOffset,p.byteLength),y=Q(h);M(y.width,y.height,b.generateMipMaps,!1,(()=>{mp(b,h)}))}}}}]);