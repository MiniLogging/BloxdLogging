"use strict";(self.b15p7b72fr8=self.b15p7b72fr8||[]).push([[50],{15063:(s,k,h)=>{h.r(k),h.d(k,{_TGATextureLoader:()=>K});var A=h(12422);function g(s){let k=0;return{id_length:s[k++],colormap_type:s[k++],image_type:s[k++],colormap_index:s[k++]|s[k++]<<8,colormap_length:s[k++]|s[k++]<<8,colormap_size:s[k++],origin:[s[k++]|s[k++]<<8,s[k++]|s[k++]<<8],width:s[k++]|s[k++]<<8,height:s[k++]|s[k++]<<8,pixel_size:s[k++],flags:s[k++]}}function ms(s,k){if(k.length<19)return void A.c.Error("Unable to load TGA file - Not enough data to contain header");let h=18;const ms=g(k);if(ms.id_length+h>k.length)return void A.c.Error("Unable to load TGA file - Not enough data");h+=ms.id_length;let K,H=!1,O=!1,c=!1;switch(ms.image_type){case 9:H=!0;case 1:O=!0;break;case 10:H=!0;case 2:break;case 11:H=!0;case 3:c=!0}const S=ms.pixel_size>>3,a=ms.width*ms.height*S;let r,d,E,j,P,R,D;if(O&&(r=k.subarray(h,h+=ms.colormap_length*(ms.colormap_size>>3))),H){let s,A,g;K=new Uint8Array(a);let ms=0;const i=new Uint8Array(S);for(;h<a&&ms<a;)if(s=k[h++],A=1+(127&s),128&s){for(g=0;g<S;++g)i[g]=k[h++];for(g=0;g<A;++g)K.set(i,ms+g*S);ms+=S*A}else{for(A*=S,g=0;g<A;++g)K[ms+g]=k[h++];ms+=A}}else K=k.subarray(h,h+=O?ms.width*ms.height:a);switch((48&ms.flags)>>4){default:case 2:d=0,j=1,D=ms.width,E=0,P=1,R=ms.height;break;case 0:d=0,j=1,D=ms.width,E=ms.height-1,P=-1,R=-1;break;case 3:d=ms.width-1,j=-1,D=-1,E=0,P=1,R=ms.height;break;case 1:d=ms.width-1,j=-1,D=-1,E=ms.height-1,P=-1,R=-1}const w="_getImageData"+(c?"Grey":"")+ms.pixel_size+"bits",B=i[w](ms,r,K,E,P,R,d,j,D);s.getEngine()._uploadDataToTextureDirectly(s,B)}const i={GetTGAHeader:g,UploadContent:ms,_getImageData8bits:function(s,k,h,A,g,ms,i,K,H){const O=h,c=k,S=s.width,a=s.height;let r,d,E,j=0;const P=new Uint8Array(S*a*4);for(E=A;E!==ms;E+=g)for(d=i;d!==H;d+=K,j++)r=O[j],P[4*(d+S*E)+3]=255,P[4*(d+S*E)+2]=c[3*r+0],P[4*(d+S*E)+1]=c[3*r+1],P[4*(d+S*E)+0]=c[3*r+2];return P},_getImageData16bits:function(s,k,h,A,g,ms,i,K,H){const O=h,c=s.width,S=s.height;let a,r,d,E=0;const j=new Uint8Array(c*S*4);for(d=A;d!==ms;d+=g)for(r=i;r!==H;r+=K,E+=2){a=O[E+0]+(O[E+1]<<8);const s=255*((31744&a)>>10)/31|0,k=255*((992&a)>>5)/31|0,h=255*(31&a)/31|0;j[4*(r+c*d)+0]=s,j[4*(r+c*d)+1]=k,j[4*(r+c*d)+2]=h,j[4*(r+c*d)+3]=32768&a?0:255}return j},_getImageData24bits:function(s,k,h,A,g,ms,i,K,H){const O=h,c=s.width,S=s.height;let a,r,d=0;const E=new Uint8Array(c*S*4);for(r=A;r!==ms;r+=g)for(a=i;a!==H;a+=K,d+=3)E[4*(a+c*r)+3]=255,E[4*(a+c*r)+2]=O[d+0],E[4*(a+c*r)+1]=O[d+1],E[4*(a+c*r)+0]=O[d+2];return E},_getImageData32bits:function(s,k,h,A,g,ms,i,K,H){const O=h,c=s.width,S=s.height;let a,r,d=0;const E=new Uint8Array(c*S*4);for(r=A;r!==ms;r+=g)for(a=i;a!==H;a+=K,d+=4)E[4*(a+c*r)+2]=O[d+0],E[4*(a+c*r)+1]=O[d+1],E[4*(a+c*r)+0]=O[d+2],E[4*(a+c*r)+3]=O[d+3];return E},_getImageDataGrey8bits:function(s,k,h,A,g,ms,i,K,H){const O=h,c=s.width,S=s.height;let a,r,d,E=0;const j=new Uint8Array(c*S*4);for(d=A;d!==ms;d+=g)for(r=i;r!==H;r+=K,E++)a=O[E],j[4*(r+c*d)+0]=a,j[4*(r+c*d)+1]=a,j[4*(r+c*d)+2]=a,j[4*(r+c*d)+3]=255;return j},_getImageDataGrey16bits:function(s,k,h,A,g,ms,i,K,H){const O=h,c=s.width,S=s.height;let a,r,d=0;const E=new Uint8Array(c*S*4);for(r=A;r!==ms;r+=g)for(a=i;a!==H;a+=K,d+=2)E[4*(a+c*r)+0]=O[d+0],E[4*(a+c*r)+1]=O[d+0],E[4*(a+c*r)+2]=O[d+0],E[4*(a+c*r)+3]=O[d+1];return E}};class K{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(s,k,h){const A=new Uint8Array(s.buffer,s.byteOffset,s.byteLength),i=g(A);h(i.width,i.height,k.generateMipMaps,!1,(()=>{ms(k,A)}))}}}}]);