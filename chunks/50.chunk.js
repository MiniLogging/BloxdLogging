"use strict";(self.rsqbdnwe5e=self.rsqbdnwe5e||[]).push([[50],{14814:(N,p,T)=>{T.r(p),T.d(p,{_TGATextureLoader:()=>X});var A=T(12205);function a(N){let p=0;return{id_length:N[p++],colormap_type:N[p++],image_type:N[p++],colormap_index:N[p++]|N[p++]<<8,colormap_length:N[p++]|N[p++]<<8,colormap_size:N[p++],origin:[N[p++]|N[p++]<<8,N[p++]|N[p++]<<8],width:N[p++]|N[p++]<<8,height:N[p++]|N[p++]<<8,pixel_size:N[p++],flags:N[p++]}}function C(N,p){if(p.length<19)return void A.d.Error("Unable to load TGA file - Not enough data to contain header");let T=18;const C=a(p);if(C.id_length+T>p.length)return void A.d.Error("Unable to load TGA file - Not enough data");T+=C.id_length;let X,y=!1,e=!1,H=!1;switch(C.image_type){case 9:y=!0;case 1:e=!0;break;case 10:y=!0;case 2:break;case 11:y=!0;case 3:H=!0}const M=C.pixel_size>>3,b=C.width*C.height*M;let l,k,x,I,L,n,w;if(e&&(l=p.subarray(T,T+=C.colormap_length*(C.colormap_size>>3))),y){let N,A,a;X=new Uint8Array(b);let C=0;const U=new Uint8Array(M);for(;T<b&&C<b;)if(N=p[T++],A=1+(127&N),128&N){for(a=0;a<M;++a)U[a]=p[T++];for(a=0;a<A;++a)X.set(U,C+a*M);C+=M*A}else{for(A*=M,a=0;a<A;++a)X[C+a]=p[T++];C+=A}}else X=p.subarray(T,T+=e?C.width*C.height:b);switch((48&C.flags)>>4){default:case 2:k=0,I=1,w=C.width,x=0,L=1,n=C.height;break;case 0:k=0,I=1,w=C.width,x=C.height-1,L=-1,n=-1;break;case 3:k=C.width-1,I=-1,w=-1,x=0,L=1,n=C.height;break;case 1:k=C.width-1,I=-1,w=-1,x=C.height-1,L=-1,n=-1}const g="_getImageData"+(H?"Grey":"")+C.pixel_size+"bits",P=U[g](C,l,X,x,L,n,k,I,w);N.getEngine()._uploadDataToTextureDirectly(N,P)}const U={GetTGAHeader:a,UploadContent:C,_getImageData8bits:function(N,p,T,A,a,C,U,X,y){const e=T,H=p,M=N.width,b=N.height;let l,k,x,I=0;const L=new Uint8Array(M*b*4);for(x=A;x!==C;x+=a)for(k=U;k!==y;k+=X,I++)l=e[I],L[4*(k+M*x)+3]=255,L[4*(k+M*x)+2]=H[3*l+0],L[4*(k+M*x)+1]=H[3*l+1],L[4*(k+M*x)+0]=H[3*l+2];return L},_getImageData16bits:function(N,p,T,A,a,C,U,X,y){const e=T,H=N.width,M=N.height;let b,l,k,x=0;const I=new Uint8Array(H*M*4);for(k=A;k!==C;k+=a)for(l=U;l!==y;l+=X,x+=2){b=e[x+0]+(e[x+1]<<8);const N=255*((31744&b)>>10)/31|0,p=255*((992&b)>>5)/31|0,T=255*(31&b)/31|0;I[4*(l+H*k)+0]=N,I[4*(l+H*k)+1]=p,I[4*(l+H*k)+2]=T,I[4*(l+H*k)+3]=32768&b?0:255}return I},_getImageData24bits:function(N,p,T,A,a,C,U,X,y){const e=T,H=N.width,M=N.height;let b,l,k=0;const x=new Uint8Array(H*M*4);for(l=A;l!==C;l+=a)for(b=U;b!==y;b+=X,k+=3)x[4*(b+H*l)+3]=255,x[4*(b+H*l)+2]=e[k+0],x[4*(b+H*l)+1]=e[k+1],x[4*(b+H*l)+0]=e[k+2];return x},_getImageData32bits:function(N,p,T,A,a,C,U,X,y){const e=T,H=N.width,M=N.height;let b,l,k=0;const x=new Uint8Array(H*M*4);for(l=A;l!==C;l+=a)for(b=U;b!==y;b+=X,k+=4)x[4*(b+H*l)+2]=e[k+0],x[4*(b+H*l)+1]=e[k+1],x[4*(b+H*l)+0]=e[k+2],x[4*(b+H*l)+3]=e[k+3];return x},_getImageDataGrey8bits:function(N,p,T,A,a,C,U,X,y){const e=T,H=N.width,M=N.height;let b,l,k,x=0;const I=new Uint8Array(H*M*4);for(k=A;k!==C;k+=a)for(l=U;l!==y;l+=X,x++)b=e[x],I[4*(l+H*k)+0]=b,I[4*(l+H*k)+1]=b,I[4*(l+H*k)+2]=b,I[4*(l+H*k)+3]=255;return I},_getImageDataGrey16bits:function(N,p,T,A,a,C,U,X,y){const e=T,H=N.width,M=N.height;let b,l,k=0;const x=new Uint8Array(H*M*4);for(l=A;l!==C;l+=a)for(b=U;b!==y;b+=X,k+=2)x[4*(b+H*l)+0]=e[k+0],x[4*(b+H*l)+1]=e[k+0],x[4*(b+H*l)+2]=e[k+0],x[4*(b+H*l)+3]=e[k+1];return x}};class X{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(N,p,T){const A=new Uint8Array(N.buffer,N.byteOffset,N.byteLength),U=a(A);T(U.width,U.height,p.generateMipMaps,!1,(()=>{C(p,A)}))}}}}]);