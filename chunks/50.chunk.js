"use strict";(self.u4k1rqylno=self.u4k1rqylno||[]).push([[50],{14155:(e,E,H)=>{H.r(E),H.d(E,{_TGATextureLoader:()=>M});var N=H(11548);function u(e){let E=0;return{id_length:e[E++],colormap_type:e[E++],image_type:e[E++],colormap_index:e[E++]|e[E++]<<8,colormap_length:e[E++]|e[E++]<<8,colormap_size:e[E++],origin:[e[E++]|e[E++]<<8,e[E++]|e[E++]<<8],width:e[E++]|e[E++]<<8,height:e[E++]|e[E++]<<8,pixel_size:e[E++],flags:e[E++]}}function z(e,E){if(E.length<19)return void N.d.Error("Unable to load TGA file - Not enough data to contain header");let H=18;const z=u(E);if(z.id_length+H>E.length)return void N.d.Error("Unable to load TGA file - Not enough data");H+=z.id_length;let M,D=!1,A=!1,C=!1;switch(z.image_type){case 9:D=!0;case 1:A=!0;break;case 10:D=!0;case 2:break;case 11:D=!0;case 3:C=!0}const i=z.pixel_size>>3,V=z.width*z.height*i;let U,j,F,h,S,X,a;if(A&&(U=E.subarray(H,H+=z.colormap_length*(z.colormap_size>>3))),D){let e,N,u;M=new Uint8Array(V);let z=0;const P=new Uint8Array(i);for(;H<V&&z<V;)if(e=E[H++],N=1+(127&e),128&e){for(u=0;u<i;++u)P[u]=E[H++];for(u=0;u<N;++u)M.set(P,z+u*i);z+=i*N}else{for(N*=i,u=0;u<N;++u)M[z+u]=E[H++];z+=N}}else M=E.subarray(H,H+=A?z.width*z.height:V);switch((48&z.flags)>>4){default:case 2:j=0,h=1,a=z.width,F=0,S=1,X=z.height;break;case 0:j=0,h=1,a=z.width,F=z.height-1,S=-1,X=-1;break;case 3:j=z.width-1,h=-1,a=-1,F=0,S=1,X=z.height;break;case 1:j=z.width-1,h=-1,a=-1,F=z.height-1,S=-1,X=-1}const W="_getImageData"+(C?"Grey":"")+z.pixel_size+"bits",r=P[W](z,U,M,F,S,X,j,h,a);e.getEngine()._uploadDataToTextureDirectly(e,r)}const P={GetTGAHeader:u,UploadContent:z,_getImageData8bits:function(e,E,H,N,u,z,P,M,D){const A=H,C=E,i=e.width,V=e.height;let U,j,F,h=0;const S=new Uint8Array(i*V*4);for(F=N;F!==z;F+=u)for(j=P;j!==D;j+=M,h++)U=A[h],S[4*(j+i*F)+3]=255,S[4*(j+i*F)+2]=C[3*U+0],S[4*(j+i*F)+1]=C[3*U+1],S[4*(j+i*F)+0]=C[3*U+2];return S},_getImageData16bits:function(e,E,H,N,u,z,P,M,D){const A=H,C=e.width,i=e.height;let V,U,j,F=0;const h=new Uint8Array(C*i*4);for(j=N;j!==z;j+=u)for(U=P;U!==D;U+=M,F+=2){V=A[F+0]+(A[F+1]<<8);const e=255*((31744&V)>>10)/31|0,E=255*((992&V)>>5)/31|0,H=255*(31&V)/31|0;h[4*(U+C*j)+0]=e,h[4*(U+C*j)+1]=E,h[4*(U+C*j)+2]=H,h[4*(U+C*j)+3]=32768&V?0:255}return h},_getImageData24bits:function(e,E,H,N,u,z,P,M,D){const A=H,C=e.width,i=e.height;let V,U,j=0;const F=new Uint8Array(C*i*4);for(U=N;U!==z;U+=u)for(V=P;V!==D;V+=M,j+=3)F[4*(V+C*U)+3]=255,F[4*(V+C*U)+2]=A[j+0],F[4*(V+C*U)+1]=A[j+1],F[4*(V+C*U)+0]=A[j+2];return F},_getImageData32bits:function(e,E,H,N,u,z,P,M,D){const A=H,C=e.width,i=e.height;let V,U,j=0;const F=new Uint8Array(C*i*4);for(U=N;U!==z;U+=u)for(V=P;V!==D;V+=M,j+=4)F[4*(V+C*U)+2]=A[j+0],F[4*(V+C*U)+1]=A[j+1],F[4*(V+C*U)+0]=A[j+2],F[4*(V+C*U)+3]=A[j+3];return F},_getImageDataGrey8bits:function(e,E,H,N,u,z,P,M,D){const A=H,C=e.width,i=e.height;let V,U,j,F=0;const h=new Uint8Array(C*i*4);for(j=N;j!==z;j+=u)for(U=P;U!==D;U+=M,F++)V=A[F],h[4*(U+C*j)+0]=V,h[4*(U+C*j)+1]=V,h[4*(U+C*j)+2]=V,h[4*(U+C*j)+3]=255;return h},_getImageDataGrey16bits:function(e,E,H,N,u,z,P,M,D){const A=H,C=e.width,i=e.height;let V,U,j=0;const F=new Uint8Array(C*i*4);for(U=N;U!==z;U+=u)for(V=P;V!==D;V+=M,j+=2)F[4*(V+C*U)+0]=A[j+0],F[4*(V+C*U)+1]=A[j+0],F[4*(V+C*U)+2]=A[j+0],F[4*(V+C*U)+3]=A[j+1];return F}};class M{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(e,E,H){const N=new Uint8Array(e.buffer,e.byteOffset,e.byteLength),P=u(N);H(P.width,P.height,E.generateMipMaps,!1,(()=>{z(E,N)}))}}}}]);