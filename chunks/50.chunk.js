"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[50],{13706:(o,H,n)=>{n.r(H),n.d(H,{_TGATextureLoader:()=>Y});var E=n(11038);function k(o){let H=0;return{id_length:o[H++],colormap_type:o[H++],image_type:o[H++],colormap_index:o[H++]|o[H++]<<8,colormap_length:o[H++]|o[H++]<<8,colormap_size:o[H++],origin:[o[H++]|o[H++]<<8,o[H++]|o[H++]<<8],width:o[H++]|o[H++]<<8,height:o[H++]|o[H++]<<8,pixel_size:o[H++],flags:o[H++]}}function g(o,H){if(H.length<19)return void E.d.Error("Unable to load TGA file - Not enough data to contain header");let n=18;const g=k(H);if(g.id_length+n>H.length)return void E.d.Error("Unable to load TGA file - Not enough data");n+=g.id_length;let Y,y=!1,S=!1,G=!1;switch(g.image_type){case 9:y=!0;case 1:S=!0;break;case 10:y=!0;case 2:break;case 11:y=!0;case 3:G=!0}const c=g.pixel_size>>3,A=g.width*g.height*c;let l,x,z,V,J,N,h;if(S&&(l=H.subarray(n,n+=g.colormap_length*(g.colormap_size>>3))),y){let o,E,k;Y=new Uint8Array(A);let g=0;const O=new Uint8Array(c);for(;n<A&&g<A;)if(o=H[n++],E=1+(127&o),128&o){for(k=0;k<c;++k)O[k]=H[n++];for(k=0;k<E;++k)Y.set(O,g+k*c);g+=c*E}else{for(E*=c,k=0;k<E;++k)Y[g+k]=H[n++];g+=E}}else Y=H.subarray(n,n+=S?g.width*g.height:A);switch((48&g.flags)>>4){default:case 2:x=0,V=1,h=g.width,z=0,J=1,N=g.height;break;case 0:x=0,V=1,h=g.width,z=g.height-1,J=-1,N=-1;break;case 3:x=g.width-1,V=-1,h=-1,z=0,J=1,N=g.height;break;case 1:x=g.width-1,V=-1,h=-1,z=g.height-1,J=-1,N=-1}const Q="_getImageData"+(G?"Grey":"")+g.pixel_size+"bits",p=O[Q](g,l,Y,z,J,N,x,V,h);o.getEngine()._uploadDataToTextureDirectly(o,p)}const O={GetTGAHeader:k,UploadContent:g,_getImageData8bits:function(o,H,n,E,k,g,O,Y,y){const S=n,G=H,c=o.width,A=o.height;let l,x,z,V=0;const J=new Uint8Array(c*A*4);for(z=E;z!==g;z+=k)for(x=O;x!==y;x+=Y,V++)l=S[V],J[4*(x+c*z)+3]=255,J[4*(x+c*z)+2]=G[3*l+0],J[4*(x+c*z)+1]=G[3*l+1],J[4*(x+c*z)+0]=G[3*l+2];return J},_getImageData16bits:function(o,H,n,E,k,g,O,Y,y){const S=n,G=o.width,c=o.height;let A,l,x,z=0;const V=new Uint8Array(G*c*4);for(x=E;x!==g;x+=k)for(l=O;l!==y;l+=Y,z+=2){A=S[z+0]+(S[z+1]<<8);const o=255*((31744&A)>>10)/31|0,H=255*((992&A)>>5)/31|0,n=255*(31&A)/31|0;V[4*(l+G*x)+0]=o,V[4*(l+G*x)+1]=H,V[4*(l+G*x)+2]=n,V[4*(l+G*x)+3]=32768&A?0:255}return V},_getImageData24bits:function(o,H,n,E,k,g,O,Y,y){const S=n,G=o.width,c=o.height;let A,l,x=0;const z=new Uint8Array(G*c*4);for(l=E;l!==g;l+=k)for(A=O;A!==y;A+=Y,x+=3)z[4*(A+G*l)+3]=255,z[4*(A+G*l)+2]=S[x+0],z[4*(A+G*l)+1]=S[x+1],z[4*(A+G*l)+0]=S[x+2];return z},_getImageData32bits:function(o,H,n,E,k,g,O,Y,y){const S=n,G=o.width,c=o.height;let A,l,x=0;const z=new Uint8Array(G*c*4);for(l=E;l!==g;l+=k)for(A=O;A!==y;A+=Y,x+=4)z[4*(A+G*l)+2]=S[x+0],z[4*(A+G*l)+1]=S[x+1],z[4*(A+G*l)+0]=S[x+2],z[4*(A+G*l)+3]=S[x+3];return z},_getImageDataGrey8bits:function(o,H,n,E,k,g,O,Y,y){const S=n,G=o.width,c=o.height;let A,l,x,z=0;const V=new Uint8Array(G*c*4);for(x=E;x!==g;x+=k)for(l=O;l!==y;l+=Y,z++)A=S[z],V[4*(l+G*x)+0]=A,V[4*(l+G*x)+1]=A,V[4*(l+G*x)+2]=A,V[4*(l+G*x)+3]=255;return V},_getImageDataGrey16bits:function(o,H,n,E,k,g,O,Y,y){const S=n,G=o.width,c=o.height;let A,l,x=0;const z=new Uint8Array(G*c*4);for(l=E;l!==g;l+=k)for(A=O;A!==y;A+=Y,x+=2)z[4*(A+G*l)+0]=S[x+0],z[4*(A+G*l)+1]=S[x+0],z[4*(A+G*l)+2]=S[x+0],z[4*(A+G*l)+3]=S[x+1];return z}};class Y{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(o,H,n){const E=new Uint8Array(o.buffer,o.byteOffset,o.byteLength),O=k(E);n(O.width,O.height,H.generateMipMaps,!1,(()=>{g(H,E)}))}}}}]);