"use strict";(self.fyqbdzs5tyo=self.fyqbdzs5tyo||[]).push([[50],{13665:(V,I,A)=>{A.r(I),A.d(I,{_TGATextureLoader:()=>H});var B=A(11064);function F(V){let I=0;return{id_length:V[I++],colormap_type:V[I++],image_type:V[I++],colormap_index:V[I++]|V[I++]<<8,colormap_length:V[I++]|V[I++]<<8,colormap_size:V[I++],origin:[V[I++]|V[I++]<<8,V[I++]|V[I++]<<8],width:V[I++]|V[I++]<<8,height:V[I++]|V[I++]<<8,pixel_size:V[I++],flags:V[I++]}}function E(V,I){if(I.length<19)return void B.b.Error("Unable to load TGA file - Not enough data to contain header");let A=18;const E=F(I);if(E.id_length+A>I.length)return void B.b.Error("Unable to load TGA file - Not enough data");A+=E.id_length;let H,c=!1,b=!1,X=!1;switch(E.image_type){case 9:c=!0;case 1:b=!0;break;case 10:c=!0;case 2:break;case 11:c=!0;case 3:X=!0}const P=E.pixel_size>>3,J=E.width*E.height*P;let G,w,t,u,W,g,o;if(b&&(G=I.subarray(A,A+=E.colormap_length*(E.colormap_size>>3))),c){let V,B,F;H=new Uint8Array(J);let E=0;const Y=new Uint8Array(P);for(;A<J&&E<J;)if(V=I[A++],B=1+(127&V),128&V){for(F=0;F<P;++F)Y[F]=I[A++];for(F=0;F<B;++F)H.set(Y,E+F*P);E+=P*B}else{for(B*=P,F=0;F<B;++F)H[E+F]=I[A++];E+=B}}else H=I.subarray(A,A+=b?E.width*E.height:J);switch((48&E.flags)>>4){default:case 2:w=0,u=1,o=E.width,t=0,W=1,g=E.height;break;case 0:w=0,u=1,o=E.width,t=E.height-1,W=-1,g=-1;break;case 3:w=E.width-1,u=-1,o=-1,t=0,W=1,g=E.height;break;case 1:w=E.width-1,u=-1,o=-1,t=E.height-1,W=-1,g=-1}const L="_getImageData"+(X?"Grey":"")+E.pixel_size+"bits",z=Y[L](E,G,H,t,W,g,w,u,o);V.getEngine()._uploadDataToTextureDirectly(V,z)}const Y={GetTGAHeader:F,UploadContent:E,_getImageData8bits:function(V,I,A,B,F,E,Y,H,c){const b=A,X=I,P=V.width,J=V.height;let G,w,t,u=0;const W=new Uint8Array(P*J*4);for(t=B;t!==E;t+=F)for(w=Y;w!==c;w+=H,u++)G=b[u],W[4*(w+P*t)+3]=255,W[4*(w+P*t)+2]=X[3*G+0],W[4*(w+P*t)+1]=X[3*G+1],W[4*(w+P*t)+0]=X[3*G+2];return W},_getImageData16bits:function(V,I,A,B,F,E,Y,H,c){const b=A,X=V.width,P=V.height;let J,G,w,t=0;const u=new Uint8Array(X*P*4);for(w=B;w!==E;w+=F)for(G=Y;G!==c;G+=H,t+=2){J=b[t+0]+(b[t+1]<<8);const V=255*((31744&J)>>10)/31|0,I=255*((992&J)>>5)/31|0,A=255*(31&J)/31|0;u[4*(G+X*w)+0]=V,u[4*(G+X*w)+1]=I,u[4*(G+X*w)+2]=A,u[4*(G+X*w)+3]=32768&J?0:255}return u},_getImageData24bits:function(V,I,A,B,F,E,Y,H,c){const b=A,X=V.width,P=V.height;let J,G,w=0;const t=new Uint8Array(X*P*4);for(G=B;G!==E;G+=F)for(J=Y;J!==c;J+=H,w+=3)t[4*(J+X*G)+3]=255,t[4*(J+X*G)+2]=b[w+0],t[4*(J+X*G)+1]=b[w+1],t[4*(J+X*G)+0]=b[w+2];return t},_getImageData32bits:function(V,I,A,B,F,E,Y,H,c){const b=A,X=V.width,P=V.height;let J,G,w=0;const t=new Uint8Array(X*P*4);for(G=B;G!==E;G+=F)for(J=Y;J!==c;J+=H,w+=4)t[4*(J+X*G)+2]=b[w+0],t[4*(J+X*G)+1]=b[w+1],t[4*(J+X*G)+0]=b[w+2],t[4*(J+X*G)+3]=b[w+3];return t},_getImageDataGrey8bits:function(V,I,A,B,F,E,Y,H,c){const b=A,X=V.width,P=V.height;let J,G,w,t=0;const u=new Uint8Array(X*P*4);for(w=B;w!==E;w+=F)for(G=Y;G!==c;G+=H,t++)J=b[t],u[4*(G+X*w)+0]=J,u[4*(G+X*w)+1]=J,u[4*(G+X*w)+2]=J,u[4*(G+X*w)+3]=255;return u},_getImageDataGrey16bits:function(V,I,A,B,F,E,Y,H,c){const b=A,X=V.width,P=V.height;let J,G,w=0;const t=new Uint8Array(X*P*4);for(G=B;G!==E;G+=F)for(J=Y;J!==c;J+=H,w+=2)t[4*(J+X*G)+0]=b[w+0],t[4*(J+X*G)+1]=b[w+0],t[4*(J+X*G)+2]=b[w+0],t[4*(J+X*G)+3]=b[w+1];return t}};class H{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(V,I,A){const B=new Uint8Array(V.buffer,V.byteOffset,V.byteLength),Y=F(B);A(Y.width,Y.height,I.generateMipMaps,!1,(()=>{E(I,B)}))}}}}]);