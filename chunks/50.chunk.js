"use strict";(self.wx5iyvo7rvn=self.wx5iyvo7rvn||[]).push([[50],{13558:(P,e,n)=>{n.r(e),n.d(e,{_TGATextureLoader:()=>m});var H=n(10988);function S(P){let e=0;return{id_length:P[e++],colormap_type:P[e++],image_type:P[e++],colormap_index:P[e++]|P[e++]<<8,colormap_length:P[e++]|P[e++]<<8,colormap_size:P[e++],origin:[P[e++]|P[e++]<<8,P[e++]|P[e++]<<8],width:P[e++]|P[e++]<<8,height:P[e++]|P[e++]<<8,pixel_size:P[e++],flags:P[e++]}}function p(P,e){if(e.length<19)return void H.c.Error("Unable to load TGA file - Not enough data to contain header");let n=18;const p=S(e);if(p.id_length+n>e.length)return void H.c.Error("Unable to load TGA file - Not enough data");n+=p.id_length;let m,t=!1,C=!1,R=!1;switch(p.image_type){case 9:t=!0;case 1:C=!0;break;case 10:t=!0;case 2:break;case 11:t=!0;case 3:R=!0}const q=p.pixel_size>>3,A=p.width*p.height*q;let F,Y,j,z,w,J,I;if(C&&(F=e.subarray(n,n+=p.colormap_length*(p.colormap_size>>3))),t){let P,H,S;m=new Uint8Array(A);let p=0;const k=new Uint8Array(q);for(;n<A&&p<A;)if(P=e[n++],H=1+(127&P),128&P){for(S=0;S<q;++S)k[S]=e[n++];for(S=0;S<H;++S)m.set(k,p+S*q);p+=q*H}else{for(H*=q,S=0;S<H;++S)m[p+S]=e[n++];p+=H}}else m=e.subarray(n,n+=C?p.width*p.height:A);switch((48&p.flags)>>4){default:case 2:Y=0,z=1,I=p.width,j=0,w=1,J=p.height;break;case 0:Y=0,z=1,I=p.width,j=p.height-1,w=-1,J=-1;break;case 3:Y=p.width-1,z=-1,I=-1,j=0,w=1,J=p.height;break;case 1:Y=p.width-1,z=-1,I=-1,j=p.height-1,w=-1,J=-1}const O="_getImageData"+(R?"Grey":"")+p.pixel_size+"bits",V=k[O](p,F,m,j,w,J,Y,z,I);P.getEngine()._uploadDataToTextureDirectly(P,V)}const k={GetTGAHeader:S,UploadContent:p,_getImageData8bits:function(P,e,n,H,S,p,k,m,t){const C=n,R=e,q=P.width,A=P.height;let F,Y,j,z=0;const w=new Uint8Array(q*A*4);for(j=H;j!==p;j+=S)for(Y=k;Y!==t;Y+=m,z++)F=C[z],w[4*(Y+q*j)+3]=255,w[4*(Y+q*j)+2]=R[3*F+0],w[4*(Y+q*j)+1]=R[3*F+1],w[4*(Y+q*j)+0]=R[3*F+2];return w},_getImageData16bits:function(P,e,n,H,S,p,k,m,t){const C=n,R=P.width,q=P.height;let A,F,Y,j=0;const z=new Uint8Array(R*q*4);for(Y=H;Y!==p;Y+=S)for(F=k;F!==t;F+=m,j+=2){A=C[j+0]+(C[j+1]<<8);const P=255*((31744&A)>>10)/31|0,e=255*((992&A)>>5)/31|0,n=255*(31&A)/31|0;z[4*(F+R*Y)+0]=P,z[4*(F+R*Y)+1]=e,z[4*(F+R*Y)+2]=n,z[4*(F+R*Y)+3]=32768&A?0:255}return z},_getImageData24bits:function(P,e,n,H,S,p,k,m,t){const C=n,R=P.width,q=P.height;let A,F,Y=0;const j=new Uint8Array(R*q*4);for(F=H;F!==p;F+=S)for(A=k;A!==t;A+=m,Y+=3)j[4*(A+R*F)+3]=255,j[4*(A+R*F)+2]=C[Y+0],j[4*(A+R*F)+1]=C[Y+1],j[4*(A+R*F)+0]=C[Y+2];return j},_getImageData32bits:function(P,e,n,H,S,p,k,m,t){const C=n,R=P.width,q=P.height;let A,F,Y=0;const j=new Uint8Array(R*q*4);for(F=H;F!==p;F+=S)for(A=k;A!==t;A+=m,Y+=4)j[4*(A+R*F)+2]=C[Y+0],j[4*(A+R*F)+1]=C[Y+1],j[4*(A+R*F)+0]=C[Y+2],j[4*(A+R*F)+3]=C[Y+3];return j},_getImageDataGrey8bits:function(P,e,n,H,S,p,k,m,t){const C=n,R=P.width,q=P.height;let A,F,Y,j=0;const z=new Uint8Array(R*q*4);for(Y=H;Y!==p;Y+=S)for(F=k;F!==t;F+=m,j++)A=C[j],z[4*(F+R*Y)+0]=A,z[4*(F+R*Y)+1]=A,z[4*(F+R*Y)+2]=A,z[4*(F+R*Y)+3]=255;return z},_getImageDataGrey16bits:function(P,e,n,H,S,p,k,m,t){const C=n,R=P.width,q=P.height;let A,F,Y=0;const j=new Uint8Array(R*q*4);for(F=H;F!==p;F+=S)for(A=k;A!==t;A+=m,Y+=2)j[4*(A+R*F)+0]=C[Y+0],j[4*(A+R*F)+1]=C[Y+0],j[4*(A+R*F)+2]=C[Y+0],j[4*(A+R*F)+3]=C[Y+1];return j}};class m{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(P,e,n){const H=new Uint8Array(P.buffer,P.byteOffset,P.byteLength),k=S(H);n(k.width,k.height,e.generateMipMaps,!1,(()=>{p(e,H)}))}}}}]);