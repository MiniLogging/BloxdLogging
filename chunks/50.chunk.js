"use strict";(self["269hv5nclphh"]=self["269hv5nclphh"]||[]).push([[50],{14867:(E,H,d)=>{d.r(H),d.d(H,{_TGATextureLoader:()=>l});var n=d(12237);function Z(E){let H=0;return{id_length:E[H++],colormap_type:E[H++],image_type:E[H++],colormap_index:E[H++]|E[H++]<<8,colormap_length:E[H++]|E[H++]<<8,colormap_size:E[H++],origin:[E[H++]|E[H++]<<8,E[H++]|E[H++]<<8],width:E[H++]|E[H++]<<8,height:E[H++]|E[H++]<<8,pixel_size:E[H++],flags:E[H++]}}function I(E,H){if(H.length<19)return void n.b.Error("Unable to load TGA file - Not enough data to contain header");let d=18;const I=Z(H);if(I.id_length+d>H.length)return void n.b.Error("Unable to load TGA file - Not enough data");d+=I.id_length;let l,r=!1,t=!1,S=!1;switch(I.image_type){case 9:r=!0;case 1:t=!0;break;case 10:r=!0;case 2:break;case 11:r=!0;case 3:S=!0}const M=I.pixel_size>>3,V=I.width*I.height*M;let C,w,R,Q,L,D,e;if(t&&(C=H.subarray(d,d+=I.colormap_length*(I.colormap_size>>3))),r){let E,n,Z;l=new Uint8Array(V);let I=0;const g=new Uint8Array(M);for(;d<V&&I<V;)if(E=H[d++],n=1+(127&E),128&E){for(Z=0;Z<M;++Z)g[Z]=H[d++];for(Z=0;Z<n;++Z)l.set(g,I+Z*M);I+=M*n}else{for(n*=M,Z=0;Z<n;++Z)l[I+Z]=H[d++];I+=n}}else l=H.subarray(d,d+=t?I.width*I.height:V);switch((48&I.flags)>>4){default:case 2:w=0,Q=1,e=I.width,R=0,L=1,D=I.height;break;case 0:w=0,Q=1,e=I.width,R=I.height-1,L=-1,D=-1;break;case 3:w=I.width-1,Q=-1,e=-1,R=0,L=1,D=I.height;break;case 1:w=I.width-1,Q=-1,e=-1,R=I.height-1,L=-1,D=-1}const s="_getImageData"+(S?"Grey":"")+I.pixel_size+"bits",i=g[s](I,C,l,R,L,D,w,Q,e);E.getEngine()._uploadDataToTextureDirectly(E,i)}const g={GetTGAHeader:Z,UploadContent:I,_getImageData8bits:function(E,H,d,n,Z,I,g,l,r){const t=d,S=H,M=E.width,V=E.height;let C,w,R,Q=0;const L=new Uint8Array(M*V*4);for(R=n;R!==I;R+=Z)for(w=g;w!==r;w+=l,Q++)C=t[Q],L[4*(w+M*R)+3]=255,L[4*(w+M*R)+2]=S[3*C+0],L[4*(w+M*R)+1]=S[3*C+1],L[4*(w+M*R)+0]=S[3*C+2];return L},_getImageData16bits:function(E,H,d,n,Z,I,g,l,r){const t=d,S=E.width,M=E.height;let V,C,w,R=0;const Q=new Uint8Array(S*M*4);for(w=n;w!==I;w+=Z)for(C=g;C!==r;C+=l,R+=2){V=t[R+0]+(t[R+1]<<8);const E=255*((31744&V)>>10)/31|0,H=255*((992&V)>>5)/31|0,d=255*(31&V)/31|0;Q[4*(C+S*w)+0]=E,Q[4*(C+S*w)+1]=H,Q[4*(C+S*w)+2]=d,Q[4*(C+S*w)+3]=32768&V?0:255}return Q},_getImageData24bits:function(E,H,d,n,Z,I,g,l,r){const t=d,S=E.width,M=E.height;let V,C,w=0;const R=new Uint8Array(S*M*4);for(C=n;C!==I;C+=Z)for(V=g;V!==r;V+=l,w+=3)R[4*(V+S*C)+3]=255,R[4*(V+S*C)+2]=t[w+0],R[4*(V+S*C)+1]=t[w+1],R[4*(V+S*C)+0]=t[w+2];return R},_getImageData32bits:function(E,H,d,n,Z,I,g,l,r){const t=d,S=E.width,M=E.height;let V,C,w=0;const R=new Uint8Array(S*M*4);for(C=n;C!==I;C+=Z)for(V=g;V!==r;V+=l,w+=4)R[4*(V+S*C)+2]=t[w+0],R[4*(V+S*C)+1]=t[w+1],R[4*(V+S*C)+0]=t[w+2],R[4*(V+S*C)+3]=t[w+3];return R},_getImageDataGrey8bits:function(E,H,d,n,Z,I,g,l,r){const t=d,S=E.width,M=E.height;let V,C,w,R=0;const Q=new Uint8Array(S*M*4);for(w=n;w!==I;w+=Z)for(C=g;C!==r;C+=l,R++)V=t[R],Q[4*(C+S*w)+0]=V,Q[4*(C+S*w)+1]=V,Q[4*(C+S*w)+2]=V,Q[4*(C+S*w)+3]=255;return Q},_getImageDataGrey16bits:function(E,H,d,n,Z,I,g,l,r){const t=d,S=E.width,M=E.height;let V,C,w=0;const R=new Uint8Array(S*M*4);for(C=n;C!==I;C+=Z)for(V=g;V!==r;V+=l,w+=2)R[4*(V+S*C)+0]=t[w+0],R[4*(V+S*C)+1]=t[w+0],R[4*(V+S*C)+2]=t[w+0],R[4*(V+S*C)+3]=t[w+1];return R}};class l{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(E,H,d){const n=new Uint8Array(E.buffer,E.byteOffset,E.byteLength),g=Z(n);d(g.width,g.height,H.generateMipMaps,!1,(()=>{I(H,n)}))}}}}]);