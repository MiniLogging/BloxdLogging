"use strict";(self.v2pspxy442l=self.v2pspxy442l||[]).push([[50],{14903:(l,a,N)=>{N.r(a),N.d(a,{_TGATextureLoader:()=>w});var U=N(12268);function c(l){let a=0;return{id_length:l[a++],colormap_type:l[a++],image_type:l[a++],colormap_index:l[a++]|l[a++]<<8,colormap_length:l[a++]|l[a++]<<8,colormap_size:l[a++],origin:[l[a++]|l[a++]<<8,l[a++]|l[a++]<<8],width:l[a++]|l[a++]<<8,height:l[a++]|l[a++]<<8,pixel_size:l[a++],flags:l[a++]}}function K(l,a){if(a.length<19)return void U.b.Error("Unable to load TGA file - Not enough data to contain header");let N=18;const K=c(a);if(K.id_length+N>a.length)return void U.b.Error("Unable to load TGA file - Not enough data");N+=K.id_length;let w,S=!1,T=!1,J=!1;switch(K.image_type){case 9:S=!0;case 1:T=!0;break;case 10:S=!0;case 2:break;case 11:S=!0;case 3:J=!0}const n=K.pixel_size>>3,y=K.width*K.height*n;let H,u,W,B,Y,C,M;if(T&&(H=a.subarray(N,N+=K.colormap_length*(K.colormap_size>>3))),S){let l,U,c;w=new Uint8Array(y);let K=0;const Z=new Uint8Array(n);for(;N<y&&K<y;)if(l=a[N++],U=1+(127&l),128&l){for(c=0;c<n;++c)Z[c]=a[N++];for(c=0;c<U;++c)w.set(Z,K+c*n);K+=n*U}else{for(U*=n,c=0;c<U;++c)w[K+c]=a[N++];K+=U}}else w=a.subarray(N,N+=T?K.width*K.height:y);switch((48&K.flags)>>4){default:case 2:u=0,B=1,M=K.width,W=0,Y=1,C=K.height;break;case 0:u=0,B=1,M=K.width,W=K.height-1,Y=-1,C=-1;break;case 3:u=K.width-1,B=-1,M=-1,W=0,Y=1,C=K.height;break;case 1:u=K.width-1,B=-1,M=-1,W=K.height-1,Y=-1,C=-1}const A="_getImageData"+(J?"Grey":"")+K.pixel_size+"bits",E=Z[A](K,H,w,W,Y,C,u,B,M);l.getEngine()._uploadDataToTextureDirectly(l,E)}const Z={GetTGAHeader:c,UploadContent:K,_getImageData8bits:function(l,a,N,U,c,K,Z,w,S){const T=N,J=a,n=l.width,y=l.height;let H,u,W,B=0;const Y=new Uint8Array(n*y*4);for(W=U;W!==K;W+=c)for(u=Z;u!==S;u+=w,B++)H=T[B],Y[4*(u+n*W)+3]=255,Y[4*(u+n*W)+2]=J[3*H+0],Y[4*(u+n*W)+1]=J[3*H+1],Y[4*(u+n*W)+0]=J[3*H+2];return Y},_getImageData16bits:function(l,a,N,U,c,K,Z,w,S){const T=N,J=l.width,n=l.height;let y,H,u,W=0;const B=new Uint8Array(J*n*4);for(u=U;u!==K;u+=c)for(H=Z;H!==S;H+=w,W+=2){y=T[W+0]+(T[W+1]<<8);const l=255*((31744&y)>>10)/31|0,a=255*((992&y)>>5)/31|0,N=255*(31&y)/31|0;B[4*(H+J*u)+0]=l,B[4*(H+J*u)+1]=a,B[4*(H+J*u)+2]=N,B[4*(H+J*u)+3]=32768&y?0:255}return B},_getImageData24bits:function(l,a,N,U,c,K,Z,w,S){const T=N,J=l.width,n=l.height;let y,H,u=0;const W=new Uint8Array(J*n*4);for(H=U;H!==K;H+=c)for(y=Z;y!==S;y+=w,u+=3)W[4*(y+J*H)+3]=255,W[4*(y+J*H)+2]=T[u+0],W[4*(y+J*H)+1]=T[u+1],W[4*(y+J*H)+0]=T[u+2];return W},_getImageData32bits:function(l,a,N,U,c,K,Z,w,S){const T=N,J=l.width,n=l.height;let y,H,u=0;const W=new Uint8Array(J*n*4);for(H=U;H!==K;H+=c)for(y=Z;y!==S;y+=w,u+=4)W[4*(y+J*H)+2]=T[u+0],W[4*(y+J*H)+1]=T[u+1],W[4*(y+J*H)+0]=T[u+2],W[4*(y+J*H)+3]=T[u+3];return W},_getImageDataGrey8bits:function(l,a,N,U,c,K,Z,w,S){const T=N,J=l.width,n=l.height;let y,H,u,W=0;const B=new Uint8Array(J*n*4);for(u=U;u!==K;u+=c)for(H=Z;H!==S;H+=w,W++)y=T[W],B[4*(H+J*u)+0]=y,B[4*(H+J*u)+1]=y,B[4*(H+J*u)+2]=y,B[4*(H+J*u)+3]=255;return B},_getImageDataGrey16bits:function(l,a,N,U,c,K,Z,w,S){const T=N,J=l.width,n=l.height;let y,H,u=0;const W=new Uint8Array(J*n*4);for(H=U;H!==K;H+=c)for(y=Z;y!==S;y+=w,u+=2)W[4*(y+J*H)+0]=T[u+0],W[4*(y+J*H)+1]=T[u+0],W[4*(y+J*H)+2]=T[u+0],W[4*(y+J*H)+3]=T[u+1];return W}};class w{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(l,a,N){const U=new Uint8Array(l.buffer,l.byteOffset,l.byteLength),Z=c(U);N(Z.width,Z.height,a.generateMipMaps,!1,(()=>{K(a,U)}))}}}}]);