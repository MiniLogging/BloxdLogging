"use strict";(self.h66iwo8dvgq=self.h66iwo8dvgq||[]).push([[50],{14388:(b,X,P)=>{P.r(X),P.d(X,{_TGATextureLoader:()=>a});var Q=P(11700);function S(b){let X=0;return{id_length:b[X++],colormap_type:b[X++],image_type:b[X++],colormap_index:b[X++]|b[X++]<<8,colormap_length:b[X++]|b[X++]<<8,colormap_size:b[X++],origin:[b[X++]|b[X++]<<8,b[X++]|b[X++]<<8],width:b[X++]|b[X++]<<8,height:b[X++]|b[X++]<<8,pixel_size:b[X++],flags:b[X++]}}function d(b,X){if(X.length<19)return void Q.b.Error("Unable to load TGA file - Not enough data to contain header");let P=18;const d=S(X);if(d.id_length+P>X.length)return void Q.b.Error("Unable to load TGA file - Not enough data");P+=d.id_length;let a,u=!1,w=!1,f=!1;switch(d.image_type){case 9:u=!0;case 1:w=!0;break;case 10:u=!0;case 2:break;case 11:u=!0;case 3:f=!0}const O=d.pixel_size>>3,e=d.width*d.height*O;let Y,D,E,t,B,W,n;if(w&&(Y=X.subarray(P,P+=d.colormap_length*(d.colormap_size>>3))),u){let b,Q,S;a=new Uint8Array(e);let d=0;const N=new Uint8Array(O);for(;P<e&&d<e;)if(b=X[P++],Q=1+(127&b),128&b){for(S=0;S<O;++S)N[S]=X[P++];for(S=0;S<Q;++S)a.set(N,d+S*O);d+=O*Q}else{for(Q*=O,S=0;S<Q;++S)a[d+S]=X[P++];d+=Q}}else a=X.subarray(P,P+=w?d.width*d.height:e);switch((48&d.flags)>>4){default:case 2:D=0,t=1,n=d.width,E=0,B=1,W=d.height;break;case 0:D=0,t=1,n=d.width,E=d.height-1,B=-1,W=-1;break;case 3:D=d.width-1,t=-1,n=-1,E=0,B=1,W=d.height;break;case 1:D=d.width-1,t=-1,n=-1,E=d.height-1,B=-1,W=-1}const y="_getImageData"+(f?"Grey":"")+d.pixel_size+"bits",h=N[y](d,Y,a,E,B,W,D,t,n);b.getEngine()._uploadDataToTextureDirectly(b,h)}const N={GetTGAHeader:S,UploadContent:d,_getImageData8bits:function(b,X,P,Q,S,d,N,a,u){const w=P,f=X,O=b.width,e=b.height;let Y,D,E,t=0;const B=new Uint8Array(O*e*4);for(E=Q;E!==d;E+=S)for(D=N;D!==u;D+=a,t++)Y=w[t],B[4*(D+O*E)+3]=255,B[4*(D+O*E)+2]=f[3*Y+0],B[4*(D+O*E)+1]=f[3*Y+1],B[4*(D+O*E)+0]=f[3*Y+2];return B},_getImageData16bits:function(b,X,P,Q,S,d,N,a,u){const w=P,f=b.width,O=b.height;let e,Y,D,E=0;const t=new Uint8Array(f*O*4);for(D=Q;D!==d;D+=S)for(Y=N;Y!==u;Y+=a,E+=2){e=w[E+0]+(w[E+1]<<8);const b=255*((31744&e)>>10)/31|0,X=255*((992&e)>>5)/31|0,P=255*(31&e)/31|0;t[4*(Y+f*D)+0]=b,t[4*(Y+f*D)+1]=X,t[4*(Y+f*D)+2]=P,t[4*(Y+f*D)+3]=32768&e?0:255}return t},_getImageData24bits:function(b,X,P,Q,S,d,N,a,u){const w=P,f=b.width,O=b.height;let e,Y,D=0;const E=new Uint8Array(f*O*4);for(Y=Q;Y!==d;Y+=S)for(e=N;e!==u;e+=a,D+=3)E[4*(e+f*Y)+3]=255,E[4*(e+f*Y)+2]=w[D+0],E[4*(e+f*Y)+1]=w[D+1],E[4*(e+f*Y)+0]=w[D+2];return E},_getImageData32bits:function(b,X,P,Q,S,d,N,a,u){const w=P,f=b.width,O=b.height;let e,Y,D=0;const E=new Uint8Array(f*O*4);for(Y=Q;Y!==d;Y+=S)for(e=N;e!==u;e+=a,D+=4)E[4*(e+f*Y)+2]=w[D+0],E[4*(e+f*Y)+1]=w[D+1],E[4*(e+f*Y)+0]=w[D+2],E[4*(e+f*Y)+3]=w[D+3];return E},_getImageDataGrey8bits:function(b,X,P,Q,S,d,N,a,u){const w=P,f=b.width,O=b.height;let e,Y,D,E=0;const t=new Uint8Array(f*O*4);for(D=Q;D!==d;D+=S)for(Y=N;Y!==u;Y+=a,E++)e=w[E],t[4*(Y+f*D)+0]=e,t[4*(Y+f*D)+1]=e,t[4*(Y+f*D)+2]=e,t[4*(Y+f*D)+3]=255;return t},_getImageDataGrey16bits:function(b,X,P,Q,S,d,N,a,u){const w=P,f=b.width,O=b.height;let e,Y,D=0;const E=new Uint8Array(f*O*4);for(Y=Q;Y!==d;Y+=S)for(e=N;e!==u;e+=a,D+=2)E[4*(e+f*Y)+0]=w[D+0],E[4*(e+f*Y)+1]=w[D+0],E[4*(e+f*Y)+2]=w[D+0],E[4*(e+f*Y)+3]=w[D+1];return E}};class a{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(b,X,P){const Q=new Uint8Array(b.buffer,b.byteOffset,b.byteLength),N=S(Q);P(N.width,N.height,X.generateMipMaps,!1,(()=>{d(X,Q)}))}}}}]);