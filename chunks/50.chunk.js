"use strict";(self.n4ygn1cq9vg=self.n4ygn1cq9vg||[]).push([[50],{14912:(e,d,v)=>{v.r(d),v.d(d,{_TGATextureLoader:()=>X});var P=v(12253);function p(e){let d=0;return{id_length:e[d++],colormap_type:e[d++],image_type:e[d++],colormap_index:e[d++]|e[d++]<<8,colormap_length:e[d++]|e[d++]<<8,colormap_size:e[d++],origin:[e[d++]|e[d++]<<8,e[d++]|e[d++]<<8],width:e[d++]|e[d++]<<8,height:e[d++]|e[d++]<<8,pixel_size:e[d++],flags:e[d++]}}function L(e,d){if(d.length<19)return void P.c.Error("Unable to load TGA file - Not enough data to contain header");let v=18;const L=p(d);if(L.id_length+v>d.length)return void P.c.Error("Unable to load TGA file - Not enough data");v+=L.id_length;let X,z=!1,W=!1,V=!1;switch(L.image_type){case 9:z=!0;case 1:W=!0;break;case 10:z=!0;case 2:break;case 11:z=!0;case 3:V=!0}const k=L.pixel_size>>3,g=L.width*L.height*k;let F,w,G,U,D,C,q;if(W&&(F=d.subarray(v,v+=L.colormap_length*(L.colormap_size>>3))),z){let e,P,p;X=new Uint8Array(g);let L=0;const B=new Uint8Array(k);for(;v<g&&L<g;)if(e=d[v++],P=1+(127&e),128&e){for(p=0;p<k;++p)B[p]=d[v++];for(p=0;p<P;++p)X.set(B,L+p*k);L+=k*P}else{for(P*=k,p=0;p<P;++p)X[L+p]=d[v++];L+=P}}else X=d.subarray(v,v+=W?L.width*L.height:g);switch((48&L.flags)>>4){default:case 2:w=0,U=1,q=L.width,G=0,D=1,C=L.height;break;case 0:w=0,U=1,q=L.width,G=L.height-1,D=-1,C=-1;break;case 3:w=L.width-1,U=-1,q=-1,G=0,D=1,C=L.height;break;case 1:w=L.width-1,U=-1,q=-1,G=L.height-1,D=-1,C=-1}const h="_getImageData"+(V?"Grey":"")+L.pixel_size+"bits",l=B[h](L,F,X,G,D,C,w,U,q);e.getEngine()._uploadDataToTextureDirectly(e,l)}const B={GetTGAHeader:p,UploadContent:L,_getImageData8bits:function(e,d,v,P,p,L,B,X,z){const W=v,V=d,k=e.width,g=e.height;let F,w,G,U=0;const D=new Uint8Array(k*g*4);for(G=P;G!==L;G+=p)for(w=B;w!==z;w+=X,U++)F=W[U],D[4*(w+k*G)+3]=255,D[4*(w+k*G)+2]=V[3*F+0],D[4*(w+k*G)+1]=V[3*F+1],D[4*(w+k*G)+0]=V[3*F+2];return D},_getImageData16bits:function(e,d,v,P,p,L,B,X,z){const W=v,V=e.width,k=e.height;let g,F,w,G=0;const U=new Uint8Array(V*k*4);for(w=P;w!==L;w+=p)for(F=B;F!==z;F+=X,G+=2){g=W[G+0]+(W[G+1]<<8);const e=255*((31744&g)>>10)/31|0,d=255*((992&g)>>5)/31|0,v=255*(31&g)/31|0;U[4*(F+V*w)+0]=e,U[4*(F+V*w)+1]=d,U[4*(F+V*w)+2]=v,U[4*(F+V*w)+3]=32768&g?0:255}return U},_getImageData24bits:function(e,d,v,P,p,L,B,X,z){const W=v,V=e.width,k=e.height;let g,F,w=0;const G=new Uint8Array(V*k*4);for(F=P;F!==L;F+=p)for(g=B;g!==z;g+=X,w+=3)G[4*(g+V*F)+3]=255,G[4*(g+V*F)+2]=W[w+0],G[4*(g+V*F)+1]=W[w+1],G[4*(g+V*F)+0]=W[w+2];return G},_getImageData32bits:function(e,d,v,P,p,L,B,X,z){const W=v,V=e.width,k=e.height;let g,F,w=0;const G=new Uint8Array(V*k*4);for(F=P;F!==L;F+=p)for(g=B;g!==z;g+=X,w+=4)G[4*(g+V*F)+2]=W[w+0],G[4*(g+V*F)+1]=W[w+1],G[4*(g+V*F)+0]=W[w+2],G[4*(g+V*F)+3]=W[w+3];return G},_getImageDataGrey8bits:function(e,d,v,P,p,L,B,X,z){const W=v,V=e.width,k=e.height;let g,F,w,G=0;const U=new Uint8Array(V*k*4);for(w=P;w!==L;w+=p)for(F=B;F!==z;F+=X,G++)g=W[G],U[4*(F+V*w)+0]=g,U[4*(F+V*w)+1]=g,U[4*(F+V*w)+2]=g,U[4*(F+V*w)+3]=255;return U},_getImageDataGrey16bits:function(e,d,v,P,p,L,B,X,z){const W=v,V=e.width,k=e.height;let g,F,w=0;const G=new Uint8Array(V*k*4);for(F=P;F!==L;F+=p)for(g=B;g!==z;g+=X,w+=2)G[4*(g+V*F)+0]=W[w+0],G[4*(g+V*F)+1]=W[w+0],G[4*(g+V*F)+2]=W[w+0],G[4*(g+V*F)+3]=W[w+1];return G}};class X{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(e,d,v){const P=new Uint8Array(e.buffer,e.byteOffset,e.byteLength),B=p(P);v(B.width,B.height,d.generateMipMaps,!1,(()=>{L(d,P)}))}}}}]);