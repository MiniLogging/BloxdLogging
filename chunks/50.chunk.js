"use strict";(self.rvold1i0ywi=self.rvold1i0ywi||[]).push([[50],{13720:(F,b,Q)=>{Q.r(b),Q.d(b,{_TGATextureLoader:()=>W});var C=Q(11146);function z(F){let b=0;return{id_length:F[b++],colormap_type:F[b++],image_type:F[b++],colormap_index:F[b++]|F[b++]<<8,colormap_length:F[b++]|F[b++]<<8,colormap_size:F[b++],origin:[F[b++]|F[b++]<<8,F[b++]|F[b++]<<8],width:F[b++]|F[b++]<<8,height:F[b++]|F[b++]<<8,pixel_size:F[b++],flags:F[b++]}}function t(F,b){if(b.length<19)return void C.e.Error("Unable to load TGA file - Not enough data to contain header");let Q=18;const t=z(b);if(t.id_length+Q>b.length)return void C.e.Error("Unable to load TGA file - Not enough data");Q+=t.id_length;let W,Z=!1,q=!1,G=!1;switch(t.image_type){case 9:Z=!0;case 1:q=!0;break;case 10:Z=!0;case 2:break;case 11:Z=!0;case 3:G=!0}const K=t.pixel_size>>3,e=t.width*t.height*K;let N,y,E,c,X,L,i;if(q&&(N=b.subarray(Q,Q+=t.colormap_length*(t.colormap_size>>3))),Z){let F,C,z;W=new Uint8Array(e);let t=0;const g=new Uint8Array(K);for(;Q<e&&t<e;)if(F=b[Q++],C=1+(127&F),128&F){for(z=0;z<K;++z)g[z]=b[Q++];for(z=0;z<C;++z)W.set(g,t+z*K);t+=K*C}else{for(C*=K,z=0;z<C;++z)W[t+z]=b[Q++];t+=C}}else W=b.subarray(Q,Q+=q?t.width*t.height:e);switch((48&t.flags)>>4){default:case 2:y=0,c=1,i=t.width,E=0,X=1,L=t.height;break;case 0:y=0,c=1,i=t.width,E=t.height-1,X=-1,L=-1;break;case 3:y=t.width-1,c=-1,i=-1,E=0,X=1,L=t.height;break;case 1:y=t.width-1,c=-1,i=-1,E=t.height-1,X=-1,L=-1}const f="_getImageData"+(G?"Grey":"")+t.pixel_size+"bits",k=g[f](t,N,W,E,X,L,y,c,i);F.getEngine()._uploadDataToTextureDirectly(F,k)}const g={GetTGAHeader:z,UploadContent:t,_getImageData8bits:function(F,b,Q,C,z,t,g,W,Z){const q=Q,G=b,K=F.width,e=F.height;let N,y,E,c=0;const X=new Uint8Array(K*e*4);for(E=C;E!==t;E+=z)for(y=g;y!==Z;y+=W,c++)N=q[c],X[4*(y+K*E)+3]=255,X[4*(y+K*E)+2]=G[3*N+0],X[4*(y+K*E)+1]=G[3*N+1],X[4*(y+K*E)+0]=G[3*N+2];return X},_getImageData16bits:function(F,b,Q,C,z,t,g,W,Z){const q=Q,G=F.width,K=F.height;let e,N,y,E=0;const c=new Uint8Array(G*K*4);for(y=C;y!==t;y+=z)for(N=g;N!==Z;N+=W,E+=2){e=q[E+0]+(q[E+1]<<8);const F=255*((31744&e)>>10)/31|0,b=255*((992&e)>>5)/31|0,Q=255*(31&e)/31|0;c[4*(N+G*y)+0]=F,c[4*(N+G*y)+1]=b,c[4*(N+G*y)+2]=Q,c[4*(N+G*y)+3]=32768&e?0:255}return c},_getImageData24bits:function(F,b,Q,C,z,t,g,W,Z){const q=Q,G=F.width,K=F.height;let e,N,y=0;const E=new Uint8Array(G*K*4);for(N=C;N!==t;N+=z)for(e=g;e!==Z;e+=W,y+=3)E[4*(e+G*N)+3]=255,E[4*(e+G*N)+2]=q[y+0],E[4*(e+G*N)+1]=q[y+1],E[4*(e+G*N)+0]=q[y+2];return E},_getImageData32bits:function(F,b,Q,C,z,t,g,W,Z){const q=Q,G=F.width,K=F.height;let e,N,y=0;const E=new Uint8Array(G*K*4);for(N=C;N!==t;N+=z)for(e=g;e!==Z;e+=W,y+=4)E[4*(e+G*N)+2]=q[y+0],E[4*(e+G*N)+1]=q[y+1],E[4*(e+G*N)+0]=q[y+2],E[4*(e+G*N)+3]=q[y+3];return E},_getImageDataGrey8bits:function(F,b,Q,C,z,t,g,W,Z){const q=Q,G=F.width,K=F.height;let e,N,y,E=0;const c=new Uint8Array(G*K*4);for(y=C;y!==t;y+=z)for(N=g;N!==Z;N+=W,E++)e=q[E],c[4*(N+G*y)+0]=e,c[4*(N+G*y)+1]=e,c[4*(N+G*y)+2]=e,c[4*(N+G*y)+3]=255;return c},_getImageDataGrey16bits:function(F,b,Q,C,z,t,g,W,Z){const q=Q,G=F.width,K=F.height;let e,N,y=0;const E=new Uint8Array(G*K*4);for(N=C;N!==t;N+=z)for(e=g;e!==Z;e+=W,y+=2)E[4*(e+G*N)+0]=q[y+0],E[4*(e+G*N)+1]=q[y+0],E[4*(e+G*N)+2]=q[y+0],E[4*(e+G*N)+3]=q[y+1];return E}};class W{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(F,b,Q){const C=new Uint8Array(F.buffer,F.byteOffset,F.byteLength),g=z(C);Q(g.width,g.height,b.generateMipMaps,!1,(()=>{t(b,C)}))}}}}]);