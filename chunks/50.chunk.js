"use strict";(self.c2c3ycupenc=self.c2c3ycupenc||[]).push([[50],{14140:(c,r,D)=>{D.r(r),D.d(r,{_TGATextureLoader:()=>a});var W=D(11509);function B(c){let r=0;return{id_length:c[r++],colormap_type:c[r++],image_type:c[r++],colormap_index:c[r++]|c[r++]<<8,colormap_length:c[r++]|c[r++]<<8,colormap_size:c[r++],origin:[c[r++]|c[r++]<<8,c[r++]|c[r++]<<8],width:c[r++]|c[r++]<<8,height:c[r++]|c[r++]<<8,pixel_size:c[r++],flags:c[r++]}}function t(c,r){if(r.length<19)return void W.e.Error("Unable to load TGA file - Not enough data to contain header");let D=18;const t=B(r);if(t.id_length+D>r.length)return void W.e.Error("Unable to load TGA file - Not enough data");D+=t.id_length;let a,H=!1,x=!1,M=!1;switch(t.image_type){case 9:H=!0;case 1:x=!0;break;case 10:H=!0;case 2:break;case 11:H=!0;case 3:M=!0}const E=t.pixel_size>>3,m=t.width*t.height*E;let Y,v,k,w,Z,J,q;if(x&&(Y=r.subarray(D,D+=t.colormap_length*(t.colormap_size>>3))),H){let c,W,B;a=new Uint8Array(m);let t=0;const u=new Uint8Array(E);for(;D<m&&t<m;)if(c=r[D++],W=1+(127&c),128&c){for(B=0;B<E;++B)u[B]=r[D++];for(B=0;B<W;++B)a.set(u,t+B*E);t+=E*W}else{for(W*=E,B=0;B<W;++B)a[t+B]=r[D++];t+=W}}else a=r.subarray(D,D+=x?t.width*t.height:m);switch((48&t.flags)>>4){default:case 2:v=0,w=1,q=t.width,k=0,Z=1,J=t.height;break;case 0:v=0,w=1,q=t.width,k=t.height-1,Z=-1,J=-1;break;case 3:v=t.width-1,w=-1,q=-1,k=0,Z=1,J=t.height;break;case 1:v=t.width-1,w=-1,q=-1,k=t.height-1,Z=-1,J=-1}const j="_getImageData"+(M?"Grey":"")+t.pixel_size+"bits",X=u[j](t,Y,a,k,Z,J,v,w,q);c.getEngine()._uploadDataToTextureDirectly(c,X)}const u={GetTGAHeader:B,UploadContent:t,_getImageData8bits:function(c,r,D,W,B,t,u,a,H){const x=D,M=r,E=c.width,m=c.height;let Y,v,k,w=0;const Z=new Uint8Array(E*m*4);for(k=W;k!==t;k+=B)for(v=u;v!==H;v+=a,w++)Y=x[w],Z[4*(v+E*k)+3]=255,Z[4*(v+E*k)+2]=M[3*Y+0],Z[4*(v+E*k)+1]=M[3*Y+1],Z[4*(v+E*k)+0]=M[3*Y+2];return Z},_getImageData16bits:function(c,r,D,W,B,t,u,a,H){const x=D,M=c.width,E=c.height;let m,Y,v,k=0;const w=new Uint8Array(M*E*4);for(v=W;v!==t;v+=B)for(Y=u;Y!==H;Y+=a,k+=2){m=x[k+0]+(x[k+1]<<8);const c=255*((31744&m)>>10)/31|0,r=255*((992&m)>>5)/31|0,D=255*(31&m)/31|0;w[4*(Y+M*v)+0]=c,w[4*(Y+M*v)+1]=r,w[4*(Y+M*v)+2]=D,w[4*(Y+M*v)+3]=32768&m?0:255}return w},_getImageData24bits:function(c,r,D,W,B,t,u,a,H){const x=D,M=c.width,E=c.height;let m,Y,v=0;const k=new Uint8Array(M*E*4);for(Y=W;Y!==t;Y+=B)for(m=u;m!==H;m+=a,v+=3)k[4*(m+M*Y)+3]=255,k[4*(m+M*Y)+2]=x[v+0],k[4*(m+M*Y)+1]=x[v+1],k[4*(m+M*Y)+0]=x[v+2];return k},_getImageData32bits:function(c,r,D,W,B,t,u,a,H){const x=D,M=c.width,E=c.height;let m,Y,v=0;const k=new Uint8Array(M*E*4);for(Y=W;Y!==t;Y+=B)for(m=u;m!==H;m+=a,v+=4)k[4*(m+M*Y)+2]=x[v+0],k[4*(m+M*Y)+1]=x[v+1],k[4*(m+M*Y)+0]=x[v+2],k[4*(m+M*Y)+3]=x[v+3];return k},_getImageDataGrey8bits:function(c,r,D,W,B,t,u,a,H){const x=D,M=c.width,E=c.height;let m,Y,v,k=0;const w=new Uint8Array(M*E*4);for(v=W;v!==t;v+=B)for(Y=u;Y!==H;Y+=a,k++)m=x[k],w[4*(Y+M*v)+0]=m,w[4*(Y+M*v)+1]=m,w[4*(Y+M*v)+2]=m,w[4*(Y+M*v)+3]=255;return w},_getImageDataGrey16bits:function(c,r,D,W,B,t,u,a,H){const x=D,M=c.width,E=c.height;let m,Y,v=0;const k=new Uint8Array(M*E*4);for(Y=W;Y!==t;Y+=B)for(m=u;m!==H;m+=a,v+=2)k[4*(m+M*Y)+0]=x[v+0],k[4*(m+M*Y)+1]=x[v+0],k[4*(m+M*Y)+2]=x[v+0],k[4*(m+M*Y)+3]=x[v+1];return k}};class a{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(c,r,D){const W=new Uint8Array(c.buffer,c.byteOffset,c.byteLength),u=B(W);D(u.width,u.height,r.generateMipMaps,!1,(()=>{t(r,W)}))}}}}]);