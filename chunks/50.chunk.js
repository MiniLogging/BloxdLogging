"use strict";(self.ufnpnb83drd=self.ufnpnb83drd||[]).push([[50],{14847:(E,U,g)=>{g.r(U),g.d(U,{_TGATextureLoader:()=>u});var N=g(12186);function L(E){let U=0;return{id_length:E[U++],colormap_type:E[U++],image_type:E[U++],colormap_index:E[U++]|E[U++]<<8,colormap_length:E[U++]|E[U++]<<8,colormap_size:E[U++],origin:[E[U++]|E[U++]<<8,E[U++]|E[U++]<<8],width:E[U++]|E[U++]<<8,height:E[U++]|E[U++]<<8,pixel_size:E[U++],flags:E[U++]}}function D(E,U){if(U.length<19)return void N.d.Error("Unable to load TGA file - Not enough data to contain header");let g=18;const D=L(U);if(D.id_length+g>U.length)return void N.d.Error("Unable to load TGA file - Not enough data");g+=D.id_length;let u,s=!1,C=!1,B=!1;switch(D.image_type){case 9:s=!0;case 1:C=!0;break;case 10:s=!0;case 2:break;case 11:s=!0;case 3:B=!0}const P=D.pixel_size>>3,F=D.width*D.height*P;let f,d,I,y,h,V,e;if(C&&(f=U.subarray(g,g+=D.colormap_length*(D.colormap_size>>3))),s){let E,N,L;u=new Uint8Array(F);let D=0;const S=new Uint8Array(P);for(;g<F&&D<F;)if(E=U[g++],N=1+(127&E),128&E){for(L=0;L<P;++L)S[L]=U[g++];for(L=0;L<N;++L)u.set(S,D+L*P);D+=P*N}else{for(N*=P,L=0;L<N;++L)u[D+L]=U[g++];D+=N}}else u=U.subarray(g,g+=C?D.width*D.height:F);switch((48&D.flags)>>4){default:case 2:d=0,y=1,e=D.width,I=0,h=1,V=D.height;break;case 0:d=0,y=1,e=D.width,I=D.height-1,h=-1,V=-1;break;case 3:d=D.width-1,y=-1,e=-1,I=0,h=1,V=D.height;break;case 1:d=D.width-1,y=-1,e=-1,I=D.height-1,h=-1,V=-1}const x="_getImageData"+(B?"Grey":"")+D.pixel_size+"bits",l=S[x](D,f,u,I,h,V,d,y,e);E.getEngine()._uploadDataToTextureDirectly(E,l)}const S={GetTGAHeader:L,UploadContent:D,_getImageData8bits:function(E,U,g,N,L,D,S,u,s){const C=g,B=U,P=E.width,F=E.height;let f,d,I,y=0;const h=new Uint8Array(P*F*4);for(I=N;I!==D;I+=L)for(d=S;d!==s;d+=u,y++)f=C[y],h[4*(d+P*I)+3]=255,h[4*(d+P*I)+2]=B[3*f+0],h[4*(d+P*I)+1]=B[3*f+1],h[4*(d+P*I)+0]=B[3*f+2];return h},_getImageData16bits:function(E,U,g,N,L,D,S,u,s){const C=g,B=E.width,P=E.height;let F,f,d,I=0;const y=new Uint8Array(B*P*4);for(d=N;d!==D;d+=L)for(f=S;f!==s;f+=u,I+=2){F=C[I+0]+(C[I+1]<<8);const E=255*((31744&F)>>10)/31|0,U=255*((992&F)>>5)/31|0,g=255*(31&F)/31|0;y[4*(f+B*d)+0]=E,y[4*(f+B*d)+1]=U,y[4*(f+B*d)+2]=g,y[4*(f+B*d)+3]=32768&F?0:255}return y},_getImageData24bits:function(E,U,g,N,L,D,S,u,s){const C=g,B=E.width,P=E.height;let F,f,d=0;const I=new Uint8Array(B*P*4);for(f=N;f!==D;f+=L)for(F=S;F!==s;F+=u,d+=3)I[4*(F+B*f)+3]=255,I[4*(F+B*f)+2]=C[d+0],I[4*(F+B*f)+1]=C[d+1],I[4*(F+B*f)+0]=C[d+2];return I},_getImageData32bits:function(E,U,g,N,L,D,S,u,s){const C=g,B=E.width,P=E.height;let F,f,d=0;const I=new Uint8Array(B*P*4);for(f=N;f!==D;f+=L)for(F=S;F!==s;F+=u,d+=4)I[4*(F+B*f)+2]=C[d+0],I[4*(F+B*f)+1]=C[d+1],I[4*(F+B*f)+0]=C[d+2],I[4*(F+B*f)+3]=C[d+3];return I},_getImageDataGrey8bits:function(E,U,g,N,L,D,S,u,s){const C=g,B=E.width,P=E.height;let F,f,d,I=0;const y=new Uint8Array(B*P*4);for(d=N;d!==D;d+=L)for(f=S;f!==s;f+=u,I++)F=C[I],y[4*(f+B*d)+0]=F,y[4*(f+B*d)+1]=F,y[4*(f+B*d)+2]=F,y[4*(f+B*d)+3]=255;return y},_getImageDataGrey16bits:function(E,U,g,N,L,D,S,u,s){const C=g,B=E.width,P=E.height;let F,f,d=0;const I=new Uint8Array(B*P*4);for(f=N;f!==D;f+=L)for(F=S;F!==s;F+=u,d+=2)I[4*(F+B*f)+0]=C[d+0],I[4*(F+B*f)+1]=C[d+0],I[4*(F+B*f)+2]=C[d+0],I[4*(F+B*f)+3]=C[d+1];return I}};class u{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(E,U,g){const N=new Uint8Array(E.buffer,E.byteOffset,E.byteLength),S=L(N);g(S.width,S.height,U.generateMipMaps,!1,(()=>{D(U,N)}))}}}}]);