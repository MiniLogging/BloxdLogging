"use strict";(self.isj1uwvwrek=self.isj1uwvwrek||[]).push([[50],{15351:(I,x,L)=>{L.r(x),L.d(x,{_TGATextureLoader:()=>p});var F=L(12809);function X(I){let x=0;return{id_length:I[x++],colormap_type:I[x++],image_type:I[x++],colormap_index:I[x++]|I[x++]<<8,colormap_length:I[x++]|I[x++]<<8,colormap_size:I[x++],origin:[I[x++]|I[x++]<<8,I[x++]|I[x++]<<8],width:I[x++]|I[x++]<<8,height:I[x++]|I[x++]<<8,pixel_size:I[x++],flags:I[x++]}}function G(I,x){if(x.length<19)return void F.c.Error("Unable to load TGA file - Not enough data to contain header");let L=18;const G=X(x);if(G.id_length+L>x.length)return void F.c.Error("Unable to load TGA file - Not enough data");L+=G.id_length;let p,B=!1,l=!1,W=!1;switch(G.image_type){case 9:B=!0;case 1:l=!0;break;case 10:B=!0;case 2:break;case 11:B=!0;case 3:W=!0}const Q=G.pixel_size>>3,e=G.width*G.height*Q;let g,v,z,H,s,U,q;if(l&&(g=x.subarray(L,L+=G.colormap_length*(G.colormap_size>>3))),B){let I,F,X;p=new Uint8Array(e);let G=0;const Y=new Uint8Array(Q);for(;L<e&&G<e;)if(I=x[L++],F=1+(127&I),128&I){for(X=0;X<Q;++X)Y[X]=x[L++];for(X=0;X<F;++X)p.set(Y,G+X*Q);G+=Q*F}else{for(F*=Q,X=0;X<F;++X)p[G+X]=x[L++];G+=F}}else p=x.subarray(L,L+=l?G.width*G.height:e);switch((48&G.flags)>>4){default:case 2:v=0,H=1,q=G.width,z=0,s=1,U=G.height;break;case 0:v=0,H=1,q=G.width,z=G.height-1,s=-1,U=-1;break;case 3:v=G.width-1,H=-1,q=-1,z=0,s=1,U=G.height;break;case 1:v=G.width-1,H=-1,q=-1,z=G.height-1,s=-1,U=-1}const y="_getImageData"+(W?"Grey":"")+G.pixel_size+"bits",T=Y[y](G,g,p,z,s,U,v,H,q);I.getEngine()._uploadDataToTextureDirectly(I,T)}const Y={GetTGAHeader:X,UploadContent:G,_getImageData8bits:function(I,x,L,F,X,G,Y,p,B){const l=L,W=x,Q=I.width,e=I.height;let g,v,z,H=0;const s=new Uint8Array(Q*e*4);for(z=F;z!==G;z+=X)for(v=Y;v!==B;v+=p,H++)g=l[H],s[4*(v+Q*z)+3]=255,s[4*(v+Q*z)+2]=W[3*g+0],s[4*(v+Q*z)+1]=W[3*g+1],s[4*(v+Q*z)+0]=W[3*g+2];return s},_getImageData16bits:function(I,x,L,F,X,G,Y,p,B){const l=L,W=I.width,Q=I.height;let e,g,v,z=0;const H=new Uint8Array(W*Q*4);for(v=F;v!==G;v+=X)for(g=Y;g!==B;g+=p,z+=2){e=l[z+0]+(l[z+1]<<8);const I=255*((31744&e)>>10)/31|0,x=255*((992&e)>>5)/31|0,L=255*(31&e)/31|0;H[4*(g+W*v)+0]=I,H[4*(g+W*v)+1]=x,H[4*(g+W*v)+2]=L,H[4*(g+W*v)+3]=32768&e?0:255}return H},_getImageData24bits:function(I,x,L,F,X,G,Y,p,B){const l=L,W=I.width,Q=I.height;let e,g,v=0;const z=new Uint8Array(W*Q*4);for(g=F;g!==G;g+=X)for(e=Y;e!==B;e+=p,v+=3)z[4*(e+W*g)+3]=255,z[4*(e+W*g)+2]=l[v+0],z[4*(e+W*g)+1]=l[v+1],z[4*(e+W*g)+0]=l[v+2];return z},_getImageData32bits:function(I,x,L,F,X,G,Y,p,B){const l=L,W=I.width,Q=I.height;let e,g,v=0;const z=new Uint8Array(W*Q*4);for(g=F;g!==G;g+=X)for(e=Y;e!==B;e+=p,v+=4)z[4*(e+W*g)+2]=l[v+0],z[4*(e+W*g)+1]=l[v+1],z[4*(e+W*g)+0]=l[v+2],z[4*(e+W*g)+3]=l[v+3];return z},_getImageDataGrey8bits:function(I,x,L,F,X,G,Y,p,B){const l=L,W=I.width,Q=I.height;let e,g,v,z=0;const H=new Uint8Array(W*Q*4);for(v=F;v!==G;v+=X)for(g=Y;g!==B;g+=p,z++)e=l[z],H[4*(g+W*v)+0]=e,H[4*(g+W*v)+1]=e,H[4*(g+W*v)+2]=e,H[4*(g+W*v)+3]=255;return H},_getImageDataGrey16bits:function(I,x,L,F,X,G,Y,p,B){const l=L,W=I.width,Q=I.height;let e,g,v=0;const z=new Uint8Array(W*Q*4);for(g=F;g!==G;g+=X)for(e=Y;e!==B;e+=p,v+=2)z[4*(e+W*g)+0]=l[v+0],z[4*(e+W*g)+1]=l[v+0],z[4*(e+W*g)+2]=l[v+0],z[4*(e+W*g)+3]=l[v+1];return z}};class p{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(I,x,L){const F=new Uint8Array(I.buffer,I.byteOffset,I.byteLength),Y=X(F);L(Y.width,Y.height,x.generateMipMaps,!1,(()=>{G(x,F)}))}}}}]);