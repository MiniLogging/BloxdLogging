"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[50],{13661:(B,I,C)=>{C.r(I),C.d(I,{_TGATextureLoader:()=>L});var M=C(11027);function x(B){let I=0;return{id_length:B[I++],colormap_type:B[I++],image_type:B[I++],colormap_index:B[I++]|B[I++]<<8,colormap_length:B[I++]|B[I++]<<8,colormap_size:B[I++],origin:[B[I++]|B[I++]<<8,B[I++]|B[I++]<<8],width:B[I++]|B[I++]<<8,height:B[I++]|B[I++]<<8,pixel_size:B[I++],flags:B[I++]}}function y(B,I){if(I.length<19)return void M.b.Error("Unable to load TGA file - Not enough data to contain header");let C=18;const y=x(I);if(y.id_length+C>I.length)return void M.b.Error("Unable to load TGA file - Not enough data");C+=y.id_length;let L,e=!1,g=!1,N=!1;switch(y.image_type){case 9:e=!0;case 1:g=!0;break;case 10:e=!0;case 2:break;case 11:e=!0;case 3:N=!0}const R=y.pixel_size>>3,H=y.width*y.height*R;let F,k,q,S,o,U,G;if(g&&(F=I.subarray(C,C+=y.colormap_length*(y.colormap_size>>3))),e){let B,M,x;L=new Uint8Array(H);let y=0;const f=new Uint8Array(R);for(;C<H&&y<H;)if(B=I[C++],M=1+(127&B),128&B){for(x=0;x<R;++x)f[x]=I[C++];for(x=0;x<M;++x)L.set(f,y+x*R);y+=R*M}else{for(M*=R,x=0;x<M;++x)L[y+x]=I[C++];y+=M}}else L=I.subarray(C,C+=g?y.width*y.height:H);switch((48&y.flags)>>4){default:case 2:k=0,S=1,G=y.width,q=0,o=1,U=y.height;break;case 0:k=0,S=1,G=y.width,q=y.height-1,o=-1,U=-1;break;case 3:k=y.width-1,S=-1,G=-1,q=0,o=1,U=y.height;break;case 1:k=y.width-1,S=-1,G=-1,q=y.height-1,o=-1,U=-1}const V="_getImageData"+(N?"Grey":"")+y.pixel_size+"bits",c=f[V](y,F,L,q,o,U,k,S,G);B.getEngine()._uploadDataToTextureDirectly(B,c)}const f={GetTGAHeader:x,UploadContent:y,_getImageData8bits:function(B,I,C,M,x,y,f,L,e){const g=C,N=I,R=B.width,H=B.height;let F,k,q,S=0;const o=new Uint8Array(R*H*4);for(q=M;q!==y;q+=x)for(k=f;k!==e;k+=L,S++)F=g[S],o[4*(k+R*q)+3]=255,o[4*(k+R*q)+2]=N[3*F+0],o[4*(k+R*q)+1]=N[3*F+1],o[4*(k+R*q)+0]=N[3*F+2];return o},_getImageData16bits:function(B,I,C,M,x,y,f,L,e){const g=C,N=B.width,R=B.height;let H,F,k,q=0;const S=new Uint8Array(N*R*4);for(k=M;k!==y;k+=x)for(F=f;F!==e;F+=L,q+=2){H=g[q+0]+(g[q+1]<<8);const B=255*((31744&H)>>10)/31|0,I=255*((992&H)>>5)/31|0,C=255*(31&H)/31|0;S[4*(F+N*k)+0]=B,S[4*(F+N*k)+1]=I,S[4*(F+N*k)+2]=C,S[4*(F+N*k)+3]=32768&H?0:255}return S},_getImageData24bits:function(B,I,C,M,x,y,f,L,e){const g=C,N=B.width,R=B.height;let H,F,k=0;const q=new Uint8Array(N*R*4);for(F=M;F!==y;F+=x)for(H=f;H!==e;H+=L,k+=3)q[4*(H+N*F)+3]=255,q[4*(H+N*F)+2]=g[k+0],q[4*(H+N*F)+1]=g[k+1],q[4*(H+N*F)+0]=g[k+2];return q},_getImageData32bits:function(B,I,C,M,x,y,f,L,e){const g=C,N=B.width,R=B.height;let H,F,k=0;const q=new Uint8Array(N*R*4);for(F=M;F!==y;F+=x)for(H=f;H!==e;H+=L,k+=4)q[4*(H+N*F)+2]=g[k+0],q[4*(H+N*F)+1]=g[k+1],q[4*(H+N*F)+0]=g[k+2],q[4*(H+N*F)+3]=g[k+3];return q},_getImageDataGrey8bits:function(B,I,C,M,x,y,f,L,e){const g=C,N=B.width,R=B.height;let H,F,k,q=0;const S=new Uint8Array(N*R*4);for(k=M;k!==y;k+=x)for(F=f;F!==e;F+=L,q++)H=g[q],S[4*(F+N*k)+0]=H,S[4*(F+N*k)+1]=H,S[4*(F+N*k)+2]=H,S[4*(F+N*k)+3]=255;return S},_getImageDataGrey16bits:function(B,I,C,M,x,y,f,L,e){const g=C,N=B.width,R=B.height;let H,F,k=0;const q=new Uint8Array(N*R*4);for(F=M;F!==y;F+=x)for(H=f;H!==e;H+=L,k+=2)q[4*(H+N*F)+0]=g[k+0],q[4*(H+N*F)+1]=g[k+0],q[4*(H+N*F)+2]=g[k+0],q[4*(H+N*F)+3]=g[k+1];return q}};class L{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(B,I,C){const M=new Uint8Array(B.buffer,B.byteOffset,B.byteLength),f=x(M);C(f.width,f.height,I.generateMipMaps,!1,(()=>{y(I,M)}))}}}}]);