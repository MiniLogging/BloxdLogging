"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[50],{13580:(q,S,b)=>{b.r(S),b.d(S,{_TGATextureLoader:()=>g});var z=b(10943);function C(q){let S=0;return{id_length:q[S++],colormap_type:q[S++],image_type:q[S++],colormap_index:q[S++]|q[S++]<<8,colormap_length:q[S++]|q[S++]<<8,colormap_size:q[S++],origin:[q[S++]|q[S++]<<8,q[S++]|q[S++]<<8],width:q[S++]|q[S++]<<8,height:q[S++]|q[S++]<<8,pixel_size:q[S++],flags:q[S++]}}function v(q,S){if(S.length<19)return void z.b.Error("Unable to load TGA file - Not enough data to contain header");let b=18;const v=C(S);if(v.id_length+b>S.length)return void z.b.Error("Unable to load TGA file - Not enough data");b+=v.id_length;let g,r=!1,I=!1,V=!1;switch(v.image_type){case 9:r=!0;case 1:I=!0;break;case 10:r=!0;case 2:break;case 11:r=!0;case 3:V=!0}const l=v.pixel_size>>3,y=v.width*v.height*l;let R,G,Z,H,Q,k,W;if(I&&(R=S.subarray(b,b+=v.colormap_length*(v.colormap_size>>3))),r){let q,z,C;g=new Uint8Array(y);let v=0;const U=new Uint8Array(l);for(;b<y&&v<y;)if(q=S[b++],z=1+(127&q),128&q){for(C=0;C<l;++C)U[C]=S[b++];for(C=0;C<z;++C)g.set(U,v+C*l);v+=l*z}else{for(z*=l,C=0;C<z;++C)g[v+C]=S[b++];v+=z}}else g=S.subarray(b,b+=I?v.width*v.height:y);switch((48&v.flags)>>4){default:case 2:G=0,H=1,W=v.width,Z=0,Q=1,k=v.height;break;case 0:G=0,H=1,W=v.width,Z=v.height-1,Q=-1,k=-1;break;case 3:G=v.width-1,H=-1,W=-1,Z=0,Q=1,k=v.height;break;case 1:G=v.width-1,H=-1,W=-1,Z=v.height-1,Q=-1,k=-1}const N="_getImageData"+(V?"Grey":"")+v.pixel_size+"bits",u=U[N](v,R,g,Z,Q,k,G,H,W);q.getEngine()._uploadDataToTextureDirectly(q,u)}const U={GetTGAHeader:C,UploadContent:v,_getImageData8bits:function(q,S,b,z,C,v,U,g,r){const I=b,V=S,l=q.width,y=q.height;let R,G,Z,H=0;const Q=new Uint8Array(l*y*4);for(Z=z;Z!==v;Z+=C)for(G=U;G!==r;G+=g,H++)R=I[H],Q[4*(G+l*Z)+3]=255,Q[4*(G+l*Z)+2]=V[3*R+0],Q[4*(G+l*Z)+1]=V[3*R+1],Q[4*(G+l*Z)+0]=V[3*R+2];return Q},_getImageData16bits:function(q,S,b,z,C,v,U,g,r){const I=b,V=q.width,l=q.height;let y,R,G,Z=0;const H=new Uint8Array(V*l*4);for(G=z;G!==v;G+=C)for(R=U;R!==r;R+=g,Z+=2){y=I[Z+0]+(I[Z+1]<<8);const q=255*((31744&y)>>10)/31|0,S=255*((992&y)>>5)/31|0,b=255*(31&y)/31|0;H[4*(R+V*G)+0]=q,H[4*(R+V*G)+1]=S,H[4*(R+V*G)+2]=b,H[4*(R+V*G)+3]=32768&y?0:255}return H},_getImageData24bits:function(q,S,b,z,C,v,U,g,r){const I=b,V=q.width,l=q.height;let y,R,G=0;const Z=new Uint8Array(V*l*4);for(R=z;R!==v;R+=C)for(y=U;y!==r;y+=g,G+=3)Z[4*(y+V*R)+3]=255,Z[4*(y+V*R)+2]=I[G+0],Z[4*(y+V*R)+1]=I[G+1],Z[4*(y+V*R)+0]=I[G+2];return Z},_getImageData32bits:function(q,S,b,z,C,v,U,g,r){const I=b,V=q.width,l=q.height;let y,R,G=0;const Z=new Uint8Array(V*l*4);for(R=z;R!==v;R+=C)for(y=U;y!==r;y+=g,G+=4)Z[4*(y+V*R)+2]=I[G+0],Z[4*(y+V*R)+1]=I[G+1],Z[4*(y+V*R)+0]=I[G+2],Z[4*(y+V*R)+3]=I[G+3];return Z},_getImageDataGrey8bits:function(q,S,b,z,C,v,U,g,r){const I=b,V=q.width,l=q.height;let y,R,G,Z=0;const H=new Uint8Array(V*l*4);for(G=z;G!==v;G+=C)for(R=U;R!==r;R+=g,Z++)y=I[Z],H[4*(R+V*G)+0]=y,H[4*(R+V*G)+1]=y,H[4*(R+V*G)+2]=y,H[4*(R+V*G)+3]=255;return H},_getImageDataGrey16bits:function(q,S,b,z,C,v,U,g,r){const I=b,V=q.width,l=q.height;let y,R,G=0;const Z=new Uint8Array(V*l*4);for(R=z;R!==v;R+=C)for(y=U;y!==r;y+=g,G+=2)Z[4*(y+V*R)+0]=I[G+0],Z[4*(y+V*R)+1]=I[G+0],Z[4*(y+V*R)+2]=I[G+0],Z[4*(y+V*R)+3]=I[G+1];return Z}};class g{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(q,S,b){const z=new Uint8Array(q.buffer,q.byteOffset,q.byteLength),U=C(z);b(U.width,U.height,S.generateMipMaps,!1,(()=>{v(S,z)}))}}}}]);