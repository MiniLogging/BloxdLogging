"use strict";(self.fwuvyyymhp8=self.fwuvyyymhp8||[]).push([[50],{14823:(N,U,V)=>{V.r(U),V.d(U,{_TGATextureLoader:()=>i});var A=V(12193);function t(N){let U=0;return{id_length:N[U++],colormap_type:N[U++],image_type:N[U++],colormap_index:N[U++]|N[U++]<<8,colormap_length:N[U++]|N[U++]<<8,colormap_size:N[U++],origin:[N[U++]|N[U++]<<8,N[U++]|N[U++]<<8],width:N[U++]|N[U++]<<8,height:N[U++]|N[U++]<<8,pixel_size:N[U++],flags:N[U++]}}function n(N,U){if(U.length<19)return void A.b.Error("Unable to load TGA file - Not enough data to contain header");let V=18;const n=t(U);if(n.id_length+V>U.length)return void A.b.Error("Unable to load TGA file - Not enough data");V+=n.id_length;let i,z=!1,S=!1,E=!1;switch(n.image_type){case 9:z=!0;case 1:S=!0;break;case 10:z=!0;case 2:break;case 11:z=!0;case 3:E=!0}const p=n.pixel_size>>3,k=n.width*n.height*p;let B,C,x,J,d,r,v;if(S&&(B=U.subarray(V,V+=n.colormap_length*(n.colormap_size>>3))),z){let N,A,t;i=new Uint8Array(k);let n=0;const q=new Uint8Array(p);for(;V<k&&n<k;)if(N=U[V++],A=1+(127&N),128&N){for(t=0;t<p;++t)q[t]=U[V++];for(t=0;t<A;++t)i.set(q,n+t*p);n+=p*A}else{for(A*=p,t=0;t<A;++t)i[n+t]=U[V++];n+=A}}else i=U.subarray(V,V+=S?n.width*n.height:k);switch((48&n.flags)>>4){default:case 2:C=0,J=1,v=n.width,x=0,d=1,r=n.height;break;case 0:C=0,J=1,v=n.width,x=n.height-1,d=-1,r=-1;break;case 3:C=n.width-1,J=-1,v=-1,x=0,d=1,r=n.height;break;case 1:C=n.width-1,J=-1,v=-1,x=n.height-1,d=-1,r=-1}const h="_getImageData"+(E?"Grey":"")+n.pixel_size+"bits",c=q[h](n,B,i,x,d,r,C,J,v);N.getEngine()._uploadDataToTextureDirectly(N,c)}const q={GetTGAHeader:t,UploadContent:n,_getImageData8bits:function(N,U,V,A,t,n,q,i,z){const S=V,E=U,p=N.width,k=N.height;let B,C,x,J=0;const d=new Uint8Array(p*k*4);for(x=A;x!==n;x+=t)for(C=q;C!==z;C+=i,J++)B=S[J],d[4*(C+p*x)+3]=255,d[4*(C+p*x)+2]=E[3*B+0],d[4*(C+p*x)+1]=E[3*B+1],d[4*(C+p*x)+0]=E[3*B+2];return d},_getImageData16bits:function(N,U,V,A,t,n,q,i,z){const S=V,E=N.width,p=N.height;let k,B,C,x=0;const J=new Uint8Array(E*p*4);for(C=A;C!==n;C+=t)for(B=q;B!==z;B+=i,x+=2){k=S[x+0]+(S[x+1]<<8);const N=255*((31744&k)>>10)/31|0,U=255*((992&k)>>5)/31|0,V=255*(31&k)/31|0;J[4*(B+E*C)+0]=N,J[4*(B+E*C)+1]=U,J[4*(B+E*C)+2]=V,J[4*(B+E*C)+3]=32768&k?0:255}return J},_getImageData24bits:function(N,U,V,A,t,n,q,i,z){const S=V,E=N.width,p=N.height;let k,B,C=0;const x=new Uint8Array(E*p*4);for(B=A;B!==n;B+=t)for(k=q;k!==z;k+=i,C+=3)x[4*(k+E*B)+3]=255,x[4*(k+E*B)+2]=S[C+0],x[4*(k+E*B)+1]=S[C+1],x[4*(k+E*B)+0]=S[C+2];return x},_getImageData32bits:function(N,U,V,A,t,n,q,i,z){const S=V,E=N.width,p=N.height;let k,B,C=0;const x=new Uint8Array(E*p*4);for(B=A;B!==n;B+=t)for(k=q;k!==z;k+=i,C+=4)x[4*(k+E*B)+2]=S[C+0],x[4*(k+E*B)+1]=S[C+1],x[4*(k+E*B)+0]=S[C+2],x[4*(k+E*B)+3]=S[C+3];return x},_getImageDataGrey8bits:function(N,U,V,A,t,n,q,i,z){const S=V,E=N.width,p=N.height;let k,B,C,x=0;const J=new Uint8Array(E*p*4);for(C=A;C!==n;C+=t)for(B=q;B!==z;B+=i,x++)k=S[x],J[4*(B+E*C)+0]=k,J[4*(B+E*C)+1]=k,J[4*(B+E*C)+2]=k,J[4*(B+E*C)+3]=255;return J},_getImageDataGrey16bits:function(N,U,V,A,t,n,q,i,z){const S=V,E=N.width,p=N.height;let k,B,C=0;const x=new Uint8Array(E*p*4);for(B=A;B!==n;B+=t)for(k=q;k!==z;k+=i,C+=2)x[4*(k+E*B)+0]=S[C+0],x[4*(k+E*B)+1]=S[C+0],x[4*(k+E*B)+2]=S[C+0],x[4*(k+E*B)+3]=S[C+1];return x}};class i{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(N,U,V){const A=new Uint8Array(N.buffer,N.byteOffset,N.byteLength),q=t(A);V(q.width,q.height,U.generateMipMaps,!1,(()=>{n(U,A)}))}}}}]);