"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[50],{13558:(h,V,i)=>{i.r(V),i.d(V,{_TGATextureLoader:()=>q});var S=i(10967);function l(h){let V=0;return{id_length:h[V++],colormap_type:h[V++],image_type:h[V++],colormap_index:h[V++]|h[V++]<<8,colormap_length:h[V++]|h[V++]<<8,colormap_size:h[V++],origin:[h[V++]|h[V++]<<8,h[V++]|h[V++]<<8],width:h[V++]|h[V++]<<8,height:h[V++]|h[V++]<<8,pixel_size:h[V++],flags:h[V++]}}function Y(h,V){if(V.length<19)return void S.d.Error("Unable to load TGA file - Not enough data to contain header");let i=18;const Y=l(V);if(Y.id_length+i>V.length)return void S.d.Error("Unable to load TGA file - Not enough data");i+=Y.id_length;let q,B=!1,J=!1,I=!1;switch(Y.image_type){case 9:B=!0;case 1:J=!0;break;case 10:B=!0;case 2:break;case 11:B=!0;case 3:I=!0}const v=Y.pixel_size>>3,s=Y.width*Y.height*v;let t,T,e,n,c,f,P;if(J&&(t=V.subarray(i,i+=Y.colormap_length*(Y.colormap_size>>3))),B){let h,S,l;q=new Uint8Array(s);let Y=0;const g=new Uint8Array(v);for(;i<s&&Y<s;)if(h=V[i++],S=1+(127&h),128&h){for(l=0;l<v;++l)g[l]=V[i++];for(l=0;l<S;++l)q.set(g,Y+l*v);Y+=v*S}else{for(S*=v,l=0;l<S;++l)q[Y+l]=V[i++];Y+=S}}else q=V.subarray(i,i+=J?Y.width*Y.height:s);switch((48&Y.flags)>>4){default:case 2:T=0,n=1,P=Y.width,e=0,c=1,f=Y.height;break;case 0:T=0,n=1,P=Y.width,e=Y.height-1,c=-1,f=-1;break;case 3:T=Y.width-1,n=-1,P=-1,e=0,c=1,f=Y.height;break;case 1:T=Y.width-1,n=-1,P=-1,e=Y.height-1,c=-1,f=-1}const L="_getImageData"+(I?"Grey":"")+Y.pixel_size+"bits",U=g[L](Y,t,q,e,c,f,T,n,P);h.getEngine()._uploadDataToTextureDirectly(h,U)}const g={GetTGAHeader:l,UploadContent:Y,_getImageData8bits:function(h,V,i,S,l,Y,g,q,B){const J=i,I=V,v=h.width,s=h.height;let t,T,e,n=0;const c=new Uint8Array(v*s*4);for(e=S;e!==Y;e+=l)for(T=g;T!==B;T+=q,n++)t=J[n],c[4*(T+v*e)+3]=255,c[4*(T+v*e)+2]=I[3*t+0],c[4*(T+v*e)+1]=I[3*t+1],c[4*(T+v*e)+0]=I[3*t+2];return c},_getImageData16bits:function(h,V,i,S,l,Y,g,q,B){const J=i,I=h.width,v=h.height;let s,t,T,e=0;const n=new Uint8Array(I*v*4);for(T=S;T!==Y;T+=l)for(t=g;t!==B;t+=q,e+=2){s=J[e+0]+(J[e+1]<<8);const h=255*((31744&s)>>10)/31|0,V=255*((992&s)>>5)/31|0,i=255*(31&s)/31|0;n[4*(t+I*T)+0]=h,n[4*(t+I*T)+1]=V,n[4*(t+I*T)+2]=i,n[4*(t+I*T)+3]=32768&s?0:255}return n},_getImageData24bits:function(h,V,i,S,l,Y,g,q,B){const J=i,I=h.width,v=h.height;let s,t,T=0;const e=new Uint8Array(I*v*4);for(t=S;t!==Y;t+=l)for(s=g;s!==B;s+=q,T+=3)e[4*(s+I*t)+3]=255,e[4*(s+I*t)+2]=J[T+0],e[4*(s+I*t)+1]=J[T+1],e[4*(s+I*t)+0]=J[T+2];return e},_getImageData32bits:function(h,V,i,S,l,Y,g,q,B){const J=i,I=h.width,v=h.height;let s,t,T=0;const e=new Uint8Array(I*v*4);for(t=S;t!==Y;t+=l)for(s=g;s!==B;s+=q,T+=4)e[4*(s+I*t)+2]=J[T+0],e[4*(s+I*t)+1]=J[T+1],e[4*(s+I*t)+0]=J[T+2],e[4*(s+I*t)+3]=J[T+3];return e},_getImageDataGrey8bits:function(h,V,i,S,l,Y,g,q,B){const J=i,I=h.width,v=h.height;let s,t,T,e=0;const n=new Uint8Array(I*v*4);for(T=S;T!==Y;T+=l)for(t=g;t!==B;t+=q,e++)s=J[e],n[4*(t+I*T)+0]=s,n[4*(t+I*T)+1]=s,n[4*(t+I*T)+2]=s,n[4*(t+I*T)+3]=255;return n},_getImageDataGrey16bits:function(h,V,i,S,l,Y,g,q,B){const J=i,I=h.width,v=h.height;let s,t,T=0;const e=new Uint8Array(I*v*4);for(t=S;t!==Y;t+=l)for(s=g;s!==B;s+=q,T+=2)e[4*(s+I*t)+0]=J[T+0],e[4*(s+I*t)+1]=J[T+0],e[4*(s+I*t)+2]=J[T+0],e[4*(s+I*t)+3]=J[T+1];return e}};class q{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(h,V,i){const S=new Uint8Array(h.buffer,h.byteOffset,h.byteLength),g=l(S);i(g.width,g.height,V.generateMipMaps,!1,(()=>{Y(V,S)}))}}}}]);