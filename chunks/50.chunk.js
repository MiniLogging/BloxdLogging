"use strict";(self["9s4i8ue3jq"]=self["9s4i8ue3jq"]||[]).push([[50],{15240:(a,c,o)=>{o.r(c),o.d(c,{_TGATextureLoader:()=>p});var s=o(12649);function q(a){let c=0;return{id_length:a[c++],colormap_type:a[c++],image_type:a[c++],colormap_index:a[c++]|a[c++]<<8,colormap_length:a[c++]|a[c++]<<8,colormap_size:a[c++],origin:[a[c++]|a[c++]<<8,a[c++]|a[c++]<<8],width:a[c++]|a[c++]<<8,height:a[c++]|a[c++]<<8,pixel_size:a[c++],flags:a[c++]}}function t(a,c){if(c.length<19)return void s.c.Error("Unable to load TGA file - Not enough data to contain header");let o=18;const t=q(c);if(t.id_length+o>c.length)return void s.c.Error("Unable to load TGA file - Not enough data");o+=t.id_length;let p,G=!1,T=!1,C=!1;switch(t.image_type){case 9:G=!0;case 1:T=!0;break;case 10:G=!0;case 2:break;case 11:G=!0;case 3:C=!0}const j=t.pixel_size>>3,L=t.width*t.height*j;let e,g,M,N,y,k,n;if(T&&(e=c.subarray(o,o+=t.colormap_length*(t.colormap_size>>3))),G){let a,s,q;p=new Uint8Array(L);let t=0;const i=new Uint8Array(j);for(;o<L&&t<L;)if(a=c[o++],s=1+(127&a),128&a){for(q=0;q<j;++q)i[q]=c[o++];for(q=0;q<s;++q)p.set(i,t+q*j);t+=j*s}else{for(s*=j,q=0;q<s;++q)p[t+q]=c[o++];t+=s}}else p=c.subarray(o,o+=T?t.width*t.height:L);switch((48&t.flags)>>4){default:case 2:g=0,N=1,n=t.width,M=0,y=1,k=t.height;break;case 0:g=0,N=1,n=t.width,M=t.height-1,y=-1,k=-1;break;case 3:g=t.width-1,N=-1,n=-1,M=0,y=1,k=t.height;break;case 1:g=t.width-1,N=-1,n=-1,M=t.height-1,y=-1,k=-1}const f="_getImageData"+(C?"Grey":"")+t.pixel_size+"bits",J=i[f](t,e,p,M,y,k,g,N,n);a.getEngine()._uploadDataToTextureDirectly(a,J)}const i={GetTGAHeader:q,UploadContent:t,_getImageData8bits:function(a,c,o,s,q,t,i,p,G){const T=o,C=c,j=a.width,L=a.height;let e,g,M,N=0;const y=new Uint8Array(j*L*4);for(M=s;M!==t;M+=q)for(g=i;g!==G;g+=p,N++)e=T[N],y[4*(g+j*M)+3]=255,y[4*(g+j*M)+2]=C[3*e+0],y[4*(g+j*M)+1]=C[3*e+1],y[4*(g+j*M)+0]=C[3*e+2];return y},_getImageData16bits:function(a,c,o,s,q,t,i,p,G){const T=o,C=a.width,j=a.height;let L,e,g,M=0;const N=new Uint8Array(C*j*4);for(g=s;g!==t;g+=q)for(e=i;e!==G;e+=p,M+=2){L=T[M+0]+(T[M+1]<<8);const a=255*((31744&L)>>10)/31|0,c=255*((992&L)>>5)/31|0,o=255*(31&L)/31|0;N[4*(e+C*g)+0]=a,N[4*(e+C*g)+1]=c,N[4*(e+C*g)+2]=o,N[4*(e+C*g)+3]=32768&L?0:255}return N},_getImageData24bits:function(a,c,o,s,q,t,i,p,G){const T=o,C=a.width,j=a.height;let L,e,g=0;const M=new Uint8Array(C*j*4);for(e=s;e!==t;e+=q)for(L=i;L!==G;L+=p,g+=3)M[4*(L+C*e)+3]=255,M[4*(L+C*e)+2]=T[g+0],M[4*(L+C*e)+1]=T[g+1],M[4*(L+C*e)+0]=T[g+2];return M},_getImageData32bits:function(a,c,o,s,q,t,i,p,G){const T=o,C=a.width,j=a.height;let L,e,g=0;const M=new Uint8Array(C*j*4);for(e=s;e!==t;e+=q)for(L=i;L!==G;L+=p,g+=4)M[4*(L+C*e)+2]=T[g+0],M[4*(L+C*e)+1]=T[g+1],M[4*(L+C*e)+0]=T[g+2],M[4*(L+C*e)+3]=T[g+3];return M},_getImageDataGrey8bits:function(a,c,o,s,q,t,i,p,G){const T=o,C=a.width,j=a.height;let L,e,g,M=0;const N=new Uint8Array(C*j*4);for(g=s;g!==t;g+=q)for(e=i;e!==G;e+=p,M++)L=T[M],N[4*(e+C*g)+0]=L,N[4*(e+C*g)+1]=L,N[4*(e+C*g)+2]=L,N[4*(e+C*g)+3]=255;return N},_getImageDataGrey16bits:function(a,c,o,s,q,t,i,p,G){const T=o,C=a.width,j=a.height;let L,e,g=0;const M=new Uint8Array(C*j*4);for(e=s;e!==t;e+=q)for(L=i;L!==G;L+=p,g+=2)M[4*(L+C*e)+0]=T[g+0],M[4*(L+C*e)+1]=T[g+0],M[4*(L+C*e)+2]=T[g+0],M[4*(L+C*e)+3]=T[g+1];return M}};class p{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(a,c,o){const s=new Uint8Array(a.buffer,a.byteOffset,a.byteLength),i=q(s);o(i.width,i.height,c.generateMipMaps,!1,(()=>{t(c,s)}))}}}}]);