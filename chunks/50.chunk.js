"use strict";(self.a14qw1h7fq=self.a14qw1h7fq||[]).push([[50],{13666:(R,J,B)=>{B.r(J),B.d(J,{_TGATextureLoader:()=>r});var Q=B(11043);function h(R){let J=0;return{id_length:R[J++],colormap_type:R[J++],image_type:R[J++],colormap_index:R[J++]|R[J++]<<8,colormap_length:R[J++]|R[J++]<<8,colormap_size:R[J++],origin:[R[J++]|R[J++]<<8,R[J++]|R[J++]<<8],width:R[J++]|R[J++]<<8,height:R[J++]|R[J++]<<8,pixel_size:R[J++],flags:R[J++]}}function y(R,J){if(J.length<19)return void Q.d.Error("Unable to load TGA file - Not enough data to contain header");let B=18;const y=h(J);if(y.id_length+B>J.length)return void Q.d.Error("Unable to load TGA file - Not enough data");B+=y.id_length;let r,q=!1,e=!1,D=!1;switch(y.image_type){case 9:q=!0;case 1:e=!0;break;case 10:q=!0;case 2:break;case 11:q=!0;case 3:D=!0}const l=y.pixel_size>>3,E=y.width*y.height*l;let O,n,P,A,u,S,f;if(e&&(O=J.subarray(B,B+=y.colormap_length*(y.colormap_size>>3))),q){let R,Q,h;r=new Uint8Array(E);let y=0;const N=new Uint8Array(l);for(;B<E&&y<E;)if(R=J[B++],Q=1+(127&R),128&R){for(h=0;h<l;++h)N[h]=J[B++];for(h=0;h<Q;++h)r.set(N,y+h*l);y+=l*Q}else{for(Q*=l,h=0;h<Q;++h)r[y+h]=J[B++];y+=Q}}else r=J.subarray(B,B+=e?y.width*y.height:E);switch((48&y.flags)>>4){default:case 2:n=0,A=1,f=y.width,P=0,u=1,S=y.height;break;case 0:n=0,A=1,f=y.width,P=y.height-1,u=-1,S=-1;break;case 3:n=y.width-1,A=-1,f=-1,P=0,u=1,S=y.height;break;case 1:n=y.width-1,A=-1,f=-1,P=y.height-1,u=-1,S=-1}const a="_getImageData"+(D?"Grey":"")+y.pixel_size+"bits",s=N[a](y,O,r,P,u,S,n,A,f);R.getEngine()._uploadDataToTextureDirectly(R,s)}const N={GetTGAHeader:h,UploadContent:y,_getImageData8bits:function(R,J,B,Q,h,y,N,r,q){const e=B,D=J,l=R.width,E=R.height;let O,n,P,A=0;const u=new Uint8Array(l*E*4);for(P=Q;P!==y;P+=h)for(n=N;n!==q;n+=r,A++)O=e[A],u[4*(n+l*P)+3]=255,u[4*(n+l*P)+2]=D[3*O+0],u[4*(n+l*P)+1]=D[3*O+1],u[4*(n+l*P)+0]=D[3*O+2];return u},_getImageData16bits:function(R,J,B,Q,h,y,N,r,q){const e=B,D=R.width,l=R.height;let E,O,n,P=0;const A=new Uint8Array(D*l*4);for(n=Q;n!==y;n+=h)for(O=N;O!==q;O+=r,P+=2){E=e[P+0]+(e[P+1]<<8);const R=255*((31744&E)>>10)/31|0,J=255*((992&E)>>5)/31|0,B=255*(31&E)/31|0;A[4*(O+D*n)+0]=R,A[4*(O+D*n)+1]=J,A[4*(O+D*n)+2]=B,A[4*(O+D*n)+3]=32768&E?0:255}return A},_getImageData24bits:function(R,J,B,Q,h,y,N,r,q){const e=B,D=R.width,l=R.height;let E,O,n=0;const P=new Uint8Array(D*l*4);for(O=Q;O!==y;O+=h)for(E=N;E!==q;E+=r,n+=3)P[4*(E+D*O)+3]=255,P[4*(E+D*O)+2]=e[n+0],P[4*(E+D*O)+1]=e[n+1],P[4*(E+D*O)+0]=e[n+2];return P},_getImageData32bits:function(R,J,B,Q,h,y,N,r,q){const e=B,D=R.width,l=R.height;let E,O,n=0;const P=new Uint8Array(D*l*4);for(O=Q;O!==y;O+=h)for(E=N;E!==q;E+=r,n+=4)P[4*(E+D*O)+2]=e[n+0],P[4*(E+D*O)+1]=e[n+1],P[4*(E+D*O)+0]=e[n+2],P[4*(E+D*O)+3]=e[n+3];return P},_getImageDataGrey8bits:function(R,J,B,Q,h,y,N,r,q){const e=B,D=R.width,l=R.height;let E,O,n,P=0;const A=new Uint8Array(D*l*4);for(n=Q;n!==y;n+=h)for(O=N;O!==q;O+=r,P++)E=e[P],A[4*(O+D*n)+0]=E,A[4*(O+D*n)+1]=E,A[4*(O+D*n)+2]=E,A[4*(O+D*n)+3]=255;return A},_getImageDataGrey16bits:function(R,J,B,Q,h,y,N,r,q){const e=B,D=R.width,l=R.height;let E,O,n=0;const P=new Uint8Array(D*l*4);for(O=Q;O!==y;O+=h)for(E=N;E!==q;E+=r,n+=2)P[4*(E+D*O)+0]=e[n+0],P[4*(E+D*O)+1]=e[n+0],P[4*(E+D*O)+2]=e[n+0],P[4*(E+D*O)+3]=e[n+1];return P}};class r{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(R,J,B){const Q=new Uint8Array(R.buffer,R.byteOffset,R.byteLength),N=h(Q);B(N.width,N.height,J.generateMipMaps,!1,(()=>{y(J,Q)}))}}}}]);