"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[50],{13724:(Z,x,F)=>{F.r(x),F.d(x,{_TGATextureLoader:()=>j});var u=F(11012);function G(Z){let x=0;return{id_length:Z[x++],colormap_type:Z[x++],image_type:Z[x++],colormap_index:Z[x++]|Z[x++]<<8,colormap_length:Z[x++]|Z[x++]<<8,colormap_size:Z[x++],origin:[Z[x++]|Z[x++]<<8,Z[x++]|Z[x++]<<8],width:Z[x++]|Z[x++]<<8,height:Z[x++]|Z[x++]<<8,pixel_size:Z[x++],flags:Z[x++]}}function f(Z,x){if(x.length<19)return void u.d.Error("Unable to load TGA file - Not enough data to contain header");let F=18;const f=G(x);if(f.id_length+F>x.length)return void u.d.Error("Unable to load TGA file - Not enough data");F+=f.id_length;let j,d=!1,t=!1,o=!1;switch(f.image_type){case 9:d=!0;case 1:t=!0;break;case 10:d=!0;case 2:break;case 11:d=!0;case 3:o=!0}const c=f.pixel_size>>3,s=f.width*f.height*c;let J,p,U,k,M,m,C;if(t&&(J=x.subarray(F,F+=f.colormap_length*(f.colormap_size>>3))),d){let Z,u,G;j=new Uint8Array(s);let f=0;const Y=new Uint8Array(c);for(;F<s&&f<s;)if(Z=x[F++],u=1+(127&Z),128&Z){for(G=0;G<c;++G)Y[G]=x[F++];for(G=0;G<u;++G)j.set(Y,f+G*c);f+=c*u}else{for(u*=c,G=0;G<u;++G)j[f+G]=x[F++];f+=u}}else j=x.subarray(F,F+=t?f.width*f.height:s);switch((48&f.flags)>>4){default:case 2:p=0,k=1,C=f.width,U=0,M=1,m=f.height;break;case 0:p=0,k=1,C=f.width,U=f.height-1,M=-1,m=-1;break;case 3:p=f.width-1,k=-1,C=-1,U=0,M=1,m=f.height;break;case 1:p=f.width-1,k=-1,C=-1,U=f.height-1,M=-1,m=-1}const L="_getImageData"+(o?"Grey":"")+f.pixel_size+"bits",H=Y[L](f,J,j,U,M,m,p,k,C);Z.getEngine()._uploadDataToTextureDirectly(Z,H)}const Y={GetTGAHeader:G,UploadContent:f,_getImageData8bits:function(Z,x,F,u,G,f,Y,j,d){const t=F,o=x,c=Z.width,s=Z.height;let J,p,U,k=0;const M=new Uint8Array(c*s*4);for(U=u;U!==f;U+=G)for(p=Y;p!==d;p+=j,k++)J=t[k],M[4*(p+c*U)+3]=255,M[4*(p+c*U)+2]=o[3*J+0],M[4*(p+c*U)+1]=o[3*J+1],M[4*(p+c*U)+0]=o[3*J+2];return M},_getImageData16bits:function(Z,x,F,u,G,f,Y,j,d){const t=F,o=Z.width,c=Z.height;let s,J,p,U=0;const k=new Uint8Array(o*c*4);for(p=u;p!==f;p+=G)for(J=Y;J!==d;J+=j,U+=2){s=t[U+0]+(t[U+1]<<8);const Z=255*((31744&s)>>10)/31|0,x=255*((992&s)>>5)/31|0,F=255*(31&s)/31|0;k[4*(J+o*p)+0]=Z,k[4*(J+o*p)+1]=x,k[4*(J+o*p)+2]=F,k[4*(J+o*p)+3]=32768&s?0:255}return k},_getImageData24bits:function(Z,x,F,u,G,f,Y,j,d){const t=F,o=Z.width,c=Z.height;let s,J,p=0;const U=new Uint8Array(o*c*4);for(J=u;J!==f;J+=G)for(s=Y;s!==d;s+=j,p+=3)U[4*(s+o*J)+3]=255,U[4*(s+o*J)+2]=t[p+0],U[4*(s+o*J)+1]=t[p+1],U[4*(s+o*J)+0]=t[p+2];return U},_getImageData32bits:function(Z,x,F,u,G,f,Y,j,d){const t=F,o=Z.width,c=Z.height;let s,J,p=0;const U=new Uint8Array(o*c*4);for(J=u;J!==f;J+=G)for(s=Y;s!==d;s+=j,p+=4)U[4*(s+o*J)+2]=t[p+0],U[4*(s+o*J)+1]=t[p+1],U[4*(s+o*J)+0]=t[p+2],U[4*(s+o*J)+3]=t[p+3];return U},_getImageDataGrey8bits:function(Z,x,F,u,G,f,Y,j,d){const t=F,o=Z.width,c=Z.height;let s,J,p,U=0;const k=new Uint8Array(o*c*4);for(p=u;p!==f;p+=G)for(J=Y;J!==d;J+=j,U++)s=t[U],k[4*(J+o*p)+0]=s,k[4*(J+o*p)+1]=s,k[4*(J+o*p)+2]=s,k[4*(J+o*p)+3]=255;return k},_getImageDataGrey16bits:function(Z,x,F,u,G,f,Y,j,d){const t=F,o=Z.width,c=Z.height;let s,J,p=0;const U=new Uint8Array(o*c*4);for(J=u;J!==f;J+=G)for(s=Y;s!==d;s+=j,p+=2)U[4*(s+o*J)+0]=t[p+0],U[4*(s+o*J)+1]=t[p+0],U[4*(s+o*J)+2]=t[p+0],U[4*(s+o*J)+3]=t[p+1];return U}};class j{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(Z,x,F){const u=new Uint8Array(Z.buffer,Z.byteOffset,Z.byteLength),Y=G(u);F(Y.width,Y.height,x.generateMipMaps,!1,(()=>{f(x,u)}))}}}}]);