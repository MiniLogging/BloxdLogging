"use strict";(self["686i8587bmi"]=self["686i8587bmi"]||[]).push([[50],{15275:(h,d,T)=>{T.r(d),T.d(d,{_TGATextureLoader:()=>X});var Y=T(12596);function y(h){let d=0;return{id_length:h[d++],colormap_type:h[d++],image_type:h[d++],colormap_index:h[d++]|h[d++]<<8,colormap_length:h[d++]|h[d++]<<8,colormap_size:h[d++],origin:[h[d++]|h[d++]<<8,h[d++]|h[d++]<<8],width:h[d++]|h[d++]<<8,height:h[d++]|h[d++]<<8,pixel_size:h[d++],flags:h[d++]}}function C(h,d){if(d.length<19)return void Y.c.Error("Unable to load TGA file - Not enough data to contain header");let T=18;const C=y(d);if(C.id_length+T>d.length)return void Y.c.Error("Unable to load TGA file - Not enough data");T+=C.id_length;let X,F=!1,U=!1,Z=!1;switch(C.image_type){case 9:F=!0;case 1:U=!0;break;case 10:F=!0;case 2:break;case 11:F=!0;case 3:Z=!0}const S=C.pixel_size>>3,r=C.width*C.height*S;let c,O,f,J,W,L,D;if(U&&(c=d.subarray(T,T+=C.colormap_length*(C.colormap_size>>3))),F){let h,Y,y;X=new Uint8Array(r);let C=0;const n=new Uint8Array(S);for(;T<r&&C<r;)if(h=d[T++],Y=1+(127&h),128&h){for(y=0;y<S;++y)n[y]=d[T++];for(y=0;y<Y;++y)X.set(n,C+y*S);C+=S*Y}else{for(Y*=S,y=0;y<Y;++y)X[C+y]=d[T++];C+=Y}}else X=d.subarray(T,T+=U?C.width*C.height:r);switch((48&C.flags)>>4){default:case 2:O=0,J=1,D=C.width,f=0,W=1,L=C.height;break;case 0:O=0,J=1,D=C.width,f=C.height-1,W=-1,L=-1;break;case 3:O=C.width-1,J=-1,D=-1,f=0,W=1,L=C.height;break;case 1:O=C.width-1,J=-1,D=-1,f=C.height-1,W=-1,L=-1}const V="_getImageData"+(Z?"Grey":"")+C.pixel_size+"bits",i=n[V](C,c,X,f,W,L,O,J,D);h.getEngine()._uploadDataToTextureDirectly(h,i)}const n={GetTGAHeader:y,UploadContent:C,_getImageData8bits:function(h,d,T,Y,y,C,n,X,F){const U=T,Z=d,S=h.width,r=h.height;let c,O,f,J=0;const W=new Uint8Array(S*r*4);for(f=Y;f!==C;f+=y)for(O=n;O!==F;O+=X,J++)c=U[J],W[4*(O+S*f)+3]=255,W[4*(O+S*f)+2]=Z[3*c+0],W[4*(O+S*f)+1]=Z[3*c+1],W[4*(O+S*f)+0]=Z[3*c+2];return W},_getImageData16bits:function(h,d,T,Y,y,C,n,X,F){const U=T,Z=h.width,S=h.height;let r,c,O,f=0;const J=new Uint8Array(Z*S*4);for(O=Y;O!==C;O+=y)for(c=n;c!==F;c+=X,f+=2){r=U[f+0]+(U[f+1]<<8);const h=255*((31744&r)>>10)/31|0,d=255*((992&r)>>5)/31|0,T=255*(31&r)/31|0;J[4*(c+Z*O)+0]=h,J[4*(c+Z*O)+1]=d,J[4*(c+Z*O)+2]=T,J[4*(c+Z*O)+3]=32768&r?0:255}return J},_getImageData24bits:function(h,d,T,Y,y,C,n,X,F){const U=T,Z=h.width,S=h.height;let r,c,O=0;const f=new Uint8Array(Z*S*4);for(c=Y;c!==C;c+=y)for(r=n;r!==F;r+=X,O+=3)f[4*(r+Z*c)+3]=255,f[4*(r+Z*c)+2]=U[O+0],f[4*(r+Z*c)+1]=U[O+1],f[4*(r+Z*c)+0]=U[O+2];return f},_getImageData32bits:function(h,d,T,Y,y,C,n,X,F){const U=T,Z=h.width,S=h.height;let r,c,O=0;const f=new Uint8Array(Z*S*4);for(c=Y;c!==C;c+=y)for(r=n;r!==F;r+=X,O+=4)f[4*(r+Z*c)+2]=U[O+0],f[4*(r+Z*c)+1]=U[O+1],f[4*(r+Z*c)+0]=U[O+2],f[4*(r+Z*c)+3]=U[O+3];return f},_getImageDataGrey8bits:function(h,d,T,Y,y,C,n,X,F){const U=T,Z=h.width,S=h.height;let r,c,O,f=0;const J=new Uint8Array(Z*S*4);for(O=Y;O!==C;O+=y)for(c=n;c!==F;c+=X,f++)r=U[f],J[4*(c+Z*O)+0]=r,J[4*(c+Z*O)+1]=r,J[4*(c+Z*O)+2]=r,J[4*(c+Z*O)+3]=255;return J},_getImageDataGrey16bits:function(h,d,T,Y,y,C,n,X,F){const U=T,Z=h.width,S=h.height;let r,c,O=0;const f=new Uint8Array(Z*S*4);for(c=Y;c!==C;c+=y)for(r=n;r!==F;r+=X,O+=2)f[4*(r+Z*c)+0]=U[O+0],f[4*(r+Z*c)+1]=U[O+0],f[4*(r+Z*c)+2]=U[O+0],f[4*(r+Z*c)+3]=U[O+1];return f}};class X{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(h,d,T){const Y=new Uint8Array(h.buffer,h.byteOffset,h.byteLength),n=y(Y);T(n.width,n.height,d.generateMipMaps,!1,(()=>{C(d,Y)}))}}}}]);