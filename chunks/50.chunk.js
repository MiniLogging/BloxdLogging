"use strict";(self.qbp2s7qydk=self.qbp2s7qydk||[]).push([[50],{15106:(M,A,O)=>{O.r(A),O.d(A,{_TGATextureLoader:()=>c});var S=O(12783);function z(M){let A=0;return{id_length:M[A++],colormap_type:M[A++],image_type:M[A++],colormap_index:M[A++]|M[A++]<<8,colormap_length:M[A++]|M[A++]<<8,colormap_size:M[A++],origin:[M[A++]|M[A++]<<8,M[A++]|M[A++]<<8],width:M[A++]|M[A++]<<8,height:M[A++]|M[A++]<<8,pixel_size:M[A++],flags:M[A++]}}function Q(M,A){if(A.length<19)return void S.c.Error("Unable to load TGA file - Not enough data to contain header");let O=18;const Q=z(A);if(Q.id_length+O>A.length)return void S.c.Error("Unable to load TGA file - Not enough data");O+=Q.id_length;let c,j=!1,B=!1,g=!1;switch(Q.image_type){case 9:j=!0;case 1:B=!0;break;case 10:j=!0;case 2:break;case 11:j=!0;case 3:g=!0}const e=Q.pixel_size>>3,T=Q.width*Q.height*e;let J,K,G,d,w,I,b;if(B&&(J=A.subarray(O,O+=Q.colormap_length*(Q.colormap_size>>3))),j){let M,S,z;c=new Uint8Array(T);let Q=0;const X=new Uint8Array(e);for(;O<T&&Q<T;)if(M=A[O++],S=1+(127&M),128&M){for(z=0;z<e;++z)X[z]=A[O++];for(z=0;z<S;++z)c.set(X,Q+z*e);Q+=e*S}else{for(S*=e,z=0;z<S;++z)c[Q+z]=A[O++];Q+=S}}else c=A.subarray(O,O+=B?Q.width*Q.height:T);switch((48&Q.flags)>>4){default:case 2:K=0,d=1,b=Q.width,G=0,w=1,I=Q.height;break;case 0:K=0,d=1,b=Q.width,G=Q.height-1,w=-1,I=-1;break;case 3:K=Q.width-1,d=-1,b=-1,G=0,w=1,I=Q.height;break;case 1:K=Q.width-1,d=-1,b=-1,G=Q.height-1,w=-1,I=-1}const s="_getImageData"+(g?"Grey":"")+Q.pixel_size+"bits",Y=X[s](Q,J,c,G,w,I,K,d,b);M.getEngine()._uploadDataToTextureDirectly(M,Y)}const X={GetTGAHeader:z,UploadContent:Q,_getImageData8bits:function(M,A,O,S,z,Q,X,c,j){const B=O,g=A,e=M.width,T=M.height;let J,K,G,d=0;const w=new Uint8Array(e*T*4);for(G=S;G!==Q;G+=z)for(K=X;K!==j;K+=c,d++)J=B[d],w[4*(K+e*G)+3]=255,w[4*(K+e*G)+2]=g[3*J+0],w[4*(K+e*G)+1]=g[3*J+1],w[4*(K+e*G)+0]=g[3*J+2];return w},_getImageData16bits:function(M,A,O,S,z,Q,X,c,j){const B=O,g=M.width,e=M.height;let T,J,K,G=0;const d=new Uint8Array(g*e*4);for(K=S;K!==Q;K+=z)for(J=X;J!==j;J+=c,G+=2){T=B[G+0]+(B[G+1]<<8);const M=255*((31744&T)>>10)/31|0,A=255*((992&T)>>5)/31|0,O=255*(31&T)/31|0;d[4*(J+g*K)+0]=M,d[4*(J+g*K)+1]=A,d[4*(J+g*K)+2]=O,d[4*(J+g*K)+3]=32768&T?0:255}return d},_getImageData24bits:function(M,A,O,S,z,Q,X,c,j){const B=O,g=M.width,e=M.height;let T,J,K=0;const G=new Uint8Array(g*e*4);for(J=S;J!==Q;J+=z)for(T=X;T!==j;T+=c,K+=3)G[4*(T+g*J)+3]=255,G[4*(T+g*J)+2]=B[K+0],G[4*(T+g*J)+1]=B[K+1],G[4*(T+g*J)+0]=B[K+2];return G},_getImageData32bits:function(M,A,O,S,z,Q,X,c,j){const B=O,g=M.width,e=M.height;let T,J,K=0;const G=new Uint8Array(g*e*4);for(J=S;J!==Q;J+=z)for(T=X;T!==j;T+=c,K+=4)G[4*(T+g*J)+2]=B[K+0],G[4*(T+g*J)+1]=B[K+1],G[4*(T+g*J)+0]=B[K+2],G[4*(T+g*J)+3]=B[K+3];return G},_getImageDataGrey8bits:function(M,A,O,S,z,Q,X,c,j){const B=O,g=M.width,e=M.height;let T,J,K,G=0;const d=new Uint8Array(g*e*4);for(K=S;K!==Q;K+=z)for(J=X;J!==j;J+=c,G++)T=B[G],d[4*(J+g*K)+0]=T,d[4*(J+g*K)+1]=T,d[4*(J+g*K)+2]=T,d[4*(J+g*K)+3]=255;return d},_getImageDataGrey16bits:function(M,A,O,S,z,Q,X,c,j){const B=O,g=M.width,e=M.height;let T,J,K=0;const G=new Uint8Array(g*e*4);for(J=S;J!==Q;J+=z)for(T=X;T!==j;T+=c,K+=2)G[4*(T+g*J)+0]=B[K+0],G[4*(T+g*J)+1]=B[K+0],G[4*(T+g*J)+2]=B[K+0],G[4*(T+g*J)+3]=B[K+1];return G}};class c{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(M,A,O){const S=new Uint8Array(M.buffer,M.byteOffset,M.byteLength),X=z(S);O(X.width,X.height,A.generateMipMaps,!1,(()=>{Q(A,S)}))}}}}]);