"use strict";(self["3nlrbof8msu"]=self["3nlrbof8msu"]||[]).push([[50],{15196:(t,b,Z)=>{Z.r(b),Z.d(b,{_TGATextureLoader:()=>h});var J=Z(12557);function S(t){let b=0;return{id_length:t[b++],colormap_type:t[b++],image_type:t[b++],colormap_index:t[b++]|t[b++]<<8,colormap_length:t[b++]|t[b++]<<8,colormap_size:t[b++],origin:[t[b++]|t[b++]<<8,t[b++]|t[b++]<<8],width:t[b++]|t[b++]<<8,height:t[b++]|t[b++]<<8,pixel_size:t[b++],flags:t[b++]}}function P(t,b){if(b.length<19)return void J.c.Error("Unable to load TGA file - Not enough data to contain header");let Z=18;const P=S(b);if(P.id_length+Z>b.length)return void J.c.Error("Unable to load TGA file - Not enough data");Z+=P.id_length;let h,C=!1,Y=!1,g=!1;switch(P.image_type){case 9:C=!0;case 1:Y=!0;break;case 10:C=!0;case 2:break;case 11:C=!0;case 3:g=!0}const I=P.pixel_size>>3,r=P.width*P.height*I;let M,T,a,k,u,l,U;if(Y&&(M=b.subarray(Z,Z+=P.colormap_length*(P.colormap_size>>3))),C){let t,J,S;h=new Uint8Array(r);let P=0;const v=new Uint8Array(I);for(;Z<r&&P<r;)if(t=b[Z++],J=1+(127&t),128&t){for(S=0;S<I;++S)v[S]=b[Z++];for(S=0;S<J;++S)h.set(v,P+S*I);P+=I*J}else{for(J*=I,S=0;S<J;++S)h[P+S]=b[Z++];P+=J}}else h=b.subarray(Z,Z+=Y?P.width*P.height:r);switch((48&P.flags)>>4){default:case 2:T=0,k=1,U=P.width,a=0,u=1,l=P.height;break;case 0:T=0,k=1,U=P.width,a=P.height-1,u=-1,l=-1;break;case 3:T=P.width-1,k=-1,U=-1,a=0,u=1,l=P.height;break;case 1:T=P.width-1,k=-1,U=-1,a=P.height-1,u=-1,l=-1}const E="_getImageData"+(g?"Grey":"")+P.pixel_size+"bits",c=v[E](P,M,h,a,u,l,T,k,U);t.getEngine()._uploadDataToTextureDirectly(t,c)}const v={GetTGAHeader:S,UploadContent:P,_getImageData8bits:function(t,b,Z,J,S,P,v,h,C){const Y=Z,g=b,I=t.width,r=t.height;let M,T,a,k=0;const u=new Uint8Array(I*r*4);for(a=J;a!==P;a+=S)for(T=v;T!==C;T+=h,k++)M=Y[k],u[4*(T+I*a)+3]=255,u[4*(T+I*a)+2]=g[3*M+0],u[4*(T+I*a)+1]=g[3*M+1],u[4*(T+I*a)+0]=g[3*M+2];return u},_getImageData16bits:function(t,b,Z,J,S,P,v,h,C){const Y=Z,g=t.width,I=t.height;let r,M,T,a=0;const k=new Uint8Array(g*I*4);for(T=J;T!==P;T+=S)for(M=v;M!==C;M+=h,a+=2){r=Y[a+0]+(Y[a+1]<<8);const t=255*((31744&r)>>10)/31|0,b=255*((992&r)>>5)/31|0,Z=255*(31&r)/31|0;k[4*(M+g*T)+0]=t,k[4*(M+g*T)+1]=b,k[4*(M+g*T)+2]=Z,k[4*(M+g*T)+3]=32768&r?0:255}return k},_getImageData24bits:function(t,b,Z,J,S,P,v,h,C){const Y=Z,g=t.width,I=t.height;let r,M,T=0;const a=new Uint8Array(g*I*4);for(M=J;M!==P;M+=S)for(r=v;r!==C;r+=h,T+=3)a[4*(r+g*M)+3]=255,a[4*(r+g*M)+2]=Y[T+0],a[4*(r+g*M)+1]=Y[T+1],a[4*(r+g*M)+0]=Y[T+2];return a},_getImageData32bits:function(t,b,Z,J,S,P,v,h,C){const Y=Z,g=t.width,I=t.height;let r,M,T=0;const a=new Uint8Array(g*I*4);for(M=J;M!==P;M+=S)for(r=v;r!==C;r+=h,T+=4)a[4*(r+g*M)+2]=Y[T+0],a[4*(r+g*M)+1]=Y[T+1],a[4*(r+g*M)+0]=Y[T+2],a[4*(r+g*M)+3]=Y[T+3];return a},_getImageDataGrey8bits:function(t,b,Z,J,S,P,v,h,C){const Y=Z,g=t.width,I=t.height;let r,M,T,a=0;const k=new Uint8Array(g*I*4);for(T=J;T!==P;T+=S)for(M=v;M!==C;M+=h,a++)r=Y[a],k[4*(M+g*T)+0]=r,k[4*(M+g*T)+1]=r,k[4*(M+g*T)+2]=r,k[4*(M+g*T)+3]=255;return k},_getImageDataGrey16bits:function(t,b,Z,J,S,P,v,h,C){const Y=Z,g=t.width,I=t.height;let r,M,T=0;const a=new Uint8Array(g*I*4);for(M=J;M!==P;M+=S)for(r=v;r!==C;r+=h,T+=2)a[4*(r+g*M)+0]=Y[T+0],a[4*(r+g*M)+1]=Y[T+0],a[4*(r+g*M)+2]=Y[T+0],a[4*(r+g*M)+3]=Y[T+1];return a}};class h{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(t,b,Z){const J=new Uint8Array(t.buffer,t.byteOffset,t.byteLength),v=S(J);Z(v.width,v.height,b.generateMipMaps,!1,(()=>{P(b,J)}))}}}}]);