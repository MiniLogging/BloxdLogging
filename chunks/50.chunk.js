"use strict";(self.k9ivgwsw3f=self.k9ivgwsw3f||[]).push([[50],{15389:(Y,b,C)=>{C.r(b),C.d(b,{_TGATextureLoader:()=>B});var R=C(12669);function q(Y){let b=0;return{id_length:Y[b++],colormap_type:Y[b++],image_type:Y[b++],colormap_index:Y[b++]|Y[b++]<<8,colormap_length:Y[b++]|Y[b++]<<8,colormap_size:Y[b++],origin:[Y[b++]|Y[b++]<<8,Y[b++]|Y[b++]<<8],width:Y[b++]|Y[b++]<<8,height:Y[b++]|Y[b++]<<8,pixel_size:Y[b++],flags:Y[b++]}}function A(Y,b){if(b.length<19)return void R.e.Error("Unable to load TGA file - Not enough data to contain header");let C=18;const A=q(b);if(A.id_length+C>b.length)return void R.e.Error("Unable to load TGA file - Not enough data");C+=A.id_length;let B,g=!1,r=!1,O=!1;switch(A.image_type){case 9:g=!0;case 1:r=!0;break;case 10:g=!0;case 2:break;case 11:g=!0;case 3:O=!0}const F=A.pixel_size>>3,y=A.width*A.height*F;let S,n,t,I,w,Q,N;if(r&&(S=b.subarray(C,C+=A.colormap_length*(A.colormap_size>>3))),g){let Y,R,q;B=new Uint8Array(y);let A=0;const E=new Uint8Array(F);for(;C<y&&A<y;)if(Y=b[C++],R=1+(127&Y),128&Y){for(q=0;q<F;++q)E[q]=b[C++];for(q=0;q<R;++q)B.set(E,A+q*F);A+=F*R}else{for(R*=F,q=0;q<R;++q)B[A+q]=b[C++];A+=R}}else B=b.subarray(C,C+=r?A.width*A.height:y);switch((48&A.flags)>>4){default:case 2:n=0,I=1,N=A.width,t=0,w=1,Q=A.height;break;case 0:n=0,I=1,N=A.width,t=A.height-1,w=-1,Q=-1;break;case 3:n=A.width-1,I=-1,N=-1,t=0,w=1,Q=A.height;break;case 1:n=A.width-1,I=-1,N=-1,t=A.height-1,w=-1,Q=-1}const p="_getImageData"+(O?"Grey":"")+A.pixel_size+"bits",mY=E[p](A,S,B,t,w,Q,n,I,N);Y.getEngine()._uploadDataToTextureDirectly(Y,mY)}const E={GetTGAHeader:q,UploadContent:A,_getImageData8bits:function(Y,b,C,R,q,A,E,B,g){const r=C,O=b,F=Y.width,y=Y.height;let S,n,t,I=0;const w=new Uint8Array(F*y*4);for(t=R;t!==A;t+=q)for(n=E;n!==g;n+=B,I++)S=r[I],w[4*(n+F*t)+3]=255,w[4*(n+F*t)+2]=O[3*S+0],w[4*(n+F*t)+1]=O[3*S+1],w[4*(n+F*t)+0]=O[3*S+2];return w},_getImageData16bits:function(Y,b,C,R,q,A,E,B,g){const r=C,O=Y.width,F=Y.height;let y,S,n,t=0;const I=new Uint8Array(O*F*4);for(n=R;n!==A;n+=q)for(S=E;S!==g;S+=B,t+=2){y=r[t+0]+(r[t+1]<<8);const Y=255*((31744&y)>>10)/31|0,b=255*((992&y)>>5)/31|0,C=255*(31&y)/31|0;I[4*(S+O*n)+0]=Y,I[4*(S+O*n)+1]=b,I[4*(S+O*n)+2]=C,I[4*(S+O*n)+3]=32768&y?0:255}return I},_getImageData24bits:function(Y,b,C,R,q,A,E,B,g){const r=C,O=Y.width,F=Y.height;let y,S,n=0;const t=new Uint8Array(O*F*4);for(S=R;S!==A;S+=q)for(y=E;y!==g;y+=B,n+=3)t[4*(y+O*S)+3]=255,t[4*(y+O*S)+2]=r[n+0],t[4*(y+O*S)+1]=r[n+1],t[4*(y+O*S)+0]=r[n+2];return t},_getImageData32bits:function(Y,b,C,R,q,A,E,B,g){const r=C,O=Y.width,F=Y.height;let y,S,n=0;const t=new Uint8Array(O*F*4);for(S=R;S!==A;S+=q)for(y=E;y!==g;y+=B,n+=4)t[4*(y+O*S)+2]=r[n+0],t[4*(y+O*S)+1]=r[n+1],t[4*(y+O*S)+0]=r[n+2],t[4*(y+O*S)+3]=r[n+3];return t},_getImageDataGrey8bits:function(Y,b,C,R,q,A,E,B,g){const r=C,O=Y.width,F=Y.height;let y,S,n,t=0;const I=new Uint8Array(O*F*4);for(n=R;n!==A;n+=q)for(S=E;S!==g;S+=B,t++)y=r[t],I[4*(S+O*n)+0]=y,I[4*(S+O*n)+1]=y,I[4*(S+O*n)+2]=y,I[4*(S+O*n)+3]=255;return I},_getImageDataGrey16bits:function(Y,b,C,R,q,A,E,B,g){const r=C,O=Y.width,F=Y.height;let y,S,n=0;const t=new Uint8Array(O*F*4);for(S=R;S!==A;S+=q)for(y=E;y!==g;y+=B,n+=2)t[4*(y+O*S)+0]=r[n+0],t[4*(y+O*S)+1]=r[n+0],t[4*(y+O*S)+2]=r[n+0],t[4*(y+O*S)+3]=r[n+1];return t}};class B{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(Y,b,C){const R=new Uint8Array(Y.buffer,Y.byteOffset,Y.byteLength),E=q(R);C(E.width,E.height,b.generateMipMaps,!1,(()=>{A(b,R)}))}}}}]);