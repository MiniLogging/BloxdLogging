"use strict";(self.xeuzlpp225k=self.xeuzlpp225k||[]).push([[50],{13829:(k,Q,i)=>{i.r(Q),i.d(Q,{_TGATextureLoader:()=>o});var Z=i(11134);function U(k){let Q=0;return{id_length:k[Q++],colormap_type:k[Q++],image_type:k[Q++],colormap_index:k[Q++]|k[Q++]<<8,colormap_length:k[Q++]|k[Q++]<<8,colormap_size:k[Q++],origin:[k[Q++]|k[Q++]<<8,k[Q++]|k[Q++]<<8],width:k[Q++]|k[Q++]<<8,height:k[Q++]|k[Q++]<<8,pixel_size:k[Q++],flags:k[Q++]}}function C(k,Q){if(Q.length<19)return void Z.c.Error("Unable to load TGA file - Not enough data to contain header");let i=18;const C=U(Q);if(C.id_length+i>Q.length)return void Z.c.Error("Unable to load TGA file - Not enough data");i+=C.id_length;let o,m=!1,O=!1,J=!1;switch(C.image_type){case 9:m=!0;case 1:O=!0;break;case 10:m=!0;case 2:break;case 11:m=!0;case 3:J=!0}const G=C.pixel_size>>3,H=C.width*C.height*G;let e,F,z,E,l,h,c;if(O&&(e=Q.subarray(i,i+=C.colormap_length*(C.colormap_size>>3))),m){let k,Z,U;o=new Uint8Array(H);let C=0;const B=new Uint8Array(G);for(;i<H&&C<H;)if(k=Q[i++],Z=1+(127&k),128&k){for(U=0;U<G;++U)B[U]=Q[i++];for(U=0;U<Z;++U)o.set(B,C+U*G);C+=G*Z}else{for(Z*=G,U=0;U<Z;++U)o[C+U]=Q[i++];C+=Z}}else o=Q.subarray(i,i+=O?C.width*C.height:H);switch((48&C.flags)>>4){default:case 2:F=0,E=1,c=C.width,z=0,l=1,h=C.height;break;case 0:F=0,E=1,c=C.width,z=C.height-1,l=-1,h=-1;break;case 3:F=C.width-1,E=-1,c=-1,z=0,l=1,h=C.height;break;case 1:F=C.width-1,E=-1,c=-1,z=C.height-1,l=-1,h=-1}const f="_getImageData"+(J?"Grey":"")+C.pixel_size+"bits",Y=B[f](C,e,o,z,l,h,F,E,c);k.getEngine()._uploadDataToTextureDirectly(k,Y)}const B={GetTGAHeader:U,UploadContent:C,_getImageData8bits:function(k,Q,i,Z,U,C,B,o,m){const O=i,J=Q,G=k.width,H=k.height;let e,F,z,E=0;const l=new Uint8Array(G*H*4);for(z=Z;z!==C;z+=U)for(F=B;F!==m;F+=o,E++)e=O[E],l[4*(F+G*z)+3]=255,l[4*(F+G*z)+2]=J[3*e+0],l[4*(F+G*z)+1]=J[3*e+1],l[4*(F+G*z)+0]=J[3*e+2];return l},_getImageData16bits:function(k,Q,i,Z,U,C,B,o,m){const O=i,J=k.width,G=k.height;let H,e,F,z=0;const E=new Uint8Array(J*G*4);for(F=Z;F!==C;F+=U)for(e=B;e!==m;e+=o,z+=2){H=O[z+0]+(O[z+1]<<8);const k=255*((31744&H)>>10)/31|0,Q=255*((992&H)>>5)/31|0,i=255*(31&H)/31|0;E[4*(e+J*F)+0]=k,E[4*(e+J*F)+1]=Q,E[4*(e+J*F)+2]=i,E[4*(e+J*F)+3]=32768&H?0:255}return E},_getImageData24bits:function(k,Q,i,Z,U,C,B,o,m){const O=i,J=k.width,G=k.height;let H,e,F=0;const z=new Uint8Array(J*G*4);for(e=Z;e!==C;e+=U)for(H=B;H!==m;H+=o,F+=3)z[4*(H+J*e)+3]=255,z[4*(H+J*e)+2]=O[F+0],z[4*(H+J*e)+1]=O[F+1],z[4*(H+J*e)+0]=O[F+2];return z},_getImageData32bits:function(k,Q,i,Z,U,C,B,o,m){const O=i,J=k.width,G=k.height;let H,e,F=0;const z=new Uint8Array(J*G*4);for(e=Z;e!==C;e+=U)for(H=B;H!==m;H+=o,F+=4)z[4*(H+J*e)+2]=O[F+0],z[4*(H+J*e)+1]=O[F+1],z[4*(H+J*e)+0]=O[F+2],z[4*(H+J*e)+3]=O[F+3];return z},_getImageDataGrey8bits:function(k,Q,i,Z,U,C,B,o,m){const O=i,J=k.width,G=k.height;let H,e,F,z=0;const E=new Uint8Array(J*G*4);for(F=Z;F!==C;F+=U)for(e=B;e!==m;e+=o,z++)H=O[z],E[4*(e+J*F)+0]=H,E[4*(e+J*F)+1]=H,E[4*(e+J*F)+2]=H,E[4*(e+J*F)+3]=255;return E},_getImageDataGrey16bits:function(k,Q,i,Z,U,C,B,o,m){const O=i,J=k.width,G=k.height;let H,e,F=0;const z=new Uint8Array(J*G*4);for(e=Z;e!==C;e+=U)for(H=B;H!==m;H+=o,F+=2)z[4*(H+J*e)+0]=O[F+0],z[4*(H+J*e)+1]=O[F+0],z[4*(H+J*e)+2]=O[F+0],z[4*(H+J*e)+3]=O[F+1];return z}};class o{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(k,Q,i){const Z=new Uint8Array(k.buffer,k.byteOffset,k.byteLength),B=U(Z);i(B.width,B.height,Q.generateMipMaps,!1,(()=>{C(Q,Z)}))}}}}]);