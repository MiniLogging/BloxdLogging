"use strict";(self["9d4d30r2sf"]=self["9d4d30r2sf"]||[]).push([[50],{15e3:(o,v,V)=>{V.r(v),V.d(v,{_TGATextureLoader:()=>U});var g=V(12308);function E(o){let v=0;return{id_length:o[v++],colormap_type:o[v++],image_type:o[v++],colormap_index:o[v++]|o[v++]<<8,colormap_length:o[v++]|o[v++]<<8,colormap_size:o[v++],origin:[o[v++]|o[v++]<<8,o[v++]|o[v++]<<8],width:o[v++]|o[v++]<<8,height:o[v++]|o[v++]<<8,pixel_size:o[v++],flags:o[v++]}}function I(o,v){if(v.length<19)return void g.b.Error("Unable to load TGA file - Not enough data to contain header");let V=18;const I=E(v);if(I.id_length+V>v.length)return void g.b.Error("Unable to load TGA file - Not enough data");V+=I.id_length;let U,n=!1,O=!1,h=!1;switch(I.image_type){case 9:n=!0;case 1:O=!0;break;case 10:n=!0;case 2:break;case 11:n=!0;case 3:h=!0}const x=I.pixel_size>>3,f=I.width*I.height*x;let l,S,T,c,R,j,t;if(O&&(l=v.subarray(V,V+=I.colormap_length*(I.colormap_size>>3))),n){let o,g,E;U=new Uint8Array(f);let I=0;const Q=new Uint8Array(x);for(;V<f&&I<f;)if(o=v[V++],g=1+(127&o),128&o){for(E=0;E<x;++E)Q[E]=v[V++];for(E=0;E<g;++E)U.set(Q,I+E*x);I+=x*g}else{for(g*=x,E=0;E<g;++E)U[I+E]=v[V++];I+=g}}else U=v.subarray(V,V+=O?I.width*I.height:f);switch((48&I.flags)>>4){default:case 2:S=0,c=1,t=I.width,T=0,R=1,j=I.height;break;case 0:S=0,c=1,t=I.width,T=I.height-1,R=-1,j=-1;break;case 3:S=I.width-1,c=-1,t=-1,T=0,R=1,j=I.height;break;case 1:S=I.width-1,c=-1,t=-1,T=I.height-1,R=-1,j=-1}const s="_getImageData"+(h?"Grey":"")+I.pixel_size+"bits",L=Q[s](I,l,U,T,R,j,S,c,t);o.getEngine()._uploadDataToTextureDirectly(o,L)}const Q={GetTGAHeader:E,UploadContent:I,_getImageData8bits:function(o,v,V,g,E,I,Q,U,n){const O=V,h=v,x=o.width,f=o.height;let l,S,T,c=0;const R=new Uint8Array(x*f*4);for(T=g;T!==I;T+=E)for(S=Q;S!==n;S+=U,c++)l=O[c],R[4*(S+x*T)+3]=255,R[4*(S+x*T)+2]=h[3*l+0],R[4*(S+x*T)+1]=h[3*l+1],R[4*(S+x*T)+0]=h[3*l+2];return R},_getImageData16bits:function(o,v,V,g,E,I,Q,U,n){const O=V,h=o.width,x=o.height;let f,l,S,T=0;const c=new Uint8Array(h*x*4);for(S=g;S!==I;S+=E)for(l=Q;l!==n;l+=U,T+=2){f=O[T+0]+(O[T+1]<<8);const o=255*((31744&f)>>10)/31|0,v=255*((992&f)>>5)/31|0,V=255*(31&f)/31|0;c[4*(l+h*S)+0]=o,c[4*(l+h*S)+1]=v,c[4*(l+h*S)+2]=V,c[4*(l+h*S)+3]=32768&f?0:255}return c},_getImageData24bits:function(o,v,V,g,E,I,Q,U,n){const O=V,h=o.width,x=o.height;let f,l,S=0;const T=new Uint8Array(h*x*4);for(l=g;l!==I;l+=E)for(f=Q;f!==n;f+=U,S+=3)T[4*(f+h*l)+3]=255,T[4*(f+h*l)+2]=O[S+0],T[4*(f+h*l)+1]=O[S+1],T[4*(f+h*l)+0]=O[S+2];return T},_getImageData32bits:function(o,v,V,g,E,I,Q,U,n){const O=V,h=o.width,x=o.height;let f,l,S=0;const T=new Uint8Array(h*x*4);for(l=g;l!==I;l+=E)for(f=Q;f!==n;f+=U,S+=4)T[4*(f+h*l)+2]=O[S+0],T[4*(f+h*l)+1]=O[S+1],T[4*(f+h*l)+0]=O[S+2],T[4*(f+h*l)+3]=O[S+3];return T},_getImageDataGrey8bits:function(o,v,V,g,E,I,Q,U,n){const O=V,h=o.width,x=o.height;let f,l,S,T=0;const c=new Uint8Array(h*x*4);for(S=g;S!==I;S+=E)for(l=Q;l!==n;l+=U,T++)f=O[T],c[4*(l+h*S)+0]=f,c[4*(l+h*S)+1]=f,c[4*(l+h*S)+2]=f,c[4*(l+h*S)+3]=255;return c},_getImageDataGrey16bits:function(o,v,V,g,E,I,Q,U,n){const O=V,h=o.width,x=o.height;let f,l,S=0;const T=new Uint8Array(h*x*4);for(l=g;l!==I;l+=E)for(f=Q;f!==n;f+=U,S+=2)T[4*(f+h*l)+0]=O[S+0],T[4*(f+h*l)+1]=O[S+0],T[4*(f+h*l)+2]=O[S+0],T[4*(f+h*l)+3]=O[S+1];return T}};class U{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(o,v,V){const g=new Uint8Array(o.buffer,o.byteOffset,o.byteLength),Q=E(g);V(Q.width,Q.height,v.generateMipMaps,!1,(()=>{I(v,g)}))}}}}]);