"use strict";(self["80dd64vgxnn"]=self["80dd64vgxnn"]||[]).push([[50],{15085:(mm,o,u)=>{u.r(o),u.d(o,{_TGATextureLoader:()=>w});var f=u(12565);function B(mm){let o=0;return{id_length:mm[o++],colormap_type:mm[o++],image_type:mm[o++],colormap_index:mm[o++]|mm[o++]<<8,colormap_length:mm[o++]|mm[o++]<<8,colormap_size:mm[o++],origin:[mm[o++]|mm[o++]<<8,mm[o++]|mm[o++]<<8],width:mm[o++]|mm[o++]<<8,height:mm[o++]|mm[o++]<<8,pixel_size:mm[o++],flags:mm[o++]}}function O(mm,o){if(o.length<19)return void f.e.Error("Unable to load TGA file - Not enough data to contain header");let u=18;const O=B(o);if(O.id_length+u>o.length)return void f.e.Error("Unable to load TGA file - Not enough data");u+=O.id_length;let w,p=!1,K=!1,z=!1;switch(O.image_type){case 9:p=!0;case 1:K=!0;break;case 10:p=!0;case 2:break;case 11:p=!0;case 3:z=!0}const Y=O.pixel_size>>3,q=O.width*O.height*Y;let x,H,E,M,l,t,Q;if(K&&(x=o.subarray(u,u+=O.colormap_length*(O.colormap_size>>3))),p){let mm,f,B;w=new Uint8Array(q);let O=0;const r=new Uint8Array(Y);for(;u<q&&O<q;)if(mm=o[u++],f=1+(127&mm),128&mm){for(B=0;B<Y;++B)r[B]=o[u++];for(B=0;B<f;++B)w.set(r,O+B*Y);O+=Y*f}else{for(f*=Y,B=0;B<f;++B)w[O+B]=o[u++];O+=f}}else w=o.subarray(u,u+=K?O.width*O.height:q);switch((48&O.flags)>>4){default:case 2:H=0,M=1,Q=O.width,E=0,l=1,t=O.height;break;case 0:H=0,M=1,Q=O.width,E=O.height-1,l=-1,t=-1;break;case 3:H=O.width-1,M=-1,Q=-1,E=0,l=1,t=O.height;break;case 1:H=O.width-1,M=-1,Q=-1,E=O.height-1,l=-1,t=-1}const b="_getImageData"+(z?"Grey":"")+O.pixel_size+"bits",J=r[b](O,x,w,E,l,t,H,M,Q);mm.getEngine()._uploadDataToTextureDirectly(mm,J)}const r={GetTGAHeader:B,UploadContent:O,_getImageData8bits:function(mm,o,u,f,B,O,r,w,p){const K=u,z=o,Y=mm.width,q=mm.height;let x,H,E,M=0;const l=new Uint8Array(Y*q*4);for(E=f;E!==O;E+=B)for(H=r;H!==p;H+=w,M++)x=K[M],l[4*(H+Y*E)+3]=255,l[4*(H+Y*E)+2]=z[3*x+0],l[4*(H+Y*E)+1]=z[3*x+1],l[4*(H+Y*E)+0]=z[3*x+2];return l},_getImageData16bits:function(mm,o,u,f,B,O,r,w,p){const K=u,z=mm.width,Y=mm.height;let q,x,H,E=0;const M=new Uint8Array(z*Y*4);for(H=f;H!==O;H+=B)for(x=r;x!==p;x+=w,E+=2){q=K[E+0]+(K[E+1]<<8);const mm=255*((31744&q)>>10)/31|0,o=255*((992&q)>>5)/31|0,u=255*(31&q)/31|0;M[4*(x+z*H)+0]=mm,M[4*(x+z*H)+1]=o,M[4*(x+z*H)+2]=u,M[4*(x+z*H)+3]=32768&q?0:255}return M},_getImageData24bits:function(mm,o,u,f,B,O,r,w,p){const K=u,z=mm.width,Y=mm.height;let q,x,H=0;const E=new Uint8Array(z*Y*4);for(x=f;x!==O;x+=B)for(q=r;q!==p;q+=w,H+=3)E[4*(q+z*x)+3]=255,E[4*(q+z*x)+2]=K[H+0],E[4*(q+z*x)+1]=K[H+1],E[4*(q+z*x)+0]=K[H+2];return E},_getImageData32bits:function(mm,o,u,f,B,O,r,w,p){const K=u,z=mm.width,Y=mm.height;let q,x,H=0;const E=new Uint8Array(z*Y*4);for(x=f;x!==O;x+=B)for(q=r;q!==p;q+=w,H+=4)E[4*(q+z*x)+2]=K[H+0],E[4*(q+z*x)+1]=K[H+1],E[4*(q+z*x)+0]=K[H+2],E[4*(q+z*x)+3]=K[H+3];return E},_getImageDataGrey8bits:function(mm,o,u,f,B,O,r,w,p){const K=u,z=mm.width,Y=mm.height;let q,x,H,E=0;const M=new Uint8Array(z*Y*4);for(H=f;H!==O;H+=B)for(x=r;x!==p;x+=w,E++)q=K[E],M[4*(x+z*H)+0]=q,M[4*(x+z*H)+1]=q,M[4*(x+z*H)+2]=q,M[4*(x+z*H)+3]=255;return M},_getImageDataGrey16bits:function(mm,o,u,f,B,O,r,w,p){const K=u,z=mm.width,Y=mm.height;let q,x,H=0;const E=new Uint8Array(z*Y*4);for(x=f;x!==O;x+=B)for(q=r;q!==p;q+=w,H+=2)E[4*(q+z*x)+0]=K[H+0],E[4*(q+z*x)+1]=K[H+0],E[4*(q+z*x)+2]=K[H+0],E[4*(q+z*x)+3]=K[H+1];return E}};class w{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(mm,o,u){const f=new Uint8Array(mm.buffer,mm.byteOffset,mm.byteLength),r=B(f);u(r.width,r.height,o.generateMipMaps,!1,(()=>{O(o,f)}))}}}}]);