"use strict";(self.lfntwv94xlc=self.lfntwv94xlc||[]).push([[50],{13847:(m,S,h)=>{h.r(S),h.d(S,{_TGATextureLoader:()=>b});var l=h(11173);function M(m){let S=0;return{id_length:m[S++],colormap_type:m[S++],image_type:m[S++],colormap_index:m[S++]|m[S++]<<8,colormap_length:m[S++]|m[S++]<<8,colormap_size:m[S++],origin:[m[S++]|m[S++]<<8,m[S++]|m[S++]<<8],width:m[S++]|m[S++]<<8,height:m[S++]|m[S++]<<8,pixel_size:m[S++],flags:m[S++]}}function O(m,S){if(S.length<19)return void l.e.Error("Unable to load TGA file - Not enough data to contain header");let h=18;const O=M(S);if(O.id_length+h>S.length)return void l.e.Error("Unable to load TGA file - Not enough data");h+=O.id_length;let b,q=!1,Y=!1,V=!1;switch(O.image_type){case 9:q=!0;case 1:Y=!0;break;case 10:q=!0;case 2:break;case 11:q=!0;case 3:V=!0}const I=O.pixel_size>>3,Z=O.width*O.height*I;let C,B,D,E,n,L,U;if(Y&&(C=S.subarray(h,h+=O.colormap_length*(O.colormap_size>>3))),q){let m,l,M;b=new Uint8Array(Z);let O=0;const u=new Uint8Array(I);for(;h<Z&&O<Z;)if(m=S[h++],l=1+(127&m),128&m){for(M=0;M<I;++M)u[M]=S[h++];for(M=0;M<l;++M)b.set(u,O+M*I);O+=I*l}else{for(l*=I,M=0;M<l;++M)b[O+M]=S[h++];O+=l}}else b=S.subarray(h,h+=Y?O.width*O.height:Z);switch((48&O.flags)>>4){default:case 2:B=0,E=1,U=O.width,D=0,n=1,L=O.height;break;case 0:B=0,E=1,U=O.width,D=O.height-1,n=-1,L=-1;break;case 3:B=O.width-1,E=-1,U=-1,D=0,n=1,L=O.height;break;case 1:B=O.width-1,E=-1,U=-1,D=O.height-1,n=-1,L=-1}const H="_getImageData"+(V?"Grey":"")+O.pixel_size+"bits",R=u[H](O,C,b,D,n,L,B,E,U);m.getEngine()._uploadDataToTextureDirectly(m,R)}const u={GetTGAHeader:M,UploadContent:O,_getImageData8bits:function(m,S,h,l,M,O,u,b,q){const Y=h,V=S,I=m.width,Z=m.height;let C,B,D,E=0;const n=new Uint8Array(I*Z*4);for(D=l;D!==O;D+=M)for(B=u;B!==q;B+=b,E++)C=Y[E],n[4*(B+I*D)+3]=255,n[4*(B+I*D)+2]=V[3*C+0],n[4*(B+I*D)+1]=V[3*C+1],n[4*(B+I*D)+0]=V[3*C+2];return n},_getImageData16bits:function(m,S,h,l,M,O,u,b,q){const Y=h,V=m.width,I=m.height;let Z,C,B,D=0;const E=new Uint8Array(V*I*4);for(B=l;B!==O;B+=M)for(C=u;C!==q;C+=b,D+=2){Z=Y[D+0]+(Y[D+1]<<8);const m=255*((31744&Z)>>10)/31|0,S=255*((992&Z)>>5)/31|0,h=255*(31&Z)/31|0;E[4*(C+V*B)+0]=m,E[4*(C+V*B)+1]=S,E[4*(C+V*B)+2]=h,E[4*(C+V*B)+3]=32768&Z?0:255}return E},_getImageData24bits:function(m,S,h,l,M,O,u,b,q){const Y=h,V=m.width,I=m.height;let Z,C,B=0;const D=new Uint8Array(V*I*4);for(C=l;C!==O;C+=M)for(Z=u;Z!==q;Z+=b,B+=3)D[4*(Z+V*C)+3]=255,D[4*(Z+V*C)+2]=Y[B+0],D[4*(Z+V*C)+1]=Y[B+1],D[4*(Z+V*C)+0]=Y[B+2];return D},_getImageData32bits:function(m,S,h,l,M,O,u,b,q){const Y=h,V=m.width,I=m.height;let Z,C,B=0;const D=new Uint8Array(V*I*4);for(C=l;C!==O;C+=M)for(Z=u;Z!==q;Z+=b,B+=4)D[4*(Z+V*C)+2]=Y[B+0],D[4*(Z+V*C)+1]=Y[B+1],D[4*(Z+V*C)+0]=Y[B+2],D[4*(Z+V*C)+3]=Y[B+3];return D},_getImageDataGrey8bits:function(m,S,h,l,M,O,u,b,q){const Y=h,V=m.width,I=m.height;let Z,C,B,D=0;const E=new Uint8Array(V*I*4);for(B=l;B!==O;B+=M)for(C=u;C!==q;C+=b,D++)Z=Y[D],E[4*(C+V*B)+0]=Z,E[4*(C+V*B)+1]=Z,E[4*(C+V*B)+2]=Z,E[4*(C+V*B)+3]=255;return E},_getImageDataGrey16bits:function(m,S,h,l,M,O,u,b,q){const Y=h,V=m.width,I=m.height;let Z,C,B=0;const D=new Uint8Array(V*I*4);for(C=l;C!==O;C+=M)for(Z=u;Z!==q;Z+=b,B+=2)D[4*(Z+V*C)+0]=Y[B+0],D[4*(Z+V*C)+1]=Y[B+0],D[4*(Z+V*C)+2]=Y[B+0],D[4*(Z+V*C)+3]=Y[B+1];return D}};class b{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(m,S,h){const l=new Uint8Array(m.buffer,m.byteOffset,m.byteLength),u=M(l);h(u.width,u.height,S.generateMipMaps,!1,(()=>{O(S,l)}))}}}}]);