"use strict";(self["3gghkoft8x"]=self["3gghkoft8x"]||[]).push([[50],{14802:(y,S,I)=>{I.r(S),I.d(S,{_TGATextureLoader:()=>d});var V=I(12151);function i(y){let S=0;return{id_length:y[S++],colormap_type:y[S++],image_type:y[S++],colormap_index:y[S++]|y[S++]<<8,colormap_length:y[S++]|y[S++]<<8,colormap_size:y[S++],origin:[y[S++]|y[S++]<<8,y[S++]|y[S++]<<8],width:y[S++]|y[S++]<<8,height:y[S++]|y[S++]<<8,pixel_size:y[S++],flags:y[S++]}}function A(y,S){if(S.length<19)return void V.b.Error("Unable to load TGA file - Not enough data to contain header");let I=18;const A=i(S);if(A.id_length+I>S.length)return void V.b.Error("Unable to load TGA file - Not enough data");I+=A.id_length;let d,F=!1,J=!1,u=!1;switch(A.image_type){case 9:F=!0;case 1:J=!0;break;case 10:F=!0;case 2:break;case 11:F=!0;case 3:u=!0}const K=A.pixel_size>>3,G=A.width*A.height*K;let p,L,T,l,j,s,O;if(J&&(p=S.subarray(I,I+=A.colormap_length*(A.colormap_size>>3))),F){let y,V,i;d=new Uint8Array(G);let A=0;const B=new Uint8Array(K);for(;I<G&&A<G;)if(y=S[I++],V=1+(127&y),128&y){for(i=0;i<K;++i)B[i]=S[I++];for(i=0;i<V;++i)d.set(B,A+i*K);A+=K*V}else{for(V*=K,i=0;i<V;++i)d[A+i]=S[I++];A+=V}}else d=S.subarray(I,I+=J?A.width*A.height:G);switch((48&A.flags)>>4){default:case 2:L=0,l=1,O=A.width,T=0,j=1,s=A.height;break;case 0:L=0,l=1,O=A.width,T=A.height-1,j=-1,s=-1;break;case 3:L=A.width-1,l=-1,O=-1,T=0,j=1,s=A.height;break;case 1:L=A.width-1,l=-1,O=-1,T=A.height-1,j=-1,s=-1}const f="_getImageData"+(u?"Grey":"")+A.pixel_size+"bits",my=B[f](A,p,d,T,j,s,L,l,O);y.getEngine()._uploadDataToTextureDirectly(y,my)}const B={GetTGAHeader:i,UploadContent:A,_getImageData8bits:function(y,S,I,V,i,A,B,d,F){const J=I,u=S,K=y.width,G=y.height;let p,L,T,l=0;const j=new Uint8Array(K*G*4);for(T=V;T!==A;T+=i)for(L=B;L!==F;L+=d,l++)p=J[l],j[4*(L+K*T)+3]=255,j[4*(L+K*T)+2]=u[3*p+0],j[4*(L+K*T)+1]=u[3*p+1],j[4*(L+K*T)+0]=u[3*p+2];return j},_getImageData16bits:function(y,S,I,V,i,A,B,d,F){const J=I,u=y.width,K=y.height;let G,p,L,T=0;const l=new Uint8Array(u*K*4);for(L=V;L!==A;L+=i)for(p=B;p!==F;p+=d,T+=2){G=J[T+0]+(J[T+1]<<8);const y=255*((31744&G)>>10)/31|0,S=255*((992&G)>>5)/31|0,I=255*(31&G)/31|0;l[4*(p+u*L)+0]=y,l[4*(p+u*L)+1]=S,l[4*(p+u*L)+2]=I,l[4*(p+u*L)+3]=32768&G?0:255}return l},_getImageData24bits:function(y,S,I,V,i,A,B,d,F){const J=I,u=y.width,K=y.height;let G,p,L=0;const T=new Uint8Array(u*K*4);for(p=V;p!==A;p+=i)for(G=B;G!==F;G+=d,L+=3)T[4*(G+u*p)+3]=255,T[4*(G+u*p)+2]=J[L+0],T[4*(G+u*p)+1]=J[L+1],T[4*(G+u*p)+0]=J[L+2];return T},_getImageData32bits:function(y,S,I,V,i,A,B,d,F){const J=I,u=y.width,K=y.height;let G,p,L=0;const T=new Uint8Array(u*K*4);for(p=V;p!==A;p+=i)for(G=B;G!==F;G+=d,L+=4)T[4*(G+u*p)+2]=J[L+0],T[4*(G+u*p)+1]=J[L+1],T[4*(G+u*p)+0]=J[L+2],T[4*(G+u*p)+3]=J[L+3];return T},_getImageDataGrey8bits:function(y,S,I,V,i,A,B,d,F){const J=I,u=y.width,K=y.height;let G,p,L,T=0;const l=new Uint8Array(u*K*4);for(L=V;L!==A;L+=i)for(p=B;p!==F;p+=d,T++)G=J[T],l[4*(p+u*L)+0]=G,l[4*(p+u*L)+1]=G,l[4*(p+u*L)+2]=G,l[4*(p+u*L)+3]=255;return l},_getImageDataGrey16bits:function(y,S,I,V,i,A,B,d,F){const J=I,u=y.width,K=y.height;let G,p,L=0;const T=new Uint8Array(u*K*4);for(p=V;p!==A;p+=i)for(G=B;G!==F;G+=d,L+=2)T[4*(G+u*p)+0]=J[L+0],T[4*(G+u*p)+1]=J[L+0],T[4*(G+u*p)+2]=J[L+0],T[4*(G+u*p)+3]=J[L+1];return T}};class d{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(y,S,I){const V=new Uint8Array(y.buffer,y.byteOffset,y.byteLength),B=i(V);I(B.width,B.height,S.generateMipMaps,!1,(()=>{A(S,V)}))}}}}]);