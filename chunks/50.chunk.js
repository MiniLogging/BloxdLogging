"use strict";(self.i6szn8jgzh=self.i6szn8jgzh||[]).push([[50],{14328:(b,n,i)=>{i.r(n),i.d(n,{_TGATextureLoader:()=>Y});var e=i(11621);function V(b){let n=0;return{id_length:b[n++],colormap_type:b[n++],image_type:b[n++],colormap_index:b[n++]|b[n++]<<8,colormap_length:b[n++]|b[n++]<<8,colormap_size:b[n++],origin:[b[n++]|b[n++]<<8,b[n++]|b[n++]<<8],width:b[n++]|b[n++]<<8,height:b[n++]|b[n++]<<8,pixel_size:b[n++],flags:b[n++]}}function Q(b,n){if(n.length<19)return void e.b.Error("Unable to load TGA file - Not enough data to contain header");let i=18;const Q=V(n);if(Q.id_length+i>n.length)return void e.b.Error("Unable to load TGA file - Not enough data");i+=Q.id_length;let Y,L=!1,B=!1,mb=!1;switch(Q.image_type){case 9:L=!0;case 1:B=!0;break;case 10:L=!0;case 2:break;case 11:L=!0;case 3:mb=!0}const N=Q.pixel_size>>3,Z=Q.width*Q.height*N;let T,z,K,I,O,u,d;if(B&&(T=n.subarray(i,i+=Q.colormap_length*(Q.colormap_size>>3))),L){let b,e,V;Y=new Uint8Array(Z);let Q=0;const U=new Uint8Array(N);for(;i<Z&&Q<Z;)if(b=n[i++],e=1+(127&b),128&b){for(V=0;V<N;++V)U[V]=n[i++];for(V=0;V<e;++V)Y.set(U,Q+V*N);Q+=N*e}else{for(e*=N,V=0;V<e;++V)Y[Q+V]=n[i++];Q+=e}}else Y=n.subarray(i,i+=B?Q.width*Q.height:Z);switch((48&Q.flags)>>4){default:case 2:z=0,I=1,d=Q.width,K=0,O=1,u=Q.height;break;case 0:z=0,I=1,d=Q.width,K=Q.height-1,O=-1,u=-1;break;case 3:z=Q.width-1,I=-1,d=-1,K=0,O=1,u=Q.height;break;case 1:z=Q.width-1,I=-1,d=-1,K=Q.height-1,O=-1,u=-1}const G="_getImageData"+(mb?"Grey":"")+Q.pixel_size+"bits",o=U[G](Q,T,Y,K,O,u,z,I,d);b.getEngine()._uploadDataToTextureDirectly(b,o)}const U={GetTGAHeader:V,UploadContent:Q,_getImageData8bits:function(b,n,i,e,V,Q,U,Y,L){const B=i,mb=n,N=b.width,Z=b.height;let T,z,K,I=0;const O=new Uint8Array(N*Z*4);for(K=e;K!==Q;K+=V)for(z=U;z!==L;z+=Y,I++)T=B[I],O[4*(z+N*K)+3]=255,O[4*(z+N*K)+2]=mb[3*T+0],O[4*(z+N*K)+1]=mb[3*T+1],O[4*(z+N*K)+0]=mb[3*T+2];return O},_getImageData16bits:function(b,n,i,e,V,Q,U,Y,L){const B=i,mb=b.width,N=b.height;let Z,T,z,K=0;const I=new Uint8Array(mb*N*4);for(z=e;z!==Q;z+=V)for(T=U;T!==L;T+=Y,K+=2){Z=B[K+0]+(B[K+1]<<8);const b=255*((31744&Z)>>10)/31|0,n=255*((992&Z)>>5)/31|0,i=255*(31&Z)/31|0;I[4*(T+mb*z)+0]=b,I[4*(T+mb*z)+1]=n,I[4*(T+mb*z)+2]=i,I[4*(T+mb*z)+3]=32768&Z?0:255}return I},_getImageData24bits:function(b,n,i,e,V,Q,U,Y,L){const B=i,mb=b.width,N=b.height;let Z,T,z=0;const K=new Uint8Array(mb*N*4);for(T=e;T!==Q;T+=V)for(Z=U;Z!==L;Z+=Y,z+=3)K[4*(Z+mb*T)+3]=255,K[4*(Z+mb*T)+2]=B[z+0],K[4*(Z+mb*T)+1]=B[z+1],K[4*(Z+mb*T)+0]=B[z+2];return K},_getImageData32bits:function(b,n,i,e,V,Q,U,Y,L){const B=i,mb=b.width,N=b.height;let Z,T,z=0;const K=new Uint8Array(mb*N*4);for(T=e;T!==Q;T+=V)for(Z=U;Z!==L;Z+=Y,z+=4)K[4*(Z+mb*T)+2]=B[z+0],K[4*(Z+mb*T)+1]=B[z+1],K[4*(Z+mb*T)+0]=B[z+2],K[4*(Z+mb*T)+3]=B[z+3];return K},_getImageDataGrey8bits:function(b,n,i,e,V,Q,U,Y,L){const B=i,mb=b.width,N=b.height;let Z,T,z,K=0;const I=new Uint8Array(mb*N*4);for(z=e;z!==Q;z+=V)for(T=U;T!==L;T+=Y,K++)Z=B[K],I[4*(T+mb*z)+0]=Z,I[4*(T+mb*z)+1]=Z,I[4*(T+mb*z)+2]=Z,I[4*(T+mb*z)+3]=255;return I},_getImageDataGrey16bits:function(b,n,i,e,V,Q,U,Y,L){const B=i,mb=b.width,N=b.height;let Z,T,z=0;const K=new Uint8Array(mb*N*4);for(T=e;T!==Q;T+=V)for(Z=U;Z!==L;Z+=Y,z+=2)K[4*(Z+mb*T)+0]=B[z+0],K[4*(Z+mb*T)+1]=B[z+0],K[4*(Z+mb*T)+2]=B[z+0],K[4*(Z+mb*T)+3]=B[z+1];return K}};class Y{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(b,n,i){const e=new Uint8Array(b.buffer,b.byteOffset,b.byteLength),U=V(e);i(U.width,U.height,n.generateMipMaps,!1,(()=>{Q(n,e)}))}}}}]);