"use strict";(self.fkqm0epoq5=self.fkqm0epoq5||[]).push([[50],{14152:(D,l,G)=>{G.r(l),G.d(l,{_TGATextureLoader:()=>X});var V=G(11546);function N(D){let l=0;return{id_length:D[l++],colormap_type:D[l++],image_type:D[l++],colormap_index:D[l++]|D[l++]<<8,colormap_length:D[l++]|D[l++]<<8,colormap_size:D[l++],origin:[D[l++]|D[l++]<<8,D[l++]|D[l++]<<8],width:D[l++]|D[l++]<<8,height:D[l++]|D[l++]<<8,pixel_size:D[l++],flags:D[l++]}}function M(D,l){if(l.length<19)return void V.d.Error("Unable to load TGA file - Not enough data to contain header");let G=18;const M=N(l);if(M.id_length+G>l.length)return void V.d.Error("Unable to load TGA file - Not enough data");G+=M.id_length;let X,t=!1,R=!1,n=!1;switch(M.image_type){case 9:t=!0;case 1:R=!0;break;case 10:t=!0;case 2:break;case 11:t=!0;case 3:n=!0}const g=M.pixel_size>>3,j=M.width*M.height*g;let e,K,F,d,H,h,x;if(R&&(e=l.subarray(G,G+=M.colormap_length*(M.colormap_size>>3))),t){let D,V,N;X=new Uint8Array(j);let M=0;const b=new Uint8Array(g);for(;G<j&&M<j;)if(D=l[G++],V=1+(127&D),128&D){for(N=0;N<g;++N)b[N]=l[G++];for(N=0;N<V;++N)X.set(b,M+N*g);M+=g*V}else{for(V*=g,N=0;N<V;++N)X[M+N]=l[G++];M+=V}}else X=l.subarray(G,G+=R?M.width*M.height:j);switch((48&M.flags)>>4){default:case 2:K=0,d=1,x=M.width,F=0,H=1,h=M.height;break;case 0:K=0,d=1,x=M.width,F=M.height-1,H=-1,h=-1;break;case 3:K=M.width-1,d=-1,x=-1,F=0,H=1,h=M.height;break;case 1:K=M.width-1,d=-1,x=-1,F=M.height-1,H=-1,h=-1}const r="_getImageData"+(n?"Grey":"")+M.pixel_size+"bits",o=b[r](M,e,X,F,H,h,K,d,x);D.getEngine()._uploadDataToTextureDirectly(D,o)}const b={GetTGAHeader:N,UploadContent:M,_getImageData8bits:function(D,l,G,V,N,M,b,X,t){const R=G,n=l,g=D.width,j=D.height;let e,K,F,d=0;const H=new Uint8Array(g*j*4);for(F=V;F!==M;F+=N)for(K=b;K!==t;K+=X,d++)e=R[d],H[4*(K+g*F)+3]=255,H[4*(K+g*F)+2]=n[3*e+0],H[4*(K+g*F)+1]=n[3*e+1],H[4*(K+g*F)+0]=n[3*e+2];return H},_getImageData16bits:function(D,l,G,V,N,M,b,X,t){const R=G,n=D.width,g=D.height;let j,e,K,F=0;const d=new Uint8Array(n*g*4);for(K=V;K!==M;K+=N)for(e=b;e!==t;e+=X,F+=2){j=R[F+0]+(R[F+1]<<8);const D=255*((31744&j)>>10)/31|0,l=255*((992&j)>>5)/31|0,G=255*(31&j)/31|0;d[4*(e+n*K)+0]=D,d[4*(e+n*K)+1]=l,d[4*(e+n*K)+2]=G,d[4*(e+n*K)+3]=32768&j?0:255}return d},_getImageData24bits:function(D,l,G,V,N,M,b,X,t){const R=G,n=D.width,g=D.height;let j,e,K=0;const F=new Uint8Array(n*g*4);for(e=V;e!==M;e+=N)for(j=b;j!==t;j+=X,K+=3)F[4*(j+n*e)+3]=255,F[4*(j+n*e)+2]=R[K+0],F[4*(j+n*e)+1]=R[K+1],F[4*(j+n*e)+0]=R[K+2];return F},_getImageData32bits:function(D,l,G,V,N,M,b,X,t){const R=G,n=D.width,g=D.height;let j,e,K=0;const F=new Uint8Array(n*g*4);for(e=V;e!==M;e+=N)for(j=b;j!==t;j+=X,K+=4)F[4*(j+n*e)+2]=R[K+0],F[4*(j+n*e)+1]=R[K+1],F[4*(j+n*e)+0]=R[K+2],F[4*(j+n*e)+3]=R[K+3];return F},_getImageDataGrey8bits:function(D,l,G,V,N,M,b,X,t){const R=G,n=D.width,g=D.height;let j,e,K,F=0;const d=new Uint8Array(n*g*4);for(K=V;K!==M;K+=N)for(e=b;e!==t;e+=X,F++)j=R[F],d[4*(e+n*K)+0]=j,d[4*(e+n*K)+1]=j,d[4*(e+n*K)+2]=j,d[4*(e+n*K)+3]=255;return d},_getImageDataGrey16bits:function(D,l,G,V,N,M,b,X,t){const R=G,n=D.width,g=D.height;let j,e,K=0;const F=new Uint8Array(n*g*4);for(e=V;e!==M;e+=N)for(j=b;j!==t;j+=X,K+=2)F[4*(j+n*e)+0]=R[K+0],F[4*(j+n*e)+1]=R[K+0],F[4*(j+n*e)+2]=R[K+0],F[4*(j+n*e)+3]=R[K+1];return F}};class X{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(D,l,G){const V=new Uint8Array(D.buffer,D.byteOffset,D.byteLength),b=N(V);G(b.width,b.height,l.generateMipMaps,!1,(()=>{M(l,V)}))}}}}]);