"use strict";(self.fjf2z1c8il8=self.fjf2z1c8il8||[]).push([[89],{15794:(g,i,a)=>{a.r(i),a.d(i,{FlowGraphAngleBetweenBlock:()=>Y,FlowGraphAxisAngleFromQuaternionBlock:()=>C,FlowGraphConjugateBlock:()=>P,FlowGraphCrossBlock:()=>p,FlowGraphDotBlock:()=>D,FlowGraphLengthBlock:()=>B,FlowGraphNormalizeBlock:()=>c,FlowGraphQuaternionFromAxisAngleBlock:()=>f,FlowGraphQuaternionFromDirectionsBlock:()=>U,FlowGraphRotate2DBlock:()=>R,FlowGraphRotate3DBlock:()=>x,FlowGraphTransformBlock:()=>X,FlowGraphTransformCoordinatesBlock:()=>v});var n=a(14234),L=a(14214),d=a(12415),b=a(15774),k=a(15786),e=a(12452),N=a(14249),F=a(13858);const I="cachedOperationAxis",j="cachedOperationAngle",y="cachedExecutionId";class B extends k.d{constructor(g){super(L.d,L.q,(g=>this._polymorphicLength(g)),"FlowGraphLengthBlock",g)}_polymorphicLength(g){switch((0,N.l)(g)){case"Vector2":case"Bi":case"Vector4":case"Quaternion":return g.length();default:throw new Error(`Cannot compute length of value ${g}`)}}}(0,d.e)("FlowGraphLengthBlock",B);class c extends k.d{constructor(g){super(L.d,L.d,(g=>this._polymorphicNormalize(g)),"FlowGraphNormalizeBlock",g)}_polymorphicNormalize(g){var i;let a;switch((0,N.l)(g)){case"Vector2":case"Bi":case"Vector4":case"Quaternion":if(a=g.normalizeToNew(),null!==(i=this.config)&&void 0!==i&&i.nanOnZeroLength){0===g.length()&&a.Qd(NaN)}return a;default:throw new Error(`Cannot normalize value ${g}`)}}}(0,d.e)("FlowGraphNormalizeBlock",c);class D extends b.e{constructor(g){super(L.d,L.d,L.q,((g,i)=>this._polymorphicDot(g,i)),"FlowGraphDotBlock",g)}_polymorphicDot(g,i){switch((0,N.l)(g)){case"Vector2":case"Bi":case"Vector4":case"Quaternion":return g.dot(i);default:throw new Error(`Cannot get dot product of ${g} and ${i}`)}}}(0,d.e)("FlowGraphDotBlock",D);class p extends b.e{constructor(g){super(L.w,L.w,L.w,((g,i)=>e.Bi.Cross(g,i)),"FlowGraphCrossBlock",g)}}(0,d.e)("FlowGraphCrossBlock",p);class R extends b.e{constructor(g){super(L.v,L.q,L.v,((g,i)=>g.rotate(i)),"FlowGraphRotate2DBlock",g)}}(0,d.e)("FlowGraphRotate2DBlock",R);class x extends b.e{constructor(g){super(L.w,L.t,L.w,((g,i)=>g.applyRotationQuaternion(i)),"FlowGraphRotate3DBlock",g)}}function E(g,i){switch((0,N.l)(g)){case"Vector2":case"Bi":return i.transformVector(g);case"Vector4":return new e.Vector4(g.x*i.m[0]+g.y*i.m[1]+g.z*i.m[2]+g.w*i.m[3],g.x*i.m[4]+g.y*i.m[5]+g.z*i.m[6]+g.w*i.m[7],g.x*i.m[8]+g.y*i.m[9]+g.z*i.m[10]+g.w*i.m[11],g.x*i.m[12]+g.y*i.m[13]+g.z*i.m[14]+g.w*i.m[15]);default:throw new Error(`Cannot transform value ${g}`)}}(0,d.e)("FlowGraphRotate3DBlock",x);class X extends b.e{constructor(g){const i=(null===g||void 0===g?void 0:g.vectorType)||"Bi",a="Vector2"===i?"Matrix2D":"Bi"===i?"Matrix3D":"Matrix";super((0,L.I)(i),(0,L.I)(a),(0,L.I)(i),E,"FlowGraphTransformVectorBlock",g)}}(0,d.e)("FlowGraphTransformVectorBlock",X);class v extends b.e{constructor(g){super(L.w,L.h,L.w,((g,i)=>e.Bi.TransformCoordinates(g,i)),"FlowGraphTransformCoordinatesBlock",g)}}(0,d.e)("FlowGraphTransformCoordinatesBlock",v);class P extends k.d{constructor(g){super(L.t,L.t,(g=>g.conjugate()),"FlowGraphConjugateBlock",g)}}(0,d.e)("FlowGraphConjugateBlock",P);class Y extends b.e{constructor(g){super(L.t,L.t,L.q,((g,i)=>(0,F.c)(g,i)),"FlowGraphAngleBetweenBlock",g)}}(0,d.e)("FlowGraphAngleBetweenBlock",Y);class f extends b.e{constructor(g){super(L.w,L.q,L.t,((g,i)=>e.Quaternion.RotationAxis(g,i)),"FlowGraphQuaternionFromAxisAngleBlock",g)}}(0,d.e)("FlowGraphQuaternionFromAxisAngleBlock",f);class C extends n.c{constructor(g){super(g),this.a=this.registerDataInput("a",L.t),this.axis=this.registerDataOutput("axis",L.w),this.angle=this.registerDataOutput("angle",L.q),this.isValid=this.registerDataOutput("isValid",L.e)}_updateOutputs(g){const i=g._getExecutionVariable(this,y,-1),a=g._getExecutionVariable(this,I,null),n=g._getExecutionVariable(this,j,null);if(void 0!==a&&null!==a&&void 0!==n&&null!==n&&i===g.executionId)this.axis.setValue(a,g),this.angle.setValue(n,g);else try{const{axis:i,angle:a}=this.a.getValue(g).toAxisAngle();g._setExecutionVariable(this,I,i),g._setExecutionVariable(this,j,a),g._setExecutionVariable(this,y,g.executionId),this.axis.setValue(i,g),this.angle.setValue(a,g),this.isValid.setValue(!0,g)}catch(L){this.isValid.setValue(!1,g)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}(0,d.e)("FlowGraphAxisAngleFromQuaternionBlock",C);class U extends b.e{constructor(g){super(L.w,L.w,L.t,((g,i)=>(0,F.g)(g,i)),"FlowGraphQuaternionFromDirectionsBlock",g)}}},15774:(g,i,a)=>{a.d(i,{e:()=>L});var n=a(15780);class L extends n.d{constructor(g,i,a,n,L,d){super(a,d),this._operation=n,this._className=L,this.a=this.registerDataInput("a",g),this.b=this.registerDataInput("b",i)}_doOperation(g){const i=this.a.getValue(g),a=this.b.getValue(g);return this._operation(i,a)}getClassName(){return this._className}}},15780:(g,i,a)=>{a.d(i,{d:()=>k});var n=a(14234),L=a(14214);const d="cachedOperationValue",b="cachedExecutionId";class k extends n.c{constructor(g,i){super(i),this.value=this.registerDataOutput("value",g),this.isValid=this.registerDataOutput("isValid",L.e)}_updateOutputs(g){const i=g._getExecutionVariable(this,b,-1),a=g._getExecutionVariable(this,d,null);if(void 0!==a&&null!==a&&i===g.executionId)this.isValid.setValue(!0,g),this.value.setValue(a,g);else try{const i=this._doOperation(g);if(void 0===i||null===i)return void this.isValid.setValue(!1,g);g._setExecutionVariable(this,d,i),g._setExecutionVariable(this,b,g.executionId),this.value.setValue(i,g),this.isValid.setValue(!0,g)}catch(n){this.isValid.setValue(!1,g)}}}},15786:(g,i,a)=>{a.d(i,{d:()=>L});var n=a(15780);class L extends n.d{constructor(g,i,a,n,L){super(i,L),this._operation=a,this._className=n,this.a=this.registerDataInput("a",g)}_doOperation(g){return this._operation(this.a.getValue(g))}getClassName(){return this._className}}}}]);