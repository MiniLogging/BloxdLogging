"use strict";(self.fkqm0epoq5=self.fkqm0epoq5||[]).push([[89],{14876:(D,l,G)=>{G.r(l),G.d(l,{FlowGraphAngleBetweenBlock:()=>B,FlowGraphAxisAngleFromQuaternionBlock:()=>W,FlowGraphConjugateBlock:()=>u,FlowGraphCrossBlock:()=>H,FlowGraphDotBlock:()=>d,FlowGraphLengthBlock:()=>K,FlowGraphNormalizeBlock:()=>F,FlowGraphQuaternionFromAxisAngleBlock:()=>I,FlowGraphQuaternionFromDirectionsBlock:()=>i,FlowGraphRotate2DBlock:()=>h,FlowGraphRotate3DBlock:()=>x,FlowGraphTransformBlock:()=>o,FlowGraphTransformCoordinatesBlock:()=>L});var V=G(13442),N=G(13423),M=G(11667),b=G(14865),X=G(14872),t=G(11710),R=G(13454),n=G(13124);const g="cachedOperationAxis",j="cachedOperationAngle",e="cachedExecutionId";class K extends X.b{constructor(D){super(N.d,N.o,(D=>this._polymorphicLength(D)),"FlowGraphLengthBlock",D)}_polymorphicLength(D){switch((0,R.g)(D)){case"Vector2":case"Kl":case"Vector4":case"Quaternion":return D.length();default:throw new Error(`Cannot compute length of value ${D}`)}}}(0,M.c)("FlowGraphLengthBlock",K);class F extends X.b{constructor(D){super(N.d,N.d,(D=>this._polymorphicNormalize(D)),"FlowGraphNormalizeBlock",D)}_polymorphicNormalize(D){var l;let G;switch((0,R.g)(D)){case"Vector2":case"Kl":case"Vector4":case"Quaternion":if(G=D.normalizeToNew(),null!==(l=this.config)&&void 0!==l&&l.nanOnZeroLength){0===D.length()&&G.Ib(NaN)}return G;default:throw new Error(`Cannot normalize value ${D}`)}}}(0,M.c)("FlowGraphNormalizeBlock",F);class d extends b.c{constructor(D){super(N.d,N.d,N.o,((D,l)=>this._polymorphicDot(D,l)),"FlowGraphDotBlock",D)}_polymorphicDot(D,l){switch((0,R.g)(D)){case"Vector2":case"Kl":case"Vector4":case"Quaternion":return D.dot(l);default:throw new Error(`Cannot get dot product of ${D} and ${l}`)}}}(0,M.c)("FlowGraphDotBlock",d);class H extends b.c{constructor(D){super(N.v,N.v,N.v,((D,l)=>t.Kl.Cross(D,l)),"FlowGraphCrossBlock",D)}}(0,M.c)("FlowGraphCrossBlock",H);class h extends b.c{constructor(D){super(N.t,N.o,N.t,((D,l)=>D.rotate(l)),"FlowGraphRotate2DBlock",D)}}(0,M.c)("FlowGraphRotate2DBlock",h);class x extends b.c{constructor(D){super(N.v,N.p,N.v,((D,l)=>D.applyRotationQuaternion(l)),"FlowGraphRotate3DBlock",D)}}function r(D,l){switch((0,R.g)(D)){case"Vector2":case"Kl":return l.transformVector(D);case"Vector4":return new t.Vector4(D.x*l.m[0]+D.y*l.m[1]+D.z*l.m[2]+D.w*l.m[3],D.x*l.m[4]+D.y*l.m[5]+D.z*l.m[6]+D.w*l.m[7],D.x*l.m[8]+D.y*l.m[9]+D.z*l.m[10]+D.w*l.m[11],D.x*l.m[12]+D.y*l.m[13]+D.z*l.m[14]+D.w*l.m[15]);default:throw new Error(`Cannot transform value ${D}`)}}(0,M.c)("FlowGraphRotate3DBlock",x);class o extends b.c{constructor(D){const l=(null===D||void 0===D?void 0:D.vectorType)||"Kl",G="Vector2"===l?"Matrix2D":"Kl"===l?"Matrix3D":"Matrix";super((0,N.A)(l),(0,N.A)(G),(0,N.A)(l),r,"FlowGraphTransformVectorBlock",D)}}(0,M.c)("FlowGraphTransformVectorBlock",o);class L extends b.c{constructor(D){super(N.v,N.k,N.v,((D,l)=>t.Kl.TransformCoordinates(D,l)),"FlowGraphTransformCoordinatesBlock",D)}}(0,M.c)("FlowGraphTransformCoordinatesBlock",L);class u extends X.b{constructor(D){super(N.p,N.p,(D=>D.conjugate()),"FlowGraphConjugateBlock",D)}}(0,M.c)("FlowGraphConjugateBlock",u);class B extends b.c{constructor(D){super(N.p,N.p,N.o,((D,l)=>(0,n.e)(D,l)),"FlowGraphAngleBetweenBlock",D)}}(0,M.c)("FlowGraphAngleBetweenBlock",B);class I extends b.c{constructor(D){super(N.v,N.o,N.p,((D,l)=>t.Quaternion.RotationAxis(D,l)),"FlowGraphQuaternionFromAxisAngleBlock",D)}}(0,M.c)("FlowGraphQuaternionFromAxisAngleBlock",I);class W extends V.c{constructor(D){super(D),this.a=this.registerDataInput("a",N.p),this.axis=this.registerDataOutput("axis",N.v),this.angle=this.registerDataOutput("angle",N.o),this.isValid=this.registerDataOutput("isValid",N.g)}_updateOutputs(D){const l=D._getExecutionVariable(this,e,-1),G=D._getExecutionVariable(this,g,null),V=D._getExecutionVariable(this,j,null);if(void 0!==G&&null!==G&&void 0!==V&&null!==V&&l===D.executionId)this.axis.setValue(G,D),this.angle.setValue(V,D);else try{const{axis:l,angle:G}=this.a.getValue(D).toAxisAngle();D._setExecutionVariable(this,g,l),D._setExecutionVariable(this,j,G),D._setExecutionVariable(this,e,D.executionId),this.axis.setValue(l,D),this.angle.setValue(G,D),this.isValid.setValue(!0,D)}catch(N){this.isValid.setValue(!1,D)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}(0,M.c)("FlowGraphAxisAngleFromQuaternionBlock",W);class i extends b.c{constructor(D){super(N.v,N.v,N.p,((D,l)=>(0,n.f)(D,l)),"FlowGraphQuaternionFromDirectionsBlock",D)}}},14865:(D,l,G)=>{G.d(l,{c:()=>N});var V=G(14869);class N extends V.d{constructor(D,l,G,V,N,M){super(G,M),this._operation=V,this._className=N,this.a=this.registerDataInput("a",D),this.b=this.registerDataInput("b",l)}_doOperation(D){const l=this.a.getValue(D),G=this.b.getValue(D);return this._operation(l,G)}getClassName(){return this._className}}},14869:(D,l,G)=>{G.d(l,{d:()=>X});var V=G(13442),N=G(13423);const M="cachedOperationValue",b="cachedExecutionId";class X extends V.c{constructor(D,l){super(l),this.value=this.registerDataOutput("value",D),this.isValid=this.registerDataOutput("isValid",N.g)}_updateOutputs(D){const l=D._getExecutionVariable(this,b,-1),G=D._getExecutionVariable(this,M,null);if(void 0!==G&&null!==G&&l===D.executionId)this.isValid.setValue(!0,D),this.value.setValue(G,D);else try{const l=this._doOperation(D);if(void 0===l||null===l)return void this.isValid.setValue(!1,D);D._setExecutionVariable(this,M,l),D._setExecutionVariable(this,b,D.executionId),this.value.setValue(l,D),this.isValid.setValue(!0,D)}catch(V){this.isValid.setValue(!1,D)}}}},14872:(D,l,G)=>{G.d(l,{b:()=>N});var V=G(14869);class N extends V.d{constructor(D,l,G,V,N){super(l,N),this._operation=G,this._className=V,this.a=this.registerDataInput("a",D)}_doOperation(D){return this._operation(this.a.getValue(D))}getClassName(){return this._className}}}}]);