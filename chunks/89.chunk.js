"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{14501:(w,p,e)=>{e.r(p),e.d(p,{FlowGraphConsoleLogBlock:()=>q});var r=e(12920),I=e(12872),d=e(11038),f=e(11081);class q extends r.c{constructor(w){if(super(w),this.message=this.registerDataInput("message",I.c),this.logType=this.registerDataInput("logType",I.c,"log"),null!==w&&void 0!==w&&w.messageTemplate){const p=this._getTemplateMatches(w.messageTemplate);for(const w of p)this.registerDataInput(w,I.c)}}_execute(w){const p=this.logType.getValue(w),e=this._getMessageValue(w);"warn"===p?f.c.Warn(e):"error"===p?f.c.Error(e):f.c.Log(e),this.out._activateSignal(w)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(w){var p;if(null!==(p=this.config)&&void 0!==p&&p.messageTemplate){let p=this.config.messageTemplate;const r=this._getTemplateMatches(p);for(const I of r){var e;const r=null===(e=this.getDataInput(I))||void 0===e?void 0:e.getValue(w);void 0!==r&&(p=p.replace(new RegExp(`\\{${I}\\}`,"g"),r.toString()))}return p}return this.message.getValue(w)}_getTemplateMatches(w){const p=/\{([^}]+)\}/g,e=[];let r;for(;null!==(r=p.exec(w));)e.push(r[1]);return e}}(0,d.d)("FlowGraphConsoleLogBlock",q)}}]);