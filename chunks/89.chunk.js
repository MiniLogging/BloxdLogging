"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{14292:(u,F,z)=>{z.r(F),z.d(F,{FlowGraphSetPropertyBlock:()=>c});var p=z(13003),b=z(12952),R=z(668);class c extends p.e{constructor(u){super(u),this.config=u,this.object=this.registerDataInput("object",b.e,u.target),this.value=this.registerDataInput("value",b.e),this.propertyName=this.registerDataInput("propertyName",b.e,u.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",b.e)}_execute(u,F){try{const F=this.object.getValue(u),z=this.value.getValue(u),p=this.propertyName.getValue(u);this._stopRunningAnimations(u,F,p);const b=this.customSetFunction.getValue(u);b?b(F,p,z,u):this._setPropertyValue(F,p,z)}catch(z){this._reportError(u,z)}this.out._activateSignal(u)}_stopRunningAnimations(u,F,z){const p=u._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const b of p){const R=u.assetsContext.animationGroups.find((u=>u.uniqueId===b));if(R)for(const c of R.targetedAnimations)if(c.target===F&&c.animation.targetProperty===z){R.stop(!0),R.dispose();const F=p.indexOf(b);-1!==F&&(p.splice(F,1),u._setGlobalContextVariable("currentlyRunningAnimationGroups",p))}}}_setPropertyValue(u,F,z){const p=F.split(".");let b=u;for(let R=0;R<p.length-1;R++){const u=p[R];void 0===b[u]&&(b[u]={}),b=b[u]}b[p[p.length-1]]=z}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,R.h)("FlowGraphSetPropertyBlock",c)}}]);