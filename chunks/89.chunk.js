"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{14106:(z,u,Y)=>{Y.r(u),Y.d(u,{FlowGraphConsoleLogBlock:()=>T});var H=Y(12580),E=Y(12531),J=Y(10918),l=Y(10953);class T extends H.e{constructor(z){if(super(z),this.message=this.registerDataInput("message",E.e),this.logType=this.registerDataInput("logType",E.e,"log"),null!==z&&void 0!==z&&z.messageTemplate){const u=this._getTemplateMatches(z.messageTemplate);for(const z of u)this.registerDataInput(z,E.e)}}_execute(z){const u=this.logType.getValue(z),Y=this._getMessageValue(z);"warn"===u?l.b.Warn(Y):"error"===u?l.b.Error(Y):l.b.Log(Y),this.out._activateSignal(z)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(z){var u;if(null!==(u=this.config)&&void 0!==u&&u.messageTemplate){let u=this.config.messageTemplate;const H=this._getTemplateMatches(u);for(const E of H){var Y;const H=null===(Y=this.getDataInput(E))||void 0===Y?void 0:Y.getValue(z);void 0!==H&&(u=u.replace(new RegExp(`\\{${E}\\}`,"g"),H.toString()))}return u}return this.message.getValue(z)}_getTemplateMatches(z){const u=/\{([^}]+)\}/g,Y=[];let H;for(;null!==(H=u.exec(z));)Y.push(H[1]);return Y}}(0,J.d)("FlowGraphConsoleLogBlock",T)}}]);