"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{14195:(q,c,U)=>{U.r(c),U.d(c,{FlowGraphConsoleLogBlock:()=>X});var J=U(12699),Q=U(12648),s=U(10850),g=U(10886);class X extends J.e{constructor(q){if(super(q),this.message=this.registerDataInput("message",Q.c),this.logType=this.registerDataInput("logType",Q.c,"log"),null!==q&&void 0!==q&&q.messageTemplate){const c=this._getTemplateMatches(q.messageTemplate);for(const q of c)this.registerDataInput(q,Q.c)}}_execute(q){const c=this.logType.getValue(q),U=this._getMessageValue(q);"warn"===c?g.c.Warn(U):"error"===c?g.c.Error(U):g.c.Log(U),this.out._activateSignal(q)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(q){var c;if(null!==(c=this.config)&&void 0!==c&&c.messageTemplate){let c=this.config.messageTemplate;const J=this._getTemplateMatches(c);for(const Q of J){var U;const J=null===(U=this.getDataInput(Q))||void 0===U?void 0:U.getValue(q);void 0!==J&&(c=c.replace(new RegExp(`\\{${Q}\\}`,"g"),J.toString()))}return c}return this.message.getValue(q)}_getTemplateMatches(q){const c=/\{([^}]+)\}/g,U=[];let J;for(;null!==(J=c.exec(q));)U.push(J[1]);return U}}(0,s.f)("FlowGraphConsoleLogBlock",X)}}]);