"use strict";(self["80dd64vgxnn"]=self["80dd64vgxnn"]||[]).push([[89],{15830:(mm,o,u)=>{u.r(o),u.d(o,{FlowGraphAngleBetweenBlock:()=>P,FlowGraphAxisAngleFromQuaternionBlock:()=>g,FlowGraphConjugateBlock:()=>S,FlowGraphCrossBlock:()=>l,FlowGraphDotBlock:()=>M,FlowGraphLengthBlock:()=>H,FlowGraphNormalizeBlock:()=>E,FlowGraphQuaternionFromAxisAngleBlock:()=>R,FlowGraphQuaternionFromDirectionsBlock:()=>W,FlowGraphRotate2DBlock:()=>t,FlowGraphRotate3DBlock:()=>Q,FlowGraphTransformBlock:()=>J,FlowGraphTransformCoordinatesBlock:()=>N});var f=u(14280),B=u(14257),O=u(12702),r=u(15816),w=u(15828),p=u(12740),K=u(14291),z=u(13948);const Y="cachedOperationAxis",q="cachedOperationAngle",x="cachedExecutionId";class H extends w.c{constructor(mm){super(B.b,B.r,(mm=>this._polymorphicLength(mm)),"FlowGraphLengthBlock",mm)}_polymorphicLength(mm){switch((0,K.j)(mm)){case"Vector2":case"lo":case"Vector4":case"Quaternion":return mm.length();default:throw new Error(`Cannot compute length of value ${mm}`)}}}(0,O.c)("FlowGraphLengthBlock",H);class E extends w.c{constructor(mm){super(B.b,B.b,(mm=>this._polymorphicNormalize(mm)),"FlowGraphNormalizeBlock",mm)}_polymorphicNormalize(mm){var o;let u;switch((0,K.j)(mm)){case"Vector2":case"lo":case"Vector4":case"Quaternion":if(u=mm.normalizeToNew(),null!==(o=this.config)&&void 0!==o&&o.nanOnZeroLength){0===mm.length()&&u.wp(NaN)}return u;default:throw new Error(`Cannot normalize value ${mm}`)}}}(0,O.c)("FlowGraphNormalizeBlock",E);class M extends r.e{constructor(mm){super(B.b,B.b,B.r,((mm,o)=>this._polymorphicDot(mm,o)),"FlowGraphDotBlock",mm)}_polymorphicDot(mm,o){switch((0,K.j)(mm)){case"Vector2":case"lo":case"Vector4":case"Quaternion":return mm.dot(o);default:throw new Error(`Cannot get dot product of ${mm} and ${o}`)}}}(0,O.c)("FlowGraphDotBlock",M);class l extends r.e{constructor(mm){super(B.D,B.D,B.D,((mm,o)=>p.lo.Cross(mm,o)),"FlowGraphCrossBlock",mm)}}(0,O.c)("FlowGraphCrossBlock",l);class t extends r.e{constructor(mm){super(B.B,B.r,B.B,((mm,o)=>mm.rotate(o)),"FlowGraphRotate2DBlock",mm)}}(0,O.c)("FlowGraphRotate2DBlock",t);class Q extends r.e{constructor(mm){super(B.D,B.t,B.D,((mm,o)=>mm.applyRotationQuaternion(o)),"FlowGraphRotate3DBlock",mm)}}function b(mm,o){switch((0,K.j)(mm)){case"Vector2":case"lo":return o.transformVector(mm);case"Vector4":return new p.Vector4(mm.x*o.m[0]+mm.y*o.m[1]+mm.z*o.m[2]+mm.w*o.m[3],mm.x*o.m[4]+mm.y*o.m[5]+mm.z*o.m[6]+mm.w*o.m[7],mm.x*o.m[8]+mm.y*o.m[9]+mm.z*o.m[10]+mm.w*o.m[11],mm.x*o.m[12]+mm.y*o.m[13]+mm.z*o.m[14]+mm.w*o.m[15]);default:throw new Error(`Cannot transform value ${mm}`)}}(0,O.c)("FlowGraphRotate3DBlock",Q);class J extends r.e{constructor(mm){const o=(null===mm||void 0===mm?void 0:mm.vectorType)||"lo",u="Vector2"===o?"Matrix2D":"lo"===o?"Matrix3D":"Matrix";super((0,B.O)(o),(0,B.O)(u),(0,B.O)(o),b,"FlowGraphTransformVectorBlock",mm)}}(0,O.c)("FlowGraphTransformVectorBlock",J);class N extends r.e{constructor(mm){super(B.D,B.l,B.D,((mm,o)=>p.lo.TransformCoordinates(mm,o)),"FlowGraphTransformCoordinatesBlock",mm)}}(0,O.c)("FlowGraphTransformCoordinatesBlock",N);class S extends w.c{constructor(mm){super(B.t,B.t,(mm=>mm.conjugate()),"FlowGraphConjugateBlock",mm)}}(0,O.c)("FlowGraphConjugateBlock",S);class P extends r.e{constructor(mm){super(B.t,B.t,B.r,((mm,o)=>(0,z.d)(mm,o)),"FlowGraphAngleBetweenBlock",mm)}}(0,O.c)("FlowGraphAngleBetweenBlock",P);class R extends r.e{constructor(mm){super(B.D,B.r,B.t,((mm,o)=>p.Quaternion.RotationAxis(mm,o)),"FlowGraphQuaternionFromAxisAngleBlock",mm)}}(0,O.c)("FlowGraphQuaternionFromAxisAngleBlock",R);class g extends f.e{constructor(mm){super(mm),this.a=this.registerDataInput("a",B.t),this.axis=this.registerDataOutput("axis",B.D),this.angle=this.registerDataOutput("angle",B.r),this.isValid=this.registerDataOutput("isValid",B.f)}_updateOutputs(mm){const o=mm._getExecutionVariable(this,x,-1),u=mm._getExecutionVariable(this,Y,null),f=mm._getExecutionVariable(this,q,null);if(void 0!==u&&null!==u&&void 0!==f&&null!==f&&o===mm.executionId)this.axis.setValue(u,mm),this.angle.setValue(f,mm);else try{const{axis:o,angle:u}=this.a.getValue(mm).toAxisAngle();mm._setExecutionVariable(this,Y,o),mm._setExecutionVariable(this,q,u),mm._setExecutionVariable(this,x,mm.executionId),this.axis.setValue(o,mm),this.angle.setValue(u,mm),this.isValid.setValue(!0,mm)}catch(B){this.isValid.setValue(!1,mm)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}(0,O.c)("FlowGraphAxisAngleFromQuaternionBlock",g);class W extends r.e{constructor(mm){super(B.D,B.D,B.t,((mm,o)=>(0,z.e)(mm,o)),"FlowGraphQuaternionFromDirectionsBlock",mm)}}},15816:(mm,o,u)=>{u.d(o,{e:()=>B});var f=u(15821);class B extends f.d{constructor(mm,o,u,f,B,O){super(u,O),this._operation=f,this._className=B,this.a=this.registerDataInput("a",mm),this.b=this.registerDataInput("b",o)}_doOperation(mm){const o=this.a.getValue(mm),u=this.b.getValue(mm);return this._operation(o,u)}getClassName(){return this._className}}},15821:(mm,o,u)=>{u.d(o,{d:()=>w});var f=u(14280),B=u(14257);const O="cachedOperationValue",r="cachedExecutionId";class w extends f.e{constructor(mm,o){super(o),this.value=this.registerDataOutput("value",mm),this.isValid=this.registerDataOutput("isValid",B.f)}_updateOutputs(mm){const o=mm._getExecutionVariable(this,r,-1),u=mm._getExecutionVariable(this,O,null);if(void 0!==u&&null!==u&&o===mm.executionId)this.isValid.setValue(!0,mm),this.value.setValue(u,mm);else try{const o=this._doOperation(mm);if(void 0===o||null===o)return void this.isValid.setValue(!1,mm);mm._setExecutionVariable(this,O,o),mm._setExecutionVariable(this,r,mm.executionId),this.value.setValue(o,mm),this.isValid.setValue(!0,mm)}catch(f){this.isValid.setValue(!1,mm)}}}},15828:(mm,o,u)=>{u.d(o,{c:()=>B});var f=u(15821);class B extends f.d{constructor(mm,o,u,f,B){super(o,B),this._operation=u,this._className=f,this.a=this.registerDataInput("a",mm)}_doOperation(mm){return this._operation(this.a.getValue(mm))}getClassName(){return this._className}}}}]);