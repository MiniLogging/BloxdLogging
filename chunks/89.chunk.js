"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{14140:(U,M,b)=>{b.r(M),b.d(M,{FlowGraphSetPropertyBlock:()=>W});var a=b(12830),A=b(12775),H=b(609);class W extends a.e{constructor(U){super(U),this.config=U,this.object=this.registerDataInput("object",A.c,U.target),this.value=this.registerDataInput("value",A.c),this.propertyName=this.registerDataInput("propertyName",A.c,U.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",A.c)}_execute(U,M){try{const M=this.object.getValue(U),b=this.value.getValue(U),a=this.propertyName.getValue(U);this._stopRunningAnimations(U,M,a);const A=this.customSetFunction.getValue(U);A?A(M,a,b,U):this._setPropertyValue(M,a,b)}catch(b){this._reportError(U,b)}this.out._activateSignal(U)}_stopRunningAnimations(U,M,b){const a=U._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const A of a){const H=U.assetsContext.animationGroups.find((U=>U.uniqueId===A));if(H)for(const W of H.targetedAnimations)if(W.target===M&&W.animation.targetProperty===b){H.stop(!0),H.dispose();const M=a.indexOf(A);-1!==M&&(a.splice(M,1),U._setGlobalContextVariable("currentlyRunningAnimationGroups",a))}}}_setPropertyValue(U,M,b){const a=M.split(".");let A=U;for(let H=0;H<a.length-1;H++){const U=a[H];void 0===A[U]&&(A[U]={}),A=A[U]}A[a[a.length-1]]=b}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,H.i)("FlowGraphSetPropertyBlock",W)}}]);