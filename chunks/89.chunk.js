"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{14516:(V,I,m)=>{m.r(I),m.d(I,{FlowGraphConsoleLogBlock:()=>k});var C=m(12934),l=m(12899),s=m(11048),F=m(11085);class k extends C.d{constructor(V){if(super(V),this.message=this.registerDataInput("message",l.b),this.logType=this.registerDataInput("logType",l.b,"log"),null!==V&&void 0!==V&&V.messageTemplate){const I=this._getTemplateMatches(V.messageTemplate);for(const V of I)this.registerDataInput(V,l.b)}}_execute(V){const I=this.logType.getValue(V),m=this._getMessageValue(V);"warn"===I?F.d.Warn(m):"error"===I?F.d.Error(m):F.d.Log(m),this.out._activateSignal(V)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(V){var I;if(null!==(I=this.config)&&void 0!==I&&I.messageTemplate){let I=this.config.messageTemplate;const C=this._getTemplateMatches(I);for(const l of C){var m;const C=null===(m=this.getDataInput(l))||void 0===m?void 0:m.getValue(V);void 0!==C&&(I=I.replace(new RegExp(`\\{${l}\\}`,"g"),C.toString()))}return I}return this.message.getValue(V)}_getTemplateMatches(V){const I=/\{([^}]+)\}/g,m=[];let C;for(;null!==(C=I.exec(V));)m.push(C[1]);return m}}(0,s.h)("FlowGraphConsoleLogBlock",k)}}]);