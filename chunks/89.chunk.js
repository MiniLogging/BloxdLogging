"use strict";(self.v2pspxy442l=self.v2pspxy442l||[]).push([[89],{15654:(l,a,N)=>{N.r(a),N.d(a,{FlowGraphAngleBetweenBlock:()=>z,FlowGraphAxisAngleFromQuaternionBlock:()=>t,FlowGraphConjugateBlock:()=>b,FlowGraphCrossBlock:()=>Y,FlowGraphDotBlock:()=>B,FlowGraphLengthBlock:()=>u,FlowGraphNormalizeBlock:()=>W,FlowGraphQuaternionFromAxisAngleBlock:()=>I,FlowGraphQuaternionFromDirectionsBlock:()=>O,FlowGraphRotate2DBlock:()=>C,FlowGraphRotate3DBlock:()=>M,FlowGraphTransformBlock:()=>E,FlowGraphTransformCoordinatesBlock:()=>q});var U=N(14171),c=N(14145),K=N(12394),Z=N(15645),w=N(15650),S=N(12447),T=N(14179),J=N(13822);const n="cachedOperationAxis",y="cachedOperationAngle",H="cachedExecutionId";class u extends w.c{constructor(l){super(c.d,c.t,(l=>this._polymorphicLength(l)),"FlowGraphLengthBlock",l)}_polymorphicLength(l){switch((0,T.h)(l)){case"Vector2":case"ua":case"Vector4":case"Quaternion":return l.length();default:throw new Error(`Cannot compute length of value ${l}`)}}}(0,K.g)("FlowGraphLengthBlock",u);class W extends w.c{constructor(l){super(c.d,c.d,(l=>this._polymorphicNormalize(l)),"FlowGraphNormalizeBlock",l)}_polymorphicNormalize(l){var a;let N;switch((0,T.h)(l)){case"Vector2":case"ua":case"Vector4":case"Quaternion":if(N=l.normalizeToNew(),null!==(a=this.config)&&void 0!==a&&a.nanOnZeroLength){0===l.length()&&N.hc(NaN)}return N;default:throw new Error(`Cannot normalize value ${l}`)}}}(0,K.g)("FlowGraphNormalizeBlock",W);class B extends Z.d{constructor(l){super(c.d,c.d,c.t,((l,a)=>this._polymorphicDot(l,a)),"FlowGraphDotBlock",l)}_polymorphicDot(l,a){switch((0,T.h)(l)){case"Vector2":case"ua":case"Vector4":case"Quaternion":return l.dot(a);default:throw new Error(`Cannot get dot product of ${l} and ${a}`)}}}(0,K.g)("FlowGraphDotBlock",B);class Y extends Z.d{constructor(l){super(c.B,c.B,c.B,((l,a)=>S.ua.Cross(l,a)),"FlowGraphCrossBlock",l)}}(0,K.g)("FlowGraphCrossBlock",Y);class C extends Z.d{constructor(l){super(c.A,c.t,c.A,((l,a)=>l.rotate(a)),"FlowGraphRotate2DBlock",l)}}(0,K.g)("FlowGraphRotate2DBlock",C);class M extends Z.d{constructor(l){super(c.B,c.w,c.B,((l,a)=>l.applyRotationQuaternion(a)),"FlowGraphRotate3DBlock",l)}}function A(l,a){switch((0,T.h)(l)){case"Vector2":case"ua":return a.transformVector(l);case"Vector4":return new S.Vector4(l.x*a.m[0]+l.y*a.m[1]+l.z*a.m[2]+l.w*a.m[3],l.x*a.m[4]+l.y*a.m[5]+l.z*a.m[6]+l.w*a.m[7],l.x*a.m[8]+l.y*a.m[9]+l.z*a.m[10]+l.w*a.m[11],l.x*a.m[12]+l.y*a.m[13]+l.z*a.m[14]+l.w*a.m[15]);default:throw new Error(`Cannot transform value ${l}`)}}(0,K.g)("FlowGraphRotate3DBlock",M);class E extends Z.d{constructor(l){const a=(null===l||void 0===l?void 0:l.vectorType)||"ua",N="Vector2"===a?"Matrix2D":"ua"===a?"Matrix3D":"Matrix";super((0,c.M)(a),(0,c.M)(N),(0,c.M)(a),A,"FlowGraphTransformVectorBlock",l)}}(0,K.g)("FlowGraphTransformVectorBlock",E);class q extends Z.d{constructor(l){super(c.B,c.m,c.B,((l,a)=>S.ua.TransformCoordinates(l,a)),"FlowGraphTransformCoordinatesBlock",l)}}(0,K.g)("FlowGraphTransformCoordinatesBlock",q);class b extends w.c{constructor(l){super(c.w,c.w,(l=>l.conjugate()),"FlowGraphConjugateBlock",l)}}(0,K.g)("FlowGraphConjugateBlock",b);class z extends Z.d{constructor(l){super(c.w,c.w,c.t,((l,a)=>(0,J.d)(l,a)),"FlowGraphAngleBetweenBlock",l)}}(0,K.g)("FlowGraphAngleBetweenBlock",z);class I extends Z.d{constructor(l){super(c.B,c.t,c.w,((l,a)=>S.Quaternion.RotationAxis(l,a)),"FlowGraphQuaternionFromAxisAngleBlock",l)}}(0,K.g)("FlowGraphQuaternionFromAxisAngleBlock",I);class t extends U.e{constructor(l){super(l),this.a=this.registerDataInput("a",c.w),this.axis=this.registerDataOutput("axis",c.B),this.angle=this.registerDataOutput("angle",c.t),this.isValid=this.registerDataOutput("isValid",c.h)}_updateOutputs(l){const a=l._getExecutionVariable(this,H,-1),N=l._getExecutionVariable(this,n,null),U=l._getExecutionVariable(this,y,null);if(void 0!==N&&null!==N&&void 0!==U&&null!==U&&a===l.executionId)this.axis.setValue(N,l),this.angle.setValue(U,l);else try{const{axis:a,angle:N}=this.a.getValue(l).toAxisAngle();l._setExecutionVariable(this,n,a),l._setExecutionVariable(this,y,N),l._setExecutionVariable(this,H,l.executionId),this.axis.setValue(a,l),this.angle.setValue(N,l),this.isValid.setValue(!0,l)}catch(c){this.isValid.setValue(!1,l)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}(0,K.g)("FlowGraphAxisAngleFromQuaternionBlock",t);class O extends Z.d{constructor(l){super(c.B,c.B,c.w,((l,a)=>(0,J.g)(l,a)),"FlowGraphQuaternionFromDirectionsBlock",l)}}},15645:(l,a,N)=>{N.d(a,{d:()=>c});var U=N(15648);class c extends U.e{constructor(l,a,N,U,c,K){super(N,K),this._operation=U,this._className=c,this.a=this.registerDataInput("a",l),this.b=this.registerDataInput("b",a)}_doOperation(l){const a=this.a.getValue(l),N=this.b.getValue(l);return this._operation(a,N)}getClassName(){return this._className}}},15648:(l,a,N)=>{N.d(a,{e:()=>w});var U=N(14171),c=N(14145);const K="cachedOperationValue",Z="cachedExecutionId";class w extends U.e{constructor(l,a){super(a),this.value=this.registerDataOutput("value",l),this.isValid=this.registerDataOutput("isValid",c.h)}_updateOutputs(l){const a=l._getExecutionVariable(this,Z,-1),N=l._getExecutionVariable(this,K,null);if(void 0!==N&&null!==N&&a===l.executionId)this.isValid.setValue(!0,l),this.value.setValue(N,l);else try{const a=this._doOperation(l);if(void 0===a||null===a)return void this.isValid.setValue(!1,l);l._setExecutionVariable(this,K,a),l._setExecutionVariable(this,Z,l.executionId),this.value.setValue(a,l),this.isValid.setValue(!0,l)}catch(U){this.isValid.setValue(!1,l)}}}},15650:(l,a,N)=>{N.d(a,{c:()=>c});var U=N(15648);class c extends U.e{constructor(l,a,N,U,c){super(a,c),this._operation=N,this._className=U,this.a=this.registerDataInput("a",l)}_doOperation(l){return this._operation(this.a.getValue(l))}getClassName(){return this._className}}}}]);