"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{13886:(W,F,c)=>{c.r(F),c.d(F,{FlowGraphSetPropertyBlock:()=>w});var T=c(12566),Y=c(12517),Z=c(642);class w extends T.c{constructor(W){super(W),this.config=W,this.object=this.registerDataInput("object",Y.c,W.target),this.value=this.registerDataInput("value",Y.c),this.propertyName=this.registerDataInput("propertyName",Y.c,W.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",Y.c)}_execute(W,F){try{const F=this.object.getValue(W),c=this.value.getValue(W),T=this.propertyName.getValue(W);this._stopRunningAnimations(W,F,T);const Y=this.customSetFunction.getValue(W);Y?Y(F,T,c,W):this._setPropertyValue(F,T,c)}catch(c){this._reportError(W,c)}this.out._activateSignal(W)}_stopRunningAnimations(W,F,c){const T=W._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const Y of T){const Z=W.assetsContext.animationGroups.find((W=>W.uniqueId===Y));if(Z)for(const w of Z.targetedAnimations)if(w.target===F&&w.animation.targetProperty===c){Z.stop(!0),Z.dispose();const F=T.indexOf(Y);-1!==F&&(T.splice(F,1),W._setGlobalContextVariable("currentlyRunningAnimationGroups",T))}}}_setPropertyValue(W,F,c){const T=F.split(".");let Y=W;for(let Z=0;Z<T.length-1;Z++){const W=T[Z];void 0===Y[W]&&(Y[W]={}),Y=Y[W]}Y[T[T.length-1]]=c}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,Z.h)("FlowGraphSetPropertyBlock",w)}}]);