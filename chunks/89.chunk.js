"use strict";(self["9s4i8ue3jq"]=self["9s4i8ue3jq"]||[]).push([[89],{16034:(a,c,o)=>{o.r(c),o.d(c,{FlowGraphAngleBetweenBlock:()=>h,FlowGraphAxisAngleFromQuaternionBlock:()=>S,FlowGraphConjugateBlock:()=>Z,FlowGraphCrossBlock:()=>y,FlowGraphDotBlock:()=>N,FlowGraphLengthBlock:()=>g,FlowGraphNormalizeBlock:()=>M,FlowGraphQuaternionFromAxisAngleBlock:()=>U,FlowGraphQuaternionFromDirectionsBlock:()=>r,FlowGraphRotate2DBlock:()=>k,FlowGraphRotate3DBlock:()=>n,FlowGraphTransformBlock:()=>J,FlowGraphTransformCoordinatesBlock:()=>w});var s=o(14423),q=o(14394),t=o(12776),i=o(16016),p=o(16025),G=o(12810),T=o(14431),C=o(14068);const j="cachedOperationAxis",L="cachedOperationAngle",e="cachedExecutionId";class g extends p.d{constructor(a){super(q.c,q.o,(a=>this._polymorphicLength(a)),"FlowGraphLengthBlock",a)}_polymorphicLength(a){switch((0,T.g)(a)){case"Vector2":case"Hc":case"Vector4":case"Quaternion":return a.length();default:throw new Error(`Cannot compute length of value ${a}`)}}}(0,t.d)("FlowGraphLengthBlock",g);class M extends p.d{constructor(a){super(q.c,q.c,(a=>this._polymorphicNormalize(a)),"FlowGraphNormalizeBlock",a)}_polymorphicNormalize(a){var c;let o;switch((0,T.g)(a)){case"Vector2":case"Hc":case"Vector4":case"Quaternion":if(o=a.normalizeToNew(),null!==(c=this.config)&&void 0!==c&&c.nanOnZeroLength){0===a.length()&&o.Dc(NaN)}return o;default:throw new Error(`Cannot normalize value ${a}`)}}}(0,t.d)("FlowGraphNormalizeBlock",M);class N extends i.e{constructor(a){super(q.c,q.c,q.o,((a,c)=>this._polymorphicDot(a,c)),"FlowGraphDotBlock",a)}_polymorphicDot(a,c){switch((0,T.g)(a)){case"Vector2":case"Hc":case"Vector4":case"Quaternion":return a.dot(c);default:throw new Error(`Cannot get dot product of ${a} and ${c}`)}}}(0,t.d)("FlowGraphDotBlock",N);class y extends i.e{constructor(a){super(q.w,q.w,q.w,((a,c)=>G.Hc.Cross(a,c)),"FlowGraphCrossBlock",a)}}(0,t.d)("FlowGraphCrossBlock",y);class k extends i.e{constructor(a){super(q.u,q.o,q.u,((a,c)=>a.rotate(c)),"FlowGraphRotate2DBlock",a)}}(0,t.d)("FlowGraphRotate2DBlock",k);class n extends i.e{constructor(a){super(q.w,q.p,q.w,((a,c)=>a.applyRotationQuaternion(c)),"FlowGraphRotate3DBlock",a)}}function f(a,c){switch((0,T.g)(a)){case"Vector2":case"Hc":return c.transformVector(a);case"Vector4":return new G.Vector4(a.x*c.m[0]+a.y*c.m[1]+a.z*c.m[2]+a.w*c.m[3],a.x*c.m[4]+a.y*c.m[5]+a.z*c.m[6]+a.w*c.m[7],a.x*c.m[8]+a.y*c.m[9]+a.z*c.m[10]+a.w*c.m[11],a.x*c.m[12]+a.y*c.m[13]+a.z*c.m[14]+a.w*c.m[15]);default:throw new Error(`Cannot transform value ${a}`)}}(0,t.d)("FlowGraphRotate3DBlock",n);class J extends i.e{constructor(a){const c=(null===a||void 0===a?void 0:a.vectorType)||"Hc",o="Vector2"===c?"Matrix2D":"Hc"===c?"Matrix3D":"Matrix";super((0,q.G)(c),(0,q.G)(o),(0,q.G)(c),f,"FlowGraphTransformVectorBlock",a)}}(0,t.d)("FlowGraphTransformVectorBlock",J);class w extends i.e{constructor(a){super(q.w,q.k,q.w,((a,c)=>G.Hc.TransformCoordinates(a,c)),"FlowGraphTransformCoordinatesBlock",a)}}(0,t.d)("FlowGraphTransformCoordinatesBlock",w);class Z extends p.d{constructor(a){super(q.p,q.p,(a=>a.conjugate()),"FlowGraphConjugateBlock",a)}}(0,t.d)("FlowGraphConjugateBlock",Z);class h extends i.e{constructor(a){super(q.p,q.p,q.o,((a,c)=>(0,C.c)(a,c)),"FlowGraphAngleBetweenBlock",a)}}(0,t.d)("FlowGraphAngleBetweenBlock",h);class U extends i.e{constructor(a){super(q.w,q.o,q.p,((a,c)=>G.Quaternion.RotationAxis(a,c)),"FlowGraphQuaternionFromAxisAngleBlock",a)}}(0,t.d)("FlowGraphQuaternionFromAxisAngleBlock",U);class S extends s.e{constructor(a){super(a),this.a=this.registerDataInput("a",q.p),this.axis=this.registerDataOutput("axis",q.w),this.angle=this.registerDataOutput("angle",q.o),this.isValid=this.registerDataOutput("isValid",q.f)}_updateOutputs(a){const c=a._getExecutionVariable(this,e,-1),o=a._getExecutionVariable(this,j,null),s=a._getExecutionVariable(this,L,null);if(void 0!==o&&null!==o&&void 0!==s&&null!==s&&c===a.executionId)this.axis.setValue(o,a),this.angle.setValue(s,a);else try{const{axis:c,angle:o}=this.a.getValue(a).toAxisAngle();a._setExecutionVariable(this,j,c),a._setExecutionVariable(this,L,o),a._setExecutionVariable(this,e,a.executionId),this.axis.setValue(c,a),this.angle.setValue(o,a),this.isValid.setValue(!0,a)}catch(q){this.isValid.setValue(!1,a)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}(0,t.d)("FlowGraphAxisAngleFromQuaternionBlock",S);class r extends i.e{constructor(a){super(q.w,q.w,q.p,((a,c)=>(0,C.d)(a,c)),"FlowGraphQuaternionFromDirectionsBlock",a)}}},16016:(a,c,o)=>{o.d(c,{e:()=>q});var s=o(16018);class q extends s.c{constructor(a,c,o,s,q,t){super(o,t),this._operation=s,this._className=q,this.a=this.registerDataInput("a",a),this.b=this.registerDataInput("b",c)}_doOperation(a){const c=this.a.getValue(a),o=this.b.getValue(a);return this._operation(c,o)}getClassName(){return this._className}}},16018:(a,c,o)=>{o.d(c,{c:()=>p});var s=o(14423),q=o(14394);const t="cachedOperationValue",i="cachedExecutionId";class p extends s.e{constructor(a,c){super(c),this.value=this.registerDataOutput("value",a),this.isValid=this.registerDataOutput("isValid",q.f)}_updateOutputs(a){const c=a._getExecutionVariable(this,i,-1),o=a._getExecutionVariable(this,t,null);if(void 0!==o&&null!==o&&c===a.executionId)this.isValid.setValue(!0,a),this.value.setValue(o,a);else try{const c=this._doOperation(a);if(void 0===c||null===c)return void this.isValid.setValue(!1,a);a._setExecutionVariable(this,t,c),a._setExecutionVariable(this,i,a.executionId),this.value.setValue(c,a),this.isValid.setValue(!0,a)}catch(s){this.isValid.setValue(!1,a)}}}},16025:(a,c,o)=>{o.d(c,{d:()=>q});var s=o(16018);class q extends s.c{constructor(a,c,o,s,q){super(c,q),this._operation=o,this._className=s,this.a=this.registerDataInput("a",a)}_doOperation(a){return this._operation(this.a.getValue(a))}getClassName(){return this._className}}}}]);