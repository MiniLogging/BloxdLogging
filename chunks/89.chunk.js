"use strict";(self.zy41qorie9=self.zy41qorie9||[]).push([[89],{15387:(Z,l,C)=>{C.r(l),C.d(l,{FlowGraphAngleBetweenBlock:()=>U,FlowGraphAxisAngleFromQuaternionBlock:()=>r,FlowGraphConjugateBlock:()=>c,FlowGraphCrossBlock:()=>P,FlowGraphDotBlock:()=>Y,FlowGraphLengthBlock:()=>q,FlowGraphNormalizeBlock:()=>z,FlowGraphQuaternionFromAxisAngleBlock:()=>t,FlowGraphQuaternionFromDirectionsBlock:()=>e,FlowGraphRotate2DBlock:()=>S,FlowGraphRotate3DBlock:()=>i,FlowGraphTransformBlock:()=>F,FlowGraphTransformCoordinatesBlock:()=>n});var B=C(13853),x=C(13830),b=C(12400),K=C(15370),f=C(15383),W=C(12442),J=C(13861),d=C(13513);const E="cachedOperationAxis",G="cachedOperationAngle",a="cachedExecutionId";class q extends f.c{constructor(Z){super(x.c,x.o,(Z=>this._polymorphicLength(Z)),"FlowGraphLengthBlock",Z)}_polymorphicLength(Z){switch((0,J.i)(Z)){case"Vector2":case"ql":case"Vector4":case"Quaternion":return Z.length();default:throw new Error(`Cannot compute length of value ${Z}`)}}}(0,b.c)("FlowGraphLengthBlock",q);class z extends f.c{constructor(Z){super(x.c,x.c,(Z=>this._polymorphicNormalize(Z)),"FlowGraphNormalizeBlock",Z)}_polymorphicNormalize(Z){var l;let C;switch((0,J.i)(Z)){case"Vector2":case"ql":case"Vector4":case"Quaternion":if(C=Z.normalizeToNew(),null!==(l=this.config)&&void 0!==l&&l.nanOnZeroLength){0===Z.length()&&C.ob(NaN)}return C;default:throw new Error(`Cannot normalize value ${Z}`)}}}(0,b.c)("FlowGraphNormalizeBlock",z);class Y extends K.b{constructor(Z){super(x.c,x.c,x.o,((Z,l)=>this._polymorphicDot(Z,l)),"FlowGraphDotBlock",Z)}_polymorphicDot(Z,l){switch((0,J.i)(Z)){case"Vector2":case"ql":case"Vector4":case"Quaternion":return Z.dot(l);default:throw new Error(`Cannot get dot product of ${Z} and ${l}`)}}}(0,b.c)("FlowGraphDotBlock",Y);class P extends K.b{constructor(Z){super(x.y,x.y,x.y,((Z,l)=>W.ql.Cross(Z,l)),"FlowGraphCrossBlock",Z)}}(0,b.c)("FlowGraphCrossBlock",P);class S extends K.b{constructor(Z){super(x.w,x.o,x.w,((Z,l)=>Z.rotate(l)),"FlowGraphRotate2DBlock",Z)}}(0,b.c)("FlowGraphRotate2DBlock",S);class i extends K.b{constructor(Z){super(x.y,x.p,x.y,((Z,l)=>Z.applyRotationQuaternion(l)),"FlowGraphRotate3DBlock",Z)}}function s(Z,l){switch((0,J.i)(Z)){case"Vector2":case"ql":return l.transformVector(Z);case"Vector4":return new W.Vector4(Z.x*l.m[0]+Z.y*l.m[1]+Z.z*l.m[2]+Z.w*l.m[3],Z.x*l.m[4]+Z.y*l.m[5]+Z.z*l.m[6]+Z.w*l.m[7],Z.x*l.m[8]+Z.y*l.m[9]+Z.z*l.m[10]+Z.w*l.m[11],Z.x*l.m[12]+Z.y*l.m[13]+Z.z*l.m[14]+Z.w*l.m[15]);default:throw new Error(`Cannot transform value ${Z}`)}}(0,b.c)("FlowGraphRotate3DBlock",i);class F extends K.b{constructor(Z){const l=(null===Z||void 0===Z?void 0:Z.vectorType)||"ql",C="Vector2"===l?"Matrix2D":"ql"===l?"Matrix3D":"Matrix";super((0,x.I)(l),(0,x.I)(C),(0,x.I)(l),s,"FlowGraphTransformVectorBlock",Z)}}(0,b.c)("FlowGraphTransformVectorBlock",F);class n extends K.b{constructor(Z){super(x.y,x.k,x.y,((Z,l)=>W.ql.TransformCoordinates(Z,l)),"FlowGraphTransformCoordinatesBlock",Z)}}(0,b.c)("FlowGraphTransformCoordinatesBlock",n);class c extends f.c{constructor(Z){super(x.p,x.p,(Z=>Z.conjugate()),"FlowGraphConjugateBlock",Z)}}(0,b.c)("FlowGraphConjugateBlock",c);class U extends K.b{constructor(Z){super(x.p,x.p,x.o,((Z,l)=>(0,d.e)(Z,l)),"FlowGraphAngleBetweenBlock",Z)}}(0,b.c)("FlowGraphAngleBetweenBlock",U);class t extends K.b{constructor(Z){super(x.y,x.o,x.p,((Z,l)=>W.Quaternion.RotationAxis(Z,l)),"FlowGraphQuaternionFromAxisAngleBlock",Z)}}(0,b.c)("FlowGraphQuaternionFromAxisAngleBlock",t);class r extends B.d{constructor(Z){super(Z),this.a=this.registerDataInput("a",x.p),this.axis=this.registerDataOutput("axis",x.y),this.angle=this.registerDataOutput("angle",x.o),this.isValid=this.registerDataOutput("isValid",x.e)}_updateOutputs(Z){const l=Z._getExecutionVariable(this,a,-1),C=Z._getExecutionVariable(this,E,null),B=Z._getExecutionVariable(this,G,null);if(void 0!==C&&null!==C&&void 0!==B&&null!==B&&l===Z.executionId)this.axis.setValue(C,Z),this.angle.setValue(B,Z);else try{const{axis:l,angle:C}=this.a.getValue(Z).toAxisAngle();Z._setExecutionVariable(this,E,l),Z._setExecutionVariable(this,G,C),Z._setExecutionVariable(this,a,Z.executionId),this.axis.setValue(l,Z),this.angle.setValue(C,Z),this.isValid.setValue(!0,Z)}catch(x){this.isValid.setValue(!1,Z)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}(0,b.c)("FlowGraphAxisAngleFromQuaternionBlock",r);class e extends K.b{constructor(Z){super(x.y,x.y,x.p,((Z,l)=>(0,d.h)(Z,l)),"FlowGraphQuaternionFromDirectionsBlock",Z)}}},15370:(Z,l,C)=>{C.d(l,{b:()=>x});var B=C(15377);class x extends B.b{constructor(Z,l,C,B,x,b){super(C,b),this._operation=B,this._className=x,this.a=this.registerDataInput("a",Z),this.b=this.registerDataInput("b",l)}_doOperation(Z){const l=this.a.getValue(Z),C=this.b.getValue(Z);return this._operation(l,C)}getClassName(){return this._className}}},15377:(Z,l,C)=>{C.d(l,{b:()=>f});var B=C(13853),x=C(13830);const b="cachedOperationValue",K="cachedExecutionId";class f extends B.d{constructor(Z,l){super(l),this.value=this.registerDataOutput("value",Z),this.isValid=this.registerDataOutput("isValid",x.e)}_updateOutputs(Z){const l=Z._getExecutionVariable(this,K,-1),C=Z._getExecutionVariable(this,b,null);if(void 0!==C&&null!==C&&l===Z.executionId)this.isValid.setValue(!0,Z),this.value.setValue(C,Z);else try{const l=this._doOperation(Z);if(void 0===l||null===l)return void this.isValid.setValue(!1,Z);Z._setExecutionVariable(this,b,l),Z._setExecutionVariable(this,K,Z.executionId),this.value.setValue(l,Z),this.isValid.setValue(!0,Z)}catch(B){this.isValid.setValue(!1,Z)}}}},15383:(Z,l,C)=>{C.d(l,{c:()=>x});var B=C(15377);class x extends B.b{constructor(Z,l,C,B,x){super(l,x),this._operation=C,this._className=B,this.a=this.registerDataInput("a",Z)}_doOperation(Z){return this._operation(this.a.getValue(Z))}getClassName(){return this._className}}}}]);