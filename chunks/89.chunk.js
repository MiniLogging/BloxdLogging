"use strict";(self.c2c3ycupenc=self.c2c3ycupenc||[]).push([[89],{14945:(c,r,D)=>{D.r(r),D.d(r,{FlowGraphAngleBetweenBlock:()=>U,FlowGraphAxisAngleFromQuaternionBlock:()=>g,FlowGraphConjugateBlock:()=>y,FlowGraphCrossBlock:()=>Z,FlowGraphDotBlock:()=>w,FlowGraphLengthBlock:()=>v,FlowGraphNormalizeBlock:()=>k,FlowGraphQuaternionFromAxisAngleBlock:()=>N,FlowGraphQuaternionFromDirectionsBlock:()=>z,FlowGraphRotate2DBlock:()=>J,FlowGraphRotate3DBlock:()=>q,FlowGraphTransformBlock:()=>X,FlowGraphTransformCoordinatesBlock:()=>e});var W=D(13408),B=D(13392),t=D(11637),u=D(14931),a=D(14941),H=D(11683),x=D(13420),M=D(13069);const E="cachedOperationAxis",m="cachedOperationAngle",Y="cachedExecutionId";class v extends a.e{constructor(c){super(B.c,B.u,(c=>this._polymorphicLength(c)),"FlowGraphLengthBlock",c)}_polymorphicLength(c){switch((0,x.f)(c)){case"Vector2":case"Zr":case"Vector4":case"Quaternion":return c.length();default:throw new Error(`Cannot compute length of value ${c}`)}}}(0,t.e)("FlowGraphLengthBlock",v);class k extends a.e{constructor(c){super(B.c,B.c,(c=>this._polymorphicNormalize(c)),"FlowGraphNormalizeBlock",c)}_polymorphicNormalize(c){var r;let D;switch((0,x.f)(c)){case"Vector2":case"Zr":case"Vector4":case"Quaternion":if(D=c.normalizeToNew(),null!==(r=this.config)&&void 0!==r&&r.nanOnZeroLength){0===c.length()&&D.ja(NaN)}return D;default:throw new Error(`Cannot normalize value ${c}`)}}}(0,t.e)("FlowGraphNormalizeBlock",k);class w extends u.e{constructor(c){super(B.c,B.c,B.u,((c,r)=>this._polymorphicDot(c,r)),"FlowGraphDotBlock",c)}_polymorphicDot(c,r){switch((0,x.f)(c)){case"Vector2":case"Zr":case"Vector4":case"Quaternion":return c.dot(r);default:throw new Error(`Cannot get dot product of ${c} and ${r}`)}}}(0,t.e)("FlowGraphDotBlock",w);class Z extends u.e{constructor(c){super(B.B,B.B,B.B,((c,r)=>H.Zr.Cross(c,r)),"FlowGraphCrossBlock",c)}}(0,t.e)("FlowGraphCrossBlock",Z);class J extends u.e{constructor(c){super(B.A,B.u,B.A,((c,r)=>c.rotate(r)),"FlowGraphRotate2DBlock",c)}}(0,t.e)("FlowGraphRotate2DBlock",J);class q extends u.e{constructor(c){super(B.B,B.x,B.B,((c,r)=>c.applyRotationQuaternion(r)),"FlowGraphRotate3DBlock",c)}}function j(c,r){switch((0,x.f)(c)){case"Vector2":case"Zr":return r.transformVector(c);case"Vector4":return new H.Vector4(c.x*r.m[0]+c.y*r.m[1]+c.z*r.m[2]+c.w*r.m[3],c.x*r.m[4]+c.y*r.m[5]+c.z*r.m[6]+c.w*r.m[7],c.x*r.m[8]+c.y*r.m[9]+c.z*r.m[10]+c.w*r.m[11],c.x*r.m[12]+c.y*r.m[13]+c.z*r.m[14]+c.w*r.m[15]);default:throw new Error(`Cannot transform value ${c}`)}}(0,t.e)("FlowGraphRotate3DBlock",q);class X extends u.e{constructor(c){const r=(null===c||void 0===c?void 0:c.vectorType)||"Zr",D="Vector2"===r?"Matrix2D":"Zr"===r?"Matrix3D":"Matrix";super((0,B.O)(r),(0,B.O)(D),(0,B.O)(r),j,"FlowGraphTransformVectorBlock",c)}}(0,t.e)("FlowGraphTransformVectorBlock",X);class e extends u.e{constructor(c){super(B.B,B.l,B.B,((c,r)=>H.Zr.TransformCoordinates(c,r)),"FlowGraphTransformCoordinatesBlock",c)}}(0,t.e)("FlowGraphTransformCoordinatesBlock",e);class y extends a.e{constructor(c){super(B.x,B.x,(c=>c.conjugate()),"FlowGraphConjugateBlock",c)}}(0,t.e)("FlowGraphConjugateBlock",y);class U extends u.e{constructor(c){super(B.x,B.x,B.u,((c,r)=>(0,M.b)(c,r)),"FlowGraphAngleBetweenBlock",c)}}(0,t.e)("FlowGraphAngleBetweenBlock",U);class N extends u.e{constructor(c){super(B.B,B.u,B.x,((c,r)=>H.Quaternion.RotationAxis(c,r)),"FlowGraphQuaternionFromAxisAngleBlock",c)}}(0,t.e)("FlowGraphQuaternionFromAxisAngleBlock",N);class g extends W.d{constructor(c){super(c),this.a=this.registerDataInput("a",B.x),this.axis=this.registerDataOutput("axis",B.B),this.angle=this.registerDataOutput("angle",B.u),this.isValid=this.registerDataOutput("isValid",B.e)}_updateOutputs(c){const r=c._getExecutionVariable(this,Y,-1),D=c._getExecutionVariable(this,E,null),W=c._getExecutionVariable(this,m,null);if(void 0!==D&&null!==D&&void 0!==W&&null!==W&&r===c.executionId)this.axis.setValue(D,c),this.angle.setValue(W,c);else try{const{axis:r,angle:D}=this.a.getValue(c).toAxisAngle();c._setExecutionVariable(this,E,r),c._setExecutionVariable(this,m,D),c._setExecutionVariable(this,Y,c.executionId),this.axis.setValue(r,c),this.angle.setValue(D,c),this.isValid.setValue(!0,c)}catch(B){this.isValid.setValue(!1,c)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}(0,t.e)("FlowGraphAxisAngleFromQuaternionBlock",g);class z extends u.e{constructor(c){super(B.B,B.B,B.x,((c,r)=>(0,M.e)(c,r)),"FlowGraphQuaternionFromDirectionsBlock",c)}}},14931:(c,r,D)=>{D.d(r,{e:()=>B});var W=D(14938);class B extends W.c{constructor(c,r,D,W,B,t){super(D,t),this._operation=W,this._className=B,this.a=this.registerDataInput("a",c),this.b=this.registerDataInput("b",r)}_doOperation(c){const r=this.a.getValue(c),D=this.b.getValue(c);return this._operation(r,D)}getClassName(){return this._className}}},14938:(c,r,D)=>{D.d(r,{c:()=>a});var W=D(13408),B=D(13392);const t="cachedOperationValue",u="cachedExecutionId";class a extends W.d{constructor(c,r){super(r),this.value=this.registerDataOutput("value",c),this.isValid=this.registerDataOutput("isValid",B.e)}_updateOutputs(c){const r=c._getExecutionVariable(this,u,-1),D=c._getExecutionVariable(this,t,null);if(void 0!==D&&null!==D&&r===c.executionId)this.isValid.setValue(!0,c),this.value.setValue(D,c);else try{const r=this._doOperation(c);if(void 0===r||null===r)return void this.isValid.setValue(!1,c);c._setExecutionVariable(this,t,r),c._setExecutionVariable(this,u,c.executionId),this.value.setValue(r,c),this.isValid.setValue(!0,c)}catch(W){this.isValid.setValue(!1,c)}}}},14941:(c,r,D)=>{D.d(r,{e:()=>B});var W=D(14938);class B extends W.c{constructor(c,r,D,W,B){super(r,B),this._operation=D,this._className=W,this.a=this.registerDataInput("a",c)}_doOperation(c){return this._operation(this.a.getValue(c))}getClassName(){return this._className}}}}]);