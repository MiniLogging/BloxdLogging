"use strict";(self.gpkvekif0vo=self.gpkvekif0vo||[]).push([[89],{15638:(a,O,i)=>{i.r(O),i.d(O,{FlowGraphAngleBetweenBlock:()=>y,FlowGraphAxisAngleFromQuaternionBlock:()=>K,FlowGraphConjugateBlock:()=>U,FlowGraphCrossBlock:()=>J,FlowGraphDotBlock:()=>r,FlowGraphLengthBlock:()=>Z,FlowGraphNormalizeBlock:()=>F,FlowGraphQuaternionFromAxisAngleBlock:()=>w,FlowGraphQuaternionFromDirectionsBlock:()=>S,FlowGraphRotate2DBlock:()=>ma,FlowGraphRotate3DBlock:()=>M,FlowGraphTransformBlock:()=>n,FlowGraphTransformCoordinatesBlock:()=>D});var H=i(14139),b=i(14124),G=i(12346),q=i(15628),Q=i(15635),k=i(12395),I=i(14152),P=i(13807);const e="cachedOperationAxis",h="cachedOperationAngle",j="cachedExecutionId";class Z extends Q.c{constructor(a){super(b.e,b.t,(a=>this._polymorphicLength(a)),"FlowGraphLengthBlock",a)}_polymorphicLength(a){switch((0,I.i)(a)){case"Vector2":case"ZO":case"Vector4":case"Quaternion":return a.length();default:throw new Error(`Cannot compute length of value ${a}`)}}}(0,G.h)("FlowGraphLengthBlock",Z);class F extends Q.c{constructor(a){super(b.e,b.e,(a=>this._polymorphicNormalize(a)),"FlowGraphNormalizeBlock",a)}_polymorphicNormalize(a){var O;let i;switch((0,I.i)(a)){case"Vector2":case"ZO":case"Vector4":case"Quaternion":if(i=a.normalizeToNew(),null!==(O=this.config)&&void 0!==O&&O.nanOnZeroLength){0===a.length()&&i.Tb(NaN)}return i;default:throw new Error(`Cannot normalize value ${a}`)}}}(0,G.h)("FlowGraphNormalizeBlock",F);class r extends q.e{constructor(a){super(b.e,b.e,b.t,((a,O)=>this._polymorphicDot(a,O)),"FlowGraphDotBlock",a)}_polymorphicDot(a,O){switch((0,I.i)(a)){case"Vector2":case"ZO":case"Vector4":case"Quaternion":return a.dot(O);default:throw new Error(`Cannot get dot product of ${a} and ${O}`)}}}(0,G.h)("FlowGraphDotBlock",r);class J extends q.e{constructor(a){super(b.E,b.E,b.E,((a,O)=>k.ZO.Cross(a,O)),"FlowGraphCrossBlock",a)}}(0,G.h)("FlowGraphCrossBlock",J);class ma extends q.e{constructor(a){super(b.B,b.t,b.B,((a,O)=>a.rotate(O)),"FlowGraphRotate2DBlock",a)}}(0,G.h)("FlowGraphRotate2DBlock",ma);class M extends q.e{constructor(a){super(b.E,b.v,b.E,((a,O)=>a.applyRotationQuaternion(O)),"FlowGraphRotate3DBlock",a)}}function C(a,O){switch((0,I.i)(a)){case"Vector2":case"ZO":return O.transformVector(a);case"Vector4":return new k.Vector4(a.x*O.m[0]+a.y*O.m[1]+a.z*O.m[2]+a.w*O.m[3],a.x*O.m[4]+a.y*O.m[5]+a.z*O.m[6]+a.w*O.m[7],a.x*O.m[8]+a.y*O.m[9]+a.z*O.m[10]+a.w*O.m[11],a.x*O.m[12]+a.y*O.m[13]+a.z*O.m[14]+a.w*O.m[15]);default:throw new Error(`Cannot transform value ${a}`)}}(0,G.h)("FlowGraphRotate3DBlock",M);class n extends q.e{constructor(a){const O=(null===a||void 0===a?void 0:a.vectorType)||"ZO",i="Vector2"===O?"Matrix2D":"ZO"===O?"Matrix3D":"Matrix";super((0,b.T)(O),(0,b.T)(i),(0,b.T)(O),C,"FlowGraphTransformVectorBlock",a)}}(0,G.h)("FlowGraphTransformVectorBlock",n);class D extends q.e{constructor(a){super(b.E,b.p,b.E,((a,O)=>k.ZO.TransformCoordinates(a,O)),"FlowGraphTransformCoordinatesBlock",a)}}(0,G.h)("FlowGraphTransformCoordinatesBlock",D);class U extends Q.c{constructor(a){super(b.v,b.v,(a=>a.conjugate()),"FlowGraphConjugateBlock",a)}}(0,G.h)("FlowGraphConjugateBlock",U);class y extends q.e{constructor(a){super(b.v,b.v,b.t,((a,O)=>(0,P.c)(a,O)),"FlowGraphAngleBetweenBlock",a)}}(0,G.h)("FlowGraphAngleBetweenBlock",y);class w extends q.e{constructor(a){super(b.E,b.t,b.v,((a,O)=>k.Quaternion.RotationAxis(a,O)),"FlowGraphQuaternionFromAxisAngleBlock",a)}}(0,G.h)("FlowGraphQuaternionFromAxisAngleBlock",w);class K extends H.c{constructor(a){super(a),this.a=this.registerDataInput("a",b.v),this.axis=this.registerDataOutput("axis",b.E),this.angle=this.registerDataOutput("angle",b.t),this.isValid=this.registerDataOutput("isValid",b.h)}_updateOutputs(a){const O=a._getExecutionVariable(this,j,-1),i=a._getExecutionVariable(this,e,null),H=a._getExecutionVariable(this,h,null);if(void 0!==i&&null!==i&&void 0!==H&&null!==H&&O===a.executionId)this.axis.setValue(i,a),this.angle.setValue(H,a);else try{const{axis:O,angle:i}=this.a.getValue(a).toAxisAngle();a._setExecutionVariable(this,e,O),a._setExecutionVariable(this,h,i),a._setExecutionVariable(this,j,a.executionId),this.axis.setValue(O,a),this.angle.setValue(i,a),this.isValid.setValue(!0,a)}catch(b){this.isValid.setValue(!1,a)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}(0,G.h)("FlowGraphAxisAngleFromQuaternionBlock",K);class S extends q.e{constructor(a){super(b.E,b.E,b.v,((a,O)=>(0,P.d)(a,O)),"FlowGraphQuaternionFromDirectionsBlock",a)}}},15628:(a,O,i)=>{i.d(O,{e:()=>b});var H=i(15631);class b extends H.b{constructor(a,O,i,H,b,G){super(i,G),this._operation=H,this._className=b,this.a=this.registerDataInput("a",a),this.b=this.registerDataInput("b",O)}_doOperation(a){const O=this.a.getValue(a),i=this.b.getValue(a);return this._operation(O,i)}getClassName(){return this._className}}},15631:(a,O,i)=>{i.d(O,{b:()=>Q});var H=i(14139),b=i(14124);const G="cachedOperationValue",q="cachedExecutionId";class Q extends H.c{constructor(a,O){super(O),this.value=this.registerDataOutput("value",a),this.isValid=this.registerDataOutput("isValid",b.h)}_updateOutputs(a){const O=a._getExecutionVariable(this,q,-1),i=a._getExecutionVariable(this,G,null);if(void 0!==i&&null!==i&&O===a.executionId)this.isValid.setValue(!0,a),this.value.setValue(i,a);else try{const O=this._doOperation(a);if(void 0===O||null===O)return void this.isValid.setValue(!1,a);a._setExecutionVariable(this,G,O),a._setExecutionVariable(this,q,a.executionId),this.value.setValue(O,a),this.isValid.setValue(!0,a)}catch(H){this.isValid.setValue(!1,a)}}}},15635:(a,O,i)=>{i.d(O,{c:()=>b});var H=i(15631);class b extends H.b{constructor(a,O,i,H,b){super(O,b),this._operation=i,this._className=H,this.a=this.registerDataInput("a",a)}_doOperation(a){return this._operation(this.a.getValue(a))}getClassName(){return this._className}}}}]);