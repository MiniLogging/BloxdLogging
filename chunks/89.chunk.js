"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{14639:(G,V,W)=>{W.r(V),W.d(V,{FlowGraphConsoleLogBlock:()=>z});var J=W(13115),R=W(13071),d=W(11159),k=W(11201);class z extends J.e{constructor(G){if(super(G),this.message=this.registerDataInput("message",R.b),this.logType=this.registerDataInput("logType",R.b,"log"),null!==G&&void 0!==G&&G.messageTemplate){const V=this._getTemplateMatches(G.messageTemplate);for(const G of V)this.registerDataInput(G,R.b)}}_execute(G){const V=this.logType.getValue(G),W=this._getMessageValue(G);"warn"===V?k.c.Warn(W):"error"===V?k.c.Error(W):k.c.Log(W),this.out._activateSignal(G)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(G){var V;if(null!==(V=this.config)&&void 0!==V&&V.messageTemplate){let V=this.config.messageTemplate;const J=this._getTemplateMatches(V);for(const R of J){var W;const J=null===(W=this.getDataInput(R))||void 0===W?void 0:W.getValue(G);void 0!==J&&(V=V.replace(new RegExp(`\\{${R}\\}`,"g"),J.toString()))}return V}return this.message.getValue(G)}_getTemplateMatches(G){const V=/\{([^}]+)\}/g,W=[];let J;for(;null!==(J=V.exec(G));)W.push(J[1]);return W}}(0,d.d)("FlowGraphConsoleLogBlock",z)}}]);