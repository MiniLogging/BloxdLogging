"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{14012:(J,T,b)=>{b.r(T),b.d(T,{FlowGraphSetPropertyBlock:()=>B});var q=b(12647),t=b(12603),j=b(639);class B extends q.c{constructor(J){super(J),this.config=J,this.object=this.registerDataInput("object",t.c,J.target),this.value=this.registerDataInput("value",t.c),this.propertyName=this.registerDataInput("propertyName",t.c,J.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",t.c)}_execute(J,T){try{const T=this.object.getValue(J),b=this.value.getValue(J),q=this.propertyName.getValue(J);this._stopRunningAnimations(J,T,q);const t=this.customSetFunction.getValue(J);t?t(T,q,b,J):this._setPropertyValue(T,q,b)}catch(b){this._reportError(J,b)}this.out._activateSignal(J)}_stopRunningAnimations(J,T,b){const q=J._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const t of q){const j=J.assetsContext.animationGroups.find((J=>J.uniqueId===t));if(j)for(const B of j.targetedAnimations)if(B.target===T&&B.animation.targetProperty===b){j.stop(!0),j.dispose();const T=q.indexOf(t);-1!==T&&(q.splice(T,1),J._setGlobalContextVariable("currentlyRunningAnimationGroups",q))}}}_setPropertyValue(J,T,b){const q=T.split(".");let t=J;for(let j=0;j<q.length-1;j++){const J=q[j];void 0===t[J]&&(t[J]={}),t=t[J]}t[q[q.length-1]]=b}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,j.g)("FlowGraphSetPropertyBlock",B)}}]);