"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{14315:(x,O,Q)=>{Q.r(O),Q.d(O,{FlowGraphConsoleLogBlock:()=>o});var X=Q(12744),Z=Q(12707),n=Q(10866),V=Q(10905);class o extends X.d{constructor(x){if(super(x),this.message=this.registerDataInput("message",Z.d),this.logType=this.registerDataInput("logType",Z.d,"log"),null!==x&&void 0!==x&&x.messageTemplate){const O=this._getTemplateMatches(x.messageTemplate);for(const x of O)this.registerDataInput(x,Z.d)}}_execute(x){const O=this.logType.getValue(x),Q=this._getMessageValue(x);"warn"===O?V.e.Warn(Q):"error"===O?V.e.Error(Q):V.e.Log(Q),this.out._activateSignal(x)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(x){var O;if(null!==(O=this.config)&&void 0!==O&&O.messageTemplate){let O=this.config.messageTemplate;const X=this._getTemplateMatches(O);for(const Z of X){var Q;const X=null===(Q=this.getDataInput(Z))||void 0===Q?void 0:Q.getValue(x);void 0!==X&&(O=O.replace(new RegExp(`\\{${Z}\\}`,"g"),X.toString()))}return O}return this.message.getValue(x)}_getTemplateMatches(x){const O=/\{([^}]+)\}/g,Q=[];let X;for(;null!==(X=O.exec(x));)Q.push(X[1]);return Q}}(0,n.d)("FlowGraphConsoleLogBlock",o)}}]);