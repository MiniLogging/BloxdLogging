"use strict";(self.hmihoa2fs98=self.hmihoa2fs98||[]).push([[89],{14895:(b,d,P)=>{P.r(d),P.d(d,{FlowGraphAngleBetweenBlock:()=>X,FlowGraphAxisAngleFromQuaternionBlock:()=>M,FlowGraphConjugateBlock:()=>g,FlowGraphCrossBlock:()=>B,FlowGraphDotBlock:()=>r,FlowGraphLengthBlock:()=>w,FlowGraphNormalizeBlock:()=>t,FlowGraphQuaternionFromAxisAngleBlock:()=>u,FlowGraphQuaternionFromDirectionsBlock:()=>e,FlowGraphRotate2DBlock:()=>n,FlowGraphRotate3DBlock:()=>Z,FlowGraphTransformBlock:()=>A,FlowGraphTransformCoordinatesBlock:()=>f});var G=P(13386),W=P(13365),i=P(11639),q=P(14885),C=P(14893),J=P(11681),L=P(13394),x=P(13057);const Y="cachedOperationAxis",s="cachedOperationAngle",E="cachedExecutionId";class w extends C.b{constructor(b){super(W.b,W.p,(b=>this._polymorphicLength(b)),"FlowGraphLengthBlock",b)}_polymorphicLength(b){switch((0,L.i)(b)){case"Vector2":case"ed":case"Vector4":case"Quaternion":return b.length();default:throw new Error(`Cannot compute length of value ${b}`)}}}(0,i.f)("FlowGraphLengthBlock",w);class t extends C.b{constructor(b){super(W.b,W.b,(b=>this._polymorphicNormalize(b)),"FlowGraphNormalizeBlock",b)}_polymorphicNormalize(b){var d;let P;switch((0,L.i)(b)){case"Vector2":case"ed":case"Vector4":case"Quaternion":if(P=b.normalizeToNew(),null!==(d=this.config)&&void 0!==d&&d.nanOnZeroLength){0===b.length()&&P.kd(NaN)}return P;default:throw new Error(`Cannot normalize value ${b}`)}}}(0,i.f)("FlowGraphNormalizeBlock",t);class r extends q.b{constructor(b){super(W.b,W.b,W.p,((b,d)=>this._polymorphicDot(b,d)),"FlowGraphDotBlock",b)}_polymorphicDot(b,d){switch((0,L.i)(b)){case"Vector2":case"ed":case"Vector4":case"Quaternion":return b.dot(d);default:throw new Error(`Cannot get dot product of ${b} and ${d}`)}}}(0,i.f)("FlowGraphDotBlock",r);class B extends q.b{constructor(b){super(W.y,W.y,W.y,((b,d)=>J.ed.Cross(b,d)),"FlowGraphCrossBlock",b)}}(0,i.f)("FlowGraphCrossBlock",B);class n extends q.b{constructor(b){super(W.u,W.p,W.u,((b,d)=>b.rotate(d)),"FlowGraphRotate2DBlock",b)}}(0,i.f)("FlowGraphRotate2DBlock",n);class Z extends q.b{constructor(b){super(W.y,W.s,W.y,((b,d)=>b.applyRotationQuaternion(d)),"FlowGraphRotate3DBlock",b)}}function o(b,d){switch((0,L.i)(b)){case"Vector2":case"ed":return d.transformVector(b);case"Vector4":return new J.Vector4(b.x*d.m[0]+b.y*d.m[1]+b.z*d.m[2]+b.w*d.m[3],b.x*d.m[4]+b.y*d.m[5]+b.z*d.m[6]+b.w*d.m[7],b.x*d.m[8]+b.y*d.m[9]+b.z*d.m[10]+b.w*d.m[11],b.x*d.m[12]+b.y*d.m[13]+b.z*d.m[14]+b.w*d.m[15]);default:throw new Error(`Cannot transform value ${b}`)}}(0,i.f)("FlowGraphRotate3DBlock",Z);class A extends q.b{constructor(b){const d=(null===b||void 0===b?void 0:b.vectorType)||"ed",P="Vector2"===d?"Matrix2D":"ed"===d?"Matrix3D":"Matrix";super((0,W.F)(d),(0,W.F)(P),(0,W.F)(d),o,"FlowGraphTransformVectorBlock",b)}}(0,i.f)("FlowGraphTransformVectorBlock",A);class f extends q.b{constructor(b){super(W.y,W.g,W.y,((b,d)=>J.ed.TransformCoordinates(b,d)),"FlowGraphTransformCoordinatesBlock",b)}}(0,i.f)("FlowGraphTransformCoordinatesBlock",f);class g extends C.b{constructor(b){super(W.s,W.s,(b=>b.conjugate()),"FlowGraphConjugateBlock",b)}}(0,i.f)("FlowGraphConjugateBlock",g);class X extends q.b{constructor(b){super(W.s,W.s,W.p,((b,d)=>(0,x.c)(b,d)),"FlowGraphAngleBetweenBlock",b)}}(0,i.f)("FlowGraphAngleBetweenBlock",X);class u extends q.b{constructor(b){super(W.y,W.p,W.s,((b,d)=>J.Quaternion.RotationAxis(b,d)),"FlowGraphQuaternionFromAxisAngleBlock",b)}}(0,i.f)("FlowGraphQuaternionFromAxisAngleBlock",u);class M extends G.b{constructor(b){super(b),this.a=this.registerDataInput("a",W.s),this.axis=this.registerDataOutput("axis",W.y),this.angle=this.registerDataOutput("angle",W.p),this.isValid=this.registerDataOutput("isValid",W.c)}_updateOutputs(b){const d=b._getExecutionVariable(this,E,-1),P=b._getExecutionVariable(this,Y,null),G=b._getExecutionVariable(this,s,null);if(void 0!==P&&null!==P&&void 0!==G&&null!==G&&d===b.executionId)this.axis.setValue(P,b),this.angle.setValue(G,b);else try{const{axis:d,angle:P}=this.a.getValue(b).toAxisAngle();b._setExecutionVariable(this,Y,d),b._setExecutionVariable(this,s,P),b._setExecutionVariable(this,E,b.executionId),this.axis.setValue(d,b),this.angle.setValue(P,b),this.isValid.setValue(!0,b)}catch(W){this.isValid.setValue(!1,b)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}(0,i.f)("FlowGraphAxisAngleFromQuaternionBlock",M);class e extends q.b{constructor(b){super(W.y,W.y,W.s,((b,d)=>(0,x.f)(b,d)),"FlowGraphQuaternionFromDirectionsBlock",b)}}},14885:(b,d,P)=>{P.d(d,{b:()=>W});var G=P(14890);class W extends G.e{constructor(b,d,P,G,W,i){super(P,i),this._operation=G,this._className=W,this.a=this.registerDataInput("a",b),this.b=this.registerDataInput("b",d)}_doOperation(b){const d=this.a.getValue(b),P=this.b.getValue(b);return this._operation(d,P)}getClassName(){return this._className}}},14890:(b,d,P)=>{P.d(d,{e:()=>C});var G=P(13386),W=P(13365);const i="cachedOperationValue",q="cachedExecutionId";class C extends G.b{constructor(b,d){super(d),this.value=this.registerDataOutput("value",b),this.isValid=this.registerDataOutput("isValid",W.c)}_updateOutputs(b){const d=b._getExecutionVariable(this,q,-1),P=b._getExecutionVariable(this,i,null);if(void 0!==P&&null!==P&&d===b.executionId)this.isValid.setValue(!0,b),this.value.setValue(P,b);else try{const d=this._doOperation(b);if(void 0===d||null===d)return void this.isValid.setValue(!1,b);b._setExecutionVariable(this,i,d),b._setExecutionVariable(this,q,b.executionId),this.value.setValue(d,b),this.isValid.setValue(!0,b)}catch(G){this.isValid.setValue(!1,b)}}}},14893:(b,d,P)=>{P.d(d,{b:()=>W});var G=P(14890);class W extends G.e{constructor(b,d,P,G,W){super(d,W),this._operation=P,this._className=G,this.a=this.registerDataInput("a",b)}_doOperation(b){return this._operation(this.a.getValue(b))}getClassName(){return this._className}}}}]);