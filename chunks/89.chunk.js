"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{14473:(o,H,n)=>{n.r(H),n.d(H,{FlowGraphAngleBetweenBlock:()=>P,FlowGraphAxisAngleFromQuaternionBlock:()=>e,FlowGraphConjugateBlock:()=>m,FlowGraphCrossBlock:()=>J,FlowGraphDotBlock:()=>V,FlowGraphLengthBlock:()=>x,FlowGraphNormalizeBlock:()=>z,FlowGraphQuaternionFromAxisAngleBlock:()=>b,FlowGraphQuaternionFromDirectionsBlock:()=>Z,FlowGraphRotate2DBlock:()=>N,FlowGraphRotate3DBlock:()=>h,FlowGraphTransformBlock:()=>p,FlowGraphTransformCoordinatesBlock:()=>j});var E=n(12956),k=n(12933),g=n(11140),O=n(14458),Y=n(14469),y=n(11189),S=n(12970),G=n(12620);const c="cachedOperationAxis",A="cachedOperationAngle",l="cachedExecutionId";class x extends Y.d{constructor(o){super(k.b,k.r,(o=>this._polymorphicLength(o)),"FlowGraphLengthBlock",o)}_polymorphicLength(o){switch((0,S.j)(o)){case"Vector2":case"xH":case"Vector4":case"Quaternion":return o.length();default:throw new Error(`Cannot compute length of value ${o}`)}}}(0,g.e)("FlowGraphLengthBlock",x);class z extends Y.d{constructor(o){super(k.b,k.b,(o=>this._polymorphicNormalize(o)),"FlowGraphNormalizeBlock",o)}_polymorphicNormalize(o){var H;let n;switch((0,S.j)(o)){case"Vector2":case"xH":case"Vector4":case"Quaternion":if(n=o.normalizeToNew(),null!==(H=this.config)&&void 0!==H&&H.nanOnZeroLength){0===o.length()&&n.AY(NaN)}return n;default:throw new Error(`Cannot normalize value ${o}`)}}}(0,g.e)("FlowGraphNormalizeBlock",z);class V extends O.d{constructor(o){super(k.b,k.b,k.r,((o,H)=>this._polymorphicDot(o,H)),"FlowGraphDotBlock",o)}_polymorphicDot(o,H){switch((0,S.j)(o)){case"Vector2":case"xH":case"Vector4":case"Quaternion":return o.dot(H);default:throw new Error(`Cannot get dot product of ${o} and ${H}`)}}}(0,g.e)("FlowGraphDotBlock",V);class J extends O.d{constructor(o){super(k.B,k.B,k.B,((o,H)=>y.xH.Cross(o,H)),"FlowGraphCrossBlock",o)}}(0,g.e)("FlowGraphCrossBlock",J);class N extends O.d{constructor(o){super(k.y,k.r,k.y,((o,H)=>o.rotate(H)),"FlowGraphRotate2DBlock",o)}}(0,g.e)("FlowGraphRotate2DBlock",N);class h extends O.d{constructor(o){super(k.B,k.u,k.B,((o,H)=>o.applyRotationQuaternion(H)),"FlowGraphRotate3DBlock",o)}}function Q(o,H){switch((0,S.j)(o)){case"Vector2":case"xH":return H.transformVector(o);case"Vector4":return new y.Vector4(o.x*H.m[0]+o.y*H.m[1]+o.z*H.m[2]+o.w*H.m[3],o.x*H.m[4]+o.y*H.m[5]+o.z*H.m[6]+o.w*H.m[7],o.x*H.m[8]+o.y*H.m[9]+o.z*H.m[10]+o.w*H.m[11],o.x*H.m[12]+o.y*H.m[13]+o.z*H.m[14]+o.w*H.m[15]);default:throw new Error(`Cannot transform value ${o}`)}}(0,g.e)("FlowGraphRotate3DBlock",h);class p extends O.d{constructor(o){const H=(null===o||void 0===o?void 0:o.vectorType)||"xH",n="Vector2"===H?"Matrix2D":"xH"===H?"Matrix3D":"Matrix";super((0,k.L)(H),(0,k.L)(n),(0,k.L)(H),Q,"FlowGraphTransformVectorBlock",o)}}(0,g.e)("FlowGraphTransformVectorBlock",p);class j extends O.d{constructor(o){super(k.B,k.i,k.B,((o,H)=>y.xH.TransformCoordinates(o,H)),"FlowGraphTransformCoordinatesBlock",o)}}(0,g.e)("FlowGraphTransformCoordinatesBlock",j);class m extends Y.d{constructor(o){super(k.u,k.u,(o=>o.conjugate()),"FlowGraphConjugateBlock",o)}}(0,g.e)("FlowGraphConjugateBlock",m);class P extends O.d{constructor(o){super(k.u,k.u,k.r,((o,H)=>(0,G.e)(o,H)),"FlowGraphAngleBetweenBlock",o)}}(0,g.e)("FlowGraphAngleBetweenBlock",P);class b extends O.d{constructor(o){super(k.B,k.r,k.u,((o,H)=>y.Quaternion.RotationAxis(o,H)),"FlowGraphQuaternionFromAxisAngleBlock",o)}}(0,g.e)("FlowGraphQuaternionFromAxisAngleBlock",b);class e extends E.c{constructor(o){super(o),this.a=this.registerDataInput("a",k.u),this.axis=this.registerDataOutput("axis",k.B),this.angle=this.registerDataOutput("angle",k.r),this.isValid=this.registerDataOutput("isValid",k.d)}_updateOutputs(o){const H=o._getExecutionVariable(this,l,-1),n=o._getExecutionVariable(this,c,null),E=o._getExecutionVariable(this,A,null);if(void 0!==n&&null!==n&&void 0!==E&&null!==E&&H===o.executionId)this.axis.setValue(n,o),this.angle.setValue(E,o);else try{const{axis:H,angle:n}=this.a.getValue(o).toAxisAngle();o._setExecutionVariable(this,c,H),o._setExecutionVariable(this,A,n),o._setExecutionVariable(this,l,o.executionId),this.axis.setValue(H,o),this.angle.setValue(n,o),this.isValid.setValue(!0,o)}catch(k){this.isValid.setValue(!1,o)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}(0,g.e)("FlowGraphAxisAngleFromQuaternionBlock",e);class Z extends O.d{constructor(o){super(k.B,k.B,k.u,((o,H)=>(0,G.g)(o,H)),"FlowGraphQuaternionFromDirectionsBlock",o)}}},14458:(o,H,n)=>{n.d(H,{d:()=>k});var E=n(14464);class k extends E.d{constructor(o,H,n,E,k,g){super(n,g),this._operation=E,this._className=k,this.a=this.registerDataInput("a",o),this.b=this.registerDataInput("b",H)}_doOperation(o){const H=this.a.getValue(o),n=this.b.getValue(o);return this._operation(H,n)}getClassName(){return this._className}}},14464:(o,H,n)=>{n.d(H,{d:()=>Y});var E=n(12956),k=n(12933);const g="cachedOperationValue",O="cachedExecutionId";class Y extends E.c{constructor(o,H){super(H),this.value=this.registerDataOutput("value",o),this.isValid=this.registerDataOutput("isValid",k.d)}_updateOutputs(o){const H=o._getExecutionVariable(this,O,-1),n=o._getExecutionVariable(this,g,null);if(void 0!==n&&null!==n&&H===o.executionId)this.isValid.setValue(!0,o),this.value.setValue(n,o);else try{const H=this._doOperation(o);if(void 0===H||null===H)return void this.isValid.setValue(!1,o);o._setExecutionVariable(this,g,H),o._setExecutionVariable(this,O,o.executionId),this.value.setValue(H,o),this.isValid.setValue(!0,o)}catch(E){this.isValid.setValue(!1,o)}}}},14469:(o,H,n)=>{n.d(H,{d:()=>k});var E=n(14464);class k extends E.d{constructor(o,H,n,E,k){super(H,k),this._operation=n,this._className=E,this.a=this.registerDataInput("a",o)}_doOperation(o){return this._operation(this.a.getValue(o))}getClassName(){return this._className}}}}]);