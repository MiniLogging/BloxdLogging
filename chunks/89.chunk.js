"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{14266:(q,f,j)=>{j.r(f),j.d(f,{FlowGraphConsoleLogBlock:()=>Q});var d=j(12752),g=j(12709),h=j(10965),L=j(11005);class Q extends d.c{constructor(q){if(super(q),this.message=this.registerDataInput("message",g.c),this.logType=this.registerDataInput("logType",g.c,"log"),null!==q&&void 0!==q&&q.messageTemplate){const f=this._getTemplateMatches(q.messageTemplate);for(const q of f)this.registerDataInput(q,g.c)}}_execute(q){const f=this.logType.getValue(q),j=this._getMessageValue(q);"warn"===f?L.e.Warn(j):"error"===f?L.e.Error(j):L.e.Log(j),this.out._activateSignal(q)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(q){var f;if(null!==(f=this.config)&&void 0!==f&&f.messageTemplate){let f=this.config.messageTemplate;const d=this._getTemplateMatches(f);for(const g of d){var j;const d=null===(j=this.getDataInput(g))||void 0===j?void 0:j.getValue(q);void 0!==d&&(f=f.replace(new RegExp(`\\{${g}\\}`,"g"),d.toString()))}return f}return this.message.getValue(q)}_getTemplateMatches(q){const f=/\{([^}]+)\}/g,j=[];let d;for(;null!==(d=f.exec(q));)j.push(d[1]);return j}}(0,h.f)("FlowGraphConsoleLogBlock",Q)}}]);