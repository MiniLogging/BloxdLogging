"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{14355:(s,Z,o)=>{o.r(Z),o.d(Z,{FlowGraphConsoleLogBlock:()=>O});var t=o(12831),j=o(12775),S=o(10916),a=o(10955);class O extends t.b{constructor(s){if(super(s),this.message=this.registerDataInput("message",j.d),this.logType=this.registerDataInput("logType",j.d,"log"),null!==s&&void 0!==s&&s.messageTemplate){const Z=this._getTemplateMatches(s.messageTemplate);for(const s of Z)this.registerDataInput(s,j.d)}}_execute(s){const Z=this.logType.getValue(s),o=this._getMessageValue(s);"warn"===Z?a.b.Warn(o):"error"===Z?a.b.Error(o):a.b.Log(o),this.out._activateSignal(s)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(s){var Z;if(null!==(Z=this.config)&&void 0!==Z&&Z.messageTemplate){let Z=this.config.messageTemplate;const t=this._getTemplateMatches(Z);for(const j of t){var o;const t=null===(o=this.getDataInput(j))||void 0===o?void 0:o.getValue(s);void 0!==t&&(Z=Z.replace(new RegExp(`\\{${j}\\}`,"g"),t.toString()))}return Z}return this.message.getValue(s)}_getTemplateMatches(s){const Z=/\{([^}]+)\}/g,o=[];let t;for(;null!==(t=Z.exec(s));)o.push(t[1]);return o}}(0,S.f)("FlowGraphConsoleLogBlock",O)}}]);