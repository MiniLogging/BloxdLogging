"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{13956:(A,X,s)=>{s.r(X),s.d(X,{FlowGraphSetPropertyBlock:()=>g});var N=s(12724),f=s(12677),E=s(616);class g extends N.e{constructor(A){super(A),this.config=A,this.object=this.registerDataInput("object",f.b,A.target),this.value=this.registerDataInput("value",f.b),this.propertyName=this.registerDataInput("propertyName",f.b,A.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",f.b)}_execute(A,X){try{const X=this.object.getValue(A),s=this.value.getValue(A),N=this.propertyName.getValue(A);this._stopRunningAnimations(A,X,N);const f=this.customSetFunction.getValue(A);f?f(X,N,s,A):this._setPropertyValue(X,N,s)}catch(s){this._reportError(A,s)}this.out._activateSignal(A)}_stopRunningAnimations(A,X,s){const N=A._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const f of N){const E=A.assetsContext.animationGroups.find((A=>A.uniqueId===f));if(E)for(const g of E.targetedAnimations)if(g.target===X&&g.animation.targetProperty===s){E.stop(!0),E.dispose();const X=N.indexOf(f);-1!==X&&(N.splice(X,1),A._setGlobalContextVariable("currentlyRunningAnimationGroups",N))}}}_setPropertyValue(A,X,s){const N=X.split(".");let f=A;for(let E=0;E<N.length-1;E++){const A=N[E];void 0===f[A]&&(f[A]={}),f=f[A]}f[N[N.length-1]]=s}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,E.f)("FlowGraphSetPropertyBlock",g)}}]);