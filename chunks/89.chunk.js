"use strict";(self.i6szn8jgzh=self.i6szn8jgzh||[]).push([[89],{15091:(b,n,i)=>{i.r(n),i.d(n,{FlowGraphAngleBetweenBlock:()=>a,FlowGraphAxisAngleFromQuaternionBlock:()=>x,FlowGraphConjugateBlock:()=>j,FlowGraphCrossBlock:()=>O,FlowGraphDotBlock:()=>I,FlowGraphLengthBlock:()=>z,FlowGraphNormalizeBlock:()=>K,FlowGraphQuaternionFromAxisAngleBlock:()=>D,FlowGraphQuaternionFromDirectionsBlock:()=>y,FlowGraphRotate2DBlock:()=>u,FlowGraphRotate3DBlock:()=>d,FlowGraphTransformBlock:()=>o,FlowGraphTransformCoordinatesBlock:()=>M});var e=i(13547),V=i(13522),Q=i(11734),U=i(15081),Y=i(15089),L=i(11778),B=i(13560),mb=i(13203);const N="cachedOperationAxis",Z="cachedOperationAngle",T="cachedExecutionId";class z extends Y.b{constructor(b){super(V.c,V.q,(b=>this._polymorphicLength(b)),"FlowGraphLengthBlock",b)}_polymorphicLength(b){switch((0,B.k)(b)){case"Vector2":case"On":case"Vector4":case"Quaternion":return b.length();default:throw new Error(`Cannot compute length of value ${b}`)}}}(0,Q.i)("FlowGraphLengthBlock",z);class K extends Y.b{constructor(b){super(V.c,V.c,(b=>this._polymorphicNormalize(b)),"FlowGraphNormalizeBlock",b)}_polymorphicNormalize(b){var n;let i;switch((0,B.k)(b)){case"Vector2":case"On":case"Vector4":case"Quaternion":if(i=b.normalizeToNew(),null!==(n=this.config)&&void 0!==n&&n.nanOnZeroLength){0===b.length()&&i.Fe(NaN)}return i;default:throw new Error(`Cannot normalize value ${b}`)}}}(0,Q.i)("FlowGraphNormalizeBlock",K);class I extends U.d{constructor(b){super(V.c,V.c,V.q,((b,n)=>this._polymorphicDot(b,n)),"FlowGraphDotBlock",b)}_polymorphicDot(b,n){switch((0,B.k)(b)){case"Vector2":case"On":case"Vector4":case"Quaternion":return b.dot(n);default:throw new Error(`Cannot get dot product of ${b} and ${n}`)}}}(0,Q.i)("FlowGraphDotBlock",I);class O extends U.d{constructor(b){super(V.E,V.E,V.E,((b,n)=>L.On.Cross(b,n)),"FlowGraphCrossBlock",b)}}(0,Q.i)("FlowGraphCrossBlock",O);class u extends U.d{constructor(b){super(V.A,V.q,V.A,((b,n)=>b.rotate(n)),"FlowGraphRotate2DBlock",b)}}(0,Q.i)("FlowGraphRotate2DBlock",u);class d extends U.d{constructor(b){super(V.E,V.t,V.E,((b,n)=>b.applyRotationQuaternion(n)),"FlowGraphRotate3DBlock",b)}}function G(b,n){switch((0,B.k)(b)){case"Vector2":case"On":return n.transformVector(b);case"Vector4":return new L.Vector4(b.x*n.m[0]+b.y*n.m[1]+b.z*n.m[2]+b.w*n.m[3],b.x*n.m[4]+b.y*n.m[5]+b.z*n.m[6]+b.w*n.m[7],b.x*n.m[8]+b.y*n.m[9]+b.z*n.m[10]+b.w*n.m[11],b.x*n.m[12]+b.y*n.m[13]+b.z*n.m[14]+b.w*n.m[15]);default:throw new Error(`Cannot transform value ${b}`)}}(0,Q.i)("FlowGraphRotate3DBlock",d);class o extends U.d{constructor(b){const n=(null===b||void 0===b?void 0:b.vectorType)||"On",i="Vector2"===n?"Matrix2D":"On"===n?"Matrix3D":"Matrix";super((0,V.M)(n),(0,V.M)(i),(0,V.M)(n),G,"FlowGraphTransformVectorBlock",b)}}(0,Q.i)("FlowGraphTransformVectorBlock",o);class M extends U.d{constructor(b){super(V.E,V.j,V.E,((b,n)=>L.On.TransformCoordinates(b,n)),"FlowGraphTransformCoordinatesBlock",b)}}(0,Q.i)("FlowGraphTransformCoordinatesBlock",M);class j extends Y.b{constructor(b){super(V.t,V.t,(b=>b.conjugate()),"FlowGraphConjugateBlock",b)}}(0,Q.i)("FlowGraphConjugateBlock",j);class a extends U.d{constructor(b){super(V.t,V.t,V.q,((b,n)=>(0,mb.d)(b,n)),"FlowGraphAngleBetweenBlock",b)}}(0,Q.i)("FlowGraphAngleBetweenBlock",a);class D extends U.d{constructor(b){super(V.E,V.q,V.t,((b,n)=>L.Quaternion.RotationAxis(b,n)),"FlowGraphQuaternionFromAxisAngleBlock",b)}}(0,Q.i)("FlowGraphQuaternionFromAxisAngleBlock",D);class x extends e.c{constructor(b){super(b),this.a=this.registerDataInput("a",V.t),this.axis=this.registerDataOutput("axis",V.E),this.angle=this.registerDataOutput("angle",V.q),this.isValid=this.registerDataOutput("isValid",V.f)}_updateOutputs(b){const n=b._getExecutionVariable(this,T,-1),i=b._getExecutionVariable(this,N,null),e=b._getExecutionVariable(this,Z,null);if(void 0!==i&&null!==i&&void 0!==e&&null!==e&&n===b.executionId)this.axis.setValue(i,b),this.angle.setValue(e,b);else try{const{axis:n,angle:i}=this.a.getValue(b).toAxisAngle();b._setExecutionVariable(this,N,n),b._setExecutionVariable(this,Z,i),b._setExecutionVariable(this,T,b.executionId),this.axis.setValue(n,b),this.angle.setValue(i,b),this.isValid.setValue(!0,b)}catch(V){this.isValid.setValue(!1,b)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}(0,Q.i)("FlowGraphAxisAngleFromQuaternionBlock",x);class y extends U.d{constructor(b){super(V.E,V.E,V.t,((b,n)=>(0,mb.e)(b,n)),"FlowGraphQuaternionFromDirectionsBlock",b)}}},15081:(b,n,i)=>{i.d(n,{d:()=>V});var e=i(15083);class V extends e.b{constructor(b,n,i,e,V,Q){super(i,Q),this._operation=e,this._className=V,this.a=this.registerDataInput("a",b),this.b=this.registerDataInput("b",n)}_doOperation(b){const n=this.a.getValue(b),i=this.b.getValue(b);return this._operation(n,i)}getClassName(){return this._className}}},15083:(b,n,i)=>{i.d(n,{b:()=>Y});var e=i(13547),V=i(13522);const Q="cachedOperationValue",U="cachedExecutionId";class Y extends e.c{constructor(b,n){super(n),this.value=this.registerDataOutput("value",b),this.isValid=this.registerDataOutput("isValid",V.f)}_updateOutputs(b){const n=b._getExecutionVariable(this,U,-1),i=b._getExecutionVariable(this,Q,null);if(void 0!==i&&null!==i&&n===b.executionId)this.isValid.setValue(!0,b),this.value.setValue(i,b);else try{const n=this._doOperation(b);if(void 0===n||null===n)return void this.isValid.setValue(!1,b);b._setExecutionVariable(this,Q,n),b._setExecutionVariable(this,U,b.executionId),this.value.setValue(n,b),this.isValid.setValue(!0,b)}catch(e){this.isValid.setValue(!1,b)}}}},15089:(b,n,i)=>{i.d(n,{b:()=>V});var e=i(15083);class V extends e.b{constructor(b,n,i,e,V){super(n,V),this._operation=i,this._className=e,this.a=this.registerDataInput("a",b)}_doOperation(b){return this._operation(this.a.getValue(b))}getClassName(){return this._className}}}}]);