"use strict";(self["5dou0t7wntc"]=self["5dou0t7wntc"]||[]).push([[89],{14980:(K,O,F)=>{F.r(O),F.d(O,{FlowGraphAngleBetweenBlock:()=>H,FlowGraphAxisAngleFromQuaternionBlock:()=>W,FlowGraphConjugateBlock:()=>g,FlowGraphCrossBlock:()=>k,FlowGraphDotBlock:()=>o,FlowGraphLengthBlock:()=>u,FlowGraphNormalizeBlock:()=>T,FlowGraphQuaternionFromAxisAngleBlock:()=>e,FlowGraphQuaternionFromDirectionsBlock:()=>p,FlowGraphRotate2DBlock:()=>N,FlowGraphRotate3DBlock:()=>Z,FlowGraphTransformBlock:()=>d,FlowGraphTransformCoordinatesBlock:()=>a});var f=F(13471),r=F(13441),l=F(11661),q=F(14962),J=F(14972),c=F(11713),E=F(13479),M=F(13140);const t="cachedOperationAxis",j="cachedOperationAngle",X="cachedExecutionId";class u extends J.b{constructor(K){super(r.d,r.s,(K=>this._polymorphicLength(K)),"FlowGraphLengthBlock",K)}_polymorphicLength(K){switch((0,E.k)(K)){case"Vector2":case"TO":case"Vector4":case"Quaternion":return K.length();default:throw new Error(`Cannot compute length of value ${K}`)}}}(0,l.g)("FlowGraphLengthBlock",u);class T extends J.b{constructor(K){super(r.d,r.d,(K=>this._polymorphicNormalize(K)),"FlowGraphNormalizeBlock",K)}_polymorphicNormalize(K){var O;let F;switch((0,E.k)(K)){case"Vector2":case"TO":case"Vector4":case"Quaternion":if(F=K.normalizeToNew(),null!==(O=this.config)&&void 0!==O&&O.nanOnZeroLength){0===K.length()&&F.oJ(NaN)}return F;default:throw new Error(`Cannot normalize value ${K}`)}}}(0,l.g)("FlowGraphNormalizeBlock",T);class o extends q.e{constructor(K){super(r.d,r.d,r.s,((K,O)=>this._polymorphicDot(K,O)),"FlowGraphDotBlock",K)}_polymorphicDot(K,O){switch((0,E.k)(K)){case"Vector2":case"TO":case"Vector4":case"Quaternion":return K.dot(O);default:throw new Error(`Cannot get dot product of ${K} and ${O}`)}}}(0,l.g)("FlowGraphDotBlock",o);class k extends q.e{constructor(K){super(r.B,r.B,r.B,((K,O)=>c.TO.Cross(K,O)),"FlowGraphCrossBlock",K)}}(0,l.g)("FlowGraphCrossBlock",k);class N extends q.e{constructor(K){super(r.z,r.s,r.z,((K,O)=>K.rotate(O)),"FlowGraphRotate2DBlock",K)}}(0,l.g)("FlowGraphRotate2DBlock",N);class Z extends q.e{constructor(K){super(r.B,r.u,r.B,((K,O)=>K.applyRotationQuaternion(O)),"FlowGraphRotate3DBlock",K)}}function L(K,O){switch((0,E.k)(K)){case"Vector2":case"TO":return O.transformVector(K);case"Vector4":return new c.Vector4(K.x*O.m[0]+K.y*O.m[1]+K.z*O.m[2]+K.w*O.m[3],K.x*O.m[4]+K.y*O.m[5]+K.z*O.m[6]+K.w*O.m[7],K.x*O.m[8]+K.y*O.m[9]+K.z*O.m[10]+K.w*O.m[11],K.x*O.m[12]+K.y*O.m[13]+K.z*O.m[14]+K.w*O.m[15]);default:throw new Error(`Cannot transform value ${K}`)}}(0,l.g)("FlowGraphRotate3DBlock",Z);class d extends q.e{constructor(K){const O=(null===K||void 0===K?void 0:K.vectorType)||"TO",F="Vector2"===O?"Matrix2D":"TO"===O?"Matrix3D":"Matrix";super((0,r.J)(O),(0,r.J)(F),(0,r.J)(O),L,"FlowGraphTransformVectorBlock",K)}}(0,l.g)("FlowGraphTransformVectorBlock",d);class a extends q.e{constructor(K){super(r.B,r.l,r.B,((K,O)=>c.TO.TransformCoordinates(K,O)),"FlowGraphTransformCoordinatesBlock",K)}}(0,l.g)("FlowGraphTransformCoordinatesBlock",a);class g extends J.b{constructor(K){super(r.u,r.u,(K=>K.conjugate()),"FlowGraphConjugateBlock",K)}}(0,l.g)("FlowGraphConjugateBlock",g);class H extends q.e{constructor(K){super(r.u,r.u,r.s,((K,O)=>(0,M.c)(K,O)),"FlowGraphAngleBetweenBlock",K)}}(0,l.g)("FlowGraphAngleBetweenBlock",H);class e extends q.e{constructor(K){super(r.B,r.s,r.u,((K,O)=>c.Quaternion.RotationAxis(K,O)),"FlowGraphQuaternionFromAxisAngleBlock",K)}}(0,l.g)("FlowGraphQuaternionFromAxisAngleBlock",e);class W extends f.e{constructor(K){super(K),this.a=this.registerDataInput("a",r.u),this.axis=this.registerDataOutput("axis",r.B),this.angle=this.registerDataOutput("angle",r.s),this.isValid=this.registerDataOutput("isValid",r.e)}_updateOutputs(K){const O=K._getExecutionVariable(this,X,-1),F=K._getExecutionVariable(this,t,null),f=K._getExecutionVariable(this,j,null);if(void 0!==F&&null!==F&&void 0!==f&&null!==f&&O===K.executionId)this.axis.setValue(F,K),this.angle.setValue(f,K);else try{const{axis:O,angle:F}=this.a.getValue(K).toAxisAngle();K._setExecutionVariable(this,t,O),K._setExecutionVariable(this,j,F),K._setExecutionVariable(this,X,K.executionId),this.axis.setValue(O,K),this.angle.setValue(F,K),this.isValid.setValue(!0,K)}catch(r){this.isValid.setValue(!1,K)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}(0,l.g)("FlowGraphAxisAngleFromQuaternionBlock",W);class p extends q.e{constructor(K){super(r.B,r.B,r.u,((K,O)=>(0,M.d)(K,O)),"FlowGraphQuaternionFromDirectionsBlock",K)}}},14962:(K,O,F)=>{F.d(O,{e:()=>r});var f=F(14970);class r extends f.d{constructor(K,O,F,f,r,l){super(F,l),this._operation=f,this._className=r,this.a=this.registerDataInput("a",K),this.b=this.registerDataInput("b",O)}_doOperation(K){const O=this.a.getValue(K),F=this.b.getValue(K);return this._operation(O,F)}getClassName(){return this._className}}},14970:(K,O,F)=>{F.d(O,{d:()=>J});var f=F(13471),r=F(13441);const l="cachedOperationValue",q="cachedExecutionId";class J extends f.e{constructor(K,O){super(O),this.value=this.registerDataOutput("value",K),this.isValid=this.registerDataOutput("isValid",r.e)}_updateOutputs(K){const O=K._getExecutionVariable(this,q,-1),F=K._getExecutionVariable(this,l,null);if(void 0!==F&&null!==F&&O===K.executionId)this.isValid.setValue(!0,K),this.value.setValue(F,K);else try{const O=this._doOperation(K);if(void 0===O||null===O)return void this.isValid.setValue(!1,K);K._setExecutionVariable(this,l,O),K._setExecutionVariable(this,q,K.executionId),this.value.setValue(O,K),this.isValid.setValue(!0,K)}catch(f){this.isValid.setValue(!1,K)}}}},14972:(K,O,F)=>{F.d(O,{b:()=>r});var f=F(14970);class r extends f.d{constructor(K,O,F,f,r){super(O,r),this._operation=F,this._className=f,this.a=this.registerDataInput("a",K)}_doOperation(K){return this._operation(this.a.getValue(K))}getClassName(){return this._className}}}}]);