"use strict";(self.nyfa010khv=self.nyfa010khv||[]).push([[89],{15354:(L,r,p)=>{p.r(r),p.d(r,{FlowGraphAngleBetweenBlock:()=>Q,FlowGraphAxisAngleFromQuaternionBlock:()=>v,FlowGraphConjugateBlock:()=>F,FlowGraphCrossBlock:()=>P,FlowGraphDotBlock:()=>c,FlowGraphLengthBlock:()=>g,FlowGraphNormalizeBlock:()=>b,FlowGraphQuaternionFromAxisAngleBlock:()=>e,FlowGraphQuaternionFromDirectionsBlock:()=>y,FlowGraphRotate2DBlock:()=>O,FlowGraphRotate3DBlock:()=>h,FlowGraphTransformBlock:()=>W,FlowGraphTransformCoordinatesBlock:()=>B});var J=p(13882),i=p(13868),n=p(12087),j=p(15336),z=p(15345),G=p(12136),C=p(13895),t=p(13510);const E="cachedOperationAxis",x="cachedOperationAngle",w="cachedExecutionId";class g extends z.d{constructor(L){super(i.d,i.v,(L=>this._polymorphicLength(L)),"FlowGraphLengthBlock",L)}_polymorphicLength(L){switch((0,C.n)(L)){case"Vector2":case"cr":case"Vector4":case"Quaternion":return L.length();default:throw new Error(`Cannot compute length of value ${L}`)}}}(0,n.e)("FlowGraphLengthBlock",g);class b extends z.d{constructor(L){super(i.d,i.d,(L=>this._polymorphicNormalize(L)),"FlowGraphNormalizeBlock",L)}_polymorphicNormalize(L){var r;let p;switch((0,C.n)(L)){case"Vector2":case"cr":case"Vector4":case"Quaternion":if(p=L.normalizeToNew(),null!==(r=this.config)&&void 0!==r&&r.nanOnZeroLength){0===L.length()&&p.Bz(NaN)}return p;default:throw new Error(`Cannot normalize value ${L}`)}}}(0,n.e)("FlowGraphNormalizeBlock",b);class c extends j.d{constructor(L){super(i.d,i.d,i.v,((L,r)=>this._polymorphicDot(L,r)),"FlowGraphDotBlock",L)}_polymorphicDot(L,r){switch((0,C.n)(L)){case"Vector2":case"cr":case"Vector4":case"Quaternion":return L.dot(r);default:throw new Error(`Cannot get dot product of ${L} and ${r}`)}}}(0,n.e)("FlowGraphDotBlock",c);class P extends j.d{constructor(L){super(i.G,i.G,i.G,((L,r)=>G.cr.Cross(L,r)),"FlowGraphCrossBlock",L)}}(0,n.e)("FlowGraphCrossBlock",P);class O extends j.d{constructor(L){super(i.E,i.v,i.E,((L,r)=>L.rotate(r)),"FlowGraphRotate2DBlock",L)}}(0,n.e)("FlowGraphRotate2DBlock",O);class h extends j.d{constructor(L){super(i.G,i.w,i.G,((L,r)=>L.applyRotationQuaternion(r)),"FlowGraphRotate3DBlock",L)}}function U(L,r){switch((0,C.n)(L)){case"Vector2":case"cr":return r.transformVector(L);case"Vector4":return new G.Vector4(L.x*r.m[0]+L.y*r.m[1]+L.z*r.m[2]+L.w*r.m[3],L.x*r.m[4]+L.y*r.m[5]+L.z*r.m[6]+L.w*r.m[7],L.x*r.m[8]+L.y*r.m[9]+L.z*r.m[10]+L.w*r.m[11],L.x*r.m[12]+L.y*r.m[13]+L.z*r.m[14]+L.w*r.m[15]);default:throw new Error(`Cannot transform value ${L}`)}}(0,n.e)("FlowGraphRotate3DBlock",h);class W extends j.d{constructor(L){const r=(null===L||void 0===L?void 0:L.vectorType)||"cr",p="Vector2"===r?"Matrix2D":"cr"===r?"Matrix3D":"Matrix";super((0,i.R)(r),(0,i.R)(p),(0,i.R)(r),U,"FlowGraphTransformVectorBlock",L)}}(0,n.e)("FlowGraphTransformVectorBlock",W);class B extends j.d{constructor(L){super(i.G,i.n,i.G,((L,r)=>G.cr.TransformCoordinates(L,r)),"FlowGraphTransformCoordinatesBlock",L)}}(0,n.e)("FlowGraphTransformCoordinatesBlock",B);class F extends z.d{constructor(L){super(i.w,i.w,(L=>L.conjugate()),"FlowGraphConjugateBlock",L)}}(0,n.e)("FlowGraphConjugateBlock",F);class Q extends j.d{constructor(L){super(i.w,i.w,i.v,((L,r)=>(0,t.e)(L,r)),"FlowGraphAngleBetweenBlock",L)}}(0,n.e)("FlowGraphAngleBetweenBlock",Q);class e extends j.d{constructor(L){super(i.G,i.v,i.w,((L,r)=>G.Quaternion.RotationAxis(L,r)),"FlowGraphQuaternionFromAxisAngleBlock",L)}}(0,n.e)("FlowGraphQuaternionFromAxisAngleBlock",e);class v extends J.b{constructor(L){super(L),this.a=this.registerDataInput("a",i.w),this.axis=this.registerDataOutput("axis",i.G),this.angle=this.registerDataOutput("angle",i.v),this.isValid=this.registerDataOutput("isValid",i.h)}_updateOutputs(L){const r=L._getExecutionVariable(this,w,-1),p=L._getExecutionVariable(this,E,null),J=L._getExecutionVariable(this,x,null);if(void 0!==p&&null!==p&&void 0!==J&&null!==J&&r===L.executionId)this.axis.setValue(p,L),this.angle.setValue(J,L);else try{const{axis:r,angle:p}=this.a.getValue(L).toAxisAngle();L._setExecutionVariable(this,E,r),L._setExecutionVariable(this,x,p),L._setExecutionVariable(this,w,L.executionId),this.axis.setValue(r,L),this.angle.setValue(p,L),this.isValid.setValue(!0,L)}catch(i){this.isValid.setValue(!1,L)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}(0,n.e)("FlowGraphAxisAngleFromQuaternionBlock",v);class y extends j.d{constructor(L){super(i.G,i.G,i.w,((L,r)=>(0,t.f)(L,r)),"FlowGraphQuaternionFromDirectionsBlock",L)}}},15336:(L,r,p)=>{p.d(r,{d:()=>i});var J=p(15339);class i extends J.c{constructor(L,r,p,J,i,n){super(p,n),this._operation=J,this._className=i,this.a=this.registerDataInput("a",L),this.b=this.registerDataInput("b",r)}_doOperation(L){const r=this.a.getValue(L),p=this.b.getValue(L);return this._operation(r,p)}getClassName(){return this._className}}},15339:(L,r,p)=>{p.d(r,{c:()=>z});var J=p(13882),i=p(13868);const n="cachedOperationValue",j="cachedExecutionId";class z extends J.b{constructor(L,r){super(r),this.value=this.registerDataOutput("value",L),this.isValid=this.registerDataOutput("isValid",i.h)}_updateOutputs(L){const r=L._getExecutionVariable(this,j,-1),p=L._getExecutionVariable(this,n,null);if(void 0!==p&&null!==p&&r===L.executionId)this.isValid.setValue(!0,L),this.value.setValue(p,L);else try{const r=this._doOperation(L);if(void 0===r||null===r)return void this.isValid.setValue(!1,L);L._setExecutionVariable(this,n,r),L._setExecutionVariable(this,j,L.executionId),this.value.setValue(r,L),this.isValid.setValue(!0,L)}catch(J){this.isValid.setValue(!1,L)}}}},15345:(L,r,p)=>{p.d(r,{d:()=>i});var J=p(15339);class i extends J.c{constructor(L,r,p,J,i){super(r,i),this._operation=p,this._className=J,this.a=this.registerDataInput("a",L)}_doOperation(L){return this._operation(this.a.getValue(L))}getClassName(){return this._className}}}}]);