"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{14173:(n,k,T)=>{T.r(k),T.d(k,{FlowGraphSetPropertyBlock:()=>G});var c=T(12875),K=T(12831),Q=T(675);class G extends c.c{constructor(n){super(n),this.config=n,this.object=this.registerDataInput("object",K.e,n.target),this.value=this.registerDataInput("value",K.e),this.propertyName=this.registerDataInput("propertyName",K.e,n.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",K.e)}_execute(n,k){try{const k=this.object.getValue(n),T=this.value.getValue(n),c=this.propertyName.getValue(n);this._stopRunningAnimations(n,k,c);const K=this.customSetFunction.getValue(n);K?K(k,c,T,n):this._setPropertyValue(k,c,T)}catch(T){this._reportError(n,T)}this.out._activateSignal(n)}_stopRunningAnimations(n,k,T){const c=n._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const K of c){const Q=n.assetsContext.animationGroups.find((n=>n.uniqueId===K));if(Q)for(const G of Q.targetedAnimations)if(G.target===k&&G.animation.targetProperty===T){Q.stop(!0),Q.dispose();const k=c.indexOf(K);-1!==k&&(c.splice(k,1),n._setGlobalContextVariable("currentlyRunningAnimationGroups",c))}}}_setPropertyValue(n,k,T){const c=k.split(".");let K=n;for(let Q=0;Q<c.length-1;Q++){const n=c[Q];void 0===K[n]&&(K[n]={}),K=K[n]}K[c[c.length-1]]=T}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,Q.f)("FlowGraphSetPropertyBlock",G)}}]);