"use strict";(self.h6ljd275xwr=self.h6ljd275xwr||[]).push([[89],{14602:(n,y,H)=>{H.r(y),H.d(y,{FlowGraphAngleBetweenBlock:()=>c,FlowGraphAxisAngleFromQuaternionBlock:()=>E,FlowGraphConjugateBlock:()=>f,FlowGraphCrossBlock:()=>Q,FlowGraphDotBlock:()=>z,FlowGraphLengthBlock:()=>T,FlowGraphNormalizeBlock:()=>W,FlowGraphQuaternionFromAxisAngleBlock:()=>p,FlowGraphQuaternionFromDirectionsBlock:()=>X,FlowGraphRotate2DBlock:()=>l,FlowGraphRotate3DBlock:()=>v,FlowGraphTransformBlock:()=>g,FlowGraphTransformCoordinatesBlock:()=>M});var o=H(13146),G=H(13117),h=H(11248),k=H(14585),i=H(14597),B=H(11288),V=H(13152),q=H(12786);const b="cachedOperationAxis",A="cachedOperationAngle",U="cachedExecutionId";class T extends i.b{constructor(n){super(G.c,G.p,(n=>this._polymorphicLength(n)),"FlowGraphLengthBlock",n)}_polymorphicLength(n){switch((0,V.l)(n)){case"Vector2":case"zy":case"Vector4":case"Quaternion":return n.length();default:throw new Error(`Cannot compute length of value ${n}`)}}}(0,h.h)("FlowGraphLengthBlock",T);class W extends i.b{constructor(n){super(G.c,G.c,(n=>this._polymorphicNormalize(n)),"FlowGraphNormalizeBlock",n)}_polymorphicNormalize(n){var y;let H;switch((0,V.l)(n)){case"Vector2":case"zy":case"Vector4":case"Quaternion":if(H=n.normalizeToNew(),null!==(y=this.config)&&void 0!==y&&y.nanOnZeroLength){0===n.length()&&H.ci(NaN)}return H;default:throw new Error(`Cannot normalize value ${n}`)}}}(0,h.h)("FlowGraphNormalizeBlock",W);class z extends k.c{constructor(n){super(G.c,G.c,G.p,((n,y)=>this._polymorphicDot(n,y)),"FlowGraphDotBlock",n)}_polymorphicDot(n,y){switch((0,V.l)(n)){case"Vector2":case"zy":case"Vector4":case"Quaternion":return n.dot(y);default:throw new Error(`Cannot get dot product of ${n} and ${y}`)}}}(0,h.h)("FlowGraphDotBlock",z);class Q extends k.c{constructor(n){super(G.x,G.x,G.x,((n,y)=>B.zy.Cross(n,y)),"FlowGraphCrossBlock",n)}}(0,h.h)("FlowGraphCrossBlock",Q);class l extends k.c{constructor(n){super(G.w,G.p,G.w,((n,y)=>n.rotate(y)),"FlowGraphRotate2DBlock",n)}}(0,h.h)("FlowGraphRotate2DBlock",l);class v extends k.c{constructor(n){super(G.x,G.s,G.x,((n,y)=>n.applyRotationQuaternion(y)),"FlowGraphRotate3DBlock",n)}}function F(n,y){switch((0,V.l)(n)){case"Vector2":case"zy":return y.transformVector(n);case"Vector4":return new B.Vector4(n.x*y.m[0]+n.y*y.m[1]+n.z*y.m[2]+n.w*y.m[3],n.x*y.m[4]+n.y*y.m[5]+n.z*y.m[6]+n.w*y.m[7],n.x*y.m[8]+n.y*y.m[9]+n.z*y.m[10]+n.w*y.m[11],n.x*y.m[12]+n.y*y.m[13]+n.z*y.m[14]+n.w*y.m[15]);default:throw new Error(`Cannot transform value ${n}`)}}(0,h.h)("FlowGraphRotate3DBlock",v);class g extends k.c{constructor(n){const y=(null===n||void 0===n?void 0:n.vectorType)||"zy",H="Vector2"===y?"Matrix2D":"zy"===y?"Matrix3D":"Matrix";super((0,G.D)(y),(0,G.D)(H),(0,G.D)(y),F,"FlowGraphTransformVectorBlock",n)}}(0,h.h)("FlowGraphTransformVectorBlock",g);class M extends k.c{constructor(n){super(G.x,G.i,G.x,((n,y)=>B.zy.TransformCoordinates(n,y)),"FlowGraphTransformCoordinatesBlock",n)}}(0,h.h)("FlowGraphTransformCoordinatesBlock",M);class f extends i.b{constructor(n){super(G.s,G.s,(n=>n.conjugate()),"FlowGraphConjugateBlock",n)}}(0,h.h)("FlowGraphConjugateBlock",f);class c extends k.c{constructor(n){super(G.s,G.s,G.p,((n,y)=>(0,q.e)(n,y)),"FlowGraphAngleBetweenBlock",n)}}(0,h.h)("FlowGraphAngleBetweenBlock",c);class p extends k.c{constructor(n){super(G.x,G.p,G.s,((n,y)=>B.Quaternion.RotationAxis(n,y)),"FlowGraphQuaternionFromAxisAngleBlock",n)}}(0,h.h)("FlowGraphQuaternionFromAxisAngleBlock",p);class E extends o.c{constructor(n){super(n),this.a=this.registerDataInput("a",G.s),this.axis=this.registerDataOutput("axis",G.x),this.angle=this.registerDataOutput("angle",G.p),this.isValid=this.registerDataOutput("isValid",G.e)}_updateOutputs(n){const y=n._getExecutionVariable(this,U,-1),H=n._getExecutionVariable(this,b,null),o=n._getExecutionVariable(this,A,null);if(void 0!==H&&null!==H&&void 0!==o&&null!==o&&y===n.executionId)this.axis.setValue(H,n),this.angle.setValue(o,n);else try{const{axis:y,angle:H}=this.a.getValue(n).toAxisAngle();n._setExecutionVariable(this,b,y),n._setExecutionVariable(this,A,H),n._setExecutionVariable(this,U,n.executionId),this.axis.setValue(y,n),this.angle.setValue(H,n),this.isValid.setValue(!0,n)}catch(G){this.isValid.setValue(!1,n)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}(0,h.h)("FlowGraphAxisAngleFromQuaternionBlock",E);class X extends k.c{constructor(n){super(G.x,G.x,G.s,((n,y)=>(0,q.f)(n,y)),"FlowGraphQuaternionFromDirectionsBlock",n)}}},14585:(n,y,H)=>{H.d(y,{c:()=>G});var o=H(14592);class G extends o.b{constructor(n,y,H,o,G,h){super(H,h),this._operation=o,this._className=G,this.a=this.registerDataInput("a",n),this.b=this.registerDataInput("b",y)}_doOperation(n){const y=this.a.getValue(n),H=this.b.getValue(n);return this._operation(y,H)}getClassName(){return this._className}}},14592:(n,y,H)=>{H.d(y,{b:()=>i});var o=H(13146),G=H(13117);const h="cachedOperationValue",k="cachedExecutionId";class i extends o.c{constructor(n,y){super(y),this.value=this.registerDataOutput("value",n),this.isValid=this.registerDataOutput("isValid",G.e)}_updateOutputs(n){const y=n._getExecutionVariable(this,k,-1),H=n._getExecutionVariable(this,h,null);if(void 0!==H&&null!==H&&y===n.executionId)this.isValid.setValue(!0,n),this.value.setValue(H,n);else try{const y=this._doOperation(n);if(void 0===y||null===y)return void this.isValid.setValue(!1,n);n._setExecutionVariable(this,h,y),n._setExecutionVariable(this,k,n.executionId),this.value.setValue(y,n),this.isValid.setValue(!0,n)}catch(o){this.isValid.setValue(!1,n)}}}},14597:(n,y,H)=>{H.d(y,{b:()=>G});var o=H(14592);class G extends o.b{constructor(n,y,H,o,G){super(y,G),this._operation=H,this._className=o,this.a=this.registerDataInput("a",n)}_doOperation(n){return this._operation(this.a.getValue(n))}getClassName(){return this._className}}}}]);