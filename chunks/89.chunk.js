"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{14208:(h,d,m)=>{m.r(d),m.d(d,{FlowGraphConsoleLogBlock:()=>a});var j=m(12710),A=m(12671),b=m(11080),w=m(11121);class a extends j.d{constructor(h){if(super(h),this.message=this.registerDataInput("message",A.e),this.logType=this.registerDataInput("logType",A.e,"log"),null!==h&&void 0!==h&&h.messageTemplate){const d=this._getTemplateMatches(h.messageTemplate);for(const h of d)this.registerDataInput(h,A.e)}}_execute(h){const d=this.logType.getValue(h),m=this._getMessageValue(h);"warn"===d?w.c.Warn(m):"error"===d?w.c.Error(m):w.c.Log(m),this.out._activateSignal(h)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(h){var d;if(null!==(d=this.config)&&void 0!==d&&d.messageTemplate){let d=this.config.messageTemplate;const j=this._getTemplateMatches(d);for(const A of j){var m;const j=null===(m=this.getDataInput(A))||void 0===m?void 0:m.getValue(h);void 0!==j&&(d=d.replace(new RegExp(`\\{${A}\\}`,"g"),j.toString()))}return d}return this.message.getValue(h)}_getTemplateMatches(h){const d=/\{([^}]+)\}/g,m=[];let j;for(;null!==(j=d.exec(h));)m.push(j[1]);return m}}(0,b.i)("FlowGraphConsoleLogBlock",a)}}]);