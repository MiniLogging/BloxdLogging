"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{14464:(Z,c,L)=>{L.r(c),L.d(c,{FlowGraphConsoleLogBlock:()=>V});var k=L(12875),N=L(12825),R=L(11012),G=L(11052);class V extends k.e{constructor(Z){if(super(Z),this.message=this.registerDataInput("message",N.e),this.logType=this.registerDataInput("logType",N.e,"log"),null!==Z&&void 0!==Z&&Z.messageTemplate){const c=this._getTemplateMatches(Z.messageTemplate);for(const Z of c)this.registerDataInput(Z,N.e)}}_execute(Z){const c=this.logType.getValue(Z),L=this._getMessageValue(Z);"warn"===c?G.e.Warn(L):"error"===c?G.e.Error(L):G.e.Log(L),this.out._activateSignal(Z)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(Z){var c;if(null!==(c=this.config)&&void 0!==c&&c.messageTemplate){let c=this.config.messageTemplate;const k=this._getTemplateMatches(c);for(const N of k){var L;const k=null===(L=this.getDataInput(N))||void 0===L?void 0:L.getValue(Z);void 0!==k&&(c=c.replace(new RegExp(`\\{${N}\\}`,"g"),k.toString()))}return c}return this.message.getValue(Z)}_getTemplateMatches(Z){const c=/\{([^}]+)\}/g,L=[];let k;for(;null!==(k=c.exec(Z));)L.push(k[1]);return L}}(0,R.g)("FlowGraphConsoleLogBlock",V)}}]);