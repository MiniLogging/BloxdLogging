"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[89],{14169:(P,Q,O)=>{O.r(Q),O.d(Q,{FlowGraphSetPropertyBlock:()=>m});var b=O(12922),F=O(12871),g=O(696);class m extends b.b{constructor(P){super(P),this.config=P,this.object=this.registerDataInput("object",F.d,P.target),this.value=this.registerDataInput("value",F.d),this.propertyName=this.registerDataInput("propertyName",F.d,P.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",F.d)}_execute(P,Q){try{const Q=this.object.getValue(P),O=this.value.getValue(P),b=this.propertyName.getValue(P);this._stopRunningAnimations(P,Q,b);const F=this.customSetFunction.getValue(P);F?F(Q,b,O,P):this._setPropertyValue(Q,b,O)}catch(O){this._reportError(P,O)}this.out._activateSignal(P)}_stopRunningAnimations(P,Q,O){const b=P._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const F of b){const g=P.assetsContext.animationGroups.find((P=>P.uniqueId===F));if(g)for(const m of g.targetedAnimations)if(m.target===Q&&m.animation.targetProperty===O){g.stop(!0),g.dispose();const Q=b.indexOf(F);-1!==Q&&(b.splice(Q,1),P._setGlobalContextVariable("currentlyRunningAnimationGroups",b))}}}_setPropertyValue(P,Q,O){const b=Q.split(".");let F=P;for(let g=0;g<b.length-1;g++){const P=b[g];void 0===F[P]&&(F[P]={}),F=F[P]}F[b[b.length-1]]=O}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,g.f)("FlowGraphSetPropertyBlock",m)}}]);