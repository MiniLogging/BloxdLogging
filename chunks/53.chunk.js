"use strict";(self.ufnpnb83drd=self.ufnpnb83drd||[]).push([[53],{14871:(E,U,g)=>{g.r(U),g.d(U,{postprocessVertexShaderWGSL:()=>S});var N=g(12250);const L="postprocessVertexShader",D="attribute position: vec2<f32>;uniform scale: vec2<f32>;varying vUV: vec2<f32>;const madd=vec2(0.5,0.5);\n#define CUSTOM_VERTEX_DEFINITIONS\n@vertex\nfn main(input : VertexInputs)->FragmentInputs {\n#define CUSTOM_VERTEX_MAIN_BEGIN\nvertexOutputs.vUV=(vertexInputs.position*madd+madd)*uniforms.scale;vertexOutputs.position=vec4(vertexInputs.position,0.0,1.0);\n#define CUSTOM_VERTEX_MAIN_END\n}\n";N.e.ShadersStoreWGSL[L]||(N.e.ShadersStoreWGSL[L]=D);const S={name:L,shader:D}}}]);