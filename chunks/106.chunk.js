"use strict";(self["6xhfpmwgjr5"]=self["6xhfpmwgjr5"]||[]).push([[106],{16545:(P,a,R)=>{R.r(a),R.d(a,{FlowGraphSetDelayBlock:()=>l});var S,A=R(14567),Z=R(14524),p=R(12232);!function(P){P[P.INIT=0]="INIT",P[P.STARTED=1]="STARTED",P[P.ENDED=2]="ENDED"}(S||(S={}));class j{constructor(P){this.onEachCountObservable=new p.b,this.onTimerAbortedObservable=new p.b,this.onTimerEndedObservable=new p.b,this.onStateChangedObservable=new p.b,this._observer=null,this._breakOnNextTick=!1,this._tick=P=>{const a=Date.now();this._timer=a-this._startTime;const R={startTime:this._startTime,currentTime:a,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,OR:P},S=this._breakOnNextTick||this._breakCondition(R);S||this._timer>=this._timeToEnd?this._stop(R,S):this.onEachCountObservable.notifyObservers(R)},this._setState(0),this._contextObservable=P.contextObservable,this._observableParameters=P.observableParameters??{},this._breakCondition=P.breakCondition??(()=>!1),this._timeToEnd=P.timeout,P.onEnded&&this.onTimerEndedObservable.add(P.onEnded),P.Th&&this.onEachCountObservable.add(P.Th),P.onAborted&&this.onTimerAbortedObservable.add(P.onAborted)}set breakCondition(P){this._breakCondition=P}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let P=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=P,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(P){this._state=P,this.onStateChangedObservable.notifyObservers(this._state)}_stop(P){let a=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),a?this.onTimerAbortedObservable.notifyObservers(P):this.onTimerEndedObservable.notifyObservers(P)}}var U=R(12248),Q=R(12376),h=R(14516);class l extends A.e{constructor(P){super(P),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",Z.p),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",Z.e,new h.c(-1))}_preparePendingTasks(P){const a=this.duration.getValue(P);if(a<0||isNaN(a)||!isFinite(a))return this._reportError(P,"Invalid duration in SetDelay block");if(P._getGlobalContextVariable("activeDelays",0)>=l.MaxParallelDelayCount)return this._reportError(P,"Max parallel delays reached");const R=P._getGlobalContextVariable("lastDelayIndex",-1),S=P._getExecutionVariable(this,"pendingDelays",[]),A=P.configuration.ya,Z=new j({timeout:1e3*a,contextObservable:A.onBeforeRenderObservable,onEnded:()=>this._onEnded(Z,P)});Z.start();const p=R+1;this.lastDelayIndex.setValue(new h.c(p),P),P._setGlobalContextVariable("lastDelayIndex",p),S[p]=Z,P._setExecutionVariable(this,"pendingDelays",S),this._updateGlobalTimers(P)}_cancelPendingTasks(P){const a=P._getExecutionVariable(this,"pendingDelays",[]);for(const R of a)null===R||void 0===R||R.dispose();P._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new h.c(-1),P),this._updateGlobalTimers(P)}_execute(P,a){a!==this.cancel?(this._preparePendingTasks(P),this.out._activateSignal(P)):this._cancelPendingTasks(P)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(P,a){const R=a._getExecutionVariable(this,"pendingDelays",[]),S=R.indexOf(P);-1!==S?R.splice(S,1):U.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),a._removePendingBlock(this),this.done._activateSignal(a),this._updateGlobalTimers(a)}_updateGlobalTimers(P){const a=P._getExecutionVariable(this,"pendingDelays",[]),R=P._getGlobalContextVariable("pendingDelays",[]);for(let S=0;S<a.length;S++){if(!a[S])continue;const P=a[S];R[S]&&R[S]!==P?U.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):R[S]=P}P._setGlobalContextVariable("pendingDelays",R)}}l.MaxParallelDelayCount=100,(0,Q.d)("FlowGraphSetDelayBlock",l)}}]);