"use strict";(self.yg1iw12lizp=self.yg1iw12lizp||[]).push([[106],{15958:(L,U,x)=>{x.r(U),x.d(U,{FlowGraphSwitchBlock:()=>a});var mL=x(14362),p=x(14348),G=x(12547),F=x(14379);class a extends mL.d{constructor(L){super(L),this.config=L,this.default=this._registerSignalOutput("default"),this._caseToOutputFlow=new Map,this.case=this.registerDataInput("case",p.c);const U=this.config.cases||[];for(const x of U)this._caseToOutputFlow.set(x,this._registerSignalOutput(`out_${x}`))}_execute(L,U){const x=this.case.getValue(L);let mL;mL=(0,F.u)(x)?this._getOutputFlowForCase((0,F.s)(x)):this._getOutputFlowForCase(x),mL?mL._activateSignal(L):this.default._activateSignal(L)}addCase(L){this.config.cases.includes(L)||(this.config.cases.push(L),this._caseToOutputFlow.set(L,this._registerSignalOutput(`out_${L}`)))}removeCase(L){if(!this.config.cases.includes(L))return;const U=this.config.cases.indexOf(L);this.config.cases.splice(U,1),this._caseToOutputFlow.delete(L)}_getOutputFlowForCase(L){return this._caseToOutputFlow.get(L)}getClassName(){return"FlowGraphSwitchBlock"}serialize(L){super.serialize(L),L.cases=this.config.cases}}(0,G.d)("FlowGraphSwitchBlock",a)}}]);