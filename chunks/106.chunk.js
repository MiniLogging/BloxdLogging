"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[106],{14564:(Z,x,F)=>{F.r(x),F.d(x,{FlowGraphSwitchBlock:()=>j});var u=F(12968),G=F(12954),f=F(11136),Y=F(12990);class j extends u.e{constructor(Z){super(Z),this.config=Z,this.default=this._registerSignalOutput("default"),this._caseToOutputFlow=new Map,this.case=this.registerDataInput("case",G.d);const x=this.config.cases||[];for(const F of x)this._caseToOutputFlow.set(F,this._registerSignalOutput(`out_${F}`))}_execute(Z,x){const F=this.case.getValue(Z);let u;u=(0,Y.w)(F)?this._getOutputFlowForCase((0,Y.u)(F)):this._getOutputFlowForCase(F),u?u._activateSignal(Z):this.default._activateSignal(Z)}addCase(Z){this.config.cases.includes(Z)||(this.config.cases.push(Z),this._caseToOutputFlow.set(Z,this._registerSignalOutput(`out_${Z}`)))}removeCase(Z){if(!this.config.cases.includes(Z))return;const x=this.config.cases.indexOf(Z);this.config.cases.splice(x,1),this._caseToOutputFlow.delete(Z)}_getOutputFlowForCase(Z){return this._caseToOutputFlow.get(Z)}getClassName(){return"FlowGraphSwitchBlock"}serialize(Z){super.serialize(Z),Z.cases=this.config.cases}}(0,f.g)("FlowGraphSwitchBlock",j)}}]);