"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[106],{14500:(B,I,C)=>{C.r(I),C.d(I,{FlowGraphSwitchBlock:()=>L});var M=C(12923),x=C(12901),y=C(11149),f=C(12939);class L extends M.b{constructor(B){super(B),this.config=B,this.default=this._registerSignalOutput("default"),this._caseToOutputFlow=new Map,this.case=this.registerDataInput("case",x.b);const I=this.config.cases||[];for(const C of I)this._caseToOutputFlow.set(C,this._registerSignalOutput(`out_${C}`))}_execute(B,I){const C=this.case.getValue(B);let M;M=(0,f.t)(C)?this._getOutputFlowForCase((0,f.s)(C)):this._getOutputFlowForCase(C),M?M._activateSignal(B):this.default._activateSignal(B)}addCase(B){this.config.cases.includes(B)||(this.config.cases.push(B),this._caseToOutputFlow.set(B,this._registerSignalOutput(`out_${B}`)))}removeCase(B){if(!this.config.cases.includes(B))return;const I=this.config.cases.indexOf(B);this.config.cases.splice(I,1),this._caseToOutputFlow.delete(B)}_getOutputFlowForCase(B){return this._caseToOutputFlow.get(B)}getClassName(){return"FlowGraphSwitchBlock"}serialize(B){super.serialize(B),B.cases=this.config.cases}}(0,y.h)("FlowGraphSwitchBlock",L)}}]);