"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[106],{14503:(P,f,Y)=>{Y.r(f),Y.d(f,{FlowGraphSwitchBlock:()=>o});var C=Y(12939),q=Y(12917),m=Y(11134),L=Y(12960);class o extends C.d{constructor(P){super(P),this.config=P,this.default=this._registerSignalOutput("default"),this._caseToOutputFlow=new Map,this.case=this.registerDataInput("case",q.d);const f=this.config.cases||[];for(const Y of f)this._caseToOutputFlow.set(Y,this._registerSignalOutput(`out_${Y}`))}_execute(P,f){const Y=this.case.getValue(P);let C;C=(0,L.p)(Y)?this._getOutputFlowForCase((0,L.o)(Y)):this._getOutputFlowForCase(Y),C?C._activateSignal(P):this.default._activateSignal(P)}addCase(P){this.config.cases.includes(P)||(this.config.cases.push(P),this._caseToOutputFlow.set(P,this._registerSignalOutput(`out_${P}`)))}removeCase(P){if(!this.config.cases.includes(P))return;const f=this.config.cases.indexOf(P);this.config.cases.splice(f,1),this._caseToOutputFlow.delete(P)}_getOutputFlowForCase(P){return this._caseToOutputFlow.get(P)}getClassName(){return"FlowGraphSwitchBlock"}serialize(P){super.serialize(P),P.cases=this.config.cases}}(0,m.d)("FlowGraphSwitchBlock",o)}}]);