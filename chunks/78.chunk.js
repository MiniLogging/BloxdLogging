"use strict";(self.z22hkk7o33f=self.z22hkk7o33f||[]).push([[78],{15600:(U,G,C)=>{C.r(G),C.d(G,{AnimationGroup:()=>x,TargetedAnimation:()=>H});var L=C(13392),X=C(12721),l=C(12763),t=C(12930),E=C(14054),K=C(12896);class P{get currentFrame(){return this._currentFrame}get weight(){return this._weight}get currentValue(){return this._currentValue}get targetPath(){return this._targetPath}get target(){return this._currentActiveTarget}get isAdditive(){return this._host&&this._host.isAdditive}constructor(U,G,C,X){if(this._events=new Array,this._currentFrame=0,this._originalValue=new Array,this._originalBlendValue=null,this._offsetsCache={},this._highLimitsCache={},this._stopped=!1,this._blendingFactor=0,this._currentValue=null,this._currentActiveTarget=null,this._directTarget=null,this._targetPath="",this._weight=1,this._absoluteFrameOffset=0,this._previousElapsedTime=0,this._yoyoDirection=1,this._previousAbsoluteFrame=0,this._targetIsArray=!1,this._coreRuntimeAnimation=null,this._animation=G,this._target=U,this._scene=C,this._host=X,this._activeTargets=[],G._runtimeAnimations.push(this),this._animationState={key:0,repeatCount:0,loopMode:this._getCorrectLoopMode()},this._animation.dataType===L.d.ANIMATIONTYPE_MATRIX&&(this._animationState.workValue=K.Matrix.Zero()),this._keys=this._animation.getKeys(),this._minFrame=this._keys[0].frame,this._maxFrame=this._keys[this._keys.length-1].frame,this._minValue=this._keys[0].value,this._maxValue=this._keys[this._keys.length-1].value,0!==this._minFrame){const U={frame:0,value:this._minValue};this._keys.splice(0,0,U)}if(this._target instanceof Array){let U=0;for(const G of this._target)this._preparePath(G,U),this._getOriginalValues(U),U++;this._targetIsArray=!0}else this._preparePath(this._target),this._getOriginalValues(),this._targetIsArray=!1,this._directTarget=this._activeTargets[0];const l=G.getEvents();if(l&&l.length>0)for(const L of l)this._events.push(L._clone());this._enableBlending=U&&U.animationPropertiesOverride?U.animationPropertiesOverride.enableBlending:this._animation.enableBlending}_preparePath(U){let G=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const C=this._animation.targetPropertyPath;if(C.length>1){let L=U;for(let U=0;U<C.length-1;U++){const G=C[U];if(L=L[G],void 0===L)throw new Error("Invalid property (".concat(G,") in property path (").concat(C.join("."),")"))}this._targetPath=C[C.length-1],this._activeTargets[G]=L}else this._targetPath=C[0],this._activeTargets[G]=U;if(void 0===this._activeTargets[G][this._targetPath])throw new Error("Invalid property (".concat(this._targetPath,") in property path (").concat(C.join("."),")"))}get animation(){return this._animation}reset(){if(arguments.length>0&&void 0!==arguments[0]&&arguments[0])if(this._target instanceof Array){let U=0;for(const G of this._target)void 0!==this._originalValue[U]&&this._setValue(G,this._activeTargets[U],this._originalValue[U],-1,U),U++}else void 0!==this._originalValue[0]&&this._setValue(this._target,this._directTarget,this._originalValue[0],-1,0);this._offsetsCache={},this._highLimitsCache={},this._currentFrame=0,this._blendingFactor=0;for(let U=0;U<this._events.length;U++)this._events[U].isDone=!1}isStopped(){return this._stopped}dispose(){const U=this._animation.runtimeAnimations.indexOf(this);U>-1&&this._animation.runtimeAnimations.splice(U,1)}setValue(U,G){if(this._targetIsArray)for(let C=0;C<this._target.length;C++){const L=this._target[C];this._setValue(L,this._activeTargets[C],U,G,C)}else this._setValue(this._target,this._directTarget,U,G,0)}_getOriginalValues(){let U,G=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;const C=this._activeTargets[G];U=C.getLocalMatrix&&"_matrix"===this._targetPath?C.getLocalMatrix():C[this._targetPath],U&&U.clone?this._originalValue[G]=U.clone():this._originalValue[G]=U}_registerTargetForLateAnimationBinding(U,G){const C=U.target;this._scene._registeredForLateAnimationBindings.pushNoDuplicate(C),C._lateAnimationHolders||(C._lateAnimationHolders={}),C._lateAnimationHolders[U.targetPath]||(C._lateAnimationHolders[U.targetPath]={totalWeight:0,totalAdditiveWeight:0,animations:[],additiveAnimations:[],originalValue:G}),U.isAdditive?(C._lateAnimationHolders[U.targetPath].additiveAnimations.push(U),C._lateAnimationHolders[U.targetPath].totalAdditiveWeight+=U.weight):(C._lateAnimationHolders[U.targetPath].animations.push(U),C._lateAnimationHolders[U.targetPath].totalWeight+=U.weight)}_setValue(U,G,C,X,l){if(this._currentActiveTarget=G,this._weight=X,this._enableBlending&&this._blendingFactor<=1){if(!this._originalBlendValue){const U=G[this._targetPath];U.clone?this._originalBlendValue=U.clone():this._originalBlendValue=U}this._originalBlendValue.m?L.d.AllowMatrixDecomposeForInterpolation?this._currentValue?K.Matrix.DecomposeLerpToRef(this._originalBlendValue,C,this._blendingFactor,this._currentValue):this._currentValue=K.Matrix.DecomposeLerp(this._originalBlendValue,C,this._blendingFactor):this._currentValue?K.Matrix.LerpToRef(this._originalBlendValue,C,this._blendingFactor,this._currentValue):this._currentValue=K.Matrix.Lerp(this._originalBlendValue,C,this._blendingFactor):this._currentValue=L.d._UniversalLerp(this._originalBlendValue,C,this._blendingFactor);const X=U&&U.animationPropertiesOverride?U.animationPropertiesOverride.blendingSpeed:this._animation.blendingSpeed;this._blendingFactor+=X}else this._currentValue?this._currentValue.L?this._currentValue.L(C):this._currentValue=C:null!==C&&void 0!==C&&C.clone?this._currentValue=C.clone():this._currentValue=C;-1!==X?this._registerTargetForLateAnimationBinding(this,this._originalValue[l]):this._animationState.loopMode===L.d.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT?this._currentValue.addToRef?this._currentValue.addToRef(this._originalValue[l],G[this._targetPath]):G[this._targetPath]=this._originalValue[l]+this._currentValue:G[this._targetPath]=this._currentValue,U.IO&&U.IO(this._animation.targetProperty)}_getCorrectLoopMode(){return this._target&&this._target.animationPropertiesOverride?this._target.animationPropertiesOverride.loopMode:this._animation.loopMode}goToFrame(U){let G=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const C=this._animation.getKeys();U<C[0].frame?U=C[0].frame:U>C[C.length-1].frame&&(U=C[C.length-1].frame);const L=this._events;if(L.length)for(let l=0;l<L.length;l++)L[l].onlyOnce||(L[l].isDone=L[l].frame<U);this._currentFrame=U;const X=this._animation._interpolate(U,this._animationState);this.setValue(X,G)}_prepareForSpeedRatioChange(U){const G=this._previousElapsedTime*(this._animation.framePerSecond*U)/1e3;this._absoluteFrameOffset=this._previousAbsoluteFrame-G}animate(U,G,C,X,l){let t=arguments.length>5&&void 0!==arguments[5]?arguments[5]:-1;const E=this._animation,K=E.targetPropertyPath;if(!K||K.length<1)return this._stopped=!0,!1;let P,O=!0;const T=this._events;let D=0;if(this._coreRuntimeAnimation)D=C-G,P=this._coreRuntimeAnimation.currentFrame,this._currentFrame=P,this._animationState.repeatCount=this._coreRuntimeAnimation._animationState.repeatCount,this._animationState.highLimitValue=this._coreRuntimeAnimation._animationState.highLimitValue,this._animationState.offsetValue=this._coreRuntimeAnimation._animationState.offsetValue;else{let t;(G<this._minFrame||G>this._maxFrame)&&(G=this._minFrame),(C<this._minFrame||C>this._maxFrame)&&(C=this._maxFrame),D=C-G;let K=U*(E.framePerSecond*l)/1e3+this._absoluteFrameOffset,y=0,V=!1;const p=X&&this._animationState.loopMode===L.d.ANIMATIONLOOPMODE_YOYO;if(p){const U=(K-G)/D,C=Math.sin(U*Math.PI);K=Math.abs(C)*D+G;const L=C>=0?1:-1;this._yoyoDirection!==L&&(V=!0),this._yoyoDirection=L}if(this._previousElapsedTime=U,this._previousAbsoluteFrame=K,!X&&C>=G&&(K>=D&&l>0||K<=0&&l<0))O=!1,y=E._getKeyValue(this._maxValue);else if(!X&&G>=C&&(K<=D&&l<0||K>=0&&l>0))O=!1,y=E._getKeyValue(this._minValue);else if(this._animationState.loopMode!==L.d.ANIMATIONLOOPMODE_CYCLE){const U=C.toString()+G.toString();if(!this._offsetsCache[U]){this._animationState.repeatCount=0,this._animationState.loopMode=L.d.ANIMATIONLOOPMODE_CYCLE;const X=E._interpolate(G,this._animationState),l=E._interpolate(C,this._animationState);switch(this._animationState.loopMode=this._getCorrectLoopMode(),E.dataType){case L.d.ANIMATIONTYPE_FLOAT:this._offsetsCache[U]=l-X;break;case L.d.ANIMATIONTYPE_QUATERNION:case L.d.ANIMATIONTYPE_VECTOR3:case L.d.ANIMATIONTYPE_VECTOR2:case L.d.ANIMATIONTYPE_SIZE:case L.d.ANIMATIONTYPE_COLOR3:this._offsetsCache[U]=l.IG(X)}this._highLimitsCache[U]=l}y=this._highLimitsCache[U],t=this._offsetsCache[U]}if(void 0===t)switch(E.dataType){case L.d.ANIMATIONTYPE_FLOAT:t=0;break;case L.d.ANIMATIONTYPE_QUATERNION:t=L.j;break;case L.d.ANIMATIONTYPE_VECTOR3:t=L.s;break;case L.d.ANIMATIONTYPE_VECTOR2:t=L.p;break;case L.d.ANIMATIONTYPE_SIZE:t=L.m;break;case L.d.ANIMATIONTYPE_COLOR3:t=L.e;break;case L.d.ANIMATIONTYPE_COLOR4:t=L.g}if(this._host&&this._host.syncRoot){const U=this._host.syncRoot;P=G+D*((U.masterFrame-U.fromFrame)/(U.toFrame-U.fromFrame))}else P=K>0&&G>C||K<0&&G<C?O&&0!==D?C+K%D:G:O&&0!==D?G+K%D:C;if(!p&&(l>0&&this.currentFrame>P||l<0&&this.currentFrame<P)||p&&V){this._onLoop();for(let U=0;U<T.length;U++)T[U].onlyOnce||(T[U].isDone=!1);this._animationState.key=l>0?0:E.getKeys().length-1}this._currentFrame=P,this._animationState.repeatCount=0===D?0:K/D|0,this._animationState.highLimitValue=y,this._animationState.offsetValue=t}const y=E._interpolate(P,this._animationState);if(this.setValue(y,t),T.length)for(let L=0;L<T.length;L++)if(D>=0&&P>=T[L].frame&&T[L].frame>=G||D<0&&P<=T[L].frame&&T[L].frame<=G){const U=T[L];U.isDone||(U.onlyOnce&&(T.splice(L,1),L--),U.isDone=!0,U.action(P))}return O||(this._stopped=!0),O}}var O=C(12739);class T{get syncRoot(){return this._syncRoot}get masterFrame(){return 0===this._runtimeAnimations.length?0:this._runtimeAnimations[0].currentFrame}get weight(){return this._weight}set weight(U){this._weight=-1!==U?Math.min(Math.max(U,0),1):-1}get speedRatio(){return this._speedRatio}set speedRatio(U){for(let G=0;G<this._runtimeAnimations.length;G++){this._runtimeAnimations[G]._prepareForSpeedRatioChange(U)}this._speedRatio=U,null!==this._goToFrame&&this.goToFrame(this._goToFrame)}get elapsedTime(){return null===this._localDelayOffset?0:this._scene._animationTime-this._localDelayOffset}constructor(U,G){let C=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,L=arguments.length>3&&void 0!==arguments[3]?arguments[3]:100,l=arguments.length>4&&void 0!==arguments[4]&&arguments[4],t=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,E=arguments.length>6?arguments[6]:void 0,K=arguments.length>7?arguments[7]:void 0,P=arguments.length>8?arguments[8]:void 0,O=arguments.length>9&&void 0!==arguments[9]&&arguments[9],T=arguments.length>10&&void 0!==arguments[10]?arguments[10]:0;this.target=G,this.fromFrame=C,this.toFrame=L,this.loopAnimation=l,this.onAnimationEnd=E,this.onAnimationLoop=P,this.isAdditive=O,this.playOrder=T,this._localDelayOffset=null,this._pausedDelay=null,this._manualJumpDelay=null,this._runtimeAnimations=new Array,this.uE=!1,this._speedRatio=1,this._weight=-1,this._previousWeight=-1,this._syncRoot=null,this._frameToSyncFromJump=null,this._goToFrame=null,this.disposeOnEnd=!0,this.animationStarted=!1,this.onAnimationEndObservable=new X.e,this.onAnimationLoopObservable=new X.e,this._scene=U,K&&this.appendAnimations(G,K),this._speedRatio=t,U._activeAnimatables.push(this)}syncWith(U){if(this._syncRoot=U,U){const U=this._scene._activeAnimatables.indexOf(this);U>-1&&(this._scene._activeAnimatables.splice(U,1),this._scene._activeAnimatables.push(this))}return this}getAnimations(){return this._runtimeAnimations}appendAnimations(U,G){for(let C=0;C<G.length;C++){const L=G[C],X=new P(U,L,this._scene,this);X._onLoop=()=>{this.onAnimationLoopObservable.notifyObservers(this),this.onAnimationLoop&&this.onAnimationLoop()},this._runtimeAnimations.push(X)}}getAnimationByTargetProperty(U){const G=this._runtimeAnimations;for(let C=0;C<G.length;C++)if(G[C].animation.targetProperty===U)return G[C].animation;return null}getRuntimeAnimationByTargetProperty(U){const G=this._runtimeAnimations;for(let C=0;C<G.length;C++)if(G[C].animation.targetProperty===U)return G[C];return null}reset(){const U=this._runtimeAnimations;for(let G=0;G<U.length;G++)U[G].reset(!0);this._localDelayOffset=null,this._pausedDelay=null}enableBlending(U){const G=this._runtimeAnimations;for(let C=0;C<G.length;C++)G[C].animation.enableBlending=!0,G[C].animation.blendingSpeed=U}disableBlending(){const U=this._runtimeAnimations;for(let G=0;G<U.length;G++)U[G].animation.enableBlending=!1}goToFrame(U){let G=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const C=this._runtimeAnimations;if(C[0]){var L;const G=C[0].animation.framePerSecond;this._frameToSyncFromJump=null!==(L=this._frameToSyncFromJump)&&void 0!==L?L:C[0].currentFrame;const X=0===this.speedRatio?0:(U-this._frameToSyncFromJump)/G*1e3/this.speedRatio;this._manualJumpDelay=-X}for(let X=0;X<C.length;X++)C[X].goToFrame(U,G?this._weight:-1);this._goToFrame=U}get paused(){return this.uE}pause(){this.uE||(this.uE=!0)}restart(){this.uE=!1}_raiseOnAnimationEnd(){this.onAnimationEnd&&this.onAnimationEnd(),this.onAnimationEndObservable.notifyObservers(this)}stop(U,G){let C=arguments.length>2&&void 0!==arguments[2]&&arguments[2],L=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(U||G){const X=this._scene._activeAnimatables.indexOf(this);if(X>-1){const l=this._runtimeAnimations;for(let C=l.length-1;C>=0;C--){const L=l[C];U&&L.animation.name!=U||(G&&!G(L.target)||(L.dispose(),l.splice(C,1)))}0==l.length&&(C||this._scene._activeAnimatables.splice(X,1),L||this._raiseOnAnimationEnd())}}else{const U=this._scene._activeAnimatables.indexOf(this);if(U>-1){C||this._scene._activeAnimatables.splice(U,1);const G=this._runtimeAnimations;for(let U=0;U<G.length;U++)G[U].dispose();this._runtimeAnimations.length=0,L||this._raiseOnAnimationEnd()}}}async waitAsync(){return await new Promise((U=>{this.onAnimationEndObservable.add((()=>{U(this)}),void 0,void 0,this,!0)}))}_animate(U){if(this.uE)return this.animationStarted=!1,null===this._pausedDelay&&(this._pausedDelay=U),!0;if(null===this._localDelayOffset?(this._localDelayOffset=U,this._pausedDelay=null):null!==this._pausedDelay&&(this._localDelayOffset+=U-this._pausedDelay,this._pausedDelay=null),null!==this._manualJumpDelay&&(this._localDelayOffset+=this.speedRatio<0?-this._manualJumpDelay:this._manualJumpDelay,this._manualJumpDelay=null,this._frameToSyncFromJump=null),this._goToFrame=null,0===this._weight&&0===this._previousWeight)return!0;this._previousWeight=this._weight;let G=!1;const C=this._runtimeAnimations;let L;for(L=0;L<C.length;L++){const X=C[L].animate(U-this._localDelayOffset,this.fromFrame,this.toFrame,this.loopAnimation,this._speedRatio,this._weight);G=G||X}if(this.animationStarted=G,!G){if(this.disposeOnEnd)for(L=this._scene._activeAnimatables.indexOf(this),this._scene._activeAnimatables.splice(L,1),L=0;L<C.length;L++)C[L].dispose();this._raiseOnAnimationEnd(),this.disposeOnEnd&&(this.onAnimationEnd=null,this.onAnimationLoop=null,this.onAnimationLoopObservable.clear(),this.onAnimationEndObservable.clear())}return G}}function D(U){if(0===U.totalWeight&&0===U.totalAdditiveWeight)return U.originalValue;let G=1;const C=K.TmpVectors.pG[0],L=K.TmpVectors.pG[1],X=K.TmpVectors.Quaternion[0];let l=0;const t=U.animations[0],E=U.originalValue;let P=1,O=!1;if(U.totalWeight<1)P=1-U.totalWeight,E.decompose(L,X,C);else{if(l=1,G=U.totalWeight,P=t.weight/G,1==P){if(!U.totalAdditiveWeight)return t.currentValue;O=!0}t.currentValue.decompose(L,X,C)}if(!O){L.scaleInPlace(P),C.scaleInPlace(P),X.scaleInPlace(P);for(let t=l;t<U.animations.length;t++){const l=U.animations[t];if(0===l.weight)continue;P=l.weight/G;const E=K.TmpVectors.pG[2],O=K.TmpVectors.pG[3],T=K.TmpVectors.Quaternion[1];l.currentValue.decompose(O,T,E),O.scaleAndAddToRef(P,L),T.scaleAndAddToRef(K.Quaternion.Dot(X,T)>0?P:-P,X),E.scaleAndAddToRef(P,C)}X.normalize()}for(let D=0;D<U.additiveAnimations.length;D++){const G=U.additiveAnimations[D];if(0===G.weight)continue;const l=K.TmpVectors.pG[2],t=K.TmpVectors.pG[3],E=K.TmpVectors.Quaternion[1];G.currentValue.decompose(t,E,l),t.multiplyToRef(L,t),K.pG.LerpToRef(L,t,G.weight,L),X.multiplyToRef(E,E),K.Quaternion.SlerpToRef(X,E,G.weight,X),l.scaleAndAddToRef(G.weight,C)}const T=t?t._animationState.workValue:K.TmpVectors.Matrix[0].clone();return K.Matrix.ComposeToRef(L,X,C,T),T}function y(U,G){if(0===U.totalWeight&&0===U.totalAdditiveWeight)return G;const C=U.animations[0],L=U.originalValue;let X=G;if(0===U.totalWeight&&U.totalAdditiveWeight>0)X.L(L);else if(1===U.animations.length){if(K.Quaternion.SlerpToRef(L,C.currentValue,Math.min(1,U.totalWeight),X),0===U.totalAdditiveWeight)return X}else if(U.animations.length>1){let C,l,t=1;if(U.totalWeight<1){const G=1-U.totalWeight;C=[],l=[],C.push(L),l.push(G)}else{if(2===U.animations.length&&(K.Quaternion.SlerpToRef(U.animations[0].currentValue,U.animations[1].currentValue,U.animations[1].weight/U.totalWeight,G),0===U.totalAdditiveWeight))return G;C=[],l=[],t=U.totalWeight}for(let G=0;G<U.animations.length;G++){const L=U.animations[G];C.push(L.currentValue),l.push(L.weight/t)}let E=0;for(let U=0;U<C.length;)U?(E+=l[U],K.Quaternion.SlerpToRef(X,C[U],l[U]/E,X),U++):(K.Quaternion.SlerpToRef(C[U],C[U+1],l[U+1]/(l[U]+l[U+1]),G),X=G,E=l[U]+l[U+1],U+=2)}for(let l=0;l<U.additiveAnimations.length;l++){const G=U.additiveAnimations[l];0!==G.weight&&(X.multiplyToRef(G.currentValue,K.TmpVectors.Quaternion[0]),K.Quaternion.SlerpToRef(X,K.TmpVectors.Quaternion[0],G.weight,X))}return X}var V,p,I=C(13097);V=I.e,(p=E.d)&&(p.prototype.copyAnimationRange=function(U,G,C){let X=arguments.length>3&&void 0!==arguments[3]&&arguments[3],l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;0===this.animations.length&&(this.animations.push(new L.d(this.name,"_matrix",U.animations[0].framePerSecond,L.d.ANIMATIONTYPE_MATRIX,0)),this.animations[0].setKeys([]));const t=U.animations[0].getRange(G);if(!t)return!1;const E=t.from,K=t.to,P=U.animations[0].getKeys(),O=U.length,T=U.getParent(),D=this.getParent(),y=X&&T&&O&&this.length&&O!==this.length,V=y&&D&&T?D.length/T.length:1,p=X&&!D&&l&&(1!==l.x||1!==l.y||1!==l.z),I=this.animations[0].getKeys();let H,x,h;for(let L=0,N=P.length;L<N;L++)H=P[L],H.frame>=E&&H.frame<=K&&(X?(h=H.value.clone(),y?(x=h.getTranslation(),h.setTranslation(x.scaleInPlace(V))):p&&l?(x=h.getTranslation(),h.setTranslation(x.multiplyInPlace(l))):h=H.value):h=H.value,I.push({frame:H.frame+C,value:h}));return this.animations[0].createRange(G,E+C,K+C),!0}),V&&(V.prototype._animate=function(U){if(!this.animationsEnabled)return;const G=O.d.Now;if(!this._animationTimeLast){if(this._pendingData.length>0)return;this._animationTimeLast=G}this.deltaTime=void 0!==U?U:this.useConstantAnimationDeltaTime?16:(G-this._animationTimeLast)*this.animationTimeScale,this._animationTimeLast=G;const C=this._activeAnimatables;if(0===C.length)return;this._animationTime+=this.deltaTime;const X=this._animationTime;for(let L=0;L<C.length;L++){const U=C[L];!U._animate(X)&&U.disposeOnEnd&&L--}!function(U){if(U._registeredForLateAnimationBindings.length){for(let G=0;G<U._registeredForLateAnimationBindings.length;G++){const C=U._registeredForLateAnimationBindings.data[G];for(const U in C._lateAnimationHolders){const G=C._lateAnimationHolders[U],X=G.animations[0],l=G.originalValue;if(void 0===l||null===l)continue;const t=L.d.AllowMatrixDecomposeForInterpolation&&l.m;let E=C[U];if(t)E=D(G);else if(void 0!==l.w)E=y(G,E||K.Quaternion.Identity());else{let U=0,C=1;const t=X&&X._animationState.loopMode===L.d.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT;if(G.totalWeight<1)E=t?l.clone?l.clone():l:X&&l.scale?l.scale(1-G.totalWeight):X?l*(1-G.totalWeight):l.clone?l.clone():l;else if(X){C=G.totalWeight;const L=X.weight/C;E=1!==L?X.currentValue.scale?X.currentValue.scale(L):X.currentValue*L:X.currentValue,t&&(E.addToRef?E.addToRef(l,E):E+=l),U=1}for(let L=U;L<G.animations.length;L++){const U=G.animations[L],X=U.weight/C;X&&(U.currentValue.scaleAndAddToRef?U.currentValue.scaleAndAddToRef(X,E):E+=U.currentValue*X)}for(let L=0;L<G.additiveAnimations.length;L++){const U=G.additiveAnimations[L],C=U.weight;C&&(U.currentValue.scaleAndAddToRef?U.currentValue.scaleAndAddToRef(C,E):E+=U.currentValue*C)}}C[U]=E}C._lateAnimationHolders={}}U._registeredForLateAnimationBindings.reset()}}(this)},V.prototype.sortActiveAnimatables=function(){this._activeAnimatables.sort(((U,G)=>U.playOrder-G.playOrder))},V.prototype.beginWeightedAnimation=function(U,G,C){let L=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,X=arguments.length>4?arguments[4]:void 0,l=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,t=arguments.length>6?arguments[6]:void 0,E=arguments.length>7?arguments[7]:void 0,K=arguments.length>8?arguments[8]:void 0,P=arguments.length>9?arguments[9]:void 0,O=arguments.length>10&&void 0!==arguments[10]&&arguments[10];const T=this.beginAnimation(U,G,C,X,l,t,E,!1,K,P,O);return T.weight=L,T},V.prototype.beginAnimation=function(U,G,C,L){let X=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,l=arguments.length>5?arguments[5]:void 0,t=arguments.length>6?arguments[6]:void 0,E=!(arguments.length>7&&void 0!==arguments[7])||arguments[7],K=arguments.length>8?arguments[8]:void 0,P=arguments.length>9?arguments[9]:void 0,O=arguments.length>10&&void 0!==arguments[10]&&arguments[10];if(X<0){const U=G;G=C,C=U,X=-X}G>C&&(X=-X),E&&this.stopAnimation(U,void 0,K),t||(t=new T(this,U,G,C,L,X,l,void 0,P,O));const D=!K||K(U);if(U.animations&&D&&t.appendAnimations(U,U.animations),U.getAnimatables){const O=U.getAnimatables();for(let U=0;U<O.length;U++)this.beginAnimation(O[U],G,C,L,X,l,t,E,K,P)}return t.reset(),t},V.prototype.beginHierarchyAnimation=function(U,G,C,L,X){let l=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,t=arguments.length>6?arguments[6]:void 0,E=arguments.length>7?arguments[7]:void 0,K=!(arguments.length>8&&void 0!==arguments[8])||arguments[8],P=arguments.length>9?arguments[9]:void 0,O=arguments.length>11&&void 0!==arguments[11]&&arguments[11];const T=U.getDescendants(G),D=[];D.push(this.beginAnimation(U,C,L,X,l,t,E,K,P,void 0,O));for(const y of T)D.push(this.beginAnimation(y,C,L,X,l,t,E,K,P,void 0,O));return D},V.prototype.beginDirectAnimation=function(U,G,C,L,X){let l=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1;if(l<0){const U=C;C=L,L=U,l=-l}return C>L&&(l=-l),new T(this,U,C,L,X,l,arguments.length>6?arguments[6]:void 0,G,arguments.length>7?arguments[7]:void 0,arguments.length>8&&void 0!==arguments[8]&&arguments[8])},V.prototype.beginDirectHierarchyAnimation=function(U,G,C,L,X,l,t,E,K){let P=arguments.length>9&&void 0!==arguments[9]&&arguments[9];const O=U.getDescendants(G),T=[];T.push(this.beginDirectAnimation(U,C,L,X,l,t,E,K,P));for(const D of O)T.push(this.beginDirectAnimation(D,C,L,X,l,t,E,K,P));return T},V.prototype.getAnimatableByTarget=function(U){for(let G=0;G<this._activeAnimatables.length;G++)if(this._activeAnimatables[G].target===U)return this._activeAnimatables[G];return null},V.prototype.getAllAnimatablesByTarget=function(U){const G=[];for(let C=0;C<this._activeAnimatables.length;C++)this._activeAnimatables[C].target===U&&G.push(this._activeAnimatables[C]);return G},V.prototype.stopAnimation=function(U,G,C){const L=this.getAllAnimatablesByTarget(U);for(const X of L)X.stop(G,C)},V.prototype.stopAllAnimations=function(){if(this._activeAnimatables){for(let U=0;U<this._activeAnimatables.length;U++)this._activeAnimatables[U].stop(void 0,void 0,!0);this._activeAnimatables.length=0}for(const U of this.animationGroups)U.stop()});class H{getClassName(){return"TargetedAnimation"}serialize(){const U={};return U.animation=this.animation.serialize(),U.targetId=this.target.id,U}}class x{get mask(){return this._mask}set mask(U){this._mask!==U&&(this._mask=U,this.syncWithMask(!0))}syncWithMask(){let U=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(this.mask||U){this._numActiveAnimatables=0;for(let U=0;U<this._animatables.length;++U){const G=this._animatables[U];!this.mask||this.mask.disabled||this.mask.retainsTarget(G.target.name)?(this._numActiveAnimatables++,G.paused&&G.restart()):G.paused||G.pause()}}else this._numActiveAnimatables=this._targetedAnimations.length}removeUnmaskedAnimations(){if(this.mask&&!this.mask.disabled){for(let U=0;U<this._animatables.length;++U){const G=this._animatables[U];this.mask.retainsTarget(G.target.name)||(G.stop(),this._animatables.splice(U,1),--U)}for(let U=0;U<this._targetedAnimations.length;U++){const G=this._targetedAnimations[U];this.mask.retainsTarget(G.target.name)||(this._targetedAnimations.splice(U,1),--U)}}}get from(){return this._from}set from(U){if(this._from!==U){this._from=U;for(let U=0;U<this._animatables.length;U++){this._animatables[U].fromFrame=this._from}}}get to(){return this._to}set to(U){if(this._to!==U){this._to=U;for(let U=0;U<this._animatables.length;U++){this._animatables[U].toFrame=this._to}}}get isStarted(){return this._isStarted}get isPlaying(){return this._isStarted&&!this._isPaused}get speedRatio(){return this._speedRatio}set speedRatio(U){if(this._speedRatio!==U){this._speedRatio=U;for(let U=0;U<this._animatables.length;U++){this._animatables[U].speedRatio=this._speedRatio}}}get loopAnimation(){return this._loopAnimation}set loopAnimation(U){if(this._loopAnimation!==U){this._loopAnimation=U;for(let U=0;U<this._animatables.length;U++){this._animatables[U].loopAnimation=this._loopAnimation}}}get isAdditive(){return this._isAdditive}set isAdditive(U){if(this._isAdditive!==U){this._isAdditive=U;for(let U=0;U<this._animatables.length;U++){this._animatables[U].isAdditive=this._isAdditive}}}get weight(){return this._weight}set weight(U){this._weight!==U&&(this._weight=U,this.setWeightForAllAnimatables(this._weight))}get targetedAnimations(){return this._targetedAnimations}get animatables(){return this._animatables}get children(){return this._targetedAnimations}get playOrder(){return this._playOrder}set playOrder(U){if(this._playOrder!==U&&(this._playOrder=U,this._animatables.length>0)){for(let U=0;U<this._animatables.length;U++)this._animatables[U].playOrder=this._playOrder;this._scene.sortActiveAnimatables()}}get enableBlending(){return this._enableBlending}set enableBlending(U){if(this._enableBlending!==U&&(this._enableBlending=U,null!==U))for(let G=0;G<this._targetedAnimations.length;++G)this._targetedAnimations[G].animation.enableBlending=U}get blendingSpeed(){return this._blendingSpeed}set blendingSpeed(U){if(this._blendingSpeed!==U&&(this._blendingSpeed=U,null!==U))for(let G=0;G<this._targetedAnimations.length;++G)this._targetedAnimations[G].animation.blendingSpeed=U}getLength(U,G){var C,L;U=null!==(C=U)&&void 0!==C?C:this._from;return((G=null!==(L=G)&&void 0!==L?L:this._to)-U)/(this.targetedAnimations[0].animation.framePerSecond*this._speedRatio)}static MergeAnimationGroups(U){var G;let C=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],L=arguments.length>2&&void 0!==arguments[2]&&arguments[2],X=arguments.length>3?arguments[3]:void 0;if(0===U.length)return null;X=null!==(G=X)&&void 0!==G?G:U[0].weight;let l=Number.MAX_VALUE,t=-Number.MAX_VALUE;if(L)for(const K of U)K.from<l&&(l=K.from),K.to>t&&(t=K.to);const E=new x(U[0].name+"_merged",U[0]._scene,X);for(const K of U){L&&K.normalize(l,t);for(const U of K.targetedAnimations)E.addTargetedAnimation(U.animation,U.target);C&&K.dispose()}return E}constructor(U){let G=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,C=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,L=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;this.name=U,this._targetedAnimations=new Array,this._animatables=new Array,this._from=Number.MAX_VALUE,this._to=-Number.MAX_VALUE,this._speedRatio=1,this._loopAnimation=!1,this._isAdditive=!1,this._weight=-1,this._playOrder=0,this._enableBlending=null,this._blendingSpeed=null,this._numActiveAnimatables=0,this._shouldStart=!0,this._parentContainer=null,this.onAnimationEndObservable=new X.e,this.onAnimationLoopObservable=new X.e,this.onAnimationGroupLoopObservable=new X.e,this.onAnimationGroupEndObservable=new X.e,this.onAnimationGroupPauseObservable=new X.e,this.onAnimationGroupPlayObservable=new X.e,this.metadata=null,this._mask=null,this._animationLoopFlags=[],this._scene=G||l.d.LastCreatedScene,this._weight=C,this._playOrder=L,this.uniqueId=this._scene.getUniqueId(),this._scene.addAnimationGroup(this)}addTargetedAnimation(U,G){const C=new H;C.animation=U,C.target=G;const L=U.getKeys();return this._from>L[0].frame&&(this._from=L[0].frame),this._to<L[L.length-1].frame&&(this._to=L[L.length-1].frame),null!==this._enableBlending&&(U.enableBlending=this._enableBlending),null!==this._blendingSpeed&&(U.blendingSpeed=this._blendingSpeed),this._targetedAnimations.push(C),this._shouldStart=!0,C}removeTargetedAnimation(U){for(let G=this._targetedAnimations.length-1;G>-1;G--){this._targetedAnimations[G].animation===U&&this._targetedAnimations.splice(G,1)}}normalize(){let U=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,G=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;null==U&&(U=this._from),null==G&&(G=this._to);for(let C=0;C<this._targetedAnimations.length;C++){const L=this._targetedAnimations[C].animation.getKeys(),X=L[0],l=L[L.length-1];if(X.frame>U){const G={frame:U,value:X.value,inTangent:X.inTangent,outTangent:X.outTangent,interpolation:X.interpolation};L.splice(0,0,G)}if(l.frame<G){const U={frame:G,value:l.value,inTangent:l.inTangent,outTangent:l.outTangent,interpolation:l.interpolation};L.push(U)}}return this._from=U,this._to=G,this}_processLoop(U,G,C){U.onAnimationLoop=()=>{this.onAnimationLoopObservable.notifyObservers(G),this._animationLoopFlags[C]||(this._animationLoopFlags[C]=!0,this._animationLoopCount++,this._animationLoopCount===this._numActiveAnimatables&&(this.onAnimationGroupLoopObservable.notifyObservers(this),this._animationLoopCount=0,this._animationLoopFlags.length=0))}}start(){let U=arguments.length>0&&void 0!==arguments[0]&&arguments[0],G=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,C=arguments.length>2?arguments[2]:void 0,L=arguments.length>3?arguments[3]:void 0,X=arguments.length>4?arguments[4]:void 0;if(this._isStarted||0===this._targetedAnimations.length)return this;this._loopAnimation=U,this._shouldStart=!1,this._animationLoopCount=0,this._animationLoopFlags.length=0;for(let l=0;l<this._targetedAnimations.length;l++){const t=this._targetedAnimations[l],E=this._scene.beginDirectAnimation(t.target,[t.animation],void 0!==C?C:this._from,void 0!==L?L:this._to,U,G,void 0,void 0,void 0!==X?X:this._isAdditive);E.weight=this._weight,E.playOrder=this._playOrder,E.onAnimationEnd=()=>{this.onAnimationEndObservable.notifyObservers(t),this._checkAnimationGroupEnded(E)},this._processLoop(E,t,l),this._animatables.push(E)}return this.syncWithMask(),this._scene.sortActiveAnimatables(),this._speedRatio=G,this._isStarted=!0,this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}pause(){if(!this._isStarted)return this;this._isPaused=!0;for(let U=0;U<this._animatables.length;U++){this._animatables[U].pause()}return this.onAnimationGroupPauseObservable.notifyObservers(this),this}play(U){return this.isStarted&&this._animatables.length&&!this._shouldStart?(void 0!==U&&(this.loopAnimation=U),this.restart()):(this.stop(),this.start(U,this._speedRatio)),this}reset(){if(!this._isStarted)return this.play(),this.goToFrame(0),this.stop(!0),this;for(let U=0;U<this._animatables.length;U++){this._animatables[U].reset()}return this}restart(){if(!this._isStarted)return this;for(let U=0;U<this._animatables.length;U++){this._animatables[U].restart()}return this.syncWithMask(),this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}stop(){let U=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this._isStarted)return this;const G=this._animatables.slice();for(let L=0;L<G.length;L++)G[L].stop(void 0,void 0,!0,U);let C=0;for(let L=0;L<this._scene._activeAnimatables.length;L++){const G=this._scene._activeAnimatables[L];G._runtimeAnimations.length>0?this._scene._activeAnimatables[C++]=G:U&&this._checkAnimationGroupEnded(G,U)}return this._scene._activeAnimatables.length=C,this._isStarted=!1,this}setWeightForAllAnimatables(U){for(let G=0;G<this._animatables.length;G++){this._animatables[G].weight=U}return this}syncAllAnimationsWith(U){for(let G=0;G<this._animatables.length;G++){this._animatables[G].syncWith(U)}return this}goToFrame(U){let G=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this._isStarted)return this;for(let C=0;C<this._animatables.length;C++){this._animatables[C].goToFrame(U,G)}return this}getCurrentFrame(){var U;return(null===(U=this.animatables[0])||void 0===U?void 0:U.masterFrame)||0}dispose(){this.isStarted&&this.stop(),this._targetedAnimations.length=0,this._animatables.length=0;const U=this._scene.animationGroups.indexOf(this);if(U>-1&&this._scene.animationGroups.splice(U,1),this._parentContainer){const U=this._parentContainer.animationGroups.indexOf(this);U>-1&&this._parentContainer.animationGroups.splice(U,1),this._parentContainer=null}this.onAnimationEndObservable.clear(),this.onAnimationGroupEndObservable.clear(),this.onAnimationGroupPauseObservable.clear(),this.onAnimationGroupPlayObservable.clear(),this.onAnimationLoopObservable.clear(),this.onAnimationGroupLoopObservable.clear()}_checkAnimationGroupEnded(U){let G=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const C=this._animatables.indexOf(U);C>-1&&this._animatables.splice(C,1),this._animatables.length===this._targetedAnimations.length-this._numActiveAnimatables&&(this._isStarted=!1,G||this.onAnimationGroupEndObservable.notifyObservers(this),this._animatables.length=0)}clone(U,G){let C=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const L=new x(U||this.name,this._scene,this._weight,this._playOrder);L._from=this.from,L._to=this.to,L._speedRatio=this.speedRatio,L._loopAnimation=this.loopAnimation,L._isAdditive=this.isAdditive,L._enableBlending=this.enableBlending,L._blendingSpeed=this.blendingSpeed,L.metadata=this.metadata,L.mask=this.mask;for(const X of this._targetedAnimations)L.addTargetedAnimation(C?X.animation.clone():X.animation,G?G(X.target):X.target);return L}serialize(){const U={};U.name=this.name,U.from=this.from,U.to=this.to,U.speedRatio=this.speedRatio,U.loopAnimation=this.loopAnimation,U.isAdditive=this.isAdditive,U.weight=this.weight,U.playOrder=this.playOrder,U.enableBlending=this.enableBlending,U.blendingSpeed=this.blendingSpeed,U.targetedAnimations=[];for(let G=0;G<this.targetedAnimations.length;G++){const C=this.targetedAnimations[G];U.targetedAnimations[G]=C.serialize()}return t.b&&t.b.HasTags(this)&&(U.tags=t.b.GetTags(this)),this.metadata&&(U.metadata=this.metadata),U}static Parse(U,G){const C=new x(U.name,G,U.weight,U.playOrder);for(let X=0;X<U.targetedAnimations.length;X++){const l=U.targetedAnimations[X],t=L.d.Parse(l.animation),E=l.targetId;if("influence"===l.animation.property){const U=G.getMorphTargetById(E);U&&C.addTargetedAnimation(t,U)}else{const U=G.getNodeById(E);null!=U&&C.addTargetedAnimation(t,U)}}return t.b&&t.b.AddTagsTo(C,U.tags),null!==U.from&&null!==U.to&&C.normalize(U.from,U.to),void 0!==U.speedRatio&&(C._speedRatio=U.speedRatio),void 0!==U.loopAnimation&&(C._loopAnimation=U.loopAnimation),void 0!==U.isAdditive&&(C._isAdditive=U.isAdditive),void 0!==U.weight&&(C._weight=U.weight),void 0!==U.playOrder&&(C._playOrder=U.playOrder),void 0!==U.enableBlending&&(C._enableBlending=U.enableBlending),void 0!==U.blendingSpeed&&(C._blendingSpeed=U.blendingSpeed),void 0!==U.metadata&&(C.metadata=U.metadata),C}static MakeAnimationAdditive(U,G,C){let X;X="object"===typeof G?G:{referenceFrame:G,range:C,cloneOriginalAnimationGroup:arguments.length>3&&void 0!==arguments[3]&&arguments[3],clonedAnimationName:arguments.length>4?arguments[4]:void 0};let l=U;X.cloneOriginalAnimationGroup&&(l=U.clone(X.clonedAnimationGroupName||l.name));const t=l.targetedAnimations;for(let E=0;E<t.length;E++){const U=t[E];U.animation=L.d.MakeAnimationAdditive(U.animation,X)}if(l.isAdditive=!0,X.clipKeys){let U=Number.MAX_VALUE,G=-Number.MAX_VALUE;const C=l.targetedAnimations;for(let L=0;L<C.length;L++){const X=C[L].animation.getKeys();U>X[0].frame&&(U=X[0].frame),G<X[X.length-1].frame&&(G=X[X.length-1].frame)}l._from=U,l._to=G}return l}static ClipKeys(U,G,C,L,X){const l=U.clone(L||U.name);return x.ClipKeysInPlace(l,G,C,X)}static ClipKeysInPlace(U,G,C,L){return x.ClipInPlace(U,G,C,L,!1)}static ClipFrames(U,G,C,L,X){const l=U.clone(L||U.name);return x.ClipFramesInPlace(l,G,C,X)}static ClipFramesInPlace(U,G,C,L){return x.ClipInPlace(U,G,C,L,!0)}static ClipInPlace(U,G,C,L){let X=arguments.length>4&&void 0!==arguments[4]&&arguments[4],l=Number.MAX_VALUE,t=-Number.MAX_VALUE;const E=U.targetedAnimations;for(let K=0;K<E.length;K++){const U=E[K],P=L?U.animation:U.animation.clone();X&&(P.createKeyForFrame(G),P.createKeyForFrame(C));const O=P.getKeys(),T=[];let D=Number.MAX_VALUE;for(let L=0;L<O.length;L++){const U=O[L];if(!X&&L>=G&&L<=C||X&&U.frame>=G&&U.frame<=C){const G={frame:U.frame,value:U.value.clone?U.value.clone():U.value,inTangent:U.inTangent,outTangent:U.outTangent,interpolation:U.interpolation,lockedTangent:U.lockedTangent};D===Number.MAX_VALUE&&(D=G.frame),G.frame-=D,T.push(G)}}0!==T.length?(l>T[0].frame&&(l=T[0].frame),t<T[T.length-1].frame&&(t=T[T.length-1].frame),P.setKeys(T,!0),U.animation=P):(E.splice(K,1),K--)}return U._from=l,U._to=t,U}getClassName(){return"AnimationGroup"}toString(U){let G="Name: "+this.name;return G+=", type: "+this.getClassName(),U&&(G+=", from: "+this._from,G+=", to: "+this._to,G+=", isStarted: "+this._isStarted,G+=", speedRatio: "+this._speedRatio,G+=", targetedAnimations length: "+this._targetedAnimations.length,G+=", animatables length: "+this._animatables),G}}}}]);