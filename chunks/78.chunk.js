"use strict";(self.bjbkv7h3qsd=self.bjbkv7h3qsd||[]).push([[78],{14384:(G,A,j)=>{j.r(A),j.d(A,{AnimationGroup:()=>Y,TargetedAnimation:()=>t});var u=j(11709),k=j(11050),B=j(11085),x=j(11253),s=j(12798),O=j(11218);class d{get currentFrame(){return this._currentFrame}get weight(){return this._weight}get currentValue(){return this._currentValue}get targetPath(){return this._targetPath}get target(){return this._currentActiveTarget}get isAdditive(){return this._host&&this._host.isAdditive}constructor(G,A,j,k){if(this._events=new Array,this._currentFrame=0,this._originalValue=new Array,this._originalBlendValue=null,this._offsetsCache={},this._highLimitsCache={},this._stopped=!1,this._blendingFactor=0,this._currentValue=null,this._currentActiveTarget=null,this._directTarget=null,this._targetPath="",this._weight=1,this._absoluteFrameOffset=0,this._previousElapsedTime=0,this._yoyoDirection=1,this._previousAbsoluteFrame=0,this._targetIsArray=!1,this._coreRuntimeAnimation=null,this._animation=A,this._target=G,this._scene=j,this._host=k,this._activeTargets=[],A._runtimeAnimations.push(this),this._animationState={key:0,repeatCount:0,loopMode:this._getCorrectLoopMode()},this._animation.dataType===u.d.ANIMATIONTYPE_MATRIX&&(this._animationState.workValue=O.Matrix.Zero()),this._keys=this._animation.getKeys(),this._minFrame=this._keys[0].frame,this._maxFrame=this._keys[this._keys.length-1].frame,this._minValue=this._keys[0].value,this._maxValue=this._keys[this._keys.length-1].value,0!==this._minFrame){const G={frame:0,value:this._minValue};this._keys.splice(0,0,G)}if(this._target instanceof Array){let G=0;for(const A of this._target)this._preparePath(A,G),this._getOriginalValues(G),G++;this._targetIsArray=!0}else this._preparePath(this._target),this._getOriginalValues(),this._targetIsArray=!1,this._directTarget=this._activeTargets[0];const B=A.getEvents();if(B&&B.length>0)for(const u of B)this._events.push(u._clone());this._enableBlending=G&&G.animationPropertiesOverride?G.animationPropertiesOverride.enableBlending:this._animation.enableBlending}_preparePath(G){let A=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const j=this._animation.targetPropertyPath;if(j.length>1){let u=G;for(let G=0;G<j.length-1;G++){const A=j[G];if(u=u[A],void 0===u)throw new Error(`Invalid property (${A}) in property path (${j.join(".")})`)}this._targetPath=j[j.length-1],this._activeTargets[A]=u}else this._targetPath=j[0],this._activeTargets[A]=G;if(void 0===this._activeTargets[A][this._targetPath])throw new Error(`Invalid property (${this._targetPath}) in property path (${j.join(".")})`)}get animation(){return this._animation}reset(){if(arguments.length>0&&void 0!==arguments[0]&&arguments[0])if(this._target instanceof Array){let G=0;for(const A of this._target)void 0!==this._originalValue[G]&&this._setValue(A,this._activeTargets[G],this._originalValue[G],-1,G),G++}else void 0!==this._originalValue[0]&&this._setValue(this._target,this._directTarget,this._originalValue[0],-1,0);this._offsetsCache={},this._highLimitsCache={},this._currentFrame=0,this._blendingFactor=0;for(let G=0;G<this._events.length;G++)this._events[G].isDone=!1}isStopped(){return this._stopped}dispose(){const G=this._animation.runtimeAnimations.indexOf(this);G>-1&&this._animation.runtimeAnimations.splice(G,1)}setValue(G,A){if(this._targetIsArray)for(let j=0;j<this._target.length;j++){const u=this._target[j];this._setValue(u,this._activeTargets[j],G,A,j)}else this._setValue(this._target,this._directTarget,G,A,0)}_getOriginalValues(){let G,A=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;const j=this._activeTargets[A];G=j.getLocalMatrix&&"_matrix"===this._targetPath?j.getLocalMatrix():j[this._targetPath],G&&G.clone?this._originalValue[A]=G.clone():this._originalValue[A]=G}_registerTargetForLateAnimationBinding(G,A){const j=G.target;this._scene._registeredForLateAnimationBindings.pushNoDuplicate(j),j._lateAnimationHolders||(j._lateAnimationHolders={}),j._lateAnimationHolders[G.targetPath]||(j._lateAnimationHolders[G.targetPath]={totalWeight:0,totalAdditiveWeight:0,animations:[],additiveAnimations:[],originalValue:A}),G.isAdditive?(j._lateAnimationHolders[G.targetPath].additiveAnimations.push(G),j._lateAnimationHolders[G.targetPath].totalAdditiveWeight+=G.weight):(j._lateAnimationHolders[G.targetPath].animations.push(G),j._lateAnimationHolders[G.targetPath].totalWeight+=G.weight)}_setValue(G,A,j,k,B){if(this._currentActiveTarget=A,this._weight=k,this._enableBlending&&this._blendingFactor<=1){if(!this._originalBlendValue){const G=A[this._targetPath];G.clone?this._originalBlendValue=G.clone():this._originalBlendValue=G}this._originalBlendValue.m?u.d.AllowMatrixDecomposeForInterpolation?this._currentValue?O.Matrix.DecomposeLerpToRef(this._originalBlendValue,j,this._blendingFactor,this._currentValue):this._currentValue=O.Matrix.DecomposeLerp(this._originalBlendValue,j,this._blendingFactor):this._currentValue?O.Matrix.LerpToRef(this._originalBlendValue,j,this._blendingFactor,this._currentValue):this._currentValue=O.Matrix.Lerp(this._originalBlendValue,j,this._blendingFactor):this._currentValue=u.d._UniversalLerp(this._originalBlendValue,j,this._blendingFactor);const k=G&&G.animationPropertiesOverride?G.animationPropertiesOverride.blendingSpeed:this._animation.blendingSpeed;this._blendingFactor+=k}else this._currentValue?this._currentValue.B?this._currentValue.B(j):this._currentValue=j:null!==j&&void 0!==j&&j.clone?this._currentValue=j.clone():this._currentValue=j;-1!==k?this._registerTargetForLateAnimationBinding(this,this._originalValue[B]):this._animationState.loopMode===u.d.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT?this._currentValue.addToRef?this._currentValue.addToRef(this._originalValue[B],A[this._targetPath]):A[this._targetPath]=this._originalValue[B]+this._currentValue:A[this._targetPath]=this._currentValue,G.bh&&G.bh(this._animation.targetProperty)}_getCorrectLoopMode(){return this._target&&this._target.animationPropertiesOverride?this._target.animationPropertiesOverride.loopMode:this._animation.loopMode}goToFrame(G){let A=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const j=this._animation.getKeys();G<j[0].frame?G=j[0].frame:G>j[j.length-1].frame&&(G=j[j.length-1].frame);const u=this._events;if(u.length)for(let B=0;B<u.length;B++)u[B].onlyOnce||(u[B].isDone=u[B].frame<G);this._currentFrame=G;const k=this._animation._interpolate(G,this._animationState);this.setValue(k,A)}_prepareForSpeedRatioChange(G){const A=this._previousElapsedTime*(this._animation.framePerSecond*G)/1e3;this._absoluteFrameOffset=this._previousAbsoluteFrame-A}animate(G,A,j,k,B){let x=arguments.length>5&&void 0!==arguments[5]?arguments[5]:-1;const s=this._animation,O=s.targetPropertyPath;if(!O||O.length<1)return this._stopped=!0,!1;let d,h=!0;const H=this._events;let F=0;if(this._coreRuntimeAnimation)F=j-A,d=this._coreRuntimeAnimation.currentFrame,this._currentFrame=d,this._animationState.repeatCount=this._coreRuntimeAnimation._animationState.repeatCount,this._animationState.highLimitValue=this._coreRuntimeAnimation._animationState.highLimitValue,this._animationState.offsetValue=this._coreRuntimeAnimation._animationState.offsetValue;else{let x;(A<this._minFrame||A>this._maxFrame)&&(A=this._minFrame),(j<this._minFrame||j>this._maxFrame)&&(j=this._maxFrame),F=j-A;let O=G*(s.framePerSecond*B)/1e3+this._absoluteFrameOffset,R=0,U=!1;const S=k&&this._animationState.loopMode===u.d.ANIMATIONLOOPMODE_YOYO;if(S){const G=(O-A)/F,j=Math.sin(G*Math.PI);O=Math.abs(j)*F+A;const u=j>=0?1:-1;this._yoyoDirection!==u&&(U=!0),this._yoyoDirection=u}if(this._previousElapsedTime=G,this._previousAbsoluteFrame=O,!k&&j>=A&&(O>=F&&B>0||O<=0&&B<0))h=!1,R=s._getKeyValue(this._maxValue);else if(!k&&A>=j&&(O<=F&&B<0||O>=0&&B>0))h=!1,R=s._getKeyValue(this._minValue);else if(this._animationState.loopMode!==u.d.ANIMATIONLOOPMODE_CYCLE){const G=j.toString()+A.toString();if(!this._offsetsCache[G]){this._animationState.repeatCount=0,this._animationState.loopMode=u.d.ANIMATIONLOOPMODE_CYCLE;const k=s._interpolate(A,this._animationState),B=s._interpolate(j,this._animationState);switch(this._animationState.loopMode=this._getCorrectLoopMode(),s.dataType){case u.d.ANIMATIONTYPE_FLOAT:this._offsetsCache[G]=B-k;break;case u.d.ANIMATIONTYPE_QUATERNION:case u.d.ANIMATIONTYPE_VECTOR3:case u.d.ANIMATIONTYPE_VECTOR2:case u.d.ANIMATIONTYPE_SIZE:case u.d.ANIMATIONTYPE_COLOR3:this._offsetsCache[G]=B.CA(k)}this._highLimitsCache[G]=B}R=this._highLimitsCache[G],x=this._offsetsCache[G]}if(void 0===x)switch(s.dataType){case u.d.ANIMATIONTYPE_FLOAT:x=0;break;case u.d.ANIMATIONTYPE_QUATERNION:x=u.l;break;case u.d.ANIMATIONTYPE_VECTOR3:x=u.w;break;case u.d.ANIMATIONTYPE_VECTOR2:x=u.s;break;case u.d.ANIMATIONTYPE_SIZE:x=u.p;break;case u.d.ANIMATIONTYPE_COLOR3:x=u.f;break;case u.d.ANIMATIONTYPE_COLOR4:x=u.j}if(this._host&&this._host.syncRoot){const G=this._host.syncRoot;d=A+F*((G.masterFrame-G.fromFrame)/(G.toFrame-G.fromFrame))}else d=O>0&&A>j||O<0&&A<j?h&&0!==F?j+O%F:A:h&&0!==F?A+O%F:j;if(!S&&(B>0&&this.currentFrame>d||B<0&&this.currentFrame<d)||S&&U){this._onLoop();for(let G=0;G<H.length;G++)H[G].onlyOnce||(H[G].isDone=!1);this._animationState.key=B>0?0:s.getKeys().length-1}this._currentFrame=d,this._animationState.repeatCount=0===F?0:O/F|0,this._animationState.highLimitValue=R,this._animationState.offsetValue=x}const R=s._interpolate(d,this._animationState);if(this.setValue(R,x),H.length)for(let u=0;u<H.length;u++)if(F>=0&&d>=H[u].frame&&H[u].frame>=A||F<0&&d<=H[u].frame&&H[u].frame<=A){const G=H[u];G.isDone||(G.onlyOnce&&(H.splice(u,1),u--),G.isDone=!0,G.action(d))}return h||(this._stopped=!0),h}}var h=j(11072);class H{get syncRoot(){return this._syncRoot}get masterFrame(){return 0===this._runtimeAnimations.length?0:this._runtimeAnimations[0].currentFrame}get weight(){return this._weight}set weight(G){this._weight=-1!==G?Math.min(Math.max(G,0),1):-1}get speedRatio(){return this._speedRatio}set speedRatio(G){for(let A=0;A<this._runtimeAnimations.length;A++){this._runtimeAnimations[A]._prepareForSpeedRatioChange(G)}this._speedRatio=G,null!==this._goToFrame&&this.goToFrame(this._goToFrame)}get elapsedTime(){return null===this._localDelayOffset?0:this._scene._animationTime-this._localDelayOffset}constructor(G,A){let j=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:100,B=arguments.length>4&&void 0!==arguments[4]&&arguments[4],x=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,s=arguments.length>6?arguments[6]:void 0,O=arguments.length>7?arguments[7]:void 0,d=arguments.length>8?arguments[8]:void 0,h=arguments.length>9&&void 0!==arguments[9]&&arguments[9],H=arguments.length>10&&void 0!==arguments[10]?arguments[10]:0;this.target=A,this.fromFrame=j,this.toFrame=u,this.loopAnimation=B,this.onAnimationEnd=s,this.onAnimationLoop=d,this.isAdditive=h,this.playOrder=H,this._localDelayOffset=null,this._pausedDelay=null,this._manualJumpDelay=null,this._runtimeAnimations=new Array,this.ix=!1,this._speedRatio=1,this._weight=-1,this._previousWeight=-1,this._syncRoot=null,this._frameToSyncFromJump=null,this._goToFrame=null,this.disposeOnEnd=!0,this.animationStarted=!1,this.onAnimationEndObservable=new k.b,this.onAnimationLoopObservable=new k.b,this._scene=G,O&&this.appendAnimations(A,O),this._speedRatio=x,G._activeAnimatables.push(this)}syncWith(G){if(this._syncRoot=G,G){const G=this._scene._activeAnimatables.indexOf(this);G>-1&&(this._scene._activeAnimatables.splice(G,1),this._scene._activeAnimatables.push(this))}return this}getAnimations(){return this._runtimeAnimations}appendAnimations(G,A){for(let j=0;j<A.length;j++){const u=A[j],k=new d(G,u,this._scene,this);k._onLoop=()=>{this.onAnimationLoopObservable.notifyObservers(this),this.onAnimationLoop&&this.onAnimationLoop()},this._runtimeAnimations.push(k)}}getAnimationByTargetProperty(G){const A=this._runtimeAnimations;for(let j=0;j<A.length;j++)if(A[j].animation.targetProperty===G)return A[j].animation;return null}getRuntimeAnimationByTargetProperty(G){const A=this._runtimeAnimations;for(let j=0;j<A.length;j++)if(A[j].animation.targetProperty===G)return A[j];return null}reset(){const G=this._runtimeAnimations;for(let A=0;A<G.length;A++)G[A].reset(!0);this._localDelayOffset=null,this._pausedDelay=null}enableBlending(G){const A=this._runtimeAnimations;for(let j=0;j<A.length;j++)A[j].animation.enableBlending=!0,A[j].animation.blendingSpeed=G}disableBlending(){const G=this._runtimeAnimations;for(let A=0;A<G.length;A++)G[A].animation.enableBlending=!1}goToFrame(G){let A=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const j=this._runtimeAnimations;if(j[0]){const A=j[0].animation.framePerSecond;this._frameToSyncFromJump=this._frameToSyncFromJump??j[0].currentFrame;const u=0===this.speedRatio?0:(G-this._frameToSyncFromJump)/A*1e3/this.speedRatio;this._manualJumpDelay=-u}for(let u=0;u<j.length;u++)j[u].goToFrame(G,A?this._weight:-1);this._goToFrame=G}get paused(){return this.ix}pause(){this.ix||(this.ix=!0)}restart(){this.ix=!1}_raiseOnAnimationEnd(){this.onAnimationEnd&&this.onAnimationEnd(),this.onAnimationEndObservable.notifyObservers(this)}stop(G,A){let j=arguments.length>2&&void 0!==arguments[2]&&arguments[2],u=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(G||A){const k=this._scene._activeAnimatables.indexOf(this);if(k>-1){const B=this._runtimeAnimations;for(let j=B.length-1;j>=0;j--){const u=B[j];G&&u.animation.name!=G||(A&&!A(u.target)||(u.dispose(),B.splice(j,1)))}0==B.length&&(j||this._scene._activeAnimatables.splice(k,1),u||this._raiseOnAnimationEnd())}}else{const G=this._scene._activeAnimatables.indexOf(this);if(G>-1){j||this._scene._activeAnimatables.splice(G,1);const A=this._runtimeAnimations;for(let G=0;G<A.length;G++)A[G].dispose();this._runtimeAnimations.length=0,u||this._raiseOnAnimationEnd()}}}async waitAsync(){return await new Promise((G=>{this.onAnimationEndObservable.add((()=>{G(this)}),void 0,void 0,this,!0)}))}_animate(G){if(this.ix)return this.animationStarted=!1,null===this._pausedDelay&&(this._pausedDelay=G),!0;if(null===this._localDelayOffset?(this._localDelayOffset=G,this._pausedDelay=null):null!==this._pausedDelay&&(this._localDelayOffset+=G-this._pausedDelay,this._pausedDelay=null),null!==this._manualJumpDelay&&(this._localDelayOffset+=this.speedRatio<0?-this._manualJumpDelay:this._manualJumpDelay,this._manualJumpDelay=null,this._frameToSyncFromJump=null),this._goToFrame=null,0===this._weight&&0===this._previousWeight)return!0;this._previousWeight=this._weight;let A=!1;const j=this._runtimeAnimations;let u;for(u=0;u<j.length;u++){const k=j[u].animate(G-this._localDelayOffset,this.fromFrame,this.toFrame,this.loopAnimation,this._speedRatio,this._weight);A=A||k}if(this.animationStarted=A,!A){if(this.disposeOnEnd)for(u=this._scene._activeAnimatables.indexOf(this),this._scene._activeAnimatables.splice(u,1),u=0;u<j.length;u++)j[u].dispose();this._raiseOnAnimationEnd(),this.disposeOnEnd&&(this.onAnimationEnd=null,this.onAnimationLoop=null,this.onAnimationLoopObservable.clear(),this.onAnimationEndObservable.clear())}return A}}function F(G){if(0===G.totalWeight&&0===G.totalAdditiveWeight)return G.originalValue;let A=1;const j=O.TmpVectors.SA[0],u=O.TmpVectors.SA[1],k=O.TmpVectors.Quaternion[0];let B=0;const x=G.animations[0],s=G.originalValue;let d=1,h=!1;if(G.totalWeight<1)d=1-G.totalWeight,s.decompose(u,k,j);else{if(B=1,A=G.totalWeight,d=x.weight/A,1==d){if(!G.totalAdditiveWeight)return x.currentValue;h=!0}x.currentValue.decompose(u,k,j)}if(!h){u.scaleInPlace(d),j.scaleInPlace(d),k.scaleInPlace(d);for(let x=B;x<G.animations.length;x++){const B=G.animations[x];if(0===B.weight)continue;d=B.weight/A;const s=O.TmpVectors.SA[2],h=O.TmpVectors.SA[3],H=O.TmpVectors.Quaternion[1];B.currentValue.decompose(h,H,s),h.scaleAndAddToRef(d,u),H.scaleAndAddToRef(O.Quaternion.Dot(k,H)>0?d:-d,k),s.scaleAndAddToRef(d,j)}k.normalize()}for(let F=0;F<G.additiveAnimations.length;F++){const A=G.additiveAnimations[F];if(0===A.weight)continue;const B=O.TmpVectors.SA[2],x=O.TmpVectors.SA[3],s=O.TmpVectors.Quaternion[1];A.currentValue.decompose(x,s,B),x.multiplyToRef(u,x),O.SA.LerpToRef(u,x,A.weight,u),k.multiplyToRef(s,s),O.Quaternion.SlerpToRef(k,s,A.weight,k),B.scaleAndAddToRef(A.weight,j)}const H=x?x._animationState.workValue:O.TmpVectors.Matrix[0].clone();return O.Matrix.ComposeToRef(u,k,j,H),H}function R(G,A){if(0===G.totalWeight&&0===G.totalAdditiveWeight)return A;const j=G.animations[0],u=G.originalValue;let k=A;if(0===G.totalWeight&&G.totalAdditiveWeight>0)k.B(u);else if(1===G.animations.length){if(O.Quaternion.SlerpToRef(u,j.currentValue,Math.min(1,G.totalWeight),k),0===G.totalAdditiveWeight)return k}else if(G.animations.length>1){let j,B,x=1;if(G.totalWeight<1){const A=1-G.totalWeight;j=[],B=[],j.push(u),B.push(A)}else{if(2===G.animations.length&&(O.Quaternion.SlerpToRef(G.animations[0].currentValue,G.animations[1].currentValue,G.animations[1].weight/G.totalWeight,A),0===G.totalAdditiveWeight))return A;j=[],B=[],x=G.totalWeight}for(let A=0;A<G.animations.length;A++){const u=G.animations[A];j.push(u.currentValue),B.push(u.weight/x)}let s=0;for(let G=0;G<j.length;)G?(s+=B[G],O.Quaternion.SlerpToRef(k,j[G],B[G]/s,k),G++):(O.Quaternion.SlerpToRef(j[G],j[G+1],B[G+1]/(B[G]+B[G+1]),A),k=A,s=B[G]+B[G+1],G+=2)}for(let B=0;B<G.additiveAnimations.length;B++){const A=G.additiveAnimations[B];0!==A.weight&&(k.multiplyToRef(A.currentValue,O.TmpVectors.Quaternion[0]),O.Quaternion.SlerpToRef(k,O.TmpVectors.Quaternion[0],A.weight,k))}return k}var U,S,C=j(11458);U=C.b,(S=s.c)&&(S.prototype.copyAnimationRange=function(G,A,j){let k=arguments.length>3&&void 0!==arguments[3]&&arguments[3],B=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;0===this.animations.length&&(this.animations.push(new u.d(this.name,"_matrix",G.animations[0].framePerSecond,u.d.ANIMATIONTYPE_MATRIX,0)),this.animations[0].setKeys([]));const x=G.animations[0].getRange(A);if(!x)return!1;const s=x.from,O=x.to,d=G.animations[0].getKeys(),h=G.length,H=G.getParent(),F=this.getParent(),R=k&&H&&h&&this.length&&h!==this.length,U=R&&F&&H?F.length/H.length:1,S=k&&!F&&B&&(1!==B.x||1!==B.y||1!==B.z),C=this.animations[0].getKeys();let t,Y,n;for(let u=0,Q=d.length;u<Q;u++)t=d[u],t.frame>=s&&t.frame<=O&&(k?(n=t.value.clone(),R?(Y=n.getTranslation(),n.setTranslation(Y.scaleInPlace(U))):S&&B?(Y=n.getTranslation(),n.setTranslation(Y.multiplyInPlace(B))):n=t.value):n=t.value,C.push({frame:t.frame+j,value:n}));return this.animations[0].createRange(A,s+j,O+j),!0}),U&&(U.prototype._animate=function(G){if(!this.animationsEnabled)return;const A=h.c.Now;if(!this._animationTimeLast){if(this._pendingData.length>0)return;this._animationTimeLast=A}this.deltaTime=void 0!==G?G:this.useConstantAnimationDeltaTime?16:(A-this._animationTimeLast)*this.animationTimeScale,this._animationTimeLast=A;const j=this._activeAnimatables;if(0===j.length)return;this._animationTime+=this.deltaTime;const k=this._animationTime;for(let u=0;u<j.length;u++){const G=j[u];!G._animate(k)&&G.disposeOnEnd&&u--}!function(G){if(G._registeredForLateAnimationBindings.length){for(let A=0;A<G._registeredForLateAnimationBindings.length;A++){const j=G._registeredForLateAnimationBindings.data[A];for(const G in j._lateAnimationHolders){const A=j._lateAnimationHolders[G],k=A.animations[0],B=A.originalValue;if(void 0===B||null===B)continue;const x=u.d.AllowMatrixDecomposeForInterpolation&&B.m;let s=j[G];if(x)s=F(A);else if(void 0!==B.w)s=R(A,s||O.Quaternion.Identity());else{let G=0,j=1;const x=k&&k._animationState.loopMode===u.d.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT;if(A.totalWeight<1)s=x?B.clone?B.clone():B:k&&B.scale?B.scale(1-A.totalWeight):k?B*(1-A.totalWeight):B.clone?B.clone():B;else if(k){j=A.totalWeight;const u=k.weight/j;s=1!==u?k.currentValue.scale?k.currentValue.scale(u):k.currentValue*u:k.currentValue,x&&(s.addToRef?s.addToRef(B,s):s+=B),G=1}for(let u=G;u<A.animations.length;u++){const G=A.animations[u],k=G.weight/j;k&&(G.currentValue.scaleAndAddToRef?G.currentValue.scaleAndAddToRef(k,s):s+=G.currentValue*k)}for(let u=0;u<A.additiveAnimations.length;u++){const G=A.additiveAnimations[u],j=G.weight;j&&(G.currentValue.scaleAndAddToRef?G.currentValue.scaleAndAddToRef(j,s):s+=G.currentValue*j)}}j[G]=s}j._lateAnimationHolders={}}G._registeredForLateAnimationBindings.reset()}}(this)},U.prototype.sortActiveAnimatables=function(){this._activeAnimatables.sort(((G,A)=>G.playOrder-A.playOrder))},U.prototype.beginWeightedAnimation=function(G,A,j){let u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,k=arguments.length>4?arguments[4]:void 0,B=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,x=arguments.length>6?arguments[6]:void 0,s=arguments.length>7?arguments[7]:void 0,O=arguments.length>8?arguments[8]:void 0,d=arguments.length>9?arguments[9]:void 0,h=arguments.length>10&&void 0!==arguments[10]&&arguments[10];const H=this.beginAnimation(G,A,j,k,B,x,s,!1,O,d,h);return H.weight=u,H},U.prototype.beginAnimation=function(G,A,j,u){let k=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,B=arguments.length>5?arguments[5]:void 0,x=arguments.length>6?arguments[6]:void 0,s=!(arguments.length>7&&void 0!==arguments[7])||arguments[7],O=arguments.length>8?arguments[8]:void 0,d=arguments.length>9?arguments[9]:void 0,h=arguments.length>10&&void 0!==arguments[10]&&arguments[10];if(k<0){const G=A;A=j,j=G,k=-k}A>j&&(k=-k),s&&this.stopAnimation(G,void 0,O),x||(x=new H(this,G,A,j,u,k,B,void 0,d,h));const F=!O||O(G);if(G.animations&&F&&x.appendAnimations(G,G.animations),G.getAnimatables){const h=G.getAnimatables();for(let G=0;G<h.length;G++)this.beginAnimation(h[G],A,j,u,k,B,x,s,O,d)}return x.reset(),x},U.prototype.beginHierarchyAnimation=function(G,A,j,u,k){let B=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,x=arguments.length>6?arguments[6]:void 0,s=arguments.length>7?arguments[7]:void 0,O=!(arguments.length>8&&void 0!==arguments[8])||arguments[8],d=arguments.length>9?arguments[9]:void 0,h=arguments.length>11&&void 0!==arguments[11]&&arguments[11];const H=G.getDescendants(A),F=[];F.push(this.beginAnimation(G,j,u,k,B,x,s,O,d,void 0,h));for(const R of H)F.push(this.beginAnimation(R,j,u,k,B,x,s,O,d,void 0,h));return F},U.prototype.beginDirectAnimation=function(G,A,j,u,k){let B=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1;if(B<0){const G=j;j=u,u=G,B=-B}return j>u&&(B=-B),new H(this,G,j,u,k,B,arguments.length>6?arguments[6]:void 0,A,arguments.length>7?arguments[7]:void 0,arguments.length>8&&void 0!==arguments[8]&&arguments[8])},U.prototype.beginDirectHierarchyAnimation=function(G,A,j,u,k,B,x,s,O){let d=arguments.length>9&&void 0!==arguments[9]&&arguments[9];const h=G.getDescendants(A),H=[];H.push(this.beginDirectAnimation(G,j,u,k,B,x,s,O,d));for(const F of h)H.push(this.beginDirectAnimation(F,j,u,k,B,x,s,O,d));return H},U.prototype.getAnimatableByTarget=function(G){for(let A=0;A<this._activeAnimatables.length;A++)if(this._activeAnimatables[A].target===G)return this._activeAnimatables[A];return null},U.prototype.getAllAnimatablesByTarget=function(G){const A=[];for(let j=0;j<this._activeAnimatables.length;j++)this._activeAnimatables[j].target===G&&A.push(this._activeAnimatables[j]);return A},U.prototype.stopAnimation=function(G,A,j){const u=this.getAllAnimatablesByTarget(G);for(const k of u)k.stop(A,j)},U.prototype.stopAllAnimations=function(){if(this._activeAnimatables){for(let G=0;G<this._activeAnimatables.length;G++)this._activeAnimatables[G].stop(void 0,void 0,!0);this._activeAnimatables.length=0}for(const G of this.animationGroups)G.stop()});class t{getClassName(){return"TargetedAnimation"}serialize(){const G={};return G.animation=this.animation.serialize(),G.targetId=this.target.id,G}}class Y{get mask(){return this._mask}set mask(G){this._mask!==G&&(this._mask=G,this.syncWithMask(!0))}syncWithMask(){let G=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(this.mask||G){this._numActiveAnimatables=0;for(let G=0;G<this._animatables.length;++G){const A=this._animatables[G];!this.mask||this.mask.disabled||this.mask.retainsTarget(A.target.name)?(this._numActiveAnimatables++,A.paused&&A.restart()):A.paused||A.pause()}}else this._numActiveAnimatables=this._targetedAnimations.length}removeUnmaskedAnimations(){if(this.mask&&!this.mask.disabled){for(let G=0;G<this._animatables.length;++G){const A=this._animatables[G];this.mask.retainsTarget(A.target.name)||(A.stop(),this._animatables.splice(G,1),--G)}for(let G=0;G<this._targetedAnimations.length;G++){const A=this._targetedAnimations[G];this.mask.retainsTarget(A.target.name)||(this._targetedAnimations.splice(G,1),--G)}}}get from(){return this._from}set from(G){if(this._from!==G){this._from=G;for(let G=0;G<this._animatables.length;G++){this._animatables[G].fromFrame=this._from}}}get to(){return this._to}set to(G){if(this._to!==G){this._to=G;for(let G=0;G<this._animatables.length;G++){this._animatables[G].toFrame=this._to}}}get isStarted(){return this._isStarted}get isPlaying(){return this._isStarted&&!this._isPaused}get speedRatio(){return this._speedRatio}set speedRatio(G){if(this._speedRatio!==G){this._speedRatio=G;for(let G=0;G<this._animatables.length;G++){this._animatables[G].speedRatio=this._speedRatio}}}get loopAnimation(){return this._loopAnimation}set loopAnimation(G){if(this._loopAnimation!==G){this._loopAnimation=G;for(let G=0;G<this._animatables.length;G++){this._animatables[G].loopAnimation=this._loopAnimation}}}get isAdditive(){return this._isAdditive}set isAdditive(G){if(this._isAdditive!==G){this._isAdditive=G;for(let G=0;G<this._animatables.length;G++){this._animatables[G].isAdditive=this._isAdditive}}}get weight(){return this._weight}set weight(G){this._weight!==G&&(this._weight=G,this.setWeightForAllAnimatables(this._weight))}get targetedAnimations(){return this._targetedAnimations}get animatables(){return this._animatables}get children(){return this._targetedAnimations}get playOrder(){return this._playOrder}set playOrder(G){if(this._playOrder!==G&&(this._playOrder=G,this._animatables.length>0)){for(let G=0;G<this._animatables.length;G++)this._animatables[G].playOrder=this._playOrder;this._scene.sortActiveAnimatables()}}get enableBlending(){return this._enableBlending}set enableBlending(G){if(this._enableBlending!==G&&(this._enableBlending=G,null!==G))for(let A=0;A<this._targetedAnimations.length;++A)this._targetedAnimations[A].animation.enableBlending=G}get blendingSpeed(){return this._blendingSpeed}set blendingSpeed(G){if(this._blendingSpeed!==G&&(this._blendingSpeed=G,null!==G))for(let A=0;A<this._targetedAnimations.length;++A)this._targetedAnimations[A].animation.blendingSpeed=G}getLength(G,A){G=G??this._from;return((A=A??this._to)-G)/(this.targetedAnimations[0].animation.framePerSecond*this._speedRatio)}static MergeAnimationGroups(G){let A=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],j=arguments.length>2&&void 0!==arguments[2]&&arguments[2],u=arguments.length>3?arguments[3]:void 0;if(0===G.length)return null;u=u??G[0].weight;let k=Number.MAX_VALUE,B=-Number.MAX_VALUE;if(j)for(const s of G)s.from<k&&(k=s.from),s.to>B&&(B=s.to);const x=new Y(G[0].name+"_merged",G[0]._scene,u);for(const s of G){j&&s.normalize(k,B);for(const G of s.targetedAnimations)x.addTargetedAnimation(G.animation,G.target);A&&s.dispose()}return x}constructor(G){let A=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,j=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;this.name=G,this._targetedAnimations=new Array,this._animatables=new Array,this._from=Number.MAX_VALUE,this._to=-Number.MAX_VALUE,this._speedRatio=1,this._loopAnimation=!1,this._isAdditive=!1,this._weight=-1,this._playOrder=0,this._enableBlending=null,this._blendingSpeed=null,this._numActiveAnimatables=0,this._shouldStart=!0,this._parentContainer=null,this.onAnimationEndObservable=new k.b,this.onAnimationLoopObservable=new k.b,this.onAnimationGroupLoopObservable=new k.b,this.onAnimationGroupEndObservable=new k.b,this.onAnimationGroupPauseObservable=new k.b,this.onAnimationGroupPlayObservable=new k.b,this.metadata=null,this._mask=null,this._animationLoopFlags=[],this._scene=A||B.d.LastCreatedScene,this._weight=j,this._playOrder=u,this.uniqueId=this._scene.getUniqueId(),this._scene.addAnimationGroup(this)}addTargetedAnimation(G,A){const j=new t;j.animation=G,j.target=A;const u=G.getKeys();return this._from>u[0].frame&&(this._from=u[0].frame),this._to<u[u.length-1].frame&&(this._to=u[u.length-1].frame),null!==this._enableBlending&&(G.enableBlending=this._enableBlending),null!==this._blendingSpeed&&(G.blendingSpeed=this._blendingSpeed),this._targetedAnimations.push(j),this._shouldStart=!0,j}removeTargetedAnimation(G){for(let A=this._targetedAnimations.length-1;A>-1;A--){this._targetedAnimations[A].animation===G&&this._targetedAnimations.splice(A,1)}}normalize(){let G=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,A=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;null==G&&(G=this._from),null==A&&(A=this._to);for(let j=0;j<this._targetedAnimations.length;j++){const u=this._targetedAnimations[j].animation.getKeys(),k=u[0],B=u[u.length-1];if(k.frame>G){const A={frame:G,value:k.value,inTangent:k.inTangent,outTangent:k.outTangent,interpolation:k.interpolation};u.splice(0,0,A)}if(B.frame<A){const G={frame:A,value:B.value,inTangent:B.inTangent,outTangent:B.outTangent,interpolation:B.interpolation};u.push(G)}}return this._from=G,this._to=A,this}_processLoop(G,A,j){G.onAnimationLoop=()=>{this.onAnimationLoopObservable.notifyObservers(A),this._animationLoopFlags[j]||(this._animationLoopFlags[j]=!0,this._animationLoopCount++,this._animationLoopCount===this._numActiveAnimatables&&(this.onAnimationGroupLoopObservable.notifyObservers(this),this._animationLoopCount=0,this._animationLoopFlags.length=0))}}start(){let G=arguments.length>0&&void 0!==arguments[0]&&arguments[0],A=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,j=arguments.length>2?arguments[2]:void 0,u=arguments.length>3?arguments[3]:void 0,k=arguments.length>4?arguments[4]:void 0;if(this._isStarted||0===this._targetedAnimations.length)return this;this._loopAnimation=G,this._shouldStart=!1,this._animationLoopCount=0,this._animationLoopFlags.length=0;for(let B=0;B<this._targetedAnimations.length;B++){const x=this._targetedAnimations[B],s=this._scene.beginDirectAnimation(x.target,[x.animation],void 0!==j?j:this._from,void 0!==u?u:this._to,G,A,void 0,void 0,void 0!==k?k:this._isAdditive);s.weight=this._weight,s.playOrder=this._playOrder,s.onAnimationEnd=()=>{this.onAnimationEndObservable.notifyObservers(x),this._checkAnimationGroupEnded(s)},this._processLoop(s,x,B),this._animatables.push(s)}return this.syncWithMask(),this._scene.sortActiveAnimatables(),this._speedRatio=A,this._isStarted=!0,this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}pause(){if(!this._isStarted)return this;this._isPaused=!0;for(let G=0;G<this._animatables.length;G++){this._animatables[G].pause()}return this.onAnimationGroupPauseObservable.notifyObservers(this),this}play(G){return this.isStarted&&this._animatables.length&&!this._shouldStart?(void 0!==G&&(this.loopAnimation=G),this.restart()):(this.stop(),this.start(G,this._speedRatio)),this}reset(){if(!this._isStarted)return this.play(),this.goToFrame(0),this.stop(!0),this;for(let G=0;G<this._animatables.length;G++){this._animatables[G].reset()}return this}restart(){if(!this._isStarted)return this;for(let G=0;G<this._animatables.length;G++){this._animatables[G].restart()}return this.syncWithMask(),this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}stop(){let G=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this._isStarted)return this;const A=this._animatables.slice();for(let u=0;u<A.length;u++)A[u].stop(void 0,void 0,!0,G);let j=0;for(let u=0;u<this._scene._activeAnimatables.length;u++){const A=this._scene._activeAnimatables[u];A._runtimeAnimations.length>0?this._scene._activeAnimatables[j++]=A:G&&this._checkAnimationGroupEnded(A,G)}return this._scene._activeAnimatables.length=j,this._isStarted=!1,this}setWeightForAllAnimatables(G){for(let A=0;A<this._animatables.length;A++){this._animatables[A].weight=G}return this}syncAllAnimationsWith(G){for(let A=0;A<this._animatables.length;A++){this._animatables[A].syncWith(G)}return this}goToFrame(G){let A=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this._isStarted)return this;for(let j=0;j<this._animatables.length;j++){this._animatables[j].goToFrame(G,A)}return this}getCurrentFrame(){var G;return(null===(G=this.animatables[0])||void 0===G?void 0:G.masterFrame)||0}dispose(){this.isStarted&&this.stop(),this._targetedAnimations.length=0,this._animatables.length=0;const G=this._scene.animationGroups.indexOf(this);if(G>-1&&this._scene.animationGroups.splice(G,1),this._parentContainer){const G=this._parentContainer.animationGroups.indexOf(this);G>-1&&this._parentContainer.animationGroups.splice(G,1),this._parentContainer=null}this.onAnimationEndObservable.clear(),this.onAnimationGroupEndObservable.clear(),this.onAnimationGroupPauseObservable.clear(),this.onAnimationGroupPlayObservable.clear(),this.onAnimationLoopObservable.clear(),this.onAnimationGroupLoopObservable.clear()}_checkAnimationGroupEnded(G){let A=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const j=this._animatables.indexOf(G);j>-1&&this._animatables.splice(j,1),this._animatables.length===this._targetedAnimations.length-this._numActiveAnimatables&&(this._isStarted=!1,A||this.onAnimationGroupEndObservable.notifyObservers(this),this._animatables.length=0)}clone(G,A){let j=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const u=new Y(G||this.name,this._scene,this._weight,this._playOrder);u._from=this.from,u._to=this.to,u._speedRatio=this.speedRatio,u._loopAnimation=this.loopAnimation,u._isAdditive=this.isAdditive,u._enableBlending=this.enableBlending,u._blendingSpeed=this.blendingSpeed,u.metadata=this.metadata,u.mask=this.mask;for(const k of this._targetedAnimations)u.addTargetedAnimation(j?k.animation.clone():k.animation,A?A(k.target):k.target);return u}serialize(){const G={};G.name=this.name,G.from=this.from,G.to=this.to,G.speedRatio=this.speedRatio,G.loopAnimation=this.loopAnimation,G.isAdditive=this.isAdditive,G.weight=this.weight,G.playOrder=this.playOrder,G.enableBlending=this.enableBlending,G.blendingSpeed=this.blendingSpeed,G.targetedAnimations=[];for(let A=0;A<this.targetedAnimations.length;A++){const j=this.targetedAnimations[A];G.targetedAnimations[A]=j.serialize()}return x.b&&x.b.HasTags(this)&&(G.tags=x.b.GetTags(this)),this.metadata&&(G.metadata=this.metadata),G}static Parse(G,A){const j=new Y(G.name,A,G.weight,G.playOrder);for(let k=0;k<G.targetedAnimations.length;k++){const B=G.targetedAnimations[k],x=u.d.Parse(B.animation),s=B.targetId;if("influence"===B.animation.property){const G=A.getMorphTargetById(s);G&&j.addTargetedAnimation(x,G)}else{const G=A.getNodeById(s);null!=G&&j.addTargetedAnimation(x,G)}}return x.b&&x.b.AddTagsTo(j,G.tags),null!==G.from&&null!==G.to&&j.normalize(G.from,G.to),void 0!==G.speedRatio&&(j._speedRatio=G.speedRatio),void 0!==G.loopAnimation&&(j._loopAnimation=G.loopAnimation),void 0!==G.isAdditive&&(j._isAdditive=G.isAdditive),void 0!==G.weight&&(j._weight=G.weight),void 0!==G.playOrder&&(j._playOrder=G.playOrder),void 0!==G.enableBlending&&(j._enableBlending=G.enableBlending),void 0!==G.blendingSpeed&&(j._blendingSpeed=G.blendingSpeed),void 0!==G.metadata&&(j.metadata=G.metadata),j}static MakeAnimationAdditive(G,A,j){let k;k="object"===typeof A?A:{referenceFrame:A,range:j,cloneOriginalAnimationGroup:arguments.length>3&&void 0!==arguments[3]&&arguments[3],clonedAnimationName:arguments.length>4?arguments[4]:void 0};let B=G;k.cloneOriginalAnimationGroup&&(B=G.clone(k.clonedAnimationGroupName||B.name));const x=B.targetedAnimations;for(let s=0;s<x.length;s++){const G=x[s];G.animation=u.d.MakeAnimationAdditive(G.animation,k)}if(B.isAdditive=!0,k.clipKeys){let G=Number.MAX_VALUE,A=-Number.MAX_VALUE;const j=B.targetedAnimations;for(let u=0;u<j.length;u++){const k=j[u].animation.getKeys();G>k[0].frame&&(G=k[0].frame),A<k[k.length-1].frame&&(A=k[k.length-1].frame)}B._from=G,B._to=A}return B}static ClipKeys(G,A,j,u,k){const B=G.clone(u||G.name);return Y.ClipKeysInPlace(B,A,j,k)}static ClipKeysInPlace(G,A,j,u){return Y.ClipInPlace(G,A,j,u,!1)}static ClipFrames(G,A,j,u,k){const B=G.clone(u||G.name);return Y.ClipFramesInPlace(B,A,j,k)}static ClipFramesInPlace(G,A,j,u){return Y.ClipInPlace(G,A,j,u,!0)}static ClipInPlace(G,A,j,u){let k=arguments.length>4&&void 0!==arguments[4]&&arguments[4],B=Number.MAX_VALUE,x=-Number.MAX_VALUE;const s=G.targetedAnimations;for(let O=0;O<s.length;O++){const G=s[O],d=u?G.animation:G.animation.clone();k&&(d.createKeyForFrame(A),d.createKeyForFrame(j));const h=d.getKeys(),H=[];let F=Number.MAX_VALUE;for(let u=0;u<h.length;u++){const G=h[u];if(!k&&u>=A&&u<=j||k&&G.frame>=A&&G.frame<=j){const A={frame:G.frame,value:G.value.clone?G.value.clone():G.value,inTangent:G.inTangent,outTangent:G.outTangent,interpolation:G.interpolation,lockedTangent:G.lockedTangent};F===Number.MAX_VALUE&&(F=A.frame),A.frame-=F,H.push(A)}}0!==H.length?(B>H[0].frame&&(B=H[0].frame),x<H[H.length-1].frame&&(x=H[H.length-1].frame),d.setKeys(H,!0),G.animation=d):(s.splice(O,1),O--)}return G._from=B,G._to=x,G}getClassName(){return"AnimationGroup"}toString(G){let A="Name: "+this.name;return A+=", type: "+this.getClassName(),G&&(A+=", from: "+this._from,A+=", to: "+this._to,A+=", isStarted: "+this._isStarted,A+=", speedRatio: "+this._speedRatio,A+=", targetedAnimations length: "+this._targetedAnimations.length,A+=", animatables length: "+this._animatables),A}}}}]);