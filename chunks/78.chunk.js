"use strict";(self.fyqbdzs5tyo=self.fyqbdzs5tyo||[]).push([[78],{14303:(V,I,A)=>{A.r(I),A.d(I,{AnimationGroup:()=>g,TargetedAnimation:()=>W});var B=A(11790),F=A(11057),E=A(11097),Y=A(11273),H=A(12882),c=A(11231);class b{get currentFrame(){return this._currentFrame}get weight(){return this._weight}get currentValue(){return this._currentValue}get targetPath(){return this._targetPath}get target(){return this._currentActiveTarget}get isAdditive(){return this._host&&this._host.isAdditive}constructor(V,I,A,F){if(this._events=new Array,this._currentFrame=0,this._originalValue=new Array,this._originalBlendValue=null,this._offsetsCache={},this._highLimitsCache={},this._stopped=!1,this._blendingFactor=0,this._currentValue=null,this._currentActiveTarget=null,this._directTarget=null,this._targetPath="",this._weight=1,this._absoluteFrameOffset=0,this._previousElapsedTime=0,this._yoyoDirection=1,this._previousAbsoluteFrame=0,this._targetIsArray=!1,this._coreRuntimeAnimation=null,this._animation=I,this._target=V,this._scene=A,this._host=F,this._activeTargets=[],I._runtimeAnimations.push(this),this._animationState={key:0,repeatCount:0,loopMode:this._getCorrectLoopMode()},this._animation.dataType===B.d.ANIMATIONTYPE_MATRIX&&(this._animationState.workValue=c.Matrix.Zero()),this._keys=this._animation.getKeys(),this._minFrame=this._keys[0].frame,this._maxFrame=this._keys[this._keys.length-1].frame,this._minValue=this._keys[0].value,this._maxValue=this._keys[this._keys.length-1].value,0!==this._minFrame){const V={frame:0,value:this._minValue};this._keys.splice(0,0,V)}if(this._target instanceof Array){let V=0;for(const I of this._target)this._preparePath(I,V),this._getOriginalValues(V),V++;this._targetIsArray=!0}else this._preparePath(this._target),this._getOriginalValues(),this._targetIsArray=!1,this._directTarget=this._activeTargets[0];const E=I.getEvents();if(E&&E.length>0)for(const B of E)this._events.push(B._clone());this._enableBlending=V&&V.animationPropertiesOverride?V.animationPropertiesOverride.enableBlending:this._animation.enableBlending}_preparePath(V){let I=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const A=this._animation.targetPropertyPath;if(A.length>1){let B=V;for(let V=0;V<A.length-1;V++){const I=A[V];if(B=B[I],void 0===B)throw new Error(`Invalid property (${I}) in property path (${A.join(".")})`)}this._targetPath=A[A.length-1],this._activeTargets[I]=B}else this._targetPath=A[0],this._activeTargets[I]=V;if(void 0===this._activeTargets[I][this._targetPath])throw new Error(`Invalid property (${this._targetPath}) in property path (${A.join(".")})`)}get animation(){return this._animation}reset(){if(arguments.length>0&&void 0!==arguments[0]&&arguments[0])if(this._target instanceof Array){let V=0;for(const I of this._target)void 0!==this._originalValue[V]&&this._setValue(I,this._activeTargets[V],this._originalValue[V],-1,V),V++}else void 0!==this._originalValue[0]&&this._setValue(this._target,this._directTarget,this._originalValue[0],-1,0);this._offsetsCache={},this._highLimitsCache={},this._currentFrame=0,this._blendingFactor=0;for(let V=0;V<this._events.length;V++)this._events[V].isDone=!1}isStopped(){return this._stopped}dispose(){const V=this._animation.runtimeAnimations.indexOf(this);V>-1&&this._animation.runtimeAnimations.splice(V,1)}setValue(V,I){if(this._targetIsArray)for(let A=0;A<this._target.length;A++){const B=this._target[A];this._setValue(B,this._activeTargets[A],V,I,A)}else this._setValue(this._target,this._directTarget,V,I,0)}_getOriginalValues(){let V,I=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;const A=this._activeTargets[I];V=A.getLocalMatrix&&"_matrix"===this._targetPath?A.getLocalMatrix():A[this._targetPath],V&&V.clone?this._originalValue[I]=V.clone():this._originalValue[I]=V}_registerTargetForLateAnimationBinding(V,I){const A=V.target;this._scene._registeredForLateAnimationBindings.pushNoDuplicate(A),A._lateAnimationHolders||(A._lateAnimationHolders={}),A._lateAnimationHolders[V.targetPath]||(A._lateAnimationHolders[V.targetPath]={totalWeight:0,totalAdditiveWeight:0,animations:[],additiveAnimations:[],originalValue:I}),V.isAdditive?(A._lateAnimationHolders[V.targetPath].additiveAnimations.push(V),A._lateAnimationHolders[V.targetPath].totalAdditiveWeight+=V.weight):(A._lateAnimationHolders[V.targetPath].animations.push(V),A._lateAnimationHolders[V.targetPath].totalWeight+=V.weight)}_setValue(V,I,A,F,E){if(this._currentActiveTarget=I,this._weight=F,this._enableBlending&&this._blendingFactor<=1){if(!this._originalBlendValue){const V=I[this._targetPath];V.clone?this._originalBlendValue=V.clone():this._originalBlendValue=V}this._originalBlendValue.m?B.d.AllowMatrixDecomposeForInterpolation?this._currentValue?c.Matrix.DecomposeLerpToRef(this._originalBlendValue,A,this._blendingFactor,this._currentValue):this._currentValue=c.Matrix.DecomposeLerp(this._originalBlendValue,A,this._blendingFactor):this._currentValue?c.Matrix.LerpToRef(this._originalBlendValue,A,this._blendingFactor,this._currentValue):this._currentValue=c.Matrix.Lerp(this._originalBlendValue,A,this._blendingFactor):this._currentValue=B.d._UniversalLerp(this._originalBlendValue,A,this._blendingFactor);const F=V&&V.animationPropertiesOverride?V.animationPropertiesOverride.blendingSpeed:this._animation.blendingSpeed;this._blendingFactor+=F}else this._currentValue?this._currentValue.B?this._currentValue.B(A):this._currentValue=A:null!==A&&void 0!==A&&A.clone?this._currentValue=A.clone():this._currentValue=A;-1!==F?this._registerTargetForLateAnimationBinding(this,this._originalValue[E]):this._animationState.loopMode===B.d.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT?this._currentValue.addToRef?this._currentValue.addToRef(this._originalValue[E],I[this._targetPath]):I[this._targetPath]=this._originalValue[E]+this._currentValue:I[this._targetPath]=this._currentValue,V.FP&&V.FP(this._animation.targetProperty)}_getCorrectLoopMode(){return this._target&&this._target.animationPropertiesOverride?this._target.animationPropertiesOverride.loopMode:this._animation.loopMode}goToFrame(V){let I=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const A=this._animation.getKeys();V<A[0].frame?V=A[0].frame:V>A[A.length-1].frame&&(V=A[A.length-1].frame);const B=this._events;if(B.length)for(let E=0;E<B.length;E++)B[E].onlyOnce||(B[E].isDone=B[E].frame<V);this._currentFrame=V;const F=this._animation._interpolate(V,this._animationState);this.setValue(F,I)}_prepareForSpeedRatioChange(V){const I=this._previousElapsedTime*(this._animation.framePerSecond*V)/1e3;this._absoluteFrameOffset=this._previousAbsoluteFrame-I}animate(V,I,A,F,E){let Y=arguments.length>5&&void 0!==arguments[5]?arguments[5]:-1;const H=this._animation,c=H.targetPropertyPath;if(!c||c.length<1)return this._stopped=!0,!1;let b,X=!0;const P=this._events;let J=0;if(this._coreRuntimeAnimation)J=A-I,b=this._coreRuntimeAnimation.currentFrame,this._currentFrame=b,this._animationState.repeatCount=this._coreRuntimeAnimation._animationState.repeatCount,this._animationState.highLimitValue=this._coreRuntimeAnimation._animationState.highLimitValue,this._animationState.offsetValue=this._coreRuntimeAnimation._animationState.offsetValue;else{let Y;(I<this._minFrame||I>this._maxFrame)&&(I=this._minFrame),(A<this._minFrame||A>this._maxFrame)&&(A=this._maxFrame),J=A-I;let c=V*(H.framePerSecond*E)/1e3+this._absoluteFrameOffset,G=0,w=!1;const t=F&&this._animationState.loopMode===B.d.ANIMATIONLOOPMODE_YOYO;if(t){const V=(c-I)/J,A=Math.sin(V*Math.PI);c=Math.abs(A)*J+I;const B=A>=0?1:-1;this._yoyoDirection!==B&&(w=!0),this._yoyoDirection=B}if(this._previousElapsedTime=V,this._previousAbsoluteFrame=c,!F&&A>=I&&(c>=J&&E>0||c<=0&&E<0))X=!1,G=H._getKeyValue(this._maxValue);else if(!F&&I>=A&&(c<=J&&E<0||c>=0&&E>0))X=!1,G=H._getKeyValue(this._minValue);else if(this._animationState.loopMode!==B.d.ANIMATIONLOOPMODE_CYCLE){const V=A.toString()+I.toString();if(!this._offsetsCache[V]){this._animationState.repeatCount=0,this._animationState.loopMode=B.d.ANIMATIONLOOPMODE_CYCLE;const F=H._interpolate(I,this._animationState),E=H._interpolate(A,this._animationState);switch(this._animationState.loopMode=this._getCorrectLoopMode(),H.dataType){case B.d.ANIMATIONTYPE_FLOAT:this._offsetsCache[V]=E-F;break;case B.d.ANIMATIONTYPE_QUATERNION:case B.d.ANIMATIONTYPE_VECTOR3:case B.d.ANIMATIONTYPE_VECTOR2:case B.d.ANIMATIONTYPE_SIZE:case B.d.ANIMATIONTYPE_COLOR3:this._offsetsCache[V]=E.uI(F)}this._highLimitsCache[V]=E}G=this._highLimitsCache[V],Y=this._offsetsCache[V]}if(void 0===Y)switch(H.dataType){case B.d.ANIMATIONTYPE_FLOAT:Y=0;break;case B.d.ANIMATIONTYPE_QUATERNION:Y=B.j;break;case B.d.ANIMATIONTYPE_VECTOR3:Y=B.r;break;case B.d.ANIMATIONTYPE_VECTOR2:Y=B.n;break;case B.d.ANIMATIONTYPE_SIZE:Y=B.l;break;case B.d.ANIMATIONTYPE_COLOR3:Y=B.f;break;case B.d.ANIMATIONTYPE_COLOR4:Y=B.h}if(this._host&&this._host.syncRoot){const V=this._host.syncRoot;b=I+J*((V.masterFrame-V.fromFrame)/(V.toFrame-V.fromFrame))}else b=c>0&&I>A||c<0&&I<A?X&&0!==J?A+c%J:I:X&&0!==J?I+c%J:A;if(!t&&(E>0&&this.currentFrame>b||E<0&&this.currentFrame<b)||t&&w){this._onLoop();for(let V=0;V<P.length;V++)P[V].onlyOnce||(P[V].isDone=!1);this._animationState.key=E>0?0:H.getKeys().length-1}this._currentFrame=b,this._animationState.repeatCount=0===J?0:c/J|0,this._animationState.highLimitValue=G,this._animationState.offsetValue=Y}const G=H._interpolate(b,this._animationState);if(this.setValue(G,Y),P.length)for(let B=0;B<P.length;B++)if(J>=0&&b>=P[B].frame&&P[B].frame>=I||J<0&&b<=P[B].frame&&P[B].frame<=I){const V=P[B];V.isDone||(V.onlyOnce&&(P.splice(B,1),B--),V.isDone=!0,V.action(b))}return X||(this._stopped=!0),X}}var X=A(11075);class P{get syncRoot(){return this._syncRoot}get masterFrame(){return 0===this._runtimeAnimations.length?0:this._runtimeAnimations[0].currentFrame}get weight(){return this._weight}set weight(V){this._weight=-1!==V?Math.min(Math.max(V,0),1):-1}get speedRatio(){return this._speedRatio}set speedRatio(V){for(let I=0;I<this._runtimeAnimations.length;I++){this._runtimeAnimations[I]._prepareForSpeedRatioChange(V)}this._speedRatio=V,null!==this._goToFrame&&this.goToFrame(this._goToFrame)}get elapsedTime(){return null===this._localDelayOffset?0:this._scene._animationTime-this._localDelayOffset}constructor(V,I){let A=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,B=arguments.length>3&&void 0!==arguments[3]?arguments[3]:100,E=arguments.length>4&&void 0!==arguments[4]&&arguments[4],Y=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,H=arguments.length>6?arguments[6]:void 0,c=arguments.length>7?arguments[7]:void 0,b=arguments.length>8?arguments[8]:void 0,X=arguments.length>9&&void 0!==arguments[9]&&arguments[9],P=arguments.length>10&&void 0!==arguments[10]?arguments[10]:0;this.target=I,this.fromFrame=A,this.toFrame=B,this.loopAnimation=E,this.onAnimationEnd=H,this.onAnimationLoop=b,this.isAdditive=X,this.playOrder=P,this._localDelayOffset=null,this._pausedDelay=null,this._manualJumpDelay=null,this._runtimeAnimations=new Array,this.yY=!1,this._speedRatio=1,this._weight=-1,this._previousWeight=-1,this._syncRoot=null,this._frameToSyncFromJump=null,this._goToFrame=null,this.disposeOnEnd=!0,this.animationStarted=!1,this.onAnimationEndObservable=new F.c,this.onAnimationLoopObservable=new F.c,this._scene=V,c&&this.appendAnimations(I,c),this._speedRatio=Y,V._activeAnimatables.push(this)}syncWith(V){if(this._syncRoot=V,V){const V=this._scene._activeAnimatables.indexOf(this);V>-1&&(this._scene._activeAnimatables.splice(V,1),this._scene._activeAnimatables.push(this))}return this}getAnimations(){return this._runtimeAnimations}appendAnimations(V,I){for(let A=0;A<I.length;A++){const B=I[A],F=new b(V,B,this._scene,this);F._onLoop=()=>{this.onAnimationLoopObservable.notifyObservers(this),this.onAnimationLoop&&this.onAnimationLoop()},this._runtimeAnimations.push(F)}}getAnimationByTargetProperty(V){const I=this._runtimeAnimations;for(let A=0;A<I.length;A++)if(I[A].animation.targetProperty===V)return I[A].animation;return null}getRuntimeAnimationByTargetProperty(V){const I=this._runtimeAnimations;for(let A=0;A<I.length;A++)if(I[A].animation.targetProperty===V)return I[A];return null}reset(){const V=this._runtimeAnimations;for(let I=0;I<V.length;I++)V[I].reset(!0);this._localDelayOffset=null,this._pausedDelay=null}enableBlending(V){const I=this._runtimeAnimations;for(let A=0;A<I.length;A++)I[A].animation.enableBlending=!0,I[A].animation.blendingSpeed=V}disableBlending(){const V=this._runtimeAnimations;for(let I=0;I<V.length;I++)V[I].animation.enableBlending=!1}goToFrame(V){let I=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const A=this._runtimeAnimations;if(A[0]){const I=A[0].animation.framePerSecond;this._frameToSyncFromJump=this._frameToSyncFromJump??A[0].currentFrame;const B=0===this.speedRatio?0:(V-this._frameToSyncFromJump)/I*1e3/this.speedRatio;this._manualJumpDelay=-B}for(let B=0;B<A.length;B++)A[B].goToFrame(V,I?this._weight:-1);this._goToFrame=V}get paused(){return this.yY}pause(){this.yY||(this.yY=!0)}restart(){this.yY=!1}_raiseOnAnimationEnd(){this.onAnimationEnd&&this.onAnimationEnd(),this.onAnimationEndObservable.notifyObservers(this)}stop(V,I){let A=arguments.length>2&&void 0!==arguments[2]&&arguments[2],B=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(V||I){const F=this._scene._activeAnimatables.indexOf(this);if(F>-1){const E=this._runtimeAnimations;for(let A=E.length-1;A>=0;A--){const B=E[A];V&&B.animation.name!=V||(I&&!I(B.target)||(B.dispose(),E.splice(A,1)))}0==E.length&&(A||this._scene._activeAnimatables.splice(F,1),B||this._raiseOnAnimationEnd())}}else{const V=this._scene._activeAnimatables.indexOf(this);if(V>-1){A||this._scene._activeAnimatables.splice(V,1);const I=this._runtimeAnimations;for(let V=0;V<I.length;V++)I[V].dispose();this._runtimeAnimations.length=0,B||this._raiseOnAnimationEnd()}}}async waitAsync(){return await new Promise((V=>{this.onAnimationEndObservable.add((()=>{V(this)}),void 0,void 0,this,!0)}))}_animate(V){if(this.yY)return this.animationStarted=!1,null===this._pausedDelay&&(this._pausedDelay=V),!0;if(null===this._localDelayOffset?(this._localDelayOffset=V,this._pausedDelay=null):null!==this._pausedDelay&&(this._localDelayOffset+=V-this._pausedDelay,this._pausedDelay=null),null!==this._manualJumpDelay&&(this._localDelayOffset+=this.speedRatio<0?-this._manualJumpDelay:this._manualJumpDelay,this._manualJumpDelay=null,this._frameToSyncFromJump=null),this._goToFrame=null,0===this._weight&&0===this._previousWeight)return!0;this._previousWeight=this._weight;let I=!1;const A=this._runtimeAnimations;let B;for(B=0;B<A.length;B++){const F=A[B].animate(V-this._localDelayOffset,this.fromFrame,this.toFrame,this.loopAnimation,this._speedRatio,this._weight);I=I||F}if(this.animationStarted=I,!I){if(this.disposeOnEnd)for(B=this._scene._activeAnimatables.indexOf(this),this._scene._activeAnimatables.splice(B,1),B=0;B<A.length;B++)A[B].dispose();this._raiseOnAnimationEnd(),this.disposeOnEnd&&(this.onAnimationEnd=null,this.onAnimationLoop=null,this.onAnimationLoopObservable.clear(),this.onAnimationEndObservable.clear())}return I}}function J(V){if(0===V.totalWeight&&0===V.totalAdditiveWeight)return V.originalValue;let I=1;const A=c.TmpVectors.tI[0],B=c.TmpVectors.tI[1],F=c.TmpVectors.Quaternion[0];let E=0;const Y=V.animations[0],H=V.originalValue;let b=1,X=!1;if(V.totalWeight<1)b=1-V.totalWeight,H.decompose(B,F,A);else{if(E=1,I=V.totalWeight,b=Y.weight/I,1==b){if(!V.totalAdditiveWeight)return Y.currentValue;X=!0}Y.currentValue.decompose(B,F,A)}if(!X){B.scaleInPlace(b),A.scaleInPlace(b),F.scaleInPlace(b);for(let Y=E;Y<V.animations.length;Y++){const E=V.animations[Y];if(0===E.weight)continue;b=E.weight/I;const H=c.TmpVectors.tI[2],X=c.TmpVectors.tI[3],P=c.TmpVectors.Quaternion[1];E.currentValue.decompose(X,P,H),X.scaleAndAddToRef(b,B),P.scaleAndAddToRef(c.Quaternion.Dot(F,P)>0?b:-b,F),H.scaleAndAddToRef(b,A)}F.normalize()}for(let J=0;J<V.additiveAnimations.length;J++){const I=V.additiveAnimations[J];if(0===I.weight)continue;const E=c.TmpVectors.tI[2],Y=c.TmpVectors.tI[3],H=c.TmpVectors.Quaternion[1];I.currentValue.decompose(Y,H,E),Y.multiplyToRef(B,Y),c.tI.LerpToRef(B,Y,I.weight,B),F.multiplyToRef(H,H),c.Quaternion.SlerpToRef(F,H,I.weight,F),E.scaleAndAddToRef(I.weight,A)}const P=Y?Y._animationState.workValue:c.TmpVectors.Matrix[0].clone();return c.Matrix.ComposeToRef(B,F,A,P),P}function G(V,I){if(0===V.totalWeight&&0===V.totalAdditiveWeight)return I;const A=V.animations[0],B=V.originalValue;let F=I;if(0===V.totalWeight&&V.totalAdditiveWeight>0)F.B(B);else if(1===V.animations.length){if(c.Quaternion.SlerpToRef(B,A.currentValue,Math.min(1,V.totalWeight),F),0===V.totalAdditiveWeight)return F}else if(V.animations.length>1){let A,E,Y=1;if(V.totalWeight<1){const I=1-V.totalWeight;A=[],E=[],A.push(B),E.push(I)}else{if(2===V.animations.length&&(c.Quaternion.SlerpToRef(V.animations[0].currentValue,V.animations[1].currentValue,V.animations[1].weight/V.totalWeight,I),0===V.totalAdditiveWeight))return I;A=[],E=[],Y=V.totalWeight}for(let I=0;I<V.animations.length;I++){const B=V.animations[I];A.push(B.currentValue),E.push(B.weight/Y)}let H=0;for(let V=0;V<A.length;)V?(H+=E[V],c.Quaternion.SlerpToRef(F,A[V],E[V]/H,F),V++):(c.Quaternion.SlerpToRef(A[V],A[V+1],E[V+1]/(E[V]+E[V+1]),I),F=I,H=E[V]+E[V+1],V+=2)}for(let E=0;E<V.additiveAnimations.length;E++){const I=V.additiveAnimations[E];0!==I.weight&&(F.multiplyToRef(I.currentValue,c.TmpVectors.Quaternion[0]),c.Quaternion.SlerpToRef(F,c.TmpVectors.Quaternion[0],I.weight,F))}return F}var w,t,u=A(11473);w=u.b,(t=H.c)&&(t.prototype.copyAnimationRange=function(V,I,A){let F=arguments.length>3&&void 0!==arguments[3]&&arguments[3],E=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;0===this.animations.length&&(this.animations.push(new B.d(this.name,"_matrix",V.animations[0].framePerSecond,B.d.ANIMATIONTYPE_MATRIX,0)),this.animations[0].setKeys([]));const Y=V.animations[0].getRange(I);if(!Y)return!1;const H=Y.from,c=Y.to,b=V.animations[0].getKeys(),X=V.length,P=V.getParent(),J=this.getParent(),G=F&&P&&X&&this.length&&X!==this.length,w=G&&J&&P?J.length/P.length:1,t=F&&!J&&E&&(1!==E.x||1!==E.y||1!==E.z),u=this.animations[0].getKeys();let W,g,o;for(let B=0,L=b.length;B<L;B++)W=b[B],W.frame>=H&&W.frame<=c&&(F?(o=W.value.clone(),G?(g=o.getTranslation(),o.setTranslation(g.scaleInPlace(w))):t&&E?(g=o.getTranslation(),o.setTranslation(g.multiplyInPlace(E))):o=W.value):o=W.value,u.push({frame:W.frame+A,value:o}));return this.animations[0].createRange(I,H+A,c+A),!0}),w&&(w.prototype._animate=function(V){if(!this.animationsEnabled)return;const I=X.e.Now;if(!this._animationTimeLast){if(this._pendingData.length>0)return;this._animationTimeLast=I}this.deltaTime=void 0!==V?V:this.useConstantAnimationDeltaTime?16:(I-this._animationTimeLast)*this.animationTimeScale,this._animationTimeLast=I;const A=this._activeAnimatables;if(0===A.length)return;this._animationTime+=this.deltaTime;const F=this._animationTime;for(let B=0;B<A.length;B++){const V=A[B];!V._animate(F)&&V.disposeOnEnd&&B--}!function(V){if(V._registeredForLateAnimationBindings.length){for(let I=0;I<V._registeredForLateAnimationBindings.length;I++){const A=V._registeredForLateAnimationBindings.data[I];for(const V in A._lateAnimationHolders){const I=A._lateAnimationHolders[V],F=I.animations[0],E=I.originalValue;if(void 0===E||null===E)continue;const Y=B.d.AllowMatrixDecomposeForInterpolation&&E.m;let H=A[V];if(Y)H=J(I);else if(void 0!==E.w)H=G(I,H||c.Quaternion.Identity());else{let V=0,A=1;const Y=F&&F._animationState.loopMode===B.d.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT;if(I.totalWeight<1)H=Y?E.clone?E.clone():E:F&&E.scale?E.scale(1-I.totalWeight):F?E*(1-I.totalWeight):E.clone?E.clone():E;else if(F){A=I.totalWeight;const B=F.weight/A;H=1!==B?F.currentValue.scale?F.currentValue.scale(B):F.currentValue*B:F.currentValue,Y&&(H.addToRef?H.addToRef(E,H):H+=E),V=1}for(let B=V;B<I.animations.length;B++){const V=I.animations[B],F=V.weight/A;F&&(V.currentValue.scaleAndAddToRef?V.currentValue.scaleAndAddToRef(F,H):H+=V.currentValue*F)}for(let B=0;B<I.additiveAnimations.length;B++){const V=I.additiveAnimations[B],A=V.weight;A&&(V.currentValue.scaleAndAddToRef?V.currentValue.scaleAndAddToRef(A,H):H+=V.currentValue*A)}}A[V]=H}A._lateAnimationHolders={}}V._registeredForLateAnimationBindings.reset()}}(this)},w.prototype.sortActiveAnimatables=function(){this._activeAnimatables.sort(((V,I)=>V.playOrder-I.playOrder))},w.prototype.beginWeightedAnimation=function(V,I,A){let B=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,F=arguments.length>4?arguments[4]:void 0,E=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,Y=arguments.length>6?arguments[6]:void 0,H=arguments.length>7?arguments[7]:void 0,c=arguments.length>8?arguments[8]:void 0,b=arguments.length>9?arguments[9]:void 0,X=arguments.length>10&&void 0!==arguments[10]&&arguments[10];const P=this.beginAnimation(V,I,A,F,E,Y,H,!1,c,b,X);return P.weight=B,P},w.prototype.beginAnimation=function(V,I,A,B){let F=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,E=arguments.length>5?arguments[5]:void 0,Y=arguments.length>6?arguments[6]:void 0,H=!(arguments.length>7&&void 0!==arguments[7])||arguments[7],c=arguments.length>8?arguments[8]:void 0,b=arguments.length>9?arguments[9]:void 0,X=arguments.length>10&&void 0!==arguments[10]&&arguments[10];if(F<0){const V=I;I=A,A=V,F=-F}I>A&&(F=-F),H&&this.stopAnimation(V,void 0,c),Y||(Y=new P(this,V,I,A,B,F,E,void 0,b,X));const J=!c||c(V);if(V.animations&&J&&Y.appendAnimations(V,V.animations),V.getAnimatables){const X=V.getAnimatables();for(let V=0;V<X.length;V++)this.beginAnimation(X[V],I,A,B,F,E,Y,H,c,b)}return Y.reset(),Y},w.prototype.beginHierarchyAnimation=function(V,I,A,B,F){let E=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,Y=arguments.length>6?arguments[6]:void 0,H=arguments.length>7?arguments[7]:void 0,c=!(arguments.length>8&&void 0!==arguments[8])||arguments[8],b=arguments.length>9?arguments[9]:void 0,X=arguments.length>11&&void 0!==arguments[11]&&arguments[11];const P=V.getDescendants(I),J=[];J.push(this.beginAnimation(V,A,B,F,E,Y,H,c,b,void 0,X));for(const G of P)J.push(this.beginAnimation(G,A,B,F,E,Y,H,c,b,void 0,X));return J},w.prototype.beginDirectAnimation=function(V,I,A,B,F){let E=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1;if(E<0){const V=A;A=B,B=V,E=-E}return A>B&&(E=-E),new P(this,V,A,B,F,E,arguments.length>6?arguments[6]:void 0,I,arguments.length>7?arguments[7]:void 0,arguments.length>8&&void 0!==arguments[8]&&arguments[8])},w.prototype.beginDirectHierarchyAnimation=function(V,I,A,B,F,E,Y,H,c){let b=arguments.length>9&&void 0!==arguments[9]&&arguments[9];const X=V.getDescendants(I),P=[];P.push(this.beginDirectAnimation(V,A,B,F,E,Y,H,c,b));for(const J of X)P.push(this.beginDirectAnimation(J,A,B,F,E,Y,H,c,b));return P},w.prototype.getAnimatableByTarget=function(V){for(let I=0;I<this._activeAnimatables.length;I++)if(this._activeAnimatables[I].target===V)return this._activeAnimatables[I];return null},w.prototype.getAllAnimatablesByTarget=function(V){const I=[];for(let A=0;A<this._activeAnimatables.length;A++)this._activeAnimatables[A].target===V&&I.push(this._activeAnimatables[A]);return I},w.prototype.stopAnimation=function(V,I,A){const B=this.getAllAnimatablesByTarget(V);for(const F of B)F.stop(I,A)},w.prototype.stopAllAnimations=function(){if(this._activeAnimatables){for(let V=0;V<this._activeAnimatables.length;V++)this._activeAnimatables[V].stop(void 0,void 0,!0);this._activeAnimatables.length=0}for(const V of this.animationGroups)V.stop()});class W{getClassName(){return"TargetedAnimation"}serialize(){const V={};return V.animation=this.animation.serialize(),V.targetId=this.target.id,V}}class g{get mask(){return this._mask}set mask(V){this._mask!==V&&(this._mask=V,this.syncWithMask(!0))}syncWithMask(){let V=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(this.mask||V){this._numActiveAnimatables=0;for(let V=0;V<this._animatables.length;++V){const I=this._animatables[V];!this.mask||this.mask.disabled||this.mask.retainsTarget(I.target.name)?(this._numActiveAnimatables++,I.paused&&I.restart()):I.paused||I.pause()}}else this._numActiveAnimatables=this._targetedAnimations.length}removeUnmaskedAnimations(){if(this.mask&&!this.mask.disabled){for(let V=0;V<this._animatables.length;++V){const I=this._animatables[V];this.mask.retainsTarget(I.target.name)||(I.stop(),this._animatables.splice(V,1),--V)}for(let V=0;V<this._targetedAnimations.length;V++){const I=this._targetedAnimations[V];this.mask.retainsTarget(I.target.name)||(this._targetedAnimations.splice(V,1),--V)}}}get from(){return this._from}set from(V){if(this._from!==V){this._from=V;for(let V=0;V<this._animatables.length;V++){this._animatables[V].fromFrame=this._from}}}get to(){return this._to}set to(V){if(this._to!==V){this._to=V;for(let V=0;V<this._animatables.length;V++){this._animatables[V].toFrame=this._to}}}get isStarted(){return this._isStarted}get isPlaying(){return this._isStarted&&!this._isPaused}get speedRatio(){return this._speedRatio}set speedRatio(V){if(this._speedRatio!==V){this._speedRatio=V;for(let V=0;V<this._animatables.length;V++){this._animatables[V].speedRatio=this._speedRatio}}}get loopAnimation(){return this._loopAnimation}set loopAnimation(V){if(this._loopAnimation!==V){this._loopAnimation=V;for(let V=0;V<this._animatables.length;V++){this._animatables[V].loopAnimation=this._loopAnimation}}}get isAdditive(){return this._isAdditive}set isAdditive(V){if(this._isAdditive!==V){this._isAdditive=V;for(let V=0;V<this._animatables.length;V++){this._animatables[V].isAdditive=this._isAdditive}}}get weight(){return this._weight}set weight(V){this._weight!==V&&(this._weight=V,this.setWeightForAllAnimatables(this._weight))}get targetedAnimations(){return this._targetedAnimations}get animatables(){return this._animatables}get children(){return this._targetedAnimations}get playOrder(){return this._playOrder}set playOrder(V){if(this._playOrder!==V&&(this._playOrder=V,this._animatables.length>0)){for(let V=0;V<this._animatables.length;V++)this._animatables[V].playOrder=this._playOrder;this._scene.sortActiveAnimatables()}}get enableBlending(){return this._enableBlending}set enableBlending(V){if(this._enableBlending!==V&&(this._enableBlending=V,null!==V))for(let I=0;I<this._targetedAnimations.length;++I)this._targetedAnimations[I].animation.enableBlending=V}get blendingSpeed(){return this._blendingSpeed}set blendingSpeed(V){if(this._blendingSpeed!==V&&(this._blendingSpeed=V,null!==V))for(let I=0;I<this._targetedAnimations.length;++I)this._targetedAnimations[I].animation.blendingSpeed=V}getLength(V,I){V=V??this._from;return((I=I??this._to)-V)/(this.targetedAnimations[0].animation.framePerSecond*this._speedRatio)}static MergeAnimationGroups(V){let I=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],A=arguments.length>2&&void 0!==arguments[2]&&arguments[2],B=arguments.length>3?arguments[3]:void 0;if(0===V.length)return null;B=B??V[0].weight;let F=Number.MAX_VALUE,E=-Number.MAX_VALUE;if(A)for(const H of V)H.from<F&&(F=H.from),H.to>E&&(E=H.to);const Y=new g(V[0].name+"_merged",V[0]._scene,B);for(const H of V){A&&H.normalize(F,E);for(const V of H.targetedAnimations)Y.addTargetedAnimation(V.animation,V.target);I&&H.dispose()}return Y}constructor(V){let I=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,A=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,B=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;this.name=V,this._targetedAnimations=new Array,this._animatables=new Array,this._from=Number.MAX_VALUE,this._to=-Number.MAX_VALUE,this._speedRatio=1,this._loopAnimation=!1,this._isAdditive=!1,this._weight=-1,this._playOrder=0,this._enableBlending=null,this._blendingSpeed=null,this._numActiveAnimatables=0,this._shouldStart=!0,this._parentContainer=null,this.onAnimationEndObservable=new F.c,this.onAnimationLoopObservable=new F.c,this.onAnimationGroupLoopObservable=new F.c,this.onAnimationGroupEndObservable=new F.c,this.onAnimationGroupPauseObservable=new F.c,this.onAnimationGroupPlayObservable=new F.c,this.metadata=null,this._mask=null,this._animationLoopFlags=[],this._scene=I||E.e.LastCreatedScene,this._weight=A,this._playOrder=B,this.uniqueId=this._scene.getUniqueId(),this._scene.addAnimationGroup(this)}addTargetedAnimation(V,I){const A=new W;A.animation=V,A.target=I;const B=V.getKeys();return this._from>B[0].frame&&(this._from=B[0].frame),this._to<B[B.length-1].frame&&(this._to=B[B.length-1].frame),null!==this._enableBlending&&(V.enableBlending=this._enableBlending),null!==this._blendingSpeed&&(V.blendingSpeed=this._blendingSpeed),this._targetedAnimations.push(A),this._shouldStart=!0,A}removeTargetedAnimation(V){for(let I=this._targetedAnimations.length-1;I>-1;I--){this._targetedAnimations[I].animation===V&&this._targetedAnimations.splice(I,1)}}normalize(){let V=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,I=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;null==V&&(V=this._from),null==I&&(I=this._to);for(let A=0;A<this._targetedAnimations.length;A++){const B=this._targetedAnimations[A].animation.getKeys(),F=B[0],E=B[B.length-1];if(F.frame>V){const I={frame:V,value:F.value,inTangent:F.inTangent,outTangent:F.outTangent,interpolation:F.interpolation};B.splice(0,0,I)}if(E.frame<I){const V={frame:I,value:E.value,inTangent:E.inTangent,outTangent:E.outTangent,interpolation:E.interpolation};B.push(V)}}return this._from=V,this._to=I,this}_processLoop(V,I,A){V.onAnimationLoop=()=>{this.onAnimationLoopObservable.notifyObservers(I),this._animationLoopFlags[A]||(this._animationLoopFlags[A]=!0,this._animationLoopCount++,this._animationLoopCount===this._numActiveAnimatables&&(this.onAnimationGroupLoopObservable.notifyObservers(this),this._animationLoopCount=0,this._animationLoopFlags.length=0))}}start(){let V=arguments.length>0&&void 0!==arguments[0]&&arguments[0],I=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,A=arguments.length>2?arguments[2]:void 0,B=arguments.length>3?arguments[3]:void 0,F=arguments.length>4?arguments[4]:void 0;if(this._isStarted||0===this._targetedAnimations.length)return this;this._loopAnimation=V,this._shouldStart=!1,this._animationLoopCount=0,this._animationLoopFlags.length=0;for(let E=0;E<this._targetedAnimations.length;E++){const Y=this._targetedAnimations[E],H=this._scene.beginDirectAnimation(Y.target,[Y.animation],void 0!==A?A:this._from,void 0!==B?B:this._to,V,I,void 0,void 0,void 0!==F?F:this._isAdditive);H.weight=this._weight,H.playOrder=this._playOrder,H.onAnimationEnd=()=>{this.onAnimationEndObservable.notifyObservers(Y),this._checkAnimationGroupEnded(H)},this._processLoop(H,Y,E),this._animatables.push(H)}return this.syncWithMask(),this._scene.sortActiveAnimatables(),this._speedRatio=I,this._isStarted=!0,this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}pause(){if(!this._isStarted)return this;this._isPaused=!0;for(let V=0;V<this._animatables.length;V++){this._animatables[V].pause()}return this.onAnimationGroupPauseObservable.notifyObservers(this),this}play(V){return this.isStarted&&this._animatables.length&&!this._shouldStart?(void 0!==V&&(this.loopAnimation=V),this.restart()):(this.stop(),this.start(V,this._speedRatio)),this}reset(){if(!this._isStarted)return this.play(),this.goToFrame(0),this.stop(!0),this;for(let V=0;V<this._animatables.length;V++){this._animatables[V].reset()}return this}restart(){if(!this._isStarted)return this;for(let V=0;V<this._animatables.length;V++){this._animatables[V].restart()}return this.syncWithMask(),this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}stop(){let V=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this._isStarted)return this;const I=this._animatables.slice();for(let B=0;B<I.length;B++)I[B].stop(void 0,void 0,!0,V);let A=0;for(let B=0;B<this._scene._activeAnimatables.length;B++){const I=this._scene._activeAnimatables[B];I._runtimeAnimations.length>0?this._scene._activeAnimatables[A++]=I:V&&this._checkAnimationGroupEnded(I,V)}return this._scene._activeAnimatables.length=A,this._isStarted=!1,this}setWeightForAllAnimatables(V){for(let I=0;I<this._animatables.length;I++){this._animatables[I].weight=V}return this}syncAllAnimationsWith(V){for(let I=0;I<this._animatables.length;I++){this._animatables[I].syncWith(V)}return this}goToFrame(V){let I=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this._isStarted)return this;for(let A=0;A<this._animatables.length;A++){this._animatables[A].goToFrame(V,I)}return this}getCurrentFrame(){var V;return(null===(V=this.animatables[0])||void 0===V?void 0:V.masterFrame)||0}dispose(){this.isStarted&&this.stop(),this._targetedAnimations.length=0,this._animatables.length=0;const V=this._scene.animationGroups.indexOf(this);if(V>-1&&this._scene.animationGroups.splice(V,1),this._parentContainer){const V=this._parentContainer.animationGroups.indexOf(this);V>-1&&this._parentContainer.animationGroups.splice(V,1),this._parentContainer=null}this.onAnimationEndObservable.clear(),this.onAnimationGroupEndObservable.clear(),this.onAnimationGroupPauseObservable.clear(),this.onAnimationGroupPlayObservable.clear(),this.onAnimationLoopObservable.clear(),this.onAnimationGroupLoopObservable.clear()}_checkAnimationGroupEnded(V){let I=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const A=this._animatables.indexOf(V);A>-1&&this._animatables.splice(A,1),this._animatables.length===this._targetedAnimations.length-this._numActiveAnimatables&&(this._isStarted=!1,I||this.onAnimationGroupEndObservable.notifyObservers(this),this._animatables.length=0)}clone(V,I){let A=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const B=new g(V||this.name,this._scene,this._weight,this._playOrder);B._from=this.from,B._to=this.to,B._speedRatio=this.speedRatio,B._loopAnimation=this.loopAnimation,B._isAdditive=this.isAdditive,B._enableBlending=this.enableBlending,B._blendingSpeed=this.blendingSpeed,B.metadata=this.metadata,B.mask=this.mask;for(const F of this._targetedAnimations)B.addTargetedAnimation(A?F.animation.clone():F.animation,I?I(F.target):F.target);return B}serialize(){const V={};V.name=this.name,V.from=this.from,V.to=this.to,V.speedRatio=this.speedRatio,V.loopAnimation=this.loopAnimation,V.isAdditive=this.isAdditive,V.weight=this.weight,V.playOrder=this.playOrder,V.enableBlending=this.enableBlending,V.blendingSpeed=this.blendingSpeed,V.targetedAnimations=[];for(let I=0;I<this.targetedAnimations.length;I++){const A=this.targetedAnimations[I];V.targetedAnimations[I]=A.serialize()}return Y.b&&Y.b.HasTags(this)&&(V.tags=Y.b.GetTags(this)),this.metadata&&(V.metadata=this.metadata),V}static Parse(V,I){const A=new g(V.name,I,V.weight,V.playOrder);for(let F=0;F<V.targetedAnimations.length;F++){const E=V.targetedAnimations[F],Y=B.d.Parse(E.animation),H=E.targetId;if("influence"===E.animation.property){const V=I.getMorphTargetById(H);V&&A.addTargetedAnimation(Y,V)}else{const V=I.getNodeById(H);null!=V&&A.addTargetedAnimation(Y,V)}}return Y.b&&Y.b.AddTagsTo(A,V.tags),null!==V.from&&null!==V.to&&A.normalize(V.from,V.to),void 0!==V.speedRatio&&(A._speedRatio=V.speedRatio),void 0!==V.loopAnimation&&(A._loopAnimation=V.loopAnimation),void 0!==V.isAdditive&&(A._isAdditive=V.isAdditive),void 0!==V.weight&&(A._weight=V.weight),void 0!==V.playOrder&&(A._playOrder=V.playOrder),void 0!==V.enableBlending&&(A._enableBlending=V.enableBlending),void 0!==V.blendingSpeed&&(A._blendingSpeed=V.blendingSpeed),void 0!==V.metadata&&(A.metadata=V.metadata),A}static MakeAnimationAdditive(V,I,A){let F;F="object"===typeof I?I:{referenceFrame:I,range:A,cloneOriginalAnimationGroup:arguments.length>3&&void 0!==arguments[3]&&arguments[3],clonedAnimationName:arguments.length>4?arguments[4]:void 0};let E=V;F.cloneOriginalAnimationGroup&&(E=V.clone(F.clonedAnimationGroupName||E.name));const Y=E.targetedAnimations;for(let H=0;H<Y.length;H++){const V=Y[H];V.animation=B.d.MakeAnimationAdditive(V.animation,F)}if(E.isAdditive=!0,F.clipKeys){let V=Number.MAX_VALUE,I=-Number.MAX_VALUE;const A=E.targetedAnimations;for(let B=0;B<A.length;B++){const F=A[B].animation.getKeys();V>F[0].frame&&(V=F[0].frame),I<F[F.length-1].frame&&(I=F[F.length-1].frame)}E._from=V,E._to=I}return E}static ClipKeys(V,I,A,B,F){const E=V.clone(B||V.name);return g.ClipKeysInPlace(E,I,A,F)}static ClipKeysInPlace(V,I,A,B){return g.ClipInPlace(V,I,A,B,!1)}static ClipFrames(V,I,A,B,F){const E=V.clone(B||V.name);return g.ClipFramesInPlace(E,I,A,F)}static ClipFramesInPlace(V,I,A,B){return g.ClipInPlace(V,I,A,B,!0)}static ClipInPlace(V,I,A,B){let F=arguments.length>4&&void 0!==arguments[4]&&arguments[4],E=Number.MAX_VALUE,Y=-Number.MAX_VALUE;const H=V.targetedAnimations;for(let c=0;c<H.length;c++){const V=H[c],b=B?V.animation:V.animation.clone();F&&(b.createKeyForFrame(I),b.createKeyForFrame(A));const X=b.getKeys(),P=[];let J=Number.MAX_VALUE;for(let B=0;B<X.length;B++){const V=X[B];if(!F&&B>=I&&B<=A||F&&V.frame>=I&&V.frame<=A){const I={frame:V.frame,value:V.value.clone?V.value.clone():V.value,inTangent:V.inTangent,outTangent:V.outTangent,interpolation:V.interpolation,lockedTangent:V.lockedTangent};J===Number.MAX_VALUE&&(J=I.frame),I.frame-=J,P.push(I)}}0!==P.length?(E>P[0].frame&&(E=P[0].frame),Y<P[P.length-1].frame&&(Y=P[P.length-1].frame),b.setKeys(P,!0),V.animation=b):(H.splice(c,1),c--)}return V._from=E,V._to=Y,V}getClassName(){return"AnimationGroup"}toString(V){let I="Name: "+this.name;return I+=", type: "+this.getClassName(),V&&(I+=", from: "+this._from,I+=", to: "+this._to,I+=", isStarted: "+this._isStarted,I+=", speedRatio: "+this._speedRatio,I+=", targetedAnimations length: "+this._targetedAnimations.length,I+=", animatables length: "+this._animatables),I}}}}]);