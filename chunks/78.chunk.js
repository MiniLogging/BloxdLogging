"use strict";(self.fwuvyyymhp8=self.fwuvyyymhp8||[]).push([[78],{15517:(N,U,V)=>{V.r(U),V.d(U,{AnimationGroup:()=>r,TargetedAnimation:()=>d});var A=V(12876),t=V(12182),n=V(12223),q=V(12420),i=V(13961),z=V(12383);class S{get currentFrame(){return this._currentFrame}get weight(){return this._weight}get currentValue(){return this._currentValue}get targetPath(){return this._targetPath}get target(){return this._currentActiveTarget}get isAdditive(){return this._host&&this._host.isAdditive}constructor(N,U,V,t){if(this._events=new Array,this._currentFrame=0,this._originalValue=new Array,this._originalBlendValue=null,this._offsetsCache={},this._highLimitsCache={},this._stopped=!1,this._blendingFactor=0,this._currentValue=null,this._currentActiveTarget=null,this._directTarget=null,this._targetPath="",this._weight=1,this._absoluteFrameOffset=0,this._previousElapsedTime=0,this._yoyoDirection=1,this._previousAbsoluteFrame=0,this._targetIsArray=!1,this._coreRuntimeAnimation=null,this._animation=U,this._target=N,this._scene=V,this._host=t,this._activeTargets=[],U._runtimeAnimations.push(this),this._animationState={key:0,repeatCount:0,loopMode:this._getCorrectLoopMode()},this._animation.dataType===A.e.ANIMATIONTYPE_MATRIX&&(this._animationState.workValue=z.Matrix.Zero()),this._keys=this._animation.getKeys(),this._minFrame=this._keys[0].frame,this._maxFrame=this._keys[this._keys.length-1].frame,this._minValue=this._keys[0].value,this._maxValue=this._keys[this._keys.length-1].value,0!==this._minFrame){const N={frame:0,value:this._minValue};this._keys.splice(0,0,N)}if(this._target instanceof Array){let N=0;for(const U of this._target)this._preparePath(U,N),this._getOriginalValues(N),N++;this._targetIsArray=!0}else this._preparePath(this._target),this._getOriginalValues(),this._targetIsArray=!1,this._directTarget=this._activeTargets[0];const n=U.getEvents();if(n&&n.length>0)for(const A of n)this._events.push(A._clone());this._enableBlending=N&&N.animationPropertiesOverride?N.animationPropertiesOverride.enableBlending:this._animation.enableBlending}_preparePath(N){let U=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const V=this._animation.targetPropertyPath;if(V.length>1){let A=N;for(let N=0;N<V.length-1;N++){const U=V[N];if(A=A[U],void 0===A)throw new Error(`Invalid property (${U}) in property path (${V.join(".")})`)}this._targetPath=V[V.length-1],this._activeTargets[U]=A}else this._targetPath=V[0],this._activeTargets[U]=N;if(void 0===this._activeTargets[U][this._targetPath])throw new Error(`Invalid property (${this._targetPath}) in property path (${V.join(".")})`)}get animation(){return this._animation}reset(){if(arguments.length>0&&void 0!==arguments[0]&&arguments[0])if(this._target instanceof Array){let N=0;for(const U of this._target)void 0!==this._originalValue[N]&&this._setValue(U,this._activeTargets[N],this._originalValue[N],-1,N),N++}else void 0!==this._originalValue[0]&&this._setValue(this._target,this._directTarget,this._originalValue[0],-1,0);this._offsetsCache={},this._highLimitsCache={},this._currentFrame=0,this._blendingFactor=0;for(let N=0;N<this._events.length;N++)this._events[N].isDone=!1}isStopped(){return this._stopped}dispose(){const N=this._animation.runtimeAnimations.indexOf(this);N>-1&&this._animation.runtimeAnimations.splice(N,1)}setValue(N,U){if(this._targetIsArray)for(let V=0;V<this._target.length;V++){const A=this._target[V];this._setValue(A,this._activeTargets[V],N,U,V)}else this._setValue(this._target,this._directTarget,N,U,0)}_getOriginalValues(){let N,U=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;const V=this._activeTargets[U];N=V.getLocalMatrix&&"_matrix"===this._targetPath?V.getLocalMatrix():V[this._targetPath],N&&N.clone?this._originalValue[U]=N.clone():this._originalValue[U]=N}_registerTargetForLateAnimationBinding(N,U){const V=N.target;this._scene._registeredForLateAnimationBindings.pushNoDuplicate(V),V._lateAnimationHolders||(V._lateAnimationHolders={}),V._lateAnimationHolders[N.targetPath]||(V._lateAnimationHolders[N.targetPath]={totalWeight:0,totalAdditiveWeight:0,animations:[],additiveAnimations:[],originalValue:U}),N.isAdditive?(V._lateAnimationHolders[N.targetPath].additiveAnimations.push(N),V._lateAnimationHolders[N.targetPath].totalAdditiveWeight+=N.weight):(V._lateAnimationHolders[N.targetPath].animations.push(N),V._lateAnimationHolders[N.targetPath].totalWeight+=N.weight)}_setValue(N,U,V,t,n){if(this._currentActiveTarget=U,this._weight=t,this._enableBlending&&this._blendingFactor<=1){if(!this._originalBlendValue){const N=U[this._targetPath];N.clone?this._originalBlendValue=N.clone():this._originalBlendValue=N}this._originalBlendValue.m?A.e.AllowMatrixDecomposeForInterpolation?this._currentValue?z.Matrix.DecomposeLerpToRef(this._originalBlendValue,V,this._blendingFactor,this._currentValue):this._currentValue=z.Matrix.DecomposeLerp(this._originalBlendValue,V,this._blendingFactor):this._currentValue?z.Matrix.LerpToRef(this._originalBlendValue,V,this._blendingFactor,this._currentValue):this._currentValue=z.Matrix.Lerp(this._originalBlendValue,V,this._blendingFactor):this._currentValue=A.e._UniversalLerp(this._originalBlendValue,V,this._blendingFactor);const t=N&&N.animationPropertiesOverride?N.animationPropertiesOverride.blendingSpeed:this._animation.blendingSpeed;this._blendingFactor+=t}else this._currentValue?this._currentValue.A?this._currentValue.A(V):this._currentValue=V:null!==V&&void 0!==V&&V.clone?this._currentValue=V.clone():this._currentValue=V;-1!==t?this._registerTargetForLateAnimationBinding(this,this._originalValue[n]):this._animationState.loopMode===A.e.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT?this._currentValue.addToRef?this._currentValue.addToRef(this._originalValue[n],U[this._targetPath]):U[this._targetPath]=this._originalValue[n]+this._currentValue:U[this._targetPath]=this._currentValue,N.FS&&N.FS(this._animation.targetProperty)}_getCorrectLoopMode(){return this._target&&this._target.animationPropertiesOverride?this._target.animationPropertiesOverride.loopMode:this._animation.loopMode}goToFrame(N){let U=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const V=this._animation.getKeys();N<V[0].frame?N=V[0].frame:N>V[V.length-1].frame&&(N=V[V.length-1].frame);const A=this._events;if(A.length)for(let n=0;n<A.length;n++)A[n].onlyOnce||(A[n].isDone=A[n].frame<N);this._currentFrame=N;const t=this._animation._interpolate(N,this._animationState);this.setValue(t,U)}_prepareForSpeedRatioChange(N){const U=this._previousElapsedTime*(this._animation.framePerSecond*N)/1e3;this._absoluteFrameOffset=this._previousAbsoluteFrame-U}animate(N,U,V,t,n){let q=arguments.length>5&&void 0!==arguments[5]?arguments[5]:-1;const i=this._animation,z=i.targetPropertyPath;if(!z||z.length<1)return this._stopped=!0,!1;let S,E=!0;const p=this._events;let k=0;if(this._coreRuntimeAnimation)k=V-U,S=this._coreRuntimeAnimation.currentFrame,this._currentFrame=S,this._animationState.repeatCount=this._coreRuntimeAnimation._animationState.repeatCount,this._animationState.highLimitValue=this._coreRuntimeAnimation._animationState.highLimitValue,this._animationState.offsetValue=this._coreRuntimeAnimation._animationState.offsetValue;else{let q;(U<this._minFrame||U>this._maxFrame)&&(U=this._minFrame),(V<this._minFrame||V>this._maxFrame)&&(V=this._maxFrame),k=V-U;let z=N*(i.framePerSecond*n)/1e3+this._absoluteFrameOffset,B=0,C=!1;const x=t&&this._animationState.loopMode===A.e.ANIMATIONLOOPMODE_YOYO;if(x){const N=(z-U)/k,V=Math.sin(N*Math.PI);z=Math.abs(V)*k+U;const A=V>=0?1:-1;this._yoyoDirection!==A&&(C=!0),this._yoyoDirection=A}if(this._previousElapsedTime=N,this._previousAbsoluteFrame=z,!t&&V>=U&&(z>=k&&n>0||z<=0&&n<0))E=!1,B=i._getKeyValue(this._maxValue);else if(!t&&U>=V&&(z<=k&&n<0||z>=0&&n>0))E=!1,B=i._getKeyValue(this._minValue);else if(this._animationState.loopMode!==A.e.ANIMATIONLOOPMODE_CYCLE){const N=V.toString()+U.toString();if(!this._offsetsCache[N]){this._animationState.repeatCount=0,this._animationState.loopMode=A.e.ANIMATIONLOOPMODE_CYCLE;const t=i._interpolate(U,this._animationState),n=i._interpolate(V,this._animationState);switch(this._animationState.loopMode=this._getCorrectLoopMode(),i.dataType){case A.e.ANIMATIONTYPE_FLOAT:this._offsetsCache[N]=n-t;break;case A.e.ANIMATIONTYPE_QUATERNION:case A.e.ANIMATIONTYPE_VECTOR3:case A.e.ANIMATIONTYPE_VECTOR2:case A.e.ANIMATIONTYPE_SIZE:case A.e.ANIMATIONTYPE_COLOR3:this._offsetsCache[N]=n.xU(t)}this._highLimitsCache[N]=n}B=this._highLimitsCache[N],q=this._offsetsCache[N]}if(void 0===q)switch(i.dataType){case A.e.ANIMATIONTYPE_FLOAT:q=0;break;case A.e.ANIMATIONTYPE_QUATERNION:q=A.i;break;case A.e.ANIMATIONTYPE_VECTOR3:q=A.s;break;case A.e.ANIMATIONTYPE_VECTOR2:q=A.o;break;case A.e.ANIMATIONTYPE_SIZE:q=A.m;break;case A.e.ANIMATIONTYPE_COLOR3:q=A.f;break;case A.e.ANIMATIONTYPE_COLOR4:q=A.h}if(this._host&&this._host.syncRoot){const N=this._host.syncRoot;S=U+k*((N.masterFrame-N.fromFrame)/(N.toFrame-N.fromFrame))}else S=z>0&&U>V||z<0&&U<V?E&&0!==k?V+z%k:U:E&&0!==k?U+z%k:V;if(!x&&(n>0&&this.currentFrame>S||n<0&&this.currentFrame<S)||x&&C){this._onLoop();for(let N=0;N<p.length;N++)p[N].onlyOnce||(p[N].isDone=!1);this._animationState.key=n>0?0:i.getKeys().length-1}this._currentFrame=S,this._animationState.repeatCount=0===k?0:z/k|0,this._animationState.highLimitValue=B,this._animationState.offsetValue=q}const B=i._interpolate(S,this._animationState);if(this.setValue(B,q),p.length)for(let A=0;A<p.length;A++)if(k>=0&&S>=p[A].frame&&p[A].frame>=U||k<0&&S<=p[A].frame&&p[A].frame<=U){const N=p[A];N.isDone||(N.onlyOnce&&(p.splice(A,1),A--),N.isDone=!0,N.action(S))}return E||(this._stopped=!0),E}}var E=V(12200);class p{get syncRoot(){return this._syncRoot}get masterFrame(){return 0===this._runtimeAnimations.length?0:this._runtimeAnimations[0].currentFrame}get weight(){return this._weight}set weight(N){this._weight=-1!==N?Math.min(Math.max(N,0),1):-1}get speedRatio(){return this._speedRatio}set speedRatio(N){for(let U=0;U<this._runtimeAnimations.length;U++){this._runtimeAnimations[U]._prepareForSpeedRatioChange(N)}this._speedRatio=N,null!==this._goToFrame&&this.goToFrame(this._goToFrame)}get elapsedTime(){return null===this._localDelayOffset?0:this._scene._animationTime-this._localDelayOffset}constructor(N,U){let V=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,A=arguments.length>3&&void 0!==arguments[3]?arguments[3]:100,n=arguments.length>4&&void 0!==arguments[4]&&arguments[4],q=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,i=arguments.length>6?arguments[6]:void 0,z=arguments.length>7?arguments[7]:void 0,S=arguments.length>8?arguments[8]:void 0,E=arguments.length>9&&void 0!==arguments[9]&&arguments[9],p=arguments.length>10&&void 0!==arguments[10]?arguments[10]:0;this.target=U,this.fromFrame=V,this.toFrame=A,this.loopAnimation=n,this.onAnimationEnd=i,this.onAnimationLoop=S,this.isAdditive=E,this.playOrder=p,this._localDelayOffset=null,this._pausedDelay=null,this._manualJumpDelay=null,this._runtimeAnimations=new Array,this.yq=!1,this._speedRatio=1,this._weight=-1,this._previousWeight=-1,this._syncRoot=null,this._frameToSyncFromJump=null,this._goToFrame=null,this.disposeOnEnd=!0,this.animationStarted=!1,this.onAnimationEndObservable=new t.d,this.onAnimationLoopObservable=new t.d,this._scene=N,z&&this.appendAnimations(U,z),this._speedRatio=q,N._activeAnimatables.push(this)}syncWith(N){if(this._syncRoot=N,N){const N=this._scene._activeAnimatables.indexOf(this);N>-1&&(this._scene._activeAnimatables.splice(N,1),this._scene._activeAnimatables.push(this))}return this}getAnimations(){return this._runtimeAnimations}appendAnimations(N,U){for(let V=0;V<U.length;V++){const A=U[V],t=new S(N,A,this._scene,this);t._onLoop=()=>{this.onAnimationLoopObservable.notifyObservers(this),this.onAnimationLoop&&this.onAnimationLoop()},this._runtimeAnimations.push(t)}}getAnimationByTargetProperty(N){const U=this._runtimeAnimations;for(let V=0;V<U.length;V++)if(U[V].animation.targetProperty===N)return U[V].animation;return null}getRuntimeAnimationByTargetProperty(N){const U=this._runtimeAnimations;for(let V=0;V<U.length;V++)if(U[V].animation.targetProperty===N)return U[V];return null}reset(){const N=this._runtimeAnimations;for(let U=0;U<N.length;U++)N[U].reset(!0);this._localDelayOffset=null,this._pausedDelay=null}enableBlending(N){const U=this._runtimeAnimations;for(let V=0;V<U.length;V++)U[V].animation.enableBlending=!0,U[V].animation.blendingSpeed=N}disableBlending(){const N=this._runtimeAnimations;for(let U=0;U<N.length;U++)N[U].animation.enableBlending=!1}goToFrame(N){let U=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const V=this._runtimeAnimations;if(V[0]){const U=V[0].animation.framePerSecond;this._frameToSyncFromJump=this._frameToSyncFromJump??V[0].currentFrame;const A=0===this.speedRatio?0:(N-this._frameToSyncFromJump)/U*1e3/this.speedRatio;this._manualJumpDelay=-A}for(let A=0;A<V.length;A++)V[A].goToFrame(N,U?this._weight:-1);this._goToFrame=N}get paused(){return this.yq}pause(){this.yq||(this.yq=!0)}restart(){this.yq=!1}_raiseOnAnimationEnd(){this.onAnimationEnd&&this.onAnimationEnd(),this.onAnimationEndObservable.notifyObservers(this)}stop(N,U){let V=arguments.length>2&&void 0!==arguments[2]&&arguments[2],A=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(N||U){const t=this._scene._activeAnimatables.indexOf(this);if(t>-1){const n=this._runtimeAnimations;for(let V=n.length-1;V>=0;V--){const A=n[V];N&&A.animation.name!=N||(U&&!U(A.target)||(A.dispose(),n.splice(V,1)))}0==n.length&&(V||this._scene._activeAnimatables.splice(t,1),A||this._raiseOnAnimationEnd())}}else{const N=this._scene._activeAnimatables.indexOf(this);if(N>-1){V||this._scene._activeAnimatables.splice(N,1);const U=this._runtimeAnimations;for(let N=0;N<U.length;N++)U[N].dispose();this._runtimeAnimations.length=0,A||this._raiseOnAnimationEnd()}}}async waitAsync(){return await new Promise((N=>{this.onAnimationEndObservable.add((()=>{N(this)}),void 0,void 0,this,!0)}))}_animate(N){if(this.yq)return this.animationStarted=!1,null===this._pausedDelay&&(this._pausedDelay=N),!0;if(null===this._localDelayOffset?(this._localDelayOffset=N,this._pausedDelay=null):null!==this._pausedDelay&&(this._localDelayOffset+=N-this._pausedDelay,this._pausedDelay=null),null!==this._manualJumpDelay&&(this._localDelayOffset+=this.speedRatio<0?-this._manualJumpDelay:this._manualJumpDelay,this._manualJumpDelay=null,this._frameToSyncFromJump=null),this._goToFrame=null,0===this._weight&&0===this._previousWeight)return!0;this._previousWeight=this._weight;let U=!1;const V=this._runtimeAnimations;let A;for(A=0;A<V.length;A++){const t=V[A].animate(N-this._localDelayOffset,this.fromFrame,this.toFrame,this.loopAnimation,this._speedRatio,this._weight);U=U||t}if(this.animationStarted=U,!U){if(this.disposeOnEnd)for(A=this._scene._activeAnimatables.indexOf(this),this._scene._activeAnimatables.splice(A,1),A=0;A<V.length;A++)V[A].dispose();this._raiseOnAnimationEnd(),this.disposeOnEnd&&(this.onAnimationEnd=null,this.onAnimationLoop=null,this.onAnimationLoopObservable.clear(),this.onAnimationEndObservable.clear())}return U}}function k(N){if(0===N.totalWeight&&0===N.totalAdditiveWeight)return N.originalValue;let U=1;const V=z.TmpVectors.CU[0],A=z.TmpVectors.CU[1],t=z.TmpVectors.Quaternion[0];let n=0;const q=N.animations[0],i=N.originalValue;let S=1,E=!1;if(N.totalWeight<1)S=1-N.totalWeight,i.decompose(A,t,V);else{if(n=1,U=N.totalWeight,S=q.weight/U,1==S){if(!N.totalAdditiveWeight)return q.currentValue;E=!0}q.currentValue.decompose(A,t,V)}if(!E){A.scaleInPlace(S),V.scaleInPlace(S),t.scaleInPlace(S);for(let q=n;q<N.animations.length;q++){const n=N.animations[q];if(0===n.weight)continue;S=n.weight/U;const i=z.TmpVectors.CU[2],E=z.TmpVectors.CU[3],p=z.TmpVectors.Quaternion[1];n.currentValue.decompose(E,p,i),E.scaleAndAddToRef(S,A),p.scaleAndAddToRef(z.Quaternion.Dot(t,p)>0?S:-S,t),i.scaleAndAddToRef(S,V)}t.normalize()}for(let k=0;k<N.additiveAnimations.length;k++){const U=N.additiveAnimations[k];if(0===U.weight)continue;const n=z.TmpVectors.CU[2],q=z.TmpVectors.CU[3],i=z.TmpVectors.Quaternion[1];U.currentValue.decompose(q,i,n),q.multiplyToRef(A,q),z.CU.LerpToRef(A,q,U.weight,A),t.multiplyToRef(i,i),z.Quaternion.SlerpToRef(t,i,U.weight,t),n.scaleAndAddToRef(U.weight,V)}const p=q?q._animationState.workValue:z.TmpVectors.Matrix[0].clone();return z.Matrix.ComposeToRef(A,t,V,p),p}function B(N,U){if(0===N.totalWeight&&0===N.totalAdditiveWeight)return U;const V=N.animations[0],A=N.originalValue;let t=U;if(0===N.totalWeight&&N.totalAdditiveWeight>0)t.A(A);else if(1===N.animations.length){if(z.Quaternion.SlerpToRef(A,V.currentValue,Math.min(1,N.totalWeight),t),0===N.totalAdditiveWeight)return t}else if(N.animations.length>1){let V,n,q=1;if(N.totalWeight<1){const U=1-N.totalWeight;V=[],n=[],V.push(A),n.push(U)}else{if(2===N.animations.length&&(z.Quaternion.SlerpToRef(N.animations[0].currentValue,N.animations[1].currentValue,N.animations[1].weight/N.totalWeight,U),0===N.totalAdditiveWeight))return U;V=[],n=[],q=N.totalWeight}for(let U=0;U<N.animations.length;U++){const A=N.animations[U];V.push(A.currentValue),n.push(A.weight/q)}let i=0;for(let N=0;N<V.length;)N?(i+=n[N],z.Quaternion.SlerpToRef(t,V[N],n[N]/i,t),N++):(z.Quaternion.SlerpToRef(V[N],V[N+1],n[N+1]/(n[N]+n[N+1]),U),t=U,i=n[N]+n[N+1],N+=2)}for(let n=0;n<N.additiveAnimations.length;n++){const U=N.additiveAnimations[n];0!==U.weight&&(t.multiplyToRef(U.currentValue,z.TmpVectors.Quaternion[0]),z.Quaternion.SlerpToRef(t,z.TmpVectors.Quaternion[0],U.weight,t))}return t}var C,x,J=V(12601);C=J.e,(x=i.d)&&(x.prototype.copyAnimationRange=function(N,U,V){let t=arguments.length>3&&void 0!==arguments[3]&&arguments[3],n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;0===this.animations.length&&(this.animations.push(new A.e(this.name,"_matrix",N.animations[0].framePerSecond,A.e.ANIMATIONTYPE_MATRIX,0)),this.animations[0].setKeys([]));const q=N.animations[0].getRange(U);if(!q)return!1;const i=q.from,z=q.to,S=N.animations[0].getKeys(),E=N.length,p=N.getParent(),k=this.getParent(),B=t&&p&&E&&this.length&&E!==this.length,C=B&&k&&p?k.length/p.length:1,x=t&&!k&&n&&(1!==n.x||1!==n.y||1!==n.z),J=this.animations[0].getKeys();let d,r,v;for(let A=0,h=S.length;A<h;A++)d=S[A],d.frame>=i&&d.frame<=z&&(t?(v=d.value.clone(),B?(r=v.getTranslation(),v.setTranslation(r.scaleInPlace(C))):x&&n?(r=v.getTranslation(),v.setTranslation(r.multiplyInPlace(n))):v=d.value):v=d.value,J.push({frame:d.frame+V,value:v}));return this.animations[0].createRange(U,i+V,z+V),!0}),C&&(C.prototype._animate=function(N){if(!this.animationsEnabled)return;const U=E.b.Now;if(!this._animationTimeLast){if(this._pendingData.length>0)return;this._animationTimeLast=U}this.deltaTime=void 0!==N?N:this.useConstantAnimationDeltaTime?16:(U-this._animationTimeLast)*this.animationTimeScale,this._animationTimeLast=U;const V=this._activeAnimatables;if(0===V.length)return;this._animationTime+=this.deltaTime;const t=this._animationTime;for(let A=0;A<V.length;A++){const N=V[A];!N._animate(t)&&N.disposeOnEnd&&A--}!function(N){if(N._registeredForLateAnimationBindings.length){for(let U=0;U<N._registeredForLateAnimationBindings.length;U++){const V=N._registeredForLateAnimationBindings.data[U];for(const N in V._lateAnimationHolders){const U=V._lateAnimationHolders[N],t=U.animations[0],n=U.originalValue;if(void 0===n||null===n)continue;const q=A.e.AllowMatrixDecomposeForInterpolation&&n.m;let i=V[N];if(q)i=k(U);else if(void 0!==n.w)i=B(U,i||z.Quaternion.Identity());else{let N=0,V=1;const q=t&&t._animationState.loopMode===A.e.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT;if(U.totalWeight<1)i=q?n.clone?n.clone():n:t&&n.scale?n.scale(1-U.totalWeight):t?n*(1-U.totalWeight):n.clone?n.clone():n;else if(t){V=U.totalWeight;const A=t.weight/V;i=1!==A?t.currentValue.scale?t.currentValue.scale(A):t.currentValue*A:t.currentValue,q&&(i.addToRef?i.addToRef(n,i):i+=n),N=1}for(let A=N;A<U.animations.length;A++){const N=U.animations[A],t=N.weight/V;t&&(N.currentValue.scaleAndAddToRef?N.currentValue.scaleAndAddToRef(t,i):i+=N.currentValue*t)}for(let A=0;A<U.additiveAnimations.length;A++){const N=U.additiveAnimations[A],V=N.weight;V&&(N.currentValue.scaleAndAddToRef?N.currentValue.scaleAndAddToRef(V,i):i+=N.currentValue*V)}}V[N]=i}V._lateAnimationHolders={}}N._registeredForLateAnimationBindings.reset()}}(this)},C.prototype.sortActiveAnimatables=function(){this._activeAnimatables.sort(((N,U)=>N.playOrder-U.playOrder))},C.prototype.beginWeightedAnimation=function(N,U,V){let A=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,t=arguments.length>4?arguments[4]:void 0,n=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,q=arguments.length>6?arguments[6]:void 0,i=arguments.length>7?arguments[7]:void 0,z=arguments.length>8?arguments[8]:void 0,S=arguments.length>9?arguments[9]:void 0,E=arguments.length>10&&void 0!==arguments[10]&&arguments[10];const p=this.beginAnimation(N,U,V,t,n,q,i,!1,z,S,E);return p.weight=A,p},C.prototype.beginAnimation=function(N,U,V,A){let t=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,n=arguments.length>5?arguments[5]:void 0,q=arguments.length>6?arguments[6]:void 0,i=!(arguments.length>7&&void 0!==arguments[7])||arguments[7],z=arguments.length>8?arguments[8]:void 0,S=arguments.length>9?arguments[9]:void 0,E=arguments.length>10&&void 0!==arguments[10]&&arguments[10];if(t<0){const N=U;U=V,V=N,t=-t}U>V&&(t=-t),i&&this.stopAnimation(N,void 0,z),q||(q=new p(this,N,U,V,A,t,n,void 0,S,E));const k=!z||z(N);if(N.animations&&k&&q.appendAnimations(N,N.animations),N.getAnimatables){const E=N.getAnimatables();for(let N=0;N<E.length;N++)this.beginAnimation(E[N],U,V,A,t,n,q,i,z,S)}return q.reset(),q},C.prototype.beginHierarchyAnimation=function(N,U,V,A,t){let n=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,q=arguments.length>6?arguments[6]:void 0,i=arguments.length>7?arguments[7]:void 0,z=!(arguments.length>8&&void 0!==arguments[8])||arguments[8],S=arguments.length>9?arguments[9]:void 0,E=arguments.length>11&&void 0!==arguments[11]&&arguments[11];const p=N.getDescendants(U),k=[];k.push(this.beginAnimation(N,V,A,t,n,q,i,z,S,void 0,E));for(const B of p)k.push(this.beginAnimation(B,V,A,t,n,q,i,z,S,void 0,E));return k},C.prototype.beginDirectAnimation=function(N,U,V,A,t){let n=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1;if(n<0){const N=V;V=A,A=N,n=-n}return V>A&&(n=-n),new p(this,N,V,A,t,n,arguments.length>6?arguments[6]:void 0,U,arguments.length>7?arguments[7]:void 0,arguments.length>8&&void 0!==arguments[8]&&arguments[8])},C.prototype.beginDirectHierarchyAnimation=function(N,U,V,A,t,n,q,i,z){let S=arguments.length>9&&void 0!==arguments[9]&&arguments[9];const E=N.getDescendants(U),p=[];p.push(this.beginDirectAnimation(N,V,A,t,n,q,i,z,S));for(const k of E)p.push(this.beginDirectAnimation(k,V,A,t,n,q,i,z,S));return p},C.prototype.getAnimatableByTarget=function(N){for(let U=0;U<this._activeAnimatables.length;U++)if(this._activeAnimatables[U].target===N)return this._activeAnimatables[U];return null},C.prototype.getAllAnimatablesByTarget=function(N){const U=[];for(let V=0;V<this._activeAnimatables.length;V++)this._activeAnimatables[V].target===N&&U.push(this._activeAnimatables[V]);return U},C.prototype.stopAnimation=function(N,U,V){const A=this.getAllAnimatablesByTarget(N);for(const t of A)t.stop(U,V)},C.prototype.stopAllAnimations=function(){if(this._activeAnimatables){for(let N=0;N<this._activeAnimatables.length;N++)this._activeAnimatables[N].stop(void 0,void 0,!0);this._activeAnimatables.length=0}for(const N of this.animationGroups)N.stop()});class d{getClassName(){return"TargetedAnimation"}serialize(){const N={};return N.animation=this.animation.serialize(),N.targetId=this.target.id,N}}class r{get mask(){return this._mask}set mask(N){this._mask!==N&&(this._mask=N,this.syncWithMask(!0))}syncWithMask(){let N=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(this.mask||N){this._numActiveAnimatables=0;for(let N=0;N<this._animatables.length;++N){const U=this._animatables[N];!this.mask||this.mask.disabled||this.mask.retainsTarget(U.target.name)?(this._numActiveAnimatables++,U.paused&&U.restart()):U.paused||U.pause()}}else this._numActiveAnimatables=this._targetedAnimations.length}removeUnmaskedAnimations(){if(this.mask&&!this.mask.disabled){for(let N=0;N<this._animatables.length;++N){const U=this._animatables[N];this.mask.retainsTarget(U.target.name)||(U.stop(),this._animatables.splice(N,1),--N)}for(let N=0;N<this._targetedAnimations.length;N++){const U=this._targetedAnimations[N];this.mask.retainsTarget(U.target.name)||(this._targetedAnimations.splice(N,1),--N)}}}get from(){return this._from}set from(N){if(this._from!==N){this._from=N;for(let N=0;N<this._animatables.length;N++){this._animatables[N].fromFrame=this._from}}}get to(){return this._to}set to(N){if(this._to!==N){this._to=N;for(let N=0;N<this._animatables.length;N++){this._animatables[N].toFrame=this._to}}}get isStarted(){return this._isStarted}get isPlaying(){return this._isStarted&&!this._isPaused}get speedRatio(){return this._speedRatio}set speedRatio(N){if(this._speedRatio!==N){this._speedRatio=N;for(let N=0;N<this._animatables.length;N++){this._animatables[N].speedRatio=this._speedRatio}}}get loopAnimation(){return this._loopAnimation}set loopAnimation(N){if(this._loopAnimation!==N){this._loopAnimation=N;for(let N=0;N<this._animatables.length;N++){this._animatables[N].loopAnimation=this._loopAnimation}}}get isAdditive(){return this._isAdditive}set isAdditive(N){if(this._isAdditive!==N){this._isAdditive=N;for(let N=0;N<this._animatables.length;N++){this._animatables[N].isAdditive=this._isAdditive}}}get weight(){return this._weight}set weight(N){this._weight!==N&&(this._weight=N,this.setWeightForAllAnimatables(this._weight))}get targetedAnimations(){return this._targetedAnimations}get animatables(){return this._animatables}get children(){return this._targetedAnimations}get playOrder(){return this._playOrder}set playOrder(N){if(this._playOrder!==N&&(this._playOrder=N,this._animatables.length>0)){for(let N=0;N<this._animatables.length;N++)this._animatables[N].playOrder=this._playOrder;this._scene.sortActiveAnimatables()}}get enableBlending(){return this._enableBlending}set enableBlending(N){if(this._enableBlending!==N&&(this._enableBlending=N,null!==N))for(let U=0;U<this._targetedAnimations.length;++U)this._targetedAnimations[U].animation.enableBlending=N}get blendingSpeed(){return this._blendingSpeed}set blendingSpeed(N){if(this._blendingSpeed!==N&&(this._blendingSpeed=N,null!==N))for(let U=0;U<this._targetedAnimations.length;++U)this._targetedAnimations[U].animation.blendingSpeed=N}getLength(N,U){N=N??this._from;return((U=U??this._to)-N)/(this.targetedAnimations[0].animation.framePerSecond*this._speedRatio)}static MergeAnimationGroups(N){let U=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],V=arguments.length>2&&void 0!==arguments[2]&&arguments[2],A=arguments.length>3?arguments[3]:void 0;if(0===N.length)return null;A=A??N[0].weight;let t=Number.MAX_VALUE,n=-Number.MAX_VALUE;if(V)for(const i of N)i.from<t&&(t=i.from),i.to>n&&(n=i.to);const q=new r(N[0].name+"_merged",N[0]._scene,A);for(const i of N){V&&i.normalize(t,n);for(const N of i.targetedAnimations)q.addTargetedAnimation(N.animation,N.target);U&&i.dispose()}return q}constructor(N){let U=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,V=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,A=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;this.name=N,this._targetedAnimations=new Array,this._animatables=new Array,this._from=Number.MAX_VALUE,this._to=-Number.MAX_VALUE,this._speedRatio=1,this._loopAnimation=!1,this._isAdditive=!1,this._weight=-1,this._playOrder=0,this._enableBlending=null,this._blendingSpeed=null,this._numActiveAnimatables=0,this._shouldStart=!0,this._parentContainer=null,this.onAnimationEndObservable=new t.d,this.onAnimationLoopObservable=new t.d,this.onAnimationGroupLoopObservable=new t.d,this.onAnimationGroupEndObservable=new t.d,this.onAnimationGroupPauseObservable=new t.d,this.onAnimationGroupPlayObservable=new t.d,this.metadata=null,this._mask=null,this._animationLoopFlags=[],this._scene=U||n.e.LastCreatedScene,this._weight=V,this._playOrder=A,this.uniqueId=this._scene.getUniqueId(),this._scene.addAnimationGroup(this)}addTargetedAnimation(N,U){const V=new d;V.animation=N,V.target=U;const A=N.getKeys();return this._from>A[0].frame&&(this._from=A[0].frame),this._to<A[A.length-1].frame&&(this._to=A[A.length-1].frame),null!==this._enableBlending&&(N.enableBlending=this._enableBlending),null!==this._blendingSpeed&&(N.blendingSpeed=this._blendingSpeed),this._targetedAnimations.push(V),this._shouldStart=!0,V}removeTargetedAnimation(N){for(let U=this._targetedAnimations.length-1;U>-1;U--){this._targetedAnimations[U].animation===N&&this._targetedAnimations.splice(U,1)}}normalize(){let N=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,U=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;null==N&&(N=this._from),null==U&&(U=this._to);for(let V=0;V<this._targetedAnimations.length;V++){const A=this._targetedAnimations[V].animation.getKeys(),t=A[0],n=A[A.length-1];if(t.frame>N){const U={frame:N,value:t.value,inTangent:t.inTangent,outTangent:t.outTangent,interpolation:t.interpolation};A.splice(0,0,U)}if(n.frame<U){const N={frame:U,value:n.value,inTangent:n.inTangent,outTangent:n.outTangent,interpolation:n.interpolation};A.push(N)}}return this._from=N,this._to=U,this}_processLoop(N,U,V){N.onAnimationLoop=()=>{this.onAnimationLoopObservable.notifyObservers(U),this._animationLoopFlags[V]||(this._animationLoopFlags[V]=!0,this._animationLoopCount++,this._animationLoopCount===this._numActiveAnimatables&&(this.onAnimationGroupLoopObservable.notifyObservers(this),this._animationLoopCount=0,this._animationLoopFlags.length=0))}}start(){let N=arguments.length>0&&void 0!==arguments[0]&&arguments[0],U=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,V=arguments.length>2?arguments[2]:void 0,A=arguments.length>3?arguments[3]:void 0,t=arguments.length>4?arguments[4]:void 0;if(this._isStarted||0===this._targetedAnimations.length)return this;this._loopAnimation=N,this._shouldStart=!1,this._animationLoopCount=0,this._animationLoopFlags.length=0;for(let n=0;n<this._targetedAnimations.length;n++){const q=this._targetedAnimations[n],i=this._scene.beginDirectAnimation(q.target,[q.animation],void 0!==V?V:this._from,void 0!==A?A:this._to,N,U,void 0,void 0,void 0!==t?t:this._isAdditive);i.weight=this._weight,i.playOrder=this._playOrder,i.onAnimationEnd=()=>{this.onAnimationEndObservable.notifyObservers(q),this._checkAnimationGroupEnded(i)},this._processLoop(i,q,n),this._animatables.push(i)}return this.syncWithMask(),this._scene.sortActiveAnimatables(),this._speedRatio=U,this._isStarted=!0,this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}pause(){if(!this._isStarted)return this;this._isPaused=!0;for(let N=0;N<this._animatables.length;N++){this._animatables[N].pause()}return this.onAnimationGroupPauseObservable.notifyObservers(this),this}play(N){return this.isStarted&&this._animatables.length&&!this._shouldStart?(void 0!==N&&(this.loopAnimation=N),this.restart()):(this.stop(),this.start(N,this._speedRatio)),this}reset(){if(!this._isStarted)return this.play(),this.goToFrame(0),this.stop(!0),this;for(let N=0;N<this._animatables.length;N++){this._animatables[N].reset()}return this}restart(){if(!this._isStarted)return this;for(let N=0;N<this._animatables.length;N++){this._animatables[N].restart()}return this.syncWithMask(),this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}stop(){let N=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this._isStarted)return this;const U=this._animatables.slice();for(let A=0;A<U.length;A++)U[A].stop(void 0,void 0,!0,N);let V=0;for(let A=0;A<this._scene._activeAnimatables.length;A++){const U=this._scene._activeAnimatables[A];U._runtimeAnimations.length>0?this._scene._activeAnimatables[V++]=U:N&&this._checkAnimationGroupEnded(U,N)}return this._scene._activeAnimatables.length=V,this._isStarted=!1,this}setWeightForAllAnimatables(N){for(let U=0;U<this._animatables.length;U++){this._animatables[U].weight=N}return this}syncAllAnimationsWith(N){for(let U=0;U<this._animatables.length;U++){this._animatables[U].syncWith(N)}return this}goToFrame(N){let U=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this._isStarted)return this;for(let V=0;V<this._animatables.length;V++){this._animatables[V].goToFrame(N,U)}return this}getCurrentFrame(){var N;return(null===(N=this.animatables[0])||void 0===N?void 0:N.masterFrame)||0}dispose(){this.isStarted&&this.stop(),this._targetedAnimations.length=0,this._animatables.length=0;const N=this._scene.animationGroups.indexOf(this);if(N>-1&&this._scene.animationGroups.splice(N,1),this._parentContainer){const N=this._parentContainer.animationGroups.indexOf(this);N>-1&&this._parentContainer.animationGroups.splice(N,1),this._parentContainer=null}this.onAnimationEndObservable.clear(),this.onAnimationGroupEndObservable.clear(),this.onAnimationGroupPauseObservable.clear(),this.onAnimationGroupPlayObservable.clear(),this.onAnimationLoopObservable.clear(),this.onAnimationGroupLoopObservable.clear()}_checkAnimationGroupEnded(N){let U=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const V=this._animatables.indexOf(N);V>-1&&this._animatables.splice(V,1),this._animatables.length===this._targetedAnimations.length-this._numActiveAnimatables&&(this._isStarted=!1,U||this.onAnimationGroupEndObservable.notifyObservers(this),this._animatables.length=0)}clone(N,U){let V=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const A=new r(N||this.name,this._scene,this._weight,this._playOrder);A._from=this.from,A._to=this.to,A._speedRatio=this.speedRatio,A._loopAnimation=this.loopAnimation,A._isAdditive=this.isAdditive,A._enableBlending=this.enableBlending,A._blendingSpeed=this.blendingSpeed,A.metadata=this.metadata,A.mask=this.mask;for(const t of this._targetedAnimations)A.addTargetedAnimation(V?t.animation.clone():t.animation,U?U(t.target):t.target);return A}serialize(){const N={};N.name=this.name,N.from=this.from,N.to=this.to,N.speedRatio=this.speedRatio,N.loopAnimation=this.loopAnimation,N.isAdditive=this.isAdditive,N.weight=this.weight,N.playOrder=this.playOrder,N.enableBlending=this.enableBlending,N.blendingSpeed=this.blendingSpeed,N.targetedAnimations=[];for(let U=0;U<this.targetedAnimations.length;U++){const V=this.targetedAnimations[U];N.targetedAnimations[U]=V.serialize()}return q.c&&q.c.HasTags(this)&&(N.tags=q.c.GetTags(this)),this.metadata&&(N.metadata=this.metadata),N}static Parse(N,U){const V=new r(N.name,U,N.weight,N.playOrder);for(let t=0;t<N.targetedAnimations.length;t++){const n=N.targetedAnimations[t],q=A.e.Parse(n.animation),i=n.targetId;if("influence"===n.animation.property){const N=U.getMorphTargetById(i);N&&V.addTargetedAnimation(q,N)}else{const N=U.getNodeById(i);null!=N&&V.addTargetedAnimation(q,N)}}return q.c&&q.c.AddTagsTo(V,N.tags),null!==N.from&&null!==N.to&&V.normalize(N.from,N.to),void 0!==N.speedRatio&&(V._speedRatio=N.speedRatio),void 0!==N.loopAnimation&&(V._loopAnimation=N.loopAnimation),void 0!==N.isAdditive&&(V._isAdditive=N.isAdditive),void 0!==N.weight&&(V._weight=N.weight),void 0!==N.playOrder&&(V._playOrder=N.playOrder),void 0!==N.enableBlending&&(V._enableBlending=N.enableBlending),void 0!==N.blendingSpeed&&(V._blendingSpeed=N.blendingSpeed),void 0!==N.metadata&&(V.metadata=N.metadata),V}static MakeAnimationAdditive(N,U,V){let t;t="object"===typeof U?U:{referenceFrame:U,range:V,cloneOriginalAnimationGroup:arguments.length>3&&void 0!==arguments[3]&&arguments[3],clonedAnimationName:arguments.length>4?arguments[4]:void 0};let n=N;t.cloneOriginalAnimationGroup&&(n=N.clone(t.clonedAnimationGroupName||n.name));const q=n.targetedAnimations;for(let i=0;i<q.length;i++){const N=q[i];N.animation=A.e.MakeAnimationAdditive(N.animation,t)}if(n.isAdditive=!0,t.clipKeys){let N=Number.MAX_VALUE,U=-Number.MAX_VALUE;const V=n.targetedAnimations;for(let A=0;A<V.length;A++){const t=V[A].animation.getKeys();N>t[0].frame&&(N=t[0].frame),U<t[t.length-1].frame&&(U=t[t.length-1].frame)}n._from=N,n._to=U}return n}static ClipKeys(N,U,V,A,t){const n=N.clone(A||N.name);return r.ClipKeysInPlace(n,U,V,t)}static ClipKeysInPlace(N,U,V,A){return r.ClipInPlace(N,U,V,A,!1)}static ClipFrames(N,U,V,A,t){const n=N.clone(A||N.name);return r.ClipFramesInPlace(n,U,V,t)}static ClipFramesInPlace(N,U,V,A){return r.ClipInPlace(N,U,V,A,!0)}static ClipInPlace(N,U,V,A){let t=arguments.length>4&&void 0!==arguments[4]&&arguments[4],n=Number.MAX_VALUE,q=-Number.MAX_VALUE;const i=N.targetedAnimations;for(let z=0;z<i.length;z++){const N=i[z],S=A?N.animation:N.animation.clone();t&&(S.createKeyForFrame(U),S.createKeyForFrame(V));const E=S.getKeys(),p=[];let k=Number.MAX_VALUE;for(let A=0;A<E.length;A++){const N=E[A];if(!t&&A>=U&&A<=V||t&&N.frame>=U&&N.frame<=V){const U={frame:N.frame,value:N.value.clone?N.value.clone():N.value,inTangent:N.inTangent,outTangent:N.outTangent,interpolation:N.interpolation,lockedTangent:N.lockedTangent};k===Number.MAX_VALUE&&(k=U.frame),U.frame-=k,p.push(U)}}0!==p.length?(n>p[0].frame&&(n=p[0].frame),q<p[p.length-1].frame&&(q=p[p.length-1].frame),S.setKeys(p,!0),N.animation=S):(i.splice(z,1),z--)}return N._from=n,N._to=q,N}getClassName(){return"AnimationGroup"}toString(N){let U="Name: "+this.name;return U+=", type: "+this.getClassName(),N&&(U+=", from: "+this._from,U+=", to: "+this._to,U+=", isStarted: "+this._isStarted,U+=", speedRatio: "+this._speedRatio,U+=", targetedAnimations length: "+this._targetedAnimations.length,U+=", animatables length: "+this._animatables),U}}}}]);