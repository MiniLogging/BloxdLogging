"use strict";(self.qbp2s7qydk=self.qbp2s7qydk||[]).push([[78],{15778:(M,A,O)=>{O.r(A),O.d(A,{AnimationGroup:()=>I,TargetedAnimation:()=>w});var S=O(13499),z=O(12776),Q=O(12811),X=O(13005),c=O(14162),j=O(12970);class B{get currentFrame(){return this._currentFrame}get weight(){return this._weight}get currentValue(){return this._currentValue}get targetPath(){return this._targetPath}get target(){return this._currentActiveTarget}get isAdditive(){return this._host&&this._host.isAdditive}constructor(M,A,O,z){if(this._events=new Array,this._currentFrame=0,this._originalValue=new Array,this._originalBlendValue=null,this._offsetsCache={},this._highLimitsCache={},this._stopped=!1,this._blendingFactor=0,this._currentValue=null,this._currentActiveTarget=null,this._directTarget=null,this._targetPath="",this._weight=1,this._absoluteFrameOffset=0,this._previousElapsedTime=0,this._yoyoDirection=1,this._previousAbsoluteFrame=0,this._targetIsArray=!1,this._coreRuntimeAnimation=null,this._animation=A,this._target=M,this._scene=O,this._host=z,this._activeTargets=[],A._runtimeAnimations.push(this),this._animationState={key:0,repeatCount:0,loopMode:this._getCorrectLoopMode()},this._animation.dataType===S.b.ANIMATIONTYPE_MATRIX&&(this._animationState.workValue=j.Matrix.Zero()),this._keys=this._animation.getKeys(),this._minFrame=this._keys[0].frame,this._maxFrame=this._keys[this._keys.length-1].frame,this._minValue=this._keys[0].value,this._maxValue=this._keys[this._keys.length-1].value,0!==this._minFrame){const M={frame:0,value:this._minValue};this._keys.splice(0,0,M)}if(this._target instanceof Array){let M=0;for(const A of this._target)this._preparePath(A,M),this._getOriginalValues(M),M++;this._targetIsArray=!0}else this._preparePath(this._target),this._getOriginalValues(),this._targetIsArray=!1,this._directTarget=this._activeTargets[0];const Q=A.getEvents();if(Q&&Q.length>0)for(const S of Q)this._events.push(S._clone());this._enableBlending=M&&M.animationPropertiesOverride?M.animationPropertiesOverride.enableBlending:this._animation.enableBlending}_preparePath(M){let A=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const O=this._animation.targetPropertyPath;if(O.length>1){let S=M;for(let M=0;M<O.length-1;M++){const A=O[M];if(S=S[A],void 0===S)throw new Error("Invalid property (".concat(A,") in property path (").concat(O.join("."),")"))}this._targetPath=O[O.length-1],this._activeTargets[A]=S}else this._targetPath=O[0],this._activeTargets[A]=M;if(void 0===this._activeTargets[A][this._targetPath])throw new Error("Invalid property (".concat(this._targetPath,") in property path (").concat(O.join("."),")"))}get animation(){return this._animation}reset(){if(arguments.length>0&&void 0!==arguments[0]&&arguments[0])if(this._target instanceof Array){let M=0;for(const A of this._target)void 0!==this._originalValue[M]&&this._setValue(A,this._activeTargets[M],this._originalValue[M],-1,M),M++}else void 0!==this._originalValue[0]&&this._setValue(this._target,this._directTarget,this._originalValue[0],-1,0);this._offsetsCache={},this._highLimitsCache={},this._currentFrame=0,this._blendingFactor=0;for(let M=0;M<this._events.length;M++)this._events[M].isDone=!1}isStopped(){return this._stopped}dispose(){const M=this._animation.runtimeAnimations.indexOf(this);M>-1&&this._animation.runtimeAnimations.splice(M,1)}setValue(M,A){if(this._targetIsArray)for(let O=0;O<this._target.length;O++){const S=this._target[O];this._setValue(S,this._activeTargets[O],M,A,O)}else this._setValue(this._target,this._directTarget,M,A,0)}_getOriginalValues(){let M,A=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;const O=this._activeTargets[A];M=O.getLocalMatrix&&"_matrix"===this._targetPath?O.getLocalMatrix():O[this._targetPath],M&&M.clone?this._originalValue[A]=M.clone():this._originalValue[A]=M}_registerTargetForLateAnimationBinding(M,A){const O=M.target;this._scene._registeredForLateAnimationBindings.pushNoDuplicate(O),O._lateAnimationHolders||(O._lateAnimationHolders={}),O._lateAnimationHolders[M.targetPath]||(O._lateAnimationHolders[M.targetPath]={totalWeight:0,totalAdditiveWeight:0,animations:[],additiveAnimations:[],originalValue:A}),M.isAdditive?(O._lateAnimationHolders[M.targetPath].additiveAnimations.push(M),O._lateAnimationHolders[M.targetPath].totalAdditiveWeight+=M.weight):(O._lateAnimationHolders[M.targetPath].animations.push(M),O._lateAnimationHolders[M.targetPath].totalWeight+=M.weight)}_setValue(M,A,O,z,Q){if(this._currentActiveTarget=A,this._weight=z,this._enableBlending&&this._blendingFactor<=1){if(!this._originalBlendValue){const M=A[this._targetPath];M.clone?this._originalBlendValue=M.clone():this._originalBlendValue=M}this._originalBlendValue.m?S.b.AllowMatrixDecomposeForInterpolation?this._currentValue?j.Matrix.DecomposeLerpToRef(this._originalBlendValue,O,this._blendingFactor,this._currentValue):this._currentValue=j.Matrix.DecomposeLerp(this._originalBlendValue,O,this._blendingFactor):this._currentValue?j.Matrix.LerpToRef(this._originalBlendValue,O,this._blendingFactor,this._currentValue):this._currentValue=j.Matrix.Lerp(this._originalBlendValue,O,this._blendingFactor):this._currentValue=S.b._UniversalLerp(this._originalBlendValue,O,this._blendingFactor);const z=M&&M.animationPropertiesOverride?M.animationPropertiesOverride.blendingSpeed:this._animation.blendingSpeed;this._blendingFactor+=z}else this._currentValue?this._currentValue.S?this._currentValue.S(O):this._currentValue=O:null!==O&&void 0!==O&&O.clone?this._currentValue=O.clone():this._currentValue=O;-1!==z?this._registerTargetForLateAnimationBinding(this,this._originalValue[Q]):this._animationState.loopMode===S.b.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT?this._currentValue.addToRef?this._currentValue.addToRef(this._originalValue[Q],A[this._targetPath]):A[this._targetPath]=this._originalValue[Q]+this._currentValue:A[this._targetPath]=this._currentValue,M.ug&&M.ug(this._animation.targetProperty)}_getCorrectLoopMode(){return this._target&&this._target.animationPropertiesOverride?this._target.animationPropertiesOverride.loopMode:this._animation.loopMode}goToFrame(M){let A=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const O=this._animation.getKeys();M<O[0].frame?M=O[0].frame:M>O[O.length-1].frame&&(M=O[O.length-1].frame);const S=this._events;if(S.length)for(let Q=0;Q<S.length;Q++)S[Q].onlyOnce||(S[Q].isDone=S[Q].frame<M);this._currentFrame=M;const z=this._animation._interpolate(M,this._animationState);this.setValue(z,A)}_prepareForSpeedRatioChange(M){const A=this._previousElapsedTime*(this._animation.framePerSecond*M)/1e3;this._absoluteFrameOffset=this._previousAbsoluteFrame-A}animate(M,A,O,z,Q){let X=arguments.length>5&&void 0!==arguments[5]?arguments[5]:-1;const c=this._animation,j=c.targetPropertyPath;if(!j||j.length<1)return this._stopped=!0,!1;let B,g=!0;const e=this._events;let T=0;if(this._coreRuntimeAnimation)T=O-A,B=this._coreRuntimeAnimation.currentFrame,this._currentFrame=B,this._animationState.repeatCount=this._coreRuntimeAnimation._animationState.repeatCount,this._animationState.highLimitValue=this._coreRuntimeAnimation._animationState.highLimitValue,this._animationState.offsetValue=this._coreRuntimeAnimation._animationState.offsetValue;else{let X;(A<this._minFrame||A>this._maxFrame)&&(A=this._minFrame),(O<this._minFrame||O>this._maxFrame)&&(O=this._maxFrame),T=O-A;let j=M*(c.framePerSecond*Q)/1e3+this._absoluteFrameOffset,J=0,K=!1;const G=z&&this._animationState.loopMode===S.b.ANIMATIONLOOPMODE_YOYO;if(G){const M=(j-A)/T,O=Math.sin(M*Math.PI);j=Math.abs(O)*T+A;const S=O>=0?1:-1;this._yoyoDirection!==S&&(K=!0),this._yoyoDirection=S}if(this._previousElapsedTime=M,this._previousAbsoluteFrame=j,!z&&O>=A&&(j>=T&&Q>0||j<=0&&Q<0))g=!1,J=c._getKeyValue(this._maxValue);else if(!z&&A>=O&&(j<=T&&Q<0||j>=0&&Q>0))g=!1,J=c._getKeyValue(this._minValue);else if(this._animationState.loopMode!==S.b.ANIMATIONLOOPMODE_CYCLE){const M=O.toString()+A.toString();if(!this._offsetsCache[M]){this._animationState.repeatCount=0,this._animationState.loopMode=S.b.ANIMATIONLOOPMODE_CYCLE;const z=c._interpolate(A,this._animationState),Q=c._interpolate(O,this._animationState);switch(this._animationState.loopMode=this._getCorrectLoopMode(),c.dataType){case S.b.ANIMATIONTYPE_FLOAT:this._offsetsCache[M]=Q-z;break;case S.b.ANIMATIONTYPE_QUATERNION:case S.b.ANIMATIONTYPE_VECTOR3:case S.b.ANIMATIONTYPE_VECTOR2:case S.b.ANIMATIONTYPE_SIZE:case S.b.ANIMATIONTYPE_COLOR3:this._offsetsCache[M]=Q.dA(z)}this._highLimitsCache[M]=Q}J=this._highLimitsCache[M],X=this._offsetsCache[M]}if(void 0===X)switch(c.dataType){case S.b.ANIMATIONTYPE_FLOAT:X=0;break;case S.b.ANIMATIONTYPE_QUATERNION:X=S.i;break;case S.b.ANIMATIONTYPE_VECTOR3:X=S.r;break;case S.b.ANIMATIONTYPE_VECTOR2:X=S.p;break;case S.b.ANIMATIONTYPE_SIZE:X=S.l;break;case S.b.ANIMATIONTYPE_COLOR3:X=S.c;break;case S.b.ANIMATIONTYPE_COLOR4:X=S.g}if(this._host&&this._host.syncRoot){const M=this._host.syncRoot;B=A+T*((M.masterFrame-M.fromFrame)/(M.toFrame-M.fromFrame))}else B=j>0&&A>O||j<0&&A<O?g&&0!==T?O+j%T:A:g&&0!==T?A+j%T:O;if(!G&&(Q>0&&this.currentFrame>B||Q<0&&this.currentFrame<B)||G&&K){this._onLoop();for(let M=0;M<e.length;M++)e[M].onlyOnce||(e[M].isDone=!1);this._animationState.key=Q>0?0:c.getKeys().length-1}this._currentFrame=B,this._animationState.repeatCount=0===T?0:j/T|0,this._animationState.highLimitValue=J,this._animationState.offsetValue=X}const J=c._interpolate(B,this._animationState);if(this.setValue(J,X),e.length)for(let S=0;S<e.length;S++)if(T>=0&&B>=e[S].frame&&e[S].frame>=A||T<0&&B<=e[S].frame&&e[S].frame<=A){const M=e[S];M.isDone||(M.onlyOnce&&(e.splice(S,1),S--),M.isDone=!0,M.action(B))}return g||(this._stopped=!0),g}}var g=O(12793);class e{get syncRoot(){return this._syncRoot}get masterFrame(){return 0===this._runtimeAnimations.length?0:this._runtimeAnimations[0].currentFrame}get weight(){return this._weight}set weight(M){this._weight=-1!==M?Math.min(Math.max(M,0),1):-1}get speedRatio(){return this._speedRatio}set speedRatio(M){for(let A=0;A<this._runtimeAnimations.length;A++){this._runtimeAnimations[A]._prepareForSpeedRatioChange(M)}this._speedRatio=M,null!==this._goToFrame&&this.goToFrame(this._goToFrame)}get elapsedTime(){return null===this._localDelayOffset?0:this._scene._animationTime-this._localDelayOffset}constructor(M,A){let O=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,S=arguments.length>3&&void 0!==arguments[3]?arguments[3]:100,Q=arguments.length>4&&void 0!==arguments[4]&&arguments[4],X=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,c=arguments.length>6?arguments[6]:void 0,j=arguments.length>7?arguments[7]:void 0,B=arguments.length>8?arguments[8]:void 0,g=arguments.length>9&&void 0!==arguments[9]&&arguments[9],e=arguments.length>10&&void 0!==arguments[10]?arguments[10]:0;this.target=A,this.fromFrame=O,this.toFrame=S,this.loopAnimation=Q,this.onAnimationEnd=c,this.onAnimationLoop=B,this.isAdditive=g,this.playOrder=e,this._localDelayOffset=null,this._pausedDelay=null,this._manualJumpDelay=null,this._runtimeAnimations=new Array,this.Gj=!1,this._speedRatio=1,this._weight=-1,this._previousWeight=-1,this._syncRoot=null,this._frameToSyncFromJump=null,this._goToFrame=null,this.disposeOnEnd=!0,this.animationStarted=!1,this.onAnimationEndObservable=new z.c,this.onAnimationLoopObservable=new z.c,this._scene=M,j&&this.appendAnimations(A,j),this._speedRatio=X,M._activeAnimatables.push(this)}syncWith(M){if(this._syncRoot=M,M){const M=this._scene._activeAnimatables.indexOf(this);M>-1&&(this._scene._activeAnimatables.splice(M,1),this._scene._activeAnimatables.push(this))}return this}getAnimations(){return this._runtimeAnimations}appendAnimations(M,A){for(let O=0;O<A.length;O++){const S=A[O],z=new B(M,S,this._scene,this);z._onLoop=()=>{this.onAnimationLoopObservable.notifyObservers(this),this.onAnimationLoop&&this.onAnimationLoop()},this._runtimeAnimations.push(z)}}getAnimationByTargetProperty(M){const A=this._runtimeAnimations;for(let O=0;O<A.length;O++)if(A[O].animation.targetProperty===M)return A[O].animation;return null}getRuntimeAnimationByTargetProperty(M){const A=this._runtimeAnimations;for(let O=0;O<A.length;O++)if(A[O].animation.targetProperty===M)return A[O];return null}reset(){const M=this._runtimeAnimations;for(let A=0;A<M.length;A++)M[A].reset(!0);this._localDelayOffset=null,this._pausedDelay=null}enableBlending(M){const A=this._runtimeAnimations;for(let O=0;O<A.length;O++)A[O].animation.enableBlending=!0,A[O].animation.blendingSpeed=M}disableBlending(){const M=this._runtimeAnimations;for(let A=0;A<M.length;A++)M[A].animation.enableBlending=!1}goToFrame(M){let A=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const O=this._runtimeAnimations;if(O[0]){var S;const A=O[0].animation.framePerSecond;this._frameToSyncFromJump=null!==(S=this._frameToSyncFromJump)&&void 0!==S?S:O[0].currentFrame;const z=0===this.speedRatio?0:(M-this._frameToSyncFromJump)/A*1e3/this.speedRatio;this._manualJumpDelay=-z}for(let z=0;z<O.length;z++)O[z].goToFrame(M,A?this._weight:-1);this._goToFrame=M}get paused(){return this.Gj}pause(){this.Gj||(this.Gj=!0)}restart(){this.Gj=!1}_raiseOnAnimationEnd(){this.onAnimationEnd&&this.onAnimationEnd(),this.onAnimationEndObservable.notifyObservers(this)}stop(M,A){let O=arguments.length>2&&void 0!==arguments[2]&&arguments[2],S=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(M||A){const z=this._scene._activeAnimatables.indexOf(this);if(z>-1){const Q=this._runtimeAnimations;for(let O=Q.length-1;O>=0;O--){const S=Q[O];M&&S.animation.name!=M||(A&&!A(S.target)||(S.dispose(),Q.splice(O,1)))}0==Q.length&&(O||this._scene._activeAnimatables.splice(z,1),S||this._raiseOnAnimationEnd())}}else{const M=this._scene._activeAnimatables.indexOf(this);if(M>-1){O||this._scene._activeAnimatables.splice(M,1);const A=this._runtimeAnimations;for(let M=0;M<A.length;M++)A[M].dispose();this._runtimeAnimations.length=0,S||this._raiseOnAnimationEnd()}}}async waitAsync(){return await new Promise((M=>{this.onAnimationEndObservable.add((()=>{M(this)}),void 0,void 0,this,!0)}))}_animate(M){if(this.Gj)return this.animationStarted=!1,null===this._pausedDelay&&(this._pausedDelay=M),!0;if(null===this._localDelayOffset?(this._localDelayOffset=M,this._pausedDelay=null):null!==this._pausedDelay&&(this._localDelayOffset+=M-this._pausedDelay,this._pausedDelay=null),null!==this._manualJumpDelay&&(this._localDelayOffset+=this.speedRatio<0?-this._manualJumpDelay:this._manualJumpDelay,this._manualJumpDelay=null,this._frameToSyncFromJump=null),this._goToFrame=null,0===this._weight&&0===this._previousWeight)return!0;this._previousWeight=this._weight;let A=!1;const O=this._runtimeAnimations;let S;for(S=0;S<O.length;S++){const z=O[S].animate(M-this._localDelayOffset,this.fromFrame,this.toFrame,this.loopAnimation,this._speedRatio,this._weight);A=A||z}if(this.animationStarted=A,!A){if(this.disposeOnEnd)for(S=this._scene._activeAnimatables.indexOf(this),this._scene._activeAnimatables.splice(S,1),S=0;S<O.length;S++)O[S].dispose();this._raiseOnAnimationEnd(),this.disposeOnEnd&&(this.onAnimationEnd=null,this.onAnimationLoop=null,this.onAnimationLoopObservable.clear(),this.onAnimationEndObservable.clear())}return A}}function T(M){if(0===M.totalWeight&&0===M.totalAdditiveWeight)return M.originalValue;let A=1;const O=j.TmpVectors.GA[0],S=j.TmpVectors.GA[1],z=j.TmpVectors.Quaternion[0];let Q=0;const X=M.animations[0],c=M.originalValue;let B=1,g=!1;if(M.totalWeight<1)B=1-M.totalWeight,c.decompose(S,z,O);else{if(Q=1,A=M.totalWeight,B=X.weight/A,1==B){if(!M.totalAdditiveWeight)return X.currentValue;g=!0}X.currentValue.decompose(S,z,O)}if(!g){S.scaleInPlace(B),O.scaleInPlace(B),z.scaleInPlace(B);for(let X=Q;X<M.animations.length;X++){const Q=M.animations[X];if(0===Q.weight)continue;B=Q.weight/A;const c=j.TmpVectors.GA[2],g=j.TmpVectors.GA[3],e=j.TmpVectors.Quaternion[1];Q.currentValue.decompose(g,e,c),g.scaleAndAddToRef(B,S),e.scaleAndAddToRef(j.Quaternion.Dot(z,e)>0?B:-B,z),c.scaleAndAddToRef(B,O)}z.normalize()}for(let T=0;T<M.additiveAnimations.length;T++){const A=M.additiveAnimations[T];if(0===A.weight)continue;const Q=j.TmpVectors.GA[2],X=j.TmpVectors.GA[3],c=j.TmpVectors.Quaternion[1];A.currentValue.decompose(X,c,Q),X.multiplyToRef(S,X),j.GA.LerpToRef(S,X,A.weight,S),z.multiplyToRef(c,c),j.Quaternion.SlerpToRef(z,c,A.weight,z),Q.scaleAndAddToRef(A.weight,O)}const e=X?X._animationState.workValue:j.TmpVectors.Matrix[0].clone();return j.Matrix.ComposeToRef(S,z,O,e),e}function J(M,A){if(0===M.totalWeight&&0===M.totalAdditiveWeight)return A;const O=M.animations[0],S=M.originalValue;let z=A;if(0===M.totalWeight&&M.totalAdditiveWeight>0)z.S(S);else if(1===M.animations.length){if(j.Quaternion.SlerpToRef(S,O.currentValue,Math.min(1,M.totalWeight),z),0===M.totalAdditiveWeight)return z}else if(M.animations.length>1){let O,Q,X=1;if(M.totalWeight<1){const A=1-M.totalWeight;O=[],Q=[],O.push(S),Q.push(A)}else{if(2===M.animations.length&&(j.Quaternion.SlerpToRef(M.animations[0].currentValue,M.animations[1].currentValue,M.animations[1].weight/M.totalWeight,A),0===M.totalAdditiveWeight))return A;O=[],Q=[],X=M.totalWeight}for(let A=0;A<M.animations.length;A++){const S=M.animations[A];O.push(S.currentValue),Q.push(S.weight/X)}let c=0;for(let M=0;M<O.length;)M?(c+=Q[M],j.Quaternion.SlerpToRef(z,O[M],Q[M]/c,z),M++):(j.Quaternion.SlerpToRef(O[M],O[M+1],Q[M+1]/(Q[M]+Q[M+1]),A),z=A,c=Q[M]+Q[M+1],M+=2)}for(let Q=0;Q<M.additiveAnimations.length;Q++){const A=M.additiveAnimations[Q];0!==A.weight&&(z.multiplyToRef(A.currentValue,j.TmpVectors.Quaternion[0]),j.Quaternion.SlerpToRef(z,j.TmpVectors.Quaternion[0],A.weight,z))}return z}var K,G,d=O(13214);K=d.b,(G=c.e)&&(G.prototype.copyAnimationRange=function(M,A,O){let z=arguments.length>3&&void 0!==arguments[3]&&arguments[3],Q=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;0===this.animations.length&&(this.animations.push(new S.b(this.name,"_matrix",M.animations[0].framePerSecond,S.b.ANIMATIONTYPE_MATRIX,0)),this.animations[0].setKeys([]));const X=M.animations[0].getRange(A);if(!X)return!1;const c=X.from,j=X.to,B=M.animations[0].getKeys(),g=M.length,e=M.getParent(),T=this.getParent(),J=z&&e&&g&&this.length&&g!==this.length,K=J&&T&&e?T.length/e.length:1,G=z&&!T&&Q&&(1!==Q.x||1!==Q.y||1!==Q.z),d=this.animations[0].getKeys();let w,I,b;for(let S=0,s=B.length;S<s;S++)w=B[S],w.frame>=c&&w.frame<=j&&(z?(b=w.value.clone(),J?(I=b.getTranslation(),b.setTranslation(I.scaleInPlace(K))):G&&Q?(I=b.getTranslation(),b.setTranslation(I.multiplyInPlace(Q))):b=w.value):b=w.value,d.push({frame:w.frame+O,value:b}));return this.animations[0].createRange(A,c+O,j+O),!0}),K&&(K.prototype._animate=function(M){if(!this.animationsEnabled)return;const A=g.d.Now;if(!this._animationTimeLast){if(this._pendingData.length>0)return;this._animationTimeLast=A}this.deltaTime=void 0!==M?M:this.useConstantAnimationDeltaTime?16:(A-this._animationTimeLast)*this.animationTimeScale,this._animationTimeLast=A;const O=this._activeAnimatables;if(0===O.length)return;this._animationTime+=this.deltaTime;const z=this._animationTime;for(let S=0;S<O.length;S++){const M=O[S];!M._animate(z)&&M.disposeOnEnd&&S--}!function(M){if(M._registeredForLateAnimationBindings.length){for(let A=0;A<M._registeredForLateAnimationBindings.length;A++){const O=M._registeredForLateAnimationBindings.data[A];for(const M in O._lateAnimationHolders){const A=O._lateAnimationHolders[M],z=A.animations[0],Q=A.originalValue;if(void 0===Q||null===Q)continue;const X=S.b.AllowMatrixDecomposeForInterpolation&&Q.m;let c=O[M];if(X)c=T(A);else if(void 0!==Q.w)c=J(A,c||j.Quaternion.Identity());else{let M=0,O=1;const X=z&&z._animationState.loopMode===S.b.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT;if(A.totalWeight<1)c=X?Q.clone?Q.clone():Q:z&&Q.scale?Q.scale(1-A.totalWeight):z?Q*(1-A.totalWeight):Q.clone?Q.clone():Q;else if(z){O=A.totalWeight;const S=z.weight/O;c=1!==S?z.currentValue.scale?z.currentValue.scale(S):z.currentValue*S:z.currentValue,X&&(c.addToRef?c.addToRef(Q,c):c+=Q),M=1}for(let S=M;S<A.animations.length;S++){const M=A.animations[S],z=M.weight/O;z&&(M.currentValue.scaleAndAddToRef?M.currentValue.scaleAndAddToRef(z,c):c+=M.currentValue*z)}for(let S=0;S<A.additiveAnimations.length;S++){const M=A.additiveAnimations[S],O=M.weight;O&&(M.currentValue.scaleAndAddToRef?M.currentValue.scaleAndAddToRef(O,c):c+=M.currentValue*O)}}O[M]=c}O._lateAnimationHolders={}}M._registeredForLateAnimationBindings.reset()}}(this)},K.prototype.sortActiveAnimatables=function(){this._activeAnimatables.sort(((M,A)=>M.playOrder-A.playOrder))},K.prototype.beginWeightedAnimation=function(M,A,O){let S=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,z=arguments.length>4?arguments[4]:void 0,Q=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,X=arguments.length>6?arguments[6]:void 0,c=arguments.length>7?arguments[7]:void 0,j=arguments.length>8?arguments[8]:void 0,B=arguments.length>9?arguments[9]:void 0,g=arguments.length>10&&void 0!==arguments[10]&&arguments[10];const e=this.beginAnimation(M,A,O,z,Q,X,c,!1,j,B,g);return e.weight=S,e},K.prototype.beginAnimation=function(M,A,O,S){let z=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,Q=arguments.length>5?arguments[5]:void 0,X=arguments.length>6?arguments[6]:void 0,c=!(arguments.length>7&&void 0!==arguments[7])||arguments[7],j=arguments.length>8?arguments[8]:void 0,B=arguments.length>9?arguments[9]:void 0,g=arguments.length>10&&void 0!==arguments[10]&&arguments[10];if(z<0){const M=A;A=O,O=M,z=-z}A>O&&(z=-z),c&&this.stopAnimation(M,void 0,j),X||(X=new e(this,M,A,O,S,z,Q,void 0,B,g));const T=!j||j(M);if(M.animations&&T&&X.appendAnimations(M,M.animations),M.getAnimatables){const g=M.getAnimatables();for(let M=0;M<g.length;M++)this.beginAnimation(g[M],A,O,S,z,Q,X,c,j,B)}return X.reset(),X},K.prototype.beginHierarchyAnimation=function(M,A,O,S,z){let Q=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,X=arguments.length>6?arguments[6]:void 0,c=arguments.length>7?arguments[7]:void 0,j=!(arguments.length>8&&void 0!==arguments[8])||arguments[8],B=arguments.length>9?arguments[9]:void 0,g=arguments.length>11&&void 0!==arguments[11]&&arguments[11];const e=M.getDescendants(A),T=[];T.push(this.beginAnimation(M,O,S,z,Q,X,c,j,B,void 0,g));for(const J of e)T.push(this.beginAnimation(J,O,S,z,Q,X,c,j,B,void 0,g));return T},K.prototype.beginDirectAnimation=function(M,A,O,S,z){let Q=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1;if(Q<0){const M=O;O=S,S=M,Q=-Q}return O>S&&(Q=-Q),new e(this,M,O,S,z,Q,arguments.length>6?arguments[6]:void 0,A,arguments.length>7?arguments[7]:void 0,arguments.length>8&&void 0!==arguments[8]&&arguments[8])},K.prototype.beginDirectHierarchyAnimation=function(M,A,O,S,z,Q,X,c,j){let B=arguments.length>9&&void 0!==arguments[9]&&arguments[9];const g=M.getDescendants(A),e=[];e.push(this.beginDirectAnimation(M,O,S,z,Q,X,c,j,B));for(const T of g)e.push(this.beginDirectAnimation(T,O,S,z,Q,X,c,j,B));return e},K.prototype.getAnimatableByTarget=function(M){for(let A=0;A<this._activeAnimatables.length;A++)if(this._activeAnimatables[A].target===M)return this._activeAnimatables[A];return null},K.prototype.getAllAnimatablesByTarget=function(M){const A=[];for(let O=0;O<this._activeAnimatables.length;O++)this._activeAnimatables[O].target===M&&A.push(this._activeAnimatables[O]);return A},K.prototype.stopAnimation=function(M,A,O){const S=this.getAllAnimatablesByTarget(M);for(const z of S)z.stop(A,O)},K.prototype.stopAllAnimations=function(){if(this._activeAnimatables){for(let M=0;M<this._activeAnimatables.length;M++)this._activeAnimatables[M].stop(void 0,void 0,!0);this._activeAnimatables.length=0}for(const M of this.animationGroups)M.stop()});class w{getClassName(){return"TargetedAnimation"}serialize(){const M={};return M.animation=this.animation.serialize(),M.targetId=this.target.id,M}}class I{get mask(){return this._mask}set mask(M){this._mask!==M&&(this._mask=M,this.syncWithMask(!0))}syncWithMask(){let M=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(this.mask||M){this._numActiveAnimatables=0;for(let M=0;M<this._animatables.length;++M){const A=this._animatables[M];!this.mask||this.mask.disabled||this.mask.retainsTarget(A.target.name)?(this._numActiveAnimatables++,A.paused&&A.restart()):A.paused||A.pause()}}else this._numActiveAnimatables=this._targetedAnimations.length}removeUnmaskedAnimations(){if(this.mask&&!this.mask.disabled){for(let M=0;M<this._animatables.length;++M){const A=this._animatables[M];this.mask.retainsTarget(A.target.name)||(A.stop(),this._animatables.splice(M,1),--M)}for(let M=0;M<this._targetedAnimations.length;M++){const A=this._targetedAnimations[M];this.mask.retainsTarget(A.target.name)||(this._targetedAnimations.splice(M,1),--M)}}}get from(){return this._from}set from(M){if(this._from!==M){this._from=M;for(let M=0;M<this._animatables.length;M++){this._animatables[M].fromFrame=this._from}}}get to(){return this._to}set to(M){if(this._to!==M){this._to=M;for(let M=0;M<this._animatables.length;M++){this._animatables[M].toFrame=this._to}}}get isStarted(){return this._isStarted}get isPlaying(){return this._isStarted&&!this._isPaused}get speedRatio(){return this._speedRatio}set speedRatio(M){if(this._speedRatio!==M){this._speedRatio=M;for(let M=0;M<this._animatables.length;M++){this._animatables[M].speedRatio=this._speedRatio}}}get loopAnimation(){return this._loopAnimation}set loopAnimation(M){if(this._loopAnimation!==M){this._loopAnimation=M;for(let M=0;M<this._animatables.length;M++){this._animatables[M].loopAnimation=this._loopAnimation}}}get isAdditive(){return this._isAdditive}set isAdditive(M){if(this._isAdditive!==M){this._isAdditive=M;for(let M=0;M<this._animatables.length;M++){this._animatables[M].isAdditive=this._isAdditive}}}get weight(){return this._weight}set weight(M){this._weight!==M&&(this._weight=M,this.setWeightForAllAnimatables(this._weight))}get targetedAnimations(){return this._targetedAnimations}get animatables(){return this._animatables}get children(){return this._targetedAnimations}get playOrder(){return this._playOrder}set playOrder(M){if(this._playOrder!==M&&(this._playOrder=M,this._animatables.length>0)){for(let M=0;M<this._animatables.length;M++)this._animatables[M].playOrder=this._playOrder;this._scene.sortActiveAnimatables()}}get enableBlending(){return this._enableBlending}set enableBlending(M){if(this._enableBlending!==M&&(this._enableBlending=M,null!==M))for(let A=0;A<this._targetedAnimations.length;++A)this._targetedAnimations[A].animation.enableBlending=M}get blendingSpeed(){return this._blendingSpeed}set blendingSpeed(M){if(this._blendingSpeed!==M&&(this._blendingSpeed=M,null!==M))for(let A=0;A<this._targetedAnimations.length;++A)this._targetedAnimations[A].animation.blendingSpeed=M}getLength(M,A){var O,S;M=null!==(O=M)&&void 0!==O?O:this._from;return((A=null!==(S=A)&&void 0!==S?S:this._to)-M)/(this.targetedAnimations[0].animation.framePerSecond*this._speedRatio)}static MergeAnimationGroups(M){var A;let O=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],S=arguments.length>2&&void 0!==arguments[2]&&arguments[2],z=arguments.length>3?arguments[3]:void 0;if(0===M.length)return null;z=null!==(A=z)&&void 0!==A?A:M[0].weight;let Q=Number.MAX_VALUE,X=-Number.MAX_VALUE;if(S)for(const j of M)j.from<Q&&(Q=j.from),j.to>X&&(X=j.to);const c=new I(M[0].name+"_merged",M[0]._scene,z);for(const j of M){S&&j.normalize(Q,X);for(const M of j.targetedAnimations)c.addTargetedAnimation(M.animation,M.target);O&&j.dispose()}return c}constructor(M){let A=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,O=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,S=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;this.name=M,this._targetedAnimations=new Array,this._animatables=new Array,this._from=Number.MAX_VALUE,this._to=-Number.MAX_VALUE,this._speedRatio=1,this._loopAnimation=!1,this._isAdditive=!1,this._weight=-1,this._playOrder=0,this._enableBlending=null,this._blendingSpeed=null,this._numActiveAnimatables=0,this._shouldStart=!0,this._parentContainer=null,this.onAnimationEndObservable=new z.c,this.onAnimationLoopObservable=new z.c,this.onAnimationGroupLoopObservable=new z.c,this.onAnimationGroupEndObservable=new z.c,this.onAnimationGroupPauseObservable=new z.c,this.onAnimationGroupPlayObservable=new z.c,this.metadata=null,this._mask=null,this._animationLoopFlags=[],this._scene=A||Q.d.LastCreatedScene,this._weight=O,this._playOrder=S,this.uniqueId=this._scene.getUniqueId(),this._scene.addAnimationGroup(this)}addTargetedAnimation(M,A){const O=new w;O.animation=M,O.target=A;const S=M.getKeys();return this._from>S[0].frame&&(this._from=S[0].frame),this._to<S[S.length-1].frame&&(this._to=S[S.length-1].frame),null!==this._enableBlending&&(M.enableBlending=this._enableBlending),null!==this._blendingSpeed&&(M.blendingSpeed=this._blendingSpeed),this._targetedAnimations.push(O),this._shouldStart=!0,O}removeTargetedAnimation(M){for(let A=this._targetedAnimations.length-1;A>-1;A--){this._targetedAnimations[A].animation===M&&this._targetedAnimations.splice(A,1)}}normalize(){let M=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,A=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;null==M&&(M=this._from),null==A&&(A=this._to);for(let O=0;O<this._targetedAnimations.length;O++){const S=this._targetedAnimations[O].animation.getKeys(),z=S[0],Q=S[S.length-1];if(z.frame>M){const A={frame:M,value:z.value,inTangent:z.inTangent,outTangent:z.outTangent,interpolation:z.interpolation};S.splice(0,0,A)}if(Q.frame<A){const M={frame:A,value:Q.value,inTangent:Q.inTangent,outTangent:Q.outTangent,interpolation:Q.interpolation};S.push(M)}}return this._from=M,this._to=A,this}_processLoop(M,A,O){M.onAnimationLoop=()=>{this.onAnimationLoopObservable.notifyObservers(A),this._animationLoopFlags[O]||(this._animationLoopFlags[O]=!0,this._animationLoopCount++,this._animationLoopCount===this._numActiveAnimatables&&(this.onAnimationGroupLoopObservable.notifyObservers(this),this._animationLoopCount=0,this._animationLoopFlags.length=0))}}start(){let M=arguments.length>0&&void 0!==arguments[0]&&arguments[0],A=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,O=arguments.length>2?arguments[2]:void 0,S=arguments.length>3?arguments[3]:void 0,z=arguments.length>4?arguments[4]:void 0;if(this._isStarted||0===this._targetedAnimations.length)return this;this._loopAnimation=M,this._shouldStart=!1,this._animationLoopCount=0,this._animationLoopFlags.length=0;for(let Q=0;Q<this._targetedAnimations.length;Q++){const X=this._targetedAnimations[Q],c=this._scene.beginDirectAnimation(X.target,[X.animation],void 0!==O?O:this._from,void 0!==S?S:this._to,M,A,void 0,void 0,void 0!==z?z:this._isAdditive);c.weight=this._weight,c.playOrder=this._playOrder,c.onAnimationEnd=()=>{this.onAnimationEndObservable.notifyObservers(X),this._checkAnimationGroupEnded(c)},this._processLoop(c,X,Q),this._animatables.push(c)}return this.syncWithMask(),this._scene.sortActiveAnimatables(),this._speedRatio=A,this._isStarted=!0,this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}pause(){if(!this._isStarted)return this;this._isPaused=!0;for(let M=0;M<this._animatables.length;M++){this._animatables[M].pause()}return this.onAnimationGroupPauseObservable.notifyObservers(this),this}play(M){return this.isStarted&&this._animatables.length&&!this._shouldStart?(void 0!==M&&(this.loopAnimation=M),this.restart()):(this.stop(),this.start(M,this._speedRatio)),this}reset(){if(!this._isStarted)return this.play(),this.goToFrame(0),this.stop(!0),this;for(let M=0;M<this._animatables.length;M++){this._animatables[M].reset()}return this}restart(){if(!this._isStarted)return this;for(let M=0;M<this._animatables.length;M++){this._animatables[M].restart()}return this.syncWithMask(),this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}stop(){let M=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this._isStarted)return this;const A=this._animatables.slice();for(let S=0;S<A.length;S++)A[S].stop(void 0,void 0,!0,M);let O=0;for(let S=0;S<this._scene._activeAnimatables.length;S++){const A=this._scene._activeAnimatables[S];A._runtimeAnimations.length>0?this._scene._activeAnimatables[O++]=A:M&&this._checkAnimationGroupEnded(A,M)}return this._scene._activeAnimatables.length=O,this._isStarted=!1,this}setWeightForAllAnimatables(M){for(let A=0;A<this._animatables.length;A++){this._animatables[A].weight=M}return this}syncAllAnimationsWith(M){for(let A=0;A<this._animatables.length;A++){this._animatables[A].syncWith(M)}return this}goToFrame(M){let A=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this._isStarted)return this;for(let O=0;O<this._animatables.length;O++){this._animatables[O].goToFrame(M,A)}return this}getCurrentFrame(){var M;return(null===(M=this.animatables[0])||void 0===M?void 0:M.masterFrame)||0}dispose(){this.isStarted&&this.stop(),this._targetedAnimations.length=0,this._animatables.length=0;const M=this._scene.animationGroups.indexOf(this);if(M>-1&&this._scene.animationGroups.splice(M,1),this._parentContainer){const M=this._parentContainer.animationGroups.indexOf(this);M>-1&&this._parentContainer.animationGroups.splice(M,1),this._parentContainer=null}this.onAnimationEndObservable.clear(),this.onAnimationGroupEndObservable.clear(),this.onAnimationGroupPauseObservable.clear(),this.onAnimationGroupPlayObservable.clear(),this.onAnimationLoopObservable.clear(),this.onAnimationGroupLoopObservable.clear()}_checkAnimationGroupEnded(M){let A=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const O=this._animatables.indexOf(M);O>-1&&this._animatables.splice(O,1),this._animatables.length===this._targetedAnimations.length-this._numActiveAnimatables&&(this._isStarted=!1,A||this.onAnimationGroupEndObservable.notifyObservers(this),this._animatables.length=0)}clone(M,A){let O=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const S=new I(M||this.name,this._scene,this._weight,this._playOrder);S._from=this.from,S._to=this.to,S._speedRatio=this.speedRatio,S._loopAnimation=this.loopAnimation,S._isAdditive=this.isAdditive,S._enableBlending=this.enableBlending,S._blendingSpeed=this.blendingSpeed,S.metadata=this.metadata,S.mask=this.mask;for(const z of this._targetedAnimations)S.addTargetedAnimation(O?z.animation.clone():z.animation,A?A(z.target):z.target);return S}serialize(){const M={};M.name=this.name,M.from=this.from,M.to=this.to,M.speedRatio=this.speedRatio,M.loopAnimation=this.loopAnimation,M.isAdditive=this.isAdditive,M.weight=this.weight,M.playOrder=this.playOrder,M.enableBlending=this.enableBlending,M.blendingSpeed=this.blendingSpeed,M.targetedAnimations=[];for(let A=0;A<this.targetedAnimations.length;A++){const O=this.targetedAnimations[A];M.targetedAnimations[A]=O.serialize()}return X.b&&X.b.HasTags(this)&&(M.tags=X.b.GetTags(this)),this.metadata&&(M.metadata=this.metadata),M}static Parse(M,A){const O=new I(M.name,A,M.weight,M.playOrder);for(let z=0;z<M.targetedAnimations.length;z++){const Q=M.targetedAnimations[z],X=S.b.Parse(Q.animation),c=Q.targetId;if("influence"===Q.animation.property){const M=A.getMorphTargetById(c);M&&O.addTargetedAnimation(X,M)}else{const M=A.getNodeById(c);null!=M&&O.addTargetedAnimation(X,M)}}return X.b&&X.b.AddTagsTo(O,M.tags),null!==M.from&&null!==M.to&&O.normalize(M.from,M.to),void 0!==M.speedRatio&&(O._speedRatio=M.speedRatio),void 0!==M.loopAnimation&&(O._loopAnimation=M.loopAnimation),void 0!==M.isAdditive&&(O._isAdditive=M.isAdditive),void 0!==M.weight&&(O._weight=M.weight),void 0!==M.playOrder&&(O._playOrder=M.playOrder),void 0!==M.enableBlending&&(O._enableBlending=M.enableBlending),void 0!==M.blendingSpeed&&(O._blendingSpeed=M.blendingSpeed),void 0!==M.metadata&&(O.metadata=M.metadata),O}static MakeAnimationAdditive(M,A,O){let z;z="object"===typeof A?A:{referenceFrame:A,range:O,cloneOriginalAnimationGroup:arguments.length>3&&void 0!==arguments[3]&&arguments[3],clonedAnimationName:arguments.length>4?arguments[4]:void 0};let Q=M;z.cloneOriginalAnimationGroup&&(Q=M.clone(z.clonedAnimationGroupName||Q.name));const X=Q.targetedAnimations;for(let c=0;c<X.length;c++){const M=X[c];M.animation=S.b.MakeAnimationAdditive(M.animation,z)}if(Q.isAdditive=!0,z.clipKeys){let M=Number.MAX_VALUE,A=-Number.MAX_VALUE;const O=Q.targetedAnimations;for(let S=0;S<O.length;S++){const z=O[S].animation.getKeys();M>z[0].frame&&(M=z[0].frame),A<z[z.length-1].frame&&(A=z[z.length-1].frame)}Q._from=M,Q._to=A}return Q}static ClipKeys(M,A,O,S,z){const Q=M.clone(S||M.name);return I.ClipKeysInPlace(Q,A,O,z)}static ClipKeysInPlace(M,A,O,S){return I.ClipInPlace(M,A,O,S,!1)}static ClipFrames(M,A,O,S,z){const Q=M.clone(S||M.name);return I.ClipFramesInPlace(Q,A,O,z)}static ClipFramesInPlace(M,A,O,S){return I.ClipInPlace(M,A,O,S,!0)}static ClipInPlace(M,A,O,S){let z=arguments.length>4&&void 0!==arguments[4]&&arguments[4],Q=Number.MAX_VALUE,X=-Number.MAX_VALUE;const c=M.targetedAnimations;for(let j=0;j<c.length;j++){const M=c[j],B=S?M.animation:M.animation.clone();z&&(B.createKeyForFrame(A),B.createKeyForFrame(O));const g=B.getKeys(),e=[];let T=Number.MAX_VALUE;for(let S=0;S<g.length;S++){const M=g[S];if(!z&&S>=A&&S<=O||z&&M.frame>=A&&M.frame<=O){const A={frame:M.frame,value:M.value.clone?M.value.clone():M.value,inTangent:M.inTangent,outTangent:M.outTangent,interpolation:M.interpolation,lockedTangent:M.lockedTangent};T===Number.MAX_VALUE&&(T=A.frame),A.frame-=T,e.push(A)}}0!==e.length?(Q>e[0].frame&&(Q=e[0].frame),X<e[e.length-1].frame&&(X=e[e.length-1].frame),B.setKeys(e,!0),M.animation=B):(c.splice(j,1),j--)}return M._from=Q,M._to=X,M}getClassName(){return"AnimationGroup"}toString(M){let A="Name: "+this.name;return A+=", type: "+this.getClassName(),M&&(A+=", from: "+this._from,A+=", to: "+this._to,A+=", isStarted: "+this._isStarted,A+=", speedRatio: "+this._speedRatio,A+=", targetedAnimations length: "+this._targetedAnimations.length,A+=", animatables length: "+this._animatables),A}}}}]);