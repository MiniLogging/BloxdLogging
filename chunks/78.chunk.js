"use strict";(self.rsqbdnwe5e=self.rsqbdnwe5e||[]).push([[78],{15484:(N,p,T)=>{T.r(p),T.d(p,{AnimationGroup:()=>n,TargetedAnimation:()=>L});var A=T(12912),a=T(12194),C=T(12231),U=T(12416),X=T(14004),y=T(12371);class e{get currentFrame(){return this._currentFrame}get weight(){return this._weight}get currentValue(){return this._currentValue}get targetPath(){return this._targetPath}get target(){return this._currentActiveTarget}get isAdditive(){return this._host&&this._host.isAdditive}constructor(N,p,T,a){if(this._events=new Array,this._currentFrame=0,this._originalValue=new Array,this._originalBlendValue=null,this._offsetsCache={},this._highLimitsCache={},this._stopped=!1,this._blendingFactor=0,this._currentValue=null,this._currentActiveTarget=null,this._directTarget=null,this._targetPath="",this._weight=1,this._absoluteFrameOffset=0,this._previousElapsedTime=0,this._yoyoDirection=1,this._previousAbsoluteFrame=0,this._targetIsArray=!1,this._coreRuntimeAnimation=null,this._animation=p,this._target=N,this._scene=T,this._host=a,this._activeTargets=[],p._runtimeAnimations.push(this),this._animationState={key:0,repeatCount:0,loopMode:this._getCorrectLoopMode()},this._animation.dataType===A.b.ANIMATIONTYPE_MATRIX&&(this._animationState.workValue=y.Matrix.Zero()),this._keys=this._animation.getKeys(),this._minFrame=this._keys[0].frame,this._maxFrame=this._keys[this._keys.length-1].frame,this._minValue=this._keys[0].value,this._maxValue=this._keys[this._keys.length-1].value,0!==this._minFrame){const N={frame:0,value:this._minValue};this._keys.splice(0,0,N)}if(this._target instanceof Array){let N=0;for(const p of this._target)this._preparePath(p,N),this._getOriginalValues(N),N++;this._targetIsArray=!0}else this._preparePath(this._target),this._getOriginalValues(),this._targetIsArray=!1,this._directTarget=this._activeTargets[0];const C=p.getEvents();if(C&&C.length>0)for(const A of C)this._events.push(A._clone());this._enableBlending=N&&N.animationPropertiesOverride?N.animationPropertiesOverride.enableBlending:this._animation.enableBlending}_preparePath(N){let p=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const T=this._animation.targetPropertyPath;if(T.length>1){let A=N;for(let N=0;N<T.length-1;N++){const p=T[N];if(A=A[p],void 0===A)throw new Error(`Invalid property (${p}) in property path (${T.join(".")})`)}this._targetPath=T[T.length-1],this._activeTargets[p]=A}else this._targetPath=T[0],this._activeTargets[p]=N;if(void 0===this._activeTargets[p][this._targetPath])throw new Error(`Invalid property (${this._targetPath}) in property path (${T.join(".")})`)}get animation(){return this._animation}reset(){if(arguments.length>0&&void 0!==arguments[0]&&arguments[0])if(this._target instanceof Array){let N=0;for(const p of this._target)void 0!==this._originalValue[N]&&this._setValue(p,this._activeTargets[N],this._originalValue[N],-1,N),N++}else void 0!==this._originalValue[0]&&this._setValue(this._target,this._directTarget,this._originalValue[0],-1,0);this._offsetsCache={},this._highLimitsCache={},this._currentFrame=0,this._blendingFactor=0;for(let N=0;N<this._events.length;N++)this._events[N].isDone=!1}isStopped(){return this._stopped}dispose(){const N=this._animation.runtimeAnimations.indexOf(this);N>-1&&this._animation.runtimeAnimations.splice(N,1)}setValue(N,p){if(this._targetIsArray)for(let T=0;T<this._target.length;T++){const A=this._target[T];this._setValue(A,this._activeTargets[T],N,p,T)}else this._setValue(this._target,this._directTarget,N,p,0)}_getOriginalValues(){let N,p=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;const T=this._activeTargets[p];N=T.getLocalMatrix&&"_matrix"===this._targetPath?T.getLocalMatrix():T[this._targetPath],N&&N.clone?this._originalValue[p]=N.clone():this._originalValue[p]=N}_registerTargetForLateAnimationBinding(N,p){const T=N.target;this._scene._registeredForLateAnimationBindings.pushNoDuplicate(T),T._lateAnimationHolders||(T._lateAnimationHolders={}),T._lateAnimationHolders[N.targetPath]||(T._lateAnimationHolders[N.targetPath]={totalWeight:0,totalAdditiveWeight:0,animations:[],additiveAnimations:[],originalValue:p}),N.isAdditive?(T._lateAnimationHolders[N.targetPath].additiveAnimations.push(N),T._lateAnimationHolders[N.targetPath].totalAdditiveWeight+=N.weight):(T._lateAnimationHolders[N.targetPath].animations.push(N),T._lateAnimationHolders[N.targetPath].totalWeight+=N.weight)}_setValue(N,p,T,a,C){if(this._currentActiveTarget=p,this._weight=a,this._enableBlending&&this._blendingFactor<=1){if(!this._originalBlendValue){const N=p[this._targetPath];N.clone?this._originalBlendValue=N.clone():this._originalBlendValue=N}this._originalBlendValue.m?A.b.AllowMatrixDecomposeForInterpolation?this._currentValue?y.Matrix.DecomposeLerpToRef(this._originalBlendValue,T,this._blendingFactor,this._currentValue):this._currentValue=y.Matrix.DecomposeLerp(this._originalBlendValue,T,this._blendingFactor):this._currentValue?y.Matrix.LerpToRef(this._originalBlendValue,T,this._blendingFactor,this._currentValue):this._currentValue=y.Matrix.Lerp(this._originalBlendValue,T,this._blendingFactor):this._currentValue=A.b._UniversalLerp(this._originalBlendValue,T,this._blendingFactor);const a=N&&N.animationPropertiesOverride?N.animationPropertiesOverride.blendingSpeed:this._animation.blendingSpeed;this._blendingFactor+=a}else this._currentValue?this._currentValue.A?this._currentValue.A(T):this._currentValue=T:null!==T&&void 0!==T&&T.clone?this._currentValue=T.clone():this._currentValue=T;-1!==a?this._registerTargetForLateAnimationBinding(this,this._originalValue[C]):this._animationState.loopMode===A.b.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT?this._currentValue.addToRef?this._currentValue.addToRef(this._originalValue[C],p[this._targetPath]):p[this._targetPath]=this._originalValue[C]+this._currentValue:p[this._targetPath]=this._currentValue,N.bH&&N.bH(this._animation.targetProperty)}_getCorrectLoopMode(){return this._target&&this._target.animationPropertiesOverride?this._target.animationPropertiesOverride.loopMode:this._animation.loopMode}goToFrame(N){let p=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const T=this._animation.getKeys();N<T[0].frame?N=T[0].frame:N>T[T.length-1].frame&&(N=T[T.length-1].frame);const A=this._events;if(A.length)for(let C=0;C<A.length;C++)A[C].onlyOnce||(A[C].isDone=A[C].frame<N);this._currentFrame=N;const a=this._animation._interpolate(N,this._animationState);this.setValue(a,p)}_prepareForSpeedRatioChange(N){const p=this._previousElapsedTime*(this._animation.framePerSecond*N)/1e3;this._absoluteFrameOffset=this._previousAbsoluteFrame-p}animate(N,p,T,a,C){let U=arguments.length>5&&void 0!==arguments[5]?arguments[5]:-1;const X=this._animation,y=X.targetPropertyPath;if(!y||y.length<1)return this._stopped=!0,!1;let e,H=!0;const M=this._events;let b=0;if(this._coreRuntimeAnimation)b=T-p,e=this._coreRuntimeAnimation.currentFrame,this._currentFrame=e,this._animationState.repeatCount=this._coreRuntimeAnimation._animationState.repeatCount,this._animationState.highLimitValue=this._coreRuntimeAnimation._animationState.highLimitValue,this._animationState.offsetValue=this._coreRuntimeAnimation._animationState.offsetValue;else{let U;(p<this._minFrame||p>this._maxFrame)&&(p=this._minFrame),(T<this._minFrame||T>this._maxFrame)&&(T=this._maxFrame),b=T-p;let y=N*(X.framePerSecond*C)/1e3+this._absoluteFrameOffset,l=0,k=!1;const x=a&&this._animationState.loopMode===A.b.ANIMATIONLOOPMODE_YOYO;if(x){const N=(y-p)/b,T=Math.sin(N*Math.PI);y=Math.abs(T)*b+p;const A=T>=0?1:-1;this._yoyoDirection!==A&&(k=!0),this._yoyoDirection=A}if(this._previousElapsedTime=N,this._previousAbsoluteFrame=y,!a&&T>=p&&(y>=b&&C>0||y<=0&&C<0))H=!1,l=X._getKeyValue(this._maxValue);else if(!a&&p>=T&&(y<=b&&C<0||y>=0&&C>0))H=!1,l=X._getKeyValue(this._minValue);else if(this._animationState.loopMode!==A.b.ANIMATIONLOOPMODE_CYCLE){const N=T.toString()+p.toString();if(!this._offsetsCache[N]){this._animationState.repeatCount=0,this._animationState.loopMode=A.b.ANIMATIONLOOPMODE_CYCLE;const a=X._interpolate(p,this._animationState),C=X._interpolate(T,this._animationState);switch(this._animationState.loopMode=this._getCorrectLoopMode(),X.dataType){case A.b.ANIMATIONTYPE_FLOAT:this._offsetsCache[N]=C-a;break;case A.b.ANIMATIONTYPE_QUATERNION:case A.b.ANIMATIONTYPE_VECTOR3:case A.b.ANIMATIONTYPE_VECTOR2:case A.b.ANIMATIONTYPE_SIZE:case A.b.ANIMATIONTYPE_COLOR3:this._offsetsCache[N]=C.Ip(a)}this._highLimitsCache[N]=C}l=this._highLimitsCache[N],U=this._offsetsCache[N]}if(void 0===U)switch(X.dataType){case A.b.ANIMATIONTYPE_FLOAT:U=0;break;case A.b.ANIMATIONTYPE_QUATERNION:U=A.g;break;case A.b.ANIMATIONTYPE_VECTOR3:U=A.q;break;case A.b.ANIMATIONTYPE_VECTOR2:U=A.m;break;case A.b.ANIMATIONTYPE_SIZE:U=A.k;break;case A.b.ANIMATIONTYPE_COLOR3:U=A.d;break;case A.b.ANIMATIONTYPE_COLOR4:U=A.e}if(this._host&&this._host.syncRoot){const N=this._host.syncRoot;e=p+b*((N.masterFrame-N.fromFrame)/(N.toFrame-N.fromFrame))}else e=y>0&&p>T||y<0&&p<T?H&&0!==b?T+y%b:p:H&&0!==b?p+y%b:T;if(!x&&(C>0&&this.currentFrame>e||C<0&&this.currentFrame<e)||x&&k){this._onLoop();for(let N=0;N<M.length;N++)M[N].onlyOnce||(M[N].isDone=!1);this._animationState.key=C>0?0:X.getKeys().length-1}this._currentFrame=e,this._animationState.repeatCount=0===b?0:y/b|0,this._animationState.highLimitValue=l,this._animationState.offsetValue=U}const l=X._interpolate(e,this._animationState);if(this.setValue(l,U),M.length)for(let A=0;A<M.length;A++)if(b>=0&&e>=M[A].frame&&M[A].frame>=p||b<0&&e<=M[A].frame&&M[A].frame<=p){const N=M[A];N.isDone||(N.onlyOnce&&(M.splice(A,1),A--),N.isDone=!0,N.action(e))}return H||(this._stopped=!0),H}}var H=T(12216);class M{get syncRoot(){return this._syncRoot}get masterFrame(){return 0===this._runtimeAnimations.length?0:this._runtimeAnimations[0].currentFrame}get weight(){return this._weight}set weight(N){this._weight=-1!==N?Math.min(Math.max(N,0),1):-1}get speedRatio(){return this._speedRatio}set speedRatio(N){for(let p=0;p<this._runtimeAnimations.length;p++){this._runtimeAnimations[p]._prepareForSpeedRatioChange(N)}this._speedRatio=N,null!==this._goToFrame&&this.goToFrame(this._goToFrame)}get elapsedTime(){return null===this._localDelayOffset?0:this._scene._animationTime-this._localDelayOffset}constructor(N,p){let T=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,A=arguments.length>3&&void 0!==arguments[3]?arguments[3]:100,C=arguments.length>4&&void 0!==arguments[4]&&arguments[4],U=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,X=arguments.length>6?arguments[6]:void 0,y=arguments.length>7?arguments[7]:void 0,e=arguments.length>8?arguments[8]:void 0,H=arguments.length>9&&void 0!==arguments[9]&&arguments[9],M=arguments.length>10&&void 0!==arguments[10]?arguments[10]:0;this.target=p,this.fromFrame=T,this.toFrame=A,this.loopAnimation=C,this.onAnimationEnd=X,this.onAnimationLoop=e,this.isAdditive=H,this.playOrder=M,this._localDelayOffset=null,this._pausedDelay=null,this._manualJumpDelay=null,this._runtimeAnimations=new Array,this.cU=!1,this._speedRatio=1,this._weight=-1,this._previousWeight=-1,this._syncRoot=null,this._frameToSyncFromJump=null,this._goToFrame=null,this.disposeOnEnd=!0,this.animationStarted=!1,this.onAnimationEndObservable=new a.c,this.onAnimationLoopObservable=new a.c,this._scene=N,y&&this.appendAnimations(p,y),this._speedRatio=U,N._activeAnimatables.push(this)}syncWith(N){if(this._syncRoot=N,N){const N=this._scene._activeAnimatables.indexOf(this);N>-1&&(this._scene._activeAnimatables.splice(N,1),this._scene._activeAnimatables.push(this))}return this}getAnimations(){return this._runtimeAnimations}appendAnimations(N,p){for(let T=0;T<p.length;T++){const A=p[T],a=new e(N,A,this._scene,this);a._onLoop=()=>{this.onAnimationLoopObservable.notifyObservers(this),this.onAnimationLoop&&this.onAnimationLoop()},this._runtimeAnimations.push(a)}}getAnimationByTargetProperty(N){const p=this._runtimeAnimations;for(let T=0;T<p.length;T++)if(p[T].animation.targetProperty===N)return p[T].animation;return null}getRuntimeAnimationByTargetProperty(N){const p=this._runtimeAnimations;for(let T=0;T<p.length;T++)if(p[T].animation.targetProperty===N)return p[T];return null}reset(){const N=this._runtimeAnimations;for(let p=0;p<N.length;p++)N[p].reset(!0);this._localDelayOffset=null,this._pausedDelay=null}enableBlending(N){const p=this._runtimeAnimations;for(let T=0;T<p.length;T++)p[T].animation.enableBlending=!0,p[T].animation.blendingSpeed=N}disableBlending(){const N=this._runtimeAnimations;for(let p=0;p<N.length;p++)N[p].animation.enableBlending=!1}goToFrame(N){let p=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const T=this._runtimeAnimations;if(T[0]){const p=T[0].animation.framePerSecond;this._frameToSyncFromJump=this._frameToSyncFromJump??T[0].currentFrame;const A=0===this.speedRatio?0:(N-this._frameToSyncFromJump)/p*1e3/this.speedRatio;this._manualJumpDelay=-A}for(let A=0;A<T.length;A++)T[A].goToFrame(N,p?this._weight:-1);this._goToFrame=N}get paused(){return this.cU}pause(){this.cU||(this.cU=!0)}restart(){this.cU=!1}_raiseOnAnimationEnd(){this.onAnimationEnd&&this.onAnimationEnd(),this.onAnimationEndObservable.notifyObservers(this)}stop(N,p){let T=arguments.length>2&&void 0!==arguments[2]&&arguments[2],A=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(N||p){const a=this._scene._activeAnimatables.indexOf(this);if(a>-1){const C=this._runtimeAnimations;for(let T=C.length-1;T>=0;T--){const A=C[T];N&&A.animation.name!=N||(p&&!p(A.target)||(A.dispose(),C.splice(T,1)))}0==C.length&&(T||this._scene._activeAnimatables.splice(a,1),A||this._raiseOnAnimationEnd())}}else{const N=this._scene._activeAnimatables.indexOf(this);if(N>-1){T||this._scene._activeAnimatables.splice(N,1);const p=this._runtimeAnimations;for(let N=0;N<p.length;N++)p[N].dispose();this._runtimeAnimations.length=0,A||this._raiseOnAnimationEnd()}}}async waitAsync(){return await new Promise((N=>{this.onAnimationEndObservable.add((()=>{N(this)}),void 0,void 0,this,!0)}))}_animate(N){if(this.cU)return this.animationStarted=!1,null===this._pausedDelay&&(this._pausedDelay=N),!0;if(null===this._localDelayOffset?(this._localDelayOffset=N,this._pausedDelay=null):null!==this._pausedDelay&&(this._localDelayOffset+=N-this._pausedDelay,this._pausedDelay=null),null!==this._manualJumpDelay&&(this._localDelayOffset+=this.speedRatio<0?-this._manualJumpDelay:this._manualJumpDelay,this._manualJumpDelay=null,this._frameToSyncFromJump=null),this._goToFrame=null,0===this._weight&&0===this._previousWeight)return!0;this._previousWeight=this._weight;let p=!1;const T=this._runtimeAnimations;let A;for(A=0;A<T.length;A++){const a=T[A].animate(N-this._localDelayOffset,this.fromFrame,this.toFrame,this.loopAnimation,this._speedRatio,this._weight);p=p||a}if(this.animationStarted=p,!p){if(this.disposeOnEnd)for(A=this._scene._activeAnimatables.indexOf(this),this._scene._activeAnimatables.splice(A,1),A=0;A<T.length;A++)T[A].dispose();this._raiseOnAnimationEnd(),this.disposeOnEnd&&(this.onAnimationEnd=null,this.onAnimationLoop=null,this.onAnimationLoopObservable.clear(),this.onAnimationEndObservable.clear())}return p}}function b(N){if(0===N.totalWeight&&0===N.totalAdditiveWeight)return N.originalValue;let p=1;const T=y.TmpVectors.xp[0],A=y.TmpVectors.xp[1],a=y.TmpVectors.Quaternion[0];let C=0;const U=N.animations[0],X=N.originalValue;let e=1,H=!1;if(N.totalWeight<1)e=1-N.totalWeight,X.decompose(A,a,T);else{if(C=1,p=N.totalWeight,e=U.weight/p,1==e){if(!N.totalAdditiveWeight)return U.currentValue;H=!0}U.currentValue.decompose(A,a,T)}if(!H){A.scaleInPlace(e),T.scaleInPlace(e),a.scaleInPlace(e);for(let U=C;U<N.animations.length;U++){const C=N.animations[U];if(0===C.weight)continue;e=C.weight/p;const X=y.TmpVectors.xp[2],H=y.TmpVectors.xp[3],M=y.TmpVectors.Quaternion[1];C.currentValue.decompose(H,M,X),H.scaleAndAddToRef(e,A),M.scaleAndAddToRef(y.Quaternion.Dot(a,M)>0?e:-e,a),X.scaleAndAddToRef(e,T)}a.normalize()}for(let b=0;b<N.additiveAnimations.length;b++){const p=N.additiveAnimations[b];if(0===p.weight)continue;const C=y.TmpVectors.xp[2],U=y.TmpVectors.xp[3],X=y.TmpVectors.Quaternion[1];p.currentValue.decompose(U,X,C),U.multiplyToRef(A,U),y.xp.LerpToRef(A,U,p.weight,A),a.multiplyToRef(X,X),y.Quaternion.SlerpToRef(a,X,p.weight,a),C.scaleAndAddToRef(p.weight,T)}const M=U?U._animationState.workValue:y.TmpVectors.Matrix[0].clone();return y.Matrix.ComposeToRef(A,a,T,M),M}function l(N,p){if(0===N.totalWeight&&0===N.totalAdditiveWeight)return p;const T=N.animations[0],A=N.originalValue;let a=p;if(0===N.totalWeight&&N.totalAdditiveWeight>0)a.A(A);else if(1===N.animations.length){if(y.Quaternion.SlerpToRef(A,T.currentValue,Math.min(1,N.totalWeight),a),0===N.totalAdditiveWeight)return a}else if(N.animations.length>1){let T,C,U=1;if(N.totalWeight<1){const p=1-N.totalWeight;T=[],C=[],T.push(A),C.push(p)}else{if(2===N.animations.length&&(y.Quaternion.SlerpToRef(N.animations[0].currentValue,N.animations[1].currentValue,N.animations[1].weight/N.totalWeight,p),0===N.totalAdditiveWeight))return p;T=[],C=[],U=N.totalWeight}for(let p=0;p<N.animations.length;p++){const A=N.animations[p];T.push(A.currentValue),C.push(A.weight/U)}let X=0;for(let N=0;N<T.length;)N?(X+=C[N],y.Quaternion.SlerpToRef(a,T[N],C[N]/X,a),N++):(y.Quaternion.SlerpToRef(T[N],T[N+1],C[N+1]/(C[N]+C[N+1]),p),a=p,X=C[N]+C[N+1],N+=2)}for(let C=0;C<N.additiveAnimations.length;C++){const p=N.additiveAnimations[C];0!==p.weight&&(a.multiplyToRef(p.currentValue,y.TmpVectors.Quaternion[0]),y.Quaternion.SlerpToRef(a,y.TmpVectors.Quaternion[0],p.weight,a))}return a}var k,x,I=T(12617);k=I.c,(x=X.e)&&(x.prototype.copyAnimationRange=function(N,p,T){let a=arguments.length>3&&void 0!==arguments[3]&&arguments[3],C=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;0===this.animations.length&&(this.animations.push(new A.b(this.name,"_matrix",N.animations[0].framePerSecond,A.b.ANIMATIONTYPE_MATRIX,0)),this.animations[0].setKeys([]));const U=N.animations[0].getRange(p);if(!U)return!1;const X=U.from,y=U.to,e=N.animations[0].getKeys(),H=N.length,M=N.getParent(),b=this.getParent(),l=a&&M&&H&&this.length&&H!==this.length,k=l&&b&&M?b.length/M.length:1,x=a&&!b&&C&&(1!==C.x||1!==C.y||1!==C.z),I=this.animations[0].getKeys();let L,n,w;for(let A=0,g=e.length;A<g;A++)L=e[A],L.frame>=X&&L.frame<=y&&(a?(w=L.value.clone(),l?(n=w.getTranslation(),w.setTranslation(n.scaleInPlace(k))):x&&C?(n=w.getTranslation(),w.setTranslation(n.multiplyInPlace(C))):w=L.value):w=L.value,I.push({frame:L.frame+T,value:w}));return this.animations[0].createRange(p,X+T,y+T),!0}),k&&(k.prototype._animate=function(N){if(!this.animationsEnabled)return;const p=H.d.Now;if(!this._animationTimeLast){if(this._pendingData.length>0)return;this._animationTimeLast=p}this.deltaTime=void 0!==N?N:this.useConstantAnimationDeltaTime?16:(p-this._animationTimeLast)*this.animationTimeScale,this._animationTimeLast=p;const T=this._activeAnimatables;if(0===T.length)return;this._animationTime+=this.deltaTime;const a=this._animationTime;for(let A=0;A<T.length;A++){const N=T[A];!N._animate(a)&&N.disposeOnEnd&&A--}!function(N){if(N._registeredForLateAnimationBindings.length){for(let p=0;p<N._registeredForLateAnimationBindings.length;p++){const T=N._registeredForLateAnimationBindings.data[p];for(const N in T._lateAnimationHolders){const p=T._lateAnimationHolders[N],a=p.animations[0],C=p.originalValue;if(void 0===C||null===C)continue;const U=A.b.AllowMatrixDecomposeForInterpolation&&C.m;let X=T[N];if(U)X=b(p);else if(void 0!==C.w)X=l(p,X||y.Quaternion.Identity());else{let N=0,T=1;const U=a&&a._animationState.loopMode===A.b.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT;if(p.totalWeight<1)X=U?C.clone?C.clone():C:a&&C.scale?C.scale(1-p.totalWeight):a?C*(1-p.totalWeight):C.clone?C.clone():C;else if(a){T=p.totalWeight;const A=a.weight/T;X=1!==A?a.currentValue.scale?a.currentValue.scale(A):a.currentValue*A:a.currentValue,U&&(X.addToRef?X.addToRef(C,X):X+=C),N=1}for(let A=N;A<p.animations.length;A++){const N=p.animations[A],a=N.weight/T;a&&(N.currentValue.scaleAndAddToRef?N.currentValue.scaleAndAddToRef(a,X):X+=N.currentValue*a)}for(let A=0;A<p.additiveAnimations.length;A++){const N=p.additiveAnimations[A],T=N.weight;T&&(N.currentValue.scaleAndAddToRef?N.currentValue.scaleAndAddToRef(T,X):X+=N.currentValue*T)}}T[N]=X}T._lateAnimationHolders={}}N._registeredForLateAnimationBindings.reset()}}(this)},k.prototype.sortActiveAnimatables=function(){this._activeAnimatables.sort(((N,p)=>N.playOrder-p.playOrder))},k.prototype.beginWeightedAnimation=function(N,p,T){let A=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,a=arguments.length>4?arguments[4]:void 0,C=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,U=arguments.length>6?arguments[6]:void 0,X=arguments.length>7?arguments[7]:void 0,y=arguments.length>8?arguments[8]:void 0,e=arguments.length>9?arguments[9]:void 0,H=arguments.length>10&&void 0!==arguments[10]&&arguments[10];const M=this.beginAnimation(N,p,T,a,C,U,X,!1,y,e,H);return M.weight=A,M},k.prototype.beginAnimation=function(N,p,T,A){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,C=arguments.length>5?arguments[5]:void 0,U=arguments.length>6?arguments[6]:void 0,X=!(arguments.length>7&&void 0!==arguments[7])||arguments[7],y=arguments.length>8?arguments[8]:void 0,e=arguments.length>9?arguments[9]:void 0,H=arguments.length>10&&void 0!==arguments[10]&&arguments[10];if(a<0){const N=p;p=T,T=N,a=-a}p>T&&(a=-a),X&&this.stopAnimation(N,void 0,y),U||(U=new M(this,N,p,T,A,a,C,void 0,e,H));const b=!y||y(N);if(N.animations&&b&&U.appendAnimations(N,N.animations),N.getAnimatables){const H=N.getAnimatables();for(let N=0;N<H.length;N++)this.beginAnimation(H[N],p,T,A,a,C,U,X,y,e)}return U.reset(),U},k.prototype.beginHierarchyAnimation=function(N,p,T,A,a){let C=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,U=arguments.length>6?arguments[6]:void 0,X=arguments.length>7?arguments[7]:void 0,y=!(arguments.length>8&&void 0!==arguments[8])||arguments[8],e=arguments.length>9?arguments[9]:void 0,H=arguments.length>11&&void 0!==arguments[11]&&arguments[11];const M=N.getDescendants(p),b=[];b.push(this.beginAnimation(N,T,A,a,C,U,X,y,e,void 0,H));for(const l of M)b.push(this.beginAnimation(l,T,A,a,C,U,X,y,e,void 0,H));return b},k.prototype.beginDirectAnimation=function(N,p,T,A,a){let C=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1;if(C<0){const N=T;T=A,A=N,C=-C}return T>A&&(C=-C),new M(this,N,T,A,a,C,arguments.length>6?arguments[6]:void 0,p,arguments.length>7?arguments[7]:void 0,arguments.length>8&&void 0!==arguments[8]&&arguments[8])},k.prototype.beginDirectHierarchyAnimation=function(N,p,T,A,a,C,U,X,y){let e=arguments.length>9&&void 0!==arguments[9]&&arguments[9];const H=N.getDescendants(p),M=[];M.push(this.beginDirectAnimation(N,T,A,a,C,U,X,y,e));for(const b of H)M.push(this.beginDirectAnimation(b,T,A,a,C,U,X,y,e));return M},k.prototype.getAnimatableByTarget=function(N){for(let p=0;p<this._activeAnimatables.length;p++)if(this._activeAnimatables[p].target===N)return this._activeAnimatables[p];return null},k.prototype.getAllAnimatablesByTarget=function(N){const p=[];for(let T=0;T<this._activeAnimatables.length;T++)this._activeAnimatables[T].target===N&&p.push(this._activeAnimatables[T]);return p},k.prototype.stopAnimation=function(N,p,T){const A=this.getAllAnimatablesByTarget(N);for(const a of A)a.stop(p,T)},k.prototype.stopAllAnimations=function(){if(this._activeAnimatables){for(let N=0;N<this._activeAnimatables.length;N++)this._activeAnimatables[N].stop(void 0,void 0,!0);this._activeAnimatables.length=0}for(const N of this.animationGroups)N.stop()});class L{getClassName(){return"TargetedAnimation"}serialize(){const N={};return N.animation=this.animation.serialize(),N.targetId=this.target.id,N}}class n{get mask(){return this._mask}set mask(N){this._mask!==N&&(this._mask=N,this.syncWithMask(!0))}syncWithMask(){let N=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(this.mask||N){this._numActiveAnimatables=0;for(let N=0;N<this._animatables.length;++N){const p=this._animatables[N];!this.mask||this.mask.disabled||this.mask.retainsTarget(p.target.name)?(this._numActiveAnimatables++,p.paused&&p.restart()):p.paused||p.pause()}}else this._numActiveAnimatables=this._targetedAnimations.length}removeUnmaskedAnimations(){if(this.mask&&!this.mask.disabled){for(let N=0;N<this._animatables.length;++N){const p=this._animatables[N];this.mask.retainsTarget(p.target.name)||(p.stop(),this._animatables.splice(N,1),--N)}for(let N=0;N<this._targetedAnimations.length;N++){const p=this._targetedAnimations[N];this.mask.retainsTarget(p.target.name)||(this._targetedAnimations.splice(N,1),--N)}}}get from(){return this._from}set from(N){if(this._from!==N){this._from=N;for(let N=0;N<this._animatables.length;N++){this._animatables[N].fromFrame=this._from}}}get to(){return this._to}set to(N){if(this._to!==N){this._to=N;for(let N=0;N<this._animatables.length;N++){this._animatables[N].toFrame=this._to}}}get isStarted(){return this._isStarted}get isPlaying(){return this._isStarted&&!this._isPaused}get speedRatio(){return this._speedRatio}set speedRatio(N){if(this._speedRatio!==N){this._speedRatio=N;for(let N=0;N<this._animatables.length;N++){this._animatables[N].speedRatio=this._speedRatio}}}get loopAnimation(){return this._loopAnimation}set loopAnimation(N){if(this._loopAnimation!==N){this._loopAnimation=N;for(let N=0;N<this._animatables.length;N++){this._animatables[N].loopAnimation=this._loopAnimation}}}get isAdditive(){return this._isAdditive}set isAdditive(N){if(this._isAdditive!==N){this._isAdditive=N;for(let N=0;N<this._animatables.length;N++){this._animatables[N].isAdditive=this._isAdditive}}}get weight(){return this._weight}set weight(N){this._weight!==N&&(this._weight=N,this.setWeightForAllAnimatables(this._weight))}get targetedAnimations(){return this._targetedAnimations}get animatables(){return this._animatables}get children(){return this._targetedAnimations}get playOrder(){return this._playOrder}set playOrder(N){if(this._playOrder!==N&&(this._playOrder=N,this._animatables.length>0)){for(let N=0;N<this._animatables.length;N++)this._animatables[N].playOrder=this._playOrder;this._scene.sortActiveAnimatables()}}get enableBlending(){return this._enableBlending}set enableBlending(N){if(this._enableBlending!==N&&(this._enableBlending=N,null!==N))for(let p=0;p<this._targetedAnimations.length;++p)this._targetedAnimations[p].animation.enableBlending=N}get blendingSpeed(){return this._blendingSpeed}set blendingSpeed(N){if(this._blendingSpeed!==N&&(this._blendingSpeed=N,null!==N))for(let p=0;p<this._targetedAnimations.length;++p)this._targetedAnimations[p].animation.blendingSpeed=N}getLength(N,p){N=N??this._from;return((p=p??this._to)-N)/(this.targetedAnimations[0].animation.framePerSecond*this._speedRatio)}static MergeAnimationGroups(N){let p=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],T=arguments.length>2&&void 0!==arguments[2]&&arguments[2],A=arguments.length>3?arguments[3]:void 0;if(0===N.length)return null;A=A??N[0].weight;let a=Number.MAX_VALUE,C=-Number.MAX_VALUE;if(T)for(const X of N)X.from<a&&(a=X.from),X.to>C&&(C=X.to);const U=new n(N[0].name+"_merged",N[0]._scene,A);for(const X of N){T&&X.normalize(a,C);for(const N of X.targetedAnimations)U.addTargetedAnimation(N.animation,N.target);p&&X.dispose()}return U}constructor(N){let p=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,T=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,A=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;this.name=N,this._targetedAnimations=new Array,this._animatables=new Array,this._from=Number.MAX_VALUE,this._to=-Number.MAX_VALUE,this._speedRatio=1,this._loopAnimation=!1,this._isAdditive=!1,this._weight=-1,this._playOrder=0,this._enableBlending=null,this._blendingSpeed=null,this._numActiveAnimatables=0,this._shouldStart=!0,this._parentContainer=null,this.onAnimationEndObservable=new a.c,this.onAnimationLoopObservable=new a.c,this.onAnimationGroupLoopObservable=new a.c,this.onAnimationGroupEndObservable=new a.c,this.onAnimationGroupPauseObservable=new a.c,this.onAnimationGroupPlayObservable=new a.c,this.metadata=null,this._mask=null,this._animationLoopFlags=[],this._scene=p||C.b.LastCreatedScene,this._weight=T,this._playOrder=A,this.uniqueId=this._scene.getUniqueId(),this._scene.addAnimationGroup(this)}addTargetedAnimation(N,p){const T=new L;T.animation=N,T.target=p;const A=N.getKeys();return this._from>A[0].frame&&(this._from=A[0].frame),this._to<A[A.length-1].frame&&(this._to=A[A.length-1].frame),null!==this._enableBlending&&(N.enableBlending=this._enableBlending),null!==this._blendingSpeed&&(N.blendingSpeed=this._blendingSpeed),this._targetedAnimations.push(T),this._shouldStart=!0,T}removeTargetedAnimation(N){for(let p=this._targetedAnimations.length-1;p>-1;p--){this._targetedAnimations[p].animation===N&&this._targetedAnimations.splice(p,1)}}normalize(){let N=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,p=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;null==N&&(N=this._from),null==p&&(p=this._to);for(let T=0;T<this._targetedAnimations.length;T++){const A=this._targetedAnimations[T].animation.getKeys(),a=A[0],C=A[A.length-1];if(a.frame>N){const p={frame:N,value:a.value,inTangent:a.inTangent,outTangent:a.outTangent,interpolation:a.interpolation};A.splice(0,0,p)}if(C.frame<p){const N={frame:p,value:C.value,inTangent:C.inTangent,outTangent:C.outTangent,interpolation:C.interpolation};A.push(N)}}return this._from=N,this._to=p,this}_processLoop(N,p,T){N.onAnimationLoop=()=>{this.onAnimationLoopObservable.notifyObservers(p),this._animationLoopFlags[T]||(this._animationLoopFlags[T]=!0,this._animationLoopCount++,this._animationLoopCount===this._numActiveAnimatables&&(this.onAnimationGroupLoopObservable.notifyObservers(this),this._animationLoopCount=0,this._animationLoopFlags.length=0))}}start(){let N=arguments.length>0&&void 0!==arguments[0]&&arguments[0],p=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,T=arguments.length>2?arguments[2]:void 0,A=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0;if(this._isStarted||0===this._targetedAnimations.length)return this;this._loopAnimation=N,this._shouldStart=!1,this._animationLoopCount=0,this._animationLoopFlags.length=0;for(let C=0;C<this._targetedAnimations.length;C++){const U=this._targetedAnimations[C],X=this._scene.beginDirectAnimation(U.target,[U.animation],void 0!==T?T:this._from,void 0!==A?A:this._to,N,p,void 0,void 0,void 0!==a?a:this._isAdditive);X.weight=this._weight,X.playOrder=this._playOrder,X.onAnimationEnd=()=>{this.onAnimationEndObservable.notifyObservers(U),this._checkAnimationGroupEnded(X)},this._processLoop(X,U,C),this._animatables.push(X)}return this.syncWithMask(),this._scene.sortActiveAnimatables(),this._speedRatio=p,this._isStarted=!0,this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}pause(){if(!this._isStarted)return this;this._isPaused=!0;for(let N=0;N<this._animatables.length;N++){this._animatables[N].pause()}return this.onAnimationGroupPauseObservable.notifyObservers(this),this}play(N){return this.isStarted&&this._animatables.length&&!this._shouldStart?(void 0!==N&&(this.loopAnimation=N),this.restart()):(this.stop(),this.start(N,this._speedRatio)),this}reset(){if(!this._isStarted)return this.play(),this.goToFrame(0),this.stop(!0),this;for(let N=0;N<this._animatables.length;N++){this._animatables[N].reset()}return this}restart(){if(!this._isStarted)return this;for(let N=0;N<this._animatables.length;N++){this._animatables[N].restart()}return this.syncWithMask(),this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}stop(){let N=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this._isStarted)return this;const p=this._animatables.slice();for(let A=0;A<p.length;A++)p[A].stop(void 0,void 0,!0,N);let T=0;for(let A=0;A<this._scene._activeAnimatables.length;A++){const p=this._scene._activeAnimatables[A];p._runtimeAnimations.length>0?this._scene._activeAnimatables[T++]=p:N&&this._checkAnimationGroupEnded(p,N)}return this._scene._activeAnimatables.length=T,this._isStarted=!1,this}setWeightForAllAnimatables(N){for(let p=0;p<this._animatables.length;p++){this._animatables[p].weight=N}return this}syncAllAnimationsWith(N){for(let p=0;p<this._animatables.length;p++){this._animatables[p].syncWith(N)}return this}goToFrame(N){let p=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this._isStarted)return this;for(let T=0;T<this._animatables.length;T++){this._animatables[T].goToFrame(N,p)}return this}getCurrentFrame(){var N;return(null===(N=this.animatables[0])||void 0===N?void 0:N.masterFrame)||0}dispose(){this.isStarted&&this.stop(),this._targetedAnimations.length=0,this._animatables.length=0;const N=this._scene.animationGroups.indexOf(this);if(N>-1&&this._scene.animationGroups.splice(N,1),this._parentContainer){const N=this._parentContainer.animationGroups.indexOf(this);N>-1&&this._parentContainer.animationGroups.splice(N,1),this._parentContainer=null}this.onAnimationEndObservable.clear(),this.onAnimationGroupEndObservable.clear(),this.onAnimationGroupPauseObservable.clear(),this.onAnimationGroupPlayObservable.clear(),this.onAnimationLoopObservable.clear(),this.onAnimationGroupLoopObservable.clear()}_checkAnimationGroupEnded(N){let p=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const T=this._animatables.indexOf(N);T>-1&&this._animatables.splice(T,1),this._animatables.length===this._targetedAnimations.length-this._numActiveAnimatables&&(this._isStarted=!1,p||this.onAnimationGroupEndObservable.notifyObservers(this),this._animatables.length=0)}clone(N,p){let T=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const A=new n(N||this.name,this._scene,this._weight,this._playOrder);A._from=this.from,A._to=this.to,A._speedRatio=this.speedRatio,A._loopAnimation=this.loopAnimation,A._isAdditive=this.isAdditive,A._enableBlending=this.enableBlending,A._blendingSpeed=this.blendingSpeed,A.metadata=this.metadata,A.mask=this.mask;for(const a of this._targetedAnimations)A.addTargetedAnimation(T?a.animation.clone():a.animation,p?p(a.target):a.target);return A}serialize(){const N={};N.name=this.name,N.from=this.from,N.to=this.to,N.speedRatio=this.speedRatio,N.loopAnimation=this.loopAnimation,N.isAdditive=this.isAdditive,N.weight=this.weight,N.playOrder=this.playOrder,N.enableBlending=this.enableBlending,N.blendingSpeed=this.blendingSpeed,N.targetedAnimations=[];for(let p=0;p<this.targetedAnimations.length;p++){const T=this.targetedAnimations[p];N.targetedAnimations[p]=T.serialize()}return U.b&&U.b.HasTags(this)&&(N.tags=U.b.GetTags(this)),this.metadata&&(N.metadata=this.metadata),N}static Parse(N,p){const T=new n(N.name,p,N.weight,N.playOrder);for(let a=0;a<N.targetedAnimations.length;a++){const C=N.targetedAnimations[a],U=A.b.Parse(C.animation),X=C.targetId;if("influence"===C.animation.property){const N=p.getMorphTargetById(X);N&&T.addTargetedAnimation(U,N)}else{const N=p.getNodeById(X);null!=N&&T.addTargetedAnimation(U,N)}}return U.b&&U.b.AddTagsTo(T,N.tags),null!==N.from&&null!==N.to&&T.normalize(N.from,N.to),void 0!==N.speedRatio&&(T._speedRatio=N.speedRatio),void 0!==N.loopAnimation&&(T._loopAnimation=N.loopAnimation),void 0!==N.isAdditive&&(T._isAdditive=N.isAdditive),void 0!==N.weight&&(T._weight=N.weight),void 0!==N.playOrder&&(T._playOrder=N.playOrder),void 0!==N.enableBlending&&(T._enableBlending=N.enableBlending),void 0!==N.blendingSpeed&&(T._blendingSpeed=N.blendingSpeed),void 0!==N.metadata&&(T.metadata=N.metadata),T}static MakeAnimationAdditive(N,p,T){let a;a="object"===typeof p?p:{referenceFrame:p,range:T,cloneOriginalAnimationGroup:arguments.length>3&&void 0!==arguments[3]&&arguments[3],clonedAnimationName:arguments.length>4?arguments[4]:void 0};let C=N;a.cloneOriginalAnimationGroup&&(C=N.clone(a.clonedAnimationGroupName||C.name));const U=C.targetedAnimations;for(let X=0;X<U.length;X++){const N=U[X];N.animation=A.b.MakeAnimationAdditive(N.animation,a)}if(C.isAdditive=!0,a.clipKeys){let N=Number.MAX_VALUE,p=-Number.MAX_VALUE;const T=C.targetedAnimations;for(let A=0;A<T.length;A++){const a=T[A].animation.getKeys();N>a[0].frame&&(N=a[0].frame),p<a[a.length-1].frame&&(p=a[a.length-1].frame)}C._from=N,C._to=p}return C}static ClipKeys(N,p,T,A,a){const C=N.clone(A||N.name);return n.ClipKeysInPlace(C,p,T,a)}static ClipKeysInPlace(N,p,T,A){return n.ClipInPlace(N,p,T,A,!1)}static ClipFrames(N,p,T,A,a){const C=N.clone(A||N.name);return n.ClipFramesInPlace(C,p,T,a)}static ClipFramesInPlace(N,p,T,A){return n.ClipInPlace(N,p,T,A,!0)}static ClipInPlace(N,p,T,A){let a=arguments.length>4&&void 0!==arguments[4]&&arguments[4],C=Number.MAX_VALUE,U=-Number.MAX_VALUE;const X=N.targetedAnimations;for(let y=0;y<X.length;y++){const N=X[y],e=A?N.animation:N.animation.clone();a&&(e.createKeyForFrame(p),e.createKeyForFrame(T));const H=e.getKeys(),M=[];let b=Number.MAX_VALUE;for(let A=0;A<H.length;A++){const N=H[A];if(!a&&A>=p&&A<=T||a&&N.frame>=p&&N.frame<=T){const p={frame:N.frame,value:N.value.clone?N.value.clone():N.value,inTangent:N.inTangent,outTangent:N.outTangent,interpolation:N.interpolation,lockedTangent:N.lockedTangent};b===Number.MAX_VALUE&&(b=p.frame),p.frame-=b,M.push(p)}}0!==M.length?(C>M[0].frame&&(C=M[0].frame),U<M[M.length-1].frame&&(U=M[M.length-1].frame),e.setKeys(M,!0),N.animation=e):(X.splice(y,1),y--)}return N._from=C,N._to=U,N}getClassName(){return"AnimationGroup"}toString(N){let p="Name: "+this.name;return p+=", type: "+this.getClassName(),N&&(p+=", from: "+this._from,p+=", to: "+this._to,p+=", isStarted: "+this._isStarted,p+=", speedRatio: "+this._speedRatio,p+=", targetedAnimations length: "+this._targetedAnimations.length,p+=", animatables length: "+this._animatables),p}}}}]);