"use strict";(self.bbj0x35f849=self.bbj0x35f849||[]).push([[78],{14264:(N,q,C)=>{C.r(q),C.d(q,{AnimationGroup:()=>O,TargetedAnimation:()=>r});var d=C(11645),U=C(10949),W=C(10995),a=C(11159),F=C(12763),w=C(11122);class A{get currentFrame(){return this._currentFrame}get weight(){return this._weight}get currentValue(){return this._currentValue}get targetPath(){return this._targetPath}get target(){return this._currentActiveTarget}get isAdditive(){return this._host&&this._host.isAdditive}constructor(N,q,C,U){if(this._events=new Array,this._currentFrame=0,this._originalValue=new Array,this._originalBlendValue=null,this._offsetsCache={},this._highLimitsCache={},this._stopped=!1,this._blendingFactor=0,this._currentValue=null,this._currentActiveTarget=null,this._directTarget=null,this._targetPath="",this._weight=1,this._absoluteFrameOffset=0,this._previousElapsedTime=0,this._yoyoDirection=1,this._previousAbsoluteFrame=0,this._targetIsArray=!1,this._coreRuntimeAnimation=null,this._animation=q,this._target=N,this._scene=C,this._host=U,this._activeTargets=[],q._runtimeAnimations.push(this),this._animationState={key:0,repeatCount:0,loopMode:this._getCorrectLoopMode()},this._animation.dataType===d.d.ANIMATIONTYPE_MATRIX&&(this._animationState.workValue=w.Matrix.Zero()),this._keys=this._animation.getKeys(),this._minFrame=this._keys[0].frame,this._maxFrame=this._keys[this._keys.length-1].frame,this._minValue=this._keys[0].value,this._maxValue=this._keys[this._keys.length-1].value,0!==this._minFrame){const N={frame:0,value:this._minValue};this._keys.splice(0,0,N)}if(this._target instanceof Array){let N=0;for(const q of this._target)this._preparePath(q,N),this._getOriginalValues(N),N++;this._targetIsArray=!0}else this._preparePath(this._target),this._getOriginalValues(),this._targetIsArray=!1,this._directTarget=this._activeTargets[0];const W=q.getEvents();if(W&&W.length>0)for(const d of W)this._events.push(d._clone());this._enableBlending=N&&N.animationPropertiesOverride?N.animationPropertiesOverride.enableBlending:this._animation.enableBlending}_preparePath(N){let q=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const C=this._animation.targetPropertyPath;if(C.length>1){let d=N;for(let N=0;N<C.length-1;N++){const q=C[N];if(d=d[q],void 0===d)throw new Error(`Invalid property (${q}) in property path (${C.join(".")})`)}this._targetPath=C[C.length-1],this._activeTargets[q]=d}else this._targetPath=C[0],this._activeTargets[q]=N;if(void 0===this._activeTargets[q][this._targetPath])throw new Error(`Invalid property (${this._targetPath}) in property path (${C.join(".")})`)}get animation(){return this._animation}reset(){if(arguments.length>0&&void 0!==arguments[0]&&arguments[0])if(this._target instanceof Array){let N=0;for(const q of this._target)void 0!==this._originalValue[N]&&this._setValue(q,this._activeTargets[N],this._originalValue[N],-1,N),N++}else void 0!==this._originalValue[0]&&this._setValue(this._target,this._directTarget,this._originalValue[0],-1,0);this._offsetsCache={},this._highLimitsCache={},this._currentFrame=0,this._blendingFactor=0;for(let N=0;N<this._events.length;N++)this._events[N].isDone=!1}isStopped(){return this._stopped}dispose(){const N=this._animation.runtimeAnimations.indexOf(this);N>-1&&this._animation.runtimeAnimations.splice(N,1)}setValue(N,q){if(this._targetIsArray)for(let C=0;C<this._target.length;C++){const d=this._target[C];this._setValue(d,this._activeTargets[C],N,q,C)}else this._setValue(this._target,this._directTarget,N,q,0)}_getOriginalValues(){let N,q=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;const C=this._activeTargets[q];N=C.getLocalMatrix&&"_matrix"===this._targetPath?C.getLocalMatrix():C[this._targetPath],N&&N.clone?this._originalValue[q]=N.clone():this._originalValue[q]=N}_registerTargetForLateAnimationBinding(N,q){const C=N.target;this._scene._registeredForLateAnimationBindings.pushNoDuplicate(C),C._lateAnimationHolders||(C._lateAnimationHolders={}),C._lateAnimationHolders[N.targetPath]||(C._lateAnimationHolders[N.targetPath]={totalWeight:0,totalAdditiveWeight:0,animations:[],additiveAnimations:[],originalValue:q}),N.isAdditive?(C._lateAnimationHolders[N.targetPath].additiveAnimations.push(N),C._lateAnimationHolders[N.targetPath].totalAdditiveWeight+=N.weight):(C._lateAnimationHolders[N.targetPath].animations.push(N),C._lateAnimationHolders[N.targetPath].totalWeight+=N.weight)}_setValue(N,q,C,U,W){if(this._currentActiveTarget=q,this._weight=U,this._enableBlending&&this._blendingFactor<=1){if(!this._originalBlendValue){const N=q[this._targetPath];N.clone?this._originalBlendValue=N.clone():this._originalBlendValue=N}this._originalBlendValue.m?d.d.AllowMatrixDecomposeForInterpolation?this._currentValue?w.Matrix.DecomposeLerpToRef(this._originalBlendValue,C,this._blendingFactor,this._currentValue):this._currentValue=w.Matrix.DecomposeLerp(this._originalBlendValue,C,this._blendingFactor):this._currentValue?w.Matrix.LerpToRef(this._originalBlendValue,C,this._blendingFactor,this._currentValue):this._currentValue=w.Matrix.Lerp(this._originalBlendValue,C,this._blendingFactor):this._currentValue=d.d._UniversalLerp(this._originalBlendValue,C,this._blendingFactor);const U=N&&N.animationPropertiesOverride?N.animationPropertiesOverride.blendingSpeed:this._animation.blendingSpeed;this._blendingFactor+=U}else this._currentValue?this._currentValue.U?this._currentValue.U(C):this._currentValue=C:null!==C&&void 0!==C&&C.clone?this._currentValue=C.clone():this._currentValue=C;-1!==U?this._registerTargetForLateAnimationBinding(this,this._originalValue[W]):this._animationState.loopMode===d.d.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT?this._currentValue.addToRef?this._currentValue.addToRef(this._originalValue[W],q[this._targetPath]):q[this._targetPath]=this._originalValue[W]+this._currentValue:q[this._targetPath]=this._currentValue,N.HA&&N.HA(this._animation.targetProperty)}_getCorrectLoopMode(){return this._target&&this._target.animationPropertiesOverride?this._target.animationPropertiesOverride.loopMode:this._animation.loopMode}goToFrame(N){let q=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const C=this._animation.getKeys();N<C[0].frame?N=C[0].frame:N>C[C.length-1].frame&&(N=C[C.length-1].frame);const d=this._events;if(d.length)for(let W=0;W<d.length;W++)d[W].onlyOnce||(d[W].isDone=d[W].frame<N);this._currentFrame=N;const U=this._animation._interpolate(N,this._animationState);this.setValue(U,q)}_prepareForSpeedRatioChange(N){const q=this._previousElapsedTime*(this._animation.framePerSecond*N)/1e3;this._absoluteFrameOffset=this._previousAbsoluteFrame-q}animate(N,q,C,U,W){let a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:-1;const F=this._animation,w=F.targetPropertyPath;if(!w||w.length<1)return this._stopped=!0,!1;let A,n=!0;const t=this._events;let V=0;if(this._coreRuntimeAnimation)V=C-q,A=this._coreRuntimeAnimation.currentFrame,this._currentFrame=A,this._animationState.repeatCount=this._coreRuntimeAnimation._animationState.repeatCount,this._animationState.highLimitValue=this._coreRuntimeAnimation._animationState.highLimitValue,this._animationState.offsetValue=this._coreRuntimeAnimation._animationState.offsetValue;else{let a;(q<this._minFrame||q>this._maxFrame)&&(q=this._minFrame),(C<this._minFrame||C>this._maxFrame)&&(C=this._maxFrame),V=C-q;let w=N*(F.framePerSecond*W)/1e3+this._absoluteFrameOffset,Z=0,J=!1;const Q=U&&this._animationState.loopMode===d.d.ANIMATIONLOOPMODE_YOYO;if(Q){const N=(w-q)/V,C=Math.sin(N*Math.PI);w=Math.abs(C)*V+q;const d=C>=0?1:-1;this._yoyoDirection!==d&&(J=!0),this._yoyoDirection=d}if(this._previousElapsedTime=N,this._previousAbsoluteFrame=w,!U&&C>=q&&(w>=V&&W>0||w<=0&&W<0))n=!1,Z=F._getKeyValue(this._maxValue);else if(!U&&q>=C&&(w<=V&&W<0||w>=0&&W>0))n=!1,Z=F._getKeyValue(this._minValue);else if(this._animationState.loopMode!==d.d.ANIMATIONLOOPMODE_CYCLE){const N=C.toString()+q.toString();if(!this._offsetsCache[N]){this._animationState.repeatCount=0,this._animationState.loopMode=d.d.ANIMATIONLOOPMODE_CYCLE;const U=F._interpolate(q,this._animationState),W=F._interpolate(C,this._animationState);switch(this._animationState.loopMode=this._getCorrectLoopMode(),F.dataType){case d.d.ANIMATIONTYPE_FLOAT:this._offsetsCache[N]=W-U;break;case d.d.ANIMATIONTYPE_QUATERNION:case d.d.ANIMATIONTYPE_VECTOR3:case d.d.ANIMATIONTYPE_VECTOR2:case d.d.ANIMATIONTYPE_SIZE:case d.d.ANIMATIONTYPE_COLOR3:this._offsetsCache[N]=W.Qq(U)}this._highLimitsCache[N]=W}Z=this._highLimitsCache[N],a=this._offsetsCache[N]}if(void 0===a)switch(F.dataType){case d.d.ANIMATIONTYPE_FLOAT:a=0;break;case d.d.ANIMATIONTYPE_QUATERNION:a=d.i;break;case d.d.ANIMATIONTYPE_VECTOR3:a=d.o;break;case d.d.ANIMATIONTYPE_VECTOR2:a=d.n;break;case d.d.ANIMATIONTYPE_SIZE:a=d.l;break;case d.d.ANIMATIONTYPE_COLOR3:a=d.e;break;case d.d.ANIMATIONTYPE_COLOR4:a=d.h}if(this._host&&this._host.syncRoot){const N=this._host.syncRoot;A=q+V*((N.masterFrame-N.fromFrame)/(N.toFrame-N.fromFrame))}else A=w>0&&q>C||w<0&&q<C?n&&0!==V?C+w%V:q:n&&0!==V?q+w%V:C;if(!Q&&(W>0&&this.currentFrame>A||W<0&&this.currentFrame<A)||Q&&J){this._onLoop();for(let N=0;N<t.length;N++)t[N].onlyOnce||(t[N].isDone=!1);this._animationState.key=W>0?0:F.getKeys().length-1}this._currentFrame=A,this._animationState.repeatCount=0===V?0:w/V|0,this._animationState.highLimitValue=Z,this._animationState.offsetValue=a}const Z=F._interpolate(A,this._animationState);if(this.setValue(Z,a),t.length)for(let d=0;d<t.length;d++)if(V>=0&&A>=t[d].frame&&t[d].frame>=q||V<0&&A<=t[d].frame&&t[d].frame<=q){const N=t[d];N.isDone||(N.onlyOnce&&(t.splice(d,1),d--),N.isDone=!0,N.action(A))}return n||(this._stopped=!0),n}}var n=C(10980);class t{get syncRoot(){return this._syncRoot}get masterFrame(){return 0===this._runtimeAnimations.length?0:this._runtimeAnimations[0].currentFrame}get weight(){return this._weight}set weight(N){this._weight=-1!==N?Math.min(Math.max(N,0),1):-1}get speedRatio(){return this._speedRatio}set speedRatio(N){for(let q=0;q<this._runtimeAnimations.length;q++){this._runtimeAnimations[q]._prepareForSpeedRatioChange(N)}this._speedRatio=N,null!==this._goToFrame&&this.goToFrame(this._goToFrame)}get elapsedTime(){return null===this._localDelayOffset?0:this._scene._animationTime-this._localDelayOffset}constructor(N,q){let C=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,d=arguments.length>3&&void 0!==arguments[3]?arguments[3]:100,W=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,F=arguments.length>6?arguments[6]:void 0,w=arguments.length>7?arguments[7]:void 0,A=arguments.length>8?arguments[8]:void 0,n=arguments.length>9&&void 0!==arguments[9]&&arguments[9],t=arguments.length>10&&void 0!==arguments[10]?arguments[10]:0;this.target=q,this.fromFrame=C,this.toFrame=d,this.loopAnimation=W,this.onAnimationEnd=F,this.onAnimationLoop=A,this.isAdditive=n,this.playOrder=t,this._localDelayOffset=null,this._pausedDelay=null,this._manualJumpDelay=null,this._runtimeAnimations=new Array,this.JF=!1,this._speedRatio=1,this._weight=-1,this._previousWeight=-1,this._syncRoot=null,this._frameToSyncFromJump=null,this._goToFrame=null,this.disposeOnEnd=!0,this.animationStarted=!1,this.onAnimationEndObservable=new U.b,this.onAnimationLoopObservable=new U.b,this._scene=N,w&&this.appendAnimations(q,w),this._speedRatio=a,N._activeAnimatables.push(this)}syncWith(N){if(this._syncRoot=N,N){const N=this._scene._activeAnimatables.indexOf(this);N>-1&&(this._scene._activeAnimatables.splice(N,1),this._scene._activeAnimatables.push(this))}return this}getAnimations(){return this._runtimeAnimations}appendAnimations(N,q){for(let C=0;C<q.length;C++){const d=q[C],U=new A(N,d,this._scene,this);U._onLoop=()=>{this.onAnimationLoopObservable.notifyObservers(this),this.onAnimationLoop&&this.onAnimationLoop()},this._runtimeAnimations.push(U)}}getAnimationByTargetProperty(N){const q=this._runtimeAnimations;for(let C=0;C<q.length;C++)if(q[C].animation.targetProperty===N)return q[C].animation;return null}getRuntimeAnimationByTargetProperty(N){const q=this._runtimeAnimations;for(let C=0;C<q.length;C++)if(q[C].animation.targetProperty===N)return q[C];return null}reset(){const N=this._runtimeAnimations;for(let q=0;q<N.length;q++)N[q].reset(!0);this._localDelayOffset=null,this._pausedDelay=null}enableBlending(N){const q=this._runtimeAnimations;for(let C=0;C<q.length;C++)q[C].animation.enableBlending=!0,q[C].animation.blendingSpeed=N}disableBlending(){const N=this._runtimeAnimations;for(let q=0;q<N.length;q++)N[q].animation.enableBlending=!1}goToFrame(N){let q=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const C=this._runtimeAnimations;if(C[0]){const q=C[0].animation.framePerSecond;this._frameToSyncFromJump=this._frameToSyncFromJump??C[0].currentFrame;const d=0===this.speedRatio?0:(N-this._frameToSyncFromJump)/q*1e3/this.speedRatio;this._manualJumpDelay=-d}for(let d=0;d<C.length;d++)C[d].goToFrame(N,q?this._weight:-1);this._goToFrame=N}get paused(){return this.JF}pause(){this.JF||(this.JF=!0)}restart(){this.JF=!1}_raiseOnAnimationEnd(){this.onAnimationEnd&&this.onAnimationEnd(),this.onAnimationEndObservable.notifyObservers(this)}stop(N,q){let C=arguments.length>2&&void 0!==arguments[2]&&arguments[2],d=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(N||q){const U=this._scene._activeAnimatables.indexOf(this);if(U>-1){const W=this._runtimeAnimations;for(let C=W.length-1;C>=0;C--){const d=W[C];N&&d.animation.name!=N||(q&&!q(d.target)||(d.dispose(),W.splice(C,1)))}0==W.length&&(C||this._scene._activeAnimatables.splice(U,1),d||this._raiseOnAnimationEnd())}}else{const N=this._scene._activeAnimatables.indexOf(this);if(N>-1){C||this._scene._activeAnimatables.splice(N,1);const q=this._runtimeAnimations;for(let N=0;N<q.length;N++)q[N].dispose();this._runtimeAnimations.length=0,d||this._raiseOnAnimationEnd()}}}async waitAsync(){return await new Promise((N=>{this.onAnimationEndObservable.add((()=>{N(this)}),void 0,void 0,this,!0)}))}_animate(N){if(this.JF)return this.animationStarted=!1,null===this._pausedDelay&&(this._pausedDelay=N),!0;if(null===this._localDelayOffset?(this._localDelayOffset=N,this._pausedDelay=null):null!==this._pausedDelay&&(this._localDelayOffset+=N-this._pausedDelay,this._pausedDelay=null),null!==this._manualJumpDelay&&(this._localDelayOffset+=this.speedRatio<0?-this._manualJumpDelay:this._manualJumpDelay,this._manualJumpDelay=null,this._frameToSyncFromJump=null),this._goToFrame=null,0===this._weight&&0===this._previousWeight)return!0;this._previousWeight=this._weight;let q=!1;const C=this._runtimeAnimations;let d;for(d=0;d<C.length;d++){const U=C[d].animate(N-this._localDelayOffset,this.fromFrame,this.toFrame,this.loopAnimation,this._speedRatio,this._weight);q=q||U}if(this.animationStarted=q,!q){if(this.disposeOnEnd)for(d=this._scene._activeAnimatables.indexOf(this),this._scene._activeAnimatables.splice(d,1),d=0;d<C.length;d++)C[d].dispose();this._raiseOnAnimationEnd(),this.disposeOnEnd&&(this.onAnimationEnd=null,this.onAnimationLoop=null,this.onAnimationLoopObservable.clear(),this.onAnimationEndObservable.clear())}return q}}function V(N){if(0===N.totalWeight&&0===N.totalAdditiveWeight)return N.originalValue;let q=1;const C=w.TmpVectors.Jq[0],d=w.TmpVectors.Jq[1],U=w.TmpVectors.Quaternion[0];let W=0;const a=N.animations[0],F=N.originalValue;let A=1,n=!1;if(N.totalWeight<1)A=1-N.totalWeight,F.decompose(d,U,C);else{if(W=1,q=N.totalWeight,A=a.weight/q,1==A){if(!N.totalAdditiveWeight)return a.currentValue;n=!0}a.currentValue.decompose(d,U,C)}if(!n){d.scaleInPlace(A),C.scaleInPlace(A),U.scaleInPlace(A);for(let a=W;a<N.animations.length;a++){const W=N.animations[a];if(0===W.weight)continue;A=W.weight/q;const F=w.TmpVectors.Jq[2],n=w.TmpVectors.Jq[3],t=w.TmpVectors.Quaternion[1];W.currentValue.decompose(n,t,F),n.scaleAndAddToRef(A,d),t.scaleAndAddToRef(w.Quaternion.Dot(U,t)>0?A:-A,U),F.scaleAndAddToRef(A,C)}U.normalize()}for(let V=0;V<N.additiveAnimations.length;V++){const q=N.additiveAnimations[V];if(0===q.weight)continue;const W=w.TmpVectors.Jq[2],a=w.TmpVectors.Jq[3],F=w.TmpVectors.Quaternion[1];q.currentValue.decompose(a,F,W),a.multiplyToRef(d,a),w.Jq.LerpToRef(d,a,q.weight,d),U.multiplyToRef(F,F),w.Quaternion.SlerpToRef(U,F,q.weight,U),W.scaleAndAddToRef(q.weight,C)}const t=a?a._animationState.workValue:w.TmpVectors.Matrix[0].clone();return w.Matrix.ComposeToRef(d,U,C,t),t}function Z(N,q){if(0===N.totalWeight&&0===N.totalAdditiveWeight)return q;const C=N.animations[0],d=N.originalValue;let U=q;if(0===N.totalWeight&&N.totalAdditiveWeight>0)U.U(d);else if(1===N.animations.length){if(w.Quaternion.SlerpToRef(d,C.currentValue,Math.min(1,N.totalWeight),U),0===N.totalAdditiveWeight)return U}else if(N.animations.length>1){let C,W,a=1;if(N.totalWeight<1){const q=1-N.totalWeight;C=[],W=[],C.push(d),W.push(q)}else{if(2===N.animations.length&&(w.Quaternion.SlerpToRef(N.animations[0].currentValue,N.animations[1].currentValue,N.animations[1].weight/N.totalWeight,q),0===N.totalAdditiveWeight))return q;C=[],W=[],a=N.totalWeight}for(let q=0;q<N.animations.length;q++){const d=N.animations[q];C.push(d.currentValue),W.push(d.weight/a)}let F=0;for(let N=0;N<C.length;)N?(F+=W[N],w.Quaternion.SlerpToRef(U,C[N],W[N]/F,U),N++):(w.Quaternion.SlerpToRef(C[N],C[N+1],W[N+1]/(W[N]+W[N+1]),q),U=q,F=W[N]+W[N+1],N+=2)}for(let W=0;W<N.additiveAnimations.length;W++){const q=N.additiveAnimations[W];0!==q.weight&&(U.multiplyToRef(q.currentValue,w.TmpVectors.Quaternion[0]),w.Quaternion.SlerpToRef(U,w.TmpVectors.Quaternion[0],q.weight,U))}return U}var J,Q,v=C(11364);J=v.c,(Q=F.d)&&(Q.prototype.copyAnimationRange=function(N,q,C){let U=arguments.length>3&&void 0!==arguments[3]&&arguments[3],W=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;0===this.animations.length&&(this.animations.push(new d.d(this.name,"_matrix",N.animations[0].framePerSecond,d.d.ANIMATIONTYPE_MATRIX,0)),this.animations[0].setKeys([]));const a=N.animations[0].getRange(q);if(!a)return!1;const F=a.from,w=a.to,A=N.animations[0].getKeys(),n=N.length,t=N.getParent(),V=this.getParent(),Z=U&&t&&n&&this.length&&n!==this.length,J=Z&&V&&t?V.length/t.length:1,Q=U&&!V&&W&&(1!==W.x||1!==W.y||1!==W.z),v=this.animations[0].getKeys();let r,O,K;for(let d=0,i=A.length;d<i;d++)r=A[d],r.frame>=F&&r.frame<=w&&(U?(K=r.value.clone(),Z?(O=K.getTranslation(),K.setTranslation(O.scaleInPlace(J))):Q&&W?(O=K.getTranslation(),K.setTranslation(O.multiplyInPlace(W))):K=r.value):K=r.value,v.push({frame:r.frame+C,value:K}));return this.animations[0].createRange(q,F+C,w+C),!0}),J&&(J.prototype._animate=function(N){if(!this.animationsEnabled)return;const q=n.c.Now;if(!this._animationTimeLast){if(this._pendingData.length>0)return;this._animationTimeLast=q}this.deltaTime=void 0!==N?N:this.useConstantAnimationDeltaTime?16:(q-this._animationTimeLast)*this.animationTimeScale,this._animationTimeLast=q;const C=this._activeAnimatables;if(0===C.length)return;this._animationTime+=this.deltaTime;const U=this._animationTime;for(let d=0;d<C.length;d++){const N=C[d];!N._animate(U)&&N.disposeOnEnd&&d--}!function(N){if(N._registeredForLateAnimationBindings.length){for(let q=0;q<N._registeredForLateAnimationBindings.length;q++){const C=N._registeredForLateAnimationBindings.data[q];for(const N in C._lateAnimationHolders){const q=C._lateAnimationHolders[N],U=q.animations[0],W=q.originalValue;if(void 0===W||null===W)continue;const a=d.d.AllowMatrixDecomposeForInterpolation&&W.m;let F=C[N];if(a)F=V(q);else if(void 0!==W.w)F=Z(q,F||w.Quaternion.Identity());else{let N=0,C=1;const a=U&&U._animationState.loopMode===d.d.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT;if(q.totalWeight<1)F=a?W.clone?W.clone():W:U&&W.scale?W.scale(1-q.totalWeight):U?W*(1-q.totalWeight):W.clone?W.clone():W;else if(U){C=q.totalWeight;const d=U.weight/C;F=1!==d?U.currentValue.scale?U.currentValue.scale(d):U.currentValue*d:U.currentValue,a&&(F.addToRef?F.addToRef(W,F):F+=W),N=1}for(let d=N;d<q.animations.length;d++){const N=q.animations[d],U=N.weight/C;U&&(N.currentValue.scaleAndAddToRef?N.currentValue.scaleAndAddToRef(U,F):F+=N.currentValue*U)}for(let d=0;d<q.additiveAnimations.length;d++){const N=q.additiveAnimations[d],C=N.weight;C&&(N.currentValue.scaleAndAddToRef?N.currentValue.scaleAndAddToRef(C,F):F+=N.currentValue*C)}}C[N]=F}C._lateAnimationHolders={}}N._registeredForLateAnimationBindings.reset()}}(this)},J.prototype.sortActiveAnimatables=function(){this._activeAnimatables.sort(((N,q)=>N.playOrder-q.playOrder))},J.prototype.beginWeightedAnimation=function(N,q,C){let d=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,U=arguments.length>4?arguments[4]:void 0,W=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,a=arguments.length>6?arguments[6]:void 0,F=arguments.length>7?arguments[7]:void 0,w=arguments.length>8?arguments[8]:void 0,A=arguments.length>9?arguments[9]:void 0,n=arguments.length>10&&void 0!==arguments[10]&&arguments[10];const t=this.beginAnimation(N,q,C,U,W,a,F,!1,w,A,n);return t.weight=d,t},J.prototype.beginAnimation=function(N,q,C,d){let U=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,W=arguments.length>5?arguments[5]:void 0,a=arguments.length>6?arguments[6]:void 0,F=!(arguments.length>7&&void 0!==arguments[7])||arguments[7],w=arguments.length>8?arguments[8]:void 0,A=arguments.length>9?arguments[9]:void 0,n=arguments.length>10&&void 0!==arguments[10]&&arguments[10];if(U<0){const N=q;q=C,C=N,U=-U}q>C&&(U=-U),F&&this.stopAnimation(N,void 0,w),a||(a=new t(this,N,q,C,d,U,W,void 0,A,n));const V=!w||w(N);if(N.animations&&V&&a.appendAnimations(N,N.animations),N.getAnimatables){const n=N.getAnimatables();for(let N=0;N<n.length;N++)this.beginAnimation(n[N],q,C,d,U,W,a,F,w,A)}return a.reset(),a},J.prototype.beginHierarchyAnimation=function(N,q,C,d,U){let W=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,a=arguments.length>6?arguments[6]:void 0,F=arguments.length>7?arguments[7]:void 0,w=!(arguments.length>8&&void 0!==arguments[8])||arguments[8],A=arguments.length>9?arguments[9]:void 0,n=arguments.length>11&&void 0!==arguments[11]&&arguments[11];const t=N.getDescendants(q),V=[];V.push(this.beginAnimation(N,C,d,U,W,a,F,w,A,void 0,n));for(const Z of t)V.push(this.beginAnimation(Z,C,d,U,W,a,F,w,A,void 0,n));return V},J.prototype.beginDirectAnimation=function(N,q,C,d,U){let W=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1;if(W<0){const N=C;C=d,d=N,W=-W}return C>d&&(W=-W),new t(this,N,C,d,U,W,arguments.length>6?arguments[6]:void 0,q,arguments.length>7?arguments[7]:void 0,arguments.length>8&&void 0!==arguments[8]&&arguments[8])},J.prototype.beginDirectHierarchyAnimation=function(N,q,C,d,U,W,a,F,w){let A=arguments.length>9&&void 0!==arguments[9]&&arguments[9];const n=N.getDescendants(q),t=[];t.push(this.beginDirectAnimation(N,C,d,U,W,a,F,w,A));for(const V of n)t.push(this.beginDirectAnimation(V,C,d,U,W,a,F,w,A));return t},J.prototype.getAnimatableByTarget=function(N){for(let q=0;q<this._activeAnimatables.length;q++)if(this._activeAnimatables[q].target===N)return this._activeAnimatables[q];return null},J.prototype.getAllAnimatablesByTarget=function(N){const q=[];for(let C=0;C<this._activeAnimatables.length;C++)this._activeAnimatables[C].target===N&&q.push(this._activeAnimatables[C]);return q},J.prototype.stopAnimation=function(N,q,C){const d=this.getAllAnimatablesByTarget(N);for(const U of d)U.stop(q,C)},J.prototype.stopAllAnimations=function(){if(this._activeAnimatables){for(let N=0;N<this._activeAnimatables.length;N++)this._activeAnimatables[N].stop(void 0,void 0,!0);this._activeAnimatables.length=0}for(const N of this.animationGroups)N.stop()});class r{getClassName(){return"TargetedAnimation"}serialize(){const N={};return N.animation=this.animation.serialize(),N.targetId=this.target.id,N}}class O{get mask(){return this._mask}set mask(N){this._mask!==N&&(this._mask=N,this.syncWithMask(!0))}syncWithMask(){let N=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(this.mask||N){this._numActiveAnimatables=0;for(let N=0;N<this._animatables.length;++N){const q=this._animatables[N];!this.mask||this.mask.disabled||this.mask.retainsTarget(q.target.name)?(this._numActiveAnimatables++,q.paused&&q.restart()):q.paused||q.pause()}}else this._numActiveAnimatables=this._targetedAnimations.length}removeUnmaskedAnimations(){if(this.mask&&!this.mask.disabled){for(let N=0;N<this._animatables.length;++N){const q=this._animatables[N];this.mask.retainsTarget(q.target.name)||(q.stop(),this._animatables.splice(N,1),--N)}for(let N=0;N<this._targetedAnimations.length;N++){const q=this._targetedAnimations[N];this.mask.retainsTarget(q.target.name)||(this._targetedAnimations.splice(N,1),--N)}}}get from(){return this._from}set from(N){if(this._from!==N){this._from=N;for(let N=0;N<this._animatables.length;N++){this._animatables[N].fromFrame=this._from}}}get to(){return this._to}set to(N){if(this._to!==N){this._to=N;for(let N=0;N<this._animatables.length;N++){this._animatables[N].toFrame=this._to}}}get isStarted(){return this._isStarted}get isPlaying(){return this._isStarted&&!this._isPaused}get speedRatio(){return this._speedRatio}set speedRatio(N){if(this._speedRatio!==N){this._speedRatio=N;for(let N=0;N<this._animatables.length;N++){this._animatables[N].speedRatio=this._speedRatio}}}get loopAnimation(){return this._loopAnimation}set loopAnimation(N){if(this._loopAnimation!==N){this._loopAnimation=N;for(let N=0;N<this._animatables.length;N++){this._animatables[N].loopAnimation=this._loopAnimation}}}get isAdditive(){return this._isAdditive}set isAdditive(N){if(this._isAdditive!==N){this._isAdditive=N;for(let N=0;N<this._animatables.length;N++){this._animatables[N].isAdditive=this._isAdditive}}}get weight(){return this._weight}set weight(N){this._weight!==N&&(this._weight=N,this.setWeightForAllAnimatables(this._weight))}get targetedAnimations(){return this._targetedAnimations}get animatables(){return this._animatables}get children(){return this._targetedAnimations}get playOrder(){return this._playOrder}set playOrder(N){if(this._playOrder!==N&&(this._playOrder=N,this._animatables.length>0)){for(let N=0;N<this._animatables.length;N++)this._animatables[N].playOrder=this._playOrder;this._scene.sortActiveAnimatables()}}get enableBlending(){return this._enableBlending}set enableBlending(N){if(this._enableBlending!==N&&(this._enableBlending=N,null!==N))for(let q=0;q<this._targetedAnimations.length;++q)this._targetedAnimations[q].animation.enableBlending=N}get blendingSpeed(){return this._blendingSpeed}set blendingSpeed(N){if(this._blendingSpeed!==N&&(this._blendingSpeed=N,null!==N))for(let q=0;q<this._targetedAnimations.length;++q)this._targetedAnimations[q].animation.blendingSpeed=N}getLength(N,q){N=N??this._from;return((q=q??this._to)-N)/(this.targetedAnimations[0].animation.framePerSecond*this._speedRatio)}static MergeAnimationGroups(N){let q=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],C=arguments.length>2&&void 0!==arguments[2]&&arguments[2],d=arguments.length>3?arguments[3]:void 0;if(0===N.length)return null;d=d??N[0].weight;let U=Number.MAX_VALUE,W=-Number.MAX_VALUE;if(C)for(const F of N)F.from<U&&(U=F.from),F.to>W&&(W=F.to);const a=new O(N[0].name+"_merged",N[0]._scene,d);for(const F of N){C&&F.normalize(U,W);for(const N of F.targetedAnimations)a.addTargetedAnimation(N.animation,N.target);q&&F.dispose()}return a}constructor(N){let q=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,C=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,d=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;this.name=N,this._targetedAnimations=new Array,this._animatables=new Array,this._from=Number.MAX_VALUE,this._to=-Number.MAX_VALUE,this._speedRatio=1,this._loopAnimation=!1,this._isAdditive=!1,this._weight=-1,this._playOrder=0,this._enableBlending=null,this._blendingSpeed=null,this._numActiveAnimatables=0,this._shouldStart=!0,this._parentContainer=null,this.onAnimationEndObservable=new U.b,this.onAnimationLoopObservable=new U.b,this.onAnimationGroupLoopObservable=new U.b,this.onAnimationGroupEndObservable=new U.b,this.onAnimationGroupPauseObservable=new U.b,this.onAnimationGroupPlayObservable=new U.b,this.metadata=null,this._mask=null,this._animationLoopFlags=[],this._scene=q||W.e.LastCreatedScene,this._weight=C,this._playOrder=d,this.uniqueId=this._scene.getUniqueId(),this._scene.addAnimationGroup(this)}addTargetedAnimation(N,q){const C=new r;C.animation=N,C.target=q;const d=N.getKeys();return this._from>d[0].frame&&(this._from=d[0].frame),this._to<d[d.length-1].frame&&(this._to=d[d.length-1].frame),null!==this._enableBlending&&(N.enableBlending=this._enableBlending),null!==this._blendingSpeed&&(N.blendingSpeed=this._blendingSpeed),this._targetedAnimations.push(C),this._shouldStart=!0,C}removeTargetedAnimation(N){for(let q=this._targetedAnimations.length-1;q>-1;q--){this._targetedAnimations[q].animation===N&&this._targetedAnimations.splice(q,1)}}normalize(){let N=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,q=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;null==N&&(N=this._from),null==q&&(q=this._to);for(let C=0;C<this._targetedAnimations.length;C++){const d=this._targetedAnimations[C].animation.getKeys(),U=d[0],W=d[d.length-1];if(U.frame>N){const q={frame:N,value:U.value,inTangent:U.inTangent,outTangent:U.outTangent,interpolation:U.interpolation};d.splice(0,0,q)}if(W.frame<q){const N={frame:q,value:W.value,inTangent:W.inTangent,outTangent:W.outTangent,interpolation:W.interpolation};d.push(N)}}return this._from=N,this._to=q,this}_processLoop(N,q,C){N.onAnimationLoop=()=>{this.onAnimationLoopObservable.notifyObservers(q),this._animationLoopFlags[C]||(this._animationLoopFlags[C]=!0,this._animationLoopCount++,this._animationLoopCount===this._numActiveAnimatables&&(this.onAnimationGroupLoopObservable.notifyObservers(this),this._animationLoopCount=0,this._animationLoopFlags.length=0))}}start(){let N=arguments.length>0&&void 0!==arguments[0]&&arguments[0],q=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,C=arguments.length>2?arguments[2]:void 0,d=arguments.length>3?arguments[3]:void 0,U=arguments.length>4?arguments[4]:void 0;if(this._isStarted||0===this._targetedAnimations.length)return this;this._loopAnimation=N,this._shouldStart=!1,this._animationLoopCount=0,this._animationLoopFlags.length=0;for(let W=0;W<this._targetedAnimations.length;W++){const a=this._targetedAnimations[W],F=this._scene.beginDirectAnimation(a.target,[a.animation],void 0!==C?C:this._from,void 0!==d?d:this._to,N,q,void 0,void 0,void 0!==U?U:this._isAdditive);F.weight=this._weight,F.playOrder=this._playOrder,F.onAnimationEnd=()=>{this.onAnimationEndObservable.notifyObservers(a),this._checkAnimationGroupEnded(F)},this._processLoop(F,a,W),this._animatables.push(F)}return this.syncWithMask(),this._scene.sortActiveAnimatables(),this._speedRatio=q,this._isStarted=!0,this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}pause(){if(!this._isStarted)return this;this._isPaused=!0;for(let N=0;N<this._animatables.length;N++){this._animatables[N].pause()}return this.onAnimationGroupPauseObservable.notifyObservers(this),this}play(N){return this.isStarted&&this._animatables.length&&!this._shouldStart?(void 0!==N&&(this.loopAnimation=N),this.restart()):(this.stop(),this.start(N,this._speedRatio)),this}reset(){if(!this._isStarted)return this.play(),this.goToFrame(0),this.stop(!0),this;for(let N=0;N<this._animatables.length;N++){this._animatables[N].reset()}return this}restart(){if(!this._isStarted)return this;for(let N=0;N<this._animatables.length;N++){this._animatables[N].restart()}return this.syncWithMask(),this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}stop(){let N=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this._isStarted)return this;const q=this._animatables.slice();for(let d=0;d<q.length;d++)q[d].stop(void 0,void 0,!0,N);let C=0;for(let d=0;d<this._scene._activeAnimatables.length;d++){const q=this._scene._activeAnimatables[d];q._runtimeAnimations.length>0?this._scene._activeAnimatables[C++]=q:N&&this._checkAnimationGroupEnded(q,N)}return this._scene._activeAnimatables.length=C,this._isStarted=!1,this}setWeightForAllAnimatables(N){for(let q=0;q<this._animatables.length;q++){this._animatables[q].weight=N}return this}syncAllAnimationsWith(N){for(let q=0;q<this._animatables.length;q++){this._animatables[q].syncWith(N)}return this}goToFrame(N){let q=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this._isStarted)return this;for(let C=0;C<this._animatables.length;C++){this._animatables[C].goToFrame(N,q)}return this}getCurrentFrame(){var N;return(null===(N=this.animatables[0])||void 0===N?void 0:N.masterFrame)||0}dispose(){this.isStarted&&this.stop(),this._targetedAnimations.length=0,this._animatables.length=0;const N=this._scene.animationGroups.indexOf(this);if(N>-1&&this._scene.animationGroups.splice(N,1),this._parentContainer){const N=this._parentContainer.animationGroups.indexOf(this);N>-1&&this._parentContainer.animationGroups.splice(N,1),this._parentContainer=null}this.onAnimationEndObservable.clear(),this.onAnimationGroupEndObservable.clear(),this.onAnimationGroupPauseObservable.clear(),this.onAnimationGroupPlayObservable.clear(),this.onAnimationLoopObservable.clear(),this.onAnimationGroupLoopObservable.clear()}_checkAnimationGroupEnded(N){let q=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const C=this._animatables.indexOf(N);C>-1&&this._animatables.splice(C,1),this._animatables.length===this._targetedAnimations.length-this._numActiveAnimatables&&(this._isStarted=!1,q||this.onAnimationGroupEndObservable.notifyObservers(this),this._animatables.length=0)}clone(N,q){let C=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const d=new O(N||this.name,this._scene,this._weight,this._playOrder);d._from=this.from,d._to=this.to,d._speedRatio=this.speedRatio,d._loopAnimation=this.loopAnimation,d._isAdditive=this.isAdditive,d._enableBlending=this.enableBlending,d._blendingSpeed=this.blendingSpeed,d.metadata=this.metadata,d.mask=this.mask;for(const U of this._targetedAnimations)d.addTargetedAnimation(C?U.animation.clone():U.animation,q?q(U.target):U.target);return d}serialize(){const N={};N.name=this.name,N.from=this.from,N.to=this.to,N.speedRatio=this.speedRatio,N.loopAnimation=this.loopAnimation,N.isAdditive=this.isAdditive,N.weight=this.weight,N.playOrder=this.playOrder,N.enableBlending=this.enableBlending,N.blendingSpeed=this.blendingSpeed,N.targetedAnimations=[];for(let q=0;q<this.targetedAnimations.length;q++){const C=this.targetedAnimations[q];N.targetedAnimations[q]=C.serialize()}return a.d&&a.d.HasTags(this)&&(N.tags=a.d.GetTags(this)),this.metadata&&(N.metadata=this.metadata),N}static Parse(N,q){const C=new O(N.name,q,N.weight,N.playOrder);for(let U=0;U<N.targetedAnimations.length;U++){const W=N.targetedAnimations[U],a=d.d.Parse(W.animation),F=W.targetId;if("influence"===W.animation.property){const N=q.getMorphTargetById(F);N&&C.addTargetedAnimation(a,N)}else{const N=q.getNodeById(F);null!=N&&C.addTargetedAnimation(a,N)}}return a.d&&a.d.AddTagsTo(C,N.tags),null!==N.from&&null!==N.to&&C.normalize(N.from,N.to),void 0!==N.speedRatio&&(C._speedRatio=N.speedRatio),void 0!==N.loopAnimation&&(C._loopAnimation=N.loopAnimation),void 0!==N.isAdditive&&(C._isAdditive=N.isAdditive),void 0!==N.weight&&(C._weight=N.weight),void 0!==N.playOrder&&(C._playOrder=N.playOrder),void 0!==N.enableBlending&&(C._enableBlending=N.enableBlending),void 0!==N.blendingSpeed&&(C._blendingSpeed=N.blendingSpeed),void 0!==N.metadata&&(C.metadata=N.metadata),C}static MakeAnimationAdditive(N,q,C){let U;U="object"===typeof q?q:{referenceFrame:q,range:C,cloneOriginalAnimationGroup:arguments.length>3&&void 0!==arguments[3]&&arguments[3],clonedAnimationName:arguments.length>4?arguments[4]:void 0};let W=N;U.cloneOriginalAnimationGroup&&(W=N.clone(U.clonedAnimationGroupName||W.name));const a=W.targetedAnimations;for(let F=0;F<a.length;F++){const N=a[F];N.animation=d.d.MakeAnimationAdditive(N.animation,U)}if(W.isAdditive=!0,U.clipKeys){let N=Number.MAX_VALUE,q=-Number.MAX_VALUE;const C=W.targetedAnimations;for(let d=0;d<C.length;d++){const U=C[d].animation.getKeys();N>U[0].frame&&(N=U[0].frame),q<U[U.length-1].frame&&(q=U[U.length-1].frame)}W._from=N,W._to=q}return W}static ClipKeys(N,q,C,d,U){const W=N.clone(d||N.name);return O.ClipKeysInPlace(W,q,C,U)}static ClipKeysInPlace(N,q,C,d){return O.ClipInPlace(N,q,C,d,!1)}static ClipFrames(N,q,C,d,U){const W=N.clone(d||N.name);return O.ClipFramesInPlace(W,q,C,U)}static ClipFramesInPlace(N,q,C,d){return O.ClipInPlace(N,q,C,d,!0)}static ClipInPlace(N,q,C,d){let U=arguments.length>4&&void 0!==arguments[4]&&arguments[4],W=Number.MAX_VALUE,a=-Number.MAX_VALUE;const F=N.targetedAnimations;for(let w=0;w<F.length;w++){const N=F[w],A=d?N.animation:N.animation.clone();U&&(A.createKeyForFrame(q),A.createKeyForFrame(C));const n=A.getKeys(),t=[];let V=Number.MAX_VALUE;for(let d=0;d<n.length;d++){const N=n[d];if(!U&&d>=q&&d<=C||U&&N.frame>=q&&N.frame<=C){const q={frame:N.frame,value:N.value.clone?N.value.clone():N.value,inTangent:N.inTangent,outTangent:N.outTangent,interpolation:N.interpolation,lockedTangent:N.lockedTangent};V===Number.MAX_VALUE&&(V=q.frame),q.frame-=V,t.push(q)}}0!==t.length?(W>t[0].frame&&(W=t[0].frame),a<t[t.length-1].frame&&(a=t[t.length-1].frame),A.setKeys(t,!0),N.animation=A):(F.splice(w,1),w--)}return N._from=W,N._to=a,N}getClassName(){return"AnimationGroup"}toString(N){let q="Name: "+this.name;return q+=", type: "+this.getClassName(),N&&(q+=", from: "+this._from,q+=", to: "+this._to,q+=", isStarted: "+this._isStarted,q+=", speedRatio: "+this._speedRatio,q+=", targetedAnimations length: "+this._targetedAnimations.length,q+=", animatables length: "+this._animatables),q}}}}]);