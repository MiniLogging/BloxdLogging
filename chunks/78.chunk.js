"use strict";(self.hbnkweqmycf=self.hbnkweqmycf||[]).push([[78],{14792:(F,P,f)=>{f.r(P),f.d(P,{AnimationGroup:()=>B,TargetedAnimation:()=>J});var c=f(12150),N=f(11464),q=f(11501),H=f(11681),A=f(13180),o=f(11639);class j{get currentFrame(){return this._currentFrame}get weight(){return this._weight}get currentValue(){return this._currentValue}get targetPath(){return this._targetPath}get target(){return this._currentActiveTarget}get isAdditive(){return this._host&&this._host.isAdditive}constructor(F,P,f,N){if(this._events=new Array,this._currentFrame=0,this._originalValue=new Array,this._originalBlendValue=null,this._offsetsCache={},this._highLimitsCache={},this._stopped=!1,this._blendingFactor=0,this._currentValue=null,this._currentActiveTarget=null,this._directTarget=null,this._targetPath="",this._weight=1,this._absoluteFrameOffset=0,this._previousElapsedTime=0,this._yoyoDirection=1,this._previousAbsoluteFrame=0,this._targetIsArray=!1,this._coreRuntimeAnimation=null,this._animation=P,this._target=F,this._scene=f,this._host=N,this._activeTargets=[],P._runtimeAnimations.push(this),this._animationState={key:0,repeatCount:0,loopMode:this._getCorrectLoopMode()},this._animation.dataType===c.d.ANIMATIONTYPE_MATRIX&&(this._animationState.workValue=o.Matrix.Zero()),this._keys=this._animation.getKeys(),this._minFrame=this._keys[0].frame,this._maxFrame=this._keys[this._keys.length-1].frame,this._minValue=this._keys[0].value,this._maxValue=this._keys[this._keys.length-1].value,0!==this._minFrame){const F={frame:0,value:this._minValue};this._keys.splice(0,0,F)}if(this._target instanceof Array){let F=0;for(const P of this._target)this._preparePath(P,F),this._getOriginalValues(F),F++;this._targetIsArray=!0}else this._preparePath(this._target),this._getOriginalValues(),this._targetIsArray=!1,this._directTarget=this._activeTargets[0];const q=P.getEvents();if(q&&q.length>0)for(const c of q)this._events.push(c._clone());this._enableBlending=F&&F.animationPropertiesOverride?F.animationPropertiesOverride.enableBlending:this._animation.enableBlending}_preparePath(F){let P=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const f=this._animation.targetPropertyPath;if(f.length>1){let c=F;for(let F=0;F<f.length-1;F++){const P=f[F];if(c=c[P],void 0===c)throw new Error(`Invalid property (${P}) in property path (${f.join(".")})`)}this._targetPath=f[f.length-1],this._activeTargets[P]=c}else this._targetPath=f[0],this._activeTargets[P]=F;if(void 0===this._activeTargets[P][this._targetPath])throw new Error(`Invalid property (${this._targetPath}) in property path (${f.join(".")})`)}get animation(){return this._animation}reset(){if(arguments.length>0&&void 0!==arguments[0]&&arguments[0])if(this._target instanceof Array){let F=0;for(const P of this._target)void 0!==this._originalValue[F]&&this._setValue(P,this._activeTargets[F],this._originalValue[F],-1,F),F++}else void 0!==this._originalValue[0]&&this._setValue(this._target,this._directTarget,this._originalValue[0],-1,0);this._offsetsCache={},this._highLimitsCache={},this._currentFrame=0,this._blendingFactor=0;for(let F=0;F<this._events.length;F++)this._events[F].isDone=!1}isStopped(){return this._stopped}dispose(){const F=this._animation.runtimeAnimations.indexOf(this);F>-1&&this._animation.runtimeAnimations.splice(F,1)}setValue(F,P){if(this._targetIsArray)for(let f=0;f<this._target.length;f++){const c=this._target[f];this._setValue(c,this._activeTargets[f],F,P,f)}else this._setValue(this._target,this._directTarget,F,P,0)}_getOriginalValues(){let F,P=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;const f=this._activeTargets[P];F=f.getLocalMatrix&&"_matrix"===this._targetPath?f.getLocalMatrix():f[this._targetPath],F&&F.clone?this._originalValue[P]=F.clone():this._originalValue[P]=F}_registerTargetForLateAnimationBinding(F,P){const f=F.target;this._scene._registeredForLateAnimationBindings.pushNoDuplicate(f),f._lateAnimationHolders||(f._lateAnimationHolders={}),f._lateAnimationHolders[F.targetPath]||(f._lateAnimationHolders[F.targetPath]={totalWeight:0,totalAdditiveWeight:0,animations:[],additiveAnimations:[],originalValue:P}),F.isAdditive?(f._lateAnimationHolders[F.targetPath].additiveAnimations.push(F),f._lateAnimationHolders[F.targetPath].totalAdditiveWeight+=F.weight):(f._lateAnimationHolders[F.targetPath].animations.push(F),f._lateAnimationHolders[F.targetPath].totalWeight+=F.weight)}_setValue(F,P,f,N,q){if(this._currentActiveTarget=P,this._weight=N,this._enableBlending&&this._blendingFactor<=1){if(!this._originalBlendValue){const F=P[this._targetPath];F.clone?this._originalBlendValue=F.clone():this._originalBlendValue=F}this._originalBlendValue.m?c.d.AllowMatrixDecomposeForInterpolation?this._currentValue?o.Matrix.DecomposeLerpToRef(this._originalBlendValue,f,this._blendingFactor,this._currentValue):this._currentValue=o.Matrix.DecomposeLerp(this._originalBlendValue,f,this._blendingFactor):this._currentValue?o.Matrix.LerpToRef(this._originalBlendValue,f,this._blendingFactor,this._currentValue):this._currentValue=o.Matrix.Lerp(this._originalBlendValue,f,this._blendingFactor):this._currentValue=c.d._UniversalLerp(this._originalBlendValue,f,this._blendingFactor);const N=F&&F.animationPropertiesOverride?F.animationPropertiesOverride.blendingSpeed:this._animation.blendingSpeed;this._blendingFactor+=N}else this._currentValue?this._currentValue.q?this._currentValue.q(f):this._currentValue=f:null!==f&&void 0!==f&&f.clone?this._currentValue=f.clone():this._currentValue=f;-1!==N?this._registerTargetForLateAnimationBinding(this,this._originalValue[q]):this._animationState.loopMode===c.d.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT?this._currentValue.addToRef?this._currentValue.addToRef(this._originalValue[q],P[this._targetPath]):P[this._targetPath]=this._originalValue[q]+this._currentValue:P[this._targetPath]=this._currentValue,F.Ti&&F.Ti(this._animation.targetProperty)}_getCorrectLoopMode(){return this._target&&this._target.animationPropertiesOverride?this._target.animationPropertiesOverride.loopMode:this._animation.loopMode}goToFrame(F){let P=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const f=this._animation.getKeys();F<f[0].frame?F=f[0].frame:F>f[f.length-1].frame&&(F=f[f.length-1].frame);const c=this._events;if(c.length)for(let q=0;q<c.length;q++)c[q].onlyOnce||(c[q].isDone=c[q].frame<F);this._currentFrame=F;const N=this._animation._interpolate(F,this._animationState);this.setValue(N,P)}_prepareForSpeedRatioChange(F){const P=this._previousElapsedTime*(this._animation.framePerSecond*F)/1e3;this._absoluteFrameOffset=this._previousAbsoluteFrame-P}animate(F,P,f,N,q){let H=arguments.length>5&&void 0!==arguments[5]?arguments[5]:-1;const A=this._animation,o=A.targetPropertyPath;if(!o||o.length<1)return this._stopped=!0,!1;let j,i=!0;const u=this._events;let T=0;if(this._coreRuntimeAnimation)T=f-P,j=this._coreRuntimeAnimation.currentFrame,this._currentFrame=j,this._animationState.repeatCount=this._coreRuntimeAnimation._animationState.repeatCount,this._animationState.highLimitValue=this._coreRuntimeAnimation._animationState.highLimitValue,this._animationState.offsetValue=this._coreRuntimeAnimation._animationState.offsetValue;else{let H;(P<this._minFrame||P>this._maxFrame)&&(P=this._minFrame),(f<this._minFrame||f>this._maxFrame)&&(f=this._maxFrame),T=f-P;let o=F*(A.framePerSecond*q)/1e3+this._absoluteFrameOffset,Y=0,t=!1;const C=N&&this._animationState.loopMode===c.d.ANIMATIONLOOPMODE_YOYO;if(C){const F=(o-P)/T,f=Math.sin(F*Math.PI);o=Math.abs(f)*T+P;const c=f>=0?1:-1;this._yoyoDirection!==c&&(t=!0),this._yoyoDirection=c}if(this._previousElapsedTime=F,this._previousAbsoluteFrame=o,!N&&f>=P&&(o>=T&&q>0||o<=0&&q<0))i=!1,Y=A._getKeyValue(this._maxValue);else if(!N&&P>=f&&(o<=T&&q<0||o>=0&&q>0))i=!1,Y=A._getKeyValue(this._minValue);else if(this._animationState.loopMode!==c.d.ANIMATIONLOOPMODE_CYCLE){const F=f.toString()+P.toString();if(!this._offsetsCache[F]){this._animationState.repeatCount=0,this._animationState.loopMode=c.d.ANIMATIONLOOPMODE_CYCLE;const N=A._interpolate(P,this._animationState),q=A._interpolate(f,this._animationState);switch(this._animationState.loopMode=this._getCorrectLoopMode(),A.dataType){case c.d.ANIMATIONTYPE_FLOAT:this._offsetsCache[F]=q-N;break;case c.d.ANIMATIONTYPE_QUATERNION:case c.d.ANIMATIONTYPE_VECTOR3:case c.d.ANIMATIONTYPE_VECTOR2:case c.d.ANIMATIONTYPE_SIZE:case c.d.ANIMATIONTYPE_COLOR3:this._offsetsCache[F]=q.CP(N)}this._highLimitsCache[F]=q}Y=this._highLimitsCache[F],H=this._offsetsCache[F]}if(void 0===H)switch(A.dataType){case c.d.ANIMATIONTYPE_FLOAT:H=0;break;case c.d.ANIMATIONTYPE_QUATERNION:H=c.j;break;case c.d.ANIMATIONTYPE_VECTOR3:H=c.q;break;case c.d.ANIMATIONTYPE_VECTOR2:H=c.p;break;case c.d.ANIMATIONTYPE_SIZE:H=c.l;break;case c.d.ANIMATIONTYPE_COLOR3:H=c.e;break;case c.d.ANIMATIONTYPE_COLOR4:H=c.f}if(this._host&&this._host.syncRoot){const F=this._host.syncRoot;j=P+T*((F.masterFrame-F.fromFrame)/(F.toFrame-F.fromFrame))}else j=o>0&&P>f||o<0&&P<f?i&&0!==T?f+o%T:P:i&&0!==T?P+o%T:f;if(!C&&(q>0&&this.currentFrame>j||q<0&&this.currentFrame<j)||C&&t){this._onLoop();for(let F=0;F<u.length;F++)u[F].onlyOnce||(u[F].isDone=!1);this._animationState.key=q>0?0:A.getKeys().length-1}this._currentFrame=j,this._animationState.repeatCount=0===T?0:o/T|0,this._animationState.highLimitValue=Y,this._animationState.offsetValue=H}const Y=A._interpolate(j,this._animationState);if(this.setValue(Y,H),u.length)for(let c=0;c<u.length;c++)if(T>=0&&j>=u[c].frame&&u[c].frame>=P||T<0&&j<=u[c].frame&&u[c].frame<=P){const F=u[c];F.isDone||(F.onlyOnce&&(u.splice(c,1),c--),F.isDone=!0,F.action(j))}return i||(this._stopped=!0),i}}var i=f(11480);class u{get syncRoot(){return this._syncRoot}get masterFrame(){return 0===this._runtimeAnimations.length?0:this._runtimeAnimations[0].currentFrame}get weight(){return this._weight}set weight(F){this._weight=-1!==F?Math.min(Math.max(F,0),1):-1}get speedRatio(){return this._speedRatio}set speedRatio(F){for(let P=0;P<this._runtimeAnimations.length;P++){this._runtimeAnimations[P]._prepareForSpeedRatioChange(F)}this._speedRatio=F,null!==this._goToFrame&&this.goToFrame(this._goToFrame)}get elapsedTime(){return null===this._localDelayOffset?0:this._scene._animationTime-this._localDelayOffset}constructor(F,P){let f=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:100,q=arguments.length>4&&void 0!==arguments[4]&&arguments[4],H=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,A=arguments.length>6?arguments[6]:void 0,o=arguments.length>7?arguments[7]:void 0,j=arguments.length>8?arguments[8]:void 0,i=arguments.length>9&&void 0!==arguments[9]&&arguments[9],u=arguments.length>10&&void 0!==arguments[10]?arguments[10]:0;this.target=P,this.fromFrame=f,this.toFrame=c,this.loopAnimation=q,this.onAnimationEnd=A,this.onAnimationLoop=j,this.isAdditive=i,this.playOrder=u,this._localDelayOffset=null,this._pausedDelay=null,this._manualJumpDelay=null,this._runtimeAnimations=new Array,this.SA=!1,this._speedRatio=1,this._weight=-1,this._previousWeight=-1,this._syncRoot=null,this._frameToSyncFromJump=null,this._goToFrame=null,this.disposeOnEnd=!0,this.animationStarted=!1,this.onAnimationEndObservable=new N.d,this.onAnimationLoopObservable=new N.d,this._scene=F,o&&this.appendAnimations(P,o),this._speedRatio=H,F._activeAnimatables.push(this)}syncWith(F){if(this._syncRoot=F,F){const F=this._scene._activeAnimatables.indexOf(this);F>-1&&(this._scene._activeAnimatables.splice(F,1),this._scene._activeAnimatables.push(this))}return this}getAnimations(){return this._runtimeAnimations}appendAnimations(F,P){for(let f=0;f<P.length;f++){const c=P[f],N=new j(F,c,this._scene,this);N._onLoop=()=>{this.onAnimationLoopObservable.notifyObservers(this),this.onAnimationLoop&&this.onAnimationLoop()},this._runtimeAnimations.push(N)}}getAnimationByTargetProperty(F){const P=this._runtimeAnimations;for(let f=0;f<P.length;f++)if(P[f].animation.targetProperty===F)return P[f].animation;return null}getRuntimeAnimationByTargetProperty(F){const P=this._runtimeAnimations;for(let f=0;f<P.length;f++)if(P[f].animation.targetProperty===F)return P[f];return null}reset(){const F=this._runtimeAnimations;for(let P=0;P<F.length;P++)F[P].reset(!0);this._localDelayOffset=null,this._pausedDelay=null}enableBlending(F){const P=this._runtimeAnimations;for(let f=0;f<P.length;f++)P[f].animation.enableBlending=!0,P[f].animation.blendingSpeed=F}disableBlending(){const F=this._runtimeAnimations;for(let P=0;P<F.length;P++)F[P].animation.enableBlending=!1}goToFrame(F){let P=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const f=this._runtimeAnimations;if(f[0]){const P=f[0].animation.framePerSecond;this._frameToSyncFromJump=this._frameToSyncFromJump??f[0].currentFrame;const c=0===this.speedRatio?0:(F-this._frameToSyncFromJump)/P*1e3/this.speedRatio;this._manualJumpDelay=-c}for(let c=0;c<f.length;c++)f[c].goToFrame(F,P?this._weight:-1);this._goToFrame=F}get paused(){return this.SA}pause(){this.SA||(this.SA=!0)}restart(){this.SA=!1}_raiseOnAnimationEnd(){this.onAnimationEnd&&this.onAnimationEnd(),this.onAnimationEndObservable.notifyObservers(this)}stop(F,P){let f=arguments.length>2&&void 0!==arguments[2]&&arguments[2],c=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(F||P){const N=this._scene._activeAnimatables.indexOf(this);if(N>-1){const q=this._runtimeAnimations;for(let f=q.length-1;f>=0;f--){const c=q[f];F&&c.animation.name!=F||(P&&!P(c.target)||(c.dispose(),q.splice(f,1)))}0==q.length&&(f||this._scene._activeAnimatables.splice(N,1),c||this._raiseOnAnimationEnd())}}else{const F=this._scene._activeAnimatables.indexOf(this);if(F>-1){f||this._scene._activeAnimatables.splice(F,1);const P=this._runtimeAnimations;for(let F=0;F<P.length;F++)P[F].dispose();this._runtimeAnimations.length=0,c||this._raiseOnAnimationEnd()}}}async waitAsync(){return await new Promise((F=>{this.onAnimationEndObservable.add((()=>{F(this)}),void 0,void 0,this,!0)}))}_animate(F){if(this.SA)return this.animationStarted=!1,null===this._pausedDelay&&(this._pausedDelay=F),!0;if(null===this._localDelayOffset?(this._localDelayOffset=F,this._pausedDelay=null):null!==this._pausedDelay&&(this._localDelayOffset+=F-this._pausedDelay,this._pausedDelay=null),null!==this._manualJumpDelay&&(this._localDelayOffset+=this.speedRatio<0?-this._manualJumpDelay:this._manualJumpDelay,this._manualJumpDelay=null,this._frameToSyncFromJump=null),this._goToFrame=null,0===this._weight&&0===this._previousWeight)return!0;this._previousWeight=this._weight;let P=!1;const f=this._runtimeAnimations;let c;for(c=0;c<f.length;c++){const N=f[c].animate(F-this._localDelayOffset,this.fromFrame,this.toFrame,this.loopAnimation,this._speedRatio,this._weight);P=P||N}if(this.animationStarted=P,!P){if(this.disposeOnEnd)for(c=this._scene._activeAnimatables.indexOf(this),this._scene._activeAnimatables.splice(c,1),c=0;c<f.length;c++)f[c].dispose();this._raiseOnAnimationEnd(),this.disposeOnEnd&&(this.onAnimationEnd=null,this.onAnimationLoop=null,this.onAnimationLoopObservable.clear(),this.onAnimationEndObservable.clear())}return P}}function T(F){if(0===F.totalWeight&&0===F.totalAdditiveWeight)return F.originalValue;let P=1;const f=o.TmpVectors.tP[0],c=o.TmpVectors.tP[1],N=o.TmpVectors.Quaternion[0];let q=0;const H=F.animations[0],A=F.originalValue;let j=1,i=!1;if(F.totalWeight<1)j=1-F.totalWeight,A.decompose(c,N,f);else{if(q=1,P=F.totalWeight,j=H.weight/P,1==j){if(!F.totalAdditiveWeight)return H.currentValue;i=!0}H.currentValue.decompose(c,N,f)}if(!i){c.scaleInPlace(j),f.scaleInPlace(j),N.scaleInPlace(j);for(let H=q;H<F.animations.length;H++){const q=F.animations[H];if(0===q.weight)continue;j=q.weight/P;const A=o.TmpVectors.tP[2],i=o.TmpVectors.tP[3],u=o.TmpVectors.Quaternion[1];q.currentValue.decompose(i,u,A),i.scaleAndAddToRef(j,c),u.scaleAndAddToRef(o.Quaternion.Dot(N,u)>0?j:-j,N),A.scaleAndAddToRef(j,f)}N.normalize()}for(let T=0;T<F.additiveAnimations.length;T++){const P=F.additiveAnimations[T];if(0===P.weight)continue;const q=o.TmpVectors.tP[2],H=o.TmpVectors.tP[3],A=o.TmpVectors.Quaternion[1];P.currentValue.decompose(H,A,q),H.multiplyToRef(c,H),o.tP.LerpToRef(c,H,P.weight,c),N.multiplyToRef(A,A),o.Quaternion.SlerpToRef(N,A,P.weight,N),q.scaleAndAddToRef(P.weight,f)}const u=H?H._animationState.workValue:o.TmpVectors.Matrix[0].clone();return o.Matrix.ComposeToRef(c,N,f,u),u}function Y(F,P){if(0===F.totalWeight&&0===F.totalAdditiveWeight)return P;const f=F.animations[0],c=F.originalValue;let N=P;if(0===F.totalWeight&&F.totalAdditiveWeight>0)N.q(c);else if(1===F.animations.length){if(o.Quaternion.SlerpToRef(c,f.currentValue,Math.min(1,F.totalWeight),N),0===F.totalAdditiveWeight)return N}else if(F.animations.length>1){let f,q,H=1;if(F.totalWeight<1){const P=1-F.totalWeight;f=[],q=[],f.push(c),q.push(P)}else{if(2===F.animations.length&&(o.Quaternion.SlerpToRef(F.animations[0].currentValue,F.animations[1].currentValue,F.animations[1].weight/F.totalWeight,P),0===F.totalAdditiveWeight))return P;f=[],q=[],H=F.totalWeight}for(let P=0;P<F.animations.length;P++){const c=F.animations[P];f.push(c.currentValue),q.push(c.weight/H)}let A=0;for(let F=0;F<f.length;)F?(A+=q[F],o.Quaternion.SlerpToRef(N,f[F],q[F]/A,N),F++):(o.Quaternion.SlerpToRef(f[F],f[F+1],q[F+1]/(q[F]+q[F+1]),P),N=P,A=q[F]+q[F+1],F+=2)}for(let q=0;q<F.additiveAnimations.length;q++){const P=F.additiveAnimations[q];0!==P.weight&&(N.multiplyToRef(P.currentValue,o.TmpVectors.Quaternion[0]),o.Quaternion.SlerpToRef(N,o.TmpVectors.Quaternion[0],P.weight,N))}return N}var t,C,L=f(11845);t=L.e,(C=A.c)&&(C.prototype.copyAnimationRange=function(F,P,f){let N=arguments.length>3&&void 0!==arguments[3]&&arguments[3],q=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;0===this.animations.length&&(this.animations.push(new c.d(this.name,"_matrix",F.animations[0].framePerSecond,c.d.ANIMATIONTYPE_MATRIX,0)),this.animations[0].setKeys([]));const H=F.animations[0].getRange(P);if(!H)return!1;const A=H.from,o=H.to,j=F.animations[0].getKeys(),i=F.length,u=F.getParent(),T=this.getParent(),Y=N&&u&&i&&this.length&&i!==this.length,t=Y&&T&&u?T.length/u.length:1,C=N&&!T&&q&&(1!==q.x||1!==q.y||1!==q.z),L=this.animations[0].getKeys();let J,B,z;for(let c=0,Z=j.length;c<Z;c++)J=j[c],J.frame>=A&&J.frame<=o&&(N?(z=J.value.clone(),Y?(B=z.getTranslation(),z.setTranslation(B.scaleInPlace(t))):C&&q?(B=z.getTranslation(),z.setTranslation(B.multiplyInPlace(q))):z=J.value):z=J.value,L.push({frame:J.frame+f,value:z}));return this.animations[0].createRange(P,A+f,o+f),!0}),t&&(t.prototype._animate=function(F){if(!this.animationsEnabled)return;const P=i.d.Now;if(!this._animationTimeLast){if(this._pendingData.length>0)return;this._animationTimeLast=P}this.deltaTime=void 0!==F?F:this.useConstantAnimationDeltaTime?16:(P-this._animationTimeLast)*this.animationTimeScale,this._animationTimeLast=P;const f=this._activeAnimatables;if(0===f.length)return;this._animationTime+=this.deltaTime;const N=this._animationTime;for(let c=0;c<f.length;c++){const F=f[c];!F._animate(N)&&F.disposeOnEnd&&c--}!function(F){if(F._registeredForLateAnimationBindings.length){for(let P=0;P<F._registeredForLateAnimationBindings.length;P++){const f=F._registeredForLateAnimationBindings.data[P];for(const F in f._lateAnimationHolders){const P=f._lateAnimationHolders[F],N=P.animations[0],q=P.originalValue;if(void 0===q||null===q)continue;const H=c.d.AllowMatrixDecomposeForInterpolation&&q.m;let A=f[F];if(H)A=T(P);else if(void 0!==q.w)A=Y(P,A||o.Quaternion.Identity());else{let F=0,f=1;const H=N&&N._animationState.loopMode===c.d.ANIMATIONLOOPMODE_RELATIVE_FROM_CURRENT;if(P.totalWeight<1)A=H?q.clone?q.clone():q:N&&q.scale?q.scale(1-P.totalWeight):N?q*(1-P.totalWeight):q.clone?q.clone():q;else if(N){f=P.totalWeight;const c=N.weight/f;A=1!==c?N.currentValue.scale?N.currentValue.scale(c):N.currentValue*c:N.currentValue,H&&(A.addToRef?A.addToRef(q,A):A+=q),F=1}for(let c=F;c<P.animations.length;c++){const F=P.animations[c],N=F.weight/f;N&&(F.currentValue.scaleAndAddToRef?F.currentValue.scaleAndAddToRef(N,A):A+=F.currentValue*N)}for(let c=0;c<P.additiveAnimations.length;c++){const F=P.additiveAnimations[c],f=F.weight;f&&(F.currentValue.scaleAndAddToRef?F.currentValue.scaleAndAddToRef(f,A):A+=F.currentValue*f)}}f[F]=A}f._lateAnimationHolders={}}F._registeredForLateAnimationBindings.reset()}}(this)},t.prototype.sortActiveAnimatables=function(){this._activeAnimatables.sort(((F,P)=>F.playOrder-P.playOrder))},t.prototype.beginWeightedAnimation=function(F,P,f){let c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,N=arguments.length>4?arguments[4]:void 0,q=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,H=arguments.length>6?arguments[6]:void 0,A=arguments.length>7?arguments[7]:void 0,o=arguments.length>8?arguments[8]:void 0,j=arguments.length>9?arguments[9]:void 0,i=arguments.length>10&&void 0!==arguments[10]&&arguments[10];const u=this.beginAnimation(F,P,f,N,q,H,A,!1,o,j,i);return u.weight=c,u},t.prototype.beginAnimation=function(F,P,f,c){let N=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1,q=arguments.length>5?arguments[5]:void 0,H=arguments.length>6?arguments[6]:void 0,A=!(arguments.length>7&&void 0!==arguments[7])||arguments[7],o=arguments.length>8?arguments[8]:void 0,j=arguments.length>9?arguments[9]:void 0,i=arguments.length>10&&void 0!==arguments[10]&&arguments[10];if(N<0){const F=P;P=f,f=F,N=-N}P>f&&(N=-N),A&&this.stopAnimation(F,void 0,o),H||(H=new u(this,F,P,f,c,N,q,void 0,j,i));const T=!o||o(F);if(F.animations&&T&&H.appendAnimations(F,F.animations),F.getAnimatables){const i=F.getAnimatables();for(let F=0;F<i.length;F++)this.beginAnimation(i[F],P,f,c,N,q,H,A,o,j)}return H.reset(),H},t.prototype.beginHierarchyAnimation=function(F,P,f,c,N){let q=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,H=arguments.length>6?arguments[6]:void 0,A=arguments.length>7?arguments[7]:void 0,o=!(arguments.length>8&&void 0!==arguments[8])||arguments[8],j=arguments.length>9?arguments[9]:void 0,i=arguments.length>11&&void 0!==arguments[11]&&arguments[11];const u=F.getDescendants(P),T=[];T.push(this.beginAnimation(F,f,c,N,q,H,A,o,j,void 0,i));for(const Y of u)T.push(this.beginAnimation(Y,f,c,N,q,H,A,o,j,void 0,i));return T},t.prototype.beginDirectAnimation=function(F,P,f,c,N){let q=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1;if(q<0){const F=f;f=c,c=F,q=-q}return f>c&&(q=-q),new u(this,F,f,c,N,q,arguments.length>6?arguments[6]:void 0,P,arguments.length>7?arguments[7]:void 0,arguments.length>8&&void 0!==arguments[8]&&arguments[8])},t.prototype.beginDirectHierarchyAnimation=function(F,P,f,c,N,q,H,A,o){let j=arguments.length>9&&void 0!==arguments[9]&&arguments[9];const i=F.getDescendants(P),u=[];u.push(this.beginDirectAnimation(F,f,c,N,q,H,A,o,j));for(const T of i)u.push(this.beginDirectAnimation(T,f,c,N,q,H,A,o,j));return u},t.prototype.getAnimatableByTarget=function(F){for(let P=0;P<this._activeAnimatables.length;P++)if(this._activeAnimatables[P].target===F)return this._activeAnimatables[P];return null},t.prototype.getAllAnimatablesByTarget=function(F){const P=[];for(let f=0;f<this._activeAnimatables.length;f++)this._activeAnimatables[f].target===F&&P.push(this._activeAnimatables[f]);return P},t.prototype.stopAnimation=function(F,P,f){const c=this.getAllAnimatablesByTarget(F);for(const N of c)N.stop(P,f)},t.prototype.stopAllAnimations=function(){if(this._activeAnimatables){for(let F=0;F<this._activeAnimatables.length;F++)this._activeAnimatables[F].stop(void 0,void 0,!0);this._activeAnimatables.length=0}for(const F of this.animationGroups)F.stop()});class J{getClassName(){return"TargetedAnimation"}serialize(){const F={};return F.animation=this.animation.serialize(),F.targetId=this.target.id,F}}class B{get mask(){return this._mask}set mask(F){this._mask!==F&&(this._mask=F,this.syncWithMask(!0))}syncWithMask(){let F=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(this.mask||F){this._numActiveAnimatables=0;for(let F=0;F<this._animatables.length;++F){const P=this._animatables[F];!this.mask||this.mask.disabled||this.mask.retainsTarget(P.target.name)?(this._numActiveAnimatables++,P.paused&&P.restart()):P.paused||P.pause()}}else this._numActiveAnimatables=this._targetedAnimations.length}removeUnmaskedAnimations(){if(this.mask&&!this.mask.disabled){for(let F=0;F<this._animatables.length;++F){const P=this._animatables[F];this.mask.retainsTarget(P.target.name)||(P.stop(),this._animatables.splice(F,1),--F)}for(let F=0;F<this._targetedAnimations.length;F++){const P=this._targetedAnimations[F];this.mask.retainsTarget(P.target.name)||(this._targetedAnimations.splice(F,1),--F)}}}get from(){return this._from}set from(F){if(this._from!==F){this._from=F;for(let F=0;F<this._animatables.length;F++){this._animatables[F].fromFrame=this._from}}}get to(){return this._to}set to(F){if(this._to!==F){this._to=F;for(let F=0;F<this._animatables.length;F++){this._animatables[F].toFrame=this._to}}}get isStarted(){return this._isStarted}get isPlaying(){return this._isStarted&&!this._isPaused}get speedRatio(){return this._speedRatio}set speedRatio(F){if(this._speedRatio!==F){this._speedRatio=F;for(let F=0;F<this._animatables.length;F++){this._animatables[F].speedRatio=this._speedRatio}}}get loopAnimation(){return this._loopAnimation}set loopAnimation(F){if(this._loopAnimation!==F){this._loopAnimation=F;for(let F=0;F<this._animatables.length;F++){this._animatables[F].loopAnimation=this._loopAnimation}}}get isAdditive(){return this._isAdditive}set isAdditive(F){if(this._isAdditive!==F){this._isAdditive=F;for(let F=0;F<this._animatables.length;F++){this._animatables[F].isAdditive=this._isAdditive}}}get weight(){return this._weight}set weight(F){this._weight!==F&&(this._weight=F,this.setWeightForAllAnimatables(this._weight))}get targetedAnimations(){return this._targetedAnimations}get animatables(){return this._animatables}get children(){return this._targetedAnimations}get playOrder(){return this._playOrder}set playOrder(F){if(this._playOrder!==F&&(this._playOrder=F,this._animatables.length>0)){for(let F=0;F<this._animatables.length;F++)this._animatables[F].playOrder=this._playOrder;this._scene.sortActiveAnimatables()}}get enableBlending(){return this._enableBlending}set enableBlending(F){if(this._enableBlending!==F&&(this._enableBlending=F,null!==F))for(let P=0;P<this._targetedAnimations.length;++P)this._targetedAnimations[P].animation.enableBlending=F}get blendingSpeed(){return this._blendingSpeed}set blendingSpeed(F){if(this._blendingSpeed!==F&&(this._blendingSpeed=F,null!==F))for(let P=0;P<this._targetedAnimations.length;++P)this._targetedAnimations[P].animation.blendingSpeed=F}getLength(F,P){F=F??this._from;return((P=P??this._to)-F)/(this.targetedAnimations[0].animation.framePerSecond*this._speedRatio)}static MergeAnimationGroups(F){let P=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],f=arguments.length>2&&void 0!==arguments[2]&&arguments[2],c=arguments.length>3?arguments[3]:void 0;if(0===F.length)return null;c=c??F[0].weight;let N=Number.MAX_VALUE,q=-Number.MAX_VALUE;if(f)for(const A of F)A.from<N&&(N=A.from),A.to>q&&(q=A.to);const H=new B(F[0].name+"_merged",F[0]._scene,c);for(const A of F){f&&A.normalize(N,q);for(const F of A.targetedAnimations)H.addTargetedAnimation(F.animation,F.target);P&&A.dispose()}return H}constructor(F){let P=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,f=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;this.name=F,this._targetedAnimations=new Array,this._animatables=new Array,this._from=Number.MAX_VALUE,this._to=-Number.MAX_VALUE,this._speedRatio=1,this._loopAnimation=!1,this._isAdditive=!1,this._weight=-1,this._playOrder=0,this._enableBlending=null,this._blendingSpeed=null,this._numActiveAnimatables=0,this._shouldStart=!0,this._parentContainer=null,this.onAnimationEndObservable=new N.d,this.onAnimationLoopObservable=new N.d,this.onAnimationGroupLoopObservable=new N.d,this.onAnimationGroupEndObservable=new N.d,this.onAnimationGroupPauseObservable=new N.d,this.onAnimationGroupPlayObservable=new N.d,this.metadata=null,this._mask=null,this._animationLoopFlags=[],this._scene=P||q.b.LastCreatedScene,this._weight=f,this._playOrder=c,this.uniqueId=this._scene.getUniqueId(),this._scene.addAnimationGroup(this)}addTargetedAnimation(F,P){const f=new J;f.animation=F,f.target=P;const c=F.getKeys();return this._from>c[0].frame&&(this._from=c[0].frame),this._to<c[c.length-1].frame&&(this._to=c[c.length-1].frame),null!==this._enableBlending&&(F.enableBlending=this._enableBlending),null!==this._blendingSpeed&&(F.blendingSpeed=this._blendingSpeed),this._targetedAnimations.push(f),this._shouldStart=!0,f}removeTargetedAnimation(F){for(let P=this._targetedAnimations.length-1;P>-1;P--){this._targetedAnimations[P].animation===F&&this._targetedAnimations.splice(P,1)}}normalize(){let F=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,P=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;null==F&&(F=this._from),null==P&&(P=this._to);for(let f=0;f<this._targetedAnimations.length;f++){const c=this._targetedAnimations[f].animation.getKeys(),N=c[0],q=c[c.length-1];if(N.frame>F){const P={frame:F,value:N.value,inTangent:N.inTangent,outTangent:N.outTangent,interpolation:N.interpolation};c.splice(0,0,P)}if(q.frame<P){const F={frame:P,value:q.value,inTangent:q.inTangent,outTangent:q.outTangent,interpolation:q.interpolation};c.push(F)}}return this._from=F,this._to=P,this}_processLoop(F,P,f){F.onAnimationLoop=()=>{this.onAnimationLoopObservable.notifyObservers(P),this._animationLoopFlags[f]||(this._animationLoopFlags[f]=!0,this._animationLoopCount++,this._animationLoopCount===this._numActiveAnimatables&&(this.onAnimationGroupLoopObservable.notifyObservers(this),this._animationLoopCount=0,this._animationLoopFlags.length=0))}}start(){let F=arguments.length>0&&void 0!==arguments[0]&&arguments[0],P=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,f=arguments.length>2?arguments[2]:void 0,c=arguments.length>3?arguments[3]:void 0,N=arguments.length>4?arguments[4]:void 0;if(this._isStarted||0===this._targetedAnimations.length)return this;this._loopAnimation=F,this._shouldStart=!1,this._animationLoopCount=0,this._animationLoopFlags.length=0;for(let q=0;q<this._targetedAnimations.length;q++){const H=this._targetedAnimations[q],A=this._scene.beginDirectAnimation(H.target,[H.animation],void 0!==f?f:this._from,void 0!==c?c:this._to,F,P,void 0,void 0,void 0!==N?N:this._isAdditive);A.weight=this._weight,A.playOrder=this._playOrder,A.onAnimationEnd=()=>{this.onAnimationEndObservable.notifyObservers(H),this._checkAnimationGroupEnded(A)},this._processLoop(A,H,q),this._animatables.push(A)}return this.syncWithMask(),this._scene.sortActiveAnimatables(),this._speedRatio=P,this._isStarted=!0,this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}pause(){if(!this._isStarted)return this;this._isPaused=!0;for(let F=0;F<this._animatables.length;F++){this._animatables[F].pause()}return this.onAnimationGroupPauseObservable.notifyObservers(this),this}play(F){return this.isStarted&&this._animatables.length&&!this._shouldStart?(void 0!==F&&(this.loopAnimation=F),this.restart()):(this.stop(),this.start(F,this._speedRatio)),this}reset(){if(!this._isStarted)return this.play(),this.goToFrame(0),this.stop(!0),this;for(let F=0;F<this._animatables.length;F++){this._animatables[F].reset()}return this}restart(){if(!this._isStarted)return this;for(let F=0;F<this._animatables.length;F++){this._animatables[F].restart()}return this.syncWithMask(),this._isPaused=!1,this.onAnimationGroupPlayObservable.notifyObservers(this),this}stop(){let F=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!this._isStarted)return this;const P=this._animatables.slice();for(let c=0;c<P.length;c++)P[c].stop(void 0,void 0,!0,F);let f=0;for(let c=0;c<this._scene._activeAnimatables.length;c++){const P=this._scene._activeAnimatables[c];P._runtimeAnimations.length>0?this._scene._activeAnimatables[f++]=P:F&&this._checkAnimationGroupEnded(P,F)}return this._scene._activeAnimatables.length=f,this._isStarted=!1,this}setWeightForAllAnimatables(F){for(let P=0;P<this._animatables.length;P++){this._animatables[P].weight=F}return this}syncAllAnimationsWith(F){for(let P=0;P<this._animatables.length;P++){this._animatables[P].syncWith(F)}return this}goToFrame(F){let P=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this._isStarted)return this;for(let f=0;f<this._animatables.length;f++){this._animatables[f].goToFrame(F,P)}return this}getCurrentFrame(){var F;return(null===(F=this.animatables[0])||void 0===F?void 0:F.masterFrame)||0}dispose(){this.isStarted&&this.stop(),this._targetedAnimations.length=0,this._animatables.length=0;const F=this._scene.animationGroups.indexOf(this);if(F>-1&&this._scene.animationGroups.splice(F,1),this._parentContainer){const F=this._parentContainer.animationGroups.indexOf(this);F>-1&&this._parentContainer.animationGroups.splice(F,1),this._parentContainer=null}this.onAnimationEndObservable.clear(),this.onAnimationGroupEndObservable.clear(),this.onAnimationGroupPauseObservable.clear(),this.onAnimationGroupPlayObservable.clear(),this.onAnimationLoopObservable.clear(),this.onAnimationGroupLoopObservable.clear()}_checkAnimationGroupEnded(F){let P=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const f=this._animatables.indexOf(F);f>-1&&this._animatables.splice(f,1),this._animatables.length===this._targetedAnimations.length-this._numActiveAnimatables&&(this._isStarted=!1,P||this.onAnimationGroupEndObservable.notifyObservers(this),this._animatables.length=0)}clone(F,P){let f=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const c=new B(F||this.name,this._scene,this._weight,this._playOrder);c._from=this.from,c._to=this.to,c._speedRatio=this.speedRatio,c._loopAnimation=this.loopAnimation,c._isAdditive=this.isAdditive,c._enableBlending=this.enableBlending,c._blendingSpeed=this.blendingSpeed,c.metadata=this.metadata,c.mask=this.mask;for(const N of this._targetedAnimations)c.addTargetedAnimation(f?N.animation.clone():N.animation,P?P(N.target):N.target);return c}serialize(){const F={};F.name=this.name,F.from=this.from,F.to=this.to,F.speedRatio=this.speedRatio,F.loopAnimation=this.loopAnimation,F.isAdditive=this.isAdditive,F.weight=this.weight,F.playOrder=this.playOrder,F.enableBlending=this.enableBlending,F.blendingSpeed=this.blendingSpeed,F.targetedAnimations=[];for(let P=0;P<this.targetedAnimations.length;P++){const f=this.targetedAnimations[P];F.targetedAnimations[P]=f.serialize()}return H.b&&H.b.HasTags(this)&&(F.tags=H.b.GetTags(this)),this.metadata&&(F.metadata=this.metadata),F}static Parse(F,P){const f=new B(F.name,P,F.weight,F.playOrder);for(let N=0;N<F.targetedAnimations.length;N++){const q=F.targetedAnimations[N],H=c.d.Parse(q.animation),A=q.targetId;if("influence"===q.animation.property){const F=P.getMorphTargetById(A);F&&f.addTargetedAnimation(H,F)}else{const F=P.getNodeById(A);null!=F&&f.addTargetedAnimation(H,F)}}return H.b&&H.b.AddTagsTo(f,F.tags),null!==F.from&&null!==F.to&&f.normalize(F.from,F.to),void 0!==F.speedRatio&&(f._speedRatio=F.speedRatio),void 0!==F.loopAnimation&&(f._loopAnimation=F.loopAnimation),void 0!==F.isAdditive&&(f._isAdditive=F.isAdditive),void 0!==F.weight&&(f._weight=F.weight),void 0!==F.playOrder&&(f._playOrder=F.playOrder),void 0!==F.enableBlending&&(f._enableBlending=F.enableBlending),void 0!==F.blendingSpeed&&(f._blendingSpeed=F.blendingSpeed),void 0!==F.metadata&&(f.metadata=F.metadata),f}static MakeAnimationAdditive(F,P,f){let N;N="object"===typeof P?P:{referenceFrame:P,range:f,cloneOriginalAnimationGroup:arguments.length>3&&void 0!==arguments[3]&&arguments[3],clonedAnimationName:arguments.length>4?arguments[4]:void 0};let q=F;N.cloneOriginalAnimationGroup&&(q=F.clone(N.clonedAnimationGroupName||q.name));const H=q.targetedAnimations;for(let A=0;A<H.length;A++){const F=H[A];F.animation=c.d.MakeAnimationAdditive(F.animation,N)}if(q.isAdditive=!0,N.clipKeys){let F=Number.MAX_VALUE,P=-Number.MAX_VALUE;const f=q.targetedAnimations;for(let c=0;c<f.length;c++){const N=f[c].animation.getKeys();F>N[0].frame&&(F=N[0].frame),P<N[N.length-1].frame&&(P=N[N.length-1].frame)}q._from=F,q._to=P}return q}static ClipKeys(F,P,f,c,N){const q=F.clone(c||F.name);return B.ClipKeysInPlace(q,P,f,N)}static ClipKeysInPlace(F,P,f,c){return B.ClipInPlace(F,P,f,c,!1)}static ClipFrames(F,P,f,c,N){const q=F.clone(c||F.name);return B.ClipFramesInPlace(q,P,f,N)}static ClipFramesInPlace(F,P,f,c){return B.ClipInPlace(F,P,f,c,!0)}static ClipInPlace(F,P,f,c){let N=arguments.length>4&&void 0!==arguments[4]&&arguments[4],q=Number.MAX_VALUE,H=-Number.MAX_VALUE;const A=F.targetedAnimations;for(let o=0;o<A.length;o++){const F=A[o],j=c?F.animation:F.animation.clone();N&&(j.createKeyForFrame(P),j.createKeyForFrame(f));const i=j.getKeys(),u=[];let T=Number.MAX_VALUE;for(let c=0;c<i.length;c++){const F=i[c];if(!N&&c>=P&&c<=f||N&&F.frame>=P&&F.frame<=f){const P={frame:F.frame,value:F.value.clone?F.value.clone():F.value,inTangent:F.inTangent,outTangent:F.outTangent,interpolation:F.interpolation,lockedTangent:F.lockedTangent};T===Number.MAX_VALUE&&(T=P.frame),P.frame-=T,u.push(P)}}0!==u.length?(q>u[0].frame&&(q=u[0].frame),H<u[u.length-1].frame&&(H=u[u.length-1].frame),j.setKeys(u,!0),F.animation=j):(A.splice(o,1),o--)}return F._from=q,F._to=H,F}getClassName(){return"AnimationGroup"}toString(F){let P="Name: "+this.name;return P+=", type: "+this.getClassName(),F&&(P+=", from: "+this._from,P+=", to: "+this._to,P+=", isStarted: "+this._isStarted,P+=", speedRatio: "+this._speedRatio,P+=", targetedAnimations length: "+this._targetedAnimations.length,P+=", animatables length: "+this._animatables),P}}}}]);