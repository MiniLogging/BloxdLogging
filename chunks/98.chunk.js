"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[98],{13881:(L,j,P)=>{P.r(j),P.d(j,{FlowGraphSetPropertyBlock:()=>Y});var A=P(12554),R=P(12510),o=P(606);class Y extends A.b{constructor(L){super(L),this.config=L,this.object=this.registerDataInput("object",R.d,L.target),this.value=this.registerDataInput("value",R.d),this.propertyName=this.registerDataInput("propertyName",R.d,L.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",R.d)}_execute(L,j){try{const j=this.object.getValue(L),P=this.value.getValue(L),A=this.propertyName.getValue(L);this._stopRunningAnimations(L,j,A);const R=this.customSetFunction.getValue(L);R?R(j,A,P,L):this._setPropertyValue(j,A,P)}catch(P){this._reportError(L,P)}this.out._activateSignal(L)}_stopRunningAnimations(L,j,P){const A=L._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const R of A){const o=L.assetsContext.animationGroups.find((L=>L.uniqueId===R));if(o)for(const Y of o.targetedAnimations)if(Y.target===j&&Y.animation.targetProperty===P){o.stop(!0),o.dispose();const j=A.indexOf(R);-1!==j&&(A.splice(j,1),L._setGlobalContextVariable("currentlyRunningAnimationGroups",A))}}}_setPropertyValue(L,j,P){const A=j.split(".");let R=L;for(let o=0;o<A.length-1;o++){const L=A[o];void 0===R[L]&&(R[L]={}),R=R[L]}R[A[A.length-1]]=P}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,o.h)("FlowGraphSetPropertyBlock",Y)}}]);