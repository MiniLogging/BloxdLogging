"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[98],{14305:(t,q,S)=>{S.r(q),S.d(q,{FlowGraphSetPropertyBlock:()=>L});var o=S(12981),B=S(12927),z=S(622);class L extends o.d{constructor(t){super(t),this.config=t,this.object=this.registerDataInput("object",B.b,t.target),this.value=this.registerDataInput("value",B.b),this.propertyName=this.registerDataInput("propertyName",B.b,t.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",B.b)}_execute(t,q){try{const q=this.object.getValue(t),S=this.value.getValue(t),o=this.propertyName.getValue(t);this._stopRunningAnimations(t,q,o);const B=this.customSetFunction.getValue(t);B?B(q,o,S,t):this._setPropertyValue(q,o,S)}catch(S){this._reportError(t,S)}this.out._activateSignal(t)}_stopRunningAnimations(t,q,S){const o=t._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const B of o){const z=t.assetsContext.animationGroups.find((t=>t.uniqueId===B));if(z)for(const L of z.targetedAnimations)if(L.target===q&&L.animation.targetProperty===S){z.stop(!0),z.dispose();const q=o.indexOf(B);-1!==q&&(o.splice(q,1),t._setGlobalContextVariable("currentlyRunningAnimationGroups",o))}}}_setPropertyValue(t,q,S){const o=q.split(".");let B=t;for(let z=0;z<o.length-1;z++){const t=o[z];void 0===B[t]&&(B[t]={}),B=B[t]}B[o[o.length-1]]=S}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,z.c)("FlowGraphSetPropertyBlock",L)}}]);