"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[98],{14179:(c,b,A)=>{A.r(b),A.d(b,{FlowGraphSetPropertyBlock:()=>h});var o=A(12813),t=A(12763),n=A(633);class h extends o.d{constructor(c){super(c),this.config=c,this.object=this.registerDataInput("object",t.e,c.target),this.value=this.registerDataInput("value",t.e),this.propertyName=this.registerDataInput("propertyName",t.e,c.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",t.e)}_execute(c,b){try{const b=this.object.getValue(c),A=this.value.getValue(c),o=this.propertyName.getValue(c);this._stopRunningAnimations(c,b,o);const t=this.customSetFunction.getValue(c);t?t(b,o,A,c):this._setPropertyValue(b,o,A)}catch(A){this._reportError(c,A)}this.out._activateSignal(c)}_stopRunningAnimations(c,b,A){const o=c._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const t of o){const n=c.assetsContext.animationGroups.find((c=>c.uniqueId===t));if(n)for(const h of n.targetedAnimations)if(h.target===b&&h.animation.targetProperty===A){n.stop(!0),n.dispose();const b=o.indexOf(t);-1!==b&&(o.splice(b,1),c._setGlobalContextVariable("currentlyRunningAnimationGroups",o))}}}_setPropertyValue(c,b,A){const o=b.split(".");let t=c;for(let n=0;n<o.length-1;n++){const c=o[n];void 0===t[c]&&(t[c]={}),t=t[c]}t[o[o.length-1]]=A}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,n.d)("FlowGraphSetPropertyBlock",h)}}]);