"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[98],{14452:(Q,X,C)=>{C.r(X),C.d(X,{FlowGraphSetPropertyBlock:()=>f});var l=C(13120),h=C(13063),M=C(620);class f extends l.c{constructor(Q){super(Q),this.config=Q,this.object=this.registerDataInput("object",h.d,Q.target),this.value=this.registerDataInput("value",h.d),this.propertyName=this.registerDataInput("propertyName",h.d,Q.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",h.d)}_execute(Q,X){try{const X=this.object.getValue(Q),C=this.value.getValue(Q),l=this.propertyName.getValue(Q);this._stopRunningAnimations(Q,X,l);const h=this.customSetFunction.getValue(Q);h?h(X,l,C,Q):this._setPropertyValue(X,l,C)}catch(C){this._reportError(Q,C)}this.out._activateSignal(Q)}_stopRunningAnimations(Q,X,C){const l=Q._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const h of l){const M=Q.assetsContext.animationGroups.find((Q=>Q.uniqueId===h));if(M)for(const f of M.targetedAnimations)if(f.target===X&&f.animation.targetProperty===C){M.stop(!0),M.dispose();const X=l.indexOf(h);-1!==X&&(l.splice(X,1),Q._setGlobalContextVariable("currentlyRunningAnimationGroups",l))}}}_setPropertyValue(Q,X,C){const l=X.split(".");let h=Q;for(let M=0;M<l.length-1;M++){const Q=l[M];void 0===h[Q]&&(h[Q]={}),h=h[Q]}h[l[l.length-1]]=C}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,M.g)("FlowGraphSetPropertyBlock",f)}}]);