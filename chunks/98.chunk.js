"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[98],{14105:(U,W,l)=>{l.r(W),l.d(W,{FlowGraphSetPropertyBlock:()=>p});var M=l(12766),t=l(12704),L=l(655);class p extends M.e{constructor(U){super(U),this.config=U,this.object=this.registerDataInput("object",t.d,U.target),this.value=this.registerDataInput("value",t.d),this.propertyName=this.registerDataInput("propertyName",t.d,U.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",t.d)}_execute(U,W){try{const W=this.object.getValue(U),l=this.value.getValue(U),M=this.propertyName.getValue(U);this._stopRunningAnimations(U,W,M);const t=this.customSetFunction.getValue(U);t?t(W,M,l,U):this._setPropertyValue(W,M,l)}catch(l){this._reportError(U,l)}this.out._activateSignal(U)}_stopRunningAnimations(U,W,l){const M=U._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const t of M){const L=U.assetsContext.animationGroups.find((U=>U.uniqueId===t));if(L)for(const p of L.targetedAnimations)if(p.target===W&&p.animation.targetProperty===l){L.stop(!0),L.dispose();const W=M.indexOf(t);-1!==W&&(M.splice(W,1),U._setGlobalContextVariable("currentlyRunningAnimationGroups",M))}}}_setPropertyValue(U,W,l){const M=W.split(".");let t=U;for(let L=0;L<M.length-1;L++){const U=M[L];void 0===t[U]&&(t[U]={}),t=t[U]}t[M[M.length-1]]=l}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,L.f)("FlowGraphSetPropertyBlock",p)}}]);