"use strict";(self["6xhfpmwgjr5"]=self["6xhfpmwgjr5"]||[]).push([[98],{16506:(P,a,R)=>{R.r(a),R.d(a,{FlowGraphAbsBlock:()=>H,FlowGraphAcosBlock:()=>ZP,FlowGraphAcoshBlock:()=>VP,FlowGraphAddBlock:()=>O,FlowGraphAsinBlock:()=>AP,FlowGraphAsinhBlock:()=>lP,FlowGraphAtan2Block:()=>jP,FlowGraphAtanBlock:()=>pP,FlowGraphAtanhBlock:()=>fP,FlowGraphBitwiseAndBlock:()=>dP,FlowGraphBitwiseLeftShiftBlock:()=>ma,FlowGraphBitwiseNotBlock:()=>sP,FlowGraphBitwiseOrBlock:()=>GP,FlowGraphBitwiseRightShiftBlock:()=>NP,FlowGraphBitwiseXorBlock:()=>HP,FlowGraphCeilBlock:()=>L,FlowGraphClampBlock:()=>v,FlowGraphCosBlock:()=>RP,FlowGraphCoshBlock:()=>QP,FlowGraphCubeRootBlock:()=>kP,FlowGraphDegToRadBlock:()=>g,FlowGraphDivideBlock:()=>t,FlowGraphEBlock:()=>k,FlowGraphEqualityBlock:()=>T,FlowGraphExpBlock:()=>OP,FlowGraphFloorBlock:()=>D,FlowGraphFractionBlock:()=>u,FlowGraphGreaterThanBlock:()=>C,FlowGraphGreaterThanOrEqualBlock:()=>z,FlowGraphInfBlock:()=>s,FlowGraphIsInfinityBlock:()=>F,FlowGraphIsNanBlock:()=>K,FlowGraphLeadingZerosBlock:()=>DP,FlowGraphLessThanBlock:()=>i,FlowGraphLessThanOrEqualBlock:()=>X,FlowGraphLog10Block:()=>tP,FlowGraphLog2Block:()=>yP,FlowGraphLogBlock:()=>qP,FlowGraphMathInterpolationBlock:()=>w,FlowGraphMaxBlock:()=>B,FlowGraphMinBlock:()=>b,FlowGraphModuloBlock:()=>n,FlowGraphMultiplyBlock:()=>y,FlowGraphNaNBlock:()=>d,FlowGraphNegationBlock:()=>Y,FlowGraphOneBitsCounterBlock:()=>cP,FlowGraphPiBlock:()=>x,FlowGraphPowerBlock:()=>xP,FlowGraphRadToDegBlock:()=>PP,FlowGraphRandomBlock:()=>W,FlowGraphRoundBlock:()=>c,FlowGraphSaturateBlock:()=>E,FlowGraphSignBlock:()=>mP,FlowGraphSinBlock:()=>aP,FlowGraphSinhBlock:()=>UP,FlowGraphSquareRootBlock:()=>WP,FlowGraphSubtractBlock:()=>q,FlowGraphTanBlock:()=>SP,FlowGraphTanhBlock:()=>hP,FlowGraphTrailingZerosBlock:()=>LP,FlowGraphTruncBlock:()=>N});var S=R(12376),A=R(14524),Z=R(16508),p=R(16515);class j extends p.d{constructor(P,a,R,S){super(P,S),this._operation=a,this._className=R}_doOperation(P){return this._operation(P)}getClassName(){return this._className}}var U=R(12415),Q=R(16523);class h extends p.d{constructor(P,a,R,S,A,Z,p){super(S,p),this._operation=A,this._className=Z,this.a=this.registerDataInput("a",P),this.b=this.registerDataInput("b",a),this.c=this.registerDataInput("c",R)}_doOperation(P){return this._operation(this.a.getValue(P),this.b.getValue(P),this.c.getValue(P))}getClassName(){return this._className}}var l=R(14516),V=R(14528),f=R(14558);class O extends Z.d{constructor(P){super((0,A.J)(null===P||void 0===P?void 0:P.type),(0,A.J)(null===P||void 0===P?void 0:P.type),(0,A.J)(null===P||void 0===P?void 0:P.type),((P,a)=>this._polymorphicAdd(P,a)),"FlowGraphAddBlock",P)}_polymorphicAdd(P,a){const R=(0,f.j)(P),S=(0,f.j)(a);if((0,f.f)(R,S)||(0,f.d)(R,S)||(0,f.c)(R,S))return P.add(a);if("Quaternion"===R||"Vector4"===S)return new U.Vector4(P.x,P.y,P.z,P.w).addInPlace(a);if("Vector4"===R||"Quaternion"===S)return P.add(a);var A;if(null!==(A=this.config)&&void 0!==A&&A.preventIntegerFloatArithmetic&&typeof P!==typeof a)throw new Error("Cannot add different types of numbers.");return(0,f.n)(P)+(0,f.n)(a)}}(0,S.d)("FlowGraphAddBlock",O);class q extends Z.d{constructor(P){super((0,A.J)(null===P||void 0===P?void 0:P.type),(0,A.J)(null===P||void 0===P?void 0:P.type),(0,A.J)(null===P||void 0===P?void 0:P.type),((P,a)=>this._polymorphicSubtract(P,a)),"FlowGraphSubtractBlock",P)}_polymorphicSubtract(P,a){const R=(0,f.j)(P),S=(0,f.j)(a);if((0,f.f)(R,S)||(0,f.c)(R,S)||(0,f.d)(R,S))return P.qa(a);if("Quaternion"===R||"Vector4"===S)return new U.Vector4(P.x,P.y,P.z,P.w).Ul(a);if("Vector4"===R||"Quaternion"===S)return P.qa(a);var A;if(null!==(A=this.config)&&void 0!==A&&A.preventIntegerFloatArithmetic&&typeof P!==typeof a)throw new Error("Cannot add different types of numbers.");return(0,f.n)(P)-(0,f.n)(a)}}(0,S.d)("FlowGraphSubtractBlock",q);class y extends Z.d{constructor(P){super((0,A.J)(null===P||void 0===P?void 0:P.type),(0,A.J)(null===P||void 0===P?void 0:P.type),(0,A.J)(null===P||void 0===P?void 0:P.type),((P,a)=>this._polymorphicMultiply(P,a)),"FlowGraphMultiplyBlock",P)}_polymorphicMultiply(P,a){const R=(0,f.j)(P),S=(0,f.j)(a);if((0,f.f)(R,S)||(0,f.c)(R,S))return P.multiply(a);if("Quaternion"===R||"Vector4"===S)return new U.Vector4(P.x,P.y,P.z,P.w).multiplyInPlace(a);if("Vector4"===R||"Quaternion"===S)return P.multiply(a);if((0,f.d)(R,S)){var A;if(null!==(A=this.config)&&void 0!==A&&A.useMatrixPerComponent){const S=P.m;for(let P=0;P<S.length;P++)S[P]*=a.m[P];return"Matrix2D"===R?new V.b(S):"Matrix3D"===R?new V.c(S):U.Matrix.ka(S)}return a.multiply(P)}var Z;if(null!==(Z=this.config)&&void 0!==Z&&Z.preventIntegerFloatArithmetic&&typeof P!==typeof a)throw new Error("Cannot add different types of numbers.");return(0,f.n)(P)*(0,f.n)(a)}}(0,S.d)("FlowGraphMultiplyBlock",y);class t extends Z.d{constructor(P){super((0,A.J)(null===P||void 0===P?void 0:P.type),(0,A.J)(null===P||void 0===P?void 0:P.type),(0,A.J)(null===P||void 0===P?void 0:P.type),((P,a)=>this._polymorphicDivide(P,a)),"FlowGraphDivideBlock",P)}_polymorphicDivide(P,a){const R=(0,f.j)(P),S=(0,f.j)(a);if((0,f.f)(R,S)||(0,f.c)(R,S))return P.divide(a);if("Quaternion"===R||"Quaternion"===S){const R=P.clone();return R.x/=a.x,R.y/=a.y,R.z/=a.z,R.w/=a.w,R}if("Quaternion"===R||"Vector4"===S)return new U.Vector4(P.x,P.y,P.z,P.w).divideInPlace(a);if("Vector4"===R||"Quaternion"===S)return P.divide(a);if((0,f.d)(R,S)){var A;if(null!==(A=this.config)&&void 0!==A&&A.useMatrixPerComponent){const S=P.m;for(let P=0;P<S.length;P++)S[P]/=a.m[P];return"Matrix2D"===R?new V.b(S):"Matrix3D"===R?new V.c(S):U.Matrix.ka(S)}return P.divide(a)}var Z;if(null!==(Z=this.config)&&void 0!==Z&&Z.preventIntegerFloatArithmetic&&typeof P!==typeof a)throw new Error("Cannot add different types of numbers.");return(0,f.n)(P)/(0,f.n)(a)}}(0,S.d)("FlowGraphDivideBlock",t);class W extends j{constructor(P){super(A.p,(P=>this._random(P)),"FlowGraphRandomBlock",P),this.min=this.registerDataInput("min",A.p,(null===P||void 0===P?void 0:P.min)??0),this.max=this.registerDataInput("max",A.p,(null===P||void 0===P?void 0:P.max)??1),null!==P&&void 0!==P&&P.seed&&(this._seed=P.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const P=1e4*Math.sin(this._seed++);return P-Math.floor(P)}return Math.random()}_random(P){const a=this.min.getValue(P),R=this.max.getValue(P);return this._getRandomValue()*(R-a)+a}}(0,S.d)("FlowGraphRandomBlock",W);class k extends j{constructor(P){super(A.p,(()=>Math.E),"FlowGraphEBlock",P)}}(0,S.d)("FlowGraphEBlock",k);class x extends j{constructor(P){super(A.p,(()=>Math.PI),"FlowGraphPIBlock",P)}}(0,S.d)("FlowGraphPIBlock",x);class s extends j{constructor(P){super(A.p,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",P)}}(0,S.d)("FlowGraphInfBlock",s);class d extends j{constructor(P){super(A.p,(()=>Number.NaN),"FlowGraphNaNBlock",P)}}function G(P,a){switch((0,f.j)(P)){case"FlowGraphInteger":return new l.c(a(P.value));case"Vector2":return new U.Vector2(a(P.x),a(P.y));case"Oa":return new U.Oa(a(P.x),a(P.y),a(P.z));case"Vector4":return new U.Vector4(a(P.x),a(P.y),a(P.z),a(P.w));case"Quaternion":return new U.Quaternion(a(P.x),a(P.y),a(P.z),a(P.w));case"Matrix":return U.Matrix.ka(P.m.map(a));case"Matrix2D":return new V.b(P.m.map(a));case"Matrix3D":return new V.c(P.m.map(a));default:return a(P)}}(0,S.d)("FlowGraphNaNBlock",d);class H extends Q.e{constructor(P){super(A.p,A.p,(P=>this._polymorphicAbs(P)),"FlowGraphAbsBlock",P)}_polymorphicAbs(P){return G(P,Math.abs)}}(0,S.d)("FlowGraphAbsBlock",H);class mP extends Q.e{constructor(P){super(A.p,A.p,(P=>this._polymorphicSign(P)),"FlowGraphSignBlock",P)}_polymorphicSign(P){return G(P,Math.sign)}}(0,S.d)("FlowGraphSignBlock",mP);class N extends Q.e{constructor(P){super(A.p,A.p,(P=>this._polymorphicTrunc(P)),"FlowGraphTruncBlock",P)}_polymorphicTrunc(P){return G(P,Math.trunc)}}(0,S.d)("FlowGraphTruncBlock",N);class D extends Q.e{constructor(P){super(A.p,A.p,(P=>this._polymorphicFloor(P)),"FlowGraphFloorBlock",P)}_polymorphicFloor(P){return G(P,Math.floor)}}(0,S.d)("FlowGraphFloorBlock",D);class L extends Q.e{constructor(P){super(A.c,A.c,(P=>this._polymorphicCeiling(P)),"FlowGraphCeilBlock",P)}_polymorphicCeiling(P){return G(P,Math.ceil)}}(0,S.d)("FlowGraphCeilBlock",L);class c extends Q.e{constructor(P){super(A.c,A.c,(P=>this._polymorphicRound(P)),"FlowGraphRoundBlock",P)}_polymorphicRound(P){return G(P,(P=>{var a;return P<0&&null!==(a=this.config)&&void 0!==a&&a.roundHalfAwayFromZero?-Math.round(-P):Math.round(P)}))}}(0,S.d)("FlowGraphRoundBlock",c);class u extends Q.e{constructor(P){super(A.c,A.c,(P=>this._polymorphicFraction(P)),"FlowGraphFractBlock",P)}_polymorphicFraction(P){return G(P,(P=>P-Math.floor(P)))}}(0,S.d)("FlowGraphFractBlock",u);class Y extends Q.e{constructor(P){super(A.c,A.c,(P=>this._polymorphicNeg(P)),"FlowGraphNegationBlock",P)}_polymorphicNeg(P){return G(P,(P=>-P))}}function J(P,a,R){switch((0,f.j)(P)){case"FlowGraphInteger":return new l.c(R(P.value,a.value));case"Vector2":return new U.Vector2(R(P.x,a.x),R(P.y,a.y));case"Oa":return new U.Oa(R(P.x,a.x),R(P.y,a.y),R(P.z,a.z));case"Vector4":return new U.Vector4(R(P.x,a.x),R(P.y,a.y),R(P.z,a.z),R(P.w,a.w));case"Quaternion":return new U.Quaternion(R(P.x,a.x),R(P.y,a.y),R(P.z,a.z),R(P.w,a.w));case"Matrix":return U.Matrix.ka(P.m.map(((P,S)=>R(P,a.m[S]))));case"Matrix2D":return new V.b(P.m.map(((P,S)=>R(P,a.m[S]))));case"Matrix3D":return new V.c(P.m.map(((P,S)=>R(P,a.m[S]))));default:return R((0,f.n)(P),(0,f.n)(a))}}(0,S.d)("FlowGraphNegationBlock",Y);class n extends Z.d{constructor(P){super(A.c,A.c,A.c,((P,a)=>this._polymorphicRemainder(P,a)),"FlowGraphModuloBlock",P)}_polymorphicRemainder(P,a){return J(P,a,((P,a)=>P%a))}}(0,S.d)("FlowGraphModuloBlock",n);class b extends Z.d{constructor(P){super(A.c,A.c,A.c,((P,a)=>this._polymorphicMin(P,a)),"FlowGraphMinBlock",P)}_polymorphicMin(P,a){return J(P,a,Math.min)}}(0,S.d)("FlowGraphMinBlock",b);class B extends Z.d{constructor(P){super(A.c,A.c,A.c,((P,a)=>this._polymorphicMax(P,a)),"FlowGraphMaxBlock",P)}_polymorphicMax(P,a){return J(P,a,Math.max)}}function o(P,a,R){return Math.min(Math.max(P,Math.min(a,R)),Math.max(a,R))}function r(P,a,R,S){switch((0,f.j)(P)){case"FlowGraphInteger":return new l.c(S(P.value,a.value,R.value));case"Vector2":return new U.Vector2(S(P.x,a.x,R.x),S(P.y,a.y,R.y));case"Oa":return new U.Oa(S(P.x,a.x,R.x),S(P.y,a.y,R.y),S(P.z,a.z,R.z));case"Vector4":return new U.Vector4(S(P.x,a.x,R.x),S(P.y,a.y,R.y),S(P.z,a.z,R.z),S(P.w,a.w,R.w));case"Quaternion":return new U.Quaternion(S(P.x,a.x,R.x),S(P.y,a.y,R.y),S(P.z,a.z,R.z),S(P.w,a.w,R.w));case"Matrix":return U.Matrix.ka(P.m.map(((P,A)=>S(P,a.m[A],R.m[A]))));case"Matrix2D":return new V.b(P.m.map(((P,A)=>S(P,a.m[A],R.m[A]))));case"Matrix3D":return new V.c(P.m.map(((P,A)=>S(P,a.m[A],R.m[A]))));default:return S((0,f.n)(P),(0,f.n)(a),(0,f.n)(R))}}(0,S.d)("FlowGraphMaxBlock",B);class v extends h{constructor(P){super(A.c,A.c,A.c,A.c,((P,a,R)=>this._polymorphicClamp(P,a,R)),"FlowGraphClampBlock",P)}_polymorphicClamp(P,a,R){return r(P,a,R,o)}}function M(P){return Math.min(Math.max(P,0),1)}(0,S.d)("FlowGraphClampBlock",v);class E extends Q.e{constructor(P){super(A.c,A.c,(P=>this._polymorphicSaturate(P)),"FlowGraphSaturateBlock",P)}_polymorphicSaturate(P){return G(P,M)}}function e(P,a,R){return(1-R)*P+R*a}(0,S.d)("FlowGraphSaturateBlock",E);class w extends h{constructor(P){super(A.c,A.c,A.c,A.c,((P,a,R)=>this._polymorphicInterpolate(P,a,R)),"FlowGraphMathInterpolationBlock",P)}_polymorphicInterpolate(P,a,R){return r(P,a,R,e)}}(0,S.d)("FlowGraphMathInterpolationBlock",w);class T extends Z.d{constructor(P){super(A.c,A.c,A.d,((P,a)=>this._polymorphicEq(P,a)),"FlowGraphEqualityBlock",P)}_polymorphicEq(P,a){const R=(0,f.j)(P),S=(0,f.j)(a);return typeof P===typeof a&&((0,f.f)(R,S)||(0,f.d)(R,S)||(0,f.c)(R,S)?P.equals(a):P===a)}}function I(P,a,R){if((0,f.q)(P)&&(0,f.q)(a))return R((0,f.n)(P),(0,f.n)(a));throw new Error(`Cannot compare ${P} and ${a}`)}(0,S.d)("FlowGraphEqualityBlock",T);class i extends Z.d{constructor(P){super(A.c,A.c,A.d,((P,a)=>this._polymorphicLessThan(P,a)),"FlowGraphLessThanBlock",P)}_polymorphicLessThan(P,a){return I(P,a,((P,a)=>P<a))}}(0,S.d)("FlowGraphLessThanBlock",i);class X extends Z.d{constructor(P){super(A.c,A.c,A.d,((P,a)=>this._polymorphicLessThanOrEqual(P,a)),"FlowGraphLessThanOrEqualBlock",P)}_polymorphicLessThanOrEqual(P,a){return I(P,a,((P,a)=>P<=a))}}(0,S.d)("FlowGraphLessThanOrEqualBlock",X);class C extends Z.d{constructor(P){super(A.c,A.c,A.d,((P,a)=>this._polymorphicGreaterThan(P,a)),"FlowGraphGreaterThanBlock",P)}_polymorphicGreaterThan(P,a){return I(P,a,((P,a)=>P>a))}}(0,S.d)("FlowGraphGreaterThanBlock",C);class z extends Z.d{constructor(P){super(A.c,A.c,A.d,((P,a)=>this._polymorphicGreaterThanOrEqual(P,a)),"FlowGraphGreaterThanOrEqualBlock",P)}_polymorphicGreaterThanOrEqual(P,a){return I(P,a,((P,a)=>P>=a))}}(0,S.d)("FlowGraphGreaterThanOrEqualBlock",z);class K extends Q.e{constructor(P){super(A.c,A.d,(P=>this._polymorphicIsNan(P)),"FlowGraphIsNaNBlock",P)}_polymorphicIsNan(P){if((0,f.q)(P,!0))return isNaN((0,f.n)(P));throw new Error(`Cannot get NaN of ${P}`)}}(0,S.d)("FlowGraphIsNaNBlock",K);class F extends Q.e{constructor(P){super(A.c,A.d,(P=>this._polymorphicIsInf(P)),"FlowGraphIsInfBlock",P)}_polymorphicIsInf(P){if((0,f.q)(P))return!isFinite((0,f.n)(P));throw new Error(`Cannot get isInf of ${P}`)}}(0,S.d)("FlowGraphIsInfBlock",F);class g extends Q.e{constructor(P){super(A.c,A.c,(P=>this._polymorphicDegToRad(P)),"FlowGraphDegToRadBlock",P)}_degToRad(P){return P*Math.PI/180}_polymorphicDegToRad(P){return G(P,this._degToRad)}}(0,S.d)("FlowGraphDegToRadBlock",g);class PP extends Q.e{constructor(P){super(A.c,A.c,(P=>this._polymorphicRadToDeg(P)),"FlowGraphRadToDegBlock",P)}_radToDeg(P){return 180*P/Math.PI}_polymorphicRadToDeg(P){return G(P,this._radToDeg)}}(0,S.d)("FlowGraphRadToDegBlock",PP);class aP extends Q.e{constructor(P){super(A.p,A.p,(P=>this._polymorphicSin(P)),"FlowGraphSinBlock",P)}_polymorphicSin(P){return G(P,Math.sin)}}class RP extends Q.e{constructor(P){super(A.p,A.p,(P=>this._polymorphicCos(P)),"FlowGraphCosBlock",P)}_polymorphicCos(P){return G(P,Math.cos)}}class SP extends Q.e{constructor(P){super(A.p,A.p,(P=>this._polymorphicTan(P)),"FlowGraphTanBlock",P)}_polymorphicTan(P){return G(P,Math.tan)}}class AP extends Q.e{constructor(P){super(A.p,A.p,(P=>this._polymorphicAsin(P)),"FlowGraphASinBlock",P)}_polymorphicAsin(P){return G(P,Math.asin)}}(0,S.d)("FlowGraphASinBlock",AP);class ZP extends Q.e{constructor(P){super(A.p,A.p,(P=>this._polymorphicAcos(P)),"FlowGraphACosBlock",P)}_polymorphicAcos(P){return G(P,Math.acos)}}(0,S.d)("FlowGraphACosBlock",ZP);class pP extends Q.e{constructor(P){super(A.p,A.p,(P=>this._polymorphicAtan(P)),"FlowGraphATanBlock",P)}_polymorphicAtan(P){return G(P,Math.atan)}}(0,S.d)("FlowGraphATanBlock",pP);class jP extends Z.d{constructor(P){super(A.c,A.c,A.c,((P,a)=>this._polymorphicAtan2(P,a)),"FlowGraphATan2Block",P)}_polymorphicAtan2(P,a){return J(P,a,Math.atan2)}}(0,S.d)("FlowGraphATan2Block",jP);class UP extends Q.e{constructor(P){super(A.c,A.c,(P=>this._polymorphicSinh(P)),"FlowGraphSinhBlock",P)}_polymorphicSinh(P){return G(P,Math.sinh)}}(0,S.d)("FlowGraphSinhBlock",UP);class QP extends Q.e{constructor(P){super(A.c,A.c,(P=>this._polymorphicCosh(P)),"FlowGraphCoshBlock",P)}_polymorphicCosh(P){return G(P,Math.cosh)}}(0,S.d)("FlowGraphCoshBlock",QP);class hP extends Q.e{constructor(P){super(A.c,A.c,(P=>this._polymorphicTanh(P)),"FlowGraphTanhBlock",P)}_polymorphicTanh(P){return G(P,Math.tanh)}}(0,S.d)("FlowGraphTanhBlock",hP);class lP extends Q.e{constructor(P){super(A.c,A.p,(P=>this._polymorphicAsinh(P)),"FlowGraphASinhBlock",P)}_polymorphicAsinh(P){return G(P,Math.asinh)}}(0,S.d)("FlowGraphASinhBlock",lP);class VP extends Q.e{constructor(P){super(A.c,A.p,(P=>this._polymorphicAcosh(P)),"FlowGraphACoshBlock",P)}_polymorphicAcosh(P){return G(P,Math.acosh)}}(0,S.d)("FlowGraphACoshBlock",VP);class fP extends Q.e{constructor(P){super(A.c,A.p,(P=>this._polymorphicAtanh(P)),"FlowGraphATanhBlock",P)}_polymorphicAtanh(P){return G(P,Math.atanh)}}(0,S.d)("FlowGraphATanhBlock",fP);class OP extends Q.e{constructor(P){super(A.c,A.p,(P=>this._polymorphicExp(P)),"FlowGraphExponentialBlock",P)}_polymorphicExp(P){return G(P,Math.exp)}}(0,S.d)("FlowGraphExponentialBlock",OP);class qP extends Q.e{constructor(P){super(A.c,A.p,(P=>this._polymorphicLog(P)),"FlowGraphLogBlock",P)}_polymorphicLog(P){return G(P,Math.log)}}(0,S.d)("FlowGraphLogBlock",qP);class yP extends Q.e{constructor(P){super(A.c,A.p,(P=>this._polymorphicLog2(P)),"FlowGraphLog2Block",P)}_polymorphicLog2(P){return G(P,Math.log2)}}(0,S.d)("FlowGraphLog2Block",yP);class tP extends Q.e{constructor(P){super(A.c,A.p,(P=>this._polymorphicLog10(P)),"FlowGraphLog10Block",P)}_polymorphicLog10(P){return G(P,Math.log10)}}(0,S.d)("FlowGraphLog10Block",tP);class WP extends Q.e{constructor(P){super(A.c,A.p,(P=>this._polymorphicSqrt(P)),"FlowGraphSquareRootBlock",P)}_polymorphicSqrt(P){return G(P,Math.sqrt)}}(0,S.d)("FlowGraphSquareRootBlock",WP);class kP extends Q.e{constructor(P){super(A.c,A.p,(P=>this._polymorphicCubeRoot(P)),"FlowGraphCubeRootBlock",P)}_polymorphicCubeRoot(P){return G(P,Math.cbrt)}}(0,S.d)("FlowGraphCubeRootBlock",kP);class xP extends Z.d{constructor(P){super(A.c,A.p,A.p,((P,a)=>this._polymorphicPow(P,a)),"FlowGraphPowerBlock",P)}_polymorphicPow(P,a){return J(P,a,Math.pow)}}(0,S.d)("FlowGraphPowerBlock",xP);class sP extends Q.e{constructor(P){super((0,A.J)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,A.J)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(P=>"boolean"===typeof P?!P:"number"===typeof P?~P:new l.c(~P.value)),"FlowGraphBitwiseNotBlock",P)}}(0,S.d)("FlowGraphBitwiseNotBlock",sP);class dP extends Z.d{constructor(P){super((0,A.J)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,A.J)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,A.J)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),((P,a)=>{if("boolean"===typeof P&&"boolean"===typeof a)return P&&a;if("number"===typeof P&&"number"===typeof a)return P&a;if("object"===typeof P&&"object"===typeof a)return new l.c(P.value&a.value);throw new Error(`Cannot perform bitwise AND on ${P} and ${a}`)}),"FlowGraphBitwiseAndBlock",P)}}(0,S.d)("FlowGraphBitwiseAndBlock",dP);class GP extends Z.d{constructor(P){super((0,A.J)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,A.J)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,A.J)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),((P,a)=>{if("boolean"===typeof P&&"boolean"===typeof a)return P||a;if("number"===typeof P&&"number"===typeof a)return P|a;if("object"===typeof P&&"object"===typeof a)return new l.c(P.value|a.value);throw new Error(`Cannot perform bitwise OR on ${P} and ${a}`)}),"FlowGraphBitwiseOrBlock",P)}}(0,S.d)("FlowGraphBitwiseOrBlock",GP);class HP extends Z.d{constructor(P){super((0,A.J)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,A.J)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),(0,A.J)((null===P||void 0===P?void 0:P.valueType)||"FlowGraphInteger"),((P,a)=>{if("boolean"===typeof P&&"boolean"===typeof a)return P!==a;if("number"===typeof P&&"number"===typeof a)return P^a;if("object"===typeof P&&"object"===typeof a)return new l.c(P.value^a.value);throw new Error(`Cannot perform bitwise XOR on ${P} and ${a}`)}),"FlowGraphBitwiseXorBlock",P)}}(0,S.d)("FlowGraphBitwiseXorBlock",HP);class ma extends Z.d{constructor(P){super(A.e,A.e,A.e,((P,a)=>new l.c(P.value<<a.value)),"FlowGraphBitwiseLeftShiftBlock",P)}}(0,S.d)("FlowGraphBitwiseLeftShiftBlock",ma);class NP extends Z.d{constructor(P){super(A.e,A.e,A.e,((P,a)=>new l.c(P.value>>a.value)),"FlowGraphBitwiseRightShiftBlock",P)}}(0,S.d)("FlowGraphBitwiseRightShiftBlock",NP);class DP extends Q.e{constructor(P){super(A.e,A.e,(P=>new l.c(Math.clz32(P.value))),"FlowGraphLeadingZerosBlock",P)}}(0,S.d)("FlowGraphLeadingZerosBlock",DP);class LP extends Q.e{constructor(P){super(A.e,A.e,(P=>new l.c(P.value?31-Math.clz32(P.value&-P.value):32)),"FlowGraphTrailingZerosBlock",P)}}(0,S.d)("FlowGraphTrailingZerosBlock",LP);class cP extends Q.e{constructor(P){super(A.e,A.e,(P=>new l.c(function(P){let a=0;for(;P;)a+=1&P,P>>=1;return a}(P.value))),"FlowGraphOneBitsCounterBlock",P)}}(0,S.d)("FlowGraphOneBitsCounterBlock",cP)},16508:(P,a,R)=>{R.d(a,{d:()=>A});var S=R(16515);class A extends S.d{constructor(P,a,R,S,A,Z){super(R,Z),this._operation=S,this._className=A,this.a=this.registerDataInput("a",P),this.b=this.registerDataInput("b",a)}_doOperation(P){const a=this.a.getValue(P),R=this.b.getValue(P);return this._operation(a,R)}getClassName(){return this._className}}},16515:(P,a,R)=>{R.d(a,{d:()=>j});var S=R(14549),A=R(14524);const Z="cachedOperationValue",p="cachedExecutionId";class j extends S.e{constructor(P,a){super(a),this.value=this.registerDataOutput("value",P),this.isValid=this.registerDataOutput("isValid",A.d)}_updateOutputs(P){const a=P._getExecutionVariable(this,p,-1),R=P._getExecutionVariable(this,Z,null);if(void 0!==R&&null!==R&&a===P.executionId)this.isValid.setValue(!0,P),this.value.setValue(R,P);else try{const a=this._doOperation(P);if(void 0===a||null===a)return void this.isValid.setValue(!1,P);P._setExecutionVariable(this,Z,a),P._setExecutionVariable(this,p,P.executionId),this.value.setValue(a,P),this.isValid.setValue(!0,P)}catch(S){this.isValid.setValue(!1,P)}}}},16523:(P,a,R)=>{R.d(a,{e:()=>A});var S=R(16515);class A extends S.d{constructor(P,a,R,S,A){super(a,A),this._operation=R,this._className=S,this.a=this.registerDataInput("a",P)}_doOperation(P){return this._operation(this.a.getValue(P))}getClassName(){return this._className}}}}]);