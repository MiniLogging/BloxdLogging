"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[98],{14604:(R,x,H)=>{H.r(x),H.d(x,{FlowGraphSetPropertyBlock:()=>A});var k=H(13301),c=H(13246),t=H(610);class A extends k.d{constructor(R){super(R),this.config=R,this.object=this.registerDataInput("object",c.b,R.target),this.value=this.registerDataInput("value",c.b),this.propertyName=this.registerDataInput("propertyName",c.b,R.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",c.b)}_execute(R,x){try{const x=this.object.getValue(R),H=this.value.getValue(R),k=this.propertyName.getValue(R);this._stopRunningAnimations(R,x,k);const c=this.customSetFunction.getValue(R);c?c(x,k,H,R):this._setPropertyValue(x,k,H)}catch(H){this._reportError(R,H)}this.out._activateSignal(R)}_stopRunningAnimations(R,x,H){const k=R._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const c of k){const t=R.assetsContext.animationGroups.find((R=>R.uniqueId===c));if(t)for(const A of t.targetedAnimations)if(A.target===x&&A.animation.targetProperty===H){t.stop(!0),t.dispose();const x=k.indexOf(c);-1!==x&&(k.splice(x,1),R._setGlobalContextVariable("currentlyRunningAnimationGroups",k))}}}_setPropertyValue(R,x,H){const k=x.split(".");let c=R;for(let t=0;t<k.length-1;t++){const R=k[t];void 0===c[R]&&(c[R]={}),c=c[R]}c[k[k.length-1]]=H}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,t.h)("FlowGraphSetPropertyBlock",A)}}]);