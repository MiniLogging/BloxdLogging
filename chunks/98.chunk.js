"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[98],{14201:(Z,U,n)=>{n.r(U),n.d(U,{FlowGraphSetPropertyBlock:()=>H});var i=n(12861),B=n(12826),l=n(633);class H extends i.e{constructor(Z){super(Z),this.config=Z,this.object=this.registerDataInput("object",B.b,Z.target),this.value=this.registerDataInput("value",B.b),this.propertyName=this.registerDataInput("propertyName",B.b,Z.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",B.b)}_execute(Z,U){try{const U=this.object.getValue(Z),n=this.value.getValue(Z),i=this.propertyName.getValue(Z);this._stopRunningAnimations(Z,U,i);const B=this.customSetFunction.getValue(Z);B?B(U,i,n,Z):this._setPropertyValue(U,i,n)}catch(n){this._reportError(Z,n)}this.out._activateSignal(Z)}_stopRunningAnimations(Z,U,n){const i=Z._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const B of i){const l=Z.assetsContext.animationGroups.find((Z=>Z.uniqueId===B));if(l)for(const H of l.targetedAnimations)if(H.target===U&&H.animation.targetProperty===n){l.stop(!0),l.dispose();const U=i.indexOf(B);-1!==U&&(i.splice(U,1),Z._setGlobalContextVariable("currentlyRunningAnimationGroups",i))}}}_setPropertyValue(Z,U,n){const i=U.split(".");let B=Z;for(let l=0;l<i.length-1;l++){const Z=i[l];void 0===B[Z]&&(B[Z]={}),B=B[Z]}B[i[i.length-1]]=n}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,l.g)("FlowGraphSetPropertyBlock",H)}}]);