"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[98],{14325:(v,d,Q)=>{Q.r(d),Q.d(d,{FlowGraphSetPropertyBlock:()=>e});var n=Q(12966),T=Q(12908),L=Q(591);class e extends n.d{constructor(v){super(v),this.config=v,this.object=this.registerDataInput("object",T.c,v.target),this.value=this.registerDataInput("value",T.c),this.propertyName=this.registerDataInput("propertyName",T.c,v.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",T.c)}_execute(v,d){try{const d=this.object.getValue(v),Q=this.value.getValue(v),n=this.propertyName.getValue(v);this._stopRunningAnimations(v,d,n);const T=this.customSetFunction.getValue(v);T?T(d,n,Q,v):this._setPropertyValue(d,n,Q)}catch(Q){this._reportError(v,Q)}this.out._activateSignal(v)}_stopRunningAnimations(v,d,Q){const n=v._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const T of n){const L=v.assetsContext.animationGroups.find((v=>v.uniqueId===T));if(L)for(const e of L.targetedAnimations)if(e.target===d&&e.animation.targetProperty===Q){L.stop(!0),L.dispose();const d=n.indexOf(T);-1!==d&&(n.splice(d,1),v._setGlobalContextVariable("currentlyRunningAnimationGroups",n))}}}_setPropertyValue(v,d,Q){const n=d.split(".");let T=v;for(let L=0;L<n.length-1;L++){const v=n[L];void 0===T[v]&&(T[v]={}),T=T[v]}T[n[n.length-1]]=Q}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,L.f)("FlowGraphSetPropertyBlock",e)}}]);