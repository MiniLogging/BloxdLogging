"use strict";(self.hbnkweqmycf=self.hbnkweqmycf||[]).push([[96],{14867:(F,P,f)=>{f.r(P),f.d(P,{FlowGraphSetDelayBlock:()=>u});var c,N=f(13307),q=f(13265),H=f(11464);!function(F){F[F.INIT=0]="INIT",F[F.STARTED=1]="STARTED",F[F.ENDED=2]="ENDED"}(c||(c={}));class A{constructor(F){this.onEachCountObservable=new H.d,this.onTimerAbortedObservable=new H.d,this.onTimerEndedObservable=new H.d,this.onStateChangedObservable=new H.d,this._observer=null,this._breakOnNextTick=!1,this._tick=F=>{const P=Date.now();this._timer=P-this._startTime;const f={startTime:this._startTime,currentTime:P,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,Rf:F},c=this._breakOnNextTick||this._breakCondition(f);c||this._timer>=this._timeToEnd?this._stop(f,c):this.onEachCountObservable.notifyObservers(f)},this._setState(0),this._contextObservable=F.contextObservable,this._observableParameters=F.observableParameters??{},this._breakCondition=F.breakCondition??(()=>!1),this._timeToEnd=F.timeout,F.onEnded&&this.onTimerEndedObservable.add(F.onEnded),F.iu&&this.onEachCountObservable.add(F.iu),F.onAborted&&this.onTimerAbortedObservable.add(F.onAborted)}set breakCondition(F){this._breakCondition=F}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let F=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=F,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(F){this._state=F,this.onStateChangedObservable.notifyObservers(this._state)}_stop(F){let P=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),P?this.onTimerAbortedObservable.notifyObservers(F):this.onTimerEndedObservable.notifyObservers(F)}}var o=f(11474),j=f(11587),i=f(13258);class u extends N.c{constructor(F){super(F),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",q.o),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",q.h,new i.b(-1))}_preparePendingTasks(F){const P=this.duration.getValue(F);if(P<0||isNaN(P)||!isFinite(P))return this._reportError(F,"Invalid duration in SetDelay block");if(F._getGlobalContextVariable("activeDelays",0)>=u.MaxParallelDelayCount)return this._reportError(F,"Max parallel delays reached");const f=F._getGlobalContextVariable("lastDelayIndex",-1),c=F._getExecutionVariable(this,"pendingDelays",[]),N=F.configuration.LP,q=new A({timeout:1e3*P,contextObservable:N.onBeforeRenderObservable,onEnded:()=>this._onEnded(q,F)});q.start();const H=f+1;this.lastDelayIndex.setValue(new i.b(H),F),F._setGlobalContextVariable("lastDelayIndex",H),c[H]=q,F._setExecutionVariable(this,"pendingDelays",c),this._updateGlobalTimers(F)}_cancelPendingTasks(F){const P=F._getExecutionVariable(this,"pendingDelays",[]);for(const f of P)null===f||void 0===f||f.dispose();F._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new i.b(-1),F),this._updateGlobalTimers(F)}_execute(F,P){P!==this.cancel?(this._preparePendingTasks(F),this.out._activateSignal(F)):this._cancelPendingTasks(F)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(F,P){const f=P._getExecutionVariable(this,"pendingDelays",[]),c=f.indexOf(F);-1!==c?f.splice(c,1):o.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),P._removePendingBlock(this),this.done._activateSignal(P),this._updateGlobalTimers(P)}_updateGlobalTimers(F){const P=F._getExecutionVariable(this,"pendingDelays",[]),f=F._getGlobalContextVariable("pendingDelays",[]);for(let c=0;c<P.length;c++){if(!P[c])continue;const F=P[c];f[c]&&f[c]!==F?o.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):f[c]=F}F._setGlobalContextVariable("pendingDelays",f)}}u.MaxParallelDelayCount=100,(0,j.f)("FlowGraphSetDelayBlock",u)}}]);