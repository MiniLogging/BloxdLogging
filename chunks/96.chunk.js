"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[96],{14492:(o,H,n)=>{n.r(H),n.d(H,{FlowGraphSetDelayBlock:()=>c});var E,k=n(12974),g=n(12933),O=n(11026);!function(o){o[o.INIT=0]="INIT",o[o.STARTED=1]="STARTED",o[o.ENDED=2]="ENDED"}(E||(E={}));class Y{constructor(o){this.onEachCountObservable=new O.d,this.onTimerAbortedObservable=new O.d,this.onTimerEndedObservable=new O.d,this.onStateChangedObservable=new O.d,this._observer=null,this._breakOnNextTick=!1,this._tick=o=>{const H=Date.now();this._timer=H-this._startTime;const n={startTime:this._startTime,currentTime:H,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:o},E=this._breakOnNextTick||this._breakCondition(n);E||this._timer>=this._timeToEnd?this._stop(n,E):this.onEachCountObservable.notifyObservers(n)},this._setState(0),this._contextObservable=o.contextObservable,this._observableParameters=o.observableParameters??{},this._breakCondition=o.breakCondition??(()=>!1),this._timeToEnd=o.timeout,o.onEnded&&this.onTimerEndedObservable.add(o.onEnded),o.eG&&this.onEachCountObservable.add(o.eG),o.onAborted&&this.onTimerAbortedObservable.add(o.onAborted)}set breakCondition(o){this._breakCondition=o}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=o,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(o){this._state=o,this.onStateChangedObservable.notifyObservers(this._state)}_stop(o){let H=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),H?this.onTimerAbortedObservable.notifyObservers(o):this.onTimerEndedObservable.notifyObservers(o)}}var y=n(11038),S=n(11140),G=n(12929);class c extends k.e{constructor(o){super(o),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",g.r),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",g.e,new G.c(-1))}_preparePendingTasks(o){const H=this.duration.getValue(o);if(H<0||isNaN(H)||!isFinite(H))return this._reportError(o,"Invalid duration in SetDelay block");if(o._getGlobalContextVariable("activeDelays",0)>=c.MaxParallelDelayCount)return this._reportError(o,"Max parallel delays reached");const n=o._getGlobalContextVariable("lastDelayIndex",-1),E=o._getExecutionVariable(this,"pendingDelays",[]),k=o.configuration.VH,g=new Y({timeout:1e3*H,contextObservable:k.onBeforeRenderObservable,onEnded:()=>this._onEnded(g,o)});g.start();const O=n+1;this.lastDelayIndex.setValue(new G.c(O),o),o._setGlobalContextVariable("lastDelayIndex",O),E[O]=g,o._setExecutionVariable(this,"pendingDelays",E),this._updateGlobalTimers(o)}_cancelPendingTasks(o){const H=o._getExecutionVariable(this,"pendingDelays",[]);for(const n of H)null===n||void 0===n||n.dispose();o._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new G.c(-1),o),this._updateGlobalTimers(o)}_execute(o,H){H!==this.cancel?(this._preparePendingTasks(o),this.out._activateSignal(o)):this._cancelPendingTasks(o)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(o,H){const n=H._getExecutionVariable(this,"pendingDelays",[]),E=n.indexOf(o);-1!==E?n.splice(E,1):y.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),H._removePendingBlock(this),this.done._activateSignal(H),this._updateGlobalTimers(H)}_updateGlobalTimers(o){const H=o._getExecutionVariable(this,"pendingDelays",[]),n=o._getGlobalContextVariable("pendingDelays",[]);for(let E=0;E<H.length;E++){if(!H[E])continue;const o=H[E];n[E]&&n[E]!==o?y.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):n[E]=o}o._setGlobalContextVariable("pendingDelays",n)}}c.MaxParallelDelayCount=100,(0,S.e)("FlowGraphSetDelayBlock",c)}}]);