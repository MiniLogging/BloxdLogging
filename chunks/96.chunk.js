"use strict";(self.uji65st81d=self.uji65st81d||[]).push([[96],{15642:(V,h,mV)=>{mV.r(h),mV.d(h,{FlowGraphSetDelayBlock:()=>n});var t,L=mV(14140),N=mV(14109),A=mV(12258);!function(V){V[V.INIT=0]="INIT",V[V.STARTED=1]="STARTED",V[V.ENDED=2]="ENDED"}(t||(t={}));class k{constructor(V){this.onEachCountObservable=new A.d,this.onTimerAbortedObservable=new A.d,this.onTimerEndedObservable=new A.d,this.onStateChangedObservable=new A.d,this._observer=null,this._breakOnNextTick=!1,this._tick=V=>{const h=Date.now();this._timer=h-this._startTime;const mV={startTime:this._startTime,currentTime:h,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,Hm:V},t=this._breakOnNextTick||this._breakCondition(mV);t||this._timer>=this._timeToEnd?this._stop(mV,t):this.onEachCountObservable.notifyObservers(mV)},this._setState(0),this._contextObservable=V.contextObservable,this._observableParameters=V.observableParameters??{},this._breakCondition=V.breakCondition??(()=>!1),this._timeToEnd=V.timeout,V.onEnded&&this.onTimerEndedObservable.add(V.onEnded),V.Uo&&this.onEachCountObservable.add(V.Uo),V.onAborted&&this.onTimerAbortedObservable.add(V.onAborted)}set breakCondition(V){this._breakCondition=V}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let V=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=V,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(V){this._state=V,this.onStateChangedObservable.notifyObservers(this._state)}_stop(V){let h=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),h?this.onTimerAbortedObservable.notifyObservers(V):this.onTimerEndedObservable.notifyObservers(V)}}var C=mV(12264),K=mV(12388),o=mV(14102);class n extends L.d{constructor(V){super(V),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",N.r),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",N.j,new o.d(-1))}_preparePendingTasks(V){const h=this.duration.getValue(V);if(h<0||isNaN(h)||!isFinite(h))return this._reportError(V,"Invalid duration in SetDelay block");if(V._getGlobalContextVariable("activeDelays",0)>=n.MaxParallelDelayCount)return this._reportError(V,"Max parallel delays reached");const mV=V._getGlobalContextVariable("lastDelayIndex",-1),t=V._getExecutionVariable(this,"pendingDelays",[]),L=V.configuration.zh,N=new k({timeout:1e3*h,contextObservable:L.onBeforeRenderObservable,onEnded:()=>this._onEnded(N,V)});N.start();const A=mV+1;this.lastDelayIndex.setValue(new o.d(A),V),V._setGlobalContextVariable("lastDelayIndex",A),t[A]=N,V._setExecutionVariable(this,"pendingDelays",t),this._updateGlobalTimers(V)}_cancelPendingTasks(V){const h=V._getExecutionVariable(this,"pendingDelays",[]);for(const mV of h)null===mV||void 0===mV||mV.dispose();V._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new o.d(-1),V),this._updateGlobalTimers(V)}_execute(V,h){h!==this.cancel?(this._preparePendingTasks(V),this.out._activateSignal(V)):this._cancelPendingTasks(V)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(V,h){const mV=h._getExecutionVariable(this,"pendingDelays",[]),t=mV.indexOf(V);-1!==t?mV.splice(t,1):C.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),h._removePendingBlock(this),this.done._activateSignal(h),this._updateGlobalTimers(h)}_updateGlobalTimers(V){const h=V._getExecutionVariable(this,"pendingDelays",[]),mV=V._getGlobalContextVariable("pendingDelays",[]);for(let t=0;t<h.length;t++){if(!h[t])continue;const V=h[t];mV[t]&&mV[t]!==V?C.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):mV[t]=V}V._setGlobalContextVariable("pendingDelays",mV)}}n.MaxParallelDelayCount=100,(0,K.i)("FlowGraphSetDelayBlock",n)}}]);