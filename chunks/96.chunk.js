"use strict";(self.rvold1i0ywi=self.rvold1i0ywi||[]).push([[96],{14493:(F,b,Q)=>{Q.r(b),Q.d(b,{FlowGraphSetDelayBlock:()=>K});var C,z=Q(12995),t=Q(12951),g=Q(11133);!function(F){F[F.INIT=0]="INIT",F[F.STARTED=1]="STARTED",F[F.ENDED=2]="ENDED"}(C||(C={}));class W{constructor(F){this.onEachCountObservable=new g.c,this.onTimerAbortedObservable=new g.c,this.onTimerEndedObservable=new g.c,this.onStateChangedObservable=new g.c,this._observer=null,this._breakOnNextTick=!1,this._tick=F=>{const b=Date.now();this._timer=b-this._startTime;const Q={startTime:this._startTime,currentTime:b,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,gC:F},C=this._breakOnNextTick||this._breakCondition(Q);C||this._timer>=this._timeToEnd?this._stop(Q,C):this.onEachCountObservable.notifyObservers(Q)},this._setState(0),this._contextObservable=F.contextObservable,this._observableParameters=F.observableParameters??{},this._breakCondition=F.breakCondition??(()=>!1),this._timeToEnd=F.timeout,F.onEnded&&this.onTimerEndedObservable.add(F.onEnded),F.NK&&this.onEachCountObservable.add(F.NK),F.onAborted&&this.onTimerAbortedObservable.add(F.onAborted)}set breakCondition(F){this._breakCondition=F}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let F=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=F,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(F){this._state=F,this.onStateChangedObservable.notifyObservers(this._state)}_stop(F){let b=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),b?this.onTimerAbortedObservable.notifyObservers(F):this.onTimerEndedObservable.notifyObservers(F)}}var Z=Q(11146),q=Q(11265),G=Q(12948);class K extends z.c{constructor(F){super(F),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",t.m),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",t.g,new G.b(-1))}_preparePendingTasks(F){const b=this.duration.getValue(F);if(b<0||isNaN(b)||!isFinite(b))return this._reportError(F,"Invalid duration in SetDelay block");if(F._getGlobalContextVariable("activeDelays",0)>=K.MaxParallelDelayCount)return this._reportError(F,"Max parallel delays reached");const Q=F._getGlobalContextVariable("lastDelayIndex",-1),C=F._getExecutionVariable(this,"pendingDelays",[]),z=F.configuration.ZQ,t=new W({timeout:1e3*b,contextObservable:z.onBeforeRenderObservable,onEnded:()=>this._onEnded(t,F)});t.start();const g=Q+1;this.lastDelayIndex.setValue(new G.b(g),F),F._setGlobalContextVariable("lastDelayIndex",g),C[g]=t,F._setExecutionVariable(this,"pendingDelays",C),this._updateGlobalTimers(F)}_cancelPendingTasks(F){const b=F._getExecutionVariable(this,"pendingDelays",[]);for(const Q of b)null===Q||void 0===Q||Q.dispose();F._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new G.b(-1),F),this._updateGlobalTimers(F)}_execute(F,b){b!==this.cancel?(this._preparePendingTasks(F),this.out._activateSignal(F)):this._cancelPendingTasks(F)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(F,b){const Q=b._getExecutionVariable(this,"pendingDelays",[]),C=Q.indexOf(F);-1!==C?Q.splice(C,1):Z.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),b._removePendingBlock(this),this.done._activateSignal(b),this._updateGlobalTimers(b)}_updateGlobalTimers(F){const b=F._getExecutionVariable(this,"pendingDelays",[]),Q=F._getGlobalContextVariable("pendingDelays",[]);for(let C=0;C<b.length;C++){if(!b[C])continue;const F=b[C];Q[C]&&Q[C]!==F?Z.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):Q[C]=F}F._setGlobalContextVariable("pendingDelays",Q)}}K.MaxParallelDelayCount=100,(0,q.g)("FlowGraphSetDelayBlock",K)}}]);