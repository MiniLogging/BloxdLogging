"use strict";(self.hwpa2z1pqte=self.hwpa2z1pqte||[]).push([[96],{16184:(h,R,l)=>{l.r(R),l.d(R,{FlowGraphSetDelayBlock:()=>c});var j,a=l(14640),D=l(14597),U=l(12696);!function(h){h[h.INIT=0]="INIT",h[h.STARTED=1]="STARTED",h[h.ENDED=2]="ENDED"}(j||(j={}));class F{constructor(h){this.onEachCountObservable=new U.d,this.onTimerAbortedObservable=new U.d,this.onTimerEndedObservable=new U.d,this.onStateChangedObservable=new U.d,this._observer=null,this._breakOnNextTick=!1,this._tick=h=>{const R=Date.now();this._timer=R-this._startTime;const l={startTime:this._startTime,currentTime:R,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,sl:h},j=this._breakOnNextTick||this._breakCondition(l);j||this._timer>=this._timeToEnd?this._stop(l,j):this.onEachCountObservable.notifyObservers(l)},this._setState(0),this._contextObservable=h.contextObservable,this._observableParameters=h.observableParameters??{},this._breakCondition=h.breakCondition??(()=>!1),this._timeToEnd=h.timeout,h.onEnded&&this.onTimerEndedObservable.add(h.onEnded),h.iu&&this.onEachCountObservable.add(h.iu),h.onAborted&&this.onTimerAbortedObservable.add(h.onAborted)}set breakCondition(h){this._breakCondition=h}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let h=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=h,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(h){this._state=h,this.onStateChangedObservable.notifyObservers(this._state)}_stop(h){let R=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),R?this.onTimerAbortedObservable.notifyObservers(h):this.onTimerEndedObservable.notifyObservers(h)}}var w=l(12711),mh=l(12852),u=l(14591);class c extends a.b{constructor(h){super(h),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",D.r),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",D.i,new u.c(-1))}_preparePendingTasks(h){const R=this.duration.getValue(h);if(R<0||isNaN(R)||!isFinite(R))return this._reportError(h,"Invalid duration in SetDelay block");if(h._getGlobalContextVariable("activeDelays",0)>=c.MaxParallelDelayCount)return this._reportError(h,"Max parallel delays reached");const l=h._getGlobalContextVariable("lastDelayIndex",-1),j=h._getExecutionVariable(this,"pendingDelays",[]),a=h.configuration.TR,D=new F({timeout:1e3*R,contextObservable:a.onBeforeRenderObservable,onEnded:()=>this._onEnded(D,h)});D.start();const U=l+1;this.lastDelayIndex.setValue(new u.c(U),h),h._setGlobalContextVariable("lastDelayIndex",U),j[U]=D,h._setExecutionVariable(this,"pendingDelays",j),this._updateGlobalTimers(h)}_cancelPendingTasks(h){const R=h._getExecutionVariable(this,"pendingDelays",[]);for(const l of R)null===l||void 0===l||l.dispose();h._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new u.c(-1),h),this._updateGlobalTimers(h)}_execute(h,R){R!==this.cancel?(this._preparePendingTasks(h),this.out._activateSignal(h)):this._cancelPendingTasks(h)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(h,R){const l=R._getExecutionVariable(this,"pendingDelays",[]),j=l.indexOf(h);-1!==j?l.splice(j,1):w.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),R._removePendingBlock(this),this.done._activateSignal(R),this._updateGlobalTimers(R)}_updateGlobalTimers(h){const R=h._getExecutionVariable(this,"pendingDelays",[]),l=h._getGlobalContextVariable("pendingDelays",[]);for(let j=0;j<R.length;j++){if(!R[j])continue;const h=R[j];l[j]&&l[j]!==h?w.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):l[j]=h}h._setGlobalContextVariable("pendingDelays",l)}}c.MaxParallelDelayCount=100,(0,mh.f)("FlowGraphSetDelayBlock",c)}}]);