"use strict";(self.zjjkhojdx1=self.zjjkhojdx1||[]).push([[96],{14429:(k,h,o)=>{o.r(h),o.d(h,{FlowGraphSetDelayBlock:()=>K});var x,I=o(12983),q=o(12936),Y=o(11082);!function(k){k[k.INIT=0]="INIT",k[k.STARTED=1]="STARTED",k[k.ENDED=2]="ENDED"}(x||(x={}));class J{constructor(k){this.onEachCountObservable=new Y.d,this.onTimerAbortedObservable=new Y.d,this.onTimerEndedObservable=new Y.d,this.onStateChangedObservable=new Y.d,this._observer=null,this._breakOnNextTick=!1,this._tick=k=>{const h=Date.now();this._timer=h-this._startTime;const o={startTime:this._startTime,currentTime:h,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,Bo:k},x=this._breakOnNextTick||this._breakCondition(o);x||this._timer>=this._timeToEnd?this._stop(o,x):this.onEachCountObservable.notifyObservers(o)},this._setState(0),this._contextObservable=k.contextObservable,this._observableParameters=k.observableParameters??{},this._breakCondition=k.breakCondition??(()=>!1),this._timeToEnd=k.timeout,k.onEnded&&this.onTimerEndedObservable.add(k.onEnded),k.mA&&this.onEachCountObservable.add(k.mA),k.onAborted&&this.onTimerAbortedObservable.add(k.onAborted)}set breakCondition(k){this._breakCondition=k}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let k=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=k,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(k){this._state=k,this.onStateChangedObservable.notifyObservers(this._state)}_stop(k){let h=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),h?this.onTimerAbortedObservable.notifyObservers(k):this.onTimerEndedObservable.notifyObservers(k)}}var G=o(11098),l=o(11199),A=o(12928);class K extends I.e{constructor(k){super(k),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",q.o),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",q.j,new A.c(-1))}_preparePendingTasks(k){const h=this.duration.getValue(k);if(h<0||isNaN(h)||!isFinite(h))return this._reportError(k,"Invalid duration in SetDelay block");if(k._getGlobalContextVariable("activeDelays",0)>=K.MaxParallelDelayCount)return this._reportError(k,"Max parallel delays reached");const o=k._getGlobalContextVariable("lastDelayIndex",-1),x=k._getExecutionVariable(this,"pendingDelays",[]),I=k.configuration.Fh,q=new J({timeout:1e3*h,contextObservable:I.onBeforeRenderObservable,onEnded:()=>this._onEnded(q,k)});q.start();const Y=o+1;this.lastDelayIndex.setValue(new A.c(Y),k),k._setGlobalContextVariable("lastDelayIndex",Y),x[Y]=q,k._setExecutionVariable(this,"pendingDelays",x),this._updateGlobalTimers(k)}_cancelPendingTasks(k){const h=k._getExecutionVariable(this,"pendingDelays",[]);for(const o of h)null===o||void 0===o||o.dispose();k._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new A.c(-1),k),this._updateGlobalTimers(k)}_execute(k,h){h!==this.cancel?(this._preparePendingTasks(k),this.out._activateSignal(k)):this._cancelPendingTasks(k)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(k,h){const o=h._getExecutionVariable(this,"pendingDelays",[]),x=o.indexOf(k);-1!==x?o.splice(x,1):G.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),h._removePendingBlock(this),this.done._activateSignal(h),this._updateGlobalTimers(h)}_updateGlobalTimers(k){const h=k._getExecutionVariable(this,"pendingDelays",[]),o=k._getGlobalContextVariable("pendingDelays",[]);for(let x=0;x<h.length;x++){if(!h[x])continue;const k=h[x];o[x]&&o[x]!==k?G.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):o[x]=k}k._setGlobalContextVariable("pendingDelays",o)}}K.MaxParallelDelayCount=100,(0,l.g)("FlowGraphSetDelayBlock",K)}}]);