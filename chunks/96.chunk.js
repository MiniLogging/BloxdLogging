"use strict";(self.agop5zpabxv=self.agop5zpabxv||[]).push([[96],{15543:(H,u,J)=>{J.r(u),J.d(u,{FlowGraphSetDelayBlock:()=>G});var O,U=J(14061),h=J(14018),w=J(12175);!function(H){H[H.INIT=0]="INIT",H[H.STARTED=1]="STARTED",H[H.ENDED=2]="ENDED"}(O||(O={}));class g{constructor(H){this.onEachCountObservable=new w.b,this.onTimerAbortedObservable=new w.b,this.onTimerEndedObservable=new w.b,this.onStateChangedObservable=new w.b,this._observer=null,this._breakOnNextTick=!1,this._tick=H=>{const u=Date.now();this._timer=u-this._startTime;const J={startTime:this._startTime,currentTime:u,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,lJ:H},O=this._breakOnNextTick||this._breakCondition(J);O||this._timer>=this._timeToEnd?this._stop(J,O):this.onEachCountObservable.notifyObservers(J)},this._setState(0),this._contextObservable=H.contextObservable,this._observableParameters=H.observableParameters??{},this._breakCondition=H.breakCondition??(()=>!1),this._timeToEnd=H.timeout,H.onEnded&&this.onTimerEndedObservable.add(H.onEnded),H.wP&&this.onEachCountObservable.add(H.wP),H.onAborted&&this.onTimerAbortedObservable.add(H.onAborted)}set breakCondition(H){this._breakCondition=H}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let H=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=H,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(H){this._state=H,this.onStateChangedObservable.notifyObservers(this._state)}_stop(H){let u=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),u?this.onTimerAbortedObservable.notifyObservers(H):this.onTimerEndedObservable.notifyObservers(H)}}var B=J(12185),b=J(12304),d=J(14011);class G extends U.d{constructor(H){super(H),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",h.z),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",h.j,new d.d(-1))}_preparePendingTasks(H){const u=this.duration.getValue(H);if(u<0||isNaN(u)||!isFinite(u))return this._reportError(H,"Invalid duration in SetDelay block");if(H._getGlobalContextVariable("activeDelays",0)>=G.MaxParallelDelayCount)return this._reportError(H,"Max parallel delays reached");const J=H._getGlobalContextVariable("lastDelayIndex",-1),O=H._getExecutionVariable(this,"pendingDelays",[]),U=H.configuration.pu,h=new g({timeout:1e3*u,contextObservable:U.onBeforeRenderObservable,onEnded:()=>this._onEnded(h,H)});h.start();const w=J+1;this.lastDelayIndex.setValue(new d.d(w),H),H._setGlobalContextVariable("lastDelayIndex",w),O[w]=h,H._setExecutionVariable(this,"pendingDelays",O),this._updateGlobalTimers(H)}_cancelPendingTasks(H){const u=H._getExecutionVariable(this,"pendingDelays",[]);for(const J of u)null===J||void 0===J||J.dispose();H._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new d.d(-1),H),this._updateGlobalTimers(H)}_execute(H,u){u!==this.cancel?(this._preparePendingTasks(H),this.out._activateSignal(H)):this._cancelPendingTasks(H)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(H,u){const J=u._getExecutionVariable(this,"pendingDelays",[]),O=J.indexOf(H);-1!==O?J.splice(O,1):B.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),u._removePendingBlock(this),this.done._activateSignal(u),this._updateGlobalTimers(u)}_updateGlobalTimers(H){const u=H._getExecutionVariable(this,"pendingDelays",[]),J=H._getGlobalContextVariable("pendingDelays",[]);for(let O=0;O<u.length;O++){if(!u[O])continue;const H=u[O];J[O]&&J[O]!==H?B.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):J[O]=H}H._setGlobalContextVariable("pendingDelays",J)}}G.MaxParallelDelayCount=100,(0,b.f)("FlowGraphSetDelayBlock",G)}}]);