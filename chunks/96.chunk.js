"use strict";(self["269hv5nclphh"]=self["269hv5nclphh"]||[]).push([[96],{15635:(E,H,d)=>{d.r(H),d.d(H,{FlowGraphSetDelayBlock:()=>M});var n,Z=d(14137),I=d(14103),g=d(12230);!function(E){E[E.INIT=0]="INIT",E[E.STARTED=1]="STARTED",E[E.ENDED=2]="ENDED"}(n||(n={}));class l{constructor(E){this.onEachCountObservable=new g.e,this.onTimerAbortedObservable=new g.e,this.onTimerEndedObservable=new g.e,this.onStateChangedObservable=new g.e,this._observer=null,this._breakOnNextTick=!1,this._tick=E=>{const H=Date.now();this._timer=H-this._startTime;const d={startTime:this._startTime,currentTime:H,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,Wd:E},n=this._breakOnNextTick||this._breakCondition(d);n||this._timer>=this._timeToEnd?this._stop(d,n):this.onEachCountObservable.notifyObservers(d)},this._setState(0),this._contextObservable=E.contextObservable,this._observableParameters=E.observableParameters??{},this._breakCondition=E.breakCondition??(()=>!1),this._timeToEnd=E.timeout,E.onEnded&&this.onTimerEndedObservable.add(E.onEnded),E.BS&&this.onEachCountObservable.add(E.BS),E.onAborted&&this.onTimerAbortedObservable.add(E.onAborted)}set breakCondition(E){this._breakCondition=E}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let E=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=E,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(E){this._state=E,this.onStateChangedObservable.notifyObservers(this._state)}_stop(E){let H=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),H?this.onTimerAbortedObservable.notifyObservers(E):this.onTimerEndedObservable.notifyObservers(E)}}var r=d(12237),t=d(12344),S=d(14095);class M extends Z.b{constructor(E){super(E),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",I.r),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",I.j,new S.c(-1))}_preparePendingTasks(E){const H=this.duration.getValue(E);if(H<0||isNaN(H)||!isFinite(H))return this._reportError(E,"Invalid duration in SetDelay block");if(E._getGlobalContextVariable("activeDelays",0)>=M.MaxParallelDelayCount)return this._reportError(E,"Max parallel delays reached");const d=E._getGlobalContextVariable("lastDelayIndex",-1),n=E._getExecutionVariable(this,"pendingDelays",[]),Z=E.configuration.QH,I=new l({timeout:1e3*H,contextObservable:Z.onBeforeRenderObservable,onEnded:()=>this._onEnded(I,E)});I.start();const g=d+1;this.lastDelayIndex.setValue(new S.c(g),E),E._setGlobalContextVariable("lastDelayIndex",g),n[g]=I,E._setExecutionVariable(this,"pendingDelays",n),this._updateGlobalTimers(E)}_cancelPendingTasks(E){const H=E._getExecutionVariable(this,"pendingDelays",[]);for(const d of H)null===d||void 0===d||d.dispose();E._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new S.c(-1),E),this._updateGlobalTimers(E)}_execute(E,H){H!==this.cancel?(this._preparePendingTasks(E),this.out._activateSignal(E)):this._cancelPendingTasks(E)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(E,H){const d=H._getExecutionVariable(this,"pendingDelays",[]),n=d.indexOf(E);-1!==n?d.splice(n,1):r.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),H._removePendingBlock(this),this.done._activateSignal(H),this._updateGlobalTimers(H)}_updateGlobalTimers(E){const H=E._getExecutionVariable(this,"pendingDelays",[]),d=E._getGlobalContextVariable("pendingDelays",[]);for(let n=0;n<H.length;n++){if(!H[n])continue;const E=H[n];d[n]&&d[n]!==E?r.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):d[n]=E}E._setGlobalContextVariable("pendingDelays",d)}}M.MaxParallelDelayCount=100,(0,t.e)("FlowGraphSetDelayBlock",M)}}]);