"use strict";(self["3gghkoft8x"]=self["3gghkoft8x"]||[]).push([[96],{15574:(y,S,I)=>{I.r(S),I.d(S,{FlowGraphSetDelayBlock:()=>K});var V,i=I(14075),A=I(14033),B=I(12133);!function(y){y[y.INIT=0]="INIT",y[y.STARTED=1]="STARTED",y[y.ENDED=2]="ENDED"}(V||(V={}));class d{constructor(y){this.onEachCountObservable=new B.b,this.onTimerAbortedObservable=new B.b,this.onTimerEndedObservable=new B.b,this.onStateChangedObservable=new B.b,this._observer=null,this._breakOnNextTick=!1,this._tick=y=>{const S=Date.now();this._timer=S-this._startTime;const I={startTime:this._startTime,currentTime:S,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,OI:y},V=this._breakOnNextTick||this._breakCondition(I);V||this._timer>=this._timeToEnd?this._stop(I,V):this.onEachCountObservable.notifyObservers(I)},this._setState(0),this._contextObservable=y.contextObservable,this._observableParameters=y.observableParameters??{},this._breakCondition=y.breakCondition??(()=>!1),this._timeToEnd=y.timeout,y.onEnded&&this.onTimerEndedObservable.add(y.onEnded),y.Hu&&this.onEachCountObservable.add(y.Hu),y.onAborted&&this.onTimerAbortedObservable.add(y.onAborted)}set breakCondition(y){this._breakCondition=y}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let y=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=y,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(y){this._state=y,this.onStateChangedObservable.notifyObservers(this._state)}_stop(y){let S=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),S?this.onTimerAbortedObservable.notifyObservers(y):this.onTimerEndedObservable.notifyObservers(y)}}var F=I(12151),J=I(12282),u=I(14029);class K extends i.e{constructor(y){super(y),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",A.t),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",A.i,new u.c(-1))}_preparePendingTasks(y){const S=this.duration.getValue(y);if(S<0||isNaN(S)||!isFinite(S))return this._reportError(y,"Invalid duration in SetDelay block");if(y._getGlobalContextVariable("activeDelays",0)>=K.MaxParallelDelayCount)return this._reportError(y,"Max parallel delays reached");const I=y._getGlobalContextVariable("lastDelayIndex",-1),V=y._getExecutionVariable(this,"pendingDelays",[]),i=y.configuration.mI,A=new d({timeout:1e3*S,contextObservable:i.onBeforeRenderObservable,onEnded:()=>this._onEnded(A,y)});A.start();const B=I+1;this.lastDelayIndex.setValue(new u.c(B),y),y._setGlobalContextVariable("lastDelayIndex",B),V[B]=A,y._setExecutionVariable(this,"pendingDelays",V),this._updateGlobalTimers(y)}_cancelPendingTasks(y){const S=y._getExecutionVariable(this,"pendingDelays",[]);for(const I of S)null===I||void 0===I||I.dispose();y._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new u.c(-1),y),this._updateGlobalTimers(y)}_execute(y,S){S!==this.cancel?(this._preparePendingTasks(y),this.out._activateSignal(y)):this._cancelPendingTasks(y)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(y,S){const I=S._getExecutionVariable(this,"pendingDelays",[]),V=I.indexOf(y);-1!==V?I.splice(V,1):F.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),S._removePendingBlock(this),this.done._activateSignal(S),this._updateGlobalTimers(S)}_updateGlobalTimers(y){const S=y._getExecutionVariable(this,"pendingDelays",[]),I=y._getGlobalContextVariable("pendingDelays",[]);for(let V=0;V<S.length;V++){if(!S[V])continue;const y=S[V];I[V]&&I[V]!==y?F.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):I[V]=y}y._setGlobalContextVariable("pendingDelays",I)}}K.MaxParallelDelayCount=100,(0,J.e)("FlowGraphSetDelayBlock",K)}}]);