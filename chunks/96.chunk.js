"use strict";(self.bjbkv7h3qsd=self.bjbkv7h3qsd||[]).push([[96],{14490:(G,A,j)=>{j.r(A),j.d(A,{FlowGraphSetDelayBlock:()=>H});var u,k=j(12920),B=j(12880),x=j(11050);!function(G){G[G.INIT=0]="INIT",G[G.STARTED=1]="STARTED",G[G.ENDED=2]="ENDED"}(u||(u={}));class s{constructor(G){this.onEachCountObservable=new x.b,this.onTimerAbortedObservable=new x.b,this.onTimerEndedObservable=new x.b,this.onStateChangedObservable=new x.b,this._observer=null,this._breakOnNextTick=!1,this._tick=G=>{const A=Date.now();this._timer=A-this._startTime;const j={startTime:this._startTime,currentTime:A,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,Sj:G},u=this._breakOnNextTick||this._breakCondition(j);u||this._timer>=this._timeToEnd?this._stop(j,u):this.onEachCountObservable.notifyObservers(j)},this._setState(0),this._contextObservable=G.contextObservable,this._observableParameters=G.observableParameters??{},this._breakCondition=G.breakCondition??(()=>!1),this._timeToEnd=G.timeout,G.onEnded&&this.onTimerEndedObservable.add(G.onEnded),G.eH&&this.onEachCountObservable.add(G.eH),G.onAborted&&this.onTimerAbortedObservable.add(G.onAborted)}set breakCondition(G){this._breakCondition=G}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let G=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=G,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(G){this._state=G,this.onStateChangedObservable.notifyObservers(this._state)}_stop(G){let A=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),A?this.onTimerAbortedObservable.notifyObservers(G):this.onTimerEndedObservable.notifyObservers(G)}}var O=j(11065),d=j(11181),h=j(12873);class H extends k.d{constructor(G){super(G),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",B.s),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",B.f,new h.d(-1))}_preparePendingTasks(G){const A=this.duration.getValue(G);if(A<0||isNaN(A)||!isFinite(A))return this._reportError(G,"Invalid duration in SetDelay block");if(G._getGlobalContextVariable("activeDelays",0)>=H.MaxParallelDelayCount)return this._reportError(G,"Max parallel delays reached");const j=G._getGlobalContextVariable("lastDelayIndex",-1),u=G._getExecutionVariable(this,"pendingDelays",[]),k=G.configuration.tA,B=new s({timeout:1e3*A,contextObservable:k.onBeforeRenderObservable,onEnded:()=>this._onEnded(B,G)});B.start();const x=j+1;this.lastDelayIndex.setValue(new h.d(x),G),G._setGlobalContextVariable("lastDelayIndex",x),u[x]=B,G._setExecutionVariable(this,"pendingDelays",u),this._updateGlobalTimers(G)}_cancelPendingTasks(G){const A=G._getExecutionVariable(this,"pendingDelays",[]);for(const j of A)null===j||void 0===j||j.dispose();G._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new h.d(-1),G),this._updateGlobalTimers(G)}_execute(G,A){A!==this.cancel?(this._preparePendingTasks(G),this.out._activateSignal(G)):this._cancelPendingTasks(G)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(G,A){const j=A._getExecutionVariable(this,"pendingDelays",[]),u=j.indexOf(G);-1!==u?j.splice(u,1):O.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),A._removePendingBlock(this),this.done._activateSignal(A),this._updateGlobalTimers(A)}_updateGlobalTimers(G){const A=G._getExecutionVariable(this,"pendingDelays",[]),j=G._getGlobalContextVariable("pendingDelays",[]);for(let u=0;u<A.length;u++){if(!A[u])continue;const G=A[u];j[u]&&j[u]!==G?O.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):j[u]=G}G._setGlobalContextVariable("pendingDelays",j)}}H.MaxParallelDelayCount=100,(0,d.h)("FlowGraphSetDelayBlock",H)}}]);