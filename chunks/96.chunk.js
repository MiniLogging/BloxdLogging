"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[96],{14385:(q,S,b)=>{b.r(S),b.d(S,{FlowGraphSetDelayBlock:()=>l});var z,C=b(12864),v=b(12839),U=b(10929);!function(q){q[q.INIT=0]="INIT",q[q.STARTED=1]="STARTED",q[q.ENDED=2]="ENDED"}(z||(z={}));class g{constructor(q){this.onEachCountObservable=new U.d,this.onTimerAbortedObservable=new U.d,this.onTimerEndedObservable=new U.d,this.onStateChangedObservable=new U.d,this._observer=null,this._breakOnNextTick=!1,this._tick=q=>{const S=Date.now();this._timer=S-this._startTime;const b={startTime:this._startTime,currentTime:S,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:q},z=this._breakOnNextTick||this._breakCondition(b);z||this._timer>=this._timeToEnd?this._stop(b,z):this.onEachCountObservable.notifyObservers(b)},this._setState(0),this._contextObservable=q.contextObservable,this._observableParameters=q.observableParameters??{},this._breakCondition=q.breakCondition??(()=>!1),this._timeToEnd=q.timeout,q.onEnded&&this.onTimerEndedObservable.add(q.onEnded),q.Cl&&this.onEachCountObservable.add(q.Cl),q.onAborted&&this.onTimerAbortedObservable.add(q.onAborted)}set breakCondition(q){this._breakCondition=q}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let q=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=q,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(q){this._state=q,this.onStateChangedObservable.notifyObservers(this._state)}_stop(q){let S=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),S?this.onTimerAbortedObservable.notifyObservers(q):this.onTimerEndedObservable.notifyObservers(q)}}var r=b(10943),I=b(11058),V=b(12836);class l extends C.c{constructor(q){super(q),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",v.o),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",v.h,new V.d(-1))}_preparePendingTasks(q){const S=this.duration.getValue(q);if(S<0||isNaN(S)||!isFinite(S))return this._reportError(q,"Invalid duration in SetDelay block");if(q._getGlobalContextVariable("activeDelays",0)>=l.MaxParallelDelayCount)return this._reportError(q,"Max parallel delays reached");const b=q._getGlobalContextVariable("lastDelayIndex",-1),z=q._getExecutionVariable(this,"pendingDelays",[]),C=q.configuration.GS,v=new g({timeout:1e3*S,contextObservable:C.onBeforeRenderObservable,onEnded:()=>this._onEnded(v,q)});v.start();const U=b+1;this.lastDelayIndex.setValue(new V.d(U),q),q._setGlobalContextVariable("lastDelayIndex",U),z[U]=v,q._setExecutionVariable(this,"pendingDelays",z),this._updateGlobalTimers(q)}_cancelPendingTasks(q){const S=q._getExecutionVariable(this,"pendingDelays",[]);for(const b of S)null===b||void 0===b||b.dispose();q._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new V.d(-1),q),this._updateGlobalTimers(q)}_execute(q,S){S!==this.cancel?(this._preparePendingTasks(q),this.out._activateSignal(q)):this._cancelPendingTasks(q)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(q,S){const b=S._getExecutionVariable(this,"pendingDelays",[]),z=b.indexOf(q);-1!==z?b.splice(z,1):r.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),S._removePendingBlock(this),this.done._activateSignal(S),this._updateGlobalTimers(S)}_updateGlobalTimers(q){const S=q._getExecutionVariable(this,"pendingDelays",[]),b=q._getGlobalContextVariable("pendingDelays",[]);for(let z=0;z<S.length;z++){if(!S[z])continue;const q=S[z];b[z]&&b[z]!==q?r.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):b[z]=q}q._setGlobalContextVariable("pendingDelays",b)}}l.MaxParallelDelayCount=100,(0,I.f)("FlowGraphSetDelayBlock",l)}}]);