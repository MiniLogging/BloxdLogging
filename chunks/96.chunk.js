"use strict";(self.jr1pmf6bwuf=self.jr1pmf6bwuf||[]).push([[96],{16224:(Y,c,h)=>{h.r(c),h.d(c,{FlowGraphSetDelayBlock:()=>q});var C,E=h(14499),N=h(14459),Q=h(12690);!function(Y){Y[Y.INIT=0]="INIT",Y[Y.STARTED=1]="STARTED",Y[Y.ENDED=2]="ENDED"}(C||(C={}));class b{constructor(Y){this.onEachCountObservable=new Q.c,this.onTimerAbortedObservable=new Q.c,this.onTimerEndedObservable=new Q.c,this.onStateChangedObservable=new Q.c,this._observer=null,this._breakOnNextTick=!1,this._tick=Y=>{const c=Date.now();this._timer=c-this._startTime;const h={startTime:this._startTime,currentTime:c,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,sC:Y},C=this._breakOnNextTick||this._breakCondition(h);C||this._timer>=this._timeToEnd?this._stop(h,C):this.onEachCountObservable.notifyObservers(h)},this._setState(0),this._contextObservable=Y.contextObservable,this._observableParameters=Y.observableParameters??{},this._breakCondition=Y.breakCondition??(()=>!1),this._timeToEnd=Y.timeout,Y.onEnded&&this.onTimerEndedObservable.add(Y.onEnded),Y.Ik&&this.onEachCountObservable.add(Y.Ik),Y.onAborted&&this.onTimerAbortedObservable.add(Y.onAborted)}set breakCondition(Y){this._breakCondition=Y}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let Y=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=Y,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(Y){this._state=Y,this.onStateChangedObservable.notifyObservers(this._state)}_stop(Y){let c=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),c?this.onTimerAbortedObservable.notifyObservers(Y):this.onTimerEndedObservable.notifyObservers(Y)}}var H=h(12700),w=h(12825),W=h(14450);class q extends E.d{constructor(Y){super(Y),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",N.n),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",N.h,new W.c(-1))}_preparePendingTasks(Y){const c=this.duration.getValue(Y);if(c<0||isNaN(c)||!isFinite(c))return this._reportError(Y,"Invalid duration in SetDelay block");if(Y._getGlobalContextVariable("activeDelays",0)>=q.MaxParallelDelayCount)return this._reportError(Y,"Max parallel delays reached");const h=Y._getGlobalContextVariable("lastDelayIndex",-1),C=Y._getExecutionVariable(this,"pendingDelays",[]),E=Y.configuration.wh,N=new b({timeout:1e3*c,contextObservable:E.onBeforeRenderObservable,onEnded:()=>this._onEnded(N,Y)});N.start();const Q=h+1;this.lastDelayIndex.setValue(new W.c(Q),Y),Y._setGlobalContextVariable("lastDelayIndex",Q),C[Q]=N,Y._setExecutionVariable(this,"pendingDelays",C),this._updateGlobalTimers(Y)}_cancelPendingTasks(Y){const c=Y._getExecutionVariable(this,"pendingDelays",[]);for(const h of c)null===h||void 0===h||h.dispose();Y._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new W.c(-1),Y),this._updateGlobalTimers(Y)}_execute(Y,c){c!==this.cancel?(this._preparePendingTasks(Y),this.out._activateSignal(Y)):this._cancelPendingTasks(Y)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(Y,c){const h=c._getExecutionVariable(this,"pendingDelays",[]),C=h.indexOf(Y);-1!==C?h.splice(C,1):H.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),c._removePendingBlock(this),this.done._activateSignal(c),this._updateGlobalTimers(c)}_updateGlobalTimers(Y){const c=Y._getExecutionVariable(this,"pendingDelays",[]),h=Y._getGlobalContextVariable("pendingDelays",[]);for(let C=0;C<c.length;C++){if(!c[C])continue;const Y=c[C];h[C]&&h[C]!==Y?H.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):h[C]=Y}Y._setGlobalContextVariable("pendingDelays",h)}}q.MaxParallelDelayCount=100,(0,w.e)("FlowGraphSetDelayBlock",q)}}]);