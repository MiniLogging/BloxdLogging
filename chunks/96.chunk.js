"use strict";(self.lfntwv94xlc=self.lfntwv94xlc||[]).push([[96],{14654:(m,S,h)=>{h.r(S),h.d(S,{FlowGraphSetDelayBlock:()=>I});var l,M=h(13100),O=h(13060),u=h(11161);!function(m){m[m.INIT=0]="INIT",m[m.STARTED=1]="STARTED",m[m.ENDED=2]="ENDED"}(l||(l={}));class b{constructor(m){this.onEachCountObservable=new u.e,this.onTimerAbortedObservable=new u.e,this.onTimerEndedObservable=new u.e,this.onStateChangedObservable=new u.e,this._observer=null,this._breakOnNextTick=!1,this._tick=m=>{const S=Date.now();this._timer=S-this._startTime;const h={startTime:this._startTime,currentTime:S,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,oh:m},l=this._breakOnNextTick||this._breakCondition(h);l||this._timer>=this._timeToEnd?this._stop(h,l):this.onEachCountObservable.notifyObservers(h)},this._setState(0),this._contextObservable=m.contextObservable,this._observableParameters=m.observableParameters??{},this._breakCondition=m.breakCondition??(()=>!1),this._timeToEnd=m.timeout,m.onEnded&&this.onTimerEndedObservable.add(m.onEnded),m.YI&&this.onEachCountObservable.add(m.YI),m.onAborted&&this.onTimerAbortedObservable.add(m.onAborted)}set breakCondition(m){this._breakCondition=m}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let m=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=m,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(m){this._state=m,this.onStateChangedObservable.notifyObservers(this._state)}_stop(m){let S=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),S?this.onTimerAbortedObservable.notifyObservers(m):this.onTimerEndedObservable.notifyObservers(m)}}var q=h(11173),Y=h(11293),V=h(13056);class I extends M.e{constructor(m){super(m),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",O.p),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",O.f,new V.b(-1))}_preparePendingTasks(m){const S=this.duration.getValue(m);if(S<0||isNaN(S)||!isFinite(S))return this._reportError(m,"Invalid duration in SetDelay block");if(m._getGlobalContextVariable("activeDelays",0)>=I.MaxParallelDelayCount)return this._reportError(m,"Max parallel delays reached");const h=m._getGlobalContextVariable("lastDelayIndex",-1),l=m._getExecutionVariable(this,"pendingDelays",[]),M=m.configuration.US,O=new b({timeout:1e3*S,contextObservable:M.onBeforeRenderObservable,onEnded:()=>this._onEnded(O,m)});O.start();const u=h+1;this.lastDelayIndex.setValue(new V.b(u),m),m._setGlobalContextVariable("lastDelayIndex",u),l[u]=O,m._setExecutionVariable(this,"pendingDelays",l),this._updateGlobalTimers(m)}_cancelPendingTasks(m){const S=m._getExecutionVariable(this,"pendingDelays",[]);for(const h of S)null===h||void 0===h||h.dispose();m._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new V.b(-1),m),this._updateGlobalTimers(m)}_execute(m,S){S!==this.cancel?(this._preparePendingTasks(m),this.out._activateSignal(m)):this._cancelPendingTasks(m)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(m,S){const h=S._getExecutionVariable(this,"pendingDelays",[]),l=h.indexOf(m);-1!==l?h.splice(l,1):q.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),S._removePendingBlock(this),this.done._activateSignal(S),this._updateGlobalTimers(S)}_updateGlobalTimers(m){const S=m._getExecutionVariable(this,"pendingDelays",[]),h=m._getGlobalContextVariable("pendingDelays",[]);for(let l=0;l<S.length;l++){if(!S[l])continue;const m=S[l];h[l]&&h[l]!==m?q.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):h[l]=m}m._setGlobalContextVariable("pendingDelays",h)}}I.MaxParallelDelayCount=100,(0,Y.e)("FlowGraphSetDelayBlock",I)}}]);