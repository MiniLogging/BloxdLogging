"use strict";(self.vb3rpbgyozo=self.vb3rpbgyozo||[]).push([[96],{16030:(q,I,l)=>{l.r(I),l.d(I,{FlowGraphSetDelayBlock:()=>r});var w,t=l(14486),O=l(14441),c=l(12573);!function(q){q[q.INIT=0]="INIT",q[q.STARTED=1]="STARTED",q[q.ENDED=2]="ENDED"}(w||(w={}));class a{constructor(q){this.onEachCountObservable=new c.d,this.onTimerAbortedObservable=new c.d,this.onTimerEndedObservable=new c.d,this.onStateChangedObservable=new c.d,this._observer=null,this._breakOnNextTick=!1,this._tick=q=>{const I=Date.now();this._timer=I-this._startTime;const l={startTime:this._startTime,currentTime:I,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,Tl:q},w=this._breakOnNextTick||this._breakCondition(l);w||this._timer>=this._timeToEnd?this._stop(l,w):this.onEachCountObservable.notifyObservers(l)},this._setState(0),this._contextObservable=q.contextObservable,this._observableParameters=q.observableParameters??{},this._breakCondition=q.breakCondition??(()=>!1),this._timeToEnd=q.timeout,q.onEnded&&this.onTimerEndedObservable.add(q.onEnded),q.rr&&this.onEachCountObservable.add(q.rr),q.onAborted&&this.onTimerAbortedObservable.add(q.onAborted)}set breakCondition(q){this._breakCondition=q}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let q=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=q,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(q){this._state=q,this.onStateChangedObservable.notifyObservers(this._state)}_stop(q){let I=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),I?this.onTimerAbortedObservable.notifyObservers(q):this.onTimerEndedObservable.notifyObservers(q)}}var F=l(12591),s=l(12711),Z=l(14437);class r extends t.c{constructor(q){super(q),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",O.v),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",O.k,new Z.d(-1))}_preparePendingTasks(q){const I=this.duration.getValue(q);if(I<0||isNaN(I)||!isFinite(I))return this._reportError(q,"Invalid duration in SetDelay block");if(q._getGlobalContextVariable("activeDelays",0)>=r.MaxParallelDelayCount)return this._reportError(q,"Max parallel delays reached");const l=q._getGlobalContextVariable("lastDelayIndex",-1),w=q._getExecutionVariable(this,"pendingDelays",[]),t=q.configuration.VI,O=new a({timeout:1e3*I,contextObservable:t.onBeforeRenderObservable,onEnded:()=>this._onEnded(O,q)});O.start();const c=l+1;this.lastDelayIndex.setValue(new Z.d(c),q),q._setGlobalContextVariable("lastDelayIndex",c),w[c]=O,q._setExecutionVariable(this,"pendingDelays",w),this._updateGlobalTimers(q)}_cancelPendingTasks(q){const I=q._getExecutionVariable(this,"pendingDelays",[]);for(const l of I)null===l||void 0===l||l.dispose();q._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new Z.d(-1),q),this._updateGlobalTimers(q)}_execute(q,I){I!==this.cancel?(this._preparePendingTasks(q),this.out._activateSignal(q)):this._cancelPendingTasks(q)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(q,I){const l=I._getExecutionVariable(this,"pendingDelays",[]),w=l.indexOf(q);-1!==w?l.splice(w,1):F.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),I._removePendingBlock(this),this.done._activateSignal(I),this._updateGlobalTimers(I)}_updateGlobalTimers(q){const I=q._getExecutionVariable(this,"pendingDelays",[]),l=q._getGlobalContextVariable("pendingDelays",[]);for(let w=0;w<I.length;w++){if(!I[w])continue;const q=I[w];l[w]&&l[w]!==q?F.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):l[w]=q}q._setGlobalContextVariable("pendingDelays",l)}}r.MaxParallelDelayCount=100,(0,s.e)("FlowGraphSetDelayBlock",r)}}]);