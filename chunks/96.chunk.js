"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[96],{14502:(Z,x,F)=>{F.r(x),F.d(x,{FlowGraphSetDelayBlock:()=>c});var u,G=F(13005),f=F(12954),Y=F(11e3);!function(Z){Z[Z.INIT=0]="INIT",Z[Z.STARTED=1]="STARTED",Z[Z.ENDED=2]="ENDED"}(u||(u={}));class j{constructor(Z){this.onEachCountObservable=new Y.b,this.onTimerAbortedObservable=new Y.b,this.onTimerEndedObservable=new Y.b,this.onStateChangedObservable=new Y.b,this._observer=null,this._breakOnNextTick=!1,this._tick=Z=>{const x=Date.now();this._timer=x-this._startTime;const F={startTime:this._startTime,currentTime:x,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:Z},u=this._breakOnNextTick||this._breakCondition(F);u||this._timer>=this._timeToEnd?this._stop(F,u):this.onEachCountObservable.notifyObservers(F)},this._setState(0),this._contextObservable=Z.contextObservable,this._observableParameters=Z.observableParameters??{},this._breakCondition=Z.breakCondition??(()=>!1),this._timeToEnd=Z.timeout,Z.onEnded&&this.onTimerEndedObservable.add(Z.onEnded),Z.Io&&this.onEachCountObservable.add(Z.Io),Z.onAborted&&this.onTimerAbortedObservable.add(Z.onAborted)}set breakCondition(Z){this._breakCondition=Z}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let Z=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=Z,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(Z){this._state=Z,this.onStateChangedObservable.notifyObservers(this._state)}_stop(Z){let x=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),x?this.onTimerAbortedObservable.notifyObservers(Z):this.onTimerEndedObservable.notifyObservers(Z)}}var d=F(11012),t=F(11136),o=F(12949);class c extends G.b{constructor(Z){super(Z),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",f.u),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",f.g,new o.d(-1))}_preparePendingTasks(Z){const x=this.duration.getValue(Z);if(x<0||isNaN(x)||!isFinite(x))return this._reportError(Z,"Invalid duration in SetDelay block");if(Z._getGlobalContextVariable("activeDelays",0)>=c.MaxParallelDelayCount)return this._reportError(Z,"Max parallel delays reached");const F=Z._getGlobalContextVariable("lastDelayIndex",-1),u=Z._getExecutionVariable(this,"pendingDelays",[]),G=Z.configuration.mx,f=new j({timeout:1e3*x,contextObservable:G.onBeforeRenderObservable,onEnded:()=>this._onEnded(f,Z)});f.start();const Y=F+1;this.lastDelayIndex.setValue(new o.d(Y),Z),Z._setGlobalContextVariable("lastDelayIndex",Y),u[Y]=f,Z._setExecutionVariable(this,"pendingDelays",u),this._updateGlobalTimers(Z)}_cancelPendingTasks(Z){const x=Z._getExecutionVariable(this,"pendingDelays",[]);for(const F of x)null===F||void 0===F||F.dispose();Z._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new o.d(-1),Z),this._updateGlobalTimers(Z)}_execute(Z,x){x!==this.cancel?(this._preparePendingTasks(Z),this.out._activateSignal(Z)):this._cancelPendingTasks(Z)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(Z,x){const F=x._getExecutionVariable(this,"pendingDelays",[]),u=F.indexOf(Z);-1!==u?F.splice(u,1):d.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),x._removePendingBlock(this),this.done._activateSignal(x),this._updateGlobalTimers(x)}_updateGlobalTimers(Z){const x=Z._getExecutionVariable(this,"pendingDelays",[]),F=Z._getGlobalContextVariable("pendingDelays",[]);for(let u=0;u<x.length;u++){if(!x[u])continue;const Z=x[u];F[u]&&F[u]!==Z?d.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):F[u]=Z}Z._setGlobalContextVariable("pendingDelays",F)}}c.MaxParallelDelayCount=100,(0,t.g)("FlowGraphSetDelayBlock",c)}}]);