"use strict";(self.qcdfysujsyf=self.qcdfysujsyf||[]).push([[96],{15914:(K,A,T)=>{T.r(A),T.d(A,{FlowGraphSetDelayBlock:()=>Z});var G,B=T(14288),L=T(14237),f=T(12534);!function(K){K[K.INIT=0]="INIT",K[K.STARTED=1]="STARTED",K[K.ENDED=2]="ENDED"}(G||(G={}));class O{constructor(K){this.onEachCountObservable=new f.e,this.onTimerAbortedObservable=new f.e,this.onTimerEndedObservable=new f.e,this.onStateChangedObservable=new f.e,this._observer=null,this._breakOnNextTick=!1,this._tick=K=>{const A=Date.now();this._timer=A-this._startTime;const T={startTime:this._startTime,currentTime:A,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,PT:K},G=this._breakOnNextTick||this._breakCondition(T);G||this._timer>=this._timeToEnd?this._stop(T,G):this.onEachCountObservable.notifyObservers(T)},this._setState(0),this._contextObservable=K.contextObservable,this._observableParameters=K.observableParameters??{},this._breakCondition=K.breakCondition??(()=>!1),this._timeToEnd=K.timeout,K.onEnded&&this.onTimerEndedObservable.add(K.onEnded),K.LZ&&this.onEachCountObservable.add(K.LZ),K.onAborted&&this.onTimerAbortedObservable.add(K.onAborted)}set breakCondition(K){this._breakCondition=K}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let K=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=K,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(K){this._state=K,this.onStateChangedObservable.notifyObservers(this._state)}_stop(K){let A=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),A?this.onTimerAbortedObservable.notifyObservers(K):this.onTimerEndedObservable.notifyObservers(K)}}var C=T(12548),Q=T(12651),Y=T(14229);class Z extends B.e{constructor(K){super(K),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",L.q),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",L.g,new Y.e(-1))}_preparePendingTasks(K){const A=this.duration.getValue(K);if(A<0||isNaN(A)||!isFinite(A))return this._reportError(K,"Invalid duration in SetDelay block");if(K._getGlobalContextVariable("activeDelays",0)>=Z.MaxParallelDelayCount)return this._reportError(K,"Max parallel delays reached");const T=K._getGlobalContextVariable("lastDelayIndex",-1),G=K._getExecutionVariable(this,"pendingDelays",[]),B=K.configuration.dA,L=new O({timeout:1e3*A,contextObservable:B.onBeforeRenderObservable,onEnded:()=>this._onEnded(L,K)});L.start();const f=T+1;this.lastDelayIndex.setValue(new Y.e(f),K),K._setGlobalContextVariable("lastDelayIndex",f),G[f]=L,K._setExecutionVariable(this,"pendingDelays",G),this._updateGlobalTimers(K)}_cancelPendingTasks(K){const A=K._getExecutionVariable(this,"pendingDelays",[]);for(const T of A)null===T||void 0===T||T.dispose();K._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new Y.e(-1),K),this._updateGlobalTimers(K)}_execute(K,A){A!==this.cancel?(this._preparePendingTasks(K),this.out._activateSignal(K)):this._cancelPendingTasks(K)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(K,A){const T=A._getExecutionVariable(this,"pendingDelays",[]),G=T.indexOf(K);-1!==G?T.splice(G,1):C.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),A._removePendingBlock(this),this.done._activateSignal(A),this._updateGlobalTimers(A)}_updateGlobalTimers(K){const A=K._getExecutionVariable(this,"pendingDelays",[]),T=K._getGlobalContextVariable("pendingDelays",[]);for(let G=0;G<A.length;G++){if(!A[G])continue;const K=A[G];T[G]&&T[G]!==K?C.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):T[G]=K}K._setGlobalContextVariable("pendingDelays",T)}}Z.MaxParallelDelayCount=100,(0,Q.c)("FlowGraphSetDelayBlock",Z)}}]);