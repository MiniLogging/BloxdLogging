"use strict";(self.a14qw1h7fq=self.a14qw1h7fq||[]).push([[96],{14420:(R,J,B)=>{B.r(J),B.d(J,{FlowGraphSetDelayBlock:()=>l});var Q,h=B(12943),y=B(12894),N=B(11032);!function(R){R[R.INIT=0]="INIT",R[R.STARTED=1]="STARTED",R[R.ENDED=2]="ENDED"}(Q||(Q={}));class r{constructor(R){this.onEachCountObservable=new N.e,this.onTimerAbortedObservable=new N.e,this.onTimerEndedObservable=new N.e,this.onStateChangedObservable=new N.e,this._observer=null,this._breakOnNextTick=!1,this._tick=R=>{const J=Date.now();this._timer=J-this._startTime;const B={startTime:this._startTime,currentTime:J,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,OB:R},Q=this._breakOnNextTick||this._breakCondition(B);Q||this._timer>=this._timeToEnd?this._stop(B,Q):this.onEachCountObservable.notifyObservers(B)},this._setState(0),this._contextObservable=R.contextObservable,this._observableParameters=R.observableParameters??{},this._breakCondition=R.breakCondition??(()=>!1),this._timeToEnd=R.timeout,R.onEnded&&this.onTimerEndedObservable.add(R.onEnded),R.Ql&&this.onEachCountObservable.add(R.Ql),R.onAborted&&this.onTimerAbortedObservable.add(R.onAborted)}set breakCondition(R){this._breakCondition=R}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let R=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=R,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(R){this._state=R,this.onStateChangedObservable.notifyObservers(this._state)}_stop(R){let J=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),J?this.onTimerAbortedObservable.notifyObservers(R):this.onTimerEndedObservable.notifyObservers(R)}}var q=B(11043),e=B(11142),D=B(12892);class l extends h.c{constructor(R){super(R),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",y.t),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",y.k,new D.d(-1))}_preparePendingTasks(R){const J=this.duration.getValue(R);if(J<0||isNaN(J)||!isFinite(J))return this._reportError(R,"Invalid duration in SetDelay block");if(R._getGlobalContextVariable("activeDelays",0)>=l.MaxParallelDelayCount)return this._reportError(R,"Max parallel delays reached");const B=R._getGlobalContextVariable("lastDelayIndex",-1),Q=R._getExecutionVariable(this,"pendingDelays",[]),h=R.configuration.AJ,y=new r({timeout:1e3*J,contextObservable:h.onBeforeRenderObservable,onEnded:()=>this._onEnded(y,R)});y.start();const N=B+1;this.lastDelayIndex.setValue(new D.d(N),R),R._setGlobalContextVariable("lastDelayIndex",N),Q[N]=y,R._setExecutionVariable(this,"pendingDelays",Q),this._updateGlobalTimers(R)}_cancelPendingTasks(R){const J=R._getExecutionVariable(this,"pendingDelays",[]);for(const B of J)null===B||void 0===B||B.dispose();R._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new D.d(-1),R),this._updateGlobalTimers(R)}_execute(R,J){J!==this.cancel?(this._preparePendingTasks(R),this.out._activateSignal(R)):this._cancelPendingTasks(R)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(R,J){const B=J._getExecutionVariable(this,"pendingDelays",[]),Q=B.indexOf(R);-1!==Q?B.splice(Q,1):q.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),J._removePendingBlock(this),this.done._activateSignal(J),this._updateGlobalTimers(J)}_updateGlobalTimers(R){const J=R._getExecutionVariable(this,"pendingDelays",[]),B=R._getGlobalContextVariable("pendingDelays",[]);for(let Q=0;Q<J.length;Q++){if(!J[Q])continue;const R=J[Q];B[Q]&&B[Q]!==R?q.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):B[Q]=R}R._setGlobalContextVariable("pendingDelays",B)}}l.MaxParallelDelayCount=100,(0,e.h)("FlowGraphSetDelayBlock",l)}}]);