"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[96],{14438:(B,I,C)=>{C.r(I),C.d(I,{FlowGraphSetDelayBlock:()=>R});var M,x=C(12950),y=C(12901),f=C(11022);!function(B){B[B.INIT=0]="INIT",B[B.STARTED=1]="STARTED",B[B.ENDED=2]="ENDED"}(M||(M={}));class L{constructor(B){this.onEachCountObservable=new f.e,this.onTimerAbortedObservable=new f.e,this.onTimerEndedObservable=new f.e,this.onStateChangedObservable=new f.e,this._observer=null,this._breakOnNextTick=!1,this._tick=B=>{const I=Date.now();this._timer=I-this._startTime;const C={startTime:this._startTime,currentTime:I,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:B},M=this._breakOnNextTick||this._breakCondition(C);M||this._timer>=this._timeToEnd?this._stop(C,M):this.onEachCountObservable.notifyObservers(C)},this._setState(0),this._contextObservable=B.contextObservable,this._observableParameters=B.observableParameters??{},this._breakCondition=B.breakCondition??(()=>!1),this._timeToEnd=B.timeout,B.onEnded&&this.onTimerEndedObservable.add(B.onEnded),B.eR&&this.onEachCountObservable.add(B.eR),B.onAborted&&this.onTimerAbortedObservable.add(B.onAborted)}set breakCondition(B){this._breakCondition=B}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let B=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=B,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(B){this._state=B,this.onStateChangedObservable.notifyObservers(this._state)}_stop(B){let I=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),I?this.onTimerAbortedObservable.notifyObservers(B):this.onTimerEndedObservable.notifyObservers(B)}}var e=C(11027),g=C(11149),N=C(12895);class R extends x.b{constructor(B){super(B),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",y.m),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",y.f,new N.b(-1))}_preparePendingTasks(B){const I=this.duration.getValue(B);if(I<0||isNaN(I)||!isFinite(I))return this._reportError(B,"Invalid duration in SetDelay block");if(B._getGlobalContextVariable("activeDelays",0)>=R.MaxParallelDelayCount)return this._reportError(B,"Max parallel delays reached");const C=B._getGlobalContextVariable("lastDelayIndex",-1),M=B._getExecutionVariable(this,"pendingDelays",[]),x=B.configuration.kI,y=new L({timeout:1e3*I,contextObservable:x.onBeforeRenderObservable,onEnded:()=>this._onEnded(y,B)});y.start();const f=C+1;this.lastDelayIndex.setValue(new N.b(f),B),B._setGlobalContextVariable("lastDelayIndex",f),M[f]=y,B._setExecutionVariable(this,"pendingDelays",M),this._updateGlobalTimers(B)}_cancelPendingTasks(B){const I=B._getExecutionVariable(this,"pendingDelays",[]);for(const C of I)null===C||void 0===C||C.dispose();B._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new N.b(-1),B),this._updateGlobalTimers(B)}_execute(B,I){I!==this.cancel?(this._preparePendingTasks(B),this.out._activateSignal(B)):this._cancelPendingTasks(B)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(B,I){const C=I._getExecutionVariable(this,"pendingDelays",[]),M=C.indexOf(B);-1!==M?C.splice(M,1):e.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),I._removePendingBlock(this),this.done._activateSignal(I),this._updateGlobalTimers(I)}_updateGlobalTimers(B){const I=B._getExecutionVariable(this,"pendingDelays",[]),C=B._getGlobalContextVariable("pendingDelays",[]);for(let M=0;M<I.length;M++){if(!I[M])continue;const B=I[M];C[M]&&C[M]!==B?e.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):C[M]=B}B._setGlobalContextVariable("pendingDelays",C)}}R.MaxParallelDelayCount=100,(0,g.h)("FlowGraphSetDelayBlock",R)}}]);