"use strict";(self.xeuzlpp225k=self.xeuzlpp225k||[]).push([[96],{14564:(k,Q,i)=>{i.r(Q),i.d(Q,{FlowGraphSetDelayBlock:()=>G});var Z,U=i(13105),C=i(13064),B=i(11122);!function(k){k[k.INIT=0]="INIT",k[k.STARTED=1]="STARTED",k[k.ENDED=2]="ENDED"}(Z||(Z={}));class o{constructor(k){this.onEachCountObservable=new B.c,this.onTimerAbortedObservable=new B.c,this.onTimerEndedObservable=new B.c,this.onStateChangedObservable=new B.c,this._observer=null,this._breakOnNextTick=!1,this._tick=k=>{const Q=Date.now();this._timer=Q-this._startTime;const i={startTime:this._startTime,currentTime:Q,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,li:k},Z=this._breakOnNextTick||this._breakCondition(i);Z||this._timer>=this._timeToEnd?this._stop(i,Z):this.onEachCountObservable.notifyObservers(i)},this._setState(0),this._contextObservable=k.contextObservable,this._observableParameters=k.observableParameters??{},this._breakCondition=k.breakCondition??(()=>!1),this._timeToEnd=k.timeout,k.onEnded&&this.onTimerEndedObservable.add(k.onEnded),k.pJ&&this.onEachCountObservable.add(k.pJ),k.onAborted&&this.onTimerAbortedObservable.add(k.onAborted)}set breakCondition(k){this._breakCondition=k}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let k=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=k,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(k){this._state=k,this.onStateChangedObservable.notifyObservers(this._state)}_stop(k){let Q=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),Q?this.onTimerAbortedObservable.notifyObservers(k):this.onTimerEndedObservable.notifyObservers(k)}}var m=i(11134),O=i(11253),J=i(13060);class G extends U.d{constructor(k){super(k),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",C.o),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",C.h,new J.e(-1))}_preparePendingTasks(k){const Q=this.duration.getValue(k);if(Q<0||isNaN(Q)||!isFinite(Q))return this._reportError(k,"Invalid duration in SetDelay block");if(k._getGlobalContextVariable("activeDelays",0)>=G.MaxParallelDelayCount)return this._reportError(k,"Max parallel delays reached");const i=k._getGlobalContextVariable("lastDelayIndex",-1),Z=k._getExecutionVariable(this,"pendingDelays",[]),U=k.configuration.lQ,C=new o({timeout:1e3*Q,contextObservable:U.onBeforeRenderObservable,onEnded:()=>this._onEnded(C,k)});C.start();const B=i+1;this.lastDelayIndex.setValue(new J.e(B),k),k._setGlobalContextVariable("lastDelayIndex",B),Z[B]=C,k._setExecutionVariable(this,"pendingDelays",Z),this._updateGlobalTimers(k)}_cancelPendingTasks(k){const Q=k._getExecutionVariable(this,"pendingDelays",[]);for(const i of Q)null===i||void 0===i||i.dispose();k._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new J.e(-1),k),this._updateGlobalTimers(k)}_execute(k,Q){Q!==this.cancel?(this._preparePendingTasks(k),this.out._activateSignal(k)):this._cancelPendingTasks(k)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(k,Q){const i=Q._getExecutionVariable(this,"pendingDelays",[]),Z=i.indexOf(k);-1!==Z?i.splice(Z,1):m.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),Q._removePendingBlock(this),this.done._activateSignal(Q),this._updateGlobalTimers(Q)}_updateGlobalTimers(k){const Q=k._getExecutionVariable(this,"pendingDelays",[]),i=k._getGlobalContextVariable("pendingDelays",[]);for(let Z=0;Z<Q.length;Z++){if(!Q[Z])continue;const k=Q[Z];i[Z]&&i[Z]!==k?m.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):i[Z]=k}k._setGlobalContextVariable("pendingDelays",i)}}G.MaxParallelDelayCount=100,(0,O.e)("FlowGraphSetDelayBlock",G)}}]);