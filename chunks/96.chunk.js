"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[96],{14440:(P,f,Y)=>{Y.r(f),Y.d(f,{FlowGraphSetDelayBlock:()=>y});var C,q=Y(12970),m=Y(12917),L=Y(11018);!function(P){P[P.INIT=0]="INIT",P[P.STARTED=1]="STARTED",P[P.ENDED=2]="ENDED"}(C||(C={}));class o{constructor(P){this.onEachCountObservable=new L.e,this.onTimerAbortedObservable=new L.e,this.onTimerEndedObservable=new L.e,this.onStateChangedObservable=new L.e,this._observer=null,this._breakOnNextTick=!1,this._tick=P=>{const f=Date.now();this._timer=f-this._startTime;const Y={startTime:this._startTime,currentTime:f,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:P},C=this._breakOnNextTick||this._breakCondition(Y);C||this._timer>=this._timeToEnd?this._stop(Y,C):this.onEachCountObservable.notifyObservers(Y)},this._setState(0),this._contextObservable=P.contextObservable,this._observableParameters=P.observableParameters??{},this._breakCondition=P.breakCondition??(()=>!1),this._timeToEnd=P.timeout,P.onEnded&&this.onTimerEndedObservable.add(P.onEnded),P.zR&&this.onEachCountObservable.add(P.zR),P.onAborted&&this.onTimerAbortedObservable.add(P.onAborted)}set breakCondition(P){this._breakCondition=P}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let P=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=P,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(P){this._state=P,this.onStateChangedObservable.notifyObservers(this._state)}_stop(P){let f=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),f?this.onTimerAbortedObservable.notifyObservers(P):this.onTimerEndedObservable.notifyObservers(P)}}var w=Y(11025),d=Y(11134),R=Y(12908);class y extends q.c{constructor(P){super(P),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",m.o),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",m.f,new R.c(-1))}_preparePendingTasks(P){const f=this.duration.getValue(P);if(f<0||isNaN(f)||!isFinite(f))return this._reportError(P,"Invalid duration in SetDelay block");if(P._getGlobalContextVariable("activeDelays",0)>=y.MaxParallelDelayCount)return this._reportError(P,"Max parallel delays reached");const Y=P._getGlobalContextVariable("lastDelayIndex",-1),C=P._getExecutionVariable(this,"pendingDelays",[]),q=P.configuration.lf,m=new o({timeout:1e3*f,contextObservable:q.onBeforeRenderObservable,onEnded:()=>this._onEnded(m,P)});m.start();const L=Y+1;this.lastDelayIndex.setValue(new R.c(L),P),P._setGlobalContextVariable("lastDelayIndex",L),C[L]=m,P._setExecutionVariable(this,"pendingDelays",C),this._updateGlobalTimers(P)}_cancelPendingTasks(P){const f=P._getExecutionVariable(this,"pendingDelays",[]);for(const Y of f)null===Y||void 0===Y||Y.dispose();P._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new R.c(-1),P),this._updateGlobalTimers(P)}_execute(P,f){f!==this.cancel?(this._preparePendingTasks(P),this.out._activateSignal(P)):this._cancelPendingTasks(P)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(P,f){const Y=f._getExecutionVariable(this,"pendingDelays",[]),C=Y.indexOf(P);-1!==C?Y.splice(C,1):w.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),f._removePendingBlock(this),this.done._activateSignal(f),this._updateGlobalTimers(f)}_updateGlobalTimers(P){const f=P._getExecutionVariable(this,"pendingDelays",[]),Y=P._getGlobalContextVariable("pendingDelays",[]);for(let C=0;C<f.length;C++){if(!f[C])continue;const P=f[C];Y[C]&&Y[C]!==P?w.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):Y[C]=P}P._setGlobalContextVariable("pendingDelays",Y)}}y.MaxParallelDelayCount=100,(0,d.d)("FlowGraphSetDelayBlock",y)}}]);