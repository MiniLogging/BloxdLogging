"use strict";(self.dwifukwnts=self.dwifukwnts||[]).push([[96],{14865:(U,X,b)=>{b.r(X),b.d(X,{FlowGraphSetDelayBlock:()=>R});var F,E=b(13330),w=b(13281),Q=b(11392);!function(U){U[U.INIT=0]="INIT",U[U.STARTED=1]="STARTED",U[U.ENDED=2]="ENDED"}(F||(F={}));class z{constructor(U){this.onEachCountObservable=new Q.e,this.onTimerAbortedObservable=new Q.e,this.onTimerEndedObservable=new Q.e,this.onStateChangedObservable=new Q.e,this._observer=null,this._breakOnNextTick=!1,this._tick=U=>{const X=Date.now();this._timer=X-this._startTime;const b={startTime:this._startTime,currentTime:X,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,pF:U},F=this._breakOnNextTick||this._breakCondition(b);F||this._timer>=this._timeToEnd?this._stop(b,F):this.onEachCountObservable.notifyObservers(b)},this._setState(0),this._contextObservable=U.contextObservable,this._observableParameters=U.observableParameters??{},this._breakCondition=U.breakCondition??(()=>!1),this._timeToEnd=U.timeout,U.onEnded&&this.onTimerEndedObservable.add(U.onEnded),U.MS&&this.onEachCountObservable.add(U.MS),U.onAborted&&this.onTimerAbortedObservable.add(U.onAborted)}set breakCondition(U){this._breakCondition=U}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let U=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=U,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(U){this._state=U,this.onStateChangedObservable.notifyObservers(this._state)}_stop(U){let X=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),X?this.onTimerAbortedObservable.notifyObservers(U):this.onTimerEndedObservable.notifyObservers(U)}}var q=b(11408),p=b(11551),S=b(13276);class R extends E.e{constructor(U){super(U),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",w.s),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",w.h,new S.e(-1))}_preparePendingTasks(U){const X=this.duration.getValue(U);if(X<0||isNaN(X)||!isFinite(X))return this._reportError(U,"Invalid duration in SetDelay block");if(U._getGlobalContextVariable("activeDelays",0)>=R.MaxParallelDelayCount)return this._reportError(U,"Max parallel delays reached");const b=U._getGlobalContextVariable("lastDelayIndex",-1),F=U._getExecutionVariable(this,"pendingDelays",[]),E=U.configuration.xX,w=new z({timeout:1e3*X,contextObservable:E.onBeforeRenderObservable,onEnded:()=>this._onEnded(w,U)});w.start();const Q=b+1;this.lastDelayIndex.setValue(new S.e(Q),U),U._setGlobalContextVariable("lastDelayIndex",Q),F[Q]=w,U._setExecutionVariable(this,"pendingDelays",F),this._updateGlobalTimers(U)}_cancelPendingTasks(U){const X=U._getExecutionVariable(this,"pendingDelays",[]);for(const b of X)null===b||void 0===b||b.dispose();U._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new S.e(-1),U),this._updateGlobalTimers(U)}_execute(U,X){X!==this.cancel?(this._preparePendingTasks(U),this.out._activateSignal(U)):this._cancelPendingTasks(U)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(U,X){const b=X._getExecutionVariable(this,"pendingDelays",[]),F=b.indexOf(U);-1!==F?b.splice(F,1):q.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),X._removePendingBlock(this),this.done._activateSignal(X),this._updateGlobalTimers(X)}_updateGlobalTimers(U){const X=U._getExecutionVariable(this,"pendingDelays",[]),b=U._getGlobalContextVariable("pendingDelays",[]);for(let F=0;F<X.length;F++){if(!X[F])continue;const U=X[F];b[F]&&b[F]!==U?q.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):b[F]=U}U._setGlobalContextVariable("pendingDelays",b)}}R.MaxParallelDelayCount=100,(0,p.f)("FlowGraphSetDelayBlock",R)}}]);