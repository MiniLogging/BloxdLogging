"use strict";(self.fkqm0epoq5=self.fkqm0epoq5||[]).push([[96],{14891:(D,l,G)=>{G.r(l),G.d(l,{FlowGraphSetDelayBlock:()=>g});var V,N=G(13463),M=G(13423),b=G(11532);!function(D){D[D.INIT=0]="INIT",D[D.STARTED=1]="STARTED",D[D.ENDED=2]="ENDED"}(V||(V={}));class X{constructor(D){this.onEachCountObservable=new b.e,this.onTimerAbortedObservable=new b.e,this.onTimerEndedObservable=new b.e,this.onStateChangedObservable=new b.e,this._observer=null,this._breakOnNextTick=!1,this._tick=D=>{const l=Date.now();this._timer=l-this._startTime;const G={startTime:this._startTime,currentTime:l,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,FG:D},V=this._breakOnNextTick||this._breakCondition(G);V||this._timer>=this._timeToEnd?this._stop(G,V):this.onEachCountObservable.notifyObservers(G)},this._setState(0),this._contextObservable=D.contextObservable,this._observableParameters=D.observableParameters??{},this._breakCondition=D.breakCondition??(()=>!1),this._timeToEnd=D.timeout,D.onEnded&&this.onTimerEndedObservable.add(D.onEnded),D.an&&this.onEachCountObservable.add(D.an),D.onAborted&&this.onTimerAbortedObservable.add(D.onAborted)}set breakCondition(D){this._breakCondition=D}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let D=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=D,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(D){this._state=D,this.onStateChangedObservable.notifyObservers(this._state)}_stop(D){let l=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),l?this.onTimerAbortedObservable.notifyObservers(D):this.onTimerEndedObservable.notifyObservers(D)}}var t=G(11546),R=G(11667),n=G(13418);class g extends N.d{constructor(D){super(D),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",M.o),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",M.i,new n.d(-1))}_preparePendingTasks(D){const l=this.duration.getValue(D);if(l<0||isNaN(l)||!isFinite(l))return this._reportError(D,"Invalid duration in SetDelay block");if(D._getGlobalContextVariable("activeDelays",0)>=g.MaxParallelDelayCount)return this._reportError(D,"Max parallel delays reached");const G=D._getGlobalContextVariable("lastDelayIndex",-1),V=D._getExecutionVariable(this,"pendingDelays",[]),N=D.configuration.dl,M=new X({timeout:1e3*l,contextObservable:N.onBeforeRenderObservable,onEnded:()=>this._onEnded(M,D)});M.start();const b=G+1;this.lastDelayIndex.setValue(new n.d(b),D),D._setGlobalContextVariable("lastDelayIndex",b),V[b]=M,D._setExecutionVariable(this,"pendingDelays",V),this._updateGlobalTimers(D)}_cancelPendingTasks(D){const l=D._getExecutionVariable(this,"pendingDelays",[]);for(const G of l)null===G||void 0===G||G.dispose();D._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new n.d(-1),D),this._updateGlobalTimers(D)}_execute(D,l){l!==this.cancel?(this._preparePendingTasks(D),this.out._activateSignal(D)):this._cancelPendingTasks(D)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(D,l){const G=l._getExecutionVariable(this,"pendingDelays",[]),V=G.indexOf(D);-1!==V?G.splice(V,1):t.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),l._removePendingBlock(this),this.done._activateSignal(l),this._updateGlobalTimers(l)}_updateGlobalTimers(D){const l=D._getExecutionVariable(this,"pendingDelays",[]),G=D._getGlobalContextVariable("pendingDelays",[]);for(let V=0;V<l.length;V++){if(!l[V])continue;const D=l[V];G[V]&&G[V]!==D?t.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):G[V]=D}D._setGlobalContextVariable("pendingDelays",G)}}g.MaxParallelDelayCount=100,(0,R.c)("FlowGraphSetDelayBlock",g)}}]);