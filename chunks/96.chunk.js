"use strict";(self.r00gjvkwa6=self.r00gjvkwa6||[]).push([[96],{14546:(H,O,S)=>{S.r(O),S.d(O,{FlowGraphSetDelayBlock:()=>h});var t,q=S(13082),p=S(13035),G=S(11140);!function(H){H[H.INIT=0]="INIT",H[H.STARTED=1]="STARTED",H[H.ENDED=2]="ENDED"}(t||(t={}));class U{constructor(H){this.onEachCountObservable=new G.b,this.onTimerAbortedObservable=new G.b,this.onTimerEndedObservable=new G.b,this.onStateChangedObservable=new G.b,this._observer=null,this._breakOnNextTick=!1,this._tick=H=>{const O=Date.now();this._timer=O-this._startTime;const S={startTime:this._startTime,currentTime:O,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,eS:H},t=this._breakOnNextTick||this._breakCondition(S);t||this._timer>=this._timeToEnd?this._stop(S,t):this.onEachCountObservable.notifyObservers(S)},this._setState(0),this._contextObservable=H.contextObservable,this._observableParameters=H.observableParameters??{},this._breakCondition=H.breakCondition??(()=>!1),this._timeToEnd=H.timeout,H.onEnded&&this.onTimerEndedObservable.add(H.onEnded),H.ko&&this.onEachCountObservable.add(H.ko),H.onAborted&&this.onTimerAbortedObservable.add(H.onAborted)}set breakCondition(H){this._breakCondition=H}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let H=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=H,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(H){this._state=H,this.onStateChangedObservable.notifyObservers(this._state)}_stop(H){let O=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),O?this.onTimerAbortedObservable.notifyObservers(H):this.onTimerEndedObservable.notifyObservers(H)}}var V=S(11151),w=S(11262),o=S(13030);class h extends q.d{constructor(H){super(H),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",p.t),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",p.l,new o.d(-1))}_preparePendingTasks(H){const O=this.duration.getValue(H);if(O<0||isNaN(O)||!isFinite(O))return this._reportError(H,"Invalid duration in SetDelay block");if(H._getGlobalContextVariable("activeDelays",0)>=h.MaxParallelDelayCount)return this._reportError(H,"Max parallel delays reached");const S=H._getGlobalContextVariable("lastDelayIndex",-1),t=H._getExecutionVariable(this,"pendingDelays",[]),q=H.configuration.EO,p=new U({timeout:1e3*O,contextObservable:q.onBeforeRenderObservable,onEnded:()=>this._onEnded(p,H)});p.start();const G=S+1;this.lastDelayIndex.setValue(new o.d(G),H),H._setGlobalContextVariable("lastDelayIndex",G),t[G]=p,H._setExecutionVariable(this,"pendingDelays",t),this._updateGlobalTimers(H)}_cancelPendingTasks(H){const O=H._getExecutionVariable(this,"pendingDelays",[]);for(const S of O)null===S||void 0===S||S.dispose();H._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new o.d(-1),H),this._updateGlobalTimers(H)}_execute(H,O){O!==this.cancel?(this._preparePendingTasks(H),this.out._activateSignal(H)):this._cancelPendingTasks(H)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(H,O){const S=O._getExecutionVariable(this,"pendingDelays",[]),t=S.indexOf(H);-1!==t?S.splice(t,1):V.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),O._removePendingBlock(this),this.done._activateSignal(O),this._updateGlobalTimers(O)}_updateGlobalTimers(H){const O=H._getExecutionVariable(this,"pendingDelays",[]),S=H._getGlobalContextVariable("pendingDelays",[]);for(let t=0;t<O.length;t++){if(!O[t])continue;const H=O[t];S[t]&&S[t]!==H?V.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):S[t]=H}H._setGlobalContextVariable("pendingDelays",S)}}h.MaxParallelDelayCount=100,(0,w.g)("FlowGraphSetDelayBlock",h)}}]);