"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[96],{14248:(q,c,U)=>{U.r(c),U.d(c,{FlowGraphSetVariableBlock:()=>g});var J=U(10850),Q=U(12699),s=U(12648);class g extends Q.e{constructor(q){if(super(q),!q.variable&&!q.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(q.variables&&q.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(q.variables)for(const c of q.variables)this.registerDataInput(c,s.c);else this.registerDataInput("value",s.c)}_execute(q,c){var U,J;if(null!==(U=this.config)&&void 0!==U&&U.variables)for(const Q of this.config.variables)this._saveVariable(q,Q);else this._saveVariable(q,null===(J=this.config)||void 0===J?void 0:J.variable,"value");this.out._activateSignal(q)}_saveVariable(q,c,U){var J;const Q=q._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const g of Q){const U=q.assetsContext.animationGroups.find((q=>q.uniqueId==g));if(U)for(const J of U.targetedAnimations)if(J.target===q&&J.animation.targetProperty===c){U.stop();const c=Q.indexOf(g);c>-1&&Q.splice(c,1),q._setGlobalContextVariable("currentlyRunningAnimationGroups",Q);break}}const s=null===(J=this.getDataInput(U||c))||void 0===J?void 0:J.getValue(q);q.setVariable(c,s)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(q){var c;super.serialize(q),q.config.variable=null===(c=this.config)||void 0===c?void 0:c.variable}}(0,J.f)("FlowGraphSetVariableBlock",g)}}]);