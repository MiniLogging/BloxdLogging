"use strict";(self.gpkvekif0vo=self.gpkvekif0vo||[]).push([[96],{15650:(a,O,i)=>{i.r(O),i.d(O,{FlowGraphSetDelayBlock:()=>e});var H,b=i(14159),G=i(14124),q=i(12193);!function(a){a[a.INIT=0]="INIT",a[a.STARTED=1]="STARTED",a[a.ENDED=2]="ENDED"}(H||(H={}));class Q{constructor(a){this.onEachCountObservable=new q.e,this.onTimerAbortedObservable=new q.e,this.onTimerEndedObservable=new q.e,this.onStateChangedObservable=new q.e,this._observer=null,this._breakOnNextTick=!1,this._tick=a=>{const O=Date.now();this._timer=O-this._startTime;const i={startTime:this._startTime,currentTime:O,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,ji:a},H=this._breakOnNextTick||this._breakCondition(i);H||this._timer>=this._timeToEnd?this._stop(i,H):this.onEachCountObservable.notifyObservers(i)},this._setState(0),this._contextObservable=a.contextObservable,this._observableParameters=a.observableParameters??{},this._breakCondition=a.breakCondition??(()=>!1),this._timeToEnd=a.timeout,a.onEnded&&this.onTimerEndedObservable.add(a.onEnded),a.sP&&this.onEachCountObservable.add(a.sP),a.onAborted&&this.onTimerAbortedObservable.add(a.onAborted)}set breakCondition(a){this._breakCondition=a}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=a,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(a){this._state=a,this.onStateChangedObservable.notifyObservers(this._state)}_stop(a){let O=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),O?this.onTimerAbortedObservable.notifyObservers(a):this.onTimerEndedObservable.notifyObservers(a)}}var k=i(12209),I=i(12346),P=i(14115);class e extends b.c{constructor(a){super(a),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",G.t),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",G.l,new P.d(-1))}_preparePendingTasks(a){const O=this.duration.getValue(a);if(O<0||isNaN(O)||!isFinite(O))return this._reportError(a,"Invalid duration in SetDelay block");if(a._getGlobalContextVariable("activeDelays",0)>=e.MaxParallelDelayCount)return this._reportError(a,"Max parallel delays reached");const i=a._getGlobalContextVariable("lastDelayIndex",-1),H=a._getExecutionVariable(this,"pendingDelays",[]),b=a.configuration.rO,G=new Q({timeout:1e3*O,contextObservable:b.onBeforeRenderObservable,onEnded:()=>this._onEnded(G,a)});G.start();const q=i+1;this.lastDelayIndex.setValue(new P.d(q),a),a._setGlobalContextVariable("lastDelayIndex",q),H[q]=G,a._setExecutionVariable(this,"pendingDelays",H),this._updateGlobalTimers(a)}_cancelPendingTasks(a){const O=a._getExecutionVariable(this,"pendingDelays",[]);for(const i of O)null===i||void 0===i||i.dispose();a._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new P.d(-1),a),this._updateGlobalTimers(a)}_execute(a,O){O!==this.cancel?(this._preparePendingTasks(a),this.out._activateSignal(a)):this._cancelPendingTasks(a)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(a,O){const i=O._getExecutionVariable(this,"pendingDelays",[]),H=i.indexOf(a);-1!==H?i.splice(H,1):k.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),O._removePendingBlock(this),this.done._activateSignal(O),this._updateGlobalTimers(O)}_updateGlobalTimers(a){const O=a._getExecutionVariable(this,"pendingDelays",[]),i=a._getGlobalContextVariable("pendingDelays",[]);for(let H=0;H<O.length;H++){if(!O[H])continue;const a=O[H];i[H]&&i[H]!==a?k.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):i[H]=a}a._setGlobalContextVariable("pendingDelays",i)}}e.MaxParallelDelayCount=100,(0,I.h)("FlowGraphSetDelayBlock",e)}}]);