"use strict";(self.irtrrknfyfo=self.irtrrknfyfo||[]).push([[96],{14606:(B,E,v)=>{v.r(E),v.d(E,{FlowGraphSetDelayBlock:()=>y});var z,o=v(13137),q=v(13102),c=v(11202);!function(B){B[B.INIT=0]="INIT",B[B.STARTED=1]="STARTED",B[B.ENDED=2]="ENDED"}(z||(z={}));class S{constructor(B){this.onEachCountObservable=new c.e,this.onTimerAbortedObservable=new c.e,this.onTimerEndedObservable=new c.e,this.onStateChangedObservable=new c.e,this._observer=null,this._breakOnNextTick=!1,this._tick=B=>{const E=Date.now();this._timer=E-this._startTime;const v={startTime:this._startTime,currentTime:E,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,Pv:B},z=this._breakOnNextTick||this._breakCondition(v);z||this._timer>=this._timeToEnd?this._stop(v,z):this.onEachCountObservable.notifyObservers(v)},this._setState(0),this._contextObservable=B.contextObservable,this._observableParameters=B.observableParameters??{},this._breakCondition=B.breakCondition??(()=>!1),this._timeToEnd=B.timeout,B.onEnded&&this.onTimerEndedObservable.add(B.onEnded),B.uy&&this.onEachCountObservable.add(B.uy),B.onAborted&&this.onTimerAbortedObservable.add(B.onAborted)}set breakCondition(B){this._breakCondition=B}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let B=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=B,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(B){this._state=B,this.onStateChangedObservable.notifyObservers(this._state)}_stop(B){let E=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),E?this.onTimerAbortedObservable.notifyObservers(B):this.onTimerEndedObservable.notifyObservers(B)}}var x=v(11213),D=v(11345),h=v(13099);class y extends o.c{constructor(B){super(B),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",q.v),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",q.g,new h.d(-1))}_preparePendingTasks(B){const E=this.duration.getValue(B);if(E<0||isNaN(E)||!isFinite(E))return this._reportError(B,"Invalid duration in SetDelay block");if(B._getGlobalContextVariable("activeDelays",0)>=y.MaxParallelDelayCount)return this._reportError(B,"Max parallel delays reached");const v=B._getGlobalContextVariable("lastDelayIndex",-1),z=B._getExecutionVariable(this,"pendingDelays",[]),o=B.configuration.aE,q=new S({timeout:1e3*E,contextObservable:o.onBeforeRenderObservable,onEnded:()=>this._onEnded(q,B)});q.start();const c=v+1;this.lastDelayIndex.setValue(new h.d(c),B),B._setGlobalContextVariable("lastDelayIndex",c),z[c]=q,B._setExecutionVariable(this,"pendingDelays",z),this._updateGlobalTimers(B)}_cancelPendingTasks(B){const E=B._getExecutionVariable(this,"pendingDelays",[]);for(const v of E)null===v||void 0===v||v.dispose();B._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new h.d(-1),B),this._updateGlobalTimers(B)}_execute(B,E){E!==this.cancel?(this._preparePendingTasks(B),this.out._activateSignal(B)):this._cancelPendingTasks(B)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(B,E){const v=E._getExecutionVariable(this,"pendingDelays",[]),z=v.indexOf(B);-1!==z?v.splice(z,1):x.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),E._removePendingBlock(this),this.done._activateSignal(E),this._updateGlobalTimers(E)}_updateGlobalTimers(B){const E=B._getExecutionVariable(this,"pendingDelays",[]),v=B._getGlobalContextVariable("pendingDelays",[]);for(let z=0;z<E.length;z++){if(!E[z])continue;const B=E[z];v[z]&&v[z]!==B?x.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):v[z]=B}B._setGlobalContextVariable("pendingDelays",v)}}y.MaxParallelDelayCount=100,(0,D.f)("FlowGraphSetDelayBlock",y)}}]);