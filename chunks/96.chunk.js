"use strict";(self.ufnpnb83drd=self.ufnpnb83drd||[]).push([[96],{15625:(E,U,g)=>{g.r(U),g.d(U,{FlowGraphSetDelayBlock:()=>P});var N,L=g(14094),D=g(14058),S=g(12174);!function(E){E[E.INIT=0]="INIT",E[E.STARTED=1]="STARTED",E[E.ENDED=2]="ENDED"}(N||(N={}));class u{constructor(E){this.onEachCountObservable=new S.b,this.onTimerAbortedObservable=new S.b,this.onTimerEndedObservable=new S.b,this.onStateChangedObservable=new S.b,this._observer=null,this._breakOnNextTick=!1,this._tick=E=>{const U=Date.now();this._timer=U-this._startTime;const g={startTime:this._startTime,currentTime:U,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,tg:E},N=this._breakOnNextTick||this._breakCondition(g);N||this._timer>=this._timeToEnd?this._stop(g,N):this.onEachCountObservable.notifyObservers(g)},this._setState(0),this._contextObservable=E.contextObservable,this._observableParameters=E.observableParameters??{},this._breakCondition=E.breakCondition??(()=>!1),this._timeToEnd=E.timeout,E.onEnded&&this.onTimerEndedObservable.add(E.onEnded),E.wB&&this.onEachCountObservable.add(E.wB),E.onAborted&&this.onTimerAbortedObservable.add(E.onAborted)}set breakCondition(E){this._breakCondition=E}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let E=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=E,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(E){this._state=E,this.onStateChangedObservable.notifyObservers(this._state)}_stop(E){let U=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),U?this.onTimerAbortedObservable.notifyObservers(E):this.onTimerEndedObservable.notifyObservers(E)}}var s=g(12186),C=g(12292),B=g(14050);class P extends L.e{constructor(E){super(E),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",D.t),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",D.j,new B.c(-1))}_preparePendingTasks(E){const U=this.duration.getValue(E);if(U<0||isNaN(U)||!isFinite(U))return this._reportError(E,"Invalid duration in SetDelay block");if(E._getGlobalContextVariable("activeDelays",0)>=P.MaxParallelDelayCount)return this._reportError(E,"Max parallel delays reached");const g=E._getGlobalContextVariable("lastDelayIndex",-1),N=E._getExecutionVariable(this,"pendingDelays",[]),L=E.configuration.yU,D=new u({timeout:1e3*U,contextObservable:L.onBeforeRenderObservable,onEnded:()=>this._onEnded(D,E)});D.start();const S=g+1;this.lastDelayIndex.setValue(new B.c(S),E),E._setGlobalContextVariable("lastDelayIndex",S),N[S]=D,E._setExecutionVariable(this,"pendingDelays",N),this._updateGlobalTimers(E)}_cancelPendingTasks(E){const U=E._getExecutionVariable(this,"pendingDelays",[]);for(const g of U)null===g||void 0===g||g.dispose();E._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new B.c(-1),E),this._updateGlobalTimers(E)}_execute(E,U){U!==this.cancel?(this._preparePendingTasks(E),this.out._activateSignal(E)):this._cancelPendingTasks(E)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(E,U){const g=U._getExecutionVariable(this,"pendingDelays",[]),N=g.indexOf(E);-1!==N?g.splice(N,1):s.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),U._removePendingBlock(this),this.done._activateSignal(U),this._updateGlobalTimers(U)}_updateGlobalTimers(E){const U=E._getExecutionVariable(this,"pendingDelays",[]),g=E._getGlobalContextVariable("pendingDelays",[]);for(let N=0;N<U.length;N++){if(!U[N])continue;const E=U[N];g[N]&&g[N]!==E?s.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):g[N]=E}E._setGlobalContextVariable("pendingDelays",g)}}P.MaxParallelDelayCount=100,(0,C.f)("FlowGraphSetDelayBlock",P)}}]);