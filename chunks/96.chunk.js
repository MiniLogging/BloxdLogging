"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[96],{14682:(G,V,W)=>{W.r(V),W.d(V,{FlowGraphSetVariableBlock:()=>k});var J=W(11159),R=W(13115),d=W(13071);class k extends R.e{constructor(G){if(super(G),!G.variable&&!G.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(G.variables&&G.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(G.variables)for(const V of G.variables)this.registerDataInput(V,d.b);else this.registerDataInput("value",d.b)}_execute(G,V){var W,J;if(null!==(W=this.config)&&void 0!==W&&W.variables)for(const R of this.config.variables)this._saveVariable(G,R);else this._saveVariable(G,null===(J=this.config)||void 0===J?void 0:J.variable,"value");this.out._activateSignal(G)}_saveVariable(G,V,W){var J;const R=G._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const k of R){const W=G.assetsContext.animationGroups.find((G=>G.uniqueId==k));if(W)for(const J of W.targetedAnimations)if(J.target===G&&J.animation.targetProperty===V){W.stop();const V=R.indexOf(k);V>-1&&R.splice(V,1),G._setGlobalContextVariable("currentlyRunningAnimationGroups",R);break}}const d=null===(J=this.getDataInput(W||V))||void 0===J?void 0:J.getValue(G);G.setVariable(V,d)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(G){var V;super.serialize(G),G.config.variable=null===(V=this.config)||void 0===V?void 0:V.variable}}(0,J.d)("FlowGraphSetVariableBlock",k)}}]);