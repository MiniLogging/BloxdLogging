"use strict";(self.k9ivgwsw3f=self.k9ivgwsw3f||[]).push([[96],{16139:(Y,b,C)=>{C.r(b),C.d(b,{FlowGraphSetDelayBlock:()=>F});var R,q=C(14460),A=C(14424),E=C(12652);!function(Y){Y[Y.INIT=0]="INIT",Y[Y.STARTED=1]="STARTED",Y[Y.ENDED=2]="ENDED"}(R||(R={}));class B{constructor(Y){this.onEachCountObservable=new E.d,this.onTimerAbortedObservable=new E.d,this.onTimerEndedObservable=new E.d,this.onStateChangedObservable=new E.d,this._observer=null,this._breakOnNextTick=!1,this._tick=Y=>{const b=Date.now();this._timer=b-this._startTime;const C={startTime:this._startTime,currentTime:b,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,BR:Y},R=this._breakOnNextTick||this._breakCondition(C);R||this._timer>=this._timeToEnd?this._stop(C,R):this.onEachCountObservable.notifyObservers(C)},this._setState(0),this._contextObservable=Y.contextObservable,this._observableParameters=Y.observableParameters??{},this._breakCondition=Y.breakCondition??(()=>!1),this._timeToEnd=Y.timeout,Y.onEnded&&this.onTimerEndedObservable.add(Y.onEnded),Y.vF&&this.onEachCountObservable.add(Y.vF),Y.onAborted&&this.onTimerAbortedObservable.add(Y.onAborted)}set breakCondition(Y){this._breakCondition=Y}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let Y=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=Y,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(Y){this._state=Y,this.onStateChangedObservable.notifyObservers(this._state)}_stop(Y){let b=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),b?this.onTimerAbortedObservable.notifyObservers(Y):this.onTimerEndedObservable.notifyObservers(Y)}}var g=C(12669),r=C(12790),O=C(14420);class F extends q.d{constructor(Y){super(Y),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",A.q),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",A.i,new O.d(-1))}_preparePendingTasks(Y){const b=this.duration.getValue(Y);if(b<0||isNaN(b)||!isFinite(b))return this._reportError(Y,"Invalid duration in SetDelay block");if(Y._getGlobalContextVariable("activeDelays",0)>=F.MaxParallelDelayCount)return this._reportError(Y,"Max parallel delays reached");const C=Y._getGlobalContextVariable("lastDelayIndex",-1),R=Y._getExecutionVariable(this,"pendingDelays",[]),q=Y.configuration.BC,A=new B({timeout:1e3*b,contextObservable:q.onBeforeRenderObservable,onEnded:()=>this._onEnded(A,Y)});A.start();const E=C+1;this.lastDelayIndex.setValue(new O.d(E),Y),Y._setGlobalContextVariable("lastDelayIndex",E),R[E]=A,Y._setExecutionVariable(this,"pendingDelays",R),this._updateGlobalTimers(Y)}_cancelPendingTasks(Y){const b=Y._getExecutionVariable(this,"pendingDelays",[]);for(const C of b)null===C||void 0===C||C.dispose();Y._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new O.d(-1),Y),this._updateGlobalTimers(Y)}_execute(Y,b){b!==this.cancel?(this._preparePendingTasks(Y),this.out._activateSignal(Y)):this._cancelPendingTasks(Y)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(Y,b){const C=b._getExecutionVariable(this,"pendingDelays",[]),R=C.indexOf(Y);-1!==R?C.splice(R,1):g.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),b._removePendingBlock(this),this.done._activateSignal(b),this._updateGlobalTimers(b)}_updateGlobalTimers(Y){const b=Y._getExecutionVariable(this,"pendingDelays",[]),C=Y._getGlobalContextVariable("pendingDelays",[]);for(let R=0;R<b.length;R++){if(!b[R])continue;const Y=b[R];C[R]&&C[R]!==Y?g.e.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):C[R]=Y}Y._setGlobalContextVariable("pendingDelays",C)}}F.MaxParallelDelayCount=100,(0,r.g)("FlowGraphSetDelayBlock",F)}}]);