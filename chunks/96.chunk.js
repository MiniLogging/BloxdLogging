"use strict";(self.wy695la1oic=self.wy695la1oic||[]).push([[96],{14663:(S,v,D)=>{D.r(v),D.d(v,{FlowGraphSetDelayBlock:()=>A});var z,e=D(13146),N=D(13108),m=D(11179);!function(S){S[S.INIT=0]="INIT",S[S.STARTED=1]="STARTED",S[S.ENDED=2]="ENDED"}(z||(z={}));class B{constructor(S){this.onEachCountObservable=new m.d,this.onTimerAbortedObservable=new m.d,this.onTimerEndedObservable=new m.d,this.onStateChangedObservable=new m.d,this._observer=null,this._breakOnNextTick=!1,this._tick=S=>{const v=Date.now();this._timer=v-this._startTime;const D={startTime:this._startTime,currentTime:v,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,OD:S},z=this._breakOnNextTick||this._breakCondition(D);z||this._timer>=this._timeToEnd?this._stop(D,z):this.onEachCountObservable.notifyObservers(D)},this._setState(0),this._contextObservable=S.contextObservable,this._observableParameters=S.observableParameters??{},this._breakCondition=S.breakCondition??(()=>!1),this._timeToEnd=S.timeout,S.onEnded&&this.onTimerEndedObservable.add(S.onEnded),S.KA&&this.onEachCountObservable.add(S.KA),S.onAborted&&this.onTimerAbortedObservable.add(S.onAborted)}set breakCondition(S){this._breakCondition=S}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let S=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=S,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(S){this._state=S,this.onStateChangedObservable.notifyObservers(this._state)}_stop(S){let v=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),v?this.onTimerAbortedObservable.notifyObservers(S):this.onTimerEndedObservable.notifyObservers(S)}}var g=D(11190),E=D(11329),h=D(13103);class A extends e.e{constructor(S){super(S),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",N.q),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",N.i,new h.b(-1))}_preparePendingTasks(S){const v=this.duration.getValue(S);if(v<0||isNaN(v)||!isFinite(v))return this._reportError(S,"Invalid duration in SetDelay block");if(S._getGlobalContextVariable("activeDelays",0)>=A.MaxParallelDelayCount)return this._reportError(S,"Max parallel delays reached");const D=S._getGlobalContextVariable("lastDelayIndex",-1),z=S._getExecutionVariable(this,"pendingDelays",[]),e=S.configuration.Iv,N=new B({timeout:1e3*v,contextObservable:e.onBeforeRenderObservable,onEnded:()=>this._onEnded(N,S)});N.start();const m=D+1;this.lastDelayIndex.setValue(new h.b(m),S),S._setGlobalContextVariable("lastDelayIndex",m),z[m]=N,S._setExecutionVariable(this,"pendingDelays",z),this._updateGlobalTimers(S)}_cancelPendingTasks(S){const v=S._getExecutionVariable(this,"pendingDelays",[]);for(const D of v)null===D||void 0===D||D.dispose();S._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new h.b(-1),S),this._updateGlobalTimers(S)}_execute(S,v){v!==this.cancel?(this._preparePendingTasks(S),this.out._activateSignal(S)):this._cancelPendingTasks(S)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(S,v){const D=v._getExecutionVariable(this,"pendingDelays",[]),z=D.indexOf(S);-1!==z?D.splice(z,1):g.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),v._removePendingBlock(this),this.done._activateSignal(v),this._updateGlobalTimers(v)}_updateGlobalTimers(S){const v=S._getExecutionVariable(this,"pendingDelays",[]),D=S._getGlobalContextVariable("pendingDelays",[]);for(let z=0;z<v.length;z++){if(!v[z])continue;const S=v[z];D[z]&&D[z]!==S?g.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):D[z]=S}S._setGlobalContextVariable("pendingDelays",D)}}A.MaxParallelDelayCount=100,(0,E.f)("FlowGraphSetDelayBlock",A)}}]);