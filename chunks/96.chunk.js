"use strict";(self.qbp2s7qydk=self.qbp2s7qydk||[]).push([[96],{15879:(M,A,O)=>{O.r(A),O.d(A,{FlowGraphSetDelayBlock:()=>e});var S,z=O(14284),Q=O(14238),X=O(12776);!function(M){M[M.INIT=0]="INIT",M[M.STARTED=1]="STARTED",M[M.ENDED=2]="ENDED"}(S||(S={}));class c{constructor(M){var A,O;this.onEachCountObservable=new X.c,this.onTimerAbortedObservable=new X.c,this.onTimerEndedObservable=new X.c,this.onStateChangedObservable=new X.c,this._observer=null,this._breakOnNextTick=!1,this._tick=M=>{const A=Date.now();this._timer=A-this._startTime;const O={startTime:this._startTime,currentTime:A,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,dO:M},S=this._breakOnNextTick||this._breakCondition(O);S||this._timer>=this._timeToEnd?this._stop(O,S):this.onEachCountObservable.notifyObservers(O)},this._setState(0),this._contextObservable=M.contextObservable,this._observableParameters=null!==(A=M.observableParameters)&&void 0!==A?A:{},this._breakCondition=null!==(O=M.breakCondition)&&void 0!==O?O:()=>!1,this._timeToEnd=M.timeout,M.onEnded&&this.onTimerEndedObservable.add(M.onEnded),M.AT&&this.onEachCountObservable.add(M.AT),M.onAborted&&this.onTimerAbortedObservable.add(M.onAborted)}set breakCondition(M){this._breakCondition=M}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let M=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=M,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(M){this._state=M,this.onStateChangedObservable.notifyObservers(this._state)}_stop(M){let A=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),A?this.onTimerAbortedObservable.notifyObservers(M):this.onTimerEndedObservable.notifyObservers(M)}}var j=O(12783),B=O(12919),g=O(14236);class e extends z.d{constructor(M){super(M),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",Q.t),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",Q.h,new g.b(-1))}_preparePendingTasks(M){const A=this.duration.getValue(M);if(A<0||isNaN(A)||!isFinite(A))return this._reportError(M,"Invalid duration in SetDelay block");if(M._getGlobalContextVariable("activeDelays",0)>=e.MaxParallelDelayCount)return this._reportError(M,"Max parallel delays reached");const O=M._getGlobalContextVariable("lastDelayIndex",-1),S=M._getExecutionVariable(this,"pendingDelays",[]),z=M.configuration.wA,Q=new c({timeout:1e3*A,contextObservable:z.onBeforeRenderObservable,onEnded:()=>this._onEnded(Q,M)});Q.start();const X=O+1;this.lastDelayIndex.setValue(new g.b(X),M),M._setGlobalContextVariable("lastDelayIndex",X),S[X]=Q,M._setExecutionVariable(this,"pendingDelays",S),this._updateGlobalTimers(M)}_cancelPendingTasks(M){const A=M._getExecutionVariable(this,"pendingDelays",[]);for(const O of A)null===O||void 0===O||O.dispose();M._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new g.b(-1),M),this._updateGlobalTimers(M)}_execute(M,A){A!==this.cancel?(this._preparePendingTasks(M),this.out._activateSignal(M)):this._cancelPendingTasks(M)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(M,A){const O=A._getExecutionVariable(this,"pendingDelays",[]),S=O.indexOf(M);-1!==S?O.splice(S,1):j.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),A._removePendingBlock(this),this.done._activateSignal(A),this._updateGlobalTimers(A)}_updateGlobalTimers(M){const A=M._getExecutionVariable(this,"pendingDelays",[]),O=M._getGlobalContextVariable("pendingDelays",[]);for(let S=0;S<A.length;S++){if(!A[S])continue;const M=A[S];O[S]&&O[S]!==M?j.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):O[S]=M}M._setGlobalContextVariable("pendingDelays",O)}}e.MaxParallelDelayCount=100,(0,B.g)("FlowGraphSetDelayBlock",e)}}]);