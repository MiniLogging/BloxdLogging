"use strict";(self["9jl1vn4ei5r"]=self["9jl1vn4ei5r"]||[]).push([[96],{15022:(M,p,b)=>{b.r(p),b.d(p,{FlowGraphSetDelayBlock:()=>F});var Q,q=b(13516),B=b(13477),k=b(11624);!function(M){M[M.INIT=0]="INIT",M[M.STARTED=1]="STARTED",M[M.ENDED=2]="ENDED"}(Q||(Q={}));class u{constructor(M){this.onEachCountObservable=new k.b,this.onTimerAbortedObservable=new k.b,this.onTimerEndedObservable=new k.b,this.onStateChangedObservable=new k.b,this._observer=null,this._breakOnNextTick=!1,this._tick=M=>{const p=Date.now();this._timer=p-this._startTime;const b={startTime:this._startTime,currentTime:p,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,WQ:M},Q=this._breakOnNextTick||this._breakCondition(b);Q||this._timer>=this._timeToEnd?this._stop(b,Q):this.onEachCountObservable.notifyObservers(b)},this._setState(0),this._contextObservable=M.contextObservable,this._observableParameters=M.observableParameters??{},this._breakCondition=M.breakCondition??(()=>!1),this._timeToEnd=M.timeout,M.onEnded&&this.onTimerEndedObservable.add(M.onEnded),M.GH&&this.onEachCountObservable.add(M.GH),M.onAborted&&this.onTimerAbortedObservable.add(M.onAborted)}set breakCondition(M){this._breakCondition=M}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let M=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=M,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(M){this._state=M,this.onStateChangedObservable.notifyObservers(this._state)}_stop(M){let p=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),p?this.onTimerAbortedObservable.notifyObservers(M):this.onTimerEndedObservable.notifyObservers(M)}}var T=b(11637),O=b(11757),H=b(13468);class F extends q.b{constructor(M){super(M),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",B.q),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",B.e,new H.e(-1))}_preparePendingTasks(M){const p=this.duration.getValue(M);if(p<0||isNaN(p)||!isFinite(p))return this._reportError(M,"Invalid duration in SetDelay block");if(M._getGlobalContextVariable("activeDelays",0)>=F.MaxParallelDelayCount)return this._reportError(M,"Max parallel delays reached");const b=M._getGlobalContextVariable("lastDelayIndex",-1),Q=M._getExecutionVariable(this,"pendingDelays",[]),q=M.configuration.Kp,B=new u({timeout:1e3*p,contextObservable:q.onBeforeRenderObservable,onEnded:()=>this._onEnded(B,M)});B.start();const k=b+1;this.lastDelayIndex.setValue(new H.e(k),M),M._setGlobalContextVariable("lastDelayIndex",k),Q[k]=B,M._setExecutionVariable(this,"pendingDelays",Q),this._updateGlobalTimers(M)}_cancelPendingTasks(M){const p=M._getExecutionVariable(this,"pendingDelays",[]);for(const b of p)null===b||void 0===b||b.dispose();M._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new H.e(-1),M),this._updateGlobalTimers(M)}_execute(M,p){p!==this.cancel?(this._preparePendingTasks(M),this.out._activateSignal(M)):this._cancelPendingTasks(M)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(M,p){const b=p._getExecutionVariable(this,"pendingDelays",[]),Q=b.indexOf(M);-1!==Q?b.splice(Q,1):T.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),p._removePendingBlock(this),this.done._activateSignal(p),this._updateGlobalTimers(p)}_updateGlobalTimers(M){const p=M._getExecutionVariable(this,"pendingDelays",[]),b=M._getGlobalContextVariable("pendingDelays",[]);for(let Q=0;Q<p.length;Q++){if(!p[Q])continue;const M=p[Q];b[Q]&&b[Q]!==M?T.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):b[Q]=M}M._setGlobalContextVariable("pendingDelays",b)}}F.MaxParallelDelayCount=100,(0,O.g)("FlowGraphSetDelayBlock",F)}}]);