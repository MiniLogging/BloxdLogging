"use strict";(self.isj1uwvwrek=self.isj1uwvwrek||[]).push([[96],{16098:(I,x,L)=>{L.r(x),L.d(x,{FlowGraphSetDelayBlock:()=>Q});var F,X=L(14537),G=L(14498),Y=L(12797);!function(I){I[I.INIT=0]="INIT",I[I.STARTED=1]="STARTED",I[I.ENDED=2]="ENDED"}(F||(F={}));class p{constructor(I){this.onEachCountObservable=new Y.c,this.onTimerAbortedObservable=new Y.c,this.onTimerEndedObservable=new Y.c,this.onStateChangedObservable=new Y.c,this._observer=null,this._breakOnNextTick=!1,this._tick=I=>{const x=Date.now();this._timer=x-this._startTime;const L={startTime:this._startTime,currentTime:x,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,dL:I},F=this._breakOnNextTick||this._breakCondition(L);F||this._timer>=this._timeToEnd?this._stop(L,F):this.onEachCountObservable.notifyObservers(L)},this._setState(0),this._contextObservable=I.contextObservable,this._observableParameters=I.observableParameters??{},this._breakCondition=I.breakCondition??(()=>!1),this._timeToEnd=I.timeout,I.onEnded&&this.onTimerEndedObservable.add(I.onEnded),I.fQ&&this.onEachCountObservable.add(I.fQ),I.onAborted&&this.onTimerAbortedObservable.add(I.onAborted)}set breakCondition(I){this._breakCondition=I}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let I=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=I,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(I){this._state=I,this.onStateChangedObservable.notifyObservers(this._state)}_stop(I){let x=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),x?this.onTimerAbortedObservable.notifyObservers(I):this.onTimerEndedObservable.notifyObservers(I)}}var B=L(12809),l=L(12938),W=L(14493);class Q extends X.d{constructor(I){super(I),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",G.x),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",G.l,new W.b(-1))}_preparePendingTasks(I){const x=this.duration.getValue(I);if(x<0||isNaN(x)||!isFinite(x))return this._reportError(I,"Invalid duration in SetDelay block");if(I._getGlobalContextVariable("activeDelays",0)>=Q.MaxParallelDelayCount)return this._reportError(I,"Max parallel delays reached");const L=I._getGlobalContextVariable("lastDelayIndex",-1),F=I._getExecutionVariable(this,"pendingDelays",[]),X=I.configuration.qx,G=new p({timeout:1e3*x,contextObservable:X.onBeforeRenderObservable,onEnded:()=>this._onEnded(G,I)});G.start();const Y=L+1;this.lastDelayIndex.setValue(new W.b(Y),I),I._setGlobalContextVariable("lastDelayIndex",Y),F[Y]=G,I._setExecutionVariable(this,"pendingDelays",F),this._updateGlobalTimers(I)}_cancelPendingTasks(I){const x=I._getExecutionVariable(this,"pendingDelays",[]);for(const L of x)null===L||void 0===L||L.dispose();I._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new W.b(-1),I),this._updateGlobalTimers(I)}_execute(I,x){x!==this.cancel?(this._preparePendingTasks(I),this.out._activateSignal(I)):this._cancelPendingTasks(I)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(I,x){const L=x._getExecutionVariable(this,"pendingDelays",[]),F=L.indexOf(I);-1!==F?L.splice(F,1):B.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),x._removePendingBlock(this),this.done._activateSignal(x),this._updateGlobalTimers(x)}_updateGlobalTimers(I){const x=I._getExecutionVariable(this,"pendingDelays",[]),L=I._getGlobalContextVariable("pendingDelays",[]);for(let F=0;F<x.length;F++){if(!x[F])continue;const I=x[F];L[F]&&L[F]!==I?B.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):L[F]=I}I._setGlobalContextVariable("pendingDelays",L)}}Q.MaxParallelDelayCount=100,(0,l.d)("FlowGraphSetDelayBlock",Q)}}]);