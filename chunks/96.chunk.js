"use strict";(self.kdlk57exiqh=self.kdlk57exiqh||[]).push([[96],{15396:(i,x,e)=>{e.r(x),e.d(x,{FlowGraphSetDelayBlock:()=>A});var j,E=e(13924),a=e(13874),Y=e(12065);!function(i){i[i.INIT=0]="INIT",i[i.STARTED=1]="STARTED",i[i.ENDED=2]="ENDED"}(j||(j={}));class J{constructor(i){this.onEachCountObservable=new Y.b,this.onTimerAbortedObservable=new Y.b,this.onTimerEndedObservable=new Y.b,this.onStateChangedObservable=new Y.b,this._observer=null,this._breakOnNextTick=!1,this._tick=i=>{const x=Date.now();this._timer=x-this._startTime;const e={startTime:this._startTime,currentTime:x,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,yx:i},j=this._breakOnNextTick||this._breakCondition(e);j||this._timer>=this._timeToEnd?this._stop(e,j):this.onEachCountObservable.notifyObservers(e)},this._setState(0),this._contextObservable=i.contextObservable,this._observableParameters=i.observableParameters??{},this._breakCondition=i.breakCondition??(()=>!1),this._timeToEnd=i.timeout,i.onEnded&&this.onTimerEndedObservable.add(i.onEnded),i.RA&&this.onEachCountObservable.add(i.RA),i.onAborted&&this.onTimerAbortedObservable.add(i.onAborted)}set breakCondition(i){this._breakCondition=i}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=i,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(i){this._state=i,this.onStateChangedObservable.notifyObservers(this._state)}_stop(i){let x=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),x?this.onTimerAbortedObservable.notifyObservers(i):this.onTimerEndedObservable.notifyObservers(i)}}var u=e(12072),b=e(12204),g=e(13868);class A extends E.b{constructor(i){super(i),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",a.q),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",a.h,new g.d(-1))}_preparePendingTasks(i){const x=this.duration.getValue(i);if(x<0||isNaN(x)||!isFinite(x))return this._reportError(i,"Invalid duration in SetDelay block");if(i._getGlobalContextVariable("activeDelays",0)>=A.MaxParallelDelayCount)return this._reportError(i,"Max parallel delays reached");const e=i._getGlobalContextVariable("lastDelayIndex",-1),j=i._getExecutionVariable(this,"pendingDelays",[]),E=i.configuration.LJ,a=new J({timeout:1e3*x,contextObservable:E.onBeforeRenderObservable,onEnded:()=>this._onEnded(a,i)});a.start();const Y=e+1;this.lastDelayIndex.setValue(new g.d(Y),i),i._setGlobalContextVariable("lastDelayIndex",Y),j[Y]=a,i._setExecutionVariable(this,"pendingDelays",j),this._updateGlobalTimers(i)}_cancelPendingTasks(i){const x=i._getExecutionVariable(this,"pendingDelays",[]);for(const e of x)null===e||void 0===e||e.dispose();i._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new g.d(-1),i),this._updateGlobalTimers(i)}_execute(i,x){x!==this.cancel?(this._preparePendingTasks(i),this.out._activateSignal(i)):this._cancelPendingTasks(i)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(i,x){const e=x._getExecutionVariable(this,"pendingDelays",[]),j=e.indexOf(i);-1!==j?e.splice(j,1):u.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),x._removePendingBlock(this),this.done._activateSignal(x),this._updateGlobalTimers(x)}_updateGlobalTimers(i){const x=i._getExecutionVariable(this,"pendingDelays",[]),e=i._getGlobalContextVariable("pendingDelays",[]);for(let j=0;j<x.length;j++){if(!x[j])continue;const i=x[j];e[j]&&e[j]!==i?u.c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):e[j]=i}i._setGlobalContextVariable("pendingDelays",e)}}A.MaxParallelDelayCount=100,(0,b.f)("FlowGraphSetDelayBlock",A)}}]);