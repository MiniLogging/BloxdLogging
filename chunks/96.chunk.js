"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[96],{14509:(Z,c,L)=>{L.r(c),L.d(c,{FlowGraphSetVariableBlock:()=>G});var k=L(11012),N=L(12875),R=L(12825);class G extends N.e{constructor(Z){if(super(Z),!Z.variable&&!Z.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(Z.variables&&Z.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(Z.variables)for(const c of Z.variables)this.registerDataInput(c,R.e);else this.registerDataInput("value",R.e)}_execute(Z,c){var L,k;if(null!==(L=this.config)&&void 0!==L&&L.variables)for(const N of this.config.variables)this._saveVariable(Z,N);else this._saveVariable(Z,null===(k=this.config)||void 0===k?void 0:k.variable,"value");this.out._activateSignal(Z)}_saveVariable(Z,c,L){var k;const N=Z._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const G of N){const L=Z.assetsContext.animationGroups.find((Z=>Z.uniqueId==G));if(L)for(const k of L.targetedAnimations)if(k.target===Z&&k.animation.targetProperty===c){L.stop();const c=N.indexOf(G);c>-1&&N.splice(c,1),Z._setGlobalContextVariable("currentlyRunningAnimationGroups",N);break}}const R=null===(k=this.getDataInput(L||c))||void 0===k?void 0:k.getValue(Z);Z.setVariable(c,R)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(Z){var c;super.serialize(Z),Z.config.variable=null===(c=this.config)||void 0===c?void 0:c.variable}}(0,k.g)("FlowGraphSetVariableBlock",G)}}]);