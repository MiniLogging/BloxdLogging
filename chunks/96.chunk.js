"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[96],{14410:(h,V,i)=>{i.r(V),i.d(V,{FlowGraphSetDelayBlock:()=>v});var S,l=i(12855),Y=i(12805),g=i(10960);!function(h){h[h.INIT=0]="INIT",h[h.STARTED=1]="STARTED",h[h.ENDED=2]="ENDED"}(S||(S={}));class q{constructor(h){this.onEachCountObservable=new g.d,this.onTimerAbortedObservable=new g.d,this.onTimerEndedObservable=new g.d,this.onStateChangedObservable=new g.d,this._observer=null,this._breakOnNextTick=!1,this._tick=h=>{const V=Date.now();this._timer=V-this._startTime;const i={startTime:this._startTime,currentTime:V,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:h},S=this._breakOnNextTick||this._breakCondition(i);S||this._timer>=this._timeToEnd?this._stop(i,S):this.onEachCountObservable.notifyObservers(i)},this._setState(0),this._contextObservable=h.contextObservable,this._observableParameters=h.observableParameters??{},this._breakCondition=h.breakCondition??(()=>!1),this._timeToEnd=h.timeout,h.onEnded&&this.onTimerEndedObservable.add(h.onEnded),h.cI&&this.onEachCountObservable.add(h.cI),h.onAborted&&this.onTimerAbortedObservable.add(h.onAborted)}set breakCondition(h){this._breakCondition=h}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let h=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=h,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(h){this._state=h,this.onStateChangedObservable.notifyObservers(this._state)}_stop(h){let V=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),V?this.onTimerAbortedObservable.notifyObservers(h):this.onTimerEndedObservable.notifyObservers(h)}}var B=i(10967),J=i(11091),I=i(12800);class v extends l.e{constructor(h){super(h),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",Y.u),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",Y.i,new I.b(-1))}_preparePendingTasks(h){const V=this.duration.getValue(h);if(V<0||isNaN(V)||!isFinite(V))return this._reportError(h,"Invalid duration in SetDelay block");if(h._getGlobalContextVariable("activeDelays",0)>=v.MaxParallelDelayCount)return this._reportError(h,"Max parallel delays reached");const i=h._getGlobalContextVariable("lastDelayIndex",-1),S=h._getExecutionVariable(this,"pendingDelays",[]),l=h.configuration.fV,Y=new q({timeout:1e3*V,contextObservable:l.onBeforeRenderObservable,onEnded:()=>this._onEnded(Y,h)});Y.start();const g=i+1;this.lastDelayIndex.setValue(new I.b(g),h),h._setGlobalContextVariable("lastDelayIndex",g),S[g]=Y,h._setExecutionVariable(this,"pendingDelays",S),this._updateGlobalTimers(h)}_cancelPendingTasks(h){const V=h._getExecutionVariable(this,"pendingDelays",[]);for(const i of V)null===i||void 0===i||i.dispose();h._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new I.b(-1),h),this._updateGlobalTimers(h)}_execute(h,V){V!==this.cancel?(this._preparePendingTasks(h),this.out._activateSignal(h)):this._cancelPendingTasks(h)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(h,V){const i=V._getExecutionVariable(this,"pendingDelays",[]),S=i.indexOf(h);-1!==S?i.splice(S,1):B.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),V._removePendingBlock(this),this.done._activateSignal(V),this._updateGlobalTimers(V)}_updateGlobalTimers(h){const V=h._getExecutionVariable(this,"pendingDelays",[]),i=h._getGlobalContextVariable("pendingDelays",[]);for(let S=0;S<V.length;S++){if(!V[S])continue;const h=V[S];i[S]&&i[S]!==h?B.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):i[S]=h}h._setGlobalContextVariable("pendingDelays",i)}}v.MaxParallelDelayCount=100,(0,J.f)("FlowGraphSetDelayBlock",v)}}]);