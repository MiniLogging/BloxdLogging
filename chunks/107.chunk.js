"use strict";(self.ex92n20nlz8=self.ex92n20nlz8||[]).push([[107],{15855:(I,g,b)=>{b.r(g),b.d(g,{FlowGraphWaitAllBlock:()=>J});var e=b(14320),c=b(12558),z=b(14282),M=b(14278);class J extends e.c{constructor(I){super(I),this.config=I,this.inFlows=[],this._cachedActivationState=[],this.reset=this._registerSignalInput("reset"),this.completed=this._registerSignalOutput("completed"),this.remainingInputs=this.registerDataOutput("remainingInputs",z.h,new M.d(this.config.inputSignalCount||0));for(let g=0;g<this.config.inputSignalCount;g++)this.inFlows.push(this._registerSignalInput(`in_${g}`));this._unregisterSignalInput("in")}_getCurrentActivationState(I){const g=this._cachedActivationState;if(g.length=0,I._hasExecutionVariable(this,"activationState")){const b=I._getExecutionVariable(this,"activationState",[]);for(let I=0;I<b.length;I++)g.push(b[I])}else for(let b=0;b<this.config.inputSignalCount;b++)g.push(!1);return g}_execute(I,g){const b=this._getCurrentActivationState(I);if(g===this.reset)for(let e=0;e<this.config.inputSignalCount;e++)b[e]=!1;else{const I=this.inFlows.indexOf(g);I>=0&&(b[I]=!0)}if(this.remainingInputs.setValue(new M.d(b.filter((I=>!I)).length),I),I._setExecutionVariable(this,"activationState",b.slice()),b.includes(!1))g!==this.reset&&this.out._activateSignal(I);else{this.completed._activateSignal(I);for(let I=0;I<this.config.inputSignalCount;I++)b[I]=!1}}getClassName(){return"FlowGraphWaitAllBlock"}serialize(I){super.serialize(I),I.config.inputFlows=this.config.inputSignalCount}}(0,c.g)("FlowGraphWaitAllBlock",J)}}]);