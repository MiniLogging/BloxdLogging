"use strict";(self.lfntwv94xlc=self.lfntwv94xlc||[]).push([[107],{14706:(m,S,h)=>{h.r(S),h.d(S,{FlowGraphWaitAllBlock:()=>b});var l=h(13107),M=h(11293),O=h(13060),u=h(13056);class b extends l.c{constructor(m){super(m),this.config=m,this.inFlows=[],this._cachedActivationState=[],this.reset=this._registerSignalInput("reset"),this.completed=this._registerSignalOutput("completed"),this.remainingInputs=this.registerDataOutput("remainingInputs",O.f,new u.b(this.config.inputSignalCount||0));for(let S=0;S<this.config.inputSignalCount;S++)this.inFlows.push(this._registerSignalInput(`in_${S}`));this._unregisterSignalInput("in")}_getCurrentActivationState(m){const S=this._cachedActivationState;if(S.length=0,m._hasExecutionVariable(this,"activationState")){const h=m._getExecutionVariable(this,"activationState",[]);for(let m=0;m<h.length;m++)S.push(h[m])}else for(let h=0;h<this.config.inputSignalCount;h++)S.push(!1);return S}_execute(m,S){const h=this._getCurrentActivationState(m);if(S===this.reset)for(let l=0;l<this.config.inputSignalCount;l++)h[l]=!1;else{const m=this.inFlows.indexOf(S);m>=0&&(h[m]=!0)}if(this.remainingInputs.setValue(new u.b(h.filter((m=>!m)).length),m),m._setExecutionVariable(this,"activationState",h.slice()),h.includes(!1))S!==this.reset&&this.out._activateSignal(m);else{this.completed._activateSignal(m);for(let m=0;m<this.config.inputSignalCount;m++)h[m]=!1}}getClassName(){return"FlowGraphWaitAllBlock"}serialize(m){super.serialize(m),m.config.inputFlows=this.config.inputSignalCount}}(0,M.e)("FlowGraphWaitAllBlock",b)}}]);