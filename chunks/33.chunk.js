"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[33],{13238:(z,u,Y)=>{Y.r(u),Y.d(u,{_TGATextureLoader:()=>T});var H=Y(10953);function E(z){let u=0;return{id_length:z[u++],colormap_type:z[u++],image_type:z[u++],colormap_index:z[u++]|z[u++]<<8,colormap_length:z[u++]|z[u++]<<8,colormap_size:z[u++],origin:[z[u++]|z[u++]<<8,z[u++]|z[u++]<<8],width:z[u++]|z[u++]<<8,height:z[u++]|z[u++]<<8,pixel_size:z[u++],flags:z[u++]}}function J(z,u){if(u.length<19)return void H.b.Error("Unable to load TGA file - Not enough data to contain header");let Y=18;const J=E(u);if(J.id_length+Y>u.length)return void H.b.Error("Unable to load TGA file - Not enough data");Y+=J.id_length;let T,b=!1,L=!1,D=!1;switch(J.image_type){case 9:b=!0;case 1:L=!0;break;case 10:b=!0;case 2:break;case 11:b=!0;case 3:D=!0}const g=J.pixel_size>>3,M=J.width*J.height*g;let q,C,K,h,o,d,t;if(L&&(q=u.subarray(Y,Y+=J.colormap_length*(J.colormap_size>>3))),b){let z,H,E;T=new Uint8Array(M);let J=0;const l=new Uint8Array(g);for(;Y<M&&J<M;)if(z=u[Y++],H=1+(127&z),128&z){for(E=0;E<g;++E)l[E]=u[Y++];for(E=0;E<H;++E)T.set(l,J+E*g);J+=g*H}else{for(H*=g,E=0;E<H;++E)T[J+E]=u[Y++];J+=H}}else T=u.subarray(Y,Y+=L?J.width*J.height:M);switch((48&J.flags)>>4){default:case 2:C=0,h=1,t=J.width,K=0,o=1,d=J.height;break;case 0:C=0,h=1,t=J.width,K=J.height-1,o=-1,d=-1;break;case 3:C=J.width-1,h=-1,t=-1,K=0,o=1,d=J.height;break;case 1:C=J.width-1,h=-1,t=-1,K=J.height-1,o=-1,d=-1}const W="_getImageData"+(D?"Grey":"")+J.pixel_size+"bits",Z=l[W](J,q,T,K,o,d,C,h,t);z.getEngine()._uploadDataToTextureDirectly(z,Z)}const l={GetTGAHeader:E,UploadContent:J,_getImageData8bits:function(z,u,Y,H,E,J,l,T,b){const L=Y,D=u,g=z.width,M=z.height;let q,C,K,h=0;const o=new Uint8Array(g*M*4);for(K=H;K!==J;K+=E)for(C=l;C!==b;C+=T,h++)q=L[h],o[4*(C+g*K)+3]=255,o[4*(C+g*K)+2]=D[3*q+0],o[4*(C+g*K)+1]=D[3*q+1],o[4*(C+g*K)+0]=D[3*q+2];return o},_getImageData16bits:function(z,u,Y,H,E,J,l,T,b){const L=Y,D=z.width,g=z.height;let M,q,C,K=0;const h=new Uint8Array(D*g*4);for(C=H;C!==J;C+=E)for(q=l;q!==b;q+=T,K+=2){M=L[K+0]+(L[K+1]<<8);const z=255*((31744&M)>>10)/31|0,u=255*((992&M)>>5)/31|0,Y=255*(31&M)/31|0;h[4*(q+D*C)+0]=z,h[4*(q+D*C)+1]=u,h[4*(q+D*C)+2]=Y,h[4*(q+D*C)+3]=32768&M?0:255}return h},_getImageData24bits:function(z,u,Y,H,E,J,l,T,b){const L=Y,D=z.width,g=z.height;let M,q,C=0;const K=new Uint8Array(D*g*4);for(q=H;q!==J;q+=E)for(M=l;M!==b;M+=T,C+=3)K[4*(M+D*q)+3]=255,K[4*(M+D*q)+2]=L[C+0],K[4*(M+D*q)+1]=L[C+1],K[4*(M+D*q)+0]=L[C+2];return K},_getImageData32bits:function(z,u,Y,H,E,J,l,T,b){const L=Y,D=z.width,g=z.height;let M,q,C=0;const K=new Uint8Array(D*g*4);for(q=H;q!==J;q+=E)for(M=l;M!==b;M+=T,C+=4)K[4*(M+D*q)+2]=L[C+0],K[4*(M+D*q)+1]=L[C+1],K[4*(M+D*q)+0]=L[C+2],K[4*(M+D*q)+3]=L[C+3];return K},_getImageDataGrey8bits:function(z,u,Y,H,E,J,l,T,b){const L=Y,D=z.width,g=z.height;let M,q,C,K=0;const h=new Uint8Array(D*g*4);for(C=H;C!==J;C+=E)for(q=l;q!==b;q+=T,K++)M=L[K],h[4*(q+D*C)+0]=M,h[4*(q+D*C)+1]=M,h[4*(q+D*C)+2]=M,h[4*(q+D*C)+3]=255;return h},_getImageDataGrey16bits:function(z,u,Y,H,E,J,l,T,b){const L=Y,D=z.width,g=z.height;let M,q,C=0;const K=new Uint8Array(D*g*4);for(q=H;q!==J;q+=E)for(M=l;M!==b;M+=T,C+=2)K[4*(M+D*q)+0]=L[C+0],K[4*(M+D*q)+1]=L[C+0],K[4*(M+D*q)+2]=L[C+0],K[4*(M+D*q)+3]=L[C+1];return K}};class T{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(z,u,Y){const H=new Uint8Array(z.buffer,z.byteOffset,z.byteLength),l=E(H);Y(l.width,l.height,u.generateMipMaps,!1,(()=>{J(u,H)}))}}}}]);