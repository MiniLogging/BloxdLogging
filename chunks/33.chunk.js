"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[33],{13800:(G,V,W)=>{W.r(V),W.d(V,{_TGATextureLoader:()=>z});var J=W(11201);function R(G){let V=0;return{id_length:G[V++],colormap_type:G[V++],image_type:G[V++],colormap_index:G[V++]|G[V++]<<8,colormap_length:G[V++]|G[V++]<<8,colormap_size:G[V++],origin:[G[V++]|G[V++]<<8,G[V++]|G[V++]<<8],width:G[V++]|G[V++]<<8,height:G[V++]|G[V++]<<8,pixel_size:G[V++],flags:G[V++]}}function d(G,V){if(V.length<19)return void J.c.Error("Unable to load TGA file - Not enough data to contain header");let W=18;const d=R(V);if(d.id_length+W>V.length)return void J.c.Error("Unable to load TGA file - Not enough data");W+=d.id_length;let z,X=!1,P=!1,A=!1;switch(d.image_type){case 9:X=!0;case 1:P=!0;break;case 10:X=!0;case 2:break;case 11:X=!0;case 3:A=!0}const x=d.pixel_size>>3,q=d.width*d.height*x;let L,t,Y,g,B,S,p;if(P&&(L=V.subarray(W,W+=d.colormap_length*(d.colormap_size>>3))),X){let G,J,R;z=new Uint8Array(q);let d=0;const k=new Uint8Array(x);for(;W<q&&d<q;)if(G=V[W++],J=1+(127&G),128&G){for(R=0;R<x;++R)k[R]=V[W++];for(R=0;R<J;++R)z.set(k,d+R*x);d+=x*J}else{for(J*=x,R=0;R<J;++R)z[d+R]=V[W++];d+=J}}else z=V.subarray(W,W+=P?d.width*d.height:q);switch((48&d.flags)>>4){default:case 2:t=0,g=1,p=d.width,Y=0,B=1,S=d.height;break;case 0:t=0,g=1,p=d.width,Y=d.height-1,B=-1,S=-1;break;case 3:t=d.width-1,g=-1,p=-1,Y=0,B=1,S=d.height;break;case 1:t=d.width-1,g=-1,p=-1,Y=d.height-1,B=-1,S=-1}const b="_getImageData"+(A?"Grey":"")+d.pixel_size+"bits",r=k[b](d,L,z,Y,B,S,t,g,p);G.getEngine()._uploadDataToTextureDirectly(G,r)}const k={GetTGAHeader:R,UploadContent:d,_getImageData8bits:function(G,V,W,J,R,d,k,z,X){const P=W,A=V,x=G.width,q=G.height;let L,t,Y,g=0;const B=new Uint8Array(x*q*4);for(Y=J;Y!==d;Y+=R)for(t=k;t!==X;t+=z,g++)L=P[g],B[4*(t+x*Y)+3]=255,B[4*(t+x*Y)+2]=A[3*L+0],B[4*(t+x*Y)+1]=A[3*L+1],B[4*(t+x*Y)+0]=A[3*L+2];return B},_getImageData16bits:function(G,V,W,J,R,d,k,z,X){const P=W,A=G.width,x=G.height;let q,L,t,Y=0;const g=new Uint8Array(A*x*4);for(t=J;t!==d;t+=R)for(L=k;L!==X;L+=z,Y+=2){q=P[Y+0]+(P[Y+1]<<8);const G=255*((31744&q)>>10)/31|0,V=255*((992&q)>>5)/31|0,W=255*(31&q)/31|0;g[4*(L+A*t)+0]=G,g[4*(L+A*t)+1]=V,g[4*(L+A*t)+2]=W,g[4*(L+A*t)+3]=32768&q?0:255}return g},_getImageData24bits:function(G,V,W,J,R,d,k,z,X){const P=W,A=G.width,x=G.height;let q,L,t=0;const Y=new Uint8Array(A*x*4);for(L=J;L!==d;L+=R)for(q=k;q!==X;q+=z,t+=3)Y[4*(q+A*L)+3]=255,Y[4*(q+A*L)+2]=P[t+0],Y[4*(q+A*L)+1]=P[t+1],Y[4*(q+A*L)+0]=P[t+2];return Y},_getImageData32bits:function(G,V,W,J,R,d,k,z,X){const P=W,A=G.width,x=G.height;let q,L,t=0;const Y=new Uint8Array(A*x*4);for(L=J;L!==d;L+=R)for(q=k;q!==X;q+=z,t+=4)Y[4*(q+A*L)+2]=P[t+0],Y[4*(q+A*L)+1]=P[t+1],Y[4*(q+A*L)+0]=P[t+2],Y[4*(q+A*L)+3]=P[t+3];return Y},_getImageDataGrey8bits:function(G,V,W,J,R,d,k,z,X){const P=W,A=G.width,x=G.height;let q,L,t,Y=0;const g=new Uint8Array(A*x*4);for(t=J;t!==d;t+=R)for(L=k;L!==X;L+=z,Y++)q=P[Y],g[4*(L+A*t)+0]=q,g[4*(L+A*t)+1]=q,g[4*(L+A*t)+2]=q,g[4*(L+A*t)+3]=255;return g},_getImageDataGrey16bits:function(G,V,W,J,R,d,k,z,X){const P=W,A=G.width,x=G.height;let q,L,t=0;const Y=new Uint8Array(A*x*4);for(L=J;L!==d;L+=R)for(q=k;q!==X;q+=z,t+=2)Y[4*(q+A*L)+0]=P[t+0],Y[4*(q+A*L)+1]=P[t+0],Y[4*(q+A*L)+2]=P[t+0],Y[4*(q+A*L)+3]=P[t+1];return Y}};class z{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(G,V,W){const J=new Uint8Array(G.buffer,G.byteOffset,G.byteLength),k=R(J);W(k.width,k.height,V.generateMipMaps,!1,(()=>{d(V,J)}))}}}}]);