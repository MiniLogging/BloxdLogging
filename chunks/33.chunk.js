"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[33],{13399:(q,c,U)=>{U.r(c),U.d(c,{_TGATextureLoader:()=>X});var J=U(10886);function Q(q){let c=0;return{id_length:q[c++],colormap_type:q[c++],image_type:q[c++],colormap_index:q[c++]|q[c++]<<8,colormap_length:q[c++]|q[c++]<<8,colormap_size:q[c++],origin:[q[c++]|q[c++]<<8,q[c++]|q[c++]<<8],width:q[c++]|q[c++]<<8,height:q[c++]|q[c++]<<8,pixel_size:q[c++],flags:q[c++]}}function s(q,c){if(c.length<19)return void J.c.Error("Unable to load TGA file - Not enough data to contain header");let U=18;const s=Q(c);if(s.id_length+U>c.length)return void J.c.Error("Unable to load TGA file - Not enough data");U+=s.id_length;let X,n=!1,W=!1,D=!1;switch(s.image_type){case 9:n=!0;case 1:W=!0;break;case 10:n=!0;case 2:break;case 11:n=!0;case 3:D=!0}const u=s.pixel_size>>3,K=s.width*s.height*u;let r,H,b,h,o,a,p;if(W&&(r=c.subarray(U,U+=s.colormap_length*(s.colormap_size>>3))),n){let q,J,Q;X=new Uint8Array(K);let s=0;const g=new Uint8Array(u);for(;U<K&&s<K;)if(q=c[U++],J=1+(127&q),128&q){for(Q=0;Q<u;++Q)g[Q]=c[U++];for(Q=0;Q<J;++Q)X.set(g,s+Q*u);s+=u*J}else{for(J*=u,Q=0;Q<J;++Q)X[s+Q]=c[U++];s+=J}}else X=c.subarray(U,U+=W?s.width*s.height:K);switch((48&s.flags)>>4){default:case 2:H=0,h=1,p=s.width,b=0,o=1,a=s.height;break;case 0:H=0,h=1,p=s.width,b=s.height-1,o=-1,a=-1;break;case 3:H=s.width-1,h=-1,p=-1,b=0,o=1,a=s.height;break;case 1:H=s.width-1,h=-1,p=-1,b=s.height-1,o=-1,a=-1}const R="_getImageData"+(D?"Grey":"")+s.pixel_size+"bits",I=g[R](s,r,X,b,o,a,H,h,p);q.getEngine()._uploadDataToTextureDirectly(q,I)}const g={GetTGAHeader:Q,UploadContent:s,_getImageData8bits:function(q,c,U,J,Q,s,g,X,n){const W=U,D=c,u=q.width,K=q.height;let r,H,b,h=0;const o=new Uint8Array(u*K*4);for(b=J;b!==s;b+=Q)for(H=g;H!==n;H+=X,h++)r=W[h],o[4*(H+u*b)+3]=255,o[4*(H+u*b)+2]=D[3*r+0],o[4*(H+u*b)+1]=D[3*r+1],o[4*(H+u*b)+0]=D[3*r+2];return o},_getImageData16bits:function(q,c,U,J,Q,s,g,X,n){const W=U,D=q.width,u=q.height;let K,r,H,b=0;const h=new Uint8Array(D*u*4);for(H=J;H!==s;H+=Q)for(r=g;r!==n;r+=X,b+=2){K=W[b+0]+(W[b+1]<<8);const q=255*((31744&K)>>10)/31|0,c=255*((992&K)>>5)/31|0,U=255*(31&K)/31|0;h[4*(r+D*H)+0]=q,h[4*(r+D*H)+1]=c,h[4*(r+D*H)+2]=U,h[4*(r+D*H)+3]=32768&K?0:255}return h},_getImageData24bits:function(q,c,U,J,Q,s,g,X,n){const W=U,D=q.width,u=q.height;let K,r,H=0;const b=new Uint8Array(D*u*4);for(r=J;r!==s;r+=Q)for(K=g;K!==n;K+=X,H+=3)b[4*(K+D*r)+3]=255,b[4*(K+D*r)+2]=W[H+0],b[4*(K+D*r)+1]=W[H+1],b[4*(K+D*r)+0]=W[H+2];return b},_getImageData32bits:function(q,c,U,J,Q,s,g,X,n){const W=U,D=q.width,u=q.height;let K,r,H=0;const b=new Uint8Array(D*u*4);for(r=J;r!==s;r+=Q)for(K=g;K!==n;K+=X,H+=4)b[4*(K+D*r)+2]=W[H+0],b[4*(K+D*r)+1]=W[H+1],b[4*(K+D*r)+0]=W[H+2],b[4*(K+D*r)+3]=W[H+3];return b},_getImageDataGrey8bits:function(q,c,U,J,Q,s,g,X,n){const W=U,D=q.width,u=q.height;let K,r,H,b=0;const h=new Uint8Array(D*u*4);for(H=J;H!==s;H+=Q)for(r=g;r!==n;r+=X,b++)K=W[b],h[4*(r+D*H)+0]=K,h[4*(r+D*H)+1]=K,h[4*(r+D*H)+2]=K,h[4*(r+D*H)+3]=255;return h},_getImageDataGrey16bits:function(q,c,U,J,Q,s,g,X,n){const W=U,D=q.width,u=q.height;let K,r,H=0;const b=new Uint8Array(D*u*4);for(r=J;r!==s;r+=Q)for(K=g;K!==n;K+=X,H+=2)b[4*(K+D*r)+0]=W[H+0],b[4*(K+D*r)+1]=W[H+0],b[4*(K+D*r)+2]=W[H+0],b[4*(K+D*r)+3]=W[H+1];return b}};class X{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(q,c,U){const J=new Uint8Array(q.buffer,q.byteOffset,q.byteLength),g=Q(J);U(g.width,g.height,c.generateMipMaps,!1,(()=>{s(c,J)}))}}}}]);