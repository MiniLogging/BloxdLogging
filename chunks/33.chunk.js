"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[33],{13524:(s,Z,o)=>{o.r(Z),o.d(Z,{_TGATextureLoader:()=>O});var t=o(10955);function j(s){let Z=0;return{id_length:s[Z++],colormap_type:s[Z++],image_type:s[Z++],colormap_index:s[Z++]|s[Z++]<<8,colormap_length:s[Z++]|s[Z++]<<8,colormap_size:s[Z++],origin:[s[Z++]|s[Z++]<<8,s[Z++]|s[Z++]<<8],width:s[Z++]|s[Z++]<<8,height:s[Z++]|s[Z++]<<8,pixel_size:s[Z++],flags:s[Z++]}}function S(s,Z){if(Z.length<19)return void t.b.Error("Unable to load TGA file - Not enough data to contain header");let o=18;const S=j(Z);if(S.id_length+o>Z.length)return void t.b.Error("Unable to load TGA file - Not enough data");o+=S.id_length;let O,v=!1,G=!1,B=!1;switch(S.image_type){case 9:v=!0;case 1:G=!0;break;case 10:v=!0;case 2:break;case 11:v=!0;case 3:B=!0}const Q=S.pixel_size>>3,D=S.width*S.height*Q;let z,Y,b,f,A,d,U;if(G&&(z=Z.subarray(o,o+=S.colormap_length*(S.colormap_size>>3))),v){let s,t,j;O=new Uint8Array(D);let S=0;const a=new Uint8Array(Q);for(;o<D&&S<D;)if(s=Z[o++],t=1+(127&s),128&s){for(j=0;j<Q;++j)a[j]=Z[o++];for(j=0;j<t;++j)O.set(a,S+j*Q);S+=Q*t}else{for(t*=Q,j=0;j<t;++j)O[S+j]=Z[o++];S+=t}}else O=Z.subarray(o,o+=G?S.width*S.height:D);switch((48&S.flags)>>4){default:case 2:Y=0,f=1,U=S.width,b=0,A=1,d=S.height;break;case 0:Y=0,f=1,U=S.width,b=S.height-1,A=-1,d=-1;break;case 3:Y=S.width-1,f=-1,U=-1,b=0,A=1,d=S.height;break;case 1:Y=S.width-1,f=-1,U=-1,b=S.height-1,A=-1,d=-1}const u="_getImageData"+(B?"Grey":"")+S.pixel_size+"bits",H=a[u](S,z,O,b,A,d,Y,f,U);s.getEngine()._uploadDataToTextureDirectly(s,H)}const a={GetTGAHeader:j,UploadContent:S,_getImageData8bits:function(s,Z,o,t,j,S,a,O,v){const G=o,B=Z,Q=s.width,D=s.height;let z,Y,b,f=0;const A=new Uint8Array(Q*D*4);for(b=t;b!==S;b+=j)for(Y=a;Y!==v;Y+=O,f++)z=G[f],A[4*(Y+Q*b)+3]=255,A[4*(Y+Q*b)+2]=B[3*z+0],A[4*(Y+Q*b)+1]=B[3*z+1],A[4*(Y+Q*b)+0]=B[3*z+2];return A},_getImageData16bits:function(s,Z,o,t,j,S,a,O,v){const G=o,B=s.width,Q=s.height;let D,z,Y,b=0;const f=new Uint8Array(B*Q*4);for(Y=t;Y!==S;Y+=j)for(z=a;z!==v;z+=O,b+=2){D=G[b+0]+(G[b+1]<<8);const s=255*((31744&D)>>10)/31|0,Z=255*((992&D)>>5)/31|0,o=255*(31&D)/31|0;f[4*(z+B*Y)+0]=s,f[4*(z+B*Y)+1]=Z,f[4*(z+B*Y)+2]=o,f[4*(z+B*Y)+3]=32768&D?0:255}return f},_getImageData24bits:function(s,Z,o,t,j,S,a,O,v){const G=o,B=s.width,Q=s.height;let D,z,Y=0;const b=new Uint8Array(B*Q*4);for(z=t;z!==S;z+=j)for(D=a;D!==v;D+=O,Y+=3)b[4*(D+B*z)+3]=255,b[4*(D+B*z)+2]=G[Y+0],b[4*(D+B*z)+1]=G[Y+1],b[4*(D+B*z)+0]=G[Y+2];return b},_getImageData32bits:function(s,Z,o,t,j,S,a,O,v){const G=o,B=s.width,Q=s.height;let D,z,Y=0;const b=new Uint8Array(B*Q*4);for(z=t;z!==S;z+=j)for(D=a;D!==v;D+=O,Y+=4)b[4*(D+B*z)+2]=G[Y+0],b[4*(D+B*z)+1]=G[Y+1],b[4*(D+B*z)+0]=G[Y+2],b[4*(D+B*z)+3]=G[Y+3];return b},_getImageDataGrey8bits:function(s,Z,o,t,j,S,a,O,v){const G=o,B=s.width,Q=s.height;let D,z,Y,b=0;const f=new Uint8Array(B*Q*4);for(Y=t;Y!==S;Y+=j)for(z=a;z!==v;z+=O,b++)D=G[b],f[4*(z+B*Y)+0]=D,f[4*(z+B*Y)+1]=D,f[4*(z+B*Y)+2]=D,f[4*(z+B*Y)+3]=255;return f},_getImageDataGrey16bits:function(s,Z,o,t,j,S,a,O,v){const G=o,B=s.width,Q=s.height;let D,z,Y=0;const b=new Uint8Array(B*Q*4);for(z=t;z!==S;z+=j)for(D=a;D!==v;D+=O,Y+=2)b[4*(D+B*z)+0]=G[Y+0],b[4*(D+B*z)+1]=G[Y+0],b[4*(D+B*z)+2]=G[Y+0],b[4*(D+B*z)+3]=G[Y+1];return b}};class O{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(s,Z,o){const t=new Uint8Array(s.buffer,s.byteOffset,s.byteLength),a=j(t);o(a.width,a.height,Z.generateMipMaps,!1,(()=>{S(Z,t)}))}}}}]);