"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[33],{13680:(V,I,m)=>{m.r(I),m.d(I,{_TGATextureLoader:()=>k});var C=m(11085);function l(V){let I=0;return{id_length:V[I++],colormap_type:V[I++],image_type:V[I++],colormap_index:V[I++]|V[I++]<<8,colormap_length:V[I++]|V[I++]<<8,colormap_size:V[I++],origin:[V[I++]|V[I++]<<8,V[I++]|V[I++]<<8],width:V[I++]|V[I++]<<8,height:V[I++]|V[I++]<<8,pixel_size:V[I++],flags:V[I++]}}function s(V,I){if(I.length<19)return void C.d.Error("Unable to load TGA file - Not enough data to contain header");let m=18;const s=l(I);if(s.id_length+m>I.length)return void C.d.Error("Unable to load TGA file - Not enough data");m+=s.id_length;let k,j=!1,E=!1,K=!1;switch(s.image_type){case 9:j=!0;case 1:E=!0;break;case 10:j=!0;case 2:break;case 11:j=!0;case 3:K=!0}const Y=s.pixel_size>>3,X=s.width*s.height*Y;let O,v,N,t,D,b,T;if(E&&(O=I.subarray(m,m+=s.colormap_length*(s.colormap_size>>3))),j){let V,C,l;k=new Uint8Array(X);let s=0;const F=new Uint8Array(Y);for(;m<X&&s<X;)if(V=I[m++],C=1+(127&V),128&V){for(l=0;l<Y;++l)F[l]=I[m++];for(l=0;l<C;++l)k.set(F,s+l*Y);s+=Y*C}else{for(C*=Y,l=0;l<C;++l)k[s+l]=I[m++];s+=C}}else k=I.subarray(m,m+=E?s.width*s.height:X);switch((48&s.flags)>>4){default:case 2:v=0,t=1,T=s.width,N=0,D=1,b=s.height;break;case 0:v=0,t=1,T=s.width,N=s.height-1,D=-1,b=-1;break;case 3:v=s.width-1,t=-1,T=-1,N=0,D=1,b=s.height;break;case 1:v=s.width-1,t=-1,T=-1,N=s.height-1,D=-1,b=-1}const n="_getImageData"+(K?"Grey":"")+s.pixel_size+"bits",x=F[n](s,O,k,N,D,b,v,t,T);V.getEngine()._uploadDataToTextureDirectly(V,x)}const F={GetTGAHeader:l,UploadContent:s,_getImageData8bits:function(V,I,m,C,l,s,F,k,j){const E=m,K=I,Y=V.width,X=V.height;let O,v,N,t=0;const D=new Uint8Array(Y*X*4);for(N=C;N!==s;N+=l)for(v=F;v!==j;v+=k,t++)O=E[t],D[4*(v+Y*N)+3]=255,D[4*(v+Y*N)+2]=K[3*O+0],D[4*(v+Y*N)+1]=K[3*O+1],D[4*(v+Y*N)+0]=K[3*O+2];return D},_getImageData16bits:function(V,I,m,C,l,s,F,k,j){const E=m,K=V.width,Y=V.height;let X,O,v,N=0;const t=new Uint8Array(K*Y*4);for(v=C;v!==s;v+=l)for(O=F;O!==j;O+=k,N+=2){X=E[N+0]+(E[N+1]<<8);const V=255*((31744&X)>>10)/31|0,I=255*((992&X)>>5)/31|0,m=255*(31&X)/31|0;t[4*(O+K*v)+0]=V,t[4*(O+K*v)+1]=I,t[4*(O+K*v)+2]=m,t[4*(O+K*v)+3]=32768&X?0:255}return t},_getImageData24bits:function(V,I,m,C,l,s,F,k,j){const E=m,K=V.width,Y=V.height;let X,O,v=0;const N=new Uint8Array(K*Y*4);for(O=C;O!==s;O+=l)for(X=F;X!==j;X+=k,v+=3)N[4*(X+K*O)+3]=255,N[4*(X+K*O)+2]=E[v+0],N[4*(X+K*O)+1]=E[v+1],N[4*(X+K*O)+0]=E[v+2];return N},_getImageData32bits:function(V,I,m,C,l,s,F,k,j){const E=m,K=V.width,Y=V.height;let X,O,v=0;const N=new Uint8Array(K*Y*4);for(O=C;O!==s;O+=l)for(X=F;X!==j;X+=k,v+=4)N[4*(X+K*O)+2]=E[v+0],N[4*(X+K*O)+1]=E[v+1],N[4*(X+K*O)+0]=E[v+2],N[4*(X+K*O)+3]=E[v+3];return N},_getImageDataGrey8bits:function(V,I,m,C,l,s,F,k,j){const E=m,K=V.width,Y=V.height;let X,O,v,N=0;const t=new Uint8Array(K*Y*4);for(v=C;v!==s;v+=l)for(O=F;O!==j;O+=k,N++)X=E[N],t[4*(O+K*v)+0]=X,t[4*(O+K*v)+1]=X,t[4*(O+K*v)+2]=X,t[4*(O+K*v)+3]=255;return t},_getImageDataGrey16bits:function(V,I,m,C,l,s,F,k,j){const E=m,K=V.width,Y=V.height;let X,O,v=0;const N=new Uint8Array(K*Y*4);for(O=C;O!==s;O+=l)for(X=F;X!==j;X+=k,v+=2)N[4*(X+K*O)+0]=E[v+0],N[4*(X+K*O)+1]=E[v+0],N[4*(X+K*O)+2]=E[v+0],N[4*(X+K*O)+3]=E[v+1];return N}};class k{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(V,I,m){const C=new Uint8Array(V.buffer,V.byteOffset,V.byteLength),F=l(C);m(F.width,F.height,I.generateMipMaps,!1,(()=>{s(I,C)}))}}}}]);