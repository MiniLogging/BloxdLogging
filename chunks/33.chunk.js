"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[33],{13363:(h,d,m)=>{m.r(d),m.d(d,{_TGATextureLoader:()=>a});var j=m(11121);function A(h){let d=0;return{id_length:h[d++],colormap_type:h[d++],image_type:h[d++],colormap_index:h[d++]|h[d++]<<8,colormap_length:h[d++]|h[d++]<<8,colormap_size:h[d++],origin:[h[d++]|h[d++]<<8,h[d++]|h[d++]<<8],width:h[d++]|h[d++]<<8,height:h[d++]|h[d++]<<8,pixel_size:h[d++],flags:h[d++]}}function b(h,d){if(d.length<19)return void j.c.Error("Unable to load TGA file - Not enough data to contain header");let m=18;const b=A(d);if(b.id_length+m>d.length)return void j.c.Error("Unable to load TGA file - Not enough data");m+=b.id_length;let a,D=!1,S=!1,M=!1;switch(b.image_type){case 9:D=!0;case 1:S=!0;break;case 10:D=!0;case 2:break;case 11:D=!0;case 3:M=!0}const q=b.pixel_size>>3,E=b.width*b.height*q;let I,R,Z,L,B,V,v;if(S&&(I=d.subarray(m,m+=b.colormap_length*(b.colormap_size>>3))),D){let h,j,A;a=new Uint8Array(E);let b=0;const w=new Uint8Array(q);for(;m<E&&b<E;)if(h=d[m++],j=1+(127&h),128&h){for(A=0;A<q;++A)w[A]=d[m++];for(A=0;A<j;++A)a.set(w,b+A*q);b+=q*j}else{for(j*=q,A=0;A<j;++A)a[b+A]=d[m++];b+=j}}else a=d.subarray(m,m+=S?b.width*b.height:E);switch((48&b.flags)>>4){default:case 2:R=0,L=1,v=b.width,Z=0,B=1,V=b.height;break;case 0:R=0,L=1,v=b.width,Z=b.height-1,B=-1,V=-1;break;case 3:R=b.width-1,L=-1,v=-1,Z=0,B=1,V=b.height;break;case 1:R=b.width-1,L=-1,v=-1,Z=b.height-1,B=-1,V=-1}const C="_getImageData"+(M?"Grey":"")+b.pixel_size+"bits",T=w[C](b,I,a,Z,B,V,R,L,v);h.getEngine()._uploadDataToTextureDirectly(h,T)}const w={GetTGAHeader:A,UploadContent:b,_getImageData8bits:function(h,d,m,j,A,b,w,a,D){const S=m,M=d,q=h.width,E=h.height;let I,R,Z,L=0;const B=new Uint8Array(q*E*4);for(Z=j;Z!==b;Z+=A)for(R=w;R!==D;R+=a,L++)I=S[L],B[4*(R+q*Z)+3]=255,B[4*(R+q*Z)+2]=M[3*I+0],B[4*(R+q*Z)+1]=M[3*I+1],B[4*(R+q*Z)+0]=M[3*I+2];return B},_getImageData16bits:function(h,d,m,j,A,b,w,a,D){const S=m,M=h.width,q=h.height;let E,I,R,Z=0;const L=new Uint8Array(M*q*4);for(R=j;R!==b;R+=A)for(I=w;I!==D;I+=a,Z+=2){E=S[Z+0]+(S[Z+1]<<8);const h=255*((31744&E)>>10)/31|0,d=255*((992&E)>>5)/31|0,m=255*(31&E)/31|0;L[4*(I+M*R)+0]=h,L[4*(I+M*R)+1]=d,L[4*(I+M*R)+2]=m,L[4*(I+M*R)+3]=32768&E?0:255}return L},_getImageData24bits:function(h,d,m,j,A,b,w,a,D){const S=m,M=h.width,q=h.height;let E,I,R=0;const Z=new Uint8Array(M*q*4);for(I=j;I!==b;I+=A)for(E=w;E!==D;E+=a,R+=3)Z[4*(E+M*I)+3]=255,Z[4*(E+M*I)+2]=S[R+0],Z[4*(E+M*I)+1]=S[R+1],Z[4*(E+M*I)+0]=S[R+2];return Z},_getImageData32bits:function(h,d,m,j,A,b,w,a,D){const S=m,M=h.width,q=h.height;let E,I,R=0;const Z=new Uint8Array(M*q*4);for(I=j;I!==b;I+=A)for(E=w;E!==D;E+=a,R+=4)Z[4*(E+M*I)+2]=S[R+0],Z[4*(E+M*I)+1]=S[R+1],Z[4*(E+M*I)+0]=S[R+2],Z[4*(E+M*I)+3]=S[R+3];return Z},_getImageDataGrey8bits:function(h,d,m,j,A,b,w,a,D){const S=m,M=h.width,q=h.height;let E,I,R,Z=0;const L=new Uint8Array(M*q*4);for(R=j;R!==b;R+=A)for(I=w;I!==D;I+=a,Z++)E=S[Z],L[4*(I+M*R)+0]=E,L[4*(I+M*R)+1]=E,L[4*(I+M*R)+2]=E,L[4*(I+M*R)+3]=255;return L},_getImageDataGrey16bits:function(h,d,m,j,A,b,w,a,D){const S=m,M=h.width,q=h.height;let E,I,R=0;const Z=new Uint8Array(M*q*4);for(I=j;I!==b;I+=A)for(E=w;E!==D;E+=a,R+=2)Z[4*(E+M*I)+0]=S[R+0],Z[4*(E+M*I)+1]=S[R+0],Z[4*(E+M*I)+2]=S[R+0],Z[4*(E+M*I)+3]=S[R+1];return Z}};class a{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(h,d,m){const j=new Uint8Array(h.buffer,h.byteOffset,h.byteLength),w=A(j);m(w.width,w.height,d.generateMipMaps,!1,(()=>{b(d,j)}))}}}}]);