"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[33],{13600:(Z,c,L)=>{L.r(c),L.d(c,{_TGATextureLoader:()=>V});var k=L(11052);function N(Z){let c=0;return{id_length:Z[c++],colormap_type:Z[c++],image_type:Z[c++],colormap_index:Z[c++]|Z[c++]<<8,colormap_length:Z[c++]|Z[c++]<<8,colormap_size:Z[c++],origin:[Z[c++]|Z[c++]<<8,Z[c++]|Z[c++]<<8],width:Z[c++]|Z[c++]<<8,height:Z[c++]|Z[c++]<<8,pixel_size:Z[c++],flags:Z[c++]}}function R(Z,c){if(c.length<19)return void k.e.Error("Unable to load TGA file - Not enough data to contain header");let L=18;const R=N(c);if(R.id_length+L>c.length)return void k.e.Error("Unable to load TGA file - Not enough data");L+=R.id_length;let V,p=!1,J=!1,z=!1;switch(R.image_type){case 9:p=!0;case 1:J=!0;break;case 10:p=!0;case 2:break;case 11:p=!0;case 3:z=!0}const i=R.pixel_size>>3,t=R.width*R.height*i;let E,x,q,O,w,M,P;if(J&&(E=c.subarray(L,L+=R.colormap_length*(R.colormap_size>>3))),p){let Z,k,N;V=new Uint8Array(t);let R=0;const G=new Uint8Array(i);for(;L<t&&R<t;)if(Z=c[L++],k=1+(127&Z),128&Z){for(N=0;N<i;++N)G[N]=c[L++];for(N=0;N<k;++N)V.set(G,R+N*i);R+=i*k}else{for(k*=i,N=0;N<k;++N)V[R+N]=c[L++];R+=k}}else V=c.subarray(L,L+=J?R.width*R.height:t);switch((48&R.flags)>>4){default:case 2:x=0,O=1,P=R.width,q=0,w=1,M=R.height;break;case 0:x=0,O=1,P=R.width,q=R.height-1,w=-1,M=-1;break;case 3:x=R.width-1,O=-1,P=-1,q=0,w=1,M=R.height;break;case 1:x=R.width-1,O=-1,P=-1,q=R.height-1,w=-1,M=-1}const j="_getImageData"+(z?"Grey":"")+R.pixel_size+"bits",o=G[j](R,E,V,q,w,M,x,O,P);Z.getEngine()._uploadDataToTextureDirectly(Z,o)}const G={GetTGAHeader:N,UploadContent:R,_getImageData8bits:function(Z,c,L,k,N,R,G,V,p){const J=L,z=c,i=Z.width,t=Z.height;let E,x,q,O=0;const w=new Uint8Array(i*t*4);for(q=k;q!==R;q+=N)for(x=G;x!==p;x+=V,O++)E=J[O],w[4*(x+i*q)+3]=255,w[4*(x+i*q)+2]=z[3*E+0],w[4*(x+i*q)+1]=z[3*E+1],w[4*(x+i*q)+0]=z[3*E+2];return w},_getImageData16bits:function(Z,c,L,k,N,R,G,V,p){const J=L,z=Z.width,i=Z.height;let t,E,x,q=0;const O=new Uint8Array(z*i*4);for(x=k;x!==R;x+=N)for(E=G;E!==p;E+=V,q+=2){t=J[q+0]+(J[q+1]<<8);const Z=255*((31744&t)>>10)/31|0,c=255*((992&t)>>5)/31|0,L=255*(31&t)/31|0;O[4*(E+z*x)+0]=Z,O[4*(E+z*x)+1]=c,O[4*(E+z*x)+2]=L,O[4*(E+z*x)+3]=32768&t?0:255}return O},_getImageData24bits:function(Z,c,L,k,N,R,G,V,p){const J=L,z=Z.width,i=Z.height;let t,E,x=0;const q=new Uint8Array(z*i*4);for(E=k;E!==R;E+=N)for(t=G;t!==p;t+=V,x+=3)q[4*(t+z*E)+3]=255,q[4*(t+z*E)+2]=J[x+0],q[4*(t+z*E)+1]=J[x+1],q[4*(t+z*E)+0]=J[x+2];return q},_getImageData32bits:function(Z,c,L,k,N,R,G,V,p){const J=L,z=Z.width,i=Z.height;let t,E,x=0;const q=new Uint8Array(z*i*4);for(E=k;E!==R;E+=N)for(t=G;t!==p;t+=V,x+=4)q[4*(t+z*E)+2]=J[x+0],q[4*(t+z*E)+1]=J[x+1],q[4*(t+z*E)+0]=J[x+2],q[4*(t+z*E)+3]=J[x+3];return q},_getImageDataGrey8bits:function(Z,c,L,k,N,R,G,V,p){const J=L,z=Z.width,i=Z.height;let t,E,x,q=0;const O=new Uint8Array(z*i*4);for(x=k;x!==R;x+=N)for(E=G;E!==p;E+=V,q++)t=J[q],O[4*(E+z*x)+0]=t,O[4*(E+z*x)+1]=t,O[4*(E+z*x)+2]=t,O[4*(E+z*x)+3]=255;return O},_getImageDataGrey16bits:function(Z,c,L,k,N,R,G,V,p){const J=L,z=Z.width,i=Z.height;let t,E,x=0;const q=new Uint8Array(z*i*4);for(E=k;E!==R;E+=N)for(t=G;t!==p;t+=V,x+=2)q[4*(t+z*E)+0]=J[x+0],q[4*(t+z*E)+1]=J[x+0],q[4*(t+z*E)+2]=J[x+0],q[4*(t+z*E)+3]=J[x+1];return q}};class V{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(Z,c,L){const k=new Uint8Array(Z.buffer,Z.byteOffset,Z.byteLength),G=N(k);L(G.width,G.height,c.generateMipMaps,!1,(()=>{R(c,k)}))}}}}]);