"use strict";(self.qcdfysujsyf=self.qcdfysujsyf||[]).push([[114],{16022:(K,A,T)=>{T.r(A),T.d(A,{FlowGraphSetPropertyBlock:()=>f});var G=T(14295),B=T(14237),L=T(12651);class f extends G.d{constructor(K){super(K),this.config=K,this.object=this.registerDataInput("object",B.b,K.target),this.value=this.registerDataInput("value",B.b),this.propertyName=this.registerDataInput("propertyName",B.b,K.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",B.b)}_execute(K,A){try{const A=this.object.getValue(K),T=this.value.getValue(K),G=this.propertyName.getValue(K);this._stopRunningAnimations(K,A,G);const B=this.customSetFunction.getValue(K);B?B(A,G,T,K):this._setPropertyValue(A,G,T)}catch(T){this._reportError(K,T)}this.out._activateSignal(K)}_stopRunningAnimations(K,A,T){const G=K._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const B of G){const L=K.assetsContext.animationGroups.find((K=>K.uniqueId===B));if(L)for(const f of L.targetedAnimations)if(f.target===A&&f.animation.targetProperty===T){L.stop(!0),L.dispose();const A=G.indexOf(B);-1!==A&&(G.splice(A,1),K._setGlobalContextVariable("currentlyRunningAnimationGroups",G))}}}_setPropertyValue(K,A,T){const G=A.split(".");let B=K;for(let L=0;L<G.length-1;L++){const K=G[L];void 0===B[K]&&(B[K]={}),B=B[K]}B[G[G.length-1]]=T}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,L.c)("FlowGraphSetPropertyBlock",f)}}]);