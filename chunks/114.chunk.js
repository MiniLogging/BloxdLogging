"use strict";(self.z22hkk7o33f=self.z22hkk7o33f||[]).push([[114],{15792:(U,G,C)=>{C.r(G),C.d(G,{FlowGraphSetPropertyBlock:()=>t});var L=C(14188),X=C(14134),l=C(12850);class t extends L.d{constructor(U){super(U),this.config=U,this.object=this.registerDataInput("object",X.c,U.target),this.value=this.registerDataInput("value",X.c),this.propertyName=this.registerDataInput("propertyName",X.c,U.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",X.c)}_execute(U,G){try{const G=this.object.getValue(U),C=this.value.getValue(U),L=this.propertyName.getValue(U);this._stopRunningAnimations(U,G,L);const X=this.customSetFunction.getValue(U);X?X(G,L,C,U):this._setPropertyValue(G,L,C)}catch(C){this._reportError(U,C)}this.out._activateSignal(U)}_stopRunningAnimations(U,G,C){const L=U._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const X of L){const l=U.assetsContext.animationGroups.find((U=>U.uniqueId===X));if(l)for(const t of l.targetedAnimations)if(t.target===G&&t.animation.targetProperty===C){l.stop(!0),l.dispose();const G=L.indexOf(X);-1!==G&&(L.splice(G,1),U._setGlobalContextVariable("currentlyRunningAnimationGroups",L))}}}_setPropertyValue(U,G,C){const L=G.split(".");let X=U;for(let l=0;l<L.length-1;l++){const U=L[l];void 0===X[U]&&(X[U]={}),X=X[U]}X[L[L.length-1]]=C}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,l.e)("FlowGraphSetPropertyBlock",t)}}]);