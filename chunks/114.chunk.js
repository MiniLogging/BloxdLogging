"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[114],{14518:(h,V,i)=>{i.r(V),i.d(V,{FlowGraphSetPropertyBlock:()=>g});var S=i(12861),l=i(12805),Y=i(11091);class g extends S.e{constructor(h){super(h),this.config=h,this.object=this.registerDataInput("object",l.c,h.target),this.value=this.registerDataInput("value",l.c),this.propertyName=this.registerDataInput("propertyName",l.c,h.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",l.c)}_execute(h,V){try{const V=this.object.getValue(h),i=this.value.getValue(h),S=this.propertyName.getValue(h);this._stopRunningAnimations(h,V,S);const l=this.customSetFunction.getValue(h);l?l(V,S,i,h):this._setPropertyValue(V,S,i)}catch(i){this._reportError(h,i)}this.out._activateSignal(h)}_stopRunningAnimations(h,V,i){const S=h._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const l of S){const Y=h.assetsContext.animationGroups.find((h=>h.uniqueId===l));if(Y)for(const g of Y.targetedAnimations)if(g.target===V&&g.animation.targetProperty===i){Y.stop(!0),Y.dispose();const V=S.indexOf(l);-1!==V&&(S.splice(V,1),h._setGlobalContextVariable("currentlyRunningAnimationGroups",S))}}}_setPropertyValue(h,V,i){const S=V.split(".");let l=h;for(let Y=0;Y<S.length-1;Y++){const h=S[Y];void 0===l[h]&&(l[h]={}),l=l[h]}l[S[S.length-1]]=i}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,Y.f)("FlowGraphSetPropertyBlock",g)}}]);