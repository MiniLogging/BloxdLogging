"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[114],{14596:(o,H,n)=>{n.r(H),n.d(H,{FlowGraphSetPropertyBlock:()=>O});var E=n(12983),k=n(12933),g=n(11140);class O extends E.c{constructor(o){super(o),this.config=o,this.object=this.registerDataInput("object",k.b,o.target),this.value=this.registerDataInput("value",k.b),this.propertyName=this.registerDataInput("propertyName",k.b,o.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",k.b)}_execute(o,H){try{const H=this.object.getValue(o),n=this.value.getValue(o),E=this.propertyName.getValue(o);this._stopRunningAnimations(o,H,E);const k=this.customSetFunction.getValue(o);k?k(H,E,n,o):this._setPropertyValue(H,E,n)}catch(n){this._reportError(o,n)}this.out._activateSignal(o)}_stopRunningAnimations(o,H,n){const E=o._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const k of E){const g=o.assetsContext.animationGroups.find((o=>o.uniqueId===k));if(g)for(const O of g.targetedAnimations)if(O.target===H&&O.animation.targetProperty===n){g.stop(!0),g.dispose();const H=E.indexOf(k);-1!==H&&(E.splice(H,1),o._setGlobalContextVariable("currentlyRunningAnimationGroups",E))}}}_setPropertyValue(o,H,n){const E=H.split(".");let k=o;for(let g=0;g<E.length-1;g++){const o=E[g];void 0===k[o]&&(k[o]={}),k=k[o]}k[E[E.length-1]]=n}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,g.e)("FlowGraphSetPropertyBlock",O)}}]);