"use strict";(self.ufnpnb83drd=self.ufnpnb83drd||[]).push([[114],{15742:(E,U,g)=>{g.r(U),g.d(U,{FlowGraphSetPropertyBlock:()=>S});var N=g(14100),L=g(14058),D=g(12292);class S extends N.e{constructor(E){super(E),this.config=E,this.object=this.registerDataInput("object",L.e,E.target),this.value=this.registerDataInput("value",L.e),this.propertyName=this.registerDataInput("propertyName",L.e,E.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",L.e)}_execute(E,U){try{const U=this.object.getValue(E),g=this.value.getValue(E),N=this.propertyName.getValue(E);this._stopRunningAnimations(E,U,N);const L=this.customSetFunction.getValue(E);L?L(U,N,g,E):this._setPropertyValue(U,N,g)}catch(g){this._reportError(E,g)}this.out._activateSignal(E)}_stopRunningAnimations(E,U,g){const N=E._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const L of N){const D=E.assetsContext.animationGroups.find((E=>E.uniqueId===L));if(D)for(const S of D.targetedAnimations)if(S.target===U&&S.animation.targetProperty===g){D.stop(!0),D.dispose();const U=N.indexOf(L);-1!==U&&(N.splice(U,1),E._setGlobalContextVariable("currentlyRunningAnimationGroups",N))}}}_setPropertyValue(E,U,g){const N=U.split(".");let L=E;for(let D=0;D<N.length-1;D++){const E=N[D];void 0===L[E]&&(L[E]={}),L=L[E]}L[N[N.length-1]]=g}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,D.f)("FlowGraphSetPropertyBlock",S)}}]);