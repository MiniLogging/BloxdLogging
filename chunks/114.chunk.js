"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[114],{14559:(P,f,Y)=>{Y.r(f),Y.d(f,{FlowGraphSetPropertyBlock:()=>L});var C=Y(12974),q=Y(12917),m=Y(11134);class L extends C.d{constructor(P){super(P),this.config=P,this.object=this.registerDataInput("object",q.d,P.target),this.value=this.registerDataInput("value",q.d),this.propertyName=this.registerDataInput("propertyName",q.d,P.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",q.d)}_execute(P,f){try{const f=this.object.getValue(P),Y=this.value.getValue(P),C=this.propertyName.getValue(P);this._stopRunningAnimations(P,f,C);const q=this.customSetFunction.getValue(P);q?q(f,C,Y,P):this._setPropertyValue(f,C,Y)}catch(Y){this._reportError(P,Y)}this.out._activateSignal(P)}_stopRunningAnimations(P,f,Y){const C=P._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const q of C){const m=P.assetsContext.animationGroups.find((P=>P.uniqueId===q));if(m)for(const L of m.targetedAnimations)if(L.target===f&&L.animation.targetProperty===Y){m.stop(!0),m.dispose();const f=C.indexOf(q);-1!==f&&(C.splice(f,1),P._setGlobalContextVariable("currentlyRunningAnimationGroups",C))}}}_setPropertyValue(P,f,Y){const C=f.split(".");let q=P;for(let m=0;m<C.length-1;m++){const P=C[m];void 0===q[P]&&(q[P]={}),q=q[P]}q[C[C.length-1]]=Y}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,m.d)("FlowGraphSetPropertyBlock",L)}}]);