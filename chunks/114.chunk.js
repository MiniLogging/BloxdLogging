"use strict";(self.gpkvekif0vo=self.gpkvekif0vo||[]).push([[114],{15749:(a,O,i)=>{i.r(O),i.d(O,{FlowGraphSetPropertyBlock:()=>q});var H=i(14164),b=i(14124),G=i(12346);class q extends H.c{constructor(a){super(a),this.config=a,this.object=this.registerDataInput("object",b.e,a.target),this.value=this.registerDataInput("value",b.e),this.propertyName=this.registerDataInput("propertyName",b.e,a.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",b.e)}_execute(a,O){try{const O=this.object.getValue(a),i=this.value.getValue(a),H=this.propertyName.getValue(a);this._stopRunningAnimations(a,O,H);const b=this.customSetFunction.getValue(a);b?b(O,H,i,a):this._setPropertyValue(O,H,i)}catch(i){this._reportError(a,i)}this.out._activateSignal(a)}_stopRunningAnimations(a,O,i){const H=a._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const b of H){const G=a.assetsContext.animationGroups.find((a=>a.uniqueId===b));if(G)for(const q of G.targetedAnimations)if(q.target===O&&q.animation.targetProperty===i){G.stop(!0),G.dispose();const O=H.indexOf(b);-1!==O&&(H.splice(O,1),a._setGlobalContextVariable("currentlyRunningAnimationGroups",H))}}}_setPropertyValue(a,O,i){const H=O.split(".");let b=a;for(let G=0;G<H.length-1;G++){const a=H[G];void 0===b[a]&&(b[a]={}),b=b[a]}b[H[H.length-1]]=i}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,G.h)("FlowGraphSetPropertyBlock",q)}}]);