"use strict";(self.dwifukwnts=self.dwifukwnts||[]).push([[114],{14936:(U,X,b)=>{b.r(X),b.d(X,{FlowGraphSetPropertyBlock:()=>Q});var F=b(13333),E=b(13281),w=b(11551);class Q extends F.d{constructor(U){super(U),this.config=U,this.object=this.registerDataInput("object",E.b,U.target),this.value=this.registerDataInput("value",E.b),this.propertyName=this.registerDataInput("propertyName",E.b,U.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",E.b)}_execute(U,X){try{const X=this.object.getValue(U),b=this.value.getValue(U),F=this.propertyName.getValue(U);this._stopRunningAnimations(U,X,F);const E=this.customSetFunction.getValue(U);E?E(X,F,b,U):this._setPropertyValue(X,F,b)}catch(b){this._reportError(U,b)}this.out._activateSignal(U)}_stopRunningAnimations(U,X,b){const F=U._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const E of F){const w=U.assetsContext.animationGroups.find((U=>U.uniqueId===E));if(w)for(const Q of w.targetedAnimations)if(Q.target===X&&Q.animation.targetProperty===b){w.stop(!0),w.dispose();const X=F.indexOf(E);-1!==X&&(F.splice(X,1),U._setGlobalContextVariable("currentlyRunningAnimationGroups",F))}}}_setPropertyValue(U,X,b){const F=X.split(".");let E=U;for(let w=0;w<F.length-1;w++){const U=F[w];void 0===E[U]&&(E[U]={}),E=E[U]}E[F[F.length-1]]=b}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,w.f)("FlowGraphSetPropertyBlock",Q)}}]);