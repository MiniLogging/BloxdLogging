"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[114],{14485:(q,S,b)=>{b.r(S),b.d(S,{FlowGraphSetPropertyBlock:()=>U});var z=b(12866),C=b(12839),v=b(11058);class U extends z.e{constructor(q){super(q),this.config=q,this.object=this.registerDataInput("object",C.d,q.target),this.value=this.registerDataInput("value",C.d),this.propertyName=this.registerDataInput("propertyName",C.d,q.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",C.d)}_execute(q,S){try{const S=this.object.getValue(q),b=this.value.getValue(q),z=this.propertyName.getValue(q);this._stopRunningAnimations(q,S,z);const C=this.customSetFunction.getValue(q);C?C(S,z,b,q):this._setPropertyValue(S,z,b)}catch(b){this._reportError(q,b)}this.out._activateSignal(q)}_stopRunningAnimations(q,S,b){const z=q._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const C of z){const v=q.assetsContext.animationGroups.find((q=>q.uniqueId===C));if(v)for(const U of v.targetedAnimations)if(U.target===S&&U.animation.targetProperty===b){v.stop(!0),v.dispose();const S=z.indexOf(C);-1!==S&&(z.splice(S,1),q._setGlobalContextVariable("currentlyRunningAnimationGroups",z))}}}_setPropertyValue(q,S,b){const z=S.split(".");let C=q;for(let v=0;v<z.length-1;v++){const q=z[v];void 0===C[q]&&(C[q]={}),C=C[q]}C[z[z.length-1]]=b}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,v.f)("FlowGraphSetPropertyBlock",U)}}]);