"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[114],{14546:(B,I,C)=>{C.r(I),C.d(I,{FlowGraphSetPropertyBlock:()=>f});var M=C(12952),x=C(12901),y=C(11149);class f extends M.b{constructor(B){super(B),this.config=B,this.object=this.registerDataInput("object",x.b,B.target),this.value=this.registerDataInput("value",x.b),this.propertyName=this.registerDataInput("propertyName",x.b,B.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",x.b)}_execute(B,I){try{const I=this.object.getValue(B),C=this.value.getValue(B),M=this.propertyName.getValue(B);this._stopRunningAnimations(B,I,M);const x=this.customSetFunction.getValue(B);x?x(I,M,C,B):this._setPropertyValue(I,M,C)}catch(C){this._reportError(B,C)}this.out._activateSignal(B)}_stopRunningAnimations(B,I,C){const M=B._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const x of M){const y=B.assetsContext.animationGroups.find((B=>B.uniqueId===x));if(y)for(const f of y.targetedAnimations)if(f.target===I&&f.animation.targetProperty===C){y.stop(!0),y.dispose();const I=M.indexOf(x);-1!==I&&(M.splice(I,1),B._setGlobalContextVariable("currentlyRunningAnimationGroups",M))}}}_setPropertyValue(B,I,C){const M=I.split(".");let x=B;for(let y=0;y<M.length-1;y++){const B=M[y];void 0===x[B]&&(x[B]={}),x=x[B]}x[M[M.length-1]]=C}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,y.h)("FlowGraphSetPropertyBlock",f)}}]);