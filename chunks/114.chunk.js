"use strict";(self.pp3k1ov3ibi=self.pp3k1ov3ibi||[]).push([[114],{15736:(M,Z,P)=>{P.r(Z),P.d(Z,{FlowGraphSetPropertyBlock:()=>v});var x=P(14117),c=P(14073),w=P(12317);class v extends x.e{constructor(M){super(M),this.config=M,this.object=this.registerDataInput("object",c.e,M.target),this.value=this.registerDataInput("value",c.e),this.propertyName=this.registerDataInput("propertyName",c.e,M.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",c.e)}_execute(M,Z){try{const Z=this.object.getValue(M),P=this.value.getValue(M),x=this.propertyName.getValue(M);this._stopRunningAnimations(M,Z,x);const c=this.customSetFunction.getValue(M);c?c(Z,x,P,M):this._setPropertyValue(Z,x,P)}catch(P){this._reportError(M,P)}this.out._activateSignal(M)}_stopRunningAnimations(M,Z,P){const x=M._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const c of x){const w=M.assetsContext.animationGroups.find((M=>M.uniqueId===c));if(w)for(const v of w.targetedAnimations)if(v.target===Z&&v.animation.targetProperty===P){w.stop(!0),w.dispose();const Z=x.indexOf(c);-1!==Z&&(x.splice(Z,1),M._setGlobalContextVariable("currentlyRunningAnimationGroups",x))}}}_setPropertyValue(M,Z,P){const x=Z.split(".");let c=M;for(let w=0;w<x.length-1;w++){const M=x[w];void 0===c[M]&&(c[M]={}),c=c[M]}c[x[x.length-1]]=P}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,w.g)("FlowGraphSetPropertyBlock",v)}}]);