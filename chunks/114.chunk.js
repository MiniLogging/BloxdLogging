"use strict";(self.xeuzlpp225k=self.xeuzlpp225k||[]).push([[114],{14662:(k,Q,i)=>{i.r(Q),i.d(Q,{FlowGraphSetPropertyBlock:()=>B});var Z=i(13114),U=i(13064),C=i(11253);class B extends Z.c{constructor(k){super(k),this.config=k,this.object=this.registerDataInput("object",U.b,k.target),this.value=this.registerDataInput("value",U.b),this.propertyName=this.registerDataInput("propertyName",U.b,k.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",U.b)}_execute(k,Q){try{const Q=this.object.getValue(k),i=this.value.getValue(k),Z=this.propertyName.getValue(k);this._stopRunningAnimations(k,Q,Z);const U=this.customSetFunction.getValue(k);U?U(Q,Z,i,k):this._setPropertyValue(Q,Z,i)}catch(i){this._reportError(k,i)}this.out._activateSignal(k)}_stopRunningAnimations(k,Q,i){const Z=k._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const U of Z){const C=k.assetsContext.animationGroups.find((k=>k.uniqueId===U));if(C)for(const B of C.targetedAnimations)if(B.target===Q&&B.animation.targetProperty===i){C.stop(!0),C.dispose();const Q=Z.indexOf(U);-1!==Q&&(Z.splice(Q,1),k._setGlobalContextVariable("currentlyRunningAnimationGroups",Z))}}}_setPropertyValue(k,Q,i){const Z=Q.split(".");let U=k;for(let C=0;C<Z.length-1;C++){const k=Z[C];void 0===U[k]&&(U[k]={}),U=U[k]}U[Z[Z.length-1]]=i}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,C.e)("FlowGraphSetPropertyBlock",B)}}]);