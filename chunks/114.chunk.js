"use strict";(self["3gghkoft8x"]=self["3gghkoft8x"]||[]).push([[114],{15669:(y,S,I)=>{I.r(S),I.d(S,{FlowGraphSetPropertyBlock:()=>B});var V=I(14080),i=I(14033),A=I(12282);class B extends V.d{constructor(y){super(y),this.config=y,this.object=this.registerDataInput("object",i.c,y.target),this.value=this.registerDataInput("value",i.c),this.propertyName=this.registerDataInput("propertyName",i.c,y.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",i.c)}_execute(y,S){try{const S=this.object.getValue(y),I=this.value.getValue(y),V=this.propertyName.getValue(y);this._stopRunningAnimations(y,S,V);const i=this.customSetFunction.getValue(y);i?i(S,V,I,y):this._setPropertyValue(S,V,I)}catch(I){this._reportError(y,I)}this.out._activateSignal(y)}_stopRunningAnimations(y,S,I){const V=y._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const i of V){const A=y.assetsContext.animationGroups.find((y=>y.uniqueId===i));if(A)for(const B of A.targetedAnimations)if(B.target===S&&B.animation.targetProperty===I){A.stop(!0),A.dispose();const S=V.indexOf(i);-1!==S&&(V.splice(S,1),y._setGlobalContextVariable("currentlyRunningAnimationGroups",V))}}}_setPropertyValue(y,S,I){const V=S.split(".");let i=y;for(let A=0;A<V.length-1;A++){const y=V[A];void 0===i[y]&&(i[y]={}),i=i[y]}i[V[V.length-1]]=I}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,A.e)("FlowGraphSetPropertyBlock",B)}}]);