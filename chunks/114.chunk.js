"use strict";(self.yg1iw12lizp=self.yg1iw12lizp||[]).push([[114],{16005:(L,U,x)=>{x.r(U),x.d(U,{FlowGraphSetPropertyBlock:()=>F});var mL=x(14401),p=x(14348),G=x(12547);class F extends mL.d{constructor(L){super(L),this.config=L,this.object=this.registerDataInput("object",p.c,L.target),this.value=this.registerDataInput("value",p.c),this.propertyName=this.registerDataInput("propertyName",p.c,L.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",p.c)}_execute(L,U){try{const U=this.object.getValue(L),x=this.value.getValue(L),mL=this.propertyName.getValue(L);this._stopRunningAnimations(L,U,mL);const p=this.customSetFunction.getValue(L);p?p(U,mL,x,L):this._setPropertyValue(U,mL,x)}catch(x){this._reportError(L,x)}this.out._activateSignal(L)}_stopRunningAnimations(L,U,x){const mL=L._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const p of mL){const G=L.assetsContext.animationGroups.find((L=>L.uniqueId===p));if(G)for(const F of G.targetedAnimations)if(F.target===U&&F.animation.targetProperty===x){G.stop(!0),G.dispose();const U=mL.indexOf(p);-1!==U&&(mL.splice(U,1),L._setGlobalContextVariable("currentlyRunningAnimationGroups",mL))}}}_setPropertyValue(L,U,x){const mL=U.split(".");let p=L;for(let G=0;G<mL.length-1;G++){const L=mL[G];void 0===p[L]&&(p[L]={}),p=p[L]}p[mL[mL.length-1]]=x}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,G.d)("FlowGraphSetPropertyBlock",F)}}]);