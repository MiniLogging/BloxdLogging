"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[114],{14452:(g,w,q)=>{q.r(w),q.d(w,{FlowGraphSetPropertyBlock:()=>S});var R=q(12879),o=q(12836),r=q(11128);class S extends R.c{constructor(g){super(g),this.config=g,this.object=this.registerDataInput("object",o.d,g.target),this.value=this.registerDataInput("value",o.d),this.propertyName=this.registerDataInput("propertyName",o.d,g.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",o.d)}_execute(g,w){try{const w=this.object.getValue(g),q=this.value.getValue(g),R=this.propertyName.getValue(g);this._stopRunningAnimations(g,w,R);const o=this.customSetFunction.getValue(g);o?o(w,R,q,g):this._setPropertyValue(w,R,q)}catch(q){this._reportError(g,q)}this.out._activateSignal(g)}_stopRunningAnimations(g,w,q){const R=g._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const o of R){const r=g.assetsContext.animationGroups.find((g=>g.uniqueId===o));if(r)for(const S of r.targetedAnimations)if(S.target===w&&S.animation.targetProperty===q){r.stop(!0),r.dispose();const w=R.indexOf(o);-1!==w&&(R.splice(w,1),g._setGlobalContextVariable("currentlyRunningAnimationGroups",R))}}}_setPropertyValue(g,w,q){const R=w.split(".");let o=g;for(let r=0;r<R.length-1;r++){const g=R[r];void 0===o[g]&&(o[g]={}),o=o[g]}o[R[R.length-1]]=q}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,r.g)("FlowGraphSetPropertyBlock",S)}}]);