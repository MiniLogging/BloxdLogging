"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[114],{14608:(Z,x,F)=>{F.r(x),F.d(x,{FlowGraphSetPropertyBlock:()=>Y});var u=F(13007),G=F(12954),f=F(11136);class Y extends u.e{constructor(Z){super(Z),this.config=Z,this.object=this.registerDataInput("object",G.d,Z.target),this.value=this.registerDataInput("value",G.d),this.propertyName=this.registerDataInput("propertyName",G.d,Z.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",G.d)}_execute(Z,x){try{const x=this.object.getValue(Z),F=this.value.getValue(Z),u=this.propertyName.getValue(Z);this._stopRunningAnimations(Z,x,u);const G=this.customSetFunction.getValue(Z);G?G(x,u,F,Z):this._setPropertyValue(x,u,F)}catch(F){this._reportError(Z,F)}this.out._activateSignal(Z)}_stopRunningAnimations(Z,x,F){const u=Z._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const G of u){const f=Z.assetsContext.animationGroups.find((Z=>Z.uniqueId===G));if(f)for(const Y of f.targetedAnimations)if(Y.target===x&&Y.animation.targetProperty===F){f.stop(!0),f.dispose();const x=u.indexOf(G);-1!==x&&(u.splice(x,1),Z._setGlobalContextVariable("currentlyRunningAnimationGroups",u))}}}_setPropertyValue(Z,x,F){const u=x.split(".");let G=Z;for(let f=0;f<u.length-1;f++){const Z=u[f];void 0===G[Z]&&(G[Z]={}),G=G[Z]}G[u[u.length-1]]=F}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,f.g)("FlowGraphSetPropertyBlock",Y)}}]);