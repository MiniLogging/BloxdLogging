"use strict";(self.isj1uwvwrek=self.isj1uwvwrek||[]).push([[114],{16191:(I,x,L)=>{L.r(x),L.d(x,{FlowGraphSetPropertyBlock:()=>Y});var F=L(14540),X=L(14498),G=L(12938);class Y extends F.e{constructor(I){super(I),this.config=I,this.object=this.registerDataInput("object",X.e,I.target),this.value=this.registerDataInput("value",X.e),this.propertyName=this.registerDataInput("propertyName",X.e,I.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",X.e)}_execute(I,x){try{const x=this.object.getValue(I),L=this.value.getValue(I),F=this.propertyName.getValue(I);this._stopRunningAnimations(I,x,F);const X=this.customSetFunction.getValue(I);X?X(x,F,L,I):this._setPropertyValue(x,F,L)}catch(L){this._reportError(I,L)}this.out._activateSignal(I)}_stopRunningAnimations(I,x,L){const F=I._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const X of F){const G=I.assetsContext.animationGroups.find((I=>I.uniqueId===X));if(G)for(const Y of G.targetedAnimations)if(Y.target===x&&Y.animation.targetProperty===L){G.stop(!0),G.dispose();const x=F.indexOf(X);-1!==x&&(F.splice(x,1),I._setGlobalContextVariable("currentlyRunningAnimationGroups",F))}}}_setPropertyValue(I,x,L){const F=x.split(".");let X=I;for(let G=0;G<F.length-1;G++){const I=F[G];void 0===X[I]&&(X[I]={}),X=X[I]}X[F[F.length-1]]=L}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,G.d)("FlowGraphSetPropertyBlock",Y)}}]);