"use strict";(self.hbnkweqmycf=self.hbnkweqmycf||[]).push([[114],{14958:(F,P,f)=>{f.r(P),f.d(P,{FlowGraphSetPropertyBlock:()=>H});var c=f(13312),N=f(13265),q=f(11587);class H extends c.d{constructor(F){super(F),this.config=F,this.object=this.registerDataInput("object",N.c,F.target),this.value=this.registerDataInput("value",N.c),this.propertyName=this.registerDataInput("propertyName",N.c,F.propertyName),this.customSetFunction=this.registerDataInput("customSetFunction",N.c)}_execute(F,P){try{const P=this.object.getValue(F),f=this.value.getValue(F),c=this.propertyName.getValue(F);this._stopRunningAnimations(F,P,c);const N=this.customSetFunction.getValue(F);N?N(P,c,f,F):this._setPropertyValue(P,c,f)}catch(f){this._reportError(F,f)}this.out._activateSignal(F)}_stopRunningAnimations(F,P,f){const c=F._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const N of c){const q=F.assetsContext.animationGroups.find((F=>F.uniqueId===N));if(q)for(const H of q.targetedAnimations)if(H.target===P&&H.animation.targetProperty===f){q.stop(!0),q.dispose();const P=c.indexOf(N);-1!==P&&(c.splice(P,1),F._setGlobalContextVariable("currentlyRunningAnimationGroups",c))}}}_setPropertyValue(F,P,f){const c=P.split(".");let N=F;for(let q=0;q<c.length-1;q++){const F=c[q];void 0===N[F]&&(N[F]={}),N=N[F]}N[c[c.length-1]]=f}getClassName(){return"FlowGraphSetPropertyBlock"}}(0,q.f)("FlowGraphSetPropertyBlock",H)}}]);