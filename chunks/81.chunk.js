"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[81],{14121:(P,Q,O)=>{O.r(Q),O.d(Q,{FlowGraphSwitchBlock:()=>q});var b=O(12882),F=O(12871),g=O(696),m=O(12900);class q extends b.d{constructor(P){super(P),this.config=P,this.default=this._registerSignalOutput("default"),this._caseToOutputFlow=new Map,this.case=this.registerDataInput("case",F.d);const Q=this.config.cases||[];for(const O of Q)this._caseToOutputFlow.set(O,this._registerSignalOutput(`out_${O}`))}_execute(P,Q){const O=this.case.getValue(P);let b;b=(0,m.s)(O)?this._getOutputFlowForCase((0,m.o)(O)):this._getOutputFlowForCase(O),b?b._activateSignal(P):this.default._activateSignal(P)}addCase(P){this.config.cases.includes(P)||(this.config.cases.push(P),this._caseToOutputFlow.set(P,this._registerSignalOutput(`out_${P}`)))}removeCase(P){if(!this.config.cases.includes(P))return;const Q=this.config.cases.indexOf(P);this.config.cases.splice(Q,1),this._caseToOutputFlow.delete(P)}_getOutputFlowForCase(P){return this._caseToOutputFlow.get(P)}getClassName(){return"FlowGraphSwitchBlock"}serialize(P){super.serialize(P),P.cases=this.config.cases}}(0,g.f)("FlowGraphSwitchBlock",q)}}]);