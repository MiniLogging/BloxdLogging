"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[7],{11128:(L,i,P)=>{P.r(i),P.d(i,{Dispose:()=>c,DumpData:()=>T,DumpDataAsync:()=>C,DumpFramebuffer:()=>U,DumpTools:()=>r});var D=P(1542),V=P(1217),M=P(1033),a=P(1024);let w,O=null;async function U(L,i,P,D){let V=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",M=arguments.length>5?arguments[5]:void 0,a=arguments.length>6?arguments[6]:void 0;const w=await P.readPixels(0,0,L,i);T(L,i,new Uint8Array(w.buffer),D,V,M,!0,void 0,a)}function C(L,i,P){let D=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"image/png",V=arguments.length>4?arguments[4]:void 0,M=arguments.length>5&&void 0!==arguments[5]&&arguments[5],a=arguments.length>6&&void 0!==arguments[6]&&arguments[6],w=arguments.length>7?arguments[7]:void 0;return new Promise((O=>{T(L,i,P,(L=>O(L)),D,V,M,a,w)}))}function T(L,i,U,C){let T=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"image/png",r=arguments.length>5?arguments[5]:void 0,F=arguments.length>6&&void 0!==arguments[6]&&arguments[6],S=arguments.length>7&&void 0!==arguments[7]&&arguments[7],q=arguments.length>8?arguments[8]:void 0;(async function(){return O||(O=new Promise(((L,i)=>{let V,M=null;const O={xe:!0,depth:!1,stencil:!1,alpha:!0,premultipliedAlpha:!1,antialias:!1,failIfMajorPerformanceCaveat:!1};Promise.resolve().then(P.bind(P,1445)).then((U=>{let{ThinEngine:C}=U;try{V=new OffscreenCanvas(100,100),M=new C(V,!1,O)}catch(r){V=document.createElement("canvas"),M=new C(V,!1,O)}a.c.Instances.pop(),a.c.OnEnginesDisposedObservable.add((L=>{M&&L!==M&&!M.u&&0===a.c.Instances.length&&c()})),M.getCaps().parallelShaderCompile=void 0;const T=new D.b(M);P.e(32).then(P.bind(P,11834)).then((P=>{let{passPixelShader:a}=P;if(!M)return void i("Engine is not defined");const O=new D.e({Md:M,name:a.name,fragmentShader:a.shader,samplerNames:["textureSampler"]});w={canvas:V,Md:M,renderer:T,wrapper:O},L(w)}))})).catch(i)}))),await O})().then((P=>{if(P.Md.setSize(L,i,!0),U instanceof Float32Array){const L=new Uint8Array(U.length);let i=U.length;for(;i--;){const P=U[i];L[i]=Math.round(255*(0,M.c)(P))}U=L}const D=P.Md.createRawTexture(U,L,i,5,!1,!F,1);P.renderer.setViewport(),P.renderer.applyEffectWrapper(P.wrapper),P.wrapper.effect._bindTexture("textureSampler",D),P.renderer.draw(),S?V.g.ToBlob(P.canvas,(L=>{const i=new FileReader;i.onload=L=>{const i=L.target.result;C&&C(i)},i.readAsArrayBuffer(L)}),T,q):V.g.EncodeScreenshotCanvasData(P.canvas,C,T,r,q),D.dispose()}))}function c(){var L;w?(w.wrapper.dispose(),w.renderer.dispose(),w.Md.dispose()):null===(L=O)||void 0===L||L.then((L=>{L.wrapper.dispose(),L.renderer.dispose(),L.Md.dispose()}));O=null,w=null}const r={DumpData:T,DumpDataAsync:C,DumpFramebuffer:U,Dispose:c};V.g.DumpData=T,V.g.DumpDataAsync=C,V.g.DumpFramebuffer=U}}]);