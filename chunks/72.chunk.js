"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[72],{14155:(t,q,S)=>{S.r(q),S.d(q,{FlowGraphAbsBlock:()=>U,FlowGraphAcosBlock:()=>zt,FlowGraphAcoshBlock:()=>Ot,FlowGraphAddBlock:()=>h,FlowGraphAsinBlock:()=>Bt,FlowGraphAsinhBlock:()=>bt,FlowGraphAtan2Block:()=>rt,FlowGraphAtanBlock:()=>Lt,FlowGraphAtanhBlock:()=>it,FlowGraphBitwiseAndBlock:()=>Vt,FlowGraphBitwiseLeftShiftBlock:()=>Ht,FlowGraphBitwiseNotBlock:()=>kt,FlowGraphBitwiseOrBlock:()=>Jt,FlowGraphBitwiseRightShiftBlock:()=>jt,FlowGraphBitwiseXorBlock:()=>Ut,FlowGraphCeilBlock:()=>Q,FlowGraphClampBlock:()=>m,FlowGraphCosBlock:()=>St,FlowGraphCoshBlock:()=>Ct,FlowGraphCubeRootBlock:()=>Mt,FlowGraphDegToRadBlock:()=>R,FlowGraphDivideBlock:()=>a,FlowGraphEBlock:()=>M,FlowGraphEqualityBlock:()=>N,FlowGraphExpBlock:()=>ht,FlowGraphFloorBlock:()=>y,FlowGraphFractionBlock:()=>X,FlowGraphGreaterThanBlock:()=>p,FlowGraphGreaterThanOrEqualBlock:()=>P,FlowGraphInfBlock:()=>k,FlowGraphIsInfinityBlock:()=>d,FlowGraphIsNanBlock:()=>F,FlowGraphLeadingZerosBlock:()=>yt,FlowGraphLessThanBlock:()=>w,FlowGraphLessThanOrEqualBlock:()=>E,FlowGraphLog10Block:()=>at,FlowGraphLog2Block:()=>It,FlowGraphLogBlock:()=>lt,FlowGraphMathInterpolationBlock:()=>g,FlowGraphMaxBlock:()=>W,FlowGraphMinBlock:()=>u,FlowGraphModuloBlock:()=>n,FlowGraphMultiplyBlock:()=>I,FlowGraphNaNBlock:()=>V,FlowGraphNegationBlock:()=>G,FlowGraphOneBitsCounterBlock:()=>Kt,FlowGraphPiBlock:()=>x,FlowGraphPowerBlock:()=>xt,FlowGraphRadToDegBlock:()=>tt,FlowGraphRandomBlock:()=>v,FlowGraphRoundBlock:()=>K,FlowGraphSaturateBlock:()=>c,FlowGraphSignBlock:()=>H,FlowGraphSinBlock:()=>qt,FlowGraphSinhBlock:()=>et,FlowGraphSquareRootBlock:()=>vt,FlowGraphSubtractBlock:()=>l,FlowGraphTanBlock:()=>ot,FlowGraphTanhBlock:()=>Zt,FlowGraphTrailingZerosBlock:()=>Qt,FlowGraphTruncBlock:()=>j});var o=S(622),B=S(12927),z=S(14160),L=S(14163);class r extends L.c{constructor(t,q,S,o){super(t,o),this._operation=q,this._className=S}_doOperation(t){return this._operation(t)}getClassName(){return this._className}}var e=S(678),C=S(14165);class Z extends L.c{constructor(t,q,S,o,B,z,L){super(o,L),this._operation=B,this._className=z,this.a=this.registerDataInput("a",t),this.b=this.registerDataInput("b",q),this.c=this.registerDataInput("c",S)}_doOperation(t){return this._operation(this.a.getValue(t),this.b.getValue(t),this.c.getValue(t))}getClassName(){return this._className}}var b=S(12922),O=S(12934),i=S(12957);class h extends z.e{constructor(t){super((0,B.R)(null===t||void 0===t?void 0:t.type),(0,B.R)(null===t||void 0===t?void 0:t.type),(0,B.R)(null===t||void 0===t?void 0:t.type),((t,q)=>this._polymorphicAdd(t,q)),"FlowGraphAddBlock",t)}_polymorphicAdd(t,q){const S=(0,i.i)(t),o=(0,i.i)(q);if((0,i.h)(S,o)||(0,i.d)(S,o)||(0,i.c)(S,o))return t.add(q);if("Quaternion"===S||"Vector4"===o)return new e.s(t.x,t.y,t.z,t.w).addInPlace(q);if("Vector4"===S||"Quaternion"===o)return t.add(q);var B;if(null!==(B=this.config)&&void 0!==B&&B.preventIntegerFloatArithmetic&&typeof t!==typeof q)throw new Error("Cannot add different types of numbers.");return(0,i.q)(t)+(0,i.q)(q)}}(0,o.c)("FlowGraphAddBlock",h);class l extends z.e{constructor(t){super((0,B.R)(null===t||void 0===t?void 0:t.type),(0,B.R)(null===t||void 0===t?void 0:t.type),(0,B.R)(null===t||void 0===t?void 0:t.type),((t,q)=>this._polymorphicSubtract(t,q)),"FlowGraphSubtractBlock",t)}_polymorphicSubtract(t,q){const S=(0,i.i)(t),o=(0,i.i)(q);if((0,i.h)(S,o)||(0,i.c)(S,o)||(0,i.d)(S,o))return t.Kg(q);if("Quaternion"===S||"Vector4"===o)return new e.s(t.x,t.y,t.z,t.w).Yi(q);if("Vector4"===S||"Quaternion"===o)return t.Kg(q);var B;if(null!==(B=this.config)&&void 0!==B&&B.preventIntegerFloatArithmetic&&typeof t!==typeof q)throw new Error("Cannot add different types of numbers.");return(0,i.q)(t)-(0,i.q)(q)}}(0,o.c)("FlowGraphSubtractBlock",l);class I extends z.e{constructor(t){super((0,B.R)(null===t||void 0===t?void 0:t.type),(0,B.R)(null===t||void 0===t?void 0:t.type),(0,B.R)(null===t||void 0===t?void 0:t.type),((t,q)=>this._polymorphicMultiply(t,q)),"FlowGraphMultiplyBlock",t)}_polymorphicMultiply(t,q){const S=(0,i.i)(t),o=(0,i.i)(q);if((0,i.h)(S,o)||(0,i.c)(S,o))return t.multiply(q);if("Quaternion"===S||"Vector4"===o)return new e.s(t.x,t.y,t.z,t.w).multiplyInPlace(q);if("Vector4"===S||"Quaternion"===o)return t.multiply(q);if((0,i.d)(S,o)){var B;if(null!==(B=this.config)&&void 0!==B&&B.useMatrixPerComponent){const o=t.m;for(let t=0;t<o.length;t++)o[t]*=q.m[t];return"Matrix2D"===S?new O.b(o):"Matrix3D"===S?new O.e(o):e.e.ti(o)}return q.multiply(t)}var z;if(null!==(z=this.config)&&void 0!==z&&z.preventIntegerFloatArithmetic&&typeof t!==typeof q)throw new Error("Cannot add different types of numbers.");return(0,i.q)(t)*(0,i.q)(q)}}(0,o.c)("FlowGraphMultiplyBlock",I);class a extends z.e{constructor(t){super((0,B.R)(null===t||void 0===t?void 0:t.type),(0,B.R)(null===t||void 0===t?void 0:t.type),(0,B.R)(null===t||void 0===t?void 0:t.type),((t,q)=>this._polymorphicDivide(t,q)),"FlowGraphDivideBlock",t)}_polymorphicDivide(t,q){const S=(0,i.i)(t),o=(0,i.i)(q);if((0,i.h)(S,o)||(0,i.c)(S,o))return t.divide(q);if("Quaternion"===S||"Quaternion"===o){const S=t.clone();return S.x/=q.x,S.y/=q.y,S.z/=q.z,S.w/=q.w,S}if("Quaternion"===S||"Vector4"===o)return new e.s(t.x,t.y,t.z,t.w).divideInPlace(q);if("Vector4"===S||"Quaternion"===o)return t.divide(q);if((0,i.d)(S,o)){var B;if(null!==(B=this.config)&&void 0!==B&&B.useMatrixPerComponent){const o=t.m;for(let t=0;t<o.length;t++)o[t]/=q.m[t];return"Matrix2D"===S?new O.b(o):"Matrix3D"===S?new O.e(o):e.e.ti(o)}return t.divide(q)}var z;if(null!==(z=this.config)&&void 0!==z&&z.preventIntegerFloatArithmetic&&typeof t!==typeof q)throw new Error("Cannot add different types of numbers.");return(0,i.q)(t)/(0,i.q)(q)}}(0,o.c)("FlowGraphDivideBlock",a);class v extends r{constructor(t){super(B.v,(t=>this._random(t)),"FlowGraphRandomBlock",t),this.min=this.registerDataInput("min",B.v,(null===t||void 0===t?void 0:t.min)??0),this.max=this.registerDataInput("max",B.v,(null===t||void 0===t?void 0:t.max)??1),null!==t&&void 0!==t&&t.seed&&(this._seed=t.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const t=1e4*Math.sin(this._seed++);return t-Math.floor(t)}return Math.random()}_random(t){const q=this.min.getValue(t),S=this.max.getValue(t);return this._getRandomValue()*(S-q)+q}}(0,o.c)("FlowGraphRandomBlock",v);class M extends r{constructor(t){super(B.v,(()=>Math.E),"FlowGraphEBlock",t)}}(0,o.c)("FlowGraphEBlock",M);class x extends r{constructor(t){super(B.v,(()=>Math.PI),"FlowGraphPIBlock",t)}}(0,o.c)("FlowGraphPIBlock",x);class k extends r{constructor(t){super(B.v,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",t)}}(0,o.c)("FlowGraphInfBlock",k);class V extends r{constructor(t){super(B.v,(()=>Number.NaN),"FlowGraphNaNBlock",t)}}function J(t,q){switch((0,i.i)(t)){case"FlowGraphInteger":return new b.e(q(t.value));case"Vector2":return new e.l(q(t.x),q(t.y));case"wi":return new e.o(q(t.x),q(t.y),q(t.z));case"Vector4":return new e.s(q(t.x),q(t.y),q(t.z),q(t.w));case"Quaternion":return new e.g(q(t.x),q(t.y),q(t.z),q(t.w));case"Matrix":return e.e.ti(t.m.map(q));case"Matrix2D":return new O.b(t.m.map(q));case"Matrix3D":return new O.e(t.m.map(q));default:return q(t)}}(0,o.c)("FlowGraphNaNBlock",V);class U extends C.b{constructor(t){super(B.v,B.v,(t=>this._polymorphicAbs(t)),"FlowGraphAbsBlock",t)}_polymorphicAbs(t){return J(t,Math.abs)}}(0,o.c)("FlowGraphAbsBlock",U);class H extends C.b{constructor(t){super(B.v,B.v,(t=>this._polymorphicSign(t)),"FlowGraphSignBlock",t)}_polymorphicSign(t){return J(t,Math.sign)}}(0,o.c)("FlowGraphSignBlock",H);class j extends C.b{constructor(t){super(B.v,B.v,(t=>this._polymorphicTrunc(t)),"FlowGraphTruncBlock",t)}_polymorphicTrunc(t){return J(t,Math.trunc)}}(0,o.c)("FlowGraphTruncBlock",j);class y extends C.b{constructor(t){super(B.v,B.v,(t=>this._polymorphicFloor(t)),"FlowGraphFloorBlock",t)}_polymorphicFloor(t){return J(t,Math.floor)}}(0,o.c)("FlowGraphFloorBlock",y);class Q extends C.b{constructor(t){super(B.b,B.b,(t=>this._polymorphicCeiling(t)),"FlowGraphCeilBlock",t)}_polymorphicCeiling(t){return J(t,Math.ceil)}}(0,o.c)("FlowGraphCeilBlock",Q);class K extends C.b{constructor(t){super(B.b,B.b,(t=>this._polymorphicRound(t)),"FlowGraphRoundBlock",t)}_polymorphicRound(t){return J(t,(t=>{var q;return t<0&&null!==(q=this.config)&&void 0!==q&&q.roundHalfAwayFromZero?-Math.round(-t):Math.round(t)}))}}(0,o.c)("FlowGraphRoundBlock",K);class X extends C.b{constructor(t){super(B.b,B.b,(t=>this._polymorphicFraction(t)),"FlowGraphFractBlock",t)}_polymorphicFraction(t){return J(t,(t=>t-Math.floor(t)))}}(0,o.c)("FlowGraphFractBlock",X);class G extends C.b{constructor(t){super(B.b,B.b,(t=>this._polymorphicNeg(t)),"FlowGraphNegationBlock",t)}_polymorphicNeg(t){return J(t,(t=>-t))}}function Y(t,q,S){switch((0,i.i)(t)){case"FlowGraphInteger":return new b.e(S(t.value,q.value));case"Vector2":return new e.l(S(t.x,q.x),S(t.y,q.y));case"wi":return new e.o(S(t.x,q.x),S(t.y,q.y),S(t.z,q.z));case"Vector4":return new e.s(S(t.x,q.x),S(t.y,q.y),S(t.z,q.z),S(t.w,q.w));case"Quaternion":return new e.g(S(t.x,q.x),S(t.y,q.y),S(t.z,q.z),S(t.w,q.w));case"Matrix":return e.e.ti(t.m.map(((t,o)=>S(t,q.m[o]))));case"Matrix2D":return new O.b(t.m.map(((t,o)=>S(t,q.m[o]))));case"Matrix3D":return new O.e(t.m.map(((t,o)=>S(t,q.m[o]))));default:return S((0,i.q)(t),(0,i.q)(q))}}(0,o.c)("FlowGraphNegationBlock",G);class n extends z.e{constructor(t){super(B.b,B.b,B.b,((t,q)=>this._polymorphicRemainder(t,q)),"FlowGraphModuloBlock",t)}_polymorphicRemainder(t,q){return Y(t,q,((t,q)=>t%q))}}(0,o.c)("FlowGraphModuloBlock",n);class u extends z.e{constructor(t){super(B.b,B.b,B.b,((t,q)=>this._polymorphicMin(t,q)),"FlowGraphMinBlock",t)}_polymorphicMin(t,q){return Y(t,q,Math.min)}}(0,o.c)("FlowGraphMinBlock",u);class W extends z.e{constructor(t){super(B.b,B.b,B.b,((t,q)=>this._polymorphicMax(t,q)),"FlowGraphMaxBlock",t)}_polymorphicMax(t,q){return Y(t,q,Math.max)}}function f(t,q,S){return Math.min(Math.max(t,Math.min(q,S)),Math.max(q,S))}function D(t,q,S,o){switch((0,i.i)(t)){case"FlowGraphInteger":return new b.e(o(t.value,q.value,S.value));case"Vector2":return new e.l(o(t.x,q.x,S.x),o(t.y,q.y,S.y));case"wi":return new e.o(o(t.x,q.x,S.x),o(t.y,q.y,S.y),o(t.z,q.z,S.z));case"Vector4":return new e.s(o(t.x,q.x,S.x),o(t.y,q.y,S.y),o(t.z,q.z,S.z),o(t.w,q.w,S.w));case"Quaternion":return new e.g(o(t.x,q.x,S.x),o(t.y,q.y,S.y),o(t.z,q.z,S.z),o(t.w,q.w,S.w));case"Matrix":return e.e.ti(t.m.map(((t,B)=>o(t,q.m[B],S.m[B]))));case"Matrix2D":return new O.b(t.m.map(((t,B)=>o(t,q.m[B],S.m[B]))));case"Matrix3D":return new O.e(t.m.map(((t,B)=>o(t,q.m[B],S.m[B]))));default:return o((0,i.q)(t),(0,i.q)(q),(0,i.q)(S))}}(0,o.c)("FlowGraphMaxBlock",W);class m extends Z{constructor(t){super(B.b,B.b,B.b,B.b,((t,q,S)=>this._polymorphicClamp(t,q,S)),"FlowGraphClampBlock",t)}_polymorphicClamp(t,q,S){return D(t,q,S,f)}}function A(t){return Math.min(Math.max(t,0),1)}(0,o.c)("FlowGraphClampBlock",m);class c extends C.b{constructor(t){super(B.b,B.b,(t=>this._polymorphicSaturate(t)),"FlowGraphSaturateBlock",t)}_polymorphicSaturate(t){return J(t,A)}}function s(t,q,S){return(1-S)*t+S*q}(0,o.c)("FlowGraphSaturateBlock",c);class g extends Z{constructor(t){super(B.b,B.b,B.b,B.b,((t,q,S)=>this._polymorphicInterpolate(t,q,S)),"FlowGraphMathInterpolationBlock",t)}_polymorphicInterpolate(t,q,S){return D(t,q,S,s)}}(0,o.c)("FlowGraphMathInterpolationBlock",g);class N extends z.e{constructor(t){super(B.b,B.b,B.f,((t,q)=>this._polymorphicEq(t,q)),"FlowGraphEqualityBlock",t)}_polymorphicEq(t,q){const S=(0,i.i)(t),o=(0,i.i)(q);return typeof t===typeof q&&((0,i.h)(S,o)||(0,i.d)(S,o)||(0,i.c)(S,o)?t.equals(q):t===q)}}function T(t,q,S){if((0,i.u)(t)&&(0,i.u)(q))return S((0,i.q)(t),(0,i.q)(q));throw new Error(`Cannot compare ${t} and ${q}`)}(0,o.c)("FlowGraphEqualityBlock",N);class w extends z.e{constructor(t){super(B.b,B.b,B.f,((t,q)=>this._polymorphicLessThan(t,q)),"FlowGraphLessThanBlock",t)}_polymorphicLessThan(t,q){return T(t,q,((t,q)=>t<q))}}(0,o.c)("FlowGraphLessThanBlock",w);class E extends z.e{constructor(t){super(B.b,B.b,B.f,((t,q)=>this._polymorphicLessThanOrEqual(t,q)),"FlowGraphLessThanOrEqualBlock",t)}_polymorphicLessThanOrEqual(t,q){return T(t,q,((t,q)=>t<=q))}}(0,o.c)("FlowGraphLessThanOrEqualBlock",E);class p extends z.e{constructor(t){super(B.b,B.b,B.f,((t,q)=>this._polymorphicGreaterThan(t,q)),"FlowGraphGreaterThanBlock",t)}_polymorphicGreaterThan(t,q){return T(t,q,((t,q)=>t>q))}}(0,o.c)("FlowGraphGreaterThanBlock",p);class P extends z.e{constructor(t){super(B.b,B.b,B.f,((t,q)=>this._polymorphicGreaterThanOrEqual(t,q)),"FlowGraphGreaterThanOrEqualBlock",t)}_polymorphicGreaterThanOrEqual(t,q){return T(t,q,((t,q)=>t>=q))}}(0,o.c)("FlowGraphGreaterThanOrEqualBlock",P);class F extends C.b{constructor(t){super(B.b,B.f,(t=>this._polymorphicIsNan(t)),"FlowGraphIsNaNBlock",t)}_polymorphicIsNan(t){if((0,i.u)(t,!0))return isNaN((0,i.q)(t));throw new Error(`Cannot get NaN of ${t}`)}}(0,o.c)("FlowGraphIsNaNBlock",F);class d extends C.b{constructor(t){super(B.b,B.f,(t=>this._polymorphicIsInf(t)),"FlowGraphIsInfBlock",t)}_polymorphicIsInf(t){if((0,i.u)(t))return!isFinite((0,i.q)(t));throw new Error(`Cannot get isInf of ${t}`)}}(0,o.c)("FlowGraphIsInfBlock",d);class R extends C.b{constructor(t){super(B.b,B.b,(t=>this._polymorphicDegToRad(t)),"FlowGraphDegToRadBlock",t)}_degToRad(t){return t*Math.PI/180}_polymorphicDegToRad(t){return J(t,this._degToRad)}}(0,o.c)("FlowGraphDegToRadBlock",R);class tt extends C.b{constructor(t){super(B.b,B.b,(t=>this._polymorphicRadToDeg(t)),"FlowGraphRadToDegBlock",t)}_radToDeg(t){return 180*t/Math.PI}_polymorphicRadToDeg(t){return J(t,this._radToDeg)}}(0,o.c)("FlowGraphRadToDegBlock",tt);class qt extends C.b{constructor(t){super(B.v,B.v,(t=>this._polymorphicSin(t)),"FlowGraphSinBlock",t)}_polymorphicSin(t){return J(t,Math.sin)}}class St extends C.b{constructor(t){super(B.v,B.v,(t=>this._polymorphicCos(t)),"FlowGraphCosBlock",t)}_polymorphicCos(t){return J(t,Math.cos)}}class ot extends C.b{constructor(t){super(B.v,B.v,(t=>this._polymorphicTan(t)),"FlowGraphTanBlock",t)}_polymorphicTan(t){return J(t,Math.tan)}}class Bt extends C.b{constructor(t){super(B.v,B.v,(t=>this._polymorphicAsin(t)),"FlowGraphASinBlock",t)}_polymorphicAsin(t){return J(t,Math.asin)}}(0,o.c)("FlowGraphASinBlock",Bt);class zt extends C.b{constructor(t){super(B.v,B.v,(t=>this._polymorphicAcos(t)),"FlowGraphACosBlock",t)}_polymorphicAcos(t){return J(t,Math.acos)}}(0,o.c)("FlowGraphACosBlock",zt);class Lt extends C.b{constructor(t){super(B.v,B.v,(t=>this._polymorphicAtan(t)),"FlowGraphATanBlock",t)}_polymorphicAtan(t){return J(t,Math.atan)}}(0,o.c)("FlowGraphATanBlock",Lt);class rt extends z.e{constructor(t){super(B.b,B.b,B.b,((t,q)=>this._polymorphicAtan2(t,q)),"FlowGraphATan2Block",t)}_polymorphicAtan2(t,q){return Y(t,q,Math.atan2)}}(0,o.c)("FlowGraphATan2Block",rt);class et extends C.b{constructor(t){super(B.b,B.b,(t=>this._polymorphicSinh(t)),"FlowGraphSinhBlock",t)}_polymorphicSinh(t){return J(t,Math.sinh)}}(0,o.c)("FlowGraphSinhBlock",et);class Ct extends C.b{constructor(t){super(B.b,B.b,(t=>this._polymorphicCosh(t)),"FlowGraphCoshBlock",t)}_polymorphicCosh(t){return J(t,Math.cosh)}}(0,o.c)("FlowGraphCoshBlock",Ct);class Zt extends C.b{constructor(t){super(B.b,B.b,(t=>this._polymorphicTanh(t)),"FlowGraphTanhBlock",t)}_polymorphicTanh(t){return J(t,Math.tanh)}}(0,o.c)("FlowGraphTanhBlock",Zt);class bt extends C.b{constructor(t){super(B.b,B.v,(t=>this._polymorphicAsinh(t)),"FlowGraphASinhBlock",t)}_polymorphicAsinh(t){return J(t,Math.asinh)}}(0,o.c)("FlowGraphASinhBlock",bt);class Ot extends C.b{constructor(t){super(B.b,B.v,(t=>this._polymorphicAcosh(t)),"FlowGraphACoshBlock",t)}_polymorphicAcosh(t){return J(t,Math.acosh)}}(0,o.c)("FlowGraphACoshBlock",Ot);class it extends C.b{constructor(t){super(B.b,B.v,(t=>this._polymorphicAtanh(t)),"FlowGraphATanhBlock",t)}_polymorphicAtanh(t){return J(t,Math.atanh)}}(0,o.c)("FlowGraphATanhBlock",it);class ht extends C.b{constructor(t){super(B.b,B.v,(t=>this._polymorphicExp(t)),"FlowGraphExponentialBlock",t)}_polymorphicExp(t){return J(t,Math.exp)}}(0,o.c)("FlowGraphExponentialBlock",ht);class lt extends C.b{constructor(t){super(B.b,B.v,(t=>this._polymorphicLog(t)),"FlowGraphLogBlock",t)}_polymorphicLog(t){return J(t,Math.log)}}(0,o.c)("FlowGraphLogBlock",lt);class It extends C.b{constructor(t){super(B.b,B.v,(t=>this._polymorphicLog2(t)),"FlowGraphLog2Block",t)}_polymorphicLog2(t){return J(t,Math.log2)}}(0,o.c)("FlowGraphLog2Block",It);class at extends C.b{constructor(t){super(B.b,B.v,(t=>this._polymorphicLog10(t)),"FlowGraphLog10Block",t)}_polymorphicLog10(t){return J(t,Math.log10)}}(0,o.c)("FlowGraphLog10Block",at);class vt extends C.b{constructor(t){super(B.b,B.v,(t=>this._polymorphicSqrt(t)),"FlowGraphSquareRootBlock",t)}_polymorphicSqrt(t){return J(t,Math.sqrt)}}(0,o.c)("FlowGraphSquareRootBlock",vt);class Mt extends C.b{constructor(t){super(B.b,B.v,(t=>this._polymorphicCubeRoot(t)),"FlowGraphCubeRootBlock",t)}_polymorphicCubeRoot(t){return J(t,Math.cbrt)}}(0,o.c)("FlowGraphCubeRootBlock",Mt);class xt extends z.e{constructor(t){super(B.b,B.v,B.v,((t,q)=>this._polymorphicPow(t,q)),"FlowGraphPowerBlock",t)}_polymorphicPow(t,q){return Y(t,q,Math.pow)}}(0,o.c)("FlowGraphPowerBlock",xt);class kt extends C.b{constructor(t){super((0,B.R)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,B.R)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(t=>"boolean"===typeof t?!t:"number"===typeof t?~t:new b.e(~t.value)),"FlowGraphBitwiseNotBlock",t)}}(0,o.c)("FlowGraphBitwiseNotBlock",kt);class Vt extends z.e{constructor(t){super((0,B.R)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,B.R)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,B.R)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),((t,q)=>{if("boolean"===typeof t&&"boolean"===typeof q)return t&&q;if("number"===typeof t&&"number"===typeof q)return t&q;if("object"===typeof t&&"object"===typeof q)return new b.e(t.value&q.value);throw new Error(`Cannot perform bitwise AND on ${t} and ${q}`)}),"FlowGraphBitwiseAndBlock",t)}}(0,o.c)("FlowGraphBitwiseAndBlock",Vt);class Jt extends z.e{constructor(t){super((0,B.R)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,B.R)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,B.R)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),((t,q)=>{if("boolean"===typeof t&&"boolean"===typeof q)return t||q;if("number"===typeof t&&"number"===typeof q)return t|q;if("object"===typeof t&&"object"===typeof q)return new b.e(t.value|q.value);throw new Error(`Cannot perform bitwise OR on ${t} and ${q}`)}),"FlowGraphBitwiseOrBlock",t)}}(0,o.c)("FlowGraphBitwiseOrBlock",Jt);class Ut extends z.e{constructor(t){super((0,B.R)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,B.R)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),(0,B.R)((null===t||void 0===t?void 0:t.valueType)||"FlowGraphInteger"),((t,q)=>{if("boolean"===typeof t&&"boolean"===typeof q)return t!==q;if("number"===typeof t&&"number"===typeof q)return t^q;if("object"===typeof t&&"object"===typeof q)return new b.e(t.value^q.value);throw new Error(`Cannot perform bitwise XOR on ${t} and ${q}`)}),"FlowGraphBitwiseXorBlock",t)}}(0,o.c)("FlowGraphBitwiseXorBlock",Ut);class Ht extends z.e{constructor(t){super(B.h,B.h,B.h,((t,q)=>new b.e(t.value<<q.value)),"FlowGraphBitwiseLeftShiftBlock",t)}}(0,o.c)("FlowGraphBitwiseLeftShiftBlock",Ht);class jt extends z.e{constructor(t){super(B.h,B.h,B.h,((t,q)=>new b.e(t.value>>q.value)),"FlowGraphBitwiseRightShiftBlock",t)}}(0,o.c)("FlowGraphBitwiseRightShiftBlock",jt);class yt extends C.b{constructor(t){super(B.h,B.h,(t=>new b.e(Math.clz32(t.value))),"FlowGraphLeadingZerosBlock",t)}}(0,o.c)("FlowGraphLeadingZerosBlock",yt);class Qt extends C.b{constructor(t){super(B.h,B.h,(t=>new b.e(t.value?31-Math.clz32(t.value&-t.value):32)),"FlowGraphTrailingZerosBlock",t)}}(0,o.c)("FlowGraphTrailingZerosBlock",Qt);class Kt extends C.b{constructor(t){super(B.h,B.h,(t=>new b.e(function(t){let q=0;for(;t;)q+=1&t,t>>=1;return q}(t.value))),"FlowGraphOneBitsCounterBlock",t)}}(0,o.c)("FlowGraphOneBitsCounterBlock",Kt)},14160:(t,q,S)=>{S.d(q,{e:()=>B});var o=S(14163);class B extends o.c{constructor(t,q,S,o,B,z){super(S,z),this._operation=o,this._className=B,this.a=this.registerDataInput("a",t),this.b=this.registerDataInput("b",q)}_doOperation(t){const q=this.a.getValue(t),S=this.b.getValue(t);return this._operation(q,S)}getClassName(){return this._className}}},14163:(t,q,S)=>{S.d(q,{c:()=>r});var o=S(12946),B=S(12927);const z="cachedOperationValue",L="cachedExecutionId";class r extends o.d{constructor(t,q){super(q),this.value=this.registerDataOutput("value",t),this.isValid=this.registerDataOutput("isValid",B.f)}_updateOutputs(t){const q=t._getExecutionVariable(this,L,-1),S=t._getExecutionVariable(this,z,null);if(void 0!==S&&null!==S&&q===t.executionId)this.isValid.setValue(!0,t),this.value.setValue(S,t);else try{const q=this._doOperation(t);if(void 0===q||null===q)return void this.isValid.setValue(!1,t);t._setExecutionVariable(this,z,q),t._setExecutionVariable(this,L,t.executionId),this.value.setValue(q,t),this.isValid.setValue(!0,t)}catch(o){this.isValid.setValue(!1,t)}}}},14165:(t,q,S)=>{S.d(q,{b:()=>B});var o=S(14163);class B extends o.c{constructor(t,q,S,o,B){super(q,B),this._operation=S,this._className=o,this.a=this.registerDataInput("a",t)}_doOperation(t){return this._operation(this.a.getValue(t))}getClassName(){return this._className}}}}]);