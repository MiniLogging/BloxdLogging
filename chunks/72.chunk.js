"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[72],{14016:(c,b,A)=>{A.r(b),A.d(b,{FlowGraphAbsBlock:()=>z,FlowGraphAcosBlock:()=>nc,FlowGraphAcoshBlock:()=>Rc,FlowGraphAddBlock:()=>k,FlowGraphAsinBlock:()=>tc,FlowGraphAsinhBlock:()=>Xc,FlowGraphAtan2Block:()=>sc,FlowGraphAtanBlock:()=>hc,FlowGraphAtanhBlock:()=>Nc,FlowGraphBitwiseAndBlock:()=>dc,FlowGraphBitwiseLeftShiftBlock:()=>Yc,FlowGraphBitwiseNotBlock:()=>Wc,FlowGraphBitwiseOrBlock:()=>rc,FlowGraphBitwiseRightShiftBlock:()=>Dc,FlowGraphBitwiseXorBlock:()=>zc,FlowGraphCeilBlock:()=>v,FlowGraphClampBlock:()=>S,FlowGraphCosBlock:()=>Ac,FlowGraphCoshBlock:()=>Cc,FlowGraphCubeRootBlock:()=>Fc,FlowGraphDegToRadBlock:()=>m,FlowGraphDivideBlock:()=>y,FlowGraphEBlock:()=>F,FlowGraphEqualityBlock:()=>T,FlowGraphExpBlock:()=>kc,FlowGraphFloorBlock:()=>f,FlowGraphFractionBlock:()=>P,FlowGraphGreaterThanBlock:()=>e,FlowGraphGreaterThanOrEqualBlock:()=>x,FlowGraphInfBlock:()=>W,FlowGraphIsInfinityBlock:()=>w,FlowGraphIsNanBlock:()=>U,FlowGraphLeadingZerosBlock:()=>fc,FlowGraphLessThanBlock:()=>g,FlowGraphLessThanOrEqualBlock:()=>u,FlowGraphLog10Block:()=>yc,FlowGraphLog2Block:()=>Vc,FlowGraphLogBlock:()=>Ec,FlowGraphMathInterpolationBlock:()=>l,FlowGraphMaxBlock:()=>K,FlowGraphMinBlock:()=>I,FlowGraphModuloBlock:()=>q,FlowGraphMultiplyBlock:()=>V,FlowGraphNaNBlock:()=>d,FlowGraphNegationBlock:()=>O,FlowGraphOneBitsCounterBlock:()=>Gc,FlowGraphPiBlock:()=>M,FlowGraphPowerBlock:()=>Mc,FlowGraphRadToDegBlock:()=>cc,FlowGraphRandomBlock:()=>j,FlowGraphRoundBlock:()=>G,FlowGraphSaturateBlock:()=>Q,FlowGraphSignBlock:()=>Y,FlowGraphSinBlock:()=>bc,FlowGraphSinhBlock:()=>Lc,FlowGraphSquareRootBlock:()=>jc,FlowGraphSubtractBlock:()=>E,FlowGraphTanBlock:()=>oc,FlowGraphTanhBlock:()=>Jc,FlowGraphTrailingZerosBlock:()=>vc,FlowGraphTruncBlock:()=>D});var o=A(633),t=A(12763),n=A(14018),h=A(14025);class s extends h.d{constructor(c,b,A,o){super(c,o),this._operation=b,this._className=A}_doOperation(c){return this._operation(c)}getClassName(){return this._className}}var L=A(688),C=A(14034);class J extends h.d{constructor(c,b,A,o,t,n,h){super(o,h),this._operation=t,this._className=n,this.a=this.registerDataInput("a",c),this.b=this.registerDataInput("b",b),this.c=this.registerDataInput("c",A)}_doOperation(c){return this._operation(this.a.getValue(c),this.b.getValue(c),this.c.getValue(c))}getClassName(){return this._className}}var X=A(12760),R=A(12767),N=A(12801);class k extends n.c{constructor(c){super((0,t.L)(null===c||void 0===c?void 0:c.type),(0,t.L)(null===c||void 0===c?void 0:c.type),(0,t.L)(null===c||void 0===c?void 0:c.type),((c,b)=>this._polymorphicAdd(c,b)),"FlowGraphAddBlock",c)}_polymorphicAdd(c,b){const A=(0,N.k)(c),o=(0,N.k)(b);if((0,N.g)(A,o)||(0,N.f)(A,o)||(0,N.c)(A,o))return c.add(b);if("Quaternion"===A||"Vector4"===o)return new L.o(c.x,c.y,c.z,c.w).addInPlace(b);if("Vector4"===A||"Quaternion"===o)return c.add(b);var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof c!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,N.r)(c)+(0,N.r)(b)}}(0,o.d)("FlowGraphAddBlock",k);class E extends n.c{constructor(c){super((0,t.L)(null===c||void 0===c?void 0:c.type),(0,t.L)(null===c||void 0===c?void 0:c.type),(0,t.L)(null===c||void 0===c?void 0:c.type),((c,b)=>this._polymorphicSubtract(c,b)),"FlowGraphSubtractBlock",c)}_polymorphicSubtract(c,b){const A=(0,N.k)(c),o=(0,N.k)(b);if((0,N.g)(A,o)||(0,N.c)(A,o)||(0,N.f)(A,o))return c.Xd(b);if("Quaternion"===A||"Vector4"===o)return new L.o(c.x,c.y,c.z,c.w).ck(b);if("Vector4"===A||"Quaternion"===o)return c.Xd(b);var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof c!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,N.r)(c)-(0,N.r)(b)}}(0,o.d)("FlowGraphSubtractBlock",E);class V extends n.c{constructor(c){super((0,t.L)(null===c||void 0===c?void 0:c.type),(0,t.L)(null===c||void 0===c?void 0:c.type),(0,t.L)(null===c||void 0===c?void 0:c.type),((c,b)=>this._polymorphicMultiply(c,b)),"FlowGraphMultiplyBlock",c)}_polymorphicMultiply(c,b){const A=(0,N.k)(c),o=(0,N.k)(b);if((0,N.g)(A,o)||(0,N.c)(A,o))return c.multiply(b);if("Quaternion"===A||"Vector4"===o)return new L.o(c.x,c.y,c.z,c.w).multiplyInPlace(b);if("Vector4"===A||"Quaternion"===o)return c.multiply(b);if((0,N.f)(A,o)){var t;if(null!==(t=this.config)&&void 0!==t&&t.useMatrixPerComponent){const o=c.m;for(let c=0;c<o.length;c++)o[c]*=b.m[c];return"Matrix2D"===A?new R.e(o):"Matrix3D"===A?new R.h(o):L.b.$j(o)}return b.multiply(c)}var n;if(null!==(n=this.config)&&void 0!==n&&n.preventIntegerFloatArithmetic&&typeof c!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,N.r)(c)*(0,N.r)(b)}}(0,o.d)("FlowGraphMultiplyBlock",V);class y extends n.c{constructor(c){super((0,t.L)(null===c||void 0===c?void 0:c.type),(0,t.L)(null===c||void 0===c?void 0:c.type),(0,t.L)(null===c||void 0===c?void 0:c.type),((c,b)=>this._polymorphicDivide(c,b)),"FlowGraphDivideBlock",c)}_polymorphicDivide(c,b){const A=(0,N.k)(c),o=(0,N.k)(b);if((0,N.g)(A,o)||(0,N.c)(A,o))return c.divide(b);if("Quaternion"===A||"Quaternion"===o){const A=c.clone();return A.x/=b.x,A.y/=b.y,A.z/=b.z,A.w/=b.w,A}if("Quaternion"===A||"Vector4"===o)return new L.o(c.x,c.y,c.z,c.w).divideInPlace(b);if("Vector4"===A||"Quaternion"===o)return c.divide(b);if((0,N.f)(A,o)){var t;if(null!==(t=this.config)&&void 0!==t&&t.useMatrixPerComponent){const o=c.m;for(let c=0;c<o.length;c++)o[c]/=b.m[c];return"Matrix2D"===A?new R.e(o):"Matrix3D"===A?new R.h(o):L.b.$j(o)}return c.divide(b)}var n;if(null!==(n=this.config)&&void 0!==n&&n.preventIntegerFloatArithmetic&&typeof c!==typeof b)throw new Error("Cannot add different types of numbers.");return(0,N.r)(c)/(0,N.r)(b)}}(0,o.d)("FlowGraphDivideBlock",y);class j extends s{constructor(c){super(t.t,(c=>this._random(c)),"FlowGraphRandomBlock",c),this.min=this.registerDataInput("min",t.t,(null===c||void 0===c?void 0:c.min)??0),this.max=this.registerDataInput("max",t.t,(null===c||void 0===c?void 0:c.max)??1),null!==c&&void 0!==c&&c.seed&&(this._seed=c.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const c=1e4*Math.sin(this._seed++);return c-Math.floor(c)}return Math.random()}_random(c){const b=this.min.getValue(c),A=this.max.getValue(c);return this._getRandomValue()*(A-b)+b}}(0,o.d)("FlowGraphRandomBlock",j);class F extends s{constructor(c){super(t.t,(()=>Math.E),"FlowGraphEBlock",c)}}(0,o.d)("FlowGraphEBlock",F);class M extends s{constructor(c){super(t.t,(()=>Math.PI),"FlowGraphPIBlock",c)}}(0,o.d)("FlowGraphPIBlock",M);class W extends s{constructor(c){super(t.t,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",c)}}(0,o.d)("FlowGraphInfBlock",W);class d extends s{constructor(c){super(t.t,(()=>Number.NaN),"FlowGraphNaNBlock",c)}}function r(c,b){switch((0,N.k)(c)){case"FlowGraphInteger":return new X.d(b(c.value));case"Vector2":return new L.h(b(c.x),b(c.y));case"ak":return new L.k(b(c.x),b(c.y),b(c.z));case"Vector4":return new L.o(b(c.x),b(c.y),b(c.z),b(c.w));case"Quaternion":return new L.e(b(c.x),b(c.y),b(c.z),b(c.w));case"Matrix":return L.b.$j(c.m.map(b));case"Matrix2D":return new R.e(c.m.map(b));case"Matrix3D":return new R.h(c.m.map(b));default:return b(c)}}(0,o.d)("FlowGraphNaNBlock",d);class z extends C.b{constructor(c){super(t.t,t.t,(c=>this._polymorphicAbs(c)),"FlowGraphAbsBlock",c)}_polymorphicAbs(c){return r(c,Math.abs)}}(0,o.d)("FlowGraphAbsBlock",z);class Y extends C.b{constructor(c){super(t.t,t.t,(c=>this._polymorphicSign(c)),"FlowGraphSignBlock",c)}_polymorphicSign(c){return r(c,Math.sign)}}(0,o.d)("FlowGraphSignBlock",Y);class D extends C.b{constructor(c){super(t.t,t.t,(c=>this._polymorphicTrunc(c)),"FlowGraphTruncBlock",c)}_polymorphicTrunc(c){return r(c,Math.trunc)}}(0,o.d)("FlowGraphTruncBlock",D);class f extends C.b{constructor(c){super(t.t,t.t,(c=>this._polymorphicFloor(c)),"FlowGraphFloorBlock",c)}_polymorphicFloor(c){return r(c,Math.floor)}}(0,o.d)("FlowGraphFloorBlock",f);class v extends C.b{constructor(c){super(t.e,t.e,(c=>this._polymorphicCeiling(c)),"FlowGraphCeilBlock",c)}_polymorphicCeiling(c){return r(c,Math.ceil)}}(0,o.d)("FlowGraphCeilBlock",v);class G extends C.b{constructor(c){super(t.e,t.e,(c=>this._polymorphicRound(c)),"FlowGraphRoundBlock",c)}_polymorphicRound(c){return r(c,(c=>{var b;return c<0&&null!==(b=this.config)&&void 0!==b&&b.roundHalfAwayFromZero?-Math.round(-c):Math.round(c)}))}}(0,o.d)("FlowGraphRoundBlock",G);class P extends C.b{constructor(c){super(t.e,t.e,(c=>this._polymorphicFraction(c)),"FlowGraphFractBlock",c)}_polymorphicFraction(c){return r(c,(c=>c-Math.floor(c)))}}(0,o.d)("FlowGraphFractBlock",P);class O extends C.b{constructor(c){super(t.e,t.e,(c=>this._polymorphicNeg(c)),"FlowGraphNegationBlock",c)}_polymorphicNeg(c){return r(c,(c=>-c))}}function p(c,b,A){switch((0,N.k)(c)){case"FlowGraphInteger":return new X.d(A(c.value,b.value));case"Vector2":return new L.h(A(c.x,b.x),A(c.y,b.y));case"ak":return new L.k(A(c.x,b.x),A(c.y,b.y),A(c.z,b.z));case"Vector4":return new L.o(A(c.x,b.x),A(c.y,b.y),A(c.z,b.z),A(c.w,b.w));case"Quaternion":return new L.e(A(c.x,b.x),A(c.y,b.y),A(c.z,b.z),A(c.w,b.w));case"Matrix":return L.b.$j(c.m.map(((c,o)=>A(c,b.m[o]))));case"Matrix2D":return new R.e(c.m.map(((c,o)=>A(c,b.m[o]))));case"Matrix3D":return new R.h(c.m.map(((c,o)=>A(c,b.m[o]))));default:return A((0,N.r)(c),(0,N.r)(b))}}(0,o.d)("FlowGraphNegationBlock",O);class q extends n.c{constructor(c){super(t.e,t.e,t.e,((c,b)=>this._polymorphicRemainder(c,b)),"FlowGraphModuloBlock",c)}_polymorphicRemainder(c,b){return p(c,b,((c,b)=>c%b))}}(0,o.d)("FlowGraphModuloBlock",q);class I extends n.c{constructor(c){super(t.e,t.e,t.e,((c,b)=>this._polymorphicMin(c,b)),"FlowGraphMinBlock",c)}_polymorphicMin(c,b){return p(c,b,Math.min)}}(0,o.d)("FlowGraphMinBlock",I);class K extends n.c{constructor(c){super(t.e,t.e,t.e,((c,b)=>this._polymorphicMax(c,b)),"FlowGraphMaxBlock",c)}_polymorphicMax(c,b){return p(c,b,Math.max)}}function Z(c,b,A){return Math.min(Math.max(c,Math.min(b,A)),Math.max(b,A))}function H(c,b,A,o){switch((0,N.k)(c)){case"FlowGraphInteger":return new X.d(o(c.value,b.value,A.value));case"Vector2":return new L.h(o(c.x,b.x,A.x),o(c.y,b.y,A.y));case"ak":return new L.k(o(c.x,b.x,A.x),o(c.y,b.y,A.y),o(c.z,b.z,A.z));case"Vector4":return new L.o(o(c.x,b.x,A.x),o(c.y,b.y,A.y),o(c.z,b.z,A.z),o(c.w,b.w,A.w));case"Quaternion":return new L.e(o(c.x,b.x,A.x),o(c.y,b.y,A.y),o(c.z,b.z,A.z),o(c.w,b.w,A.w));case"Matrix":return L.b.$j(c.m.map(((c,t)=>o(c,b.m[t],A.m[t]))));case"Matrix2D":return new R.e(c.m.map(((c,t)=>o(c,b.m[t],A.m[t]))));case"Matrix3D":return new R.h(c.m.map(((c,t)=>o(c,b.m[t],A.m[t]))));default:return o((0,N.r)(c),(0,N.r)(b),(0,N.r)(A))}}(0,o.d)("FlowGraphMaxBlock",K);class S extends J{constructor(c){super(t.e,t.e,t.e,t.e,((c,b,A)=>this._polymorphicClamp(c,b,A)),"FlowGraphClampBlock",c)}_polymorphicClamp(c,b,A){return H(c,b,A,Z)}}function B(c){return Math.min(Math.max(c,0),1)}(0,o.d)("FlowGraphClampBlock",S);class Q extends C.b{constructor(c){super(t.e,t.e,(c=>this._polymorphicSaturate(c)),"FlowGraphSaturateBlock",c)}_polymorphicSaturate(c){return r(c,B)}}function a(c,b,A){return(1-A)*c+A*b}(0,o.d)("FlowGraphSaturateBlock",Q);class l extends J{constructor(c){super(t.e,t.e,t.e,t.e,((c,b,A)=>this._polymorphicInterpolate(c,b,A)),"FlowGraphMathInterpolationBlock",c)}_polymorphicInterpolate(c,b,A){return H(c,b,A,a)}}(0,o.d)("FlowGraphMathInterpolationBlock",l);class T extends n.c{constructor(c){super(t.e,t.e,t.f,((c,b)=>this._polymorphicEq(c,b)),"FlowGraphEqualityBlock",c)}_polymorphicEq(c,b){const A=(0,N.k)(c),o=(0,N.k)(b);return typeof c===typeof b&&((0,N.g)(A,o)||(0,N.f)(A,o)||(0,N.c)(A,o)?c.equals(b):c===b)}}function i(c,b,A){if((0,N.u)(c)&&(0,N.u)(b))return A((0,N.r)(c),(0,N.r)(b));throw new Error(`Cannot compare ${c} and ${b}`)}(0,o.d)("FlowGraphEqualityBlock",T);class g extends n.c{constructor(c){super(t.e,t.e,t.f,((c,b)=>this._polymorphicLessThan(c,b)),"FlowGraphLessThanBlock",c)}_polymorphicLessThan(c,b){return i(c,b,((c,b)=>c<b))}}(0,o.d)("FlowGraphLessThanBlock",g);class u extends n.c{constructor(c){super(t.e,t.e,t.f,((c,b)=>this._polymorphicLessThanOrEqual(c,b)),"FlowGraphLessThanOrEqualBlock",c)}_polymorphicLessThanOrEqual(c,b){return i(c,b,((c,b)=>c<=b))}}(0,o.d)("FlowGraphLessThanOrEqualBlock",u);class e extends n.c{constructor(c){super(t.e,t.e,t.f,((c,b)=>this._polymorphicGreaterThan(c,b)),"FlowGraphGreaterThanBlock",c)}_polymorphicGreaterThan(c,b){return i(c,b,((c,b)=>c>b))}}(0,o.d)("FlowGraphGreaterThanBlock",e);class x extends n.c{constructor(c){super(t.e,t.e,t.f,((c,b)=>this._polymorphicGreaterThanOrEqual(c,b)),"FlowGraphGreaterThanOrEqualBlock",c)}_polymorphicGreaterThanOrEqual(c,b){return i(c,b,((c,b)=>c>=b))}}(0,o.d)("FlowGraphGreaterThanOrEqualBlock",x);class U extends C.b{constructor(c){super(t.e,t.f,(c=>this._polymorphicIsNan(c)),"FlowGraphIsNaNBlock",c)}_polymorphicIsNan(c){if((0,N.u)(c,!0))return isNaN((0,N.r)(c));throw new Error(`Cannot get NaN of ${c}`)}}(0,o.d)("FlowGraphIsNaNBlock",U);class w extends C.b{constructor(c){super(t.e,t.f,(c=>this._polymorphicIsInf(c)),"FlowGraphIsInfBlock",c)}_polymorphicIsInf(c){if((0,N.u)(c))return!isFinite((0,N.r)(c));throw new Error(`Cannot get isInf of ${c}`)}}(0,o.d)("FlowGraphIsInfBlock",w);class m extends C.b{constructor(c){super(t.e,t.e,(c=>this._polymorphicDegToRad(c)),"FlowGraphDegToRadBlock",c)}_degToRad(c){return c*Math.PI/180}_polymorphicDegToRad(c){return r(c,this._degToRad)}}(0,o.d)("FlowGraphDegToRadBlock",m);class cc extends C.b{constructor(c){super(t.e,t.e,(c=>this._polymorphicRadToDeg(c)),"FlowGraphRadToDegBlock",c)}_radToDeg(c){return 180*c/Math.PI}_polymorphicRadToDeg(c){return r(c,this._radToDeg)}}(0,o.d)("FlowGraphRadToDegBlock",cc);class bc extends C.b{constructor(c){super(t.t,t.t,(c=>this._polymorphicSin(c)),"FlowGraphSinBlock",c)}_polymorphicSin(c){return r(c,Math.sin)}}class Ac extends C.b{constructor(c){super(t.t,t.t,(c=>this._polymorphicCos(c)),"FlowGraphCosBlock",c)}_polymorphicCos(c){return r(c,Math.cos)}}class oc extends C.b{constructor(c){super(t.t,t.t,(c=>this._polymorphicTan(c)),"FlowGraphTanBlock",c)}_polymorphicTan(c){return r(c,Math.tan)}}class tc extends C.b{constructor(c){super(t.t,t.t,(c=>this._polymorphicAsin(c)),"FlowGraphASinBlock",c)}_polymorphicAsin(c){return r(c,Math.asin)}}(0,o.d)("FlowGraphASinBlock",tc);class nc extends C.b{constructor(c){super(t.t,t.t,(c=>this._polymorphicAcos(c)),"FlowGraphACosBlock",c)}_polymorphicAcos(c){return r(c,Math.acos)}}(0,o.d)("FlowGraphACosBlock",nc);class hc extends C.b{constructor(c){super(t.t,t.t,(c=>this._polymorphicAtan(c)),"FlowGraphATanBlock",c)}_polymorphicAtan(c){return r(c,Math.atan)}}(0,o.d)("FlowGraphATanBlock",hc);class sc extends n.c{constructor(c){super(t.e,t.e,t.e,((c,b)=>this._polymorphicAtan2(c,b)),"FlowGraphATan2Block",c)}_polymorphicAtan2(c,b){return p(c,b,Math.atan2)}}(0,o.d)("FlowGraphATan2Block",sc);class Lc extends C.b{constructor(c){super(t.e,t.e,(c=>this._polymorphicSinh(c)),"FlowGraphSinhBlock",c)}_polymorphicSinh(c){return r(c,Math.sinh)}}(0,o.d)("FlowGraphSinhBlock",Lc);class Cc extends C.b{constructor(c){super(t.e,t.e,(c=>this._polymorphicCosh(c)),"FlowGraphCoshBlock",c)}_polymorphicCosh(c){return r(c,Math.cosh)}}(0,o.d)("FlowGraphCoshBlock",Cc);class Jc extends C.b{constructor(c){super(t.e,t.e,(c=>this._polymorphicTanh(c)),"FlowGraphTanhBlock",c)}_polymorphicTanh(c){return r(c,Math.tanh)}}(0,o.d)("FlowGraphTanhBlock",Jc);class Xc extends C.b{constructor(c){super(t.e,t.t,(c=>this._polymorphicAsinh(c)),"FlowGraphASinhBlock",c)}_polymorphicAsinh(c){return r(c,Math.asinh)}}(0,o.d)("FlowGraphASinhBlock",Xc);class Rc extends C.b{constructor(c){super(t.e,t.t,(c=>this._polymorphicAcosh(c)),"FlowGraphACoshBlock",c)}_polymorphicAcosh(c){return r(c,Math.acosh)}}(0,o.d)("FlowGraphACoshBlock",Rc);class Nc extends C.b{constructor(c){super(t.e,t.t,(c=>this._polymorphicAtanh(c)),"FlowGraphATanhBlock",c)}_polymorphicAtanh(c){return r(c,Math.atanh)}}(0,o.d)("FlowGraphATanhBlock",Nc);class kc extends C.b{constructor(c){super(t.e,t.t,(c=>this._polymorphicExp(c)),"FlowGraphExponentialBlock",c)}_polymorphicExp(c){return r(c,Math.exp)}}(0,o.d)("FlowGraphExponentialBlock",kc);class Ec extends C.b{constructor(c){super(t.e,t.t,(c=>this._polymorphicLog(c)),"FlowGraphLogBlock",c)}_polymorphicLog(c){return r(c,Math.log)}}(0,o.d)("FlowGraphLogBlock",Ec);class Vc extends C.b{constructor(c){super(t.e,t.t,(c=>this._polymorphicLog2(c)),"FlowGraphLog2Block",c)}_polymorphicLog2(c){return r(c,Math.log2)}}(0,o.d)("FlowGraphLog2Block",Vc);class yc extends C.b{constructor(c){super(t.e,t.t,(c=>this._polymorphicLog10(c)),"FlowGraphLog10Block",c)}_polymorphicLog10(c){return r(c,Math.log10)}}(0,o.d)("FlowGraphLog10Block",yc);class jc extends C.b{constructor(c){super(t.e,t.t,(c=>this._polymorphicSqrt(c)),"FlowGraphSquareRootBlock",c)}_polymorphicSqrt(c){return r(c,Math.sqrt)}}(0,o.d)("FlowGraphSquareRootBlock",jc);class Fc extends C.b{constructor(c){super(t.e,t.t,(c=>this._polymorphicCubeRoot(c)),"FlowGraphCubeRootBlock",c)}_polymorphicCubeRoot(c){return r(c,Math.cbrt)}}(0,o.d)("FlowGraphCubeRootBlock",Fc);class Mc extends n.c{constructor(c){super(t.e,t.t,t.t,((c,b)=>this._polymorphicPow(c,b)),"FlowGraphPowerBlock",c)}_polymorphicPow(c,b){return p(c,b,Math.pow)}}(0,o.d)("FlowGraphPowerBlock",Mc);class Wc extends C.b{constructor(c){super((0,t.L)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),(0,t.L)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),(c=>"boolean"===typeof c?!c:"number"===typeof c?~c:new X.d(~c.value)),"FlowGraphBitwiseNotBlock",c)}}(0,o.d)("FlowGraphBitwiseNotBlock",Wc);class dc extends n.c{constructor(c){super((0,t.L)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),(0,t.L)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),(0,t.L)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),((c,b)=>{if("boolean"===typeof c&&"boolean"===typeof b)return c&&b;if("number"===typeof c&&"number"===typeof b)return c&b;if("object"===typeof c&&"object"===typeof b)return new X.d(c.value&b.value);throw new Error(`Cannot perform bitwise AND on ${c} and ${b}`)}),"FlowGraphBitwiseAndBlock",c)}}(0,o.d)("FlowGraphBitwiseAndBlock",dc);class rc extends n.c{constructor(c){super((0,t.L)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),(0,t.L)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),(0,t.L)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),((c,b)=>{if("boolean"===typeof c&&"boolean"===typeof b)return c||b;if("number"===typeof c&&"number"===typeof b)return c|b;if("object"===typeof c&&"object"===typeof b)return new X.d(c.value|b.value);throw new Error(`Cannot perform bitwise OR on ${c} and ${b}`)}),"FlowGraphBitwiseOrBlock",c)}}(0,o.d)("FlowGraphBitwiseOrBlock",rc);class zc extends n.c{constructor(c){super((0,t.L)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),(0,t.L)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),(0,t.L)((null===c||void 0===c?void 0:c.valueType)||"FlowGraphInteger"),((c,b)=>{if("boolean"===typeof c&&"boolean"===typeof b)return c!==b;if("number"===typeof c&&"number"===typeof b)return c^b;if("object"===typeof c&&"object"===typeof b)return new X.d(c.value^b.value);throw new Error(`Cannot perform bitwise XOR on ${c} and ${b}`)}),"FlowGraphBitwiseXorBlock",c)}}(0,o.d)("FlowGraphBitwiseXorBlock",zc);class Yc extends n.c{constructor(c){super(t.g,t.g,t.g,((c,b)=>new X.d(c.value<<b.value)),"FlowGraphBitwiseLeftShiftBlock",c)}}(0,o.d)("FlowGraphBitwiseLeftShiftBlock",Yc);class Dc extends n.c{constructor(c){super(t.g,t.g,t.g,((c,b)=>new X.d(c.value>>b.value)),"FlowGraphBitwiseRightShiftBlock",c)}}(0,o.d)("FlowGraphBitwiseRightShiftBlock",Dc);class fc extends C.b{constructor(c){super(t.g,t.g,(c=>new X.d(Math.clz32(c.value))),"FlowGraphLeadingZerosBlock",c)}}(0,o.d)("FlowGraphLeadingZerosBlock",fc);class vc extends C.b{constructor(c){super(t.g,t.g,(c=>new X.d(c.value?31-Math.clz32(c.value&-c.value):32)),"FlowGraphTrailingZerosBlock",c)}}(0,o.d)("FlowGraphTrailingZerosBlock",vc);class Gc extends C.b{constructor(c){super(t.g,t.g,(c=>new X.d(function(c){let b=0;for(;c;)b+=1&c,c>>=1;return b}(c.value))),"FlowGraphOneBitsCounterBlock",c)}}(0,o.d)("FlowGraphOneBitsCounterBlock",Gc)},14018:(c,b,A)=>{A.d(b,{c:()=>t});var o=A(14025);class t extends o.d{constructor(c,b,A,o,t,n){super(A,n),this._operation=o,this._className=t,this.a=this.registerDataInput("a",c),this.b=this.registerDataInput("b",b)}_doOperation(c){const b=this.a.getValue(c),A=this.b.getValue(c);return this._operation(b,A)}getClassName(){return this._className}}},14025:(c,b,A)=>{A.d(b,{d:()=>s});var o=A(12789),t=A(12763);const n="cachedOperationValue",h="cachedExecutionId";class s extends o.d{constructor(c,b){super(b),this.value=this.registerDataOutput("value",c),this.isValid=this.registerDataOutput("isValid",t.f)}_updateOutputs(c){const b=c._getExecutionVariable(this,h,-1),A=c._getExecutionVariable(this,n,null);if(void 0!==A&&null!==A&&b===c.executionId)this.isValid.setValue(!0,c),this.value.setValue(A,c);else try{const b=this._doOperation(c);if(void 0===b||null===b)return void this.isValid.setValue(!1,c);c._setExecutionVariable(this,n,b),c._setExecutionVariable(this,h,c.executionId),this.value.setValue(b,c),this.isValid.setValue(!0,c)}catch(o){this.isValid.setValue(!1,c)}}}},14034:(c,b,A)=>{A.d(b,{b:()=>t});var o=A(14025);class t extends o.d{constructor(c,b,A,o,t){super(b,t),this._operation=A,this._className=o,this.a=this.registerDataInput("a",c)}_doOperation(c){return this._operation(this.a.getValue(c))}getClassName(){return this._className}}}}]);