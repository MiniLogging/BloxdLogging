"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[72],{14198:(v,d,Q)=>{Q.r(d),Q.d(d,{FlowGraphAbsBlock:()=>K,FlowGraphAcosBlock:()=>Lv,FlowGraphAcoshBlock:()=>zv,FlowGraphAddBlock:()=>X,FlowGraphAsinBlock:()=>Tv,FlowGraphAsinhBlock:()=>yv,FlowGraphAtan2Block:()=>Fv,FlowGraphAtanBlock:()=>ev,FlowGraphAtanhBlock:()=>Bv,FlowGraphBitwiseAndBlock:()=>Ov,FlowGraphBitwiseLeftShiftBlock:()=>ov,FlowGraphBitwiseNotBlock:()=>Pv,FlowGraphBitwiseOrBlock:()=>Jv,FlowGraphBitwiseRightShiftBlock:()=>gv,FlowGraphBitwiseXorBlock:()=>Kv,FlowGraphCeilBlock:()=>M,FlowGraphClampBlock:()=>W,FlowGraphCosBlock:()=>Qv,FlowGraphCoshBlock:()=>Cv,FlowGraphCubeRootBlock:()=>Av,FlowGraphDegToRadBlock:()=>l,FlowGraphDivideBlock:()=>h,FlowGraphEBlock:()=>A,FlowGraphEqualityBlock:()=>a,FlowGraphExpBlock:()=>Xv,FlowGraphFloorBlock:()=>R,FlowGraphFractionBlock:()=>D,FlowGraphGreaterThanBlock:()=>w,FlowGraphGreaterThanOrEqualBlock:()=>G,FlowGraphInfBlock:()=>P,FlowGraphIsInfinityBlock:()=>N,FlowGraphIsNanBlock:()=>E,FlowGraphLeadingZerosBlock:()=>Rv,FlowGraphLessThanBlock:()=>U,FlowGraphLessThanOrEqualBlock:()=>c,FlowGraphLog10Block:()=>hv,FlowGraphLog2Block:()=>Vv,FlowGraphLogBlock:()=>mv,FlowGraphMathInterpolationBlock:()=>s,FlowGraphMaxBlock:()=>k,FlowGraphMinBlock:()=>x,FlowGraphModuloBlock:()=>j,FlowGraphMultiplyBlock:()=>V,FlowGraphNaNBlock:()=>O,FlowGraphNegationBlock:()=>i,FlowGraphOneBitsCounterBlock:()=>Yv,FlowGraphPiBlock:()=>f,FlowGraphPowerBlock:()=>fv,FlowGraphRadToDegBlock:()=>vv,FlowGraphRandomBlock:()=>S,FlowGraphRoundBlock:()=>Y,FlowGraphSaturateBlock:()=>b,FlowGraphSignBlock:()=>o,FlowGraphSinBlock:()=>dv,FlowGraphSinhBlock:()=>rv,FlowGraphSquareRootBlock:()=>Sv,FlowGraphSubtractBlock:()=>m,FlowGraphTanBlock:()=>nv,FlowGraphTanhBlock:()=>uv,FlowGraphTrailingZerosBlock:()=>Mv,FlowGraphTruncBlock:()=>g});var n=Q(591),T=Q(12908),L=Q(14201),e=Q(14208);class F extends e.c{constructor(v,d,Q,n){super(v,n),this._operation=d,this._className=Q}_doOperation(v){return this._operation(v)}getClassName(){return this._className}}var r=Q(651),C=Q(14212);class u extends e.c{constructor(v,d,Q,n,T,L,e){super(n,e),this._operation=T,this._className=L,this.a=this.registerDataInput("a",v),this.b=this.registerDataInput("b",d),this.c=this.registerDataInput("c",Q)}_doOperation(v){return this._operation(this.a.getValue(v),this.b.getValue(v),this.c.getValue(v))}getClassName(){return this._className}}var y=Q(12904),z=Q(12916),B=Q(12950);class X extends L.b{constructor(v){super((0,T.R)(null===v||void 0===v?void 0:v.type),(0,T.R)(null===v||void 0===v?void 0:v.type),(0,T.R)(null===v||void 0===v?void 0:v.type),((v,d)=>this._polymorphicAdd(v,d)),"FlowGraphAddBlock",v)}_polymorphicAdd(v,d){const Q=(0,B.o)(v),n=(0,B.o)(d);if((0,B.k)(Q,n)||(0,B.h)(Q,n)||(0,B.d)(Q,n))return v.add(d);if("Quaternion"===Q||"Vector4"===n)return new r.k(v.x,v.y,v.z,v.w).addInPlace(d);if("Vector4"===Q||"Quaternion"===n)return v.add(d);var T;if(null!==(T=this.config)&&void 0!==T&&T.preventIntegerFloatArithmetic&&typeof v!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,B.v)(v)+(0,B.v)(d)}}(0,n.f)("FlowGraphAddBlock",X);class m extends L.b{constructor(v){super((0,T.R)(null===v||void 0===v?void 0:v.type),(0,T.R)(null===v||void 0===v?void 0:v.type),(0,T.R)(null===v||void 0===v?void 0:v.type),((v,d)=>this._polymorphicSubtract(v,d)),"FlowGraphSubtractBlock",v)}_polymorphicSubtract(v,d){const Q=(0,B.o)(v),n=(0,B.o)(d);if((0,B.k)(Q,n)||(0,B.d)(Q,n)||(0,B.h)(Q,n))return v.Wd(d);if("Quaternion"===Q||"Vector4"===n)return new r.k(v.x,v.y,v.z,v.w).hk(d);if("Vector4"===Q||"Quaternion"===n)return v.Wd(d);var T;if(null!==(T=this.config)&&void 0!==T&&T.preventIntegerFloatArithmetic&&typeof v!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,B.v)(v)-(0,B.v)(d)}}(0,n.f)("FlowGraphSubtractBlock",m);class V extends L.b{constructor(v){super((0,T.R)(null===v||void 0===v?void 0:v.type),(0,T.R)(null===v||void 0===v?void 0:v.type),(0,T.R)(null===v||void 0===v?void 0:v.type),((v,d)=>this._polymorphicMultiply(v,d)),"FlowGraphMultiplyBlock",v)}_polymorphicMultiply(v,d){const Q=(0,B.o)(v),n=(0,B.o)(d);if((0,B.k)(Q,n)||(0,B.d)(Q,n))return v.multiply(d);if("Quaternion"===Q||"Vector4"===n)return new r.k(v.x,v.y,v.z,v.w).multiplyInPlace(d);if("Vector4"===Q||"Quaternion"===n)return v.multiply(d);if((0,B.h)(Q,n)){var T;if(null!==(T=this.config)&&void 0!==T&&T.useMatrixPerComponent){const n=v.m;for(let v=0;v<n.length;v++)n[v]*=d.m[v];return"Matrix2D"===Q?new z.c(n):"Matrix3D"===Q?new z.f(n):r.b.dk(n)}return d.multiply(v)}var L;if(null!==(L=this.config)&&void 0!==L&&L.preventIntegerFloatArithmetic&&typeof v!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,B.v)(v)*(0,B.v)(d)}}(0,n.f)("FlowGraphMultiplyBlock",V);class h extends L.b{constructor(v){super((0,T.R)(null===v||void 0===v?void 0:v.type),(0,T.R)(null===v||void 0===v?void 0:v.type),(0,T.R)(null===v||void 0===v?void 0:v.type),((v,d)=>this._polymorphicDivide(v,d)),"FlowGraphDivideBlock",v)}_polymorphicDivide(v,d){const Q=(0,B.o)(v),n=(0,B.o)(d);if((0,B.k)(Q,n)||(0,B.d)(Q,n))return v.divide(d);if("Quaternion"===Q||"Quaternion"===n){const Q=v.clone();return Q.x/=d.x,Q.y/=d.y,Q.z/=d.z,Q.w/=d.w,Q}if("Quaternion"===Q||"Vector4"===n)return new r.k(v.x,v.y,v.z,v.w).divideInPlace(d);if("Vector4"===Q||"Quaternion"===n)return v.divide(d);if((0,B.h)(Q,n)){var T;if(null!==(T=this.config)&&void 0!==T&&T.useMatrixPerComponent){const n=v.m;for(let v=0;v<n.length;v++)n[v]/=d.m[v];return"Matrix2D"===Q?new z.c(n):"Matrix3D"===Q?new z.f(n):r.b.dk(n)}return v.divide(d)}var L;if(null!==(L=this.config)&&void 0!==L&&L.preventIntegerFloatArithmetic&&typeof v!==typeof d)throw new Error("Cannot add different types of numbers.");return(0,B.v)(v)/(0,B.v)(d)}}(0,n.f)("FlowGraphDivideBlock",h);class S extends F{constructor(v){super(T.u,(v=>this._random(v)),"FlowGraphRandomBlock",v),this.min=this.registerDataInput("min",T.u,(null===v||void 0===v?void 0:v.min)??0),this.max=this.registerDataInput("max",T.u,(null===v||void 0===v?void 0:v.max)??1),null!==v&&void 0!==v&&v.seed&&(this._seed=v.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const v=1e4*Math.sin(this._seed++);return v-Math.floor(v)}return Math.random()}_random(v){const d=this.min.getValue(v),Q=this.max.getValue(v);return this._getRandomValue()*(Q-d)+d}}(0,n.f)("FlowGraphRandomBlock",S);class A extends F{constructor(v){super(T.u,(()=>Math.E),"FlowGraphEBlock",v)}}(0,n.f)("FlowGraphEBlock",A);class f extends F{constructor(v){super(T.u,(()=>Math.PI),"FlowGraphPIBlock",v)}}(0,n.f)("FlowGraphPIBlock",f);class P extends F{constructor(v){super(T.u,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",v)}}(0,n.f)("FlowGraphInfBlock",P);class O extends F{constructor(v){super(T.u,(()=>Number.NaN),"FlowGraphNaNBlock",v)}}function J(v,d){switch((0,B.o)(v)){case"FlowGraphInteger":return new y.b(d(v.value));case"Vector2":return new r.i(d(v.x),d(v.y));case"fk":return new r.j(d(v.x),d(v.y),d(v.z));case"Vector4":return new r.k(d(v.x),d(v.y),d(v.z),d(v.w));case"Quaternion":return new r.c(d(v.x),d(v.y),d(v.z),d(v.w));case"Matrix":return r.b.dk(v.m.map(d));case"Matrix2D":return new z.c(v.m.map(d));case"Matrix3D":return new z.f(v.m.map(d));default:return d(v)}}(0,n.f)("FlowGraphNaNBlock",O);class K extends C.c{constructor(v){super(T.u,T.u,(v=>this._polymorphicAbs(v)),"FlowGraphAbsBlock",v)}_polymorphicAbs(v){return J(v,Math.abs)}}(0,n.f)("FlowGraphAbsBlock",K);class o extends C.c{constructor(v){super(T.u,T.u,(v=>this._polymorphicSign(v)),"FlowGraphSignBlock",v)}_polymorphicSign(v){return J(v,Math.sign)}}(0,n.f)("FlowGraphSignBlock",o);class g extends C.c{constructor(v){super(T.u,T.u,(v=>this._polymorphicTrunc(v)),"FlowGraphTruncBlock",v)}_polymorphicTrunc(v){return J(v,Math.trunc)}}(0,n.f)("FlowGraphTruncBlock",g);class R extends C.c{constructor(v){super(T.u,T.u,(v=>this._polymorphicFloor(v)),"FlowGraphFloorBlock",v)}_polymorphicFloor(v){return J(v,Math.floor)}}(0,n.f)("FlowGraphFloorBlock",R);class M extends C.c{constructor(v){super(T.c,T.c,(v=>this._polymorphicCeiling(v)),"FlowGraphCeilBlock",v)}_polymorphicCeiling(v){return J(v,Math.ceil)}}(0,n.f)("FlowGraphCeilBlock",M);class Y extends C.c{constructor(v){super(T.c,T.c,(v=>this._polymorphicRound(v)),"FlowGraphRoundBlock",v)}_polymorphicRound(v){return J(v,(v=>{var d;return v<0&&null!==(d=this.config)&&void 0!==d&&d.roundHalfAwayFromZero?-Math.round(-v):Math.round(v)}))}}(0,n.f)("FlowGraphRoundBlock",Y);class D extends C.c{constructor(v){super(T.c,T.c,(v=>this._polymorphicFraction(v)),"FlowGraphFractBlock",v)}_polymorphicFraction(v){return J(v,(v=>v-Math.floor(v)))}}(0,n.f)("FlowGraphFractBlock",D);class i extends C.c{constructor(v){super(T.c,T.c,(v=>this._polymorphicNeg(v)),"FlowGraphNegationBlock",v)}_polymorphicNeg(v){return J(v,(v=>-v))}}function Z(v,d,Q){switch((0,B.o)(v)){case"FlowGraphInteger":return new y.b(Q(v.value,d.value));case"Vector2":return new r.i(Q(v.x,d.x),Q(v.y,d.y));case"fk":return new r.j(Q(v.x,d.x),Q(v.y,d.y),Q(v.z,d.z));case"Vector4":return new r.k(Q(v.x,d.x),Q(v.y,d.y),Q(v.z,d.z),Q(v.w,d.w));case"Quaternion":return new r.c(Q(v.x,d.x),Q(v.y,d.y),Q(v.z,d.z),Q(v.w,d.w));case"Matrix":return r.b.dk(v.m.map(((v,n)=>Q(v,d.m[n]))));case"Matrix2D":return new z.c(v.m.map(((v,n)=>Q(v,d.m[n]))));case"Matrix3D":return new z.f(v.m.map(((v,n)=>Q(v,d.m[n]))));default:return Q((0,B.v)(v),(0,B.v)(d))}}(0,n.f)("FlowGraphNegationBlock",i);class j extends L.b{constructor(v){super(T.c,T.c,T.c,((v,d)=>this._polymorphicRemainder(v,d)),"FlowGraphModuloBlock",v)}_polymorphicRemainder(v,d){return Z(v,d,((v,d)=>v%d))}}(0,n.f)("FlowGraphModuloBlock",j);class x extends L.b{constructor(v){super(T.c,T.c,T.c,((v,d)=>this._polymorphicMin(v,d)),"FlowGraphMinBlock",v)}_polymorphicMin(v,d){return Z(v,d,Math.min)}}(0,n.f)("FlowGraphMinBlock",x);class k extends L.b{constructor(v){super(T.c,T.c,T.c,((v,d)=>this._polymorphicMax(v,d)),"FlowGraphMaxBlock",v)}_polymorphicMax(v,d){return Z(v,d,Math.max)}}function t(v,d,Q){return Math.min(Math.max(v,Math.min(d,Q)),Math.max(d,Q))}function p(v,d,Q,n){switch((0,B.o)(v)){case"FlowGraphInteger":return new y.b(n(v.value,d.value,Q.value));case"Vector2":return new r.i(n(v.x,d.x,Q.x),n(v.y,d.y,Q.y));case"fk":return new r.j(n(v.x,d.x,Q.x),n(v.y,d.y,Q.y),n(v.z,d.z,Q.z));case"Vector4":return new r.k(n(v.x,d.x,Q.x),n(v.y,d.y,Q.y),n(v.z,d.z,Q.z),n(v.w,d.w,Q.w));case"Quaternion":return new r.c(n(v.x,d.x,Q.x),n(v.y,d.y,Q.y),n(v.z,d.z,Q.z),n(v.w,d.w,Q.w));case"Matrix":return r.b.dk(v.m.map(((v,T)=>n(v,d.m[T],Q.m[T]))));case"Matrix2D":return new z.c(v.m.map(((v,T)=>n(v,d.m[T],Q.m[T]))));case"Matrix3D":return new z.f(v.m.map(((v,T)=>n(v,d.m[T],Q.m[T]))));default:return n((0,B.v)(v),(0,B.v)(d),(0,B.v)(Q))}}(0,n.f)("FlowGraphMaxBlock",k);class W extends u{constructor(v){super(T.c,T.c,T.c,T.c,((v,d,Q)=>this._polymorphicClamp(v,d,Q)),"FlowGraphClampBlock",v)}_polymorphicClamp(v,d,Q){return p(v,d,Q,t)}}function q(v){return Math.min(Math.max(v,0),1)}(0,n.f)("FlowGraphClampBlock",W);class b extends C.c{constructor(v){super(T.c,T.c,(v=>this._polymorphicSaturate(v)),"FlowGraphSaturateBlock",v)}_polymorphicSaturate(v){return J(v,q)}}function H(v,d,Q){return(1-Q)*v+Q*d}(0,n.f)("FlowGraphSaturateBlock",b);class s extends u{constructor(v){super(T.c,T.c,T.c,T.c,((v,d,Q)=>this._polymorphicInterpolate(v,d,Q)),"FlowGraphMathInterpolationBlock",v)}_polymorphicInterpolate(v,d,Q){return p(v,d,Q,H)}}(0,n.f)("FlowGraphMathInterpolationBlock",s);class a extends L.b{constructor(v){super(T.c,T.c,T.f,((v,d)=>this._polymorphicEq(v,d)),"FlowGraphEqualityBlock",v)}_polymorphicEq(v,d){const Q=(0,B.o)(v),n=(0,B.o)(d);return typeof v===typeof d&&((0,B.k)(Q,n)||(0,B.h)(Q,n)||(0,B.d)(Q,n)?v.equals(d):v===d)}}function I(v,d,Q){if((0,B.y)(v)&&(0,B.y)(d))return Q((0,B.v)(v),(0,B.v)(d));throw new Error(`Cannot compare ${v} and ${d}`)}(0,n.f)("FlowGraphEqualityBlock",a);class U extends L.b{constructor(v){super(T.c,T.c,T.f,((v,d)=>this._polymorphicLessThan(v,d)),"FlowGraphLessThanBlock",v)}_polymorphicLessThan(v,d){return I(v,d,((v,d)=>v<d))}}(0,n.f)("FlowGraphLessThanBlock",U);class c extends L.b{constructor(v){super(T.c,T.c,T.f,((v,d)=>this._polymorphicLessThanOrEqual(v,d)),"FlowGraphLessThanOrEqualBlock",v)}_polymorphicLessThanOrEqual(v,d){return I(v,d,((v,d)=>v<=d))}}(0,n.f)("FlowGraphLessThanOrEqualBlock",c);class w extends L.b{constructor(v){super(T.c,T.c,T.f,((v,d)=>this._polymorphicGreaterThan(v,d)),"FlowGraphGreaterThanBlock",v)}_polymorphicGreaterThan(v,d){return I(v,d,((v,d)=>v>d))}}(0,n.f)("FlowGraphGreaterThanBlock",w);class G extends L.b{constructor(v){super(T.c,T.c,T.f,((v,d)=>this._polymorphicGreaterThanOrEqual(v,d)),"FlowGraphGreaterThanOrEqualBlock",v)}_polymorphicGreaterThanOrEqual(v,d){return I(v,d,((v,d)=>v>=d))}}(0,n.f)("FlowGraphGreaterThanOrEqualBlock",G);class E extends C.c{constructor(v){super(T.c,T.f,(v=>this._polymorphicIsNan(v)),"FlowGraphIsNaNBlock",v)}_polymorphicIsNan(v){if((0,B.y)(v,!0))return isNaN((0,B.v)(v));throw new Error(`Cannot get NaN of ${v}`)}}(0,n.f)("FlowGraphIsNaNBlock",E);class N extends C.c{constructor(v){super(T.c,T.f,(v=>this._polymorphicIsInf(v)),"FlowGraphIsInfBlock",v)}_polymorphicIsInf(v){if((0,B.y)(v))return!isFinite((0,B.v)(v));throw new Error(`Cannot get isInf of ${v}`)}}(0,n.f)("FlowGraphIsInfBlock",N);class l extends C.c{constructor(v){super(T.c,T.c,(v=>this._polymorphicDegToRad(v)),"FlowGraphDegToRadBlock",v)}_degToRad(v){return v*Math.PI/180}_polymorphicDegToRad(v){return J(v,this._degToRad)}}(0,n.f)("FlowGraphDegToRadBlock",l);class vv extends C.c{constructor(v){super(T.c,T.c,(v=>this._polymorphicRadToDeg(v)),"FlowGraphRadToDegBlock",v)}_radToDeg(v){return 180*v/Math.PI}_polymorphicRadToDeg(v){return J(v,this._radToDeg)}}(0,n.f)("FlowGraphRadToDegBlock",vv);class dv extends C.c{constructor(v){super(T.u,T.u,(v=>this._polymorphicSin(v)),"FlowGraphSinBlock",v)}_polymorphicSin(v){return J(v,Math.sin)}}class Qv extends C.c{constructor(v){super(T.u,T.u,(v=>this._polymorphicCos(v)),"FlowGraphCosBlock",v)}_polymorphicCos(v){return J(v,Math.cos)}}class nv extends C.c{constructor(v){super(T.u,T.u,(v=>this._polymorphicTan(v)),"FlowGraphTanBlock",v)}_polymorphicTan(v){return J(v,Math.tan)}}class Tv extends C.c{constructor(v){super(T.u,T.u,(v=>this._polymorphicAsin(v)),"FlowGraphASinBlock",v)}_polymorphicAsin(v){return J(v,Math.asin)}}(0,n.f)("FlowGraphASinBlock",Tv);class Lv extends C.c{constructor(v){super(T.u,T.u,(v=>this._polymorphicAcos(v)),"FlowGraphACosBlock",v)}_polymorphicAcos(v){return J(v,Math.acos)}}(0,n.f)("FlowGraphACosBlock",Lv);class ev extends C.c{constructor(v){super(T.u,T.u,(v=>this._polymorphicAtan(v)),"FlowGraphATanBlock",v)}_polymorphicAtan(v){return J(v,Math.atan)}}(0,n.f)("FlowGraphATanBlock",ev);class Fv extends L.b{constructor(v){super(T.c,T.c,T.c,((v,d)=>this._polymorphicAtan2(v,d)),"FlowGraphATan2Block",v)}_polymorphicAtan2(v,d){return Z(v,d,Math.atan2)}}(0,n.f)("FlowGraphATan2Block",Fv);class rv extends C.c{constructor(v){super(T.c,T.c,(v=>this._polymorphicSinh(v)),"FlowGraphSinhBlock",v)}_polymorphicSinh(v){return J(v,Math.sinh)}}(0,n.f)("FlowGraphSinhBlock",rv);class Cv extends C.c{constructor(v){super(T.c,T.c,(v=>this._polymorphicCosh(v)),"FlowGraphCoshBlock",v)}_polymorphicCosh(v){return J(v,Math.cosh)}}(0,n.f)("FlowGraphCoshBlock",Cv);class uv extends C.c{constructor(v){super(T.c,T.c,(v=>this._polymorphicTanh(v)),"FlowGraphTanhBlock",v)}_polymorphicTanh(v){return J(v,Math.tanh)}}(0,n.f)("FlowGraphTanhBlock",uv);class yv extends C.c{constructor(v){super(T.c,T.u,(v=>this._polymorphicAsinh(v)),"FlowGraphASinhBlock",v)}_polymorphicAsinh(v){return J(v,Math.asinh)}}(0,n.f)("FlowGraphASinhBlock",yv);class zv extends C.c{constructor(v){super(T.c,T.u,(v=>this._polymorphicAcosh(v)),"FlowGraphACoshBlock",v)}_polymorphicAcosh(v){return J(v,Math.acosh)}}(0,n.f)("FlowGraphACoshBlock",zv);class Bv extends C.c{constructor(v){super(T.c,T.u,(v=>this._polymorphicAtanh(v)),"FlowGraphATanhBlock",v)}_polymorphicAtanh(v){return J(v,Math.atanh)}}(0,n.f)("FlowGraphATanhBlock",Bv);class Xv extends C.c{constructor(v){super(T.c,T.u,(v=>this._polymorphicExp(v)),"FlowGraphExponentialBlock",v)}_polymorphicExp(v){return J(v,Math.exp)}}(0,n.f)("FlowGraphExponentialBlock",Xv);class mv extends C.c{constructor(v){super(T.c,T.u,(v=>this._polymorphicLog(v)),"FlowGraphLogBlock",v)}_polymorphicLog(v){return J(v,Math.log)}}(0,n.f)("FlowGraphLogBlock",mv);class Vv extends C.c{constructor(v){super(T.c,T.u,(v=>this._polymorphicLog2(v)),"FlowGraphLog2Block",v)}_polymorphicLog2(v){return J(v,Math.log2)}}(0,n.f)("FlowGraphLog2Block",Vv);class hv extends C.c{constructor(v){super(T.c,T.u,(v=>this._polymorphicLog10(v)),"FlowGraphLog10Block",v)}_polymorphicLog10(v){return J(v,Math.log10)}}(0,n.f)("FlowGraphLog10Block",hv);class Sv extends C.c{constructor(v){super(T.c,T.u,(v=>this._polymorphicSqrt(v)),"FlowGraphSquareRootBlock",v)}_polymorphicSqrt(v){return J(v,Math.sqrt)}}(0,n.f)("FlowGraphSquareRootBlock",Sv);class Av extends C.c{constructor(v){super(T.c,T.u,(v=>this._polymorphicCubeRoot(v)),"FlowGraphCubeRootBlock",v)}_polymorphicCubeRoot(v){return J(v,Math.cbrt)}}(0,n.f)("FlowGraphCubeRootBlock",Av);class fv extends L.b{constructor(v){super(T.c,T.u,T.u,((v,d)=>this._polymorphicPow(v,d)),"FlowGraphPowerBlock",v)}_polymorphicPow(v,d){return Z(v,d,Math.pow)}}(0,n.f)("FlowGraphPowerBlock",fv);class Pv extends C.c{constructor(v){super((0,T.R)((null===v||void 0===v?void 0:v.valueType)||"FlowGraphInteger"),(0,T.R)((null===v||void 0===v?void 0:v.valueType)||"FlowGraphInteger"),(v=>"boolean"===typeof v?!v:"number"===typeof v?~v:new y.b(~v.value)),"FlowGraphBitwiseNotBlock",v)}}(0,n.f)("FlowGraphBitwiseNotBlock",Pv);class Ov extends L.b{constructor(v){super((0,T.R)((null===v||void 0===v?void 0:v.valueType)||"FlowGraphInteger"),(0,T.R)((null===v||void 0===v?void 0:v.valueType)||"FlowGraphInteger"),(0,T.R)((null===v||void 0===v?void 0:v.valueType)||"FlowGraphInteger"),((v,d)=>{if("boolean"===typeof v&&"boolean"===typeof d)return v&&d;if("number"===typeof v&&"number"===typeof d)return v&d;if("object"===typeof v&&"object"===typeof d)return new y.b(v.value&d.value);throw new Error(`Cannot perform bitwise AND on ${v} and ${d}`)}),"FlowGraphBitwiseAndBlock",v)}}(0,n.f)("FlowGraphBitwiseAndBlock",Ov);class Jv extends L.b{constructor(v){super((0,T.R)((null===v||void 0===v?void 0:v.valueType)||"FlowGraphInteger"),(0,T.R)((null===v||void 0===v?void 0:v.valueType)||"FlowGraphInteger"),(0,T.R)((null===v||void 0===v?void 0:v.valueType)||"FlowGraphInteger"),((v,d)=>{if("boolean"===typeof v&&"boolean"===typeof d)return v||d;if("number"===typeof v&&"number"===typeof d)return v|d;if("object"===typeof v&&"object"===typeof d)return new y.b(v.value|d.value);throw new Error(`Cannot perform bitwise OR on ${v} and ${d}`)}),"FlowGraphBitwiseOrBlock",v)}}(0,n.f)("FlowGraphBitwiseOrBlock",Jv);class Kv extends L.b{constructor(v){super((0,T.R)((null===v||void 0===v?void 0:v.valueType)||"FlowGraphInteger"),(0,T.R)((null===v||void 0===v?void 0:v.valueType)||"FlowGraphInteger"),(0,T.R)((null===v||void 0===v?void 0:v.valueType)||"FlowGraphInteger"),((v,d)=>{if("boolean"===typeof v&&"boolean"===typeof d)return v!==d;if("number"===typeof v&&"number"===typeof d)return v^d;if("object"===typeof v&&"object"===typeof d)return new y.b(v.value^d.value);throw new Error(`Cannot perform bitwise XOR on ${v} and ${d}`)}),"FlowGraphBitwiseXorBlock",v)}}(0,n.f)("FlowGraphBitwiseXorBlock",Kv);class ov extends L.b{constructor(v){super(T.h,T.h,T.h,((v,d)=>new y.b(v.value<<d.value)),"FlowGraphBitwiseLeftShiftBlock",v)}}(0,n.f)("FlowGraphBitwiseLeftShiftBlock",ov);class gv extends L.b{constructor(v){super(T.h,T.h,T.h,((v,d)=>new y.b(v.value>>d.value)),"FlowGraphBitwiseRightShiftBlock",v)}}(0,n.f)("FlowGraphBitwiseRightShiftBlock",gv);class Rv extends C.c{constructor(v){super(T.h,T.h,(v=>new y.b(Math.clz32(v.value))),"FlowGraphLeadingZerosBlock",v)}}(0,n.f)("FlowGraphLeadingZerosBlock",Rv);class Mv extends C.c{constructor(v){super(T.h,T.h,(v=>new y.b(v.value?31-Math.clz32(v.value&-v.value):32)),"FlowGraphTrailingZerosBlock",v)}}(0,n.f)("FlowGraphTrailingZerosBlock",Mv);class Yv extends C.c{constructor(v){super(T.h,T.h,(v=>new y.b(function(v){let d=0;for(;v;)d+=1&v,v>>=1;return d}(v.value))),"FlowGraphOneBitsCounterBlock",v)}}(0,n.f)("FlowGraphOneBitsCounterBlock",Yv)},14201:(v,d,Q)=>{Q.d(d,{b:()=>T});var n=Q(14208);class T extends n.c{constructor(v,d,Q,n,T,L){super(Q,L),this._operation=n,this._className=T,this.a=this.registerDataInput("a",v),this.b=this.registerDataInput("b",d)}_doOperation(v){const d=this.a.getValue(v),Q=this.b.getValue(v);return this._operation(d,Q)}getClassName(){return this._className}}},14208:(v,d,Q)=>{Q.d(d,{c:()=>F});var n=Q(12934),T=Q(12908);const L="cachedOperationValue",e="cachedExecutionId";class F extends n.b{constructor(v,d){super(d),this.value=this.registerDataOutput("value",v),this.isValid=this.registerDataOutput("isValid",T.f)}_updateOutputs(v){const d=v._getExecutionVariable(this,e,-1),Q=v._getExecutionVariable(this,L,null);if(void 0!==Q&&null!==Q&&d===v.executionId)this.isValid.setValue(!0,v),this.value.setValue(Q,v);else try{const d=this._doOperation(v);if(void 0===d||null===d)return void this.isValid.setValue(!1,v);v._setExecutionVariable(this,L,d),v._setExecutionVariable(this,e,v.executionId),this.value.setValue(d,v),this.isValid.setValue(!0,v)}catch(n){this.isValid.setValue(!1,v)}}}},14212:(v,d,Q)=>{Q.d(d,{c:()=>T});var n=Q(14208);class T extends n.c{constructor(v,d,Q,n,T){super(d,T),this._operation=Q,this._className=n,this.a=this.registerDataInput("a",v)}_doOperation(v){return this._operation(this.a.getValue(v))}getClassName(){return this._className}}}}]);