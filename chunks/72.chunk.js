"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[72],{14308:(Q,X,C)=>{C.r(X),C.d(X,{FlowGraphAbsBlock:()=>g,FlowGraphAcosBlock:()=>MQ,FlowGraphAcoshBlock:()=>wQ,FlowGraphAddBlock:()=>a,FlowGraphAsinBlock:()=>hQ,FlowGraphAsinhBlock:()=>LQ,FlowGraphAtan2Block:()=>OQ,FlowGraphAtanBlock:()=>fQ,FlowGraphAtanhBlock:()=>iQ,FlowGraphBitwiseAndBlock:()=>vQ,FlowGraphBitwiseLeftShiftBlock:()=>SQ,FlowGraphBitwiseNotBlock:()=>jQ,FlowGraphBitwiseOrBlock:()=>ZQ,FlowGraphBitwiseRightShiftBlock:()=>eQ,FlowGraphBitwiseXorBlock:()=>gQ,FlowGraphCeilBlock:()=>R,FlowGraphClampBlock:()=>c,FlowGraphCosBlock:()=>CQ,FlowGraphCoshBlock:()=>WQ,FlowGraphCubeRootBlock:()=>rQ,FlowGraphDegToRadBlock:()=>d,FlowGraphDivideBlock:()=>z,FlowGraphEBlock:()=>r,FlowGraphEqualityBlock:()=>p,FlowGraphExpBlock:()=>aQ,FlowGraphFloorBlock:()=>k,FlowGraphFractionBlock:()=>o,FlowGraphGreaterThanBlock:()=>A,FlowGraphGreaterThanOrEqualBlock:()=>D,FlowGraphInfBlock:()=>j,FlowGraphIsInfinityBlock:()=>V,FlowGraphIsNanBlock:()=>u,FlowGraphLeadingZerosBlock:()=>kQ,FlowGraphLessThanBlock:()=>t,FlowGraphLessThanOrEqualBlock:()=>y,FlowGraphLog10Block:()=>zQ,FlowGraphLog2Block:()=>sQ,FlowGraphLogBlock:()=>FQ,FlowGraphMathInterpolationBlock:()=>b,FlowGraphMaxBlock:()=>N,FlowGraphMinBlock:()=>K,FlowGraphModuloBlock:()=>J,FlowGraphMultiplyBlock:()=>s,FlowGraphNaNBlock:()=>v,FlowGraphNegationBlock:()=>T,FlowGraphOneBitsCounterBlock:()=>HQ,FlowGraphPiBlock:()=>P,FlowGraphPowerBlock:()=>PQ,FlowGraphRadToDegBlock:()=>QQ,FlowGraphRandomBlock:()=>x,FlowGraphRoundBlock:()=>H,FlowGraphSaturateBlock:()=>B,FlowGraphSignBlock:()=>S,FlowGraphSinBlock:()=>XQ,FlowGraphSinhBlock:()=>mQ,FlowGraphSquareRootBlock:()=>xQ,FlowGraphSubtractBlock:()=>F,FlowGraphTanBlock:()=>lQ,FlowGraphTanhBlock:()=>UQ,FlowGraphTrailingZerosBlock:()=>RQ,FlowGraphTruncBlock:()=>e});var l=C(620),h=C(13063),M=C(14311),f=C(14320);class O extends f.d{constructor(Q,X,C,l){super(Q,l),this._operation=X,this._className=C}_doOperation(Q){return this._operation(Q)}getClassName(){return this._className}}var m=C(668),W=C(14326);class U extends f.d{constructor(Q,X,C,l,h,M,f){super(l,f),this._operation=h,this._className=M,this.a=this.registerDataInput("a",Q),this.b=this.registerDataInput("b",X),this.c=this.registerDataInput("c",C)}_doOperation(Q){return this._operation(this.a.getValue(Q),this.b.getValue(Q),this.c.getValue(Q))}getClassName(){return this._className}}var L=C(13060),w=C(13067),i=C(13104);class a extends M.e{constructor(Q){super((0,h.H)(null===Q||void 0===Q?void 0:Q.type),(0,h.H)(null===Q||void 0===Q?void 0:Q.type),(0,h.H)(null===Q||void 0===Q?void 0:Q.type),((Q,X)=>this._polymorphicAdd(Q,X)),"FlowGraphAddBlock",Q)}_polymorphicAdd(Q,X){const C=(0,i.m)(Q),l=(0,i.m)(X);if((0,i.j)(C,l)||(0,i.h)(C,l)||(0,i.d)(C,l))return Q.add(X);if("Quaternion"===C||"Vector4"===l)return new m.o(Q.x,Q.y,Q.z,Q.w).addInPlace(X);if("Vector4"===C||"Quaternion"===l)return Q.add(X);var h;if(null!==(h=this.config)&&void 0!==h&&h.preventIntegerFloatArithmetic&&typeof Q!==typeof X)throw new Error("Cannot add different types of numbers.");return(0,i.s)(Q)+(0,i.s)(X)}}(0,l.g)("FlowGraphAddBlock",a);class F extends M.e{constructor(Q){super((0,h.H)(null===Q||void 0===Q?void 0:Q.type),(0,h.H)(null===Q||void 0===Q?void 0:Q.type),(0,h.H)(null===Q||void 0===Q?void 0:Q.type),((Q,X)=>this._polymorphicSubtract(Q,X)),"FlowGraphSubtractBlock",Q)}_polymorphicSubtract(Q,X){const C=(0,i.m)(Q),l=(0,i.m)(X);if((0,i.j)(C,l)||(0,i.d)(C,l)||(0,i.h)(C,l))return Q.Od(X);if("Quaternion"===C||"Vector4"===l)return new m.o(Q.x,Q.y,Q.z,Q.w).$j(X);if("Vector4"===C||"Quaternion"===l)return Q.Od(X);var h;if(null!==(h=this.config)&&void 0!==h&&h.preventIntegerFloatArithmetic&&typeof Q!==typeof X)throw new Error("Cannot add different types of numbers.");return(0,i.s)(Q)-(0,i.s)(X)}}(0,l.g)("FlowGraphSubtractBlock",F);class s extends M.e{constructor(Q){super((0,h.H)(null===Q||void 0===Q?void 0:Q.type),(0,h.H)(null===Q||void 0===Q?void 0:Q.type),(0,h.H)(null===Q||void 0===Q?void 0:Q.type),((Q,X)=>this._polymorphicMultiply(Q,X)),"FlowGraphMultiplyBlock",Q)}_polymorphicMultiply(Q,X){const C=(0,i.m)(Q),l=(0,i.m)(X);if((0,i.j)(C,l)||(0,i.d)(C,l))return Q.multiply(X);if("Quaternion"===C||"Vector4"===l)return new m.o(Q.x,Q.y,Q.z,Q.w).multiplyInPlace(X);if("Vector4"===C||"Quaternion"===l)return Q.multiply(X);if((0,i.h)(C,l)){var h;if(null!==(h=this.config)&&void 0!==h&&h.useMatrixPerComponent){const l=Q.m;for(let Q=0;Q<l.length;Q++)l[Q]*=X.m[Q];return"Matrix2D"===C?new w.b(l):"Matrix3D"===C?new w.e(l):m.b.Wj(l)}return X.multiply(Q)}var M;if(null!==(M=this.config)&&void 0!==M&&M.preventIntegerFloatArithmetic&&typeof Q!==typeof X)throw new Error("Cannot add different types of numbers.");return(0,i.s)(Q)*(0,i.s)(X)}}(0,l.g)("FlowGraphMultiplyBlock",s);class z extends M.e{constructor(Q){super((0,h.H)(null===Q||void 0===Q?void 0:Q.type),(0,h.H)(null===Q||void 0===Q?void 0:Q.type),(0,h.H)(null===Q||void 0===Q?void 0:Q.type),((Q,X)=>this._polymorphicDivide(Q,X)),"FlowGraphDivideBlock",Q)}_polymorphicDivide(Q,X){const C=(0,i.m)(Q),l=(0,i.m)(X);if((0,i.j)(C,l)||(0,i.d)(C,l))return Q.divide(X);if("Quaternion"===C||"Quaternion"===l){const C=Q.clone();return C.x/=X.x,C.y/=X.y,C.z/=X.z,C.w/=X.w,C}if("Quaternion"===C||"Vector4"===l)return new m.o(Q.x,Q.y,Q.z,Q.w).divideInPlace(X);if("Vector4"===C||"Quaternion"===l)return Q.divide(X);if((0,i.h)(C,l)){var h;if(null!==(h=this.config)&&void 0!==h&&h.useMatrixPerComponent){const l=Q.m;for(let Q=0;Q<l.length;Q++)l[Q]/=X.m[Q];return"Matrix2D"===C?new w.b(l):"Matrix3D"===C?new w.e(l):m.b.Wj(l)}return Q.divide(X)}var M;if(null!==(M=this.config)&&void 0!==M&&M.preventIntegerFloatArithmetic&&typeof Q!==typeof X)throw new Error("Cannot add different types of numbers.");return(0,i.s)(Q)/(0,i.s)(X)}}(0,l.g)("FlowGraphDivideBlock",z);class x extends O{constructor(Q){super(h.p,(Q=>this._random(Q)),"FlowGraphRandomBlock",Q),this.min=this.registerDataInput("min",h.p,(null===Q||void 0===Q?void 0:Q.min)??0),this.max=this.registerDataInput("max",h.p,(null===Q||void 0===Q?void 0:Q.max)??1),null!==Q&&void 0!==Q&&Q.seed&&(this._seed=Q.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const Q=1e4*Math.sin(this._seed++);return Q-Math.floor(Q)}return Math.random()}_random(Q){const X=this.min.getValue(Q),C=this.max.getValue(Q);return this._getRandomValue()*(C-X)+X}}(0,l.g)("FlowGraphRandomBlock",x);class r extends O{constructor(Q){super(h.p,(()=>Math.E),"FlowGraphEBlock",Q)}}(0,l.g)("FlowGraphEBlock",r);class P extends O{constructor(Q){super(h.p,(()=>Math.PI),"FlowGraphPIBlock",Q)}}(0,l.g)("FlowGraphPIBlock",P);class j extends O{constructor(Q){super(h.p,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",Q)}}(0,l.g)("FlowGraphInfBlock",j);class v extends O{constructor(Q){super(h.p,(()=>Number.NaN),"FlowGraphNaNBlock",Q)}}function Z(Q,X){switch((0,i.m)(Q)){case"FlowGraphInteger":return new L.d(X(Q.value));case"Vector2":return new m.h(X(Q.x),X(Q.y));case"Yj":return new m.k(X(Q.x),X(Q.y),X(Q.z));case"Vector4":return new m.o(X(Q.x),X(Q.y),X(Q.z),X(Q.w));case"Quaternion":return new m.c(X(Q.x),X(Q.y),X(Q.z),X(Q.w));case"Matrix":return m.b.Wj(Q.m.map(X));case"Matrix2D":return new w.b(Q.m.map(X));case"Matrix3D":return new w.e(Q.m.map(X));default:return X(Q)}}(0,l.g)("FlowGraphNaNBlock",v);class g extends W.d{constructor(Q){super(h.p,h.p,(Q=>this._polymorphicAbs(Q)),"FlowGraphAbsBlock",Q)}_polymorphicAbs(Q){return Z(Q,Math.abs)}}(0,l.g)("FlowGraphAbsBlock",g);class S extends W.d{constructor(Q){super(h.p,h.p,(Q=>this._polymorphicSign(Q)),"FlowGraphSignBlock",Q)}_polymorphicSign(Q){return Z(Q,Math.sign)}}(0,l.g)("FlowGraphSignBlock",S);class e extends W.d{constructor(Q){super(h.p,h.p,(Q=>this._polymorphicTrunc(Q)),"FlowGraphTruncBlock",Q)}_polymorphicTrunc(Q){return Z(Q,Math.trunc)}}(0,l.g)("FlowGraphTruncBlock",e);class k extends W.d{constructor(Q){super(h.p,h.p,(Q=>this._polymorphicFloor(Q)),"FlowGraphFloorBlock",Q)}_polymorphicFloor(Q){return Z(Q,Math.floor)}}(0,l.g)("FlowGraphFloorBlock",k);class R extends W.d{constructor(Q){super(h.d,h.d,(Q=>this._polymorphicCeiling(Q)),"FlowGraphCeilBlock",Q)}_polymorphicCeiling(Q){return Z(Q,Math.ceil)}}(0,l.g)("FlowGraphCeilBlock",R);class H extends W.d{constructor(Q){super(h.d,h.d,(Q=>this._polymorphicRound(Q)),"FlowGraphRoundBlock",Q)}_polymorphicRound(Q){return Z(Q,(Q=>{var X;return Q<0&&null!==(X=this.config)&&void 0!==X&&X.roundHalfAwayFromZero?-Math.round(-Q):Math.round(Q)}))}}(0,l.g)("FlowGraphRoundBlock",H);class o extends W.d{constructor(Q){super(h.d,h.d,(Q=>this._polymorphicFraction(Q)),"FlowGraphFractBlock",Q)}_polymorphicFraction(Q){return Z(Q,(Q=>Q-Math.floor(Q)))}}(0,l.g)("FlowGraphFractBlock",o);class T extends W.d{constructor(Q){super(h.d,h.d,(Q=>this._polymorphicNeg(Q)),"FlowGraphNegationBlock",Q)}_polymorphicNeg(Q){return Z(Q,(Q=>-Q))}}function Y(Q,X,C){switch((0,i.m)(Q)){case"FlowGraphInteger":return new L.d(C(Q.value,X.value));case"Vector2":return new m.h(C(Q.x,X.x),C(Q.y,X.y));case"Yj":return new m.k(C(Q.x,X.x),C(Q.y,X.y),C(Q.z,X.z));case"Vector4":return new m.o(C(Q.x,X.x),C(Q.y,X.y),C(Q.z,X.z),C(Q.w,X.w));case"Quaternion":return new m.c(C(Q.x,X.x),C(Q.y,X.y),C(Q.z,X.z),C(Q.w,X.w));case"Matrix":return m.b.Wj(Q.m.map(((Q,l)=>C(Q,X.m[l]))));case"Matrix2D":return new w.b(Q.m.map(((Q,l)=>C(Q,X.m[l]))));case"Matrix3D":return new w.e(Q.m.map(((Q,l)=>C(Q,X.m[l]))));default:return C((0,i.s)(Q),(0,i.s)(X))}}(0,l.g)("FlowGraphNegationBlock",T);class J extends M.e{constructor(Q){super(h.d,h.d,h.d,((Q,X)=>this._polymorphicRemainder(Q,X)),"FlowGraphModuloBlock",Q)}_polymorphicRemainder(Q,X){return Y(Q,X,((Q,X)=>Q%X))}}(0,l.g)("FlowGraphModuloBlock",J);class K extends M.e{constructor(Q){super(h.d,h.d,h.d,((Q,X)=>this._polymorphicMin(Q,X)),"FlowGraphMinBlock",Q)}_polymorphicMin(Q,X){return Y(Q,X,Math.min)}}(0,l.g)("FlowGraphMinBlock",K);class N extends M.e{constructor(Q){super(h.d,h.d,h.d,((Q,X)=>this._polymorphicMax(Q,X)),"FlowGraphMaxBlock",Q)}_polymorphicMax(Q,X){return Y(Q,X,Math.max)}}function q(Q,X,C){return Math.min(Math.max(Q,Math.min(X,C)),Math.max(X,C))}function n(Q,X,C,l){switch((0,i.m)(Q)){case"FlowGraphInteger":return new L.d(l(Q.value,X.value,C.value));case"Vector2":return new m.h(l(Q.x,X.x,C.x),l(Q.y,X.y,C.y));case"Yj":return new m.k(l(Q.x,X.x,C.x),l(Q.y,X.y,C.y),l(Q.z,X.z,C.z));case"Vector4":return new m.o(l(Q.x,X.x,C.x),l(Q.y,X.y,C.y),l(Q.z,X.z,C.z),l(Q.w,X.w,C.w));case"Quaternion":return new m.c(l(Q.x,X.x,C.x),l(Q.y,X.y,C.y),l(Q.z,X.z,C.z),l(Q.w,X.w,C.w));case"Matrix":return m.b.Wj(Q.m.map(((Q,h)=>l(Q,X.m[h],C.m[h]))));case"Matrix2D":return new w.b(Q.m.map(((Q,h)=>l(Q,X.m[h],C.m[h]))));case"Matrix3D":return new w.e(Q.m.map(((Q,h)=>l(Q,X.m[h],C.m[h]))));default:return l((0,i.s)(Q),(0,i.s)(X),(0,i.s)(C))}}(0,l.g)("FlowGraphMaxBlock",N);class c extends U{constructor(Q){super(h.d,h.d,h.d,h.d,((Q,X,C)=>this._polymorphicClamp(Q,X,C)),"FlowGraphClampBlock",Q)}_polymorphicClamp(Q,X,C){return n(Q,X,C,q)}}function E(Q){return Math.min(Math.max(Q,0),1)}(0,l.g)("FlowGraphClampBlock",c);class B extends W.d{constructor(Q){super(h.d,h.d,(Q=>this._polymorphicSaturate(Q)),"FlowGraphSaturateBlock",Q)}_polymorphicSaturate(Q){return Z(Q,E)}}function G(Q,X,C){return(1-C)*Q+C*X}(0,l.g)("FlowGraphSaturateBlock",B);class b extends U{constructor(Q){super(h.d,h.d,h.d,h.d,((Q,X,C)=>this._polymorphicInterpolate(Q,X,C)),"FlowGraphMathInterpolationBlock",Q)}_polymorphicInterpolate(Q,X,C){return n(Q,X,C,G)}}(0,l.g)("FlowGraphMathInterpolationBlock",b);class p extends M.e{constructor(Q){super(h.d,h.d,h.e,((Q,X)=>this._polymorphicEq(Q,X)),"FlowGraphEqualityBlock",Q)}_polymorphicEq(Q,X){const C=(0,i.m)(Q),l=(0,i.m)(X);return typeof Q===typeof X&&((0,i.j)(C,l)||(0,i.h)(C,l)||(0,i.d)(C,l)?Q.equals(X):Q===X)}}function I(Q,X,C){if((0,i.w)(Q)&&(0,i.w)(X))return C((0,i.s)(Q),(0,i.s)(X));throw new Error(`Cannot compare ${Q} and ${X}`)}(0,l.g)("FlowGraphEqualityBlock",p);class t extends M.e{constructor(Q){super(h.d,h.d,h.e,((Q,X)=>this._polymorphicLessThan(Q,X)),"FlowGraphLessThanBlock",Q)}_polymorphicLessThan(Q,X){return I(Q,X,((Q,X)=>Q<X))}}(0,l.g)("FlowGraphLessThanBlock",t);class y extends M.e{constructor(Q){super(h.d,h.d,h.e,((Q,X)=>this._polymorphicLessThanOrEqual(Q,X)),"FlowGraphLessThanOrEqualBlock",Q)}_polymorphicLessThanOrEqual(Q,X){return I(Q,X,((Q,X)=>Q<=X))}}(0,l.g)("FlowGraphLessThanOrEqualBlock",y);class A extends M.e{constructor(Q){super(h.d,h.d,h.e,((Q,X)=>this._polymorphicGreaterThan(Q,X)),"FlowGraphGreaterThanBlock",Q)}_polymorphicGreaterThan(Q,X){return I(Q,X,((Q,X)=>Q>X))}}(0,l.g)("FlowGraphGreaterThanBlock",A);class D extends M.e{constructor(Q){super(h.d,h.d,h.e,((Q,X)=>this._polymorphicGreaterThanOrEqual(Q,X)),"FlowGraphGreaterThanOrEqualBlock",Q)}_polymorphicGreaterThanOrEqual(Q,X){return I(Q,X,((Q,X)=>Q>=X))}}(0,l.g)("FlowGraphGreaterThanOrEqualBlock",D);class u extends W.d{constructor(Q){super(h.d,h.e,(Q=>this._polymorphicIsNan(Q)),"FlowGraphIsNaNBlock",Q)}_polymorphicIsNan(Q){if((0,i.w)(Q,!0))return isNaN((0,i.s)(Q));throw new Error(`Cannot get NaN of ${Q}`)}}(0,l.g)("FlowGraphIsNaNBlock",u);class V extends W.d{constructor(Q){super(h.d,h.e,(Q=>this._polymorphicIsInf(Q)),"FlowGraphIsInfBlock",Q)}_polymorphicIsInf(Q){if((0,i.w)(Q))return!isFinite((0,i.s)(Q));throw new Error(`Cannot get isInf of ${Q}`)}}(0,l.g)("FlowGraphIsInfBlock",V);class d extends W.d{constructor(Q){super(h.d,h.d,(Q=>this._polymorphicDegToRad(Q)),"FlowGraphDegToRadBlock",Q)}_degToRad(Q){return Q*Math.PI/180}_polymorphicDegToRad(Q){return Z(Q,this._degToRad)}}(0,l.g)("FlowGraphDegToRadBlock",d);class QQ extends W.d{constructor(Q){super(h.d,h.d,(Q=>this._polymorphicRadToDeg(Q)),"FlowGraphRadToDegBlock",Q)}_radToDeg(Q){return 180*Q/Math.PI}_polymorphicRadToDeg(Q){return Z(Q,this._radToDeg)}}(0,l.g)("FlowGraphRadToDegBlock",QQ);class XQ extends W.d{constructor(Q){super(h.p,h.p,(Q=>this._polymorphicSin(Q)),"FlowGraphSinBlock",Q)}_polymorphicSin(Q){return Z(Q,Math.sin)}}class CQ extends W.d{constructor(Q){super(h.p,h.p,(Q=>this._polymorphicCos(Q)),"FlowGraphCosBlock",Q)}_polymorphicCos(Q){return Z(Q,Math.cos)}}class lQ extends W.d{constructor(Q){super(h.p,h.p,(Q=>this._polymorphicTan(Q)),"FlowGraphTanBlock",Q)}_polymorphicTan(Q){return Z(Q,Math.tan)}}class hQ extends W.d{constructor(Q){super(h.p,h.p,(Q=>this._polymorphicAsin(Q)),"FlowGraphASinBlock",Q)}_polymorphicAsin(Q){return Z(Q,Math.asin)}}(0,l.g)("FlowGraphASinBlock",hQ);class MQ extends W.d{constructor(Q){super(h.p,h.p,(Q=>this._polymorphicAcos(Q)),"FlowGraphACosBlock",Q)}_polymorphicAcos(Q){return Z(Q,Math.acos)}}(0,l.g)("FlowGraphACosBlock",MQ);class fQ extends W.d{constructor(Q){super(h.p,h.p,(Q=>this._polymorphicAtan(Q)),"FlowGraphATanBlock",Q)}_polymorphicAtan(Q){return Z(Q,Math.atan)}}(0,l.g)("FlowGraphATanBlock",fQ);class OQ extends M.e{constructor(Q){super(h.d,h.d,h.d,((Q,X)=>this._polymorphicAtan2(Q,X)),"FlowGraphATan2Block",Q)}_polymorphicAtan2(Q,X){return Y(Q,X,Math.atan2)}}(0,l.g)("FlowGraphATan2Block",OQ);class mQ extends W.d{constructor(Q){super(h.d,h.d,(Q=>this._polymorphicSinh(Q)),"FlowGraphSinhBlock",Q)}_polymorphicSinh(Q){return Z(Q,Math.sinh)}}(0,l.g)("FlowGraphSinhBlock",mQ);class WQ extends W.d{constructor(Q){super(h.d,h.d,(Q=>this._polymorphicCosh(Q)),"FlowGraphCoshBlock",Q)}_polymorphicCosh(Q){return Z(Q,Math.cosh)}}(0,l.g)("FlowGraphCoshBlock",WQ);class UQ extends W.d{constructor(Q){super(h.d,h.d,(Q=>this._polymorphicTanh(Q)),"FlowGraphTanhBlock",Q)}_polymorphicTanh(Q){return Z(Q,Math.tanh)}}(0,l.g)("FlowGraphTanhBlock",UQ);class LQ extends W.d{constructor(Q){super(h.d,h.p,(Q=>this._polymorphicAsinh(Q)),"FlowGraphASinhBlock",Q)}_polymorphicAsinh(Q){return Z(Q,Math.asinh)}}(0,l.g)("FlowGraphASinhBlock",LQ);class wQ extends W.d{constructor(Q){super(h.d,h.p,(Q=>this._polymorphicAcosh(Q)),"FlowGraphACoshBlock",Q)}_polymorphicAcosh(Q){return Z(Q,Math.acosh)}}(0,l.g)("FlowGraphACoshBlock",wQ);class iQ extends W.d{constructor(Q){super(h.d,h.p,(Q=>this._polymorphicAtanh(Q)),"FlowGraphATanhBlock",Q)}_polymorphicAtanh(Q){return Z(Q,Math.atanh)}}(0,l.g)("FlowGraphATanhBlock",iQ);class aQ extends W.d{constructor(Q){super(h.d,h.p,(Q=>this._polymorphicExp(Q)),"FlowGraphExponentialBlock",Q)}_polymorphicExp(Q){return Z(Q,Math.exp)}}(0,l.g)("FlowGraphExponentialBlock",aQ);class FQ extends W.d{constructor(Q){super(h.d,h.p,(Q=>this._polymorphicLog(Q)),"FlowGraphLogBlock",Q)}_polymorphicLog(Q){return Z(Q,Math.log)}}(0,l.g)("FlowGraphLogBlock",FQ);class sQ extends W.d{constructor(Q){super(h.d,h.p,(Q=>this._polymorphicLog2(Q)),"FlowGraphLog2Block",Q)}_polymorphicLog2(Q){return Z(Q,Math.log2)}}(0,l.g)("FlowGraphLog2Block",sQ);class zQ extends W.d{constructor(Q){super(h.d,h.p,(Q=>this._polymorphicLog10(Q)),"FlowGraphLog10Block",Q)}_polymorphicLog10(Q){return Z(Q,Math.log10)}}(0,l.g)("FlowGraphLog10Block",zQ);class xQ extends W.d{constructor(Q){super(h.d,h.p,(Q=>this._polymorphicSqrt(Q)),"FlowGraphSquareRootBlock",Q)}_polymorphicSqrt(Q){return Z(Q,Math.sqrt)}}(0,l.g)("FlowGraphSquareRootBlock",xQ);class rQ extends W.d{constructor(Q){super(h.d,h.p,(Q=>this._polymorphicCubeRoot(Q)),"FlowGraphCubeRootBlock",Q)}_polymorphicCubeRoot(Q){return Z(Q,Math.cbrt)}}(0,l.g)("FlowGraphCubeRootBlock",rQ);class PQ extends M.e{constructor(Q){super(h.d,h.p,h.p,((Q,X)=>this._polymorphicPow(Q,X)),"FlowGraphPowerBlock",Q)}_polymorphicPow(Q,X){return Y(Q,X,Math.pow)}}(0,l.g)("FlowGraphPowerBlock",PQ);class jQ extends W.d{constructor(Q){super((0,h.H)((null===Q||void 0===Q?void 0:Q.valueType)||"FlowGraphInteger"),(0,h.H)((null===Q||void 0===Q?void 0:Q.valueType)||"FlowGraphInteger"),(Q=>"boolean"===typeof Q?!Q:"number"===typeof Q?~Q:new L.d(~Q.value)),"FlowGraphBitwiseNotBlock",Q)}}(0,l.g)("FlowGraphBitwiseNotBlock",jQ);class vQ extends M.e{constructor(Q){super((0,h.H)((null===Q||void 0===Q?void 0:Q.valueType)||"FlowGraphInteger"),(0,h.H)((null===Q||void 0===Q?void 0:Q.valueType)||"FlowGraphInteger"),(0,h.H)((null===Q||void 0===Q?void 0:Q.valueType)||"FlowGraphInteger"),((Q,X)=>{if("boolean"===typeof Q&&"boolean"===typeof X)return Q&&X;if("number"===typeof Q&&"number"===typeof X)return Q&X;if("object"===typeof Q&&"object"===typeof X)return new L.d(Q.value&X.value);throw new Error(`Cannot perform bitwise AND on ${Q} and ${X}`)}),"FlowGraphBitwiseAndBlock",Q)}}(0,l.g)("FlowGraphBitwiseAndBlock",vQ);class ZQ extends M.e{constructor(Q){super((0,h.H)((null===Q||void 0===Q?void 0:Q.valueType)||"FlowGraphInteger"),(0,h.H)((null===Q||void 0===Q?void 0:Q.valueType)||"FlowGraphInteger"),(0,h.H)((null===Q||void 0===Q?void 0:Q.valueType)||"FlowGraphInteger"),((Q,X)=>{if("boolean"===typeof Q&&"boolean"===typeof X)return Q||X;if("number"===typeof Q&&"number"===typeof X)return Q|X;if("object"===typeof Q&&"object"===typeof X)return new L.d(Q.value|X.value);throw new Error(`Cannot perform bitwise OR on ${Q} and ${X}`)}),"FlowGraphBitwiseOrBlock",Q)}}(0,l.g)("FlowGraphBitwiseOrBlock",ZQ);class gQ extends M.e{constructor(Q){super((0,h.H)((null===Q||void 0===Q?void 0:Q.valueType)||"FlowGraphInteger"),(0,h.H)((null===Q||void 0===Q?void 0:Q.valueType)||"FlowGraphInteger"),(0,h.H)((null===Q||void 0===Q?void 0:Q.valueType)||"FlowGraphInteger"),((Q,X)=>{if("boolean"===typeof Q&&"boolean"===typeof X)return Q!==X;if("number"===typeof Q&&"number"===typeof X)return Q^X;if("object"===typeof Q&&"object"===typeof X)return new L.d(Q.value^X.value);throw new Error(`Cannot perform bitwise XOR on ${Q} and ${X}`)}),"FlowGraphBitwiseXorBlock",Q)}}(0,l.g)("FlowGraphBitwiseXorBlock",gQ);class SQ extends M.e{constructor(Q){super(h.f,h.f,h.f,((Q,X)=>new L.d(Q.value<<X.value)),"FlowGraphBitwiseLeftShiftBlock",Q)}}(0,l.g)("FlowGraphBitwiseLeftShiftBlock",SQ);class eQ extends M.e{constructor(Q){super(h.f,h.f,h.f,((Q,X)=>new L.d(Q.value>>X.value)),"FlowGraphBitwiseRightShiftBlock",Q)}}(0,l.g)("FlowGraphBitwiseRightShiftBlock",eQ);class kQ extends W.d{constructor(Q){super(h.f,h.f,(Q=>new L.d(Math.clz32(Q.value))),"FlowGraphLeadingZerosBlock",Q)}}(0,l.g)("FlowGraphLeadingZerosBlock",kQ);class RQ extends W.d{constructor(Q){super(h.f,h.f,(Q=>new L.d(Q.value?31-Math.clz32(Q.value&-Q.value):32)),"FlowGraphTrailingZerosBlock",Q)}}(0,l.g)("FlowGraphTrailingZerosBlock",RQ);class HQ extends W.d{constructor(Q){super(h.f,h.f,(Q=>new L.d(function(Q){let X=0;for(;Q;)X+=1&Q,Q>>=1;return X}(Q.value))),"FlowGraphOneBitsCounterBlock",Q)}}(0,l.g)("FlowGraphOneBitsCounterBlock",HQ)},14311:(Q,X,C)=>{C.d(X,{e:()=>h});var l=C(14320);class h extends l.d{constructor(Q,X,C,l,h,M){super(C,M),this._operation=l,this._className=h,this.a=this.registerDataInput("a",Q),this.b=this.registerDataInput("b",X)}_doOperation(Q){const X=this.a.getValue(Q),C=this.b.getValue(Q);return this._operation(X,C)}getClassName(){return this._className}}},14320:(Q,X,C)=>{C.d(X,{d:()=>O});var l=C(13092),h=C(13063);const M="cachedOperationValue",f="cachedExecutionId";class O extends l.c{constructor(Q,X){super(X),this.value=this.registerDataOutput("value",Q),this.isValid=this.registerDataOutput("isValid",h.e)}_updateOutputs(Q){const X=Q._getExecutionVariable(this,f,-1),C=Q._getExecutionVariable(this,M,null);if(void 0!==C&&null!==C&&X===Q.executionId)this.isValid.setValue(!0,Q),this.value.setValue(C,Q);else try{const X=this._doOperation(Q);if(void 0===X||null===X)return void this.isValid.setValue(!1,Q);Q._setExecutionVariable(this,M,X),Q._setExecutionVariable(this,f,Q.executionId),this.value.setValue(X,Q),this.isValid.setValue(!0,Q)}catch(l){this.isValid.setValue(!1,Q)}}}},14326:(Q,X,C)=>{C.d(X,{d:()=>h});var l=C(14320);class h extends l.d{constructor(Q,X,C,l,h){super(X,h),this._operation=C,this._className=l,this.a=this.registerDataInput("a",Q)}_doOperation(Q){return this._operation(this.a.getValue(Q))}getClassName(){return this._className}}}}]);