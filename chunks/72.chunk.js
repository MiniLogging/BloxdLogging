"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[72],{13969:(U,W,l)=>{l.r(W),l.d(W,{FlowGraphAbsBlock:()=>o,FlowGraphAcosBlock:()=>LU,FlowGraphAcoshBlock:()=>jU,FlowGraphAddBlock:()=>w,FlowGraphAsinBlock:()=>tU,FlowGraphAsinhBlock:()=>yU,FlowGraphAtan2Block:()=>BU,FlowGraphAtanBlock:()=>pU,FlowGraphAtanhBlock:()=>sU,FlowGraphBitwiseAndBlock:()=>NU,FlowGraphBitwiseLeftShiftBlock:()=>iU,FlowGraphBitwiseNotBlock:()=>ZU,FlowGraphBitwiseOrBlock:()=>DU,FlowGraphBitwiseRightShiftBlock:()=>OU,FlowGraphBitwiseXorBlock:()=>oU,FlowGraphCeilBlock:()=>d,FlowGraphClampBlock:()=>Q,FlowGraphCosBlock:()=>lU,FlowGraphCoshBlock:()=>AU,FlowGraphCubeRootBlock:()=>gU,FlowGraphDegToRadBlock:()=>T,FlowGraphDivideBlock:()=>m,FlowGraphEBlock:()=>g,FlowGraphEqualityBlock:()=>P,FlowGraphExpBlock:()=>wU,FlowGraphFloorBlock:()=>e,FlowGraphFractionBlock:()=>V,FlowGraphGreaterThanBlock:()=>z,FlowGraphGreaterThanOrEqualBlock:()=>a,FlowGraphInfBlock:()=>Z,FlowGraphIsInfinityBlock:()=>X,FlowGraphIsNanBlock:()=>Y,FlowGraphLeadingZerosBlock:()=>eU,FlowGraphLessThanBlock:()=>c,FlowGraphLessThanOrEqualBlock:()=>h,FlowGraphLog10Block:()=>mU,FlowGraphLog2Block:()=>rU,FlowGraphLogBlock:()=>KU,FlowGraphMathInterpolationBlock:()=>C,FlowGraphMaxBlock:()=>F,FlowGraphMinBlock:()=>R,FlowGraphModuloBlock:()=>I,FlowGraphMultiplyBlock:()=>r,FlowGraphNaNBlock:()=>N,FlowGraphNegationBlock:()=>n,FlowGraphOneBitsCounterBlock:()=>HU,FlowGraphPiBlock:()=>E,FlowGraphPowerBlock:()=>EU,FlowGraphRadToDegBlock:()=>UU,FlowGraphRandomBlock:()=>f,FlowGraphRoundBlock:()=>H,FlowGraphSaturateBlock:()=>u,FlowGraphSignBlock:()=>i,FlowGraphSinBlock:()=>WU,FlowGraphSinhBlock:()=>kU,FlowGraphSquareRootBlock:()=>fU,FlowGraphSubtractBlock:()=>K,FlowGraphTanBlock:()=>MU,FlowGraphTanhBlock:()=>qU,FlowGraphTrailingZerosBlock:()=>dU,FlowGraphTruncBlock:()=>O});var M=l(655),t=l(12704),L=l(13974),p=l(13983);class B extends p.c{constructor(U,W,l,M){super(U,M),this._operation=W,this._className=l}_doOperation(U){return this._operation(U)}getClassName(){return this._className}}var k=l(706),A=l(13986);class q extends p.c{constructor(U,W,l,M,t,L,p){super(M,p),this._operation=t,this._className=L,this.a=this.registerDataInput("a",U),this.b=this.registerDataInput("b",W),this.c=this.registerDataInput("c",l)}_doOperation(U){return this._operation(this.a.getValue(U),this.b.getValue(U),this.c.getValue(U))}getClassName(){return this._className}}var y=l(12699),j=l(12713),s=l(12746);class w extends L.e{constructor(U){super((0,t.Q)(null===U||void 0===U?void 0:U.type),(0,t.Q)(null===U||void 0===U?void 0:U.type),(0,t.Q)(null===U||void 0===U?void 0:U.type),((U,W)=>this._polymorphicAdd(U,W)),"FlowGraphAddBlock",U)}_polymorphicAdd(U,W){const l=(0,s.i)(U),M=(0,s.i)(W);if((0,s.g)(l,M)||(0,s.e)(l,M)||(0,s.c)(l,M))return U.add(W);if("Quaternion"===l||"Vector4"===M)return new k.p(U.x,U.y,U.z,U.w).addInPlace(W);if("Vector4"===l||"Quaternion"===M)return U.add(W);var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof U!==typeof W)throw new Error("Cannot add different types of numbers.");return(0,s.n)(U)+(0,s.n)(W)}}(0,M.f)("FlowGraphAddBlock",w);class K extends L.e{constructor(U){super((0,t.Q)(null===U||void 0===U?void 0:U.type),(0,t.Q)(null===U||void 0===U?void 0:U.type),(0,t.Q)(null===U||void 0===U?void 0:U.type),((U,W)=>this._polymorphicSubtract(U,W)),"FlowGraphSubtractBlock",U)}_polymorphicSubtract(U,W){const l=(0,s.i)(U),M=(0,s.i)(W);if((0,s.g)(l,M)||(0,s.c)(l,M)||(0,s.e)(l,M))return U.de(W);if("Quaternion"===l||"Vector4"===M)return new k.p(U.x,U.y,U.z,U.w).kk(W);if("Vector4"===l||"Quaternion"===M)return U.de(W);var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof U!==typeof W)throw new Error("Cannot add different types of numbers.");return(0,s.n)(U)-(0,s.n)(W)}}(0,M.f)("FlowGraphSubtractBlock",K);class r extends L.e{constructor(U){super((0,t.Q)(null===U||void 0===U?void 0:U.type),(0,t.Q)(null===U||void 0===U?void 0:U.type),(0,t.Q)(null===U||void 0===U?void 0:U.type),((U,W)=>this._polymorphicMultiply(U,W)),"FlowGraphMultiplyBlock",U)}_polymorphicMultiply(U,W){const l=(0,s.i)(U),M=(0,s.i)(W);if((0,s.g)(l,M)||(0,s.c)(l,M))return U.multiply(W);if("Quaternion"===l||"Vector4"===M)return new k.p(U.x,U.y,U.z,U.w).multiplyInPlace(W);if("Vector4"===l||"Quaternion"===M)return U.multiply(W);if((0,s.e)(l,M)){var t;if(null!==(t=this.config)&&void 0!==t&&t.useMatrixPerComponent){const M=U.m;for(let U=0;U<M.length;U++)M[U]*=W.m[U];return"Matrix2D"===l?new j.b(M):"Matrix3D"===l?new j.f(M):k.c.gk(M)}return W.multiply(U)}var L;if(null!==(L=this.config)&&void 0!==L&&L.preventIntegerFloatArithmetic&&typeof U!==typeof W)throw new Error("Cannot add different types of numbers.");return(0,s.n)(U)*(0,s.n)(W)}}(0,M.f)("FlowGraphMultiplyBlock",r);class m extends L.e{constructor(U){super((0,t.Q)(null===U||void 0===U?void 0:U.type),(0,t.Q)(null===U||void 0===U?void 0:U.type),(0,t.Q)(null===U||void 0===U?void 0:U.type),((U,W)=>this._polymorphicDivide(U,W)),"FlowGraphDivideBlock",U)}_polymorphicDivide(U,W){const l=(0,s.i)(U),M=(0,s.i)(W);if((0,s.g)(l,M)||(0,s.c)(l,M))return U.divide(W);if("Quaternion"===l||"Quaternion"===M){const l=U.clone();return l.x/=W.x,l.y/=W.y,l.z/=W.z,l.w/=W.w,l}if("Quaternion"===l||"Vector4"===M)return new k.p(U.x,U.y,U.z,U.w).divideInPlace(W);if("Vector4"===l||"Quaternion"===M)return U.divide(W);if((0,s.e)(l,M)){var t;if(null!==(t=this.config)&&void 0!==t&&t.useMatrixPerComponent){const M=U.m;for(let U=0;U<M.length;U++)M[U]/=W.m[U];return"Matrix2D"===l?new j.b(M):"Matrix3D"===l?new j.f(M):k.c.gk(M)}return U.divide(W)}var L;if(null!==(L=this.config)&&void 0!==L&&L.preventIntegerFloatArithmetic&&typeof U!==typeof W)throw new Error("Cannot add different types of numbers.");return(0,s.n)(U)/(0,s.n)(W)}}(0,M.f)("FlowGraphDivideBlock",m);class f extends B{constructor(U){super(t.s,(U=>this._random(U)),"FlowGraphRandomBlock",U),this.min=this.registerDataInput("min",t.s,(null===U||void 0===U?void 0:U.min)??0),this.max=this.registerDataInput("max",t.s,(null===U||void 0===U?void 0:U.max)??1),null!==U&&void 0!==U&&U.seed&&(this._seed=U.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const U=1e4*Math.sin(this._seed++);return U-Math.floor(U)}return Math.random()}_random(U){const W=this.min.getValue(U),l=this.max.getValue(U);return this._getRandomValue()*(l-W)+W}}(0,M.f)("FlowGraphRandomBlock",f);class g extends B{constructor(U){super(t.s,(()=>Math.E),"FlowGraphEBlock",U)}}(0,M.f)("FlowGraphEBlock",g);class E extends B{constructor(U){super(t.s,(()=>Math.PI),"FlowGraphPIBlock",U)}}(0,M.f)("FlowGraphPIBlock",E);class Z extends B{constructor(U){super(t.s,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",U)}}(0,M.f)("FlowGraphInfBlock",Z);class N extends B{constructor(U){super(t.s,(()=>Number.NaN),"FlowGraphNaNBlock",U)}}function D(U,W){switch((0,s.i)(U)){case"FlowGraphInteger":return new y.d(W(U.value));case"Vector2":return new k.h(W(U.x),W(U.y));case"ik":return new k.l(W(U.x),W(U.y),W(U.z));case"Vector4":return new k.p(W(U.x),W(U.y),W(U.z),W(U.w));case"Quaternion":return new k.e(W(U.x),W(U.y),W(U.z),W(U.w));case"Matrix":return k.c.gk(U.m.map(W));case"Matrix2D":return new j.b(U.m.map(W));case"Matrix3D":return new j.f(U.m.map(W));default:return W(U)}}(0,M.f)("FlowGraphNaNBlock",N);class o extends A.e{constructor(U){super(t.s,t.s,(U=>this._polymorphicAbs(U)),"FlowGraphAbsBlock",U)}_polymorphicAbs(U){return D(U,Math.abs)}}(0,M.f)("FlowGraphAbsBlock",o);class i extends A.e{constructor(U){super(t.s,t.s,(U=>this._polymorphicSign(U)),"FlowGraphSignBlock",U)}_polymorphicSign(U){return D(U,Math.sign)}}(0,M.f)("FlowGraphSignBlock",i);class O extends A.e{constructor(U){super(t.s,t.s,(U=>this._polymorphicTrunc(U)),"FlowGraphTruncBlock",U)}_polymorphicTrunc(U){return D(U,Math.trunc)}}(0,M.f)("FlowGraphTruncBlock",O);class e extends A.e{constructor(U){super(t.s,t.s,(U=>this._polymorphicFloor(U)),"FlowGraphFloorBlock",U)}_polymorphicFloor(U){return D(U,Math.floor)}}(0,M.f)("FlowGraphFloorBlock",e);class d extends A.e{constructor(U){super(t.d,t.d,(U=>this._polymorphicCeiling(U)),"FlowGraphCeilBlock",U)}_polymorphicCeiling(U){return D(U,Math.ceil)}}(0,M.f)("FlowGraphCeilBlock",d);class H extends A.e{constructor(U){super(t.d,t.d,(U=>this._polymorphicRound(U)),"FlowGraphRoundBlock",U)}_polymorphicRound(U){return D(U,(U=>{var W;return U<0&&null!==(W=this.config)&&void 0!==W&&W.roundHalfAwayFromZero?-Math.round(-U):Math.round(U)}))}}(0,M.f)("FlowGraphRoundBlock",H);class V extends A.e{constructor(U){super(t.d,t.d,(U=>this._polymorphicFraction(U)),"FlowGraphFractBlock",U)}_polymorphicFraction(U){return D(U,(U=>U-Math.floor(U)))}}(0,M.f)("FlowGraphFractBlock",V);class n extends A.e{constructor(U){super(t.d,t.d,(U=>this._polymorphicNeg(U)),"FlowGraphNegationBlock",U)}_polymorphicNeg(U){return D(U,(U=>-U))}}function x(U,W,l){switch((0,s.i)(U)){case"FlowGraphInteger":return new y.d(l(U.value,W.value));case"Vector2":return new k.h(l(U.x,W.x),l(U.y,W.y));case"ik":return new k.l(l(U.x,W.x),l(U.y,W.y),l(U.z,W.z));case"Vector4":return new k.p(l(U.x,W.x),l(U.y,W.y),l(U.z,W.z),l(U.w,W.w));case"Quaternion":return new k.e(l(U.x,W.x),l(U.y,W.y),l(U.z,W.z),l(U.w,W.w));case"Matrix":return k.c.gk(U.m.map(((U,M)=>l(U,W.m[M]))));case"Matrix2D":return new j.b(U.m.map(((U,M)=>l(U,W.m[M]))));case"Matrix3D":return new j.f(U.m.map(((U,M)=>l(U,W.m[M]))));default:return l((0,s.n)(U),(0,s.n)(W))}}(0,M.f)("FlowGraphNegationBlock",n);class I extends L.e{constructor(U){super(t.d,t.d,t.d,((U,W)=>this._polymorphicRemainder(U,W)),"FlowGraphModuloBlock",U)}_polymorphicRemainder(U,W){return x(U,W,((U,W)=>U%W))}}(0,M.f)("FlowGraphModuloBlock",I);class R extends L.e{constructor(U){super(t.d,t.d,t.d,((U,W)=>this._polymorphicMin(U,W)),"FlowGraphMinBlock",U)}_polymorphicMin(U,W){return x(U,W,Math.min)}}(0,M.f)("FlowGraphMinBlock",R);class F extends L.e{constructor(U){super(t.d,t.d,t.d,((U,W)=>this._polymorphicMax(U,W)),"FlowGraphMaxBlock",U)}_polymorphicMax(U,W){return x(U,W,Math.max)}}function v(U,W,l){return Math.min(Math.max(U,Math.min(W,l)),Math.max(W,l))}function J(U,W,l,M){switch((0,s.i)(U)){case"FlowGraphInteger":return new y.d(M(U.value,W.value,l.value));case"Vector2":return new k.h(M(U.x,W.x,l.x),M(U.y,W.y,l.y));case"ik":return new k.l(M(U.x,W.x,l.x),M(U.y,W.y,l.y),M(U.z,W.z,l.z));case"Vector4":return new k.p(M(U.x,W.x,l.x),M(U.y,W.y,l.y),M(U.z,W.z,l.z),M(U.w,W.w,l.w));case"Quaternion":return new k.e(M(U.x,W.x,l.x),M(U.y,W.y,l.y),M(U.z,W.z,l.z),M(U.w,W.w,l.w));case"Matrix":return k.c.gk(U.m.map(((U,t)=>M(U,W.m[t],l.m[t]))));case"Matrix2D":return new j.b(U.m.map(((U,t)=>M(U,W.m[t],l.m[t]))));case"Matrix3D":return new j.f(U.m.map(((U,t)=>M(U,W.m[t],l.m[t]))));default:return M((0,s.n)(U),(0,s.n)(W),(0,s.n)(l))}}(0,M.f)("FlowGraphMaxBlock",F);class Q extends q{constructor(U){super(t.d,t.d,t.d,t.d,((U,W,l)=>this._polymorphicClamp(U,W,l)),"FlowGraphClampBlock",U)}_polymorphicClamp(U,W,l){return J(U,W,l,v)}}function G(U){return Math.min(Math.max(U,0),1)}(0,M.f)("FlowGraphClampBlock",Q);class u extends A.e{constructor(U){super(t.d,t.d,(U=>this._polymorphicSaturate(U)),"FlowGraphSaturateBlock",U)}_polymorphicSaturate(U){return D(U,G)}}function b(U,W,l){return(1-l)*U+l*W}(0,M.f)("FlowGraphSaturateBlock",u);class C extends q{constructor(U){super(t.d,t.d,t.d,t.d,((U,W,l)=>this._polymorphicInterpolate(U,W,l)),"FlowGraphMathInterpolationBlock",U)}_polymorphicInterpolate(U,W,l){return J(U,W,l,b)}}(0,M.f)("FlowGraphMathInterpolationBlock",C);class P extends L.e{constructor(U){super(t.d,t.d,t.h,((U,W)=>this._polymorphicEq(U,W)),"FlowGraphEqualityBlock",U)}_polymorphicEq(U,W){const l=(0,s.i)(U),M=(0,s.i)(W);return typeof U===typeof W&&((0,s.g)(l,M)||(0,s.e)(l,M)||(0,s.c)(l,M)?U.equals(W):U===W)}}function S(U,W,l){if((0,s.p)(U)&&(0,s.p)(W))return l((0,s.n)(U),(0,s.n)(W));throw new Error(`Cannot compare ${U} and ${W}`)}(0,M.f)("FlowGraphEqualityBlock",P);class c extends L.e{constructor(U){super(t.d,t.d,t.h,((U,W)=>this._polymorphicLessThan(U,W)),"FlowGraphLessThanBlock",U)}_polymorphicLessThan(U,W){return S(U,W,((U,W)=>U<W))}}(0,M.f)("FlowGraphLessThanBlock",c);class h extends L.e{constructor(U){super(t.d,t.d,t.h,((U,W)=>this._polymorphicLessThanOrEqual(U,W)),"FlowGraphLessThanOrEqualBlock",U)}_polymorphicLessThanOrEqual(U,W){return S(U,W,((U,W)=>U<=W))}}(0,M.f)("FlowGraphLessThanOrEqualBlock",h);class z extends L.e{constructor(U){super(t.d,t.d,t.h,((U,W)=>this._polymorphicGreaterThan(U,W)),"FlowGraphGreaterThanBlock",U)}_polymorphicGreaterThan(U,W){return S(U,W,((U,W)=>U>W))}}(0,M.f)("FlowGraphGreaterThanBlock",z);class a extends L.e{constructor(U){super(t.d,t.d,t.h,((U,W)=>this._polymorphicGreaterThanOrEqual(U,W)),"FlowGraphGreaterThanOrEqualBlock",U)}_polymorphicGreaterThanOrEqual(U,W){return S(U,W,((U,W)=>U>=W))}}(0,M.f)("FlowGraphGreaterThanOrEqualBlock",a);class Y extends A.e{constructor(U){super(t.d,t.h,(U=>this._polymorphicIsNan(U)),"FlowGraphIsNaNBlock",U)}_polymorphicIsNan(U){if((0,s.p)(U,!0))return isNaN((0,s.n)(U));throw new Error(`Cannot get NaN of ${U}`)}}(0,M.f)("FlowGraphIsNaNBlock",Y);class X extends A.e{constructor(U){super(t.d,t.h,(U=>this._polymorphicIsInf(U)),"FlowGraphIsInfBlock",U)}_polymorphicIsInf(U){if((0,s.p)(U))return!isFinite((0,s.n)(U));throw new Error(`Cannot get isInf of ${U}`)}}(0,M.f)("FlowGraphIsInfBlock",X);class T extends A.e{constructor(U){super(t.d,t.d,(U=>this._polymorphicDegToRad(U)),"FlowGraphDegToRadBlock",U)}_degToRad(U){return U*Math.PI/180}_polymorphicDegToRad(U){return D(U,this._degToRad)}}(0,M.f)("FlowGraphDegToRadBlock",T);class UU extends A.e{constructor(U){super(t.d,t.d,(U=>this._polymorphicRadToDeg(U)),"FlowGraphRadToDegBlock",U)}_radToDeg(U){return 180*U/Math.PI}_polymorphicRadToDeg(U){return D(U,this._radToDeg)}}(0,M.f)("FlowGraphRadToDegBlock",UU);class WU extends A.e{constructor(U){super(t.s,t.s,(U=>this._polymorphicSin(U)),"FlowGraphSinBlock",U)}_polymorphicSin(U){return D(U,Math.sin)}}class lU extends A.e{constructor(U){super(t.s,t.s,(U=>this._polymorphicCos(U)),"FlowGraphCosBlock",U)}_polymorphicCos(U){return D(U,Math.cos)}}class MU extends A.e{constructor(U){super(t.s,t.s,(U=>this._polymorphicTan(U)),"FlowGraphTanBlock",U)}_polymorphicTan(U){return D(U,Math.tan)}}class tU extends A.e{constructor(U){super(t.s,t.s,(U=>this._polymorphicAsin(U)),"FlowGraphASinBlock",U)}_polymorphicAsin(U){return D(U,Math.asin)}}(0,M.f)("FlowGraphASinBlock",tU);class LU extends A.e{constructor(U){super(t.s,t.s,(U=>this._polymorphicAcos(U)),"FlowGraphACosBlock",U)}_polymorphicAcos(U){return D(U,Math.acos)}}(0,M.f)("FlowGraphACosBlock",LU);class pU extends A.e{constructor(U){super(t.s,t.s,(U=>this._polymorphicAtan(U)),"FlowGraphATanBlock",U)}_polymorphicAtan(U){return D(U,Math.atan)}}(0,M.f)("FlowGraphATanBlock",pU);class BU extends L.e{constructor(U){super(t.d,t.d,t.d,((U,W)=>this._polymorphicAtan2(U,W)),"FlowGraphATan2Block",U)}_polymorphicAtan2(U,W){return x(U,W,Math.atan2)}}(0,M.f)("FlowGraphATan2Block",BU);class kU extends A.e{constructor(U){super(t.d,t.d,(U=>this._polymorphicSinh(U)),"FlowGraphSinhBlock",U)}_polymorphicSinh(U){return D(U,Math.sinh)}}(0,M.f)("FlowGraphSinhBlock",kU);class AU extends A.e{constructor(U){super(t.d,t.d,(U=>this._polymorphicCosh(U)),"FlowGraphCoshBlock",U)}_polymorphicCosh(U){return D(U,Math.cosh)}}(0,M.f)("FlowGraphCoshBlock",AU);class qU extends A.e{constructor(U){super(t.d,t.d,(U=>this._polymorphicTanh(U)),"FlowGraphTanhBlock",U)}_polymorphicTanh(U){return D(U,Math.tanh)}}(0,M.f)("FlowGraphTanhBlock",qU);class yU extends A.e{constructor(U){super(t.d,t.s,(U=>this._polymorphicAsinh(U)),"FlowGraphASinhBlock",U)}_polymorphicAsinh(U){return D(U,Math.asinh)}}(0,M.f)("FlowGraphASinhBlock",yU);class jU extends A.e{constructor(U){super(t.d,t.s,(U=>this._polymorphicAcosh(U)),"FlowGraphACoshBlock",U)}_polymorphicAcosh(U){return D(U,Math.acosh)}}(0,M.f)("FlowGraphACoshBlock",jU);class sU extends A.e{constructor(U){super(t.d,t.s,(U=>this._polymorphicAtanh(U)),"FlowGraphATanhBlock",U)}_polymorphicAtanh(U){return D(U,Math.atanh)}}(0,M.f)("FlowGraphATanhBlock",sU);class wU extends A.e{constructor(U){super(t.d,t.s,(U=>this._polymorphicExp(U)),"FlowGraphExponentialBlock",U)}_polymorphicExp(U){return D(U,Math.exp)}}(0,M.f)("FlowGraphExponentialBlock",wU);class KU extends A.e{constructor(U){super(t.d,t.s,(U=>this._polymorphicLog(U)),"FlowGraphLogBlock",U)}_polymorphicLog(U){return D(U,Math.log)}}(0,M.f)("FlowGraphLogBlock",KU);class rU extends A.e{constructor(U){super(t.d,t.s,(U=>this._polymorphicLog2(U)),"FlowGraphLog2Block",U)}_polymorphicLog2(U){return D(U,Math.log2)}}(0,M.f)("FlowGraphLog2Block",rU);class mU extends A.e{constructor(U){super(t.d,t.s,(U=>this._polymorphicLog10(U)),"FlowGraphLog10Block",U)}_polymorphicLog10(U){return D(U,Math.log10)}}(0,M.f)("FlowGraphLog10Block",mU);class fU extends A.e{constructor(U){super(t.d,t.s,(U=>this._polymorphicSqrt(U)),"FlowGraphSquareRootBlock",U)}_polymorphicSqrt(U){return D(U,Math.sqrt)}}(0,M.f)("FlowGraphSquareRootBlock",fU);class gU extends A.e{constructor(U){super(t.d,t.s,(U=>this._polymorphicCubeRoot(U)),"FlowGraphCubeRootBlock",U)}_polymorphicCubeRoot(U){return D(U,Math.cbrt)}}(0,M.f)("FlowGraphCubeRootBlock",gU);class EU extends L.e{constructor(U){super(t.d,t.s,t.s,((U,W)=>this._polymorphicPow(U,W)),"FlowGraphPowerBlock",U)}_polymorphicPow(U,W){return x(U,W,Math.pow)}}(0,M.f)("FlowGraphPowerBlock",EU);class ZU extends A.e{constructor(U){super((0,t.Q)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,t.Q)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(U=>"boolean"===typeof U?!U:"number"===typeof U?~U:new y.d(~U.value)),"FlowGraphBitwiseNotBlock",U)}}(0,M.f)("FlowGraphBitwiseNotBlock",ZU);class NU extends L.e{constructor(U){super((0,t.Q)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,t.Q)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,t.Q)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),((U,W)=>{if("boolean"===typeof U&&"boolean"===typeof W)return U&&W;if("number"===typeof U&&"number"===typeof W)return U&W;if("object"===typeof U&&"object"===typeof W)return new y.d(U.value&W.value);throw new Error(`Cannot perform bitwise AND on ${U} and ${W}`)}),"FlowGraphBitwiseAndBlock",U)}}(0,M.f)("FlowGraphBitwiseAndBlock",NU);class DU extends L.e{constructor(U){super((0,t.Q)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,t.Q)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,t.Q)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),((U,W)=>{if("boolean"===typeof U&&"boolean"===typeof W)return U||W;if("number"===typeof U&&"number"===typeof W)return U|W;if("object"===typeof U&&"object"===typeof W)return new y.d(U.value|W.value);throw new Error(`Cannot perform bitwise OR on ${U} and ${W}`)}),"FlowGraphBitwiseOrBlock",U)}}(0,M.f)("FlowGraphBitwiseOrBlock",DU);class oU extends L.e{constructor(U){super((0,t.Q)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,t.Q)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),(0,t.Q)((null===U||void 0===U?void 0:U.valueType)||"FlowGraphInteger"),((U,W)=>{if("boolean"===typeof U&&"boolean"===typeof W)return U!==W;if("number"===typeof U&&"number"===typeof W)return U^W;if("object"===typeof U&&"object"===typeof W)return new y.d(U.value^W.value);throw new Error(`Cannot perform bitwise XOR on ${U} and ${W}`)}),"FlowGraphBitwiseXorBlock",U)}}(0,M.f)("FlowGraphBitwiseXorBlock",oU);class iU extends L.e{constructor(U){super(t.k,t.k,t.k,((U,W)=>new y.d(U.value<<W.value)),"FlowGraphBitwiseLeftShiftBlock",U)}}(0,M.f)("FlowGraphBitwiseLeftShiftBlock",iU);class OU extends L.e{constructor(U){super(t.k,t.k,t.k,((U,W)=>new y.d(U.value>>W.value)),"FlowGraphBitwiseRightShiftBlock",U)}}(0,M.f)("FlowGraphBitwiseRightShiftBlock",OU);class eU extends A.e{constructor(U){super(t.k,t.k,(U=>new y.d(Math.clz32(U.value))),"FlowGraphLeadingZerosBlock",U)}}(0,M.f)("FlowGraphLeadingZerosBlock",eU);class dU extends A.e{constructor(U){super(t.k,t.k,(U=>new y.d(U.value?31-Math.clz32(U.value&-U.value):32)),"FlowGraphTrailingZerosBlock",U)}}(0,M.f)("FlowGraphTrailingZerosBlock",dU);class HU extends A.e{constructor(U){super(t.k,t.k,(U=>new y.d(function(U){let W=0;for(;U;)W+=1&U,U>>=1;return W}(U.value))),"FlowGraphOneBitsCounterBlock",U)}}(0,M.f)("FlowGraphOneBitsCounterBlock",HU)},13974:(U,W,l)=>{l.d(W,{e:()=>t});var M=l(13983);class t extends M.c{constructor(U,W,l,M,t,L){super(l,L),this._operation=M,this._className=t,this.a=this.registerDataInput("a",U),this.b=this.registerDataInput("b",W)}_doOperation(U){const W=this.a.getValue(U),l=this.b.getValue(U);return this._operation(W,l)}getClassName(){return this._className}}},13983:(U,W,l)=>{l.d(W,{c:()=>B});var M=l(12739),t=l(12704);const L="cachedOperationValue",p="cachedExecutionId";class B extends M.e{constructor(U,W){super(W),this.value=this.registerDataOutput("value",U),this.isValid=this.registerDataOutput("isValid",t.h)}_updateOutputs(U){const W=U._getExecutionVariable(this,p,-1),l=U._getExecutionVariable(this,L,null);if(void 0!==l&&null!==l&&W===U.executionId)this.isValid.setValue(!0,U),this.value.setValue(l,U);else try{const W=this._doOperation(U);if(void 0===W||null===W)return void this.isValid.setValue(!1,U);U._setExecutionVariable(this,L,W),U._setExecutionVariable(this,p,U.executionId),this.value.setValue(W,U),this.isValid.setValue(!0,U)}catch(M){this.isValid.setValue(!1,U)}}}},13986:(U,W,l)=>{l.d(W,{e:()=>t});var M=l(13983);class t extends M.c{constructor(U,W,l,M,t){super(W,t),this._operation=l,this._className=M,this.a=this.registerDataInput("a",U)}_doOperation(U){return this._operation(this.a.getValue(U))}getClassName(){return this._className}}}}]);