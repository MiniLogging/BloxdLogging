"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[72],{14464:(R,x,H)=>{H.r(x),H.d(x,{FlowGraphAbsBlock:()=>X,FlowGraphAcosBlock:()=>tR,FlowGraphAcoshBlock:()=>gR,FlowGraphAddBlock:()=>i,FlowGraphAsinBlock:()=>cR,FlowGraphAsinhBlock:()=>nR,FlowGraphAtan2Block:()=>DR,FlowGraphAtanBlock:()=>AR,FlowGraphAtanhBlock:()=>IR,FlowGraphBitwiseAndBlock:()=>PR,FlowGraphBitwiseLeftShiftBlock:()=>MR,FlowGraphBitwiseNotBlock:()=>dR,FlowGraphBitwiseOrBlock:()=>aR,FlowGraphBitwiseRightShiftBlock:()=>BR,FlowGraphBitwiseXorBlock:()=>XR,FlowGraphCeilBlock:()=>Z,FlowGraphClampBlock:()=>Q,FlowGraphCosBlock:()=>HR,FlowGraphCoshBlock:()=>JR,FlowGraphCubeRootBlock:()=>CR,FlowGraphDegToRadBlock:()=>Y,FlowGraphDivideBlock:()=>L,FlowGraphEBlock:()=>C,FlowGraphEqualityBlock:()=>r,FlowGraphExpBlock:()=>iR,FlowGraphFloorBlock:()=>o,FlowGraphFractionBlock:()=>s,FlowGraphGreaterThanBlock:()=>O,FlowGraphGreaterThanOrEqualBlock:()=>l,FlowGraphInfBlock:()=>d,FlowGraphIsInfinityBlock:()=>u,FlowGraphIsNanBlock:()=>e,FlowGraphLeadingZerosBlock:()=>oR,FlowGraphLessThanBlock:()=>j,FlowGraphLessThanOrEqualBlock:()=>m,FlowGraphLog10Block:()=>LR,FlowGraphLog2Block:()=>SR,FlowGraphLogBlock:()=>qR,FlowGraphMathInterpolationBlock:()=>p,FlowGraphMaxBlock:()=>N,FlowGraphMinBlock:()=>f,FlowGraphModuloBlock:()=>h,FlowGraphMultiplyBlock:()=>S,FlowGraphNaNBlock:()=>P,FlowGraphNegationBlock:()=>E,FlowGraphOneBitsCounterBlock:()=>yR,FlowGraphPiBlock:()=>F,FlowGraphPowerBlock:()=>FR,FlowGraphRadToDegBlock:()=>RR,FlowGraphRandomBlock:()=>b,FlowGraphRoundBlock:()=>y,FlowGraphSaturateBlock:()=>T,FlowGraphSignBlock:()=>M,FlowGraphSinBlock:()=>xR,FlowGraphSinhBlock:()=>UR,FlowGraphSquareRootBlock:()=>bR,FlowGraphSubtractBlock:()=>q,FlowGraphTanBlock:()=>kR,FlowGraphTanhBlock:()=>VR,FlowGraphTrailingZerosBlock:()=>ZR,FlowGraphTruncBlock:()=>B});var k=H(610),c=H(13246),t=H(14469),A=H(14472);class D extends A.c{constructor(R,x,H,k){super(R,k),this._operation=x,this._className=H}_doOperation(R){return this._operation(R)}getClassName(){return this._className}}var U=H(661),J=H(14476);class V extends A.c{constructor(R,x,H,k,c,t,A){super(k,A),this._operation=c,this._className=t,this.a=this.registerDataInput("a",R),this.b=this.registerDataInput("b",x),this.c=this.registerDataInput("c",H)}_doOperation(R){return this._operation(this.a.getValue(R),this.b.getValue(R),this.c.getValue(R))}getClassName(){return this._className}}var n=H(13244),g=H(13255),I=H(13283);class i extends t.e{constructor(R){super((0,c.C)(null===R||void 0===R?void 0:R.type),(0,c.C)(null===R||void 0===R?void 0:R.type),(0,c.C)(null===R||void 0===R?void 0:R.type),((R,x)=>this._polymorphicAdd(R,x)),"FlowGraphAddBlock",R)}_polymorphicAdd(R,x){const H=(0,I.i)(R),k=(0,I.i)(x);if((0,I.h)(H,k)||(0,I.d)(H,k)||(0,I.b)(H,k))return R.add(x);if("Quaternion"===H||"Vector4"===k)return new U.p(R.x,R.y,R.z,R.w).addInPlace(x);if("Vector4"===H||"Quaternion"===k)return R.add(x);var c;if(null!==(c=this.config)&&void 0!==c&&c.preventIntegerFloatArithmetic&&typeof R!==typeof x)throw new Error("Cannot add different types of numbers.");return(0,I.q)(R)+(0,I.q)(x)}}(0,k.h)("FlowGraphAddBlock",i);class q extends t.e{constructor(R){super((0,c.C)(null===R||void 0===R?void 0:R.type),(0,c.C)(null===R||void 0===R?void 0:R.type),(0,c.C)(null===R||void 0===R?void 0:R.type),((R,x)=>this._polymorphicSubtract(R,x)),"FlowGraphSubtractBlock",R)}_polymorphicSubtract(R,x){const H=(0,I.i)(R),k=(0,I.i)(x);if((0,I.h)(H,k)||(0,I.b)(H,k)||(0,I.d)(H,k))return R.Pg(x);if("Quaternion"===H||"Vector4"===k)return new U.p(R.x,R.y,R.z,R.w).cj(x);if("Vector4"===H||"Quaternion"===k)return R.Pg(x);var c;if(null!==(c=this.config)&&void 0!==c&&c.preventIntegerFloatArithmetic&&typeof R!==typeof x)throw new Error("Cannot add different types of numbers.");return(0,I.q)(R)-(0,I.q)(x)}}(0,k.h)("FlowGraphSubtractBlock",q);class S extends t.e{constructor(R){super((0,c.C)(null===R||void 0===R?void 0:R.type),(0,c.C)(null===R||void 0===R?void 0:R.type),(0,c.C)(null===R||void 0===R?void 0:R.type),((R,x)=>this._polymorphicMultiply(R,x)),"FlowGraphMultiplyBlock",R)}_polymorphicMultiply(R,x){const H=(0,I.i)(R),k=(0,I.i)(x);if((0,I.h)(H,k)||(0,I.b)(H,k))return R.multiply(x);if("Quaternion"===H||"Vector4"===k)return new U.p(R.x,R.y,R.z,R.w).multiplyInPlace(x);if("Vector4"===H||"Quaternion"===k)return R.multiply(x);if((0,I.d)(H,k)){var c;if(null!==(c=this.config)&&void 0!==c&&c.useMatrixPerComponent){const k=R.m;for(let R=0;R<k.length;R++)k[R]*=x.m[R];return"Matrix2D"===H?new g.c(k):"Matrix3D"===H?new g.f(k):U.e.zi(k)}return x.multiply(R)}var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof R!==typeof x)throw new Error("Cannot add different types of numbers.");return(0,I.q)(R)*(0,I.q)(x)}}(0,k.h)("FlowGraphMultiplyBlock",S);class L extends t.e{constructor(R){super((0,c.C)(null===R||void 0===R?void 0:R.type),(0,c.C)(null===R||void 0===R?void 0:R.type),(0,c.C)(null===R||void 0===R?void 0:R.type),((R,x)=>this._polymorphicDivide(R,x)),"FlowGraphDivideBlock",R)}_polymorphicDivide(R,x){const H=(0,I.i)(R),k=(0,I.i)(x);if((0,I.h)(H,k)||(0,I.b)(H,k))return R.divide(x);if("Quaternion"===H||"Quaternion"===k){const H=R.clone();return H.x/=x.x,H.y/=x.y,H.z/=x.z,H.w/=x.w,H}if("Quaternion"===H||"Vector4"===k)return new U.p(R.x,R.y,R.z,R.w).divideInPlace(x);if("Vector4"===H||"Quaternion"===k)return R.divide(x);if((0,I.d)(H,k)){var c;if(null!==(c=this.config)&&void 0!==c&&c.useMatrixPerComponent){const k=R.m;for(let R=0;R<k.length;R++)k[R]/=x.m[R];return"Matrix2D"===H?new g.c(k):"Matrix3D"===H?new g.f(k):U.e.zi(k)}return R.divide(x)}var t;if(null!==(t=this.config)&&void 0!==t&&t.preventIntegerFloatArithmetic&&typeof R!==typeof x)throw new Error("Cannot add different types of numbers.");return(0,I.q)(R)/(0,I.q)(x)}}(0,k.h)("FlowGraphDivideBlock",L);class b extends D{constructor(R){super(c.m,(R=>this._random(R)),"FlowGraphRandomBlock",R),this.min=this.registerDataInput("min",c.m,(null===R||void 0===R?void 0:R.min)??0),this.max=this.registerDataInput("max",c.m,(null===R||void 0===R?void 0:R.max)??1),null!==R&&void 0!==R&&R.seed&&(this._seed=R.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const R=1e4*Math.sin(this._seed++);return R-Math.floor(R)}return Math.random()}_random(R){const x=this.min.getValue(R),H=this.max.getValue(R);return this._getRandomValue()*(H-x)+x}}(0,k.h)("FlowGraphRandomBlock",b);class C extends D{constructor(R){super(c.m,(()=>Math.E),"FlowGraphEBlock",R)}}(0,k.h)("FlowGraphEBlock",C);class F extends D{constructor(R){super(c.m,(()=>Math.PI),"FlowGraphPIBlock",R)}}(0,k.h)("FlowGraphPIBlock",F);class d extends D{constructor(R){super(c.m,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",R)}}(0,k.h)("FlowGraphInfBlock",d);class P extends D{constructor(R){super(c.m,(()=>Number.NaN),"FlowGraphNaNBlock",R)}}function a(R,x){switch((0,I.i)(R)){case"FlowGraphInteger":return new n.e(x(R.value));case"Vector2":return new U.k(x(R.x),x(R.y));case"Bi":return new U.o(x(R.x),x(R.y),x(R.z));case"Vector4":return new U.p(x(R.x),x(R.y),x(R.z),x(R.w));case"Quaternion":return new U.f(x(R.x),x(R.y),x(R.z),x(R.w));case"Matrix":return U.e.zi(R.m.map(x));case"Matrix2D":return new g.c(R.m.map(x));case"Matrix3D":return new g.f(R.m.map(x));default:return x(R)}}(0,k.h)("FlowGraphNaNBlock",P);class X extends J.e{constructor(R){super(c.m,c.m,(R=>this._polymorphicAbs(R)),"FlowGraphAbsBlock",R)}_polymorphicAbs(R){return a(R,Math.abs)}}(0,k.h)("FlowGraphAbsBlock",X);class M extends J.e{constructor(R){super(c.m,c.m,(R=>this._polymorphicSign(R)),"FlowGraphSignBlock",R)}_polymorphicSign(R){return a(R,Math.sign)}}(0,k.h)("FlowGraphSignBlock",M);class B extends J.e{constructor(R){super(c.m,c.m,(R=>this._polymorphicTrunc(R)),"FlowGraphTruncBlock",R)}_polymorphicTrunc(R){return a(R,Math.trunc)}}(0,k.h)("FlowGraphTruncBlock",B);class o extends J.e{constructor(R){super(c.m,c.m,(R=>this._polymorphicFloor(R)),"FlowGraphFloorBlock",R)}_polymorphicFloor(R){return a(R,Math.floor)}}(0,k.h)("FlowGraphFloorBlock",o);class Z extends J.e{constructor(R){super(c.b,c.b,(R=>this._polymorphicCeiling(R)),"FlowGraphCeilBlock",R)}_polymorphicCeiling(R){return a(R,Math.ceil)}}(0,k.h)("FlowGraphCeilBlock",Z);class y extends J.e{constructor(R){super(c.b,c.b,(R=>this._polymorphicRound(R)),"FlowGraphRoundBlock",R)}_polymorphicRound(R){return a(R,(R=>{var x;return R<0&&null!==(x=this.config)&&void 0!==x&&x.roundHalfAwayFromZero?-Math.round(-R):Math.round(R)}))}}(0,k.h)("FlowGraphRoundBlock",y);class s extends J.e{constructor(R){super(c.b,c.b,(R=>this._polymorphicFraction(R)),"FlowGraphFractBlock",R)}_polymorphicFraction(R){return a(R,(R=>R-Math.floor(R)))}}(0,k.h)("FlowGraphFractBlock",s);class E extends J.e{constructor(R){super(c.b,c.b,(R=>this._polymorphicNeg(R)),"FlowGraphNegationBlock",R)}_polymorphicNeg(R){return a(R,(R=>-R))}}function w(R,x,H){switch((0,I.i)(R)){case"FlowGraphInteger":return new n.e(H(R.value,x.value));case"Vector2":return new U.k(H(R.x,x.x),H(R.y,x.y));case"Bi":return new U.o(H(R.x,x.x),H(R.y,x.y),H(R.z,x.z));case"Vector4":return new U.p(H(R.x,x.x),H(R.y,x.y),H(R.z,x.z),H(R.w,x.w));case"Quaternion":return new U.f(H(R.x,x.x),H(R.y,x.y),H(R.z,x.z),H(R.w,x.w));case"Matrix":return U.e.zi(R.m.map(((R,k)=>H(R,x.m[k]))));case"Matrix2D":return new g.c(R.m.map(((R,k)=>H(R,x.m[k]))));case"Matrix3D":return new g.f(R.m.map(((R,k)=>H(R,x.m[k]))));default:return H((0,I.q)(R),(0,I.q)(x))}}(0,k.h)("FlowGraphNegationBlock",E);class h extends t.e{constructor(R){super(c.b,c.b,c.b,((R,x)=>this._polymorphicRemainder(R,x)),"FlowGraphModuloBlock",R)}_polymorphicRemainder(R,x){return w(R,x,((R,x)=>R%x))}}(0,k.h)("FlowGraphModuloBlock",h);class f extends t.e{constructor(R){super(c.b,c.b,c.b,((R,x)=>this._polymorphicMin(R,x)),"FlowGraphMinBlock",R)}_polymorphicMin(R,x){return w(R,x,Math.min)}}(0,k.h)("FlowGraphMinBlock",f);class N extends t.e{constructor(R){super(c.b,c.b,c.b,((R,x)=>this._polymorphicMax(R,x)),"FlowGraphMaxBlock",R)}_polymorphicMax(R,x){return w(R,x,Math.max)}}function W(R,x,H){return Math.min(Math.max(R,Math.min(x,H)),Math.max(x,H))}function K(R,x,H,k){switch((0,I.i)(R)){case"FlowGraphInteger":return new n.e(k(R.value,x.value,H.value));case"Vector2":return new U.k(k(R.x,x.x,H.x),k(R.y,x.y,H.y));case"Bi":return new U.o(k(R.x,x.x,H.x),k(R.y,x.y,H.y),k(R.z,x.z,H.z));case"Vector4":return new U.p(k(R.x,x.x,H.x),k(R.y,x.y,H.y),k(R.z,x.z,H.z),k(R.w,x.w,H.w));case"Quaternion":return new U.f(k(R.x,x.x,H.x),k(R.y,x.y,H.y),k(R.z,x.z,H.z),k(R.w,x.w,H.w));case"Matrix":return U.e.zi(R.m.map(((R,c)=>k(R,x.m[c],H.m[c]))));case"Matrix2D":return new g.c(R.m.map(((R,c)=>k(R,x.m[c],H.m[c]))));case"Matrix3D":return new g.f(R.m.map(((R,c)=>k(R,x.m[c],H.m[c]))));default:return k((0,I.q)(R),(0,I.q)(x),(0,I.q)(H))}}(0,k.h)("FlowGraphMaxBlock",N);class Q extends V{constructor(R){super(c.b,c.b,c.b,c.b,((R,x,H)=>this._polymorphicClamp(R,x,H)),"FlowGraphClampBlock",R)}_polymorphicClamp(R,x,H){return K(R,x,H,W)}}function G(R){return Math.min(Math.max(R,0),1)}(0,k.h)("FlowGraphClampBlock",Q);class T extends J.e{constructor(R){super(c.b,c.b,(R=>this._polymorphicSaturate(R)),"FlowGraphSaturateBlock",R)}_polymorphicSaturate(R){return a(R,G)}}function v(R,x,H){return(1-H)*R+H*x}(0,k.h)("FlowGraphSaturateBlock",T);class p extends V{constructor(R){super(c.b,c.b,c.b,c.b,((R,x,H)=>this._polymorphicInterpolate(R,x,H)),"FlowGraphMathInterpolationBlock",R)}_polymorphicInterpolate(R,x,H){return K(R,x,H,v)}}(0,k.h)("FlowGraphMathInterpolationBlock",p);class r extends t.e{constructor(R){super(c.b,c.b,c.c,((R,x)=>this._polymorphicEq(R,x)),"FlowGraphEqualityBlock",R)}_polymorphicEq(R,x){const H=(0,I.i)(R),k=(0,I.i)(x);return typeof R===typeof x&&((0,I.h)(H,k)||(0,I.d)(H,k)||(0,I.b)(H,k)?R.equals(x):R===x)}}function z(R,x,H){if((0,I.u)(R)&&(0,I.u)(x))return H((0,I.q)(R),(0,I.q)(x));throw new Error(`Cannot compare ${R} and ${x}`)}(0,k.h)("FlowGraphEqualityBlock",r);class j extends t.e{constructor(R){super(c.b,c.b,c.c,((R,x)=>this._polymorphicLessThan(R,x)),"FlowGraphLessThanBlock",R)}_polymorphicLessThan(R,x){return z(R,x,((R,x)=>R<x))}}(0,k.h)("FlowGraphLessThanBlock",j);class m extends t.e{constructor(R){super(c.b,c.b,c.c,((R,x)=>this._polymorphicLessThanOrEqual(R,x)),"FlowGraphLessThanOrEqualBlock",R)}_polymorphicLessThanOrEqual(R,x){return z(R,x,((R,x)=>R<=x))}}(0,k.h)("FlowGraphLessThanOrEqualBlock",m);class O extends t.e{constructor(R){super(c.b,c.b,c.c,((R,x)=>this._polymorphicGreaterThan(R,x)),"FlowGraphGreaterThanBlock",R)}_polymorphicGreaterThan(R,x){return z(R,x,((R,x)=>R>x))}}(0,k.h)("FlowGraphGreaterThanBlock",O);class l extends t.e{constructor(R){super(c.b,c.b,c.c,((R,x)=>this._polymorphicGreaterThanOrEqual(R,x)),"FlowGraphGreaterThanOrEqualBlock",R)}_polymorphicGreaterThanOrEqual(R,x){return z(R,x,((R,x)=>R>=x))}}(0,k.h)("FlowGraphGreaterThanOrEqualBlock",l);class e extends J.e{constructor(R){super(c.b,c.c,(R=>this._polymorphicIsNan(R)),"FlowGraphIsNaNBlock",R)}_polymorphicIsNan(R){if((0,I.u)(R,!0))return isNaN((0,I.q)(R));throw new Error(`Cannot get NaN of ${R}`)}}(0,k.h)("FlowGraphIsNaNBlock",e);class u extends J.e{constructor(R){super(c.b,c.c,(R=>this._polymorphicIsInf(R)),"FlowGraphIsInfBlock",R)}_polymorphicIsInf(R){if((0,I.u)(R))return!isFinite((0,I.q)(R));throw new Error(`Cannot get isInf of ${R}`)}}(0,k.h)("FlowGraphIsInfBlock",u);class Y extends J.e{constructor(R){super(c.b,c.b,(R=>this._polymorphicDegToRad(R)),"FlowGraphDegToRadBlock",R)}_degToRad(R){return R*Math.PI/180}_polymorphicDegToRad(R){return a(R,this._degToRad)}}(0,k.h)("FlowGraphDegToRadBlock",Y);class RR extends J.e{constructor(R){super(c.b,c.b,(R=>this._polymorphicRadToDeg(R)),"FlowGraphRadToDegBlock",R)}_radToDeg(R){return 180*R/Math.PI}_polymorphicRadToDeg(R){return a(R,this._radToDeg)}}(0,k.h)("FlowGraphRadToDegBlock",RR);class xR extends J.e{constructor(R){super(c.m,c.m,(R=>this._polymorphicSin(R)),"FlowGraphSinBlock",R)}_polymorphicSin(R){return a(R,Math.sin)}}class HR extends J.e{constructor(R){super(c.m,c.m,(R=>this._polymorphicCos(R)),"FlowGraphCosBlock",R)}_polymorphicCos(R){return a(R,Math.cos)}}class kR extends J.e{constructor(R){super(c.m,c.m,(R=>this._polymorphicTan(R)),"FlowGraphTanBlock",R)}_polymorphicTan(R){return a(R,Math.tan)}}class cR extends J.e{constructor(R){super(c.m,c.m,(R=>this._polymorphicAsin(R)),"FlowGraphASinBlock",R)}_polymorphicAsin(R){return a(R,Math.asin)}}(0,k.h)("FlowGraphASinBlock",cR);class tR extends J.e{constructor(R){super(c.m,c.m,(R=>this._polymorphicAcos(R)),"FlowGraphACosBlock",R)}_polymorphicAcos(R){return a(R,Math.acos)}}(0,k.h)("FlowGraphACosBlock",tR);class AR extends J.e{constructor(R){super(c.m,c.m,(R=>this._polymorphicAtan(R)),"FlowGraphATanBlock",R)}_polymorphicAtan(R){return a(R,Math.atan)}}(0,k.h)("FlowGraphATanBlock",AR);class DR extends t.e{constructor(R){super(c.b,c.b,c.b,((R,x)=>this._polymorphicAtan2(R,x)),"FlowGraphATan2Block",R)}_polymorphicAtan2(R,x){return w(R,x,Math.atan2)}}(0,k.h)("FlowGraphATan2Block",DR);class UR extends J.e{constructor(R){super(c.b,c.b,(R=>this._polymorphicSinh(R)),"FlowGraphSinhBlock",R)}_polymorphicSinh(R){return a(R,Math.sinh)}}(0,k.h)("FlowGraphSinhBlock",UR);class JR extends J.e{constructor(R){super(c.b,c.b,(R=>this._polymorphicCosh(R)),"FlowGraphCoshBlock",R)}_polymorphicCosh(R){return a(R,Math.cosh)}}(0,k.h)("FlowGraphCoshBlock",JR);class VR extends J.e{constructor(R){super(c.b,c.b,(R=>this._polymorphicTanh(R)),"FlowGraphTanhBlock",R)}_polymorphicTanh(R){return a(R,Math.tanh)}}(0,k.h)("FlowGraphTanhBlock",VR);class nR extends J.e{constructor(R){super(c.b,c.m,(R=>this._polymorphicAsinh(R)),"FlowGraphASinhBlock",R)}_polymorphicAsinh(R){return a(R,Math.asinh)}}(0,k.h)("FlowGraphASinhBlock",nR);class gR extends J.e{constructor(R){super(c.b,c.m,(R=>this._polymorphicAcosh(R)),"FlowGraphACoshBlock",R)}_polymorphicAcosh(R){return a(R,Math.acosh)}}(0,k.h)("FlowGraphACoshBlock",gR);class IR extends J.e{constructor(R){super(c.b,c.m,(R=>this._polymorphicAtanh(R)),"FlowGraphATanhBlock",R)}_polymorphicAtanh(R){return a(R,Math.atanh)}}(0,k.h)("FlowGraphATanhBlock",IR);class iR extends J.e{constructor(R){super(c.b,c.m,(R=>this._polymorphicExp(R)),"FlowGraphExponentialBlock",R)}_polymorphicExp(R){return a(R,Math.exp)}}(0,k.h)("FlowGraphExponentialBlock",iR);class qR extends J.e{constructor(R){super(c.b,c.m,(R=>this._polymorphicLog(R)),"FlowGraphLogBlock",R)}_polymorphicLog(R){return a(R,Math.log)}}(0,k.h)("FlowGraphLogBlock",qR);class SR extends J.e{constructor(R){super(c.b,c.m,(R=>this._polymorphicLog2(R)),"FlowGraphLog2Block",R)}_polymorphicLog2(R){return a(R,Math.log2)}}(0,k.h)("FlowGraphLog2Block",SR);class LR extends J.e{constructor(R){super(c.b,c.m,(R=>this._polymorphicLog10(R)),"FlowGraphLog10Block",R)}_polymorphicLog10(R){return a(R,Math.log10)}}(0,k.h)("FlowGraphLog10Block",LR);class bR extends J.e{constructor(R){super(c.b,c.m,(R=>this._polymorphicSqrt(R)),"FlowGraphSquareRootBlock",R)}_polymorphicSqrt(R){return a(R,Math.sqrt)}}(0,k.h)("FlowGraphSquareRootBlock",bR);class CR extends J.e{constructor(R){super(c.b,c.m,(R=>this._polymorphicCubeRoot(R)),"FlowGraphCubeRootBlock",R)}_polymorphicCubeRoot(R){return a(R,Math.cbrt)}}(0,k.h)("FlowGraphCubeRootBlock",CR);class FR extends t.e{constructor(R){super(c.b,c.m,c.m,((R,x)=>this._polymorphicPow(R,x)),"FlowGraphPowerBlock",R)}_polymorphicPow(R,x){return w(R,x,Math.pow)}}(0,k.h)("FlowGraphPowerBlock",FR);class dR extends J.e{constructor(R){super((0,c.C)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),(0,c.C)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),(R=>"boolean"===typeof R?!R:"number"===typeof R?~R:new n.e(~R.value)),"FlowGraphBitwiseNotBlock",R)}}(0,k.h)("FlowGraphBitwiseNotBlock",dR);class PR extends t.e{constructor(R){super((0,c.C)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),(0,c.C)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),(0,c.C)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),((R,x)=>{if("boolean"===typeof R&&"boolean"===typeof x)return R&&x;if("number"===typeof R&&"number"===typeof x)return R&x;if("object"===typeof R&&"object"===typeof x)return new n.e(R.value&x.value);throw new Error(`Cannot perform bitwise AND on ${R} and ${x}`)}),"FlowGraphBitwiseAndBlock",R)}}(0,k.h)("FlowGraphBitwiseAndBlock",PR);class aR extends t.e{constructor(R){super((0,c.C)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),(0,c.C)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),(0,c.C)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),((R,x)=>{if("boolean"===typeof R&&"boolean"===typeof x)return R||x;if("number"===typeof R&&"number"===typeof x)return R|x;if("object"===typeof R&&"object"===typeof x)return new n.e(R.value|x.value);throw new Error(`Cannot perform bitwise OR on ${R} and ${x}`)}),"FlowGraphBitwiseOrBlock",R)}}(0,k.h)("FlowGraphBitwiseOrBlock",aR);class XR extends t.e{constructor(R){super((0,c.C)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),(0,c.C)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),(0,c.C)((null===R||void 0===R?void 0:R.valueType)||"FlowGraphInteger"),((R,x)=>{if("boolean"===typeof R&&"boolean"===typeof x)return R!==x;if("number"===typeof R&&"number"===typeof x)return R^x;if("object"===typeof R&&"object"===typeof x)return new n.e(R.value^x.value);throw new Error(`Cannot perform bitwise XOR on ${R} and ${x}`)}),"FlowGraphBitwiseXorBlock",R)}}(0,k.h)("FlowGraphBitwiseXorBlock",XR);class MR extends t.e{constructor(R){super(c.d,c.d,c.d,((R,x)=>new n.e(R.value<<x.value)),"FlowGraphBitwiseLeftShiftBlock",R)}}(0,k.h)("FlowGraphBitwiseLeftShiftBlock",MR);class BR extends t.e{constructor(R){super(c.d,c.d,c.d,((R,x)=>new n.e(R.value>>x.value)),"FlowGraphBitwiseRightShiftBlock",R)}}(0,k.h)("FlowGraphBitwiseRightShiftBlock",BR);class oR extends J.e{constructor(R){super(c.d,c.d,(R=>new n.e(Math.clz32(R.value))),"FlowGraphLeadingZerosBlock",R)}}(0,k.h)("FlowGraphLeadingZerosBlock",oR);class ZR extends J.e{constructor(R){super(c.d,c.d,(R=>new n.e(R.value?31-Math.clz32(R.value&-R.value):32)),"FlowGraphTrailingZerosBlock",R)}}(0,k.h)("FlowGraphTrailingZerosBlock",ZR);class yR extends J.e{constructor(R){super(c.d,c.d,(R=>new n.e(function(R){let x=0;for(;R;)x+=1&R,R>>=1;return x}(R.value))),"FlowGraphOneBitsCounterBlock",R)}}(0,k.h)("FlowGraphOneBitsCounterBlock",yR)},14469:(R,x,H)=>{H.d(x,{e:()=>c});var k=H(14472);class c extends k.c{constructor(R,x,H,k,c,t){super(H,t),this._operation=k,this._className=c,this.a=this.registerDataInput("a",R),this.b=this.registerDataInput("b",x)}_doOperation(R){const x=this.a.getValue(R),H=this.b.getValue(R);return this._operation(x,H)}getClassName(){return this._className}}},14472:(R,x,H)=>{H.d(x,{c:()=>D});var k=H(13268),c=H(13246);const t="cachedOperationValue",A="cachedExecutionId";class D extends k.b{constructor(R,x){super(x),this.value=this.registerDataOutput("value",R),this.isValid=this.registerDataOutput("isValid",c.c)}_updateOutputs(R){const x=R._getExecutionVariable(this,A,-1),H=R._getExecutionVariable(this,t,null);if(void 0!==H&&null!==H&&x===R.executionId)this.isValid.setValue(!0,R),this.value.setValue(H,R);else try{const x=this._doOperation(R);if(void 0===x||null===x)return void this.isValid.setValue(!1,R);R._setExecutionVariable(this,t,x),R._setExecutionVariable(this,A,R.executionId),this.value.setValue(x,R),this.isValid.setValue(!0,R)}catch(k){this.isValid.setValue(!1,R)}}}},14476:(R,x,H)=>{H.d(x,{e:()=>c});var k=H(14472);class c extends k.c{constructor(R,x,H,k,c){super(x,c),this._operation=H,this._className=k,this.a=this.registerDataInput("a",R)}_doOperation(R){return this._operation(this.a.getValue(R))}getClassName(){return this._className}}}}]);