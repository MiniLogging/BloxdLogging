"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[72],{13752:(L,j,P)=>{P.r(j),P.d(j,{FlowGraphAbsBlock:()=>M,FlowGraphAcosBlock:()=>oL,FlowGraphAcoshBlock:()=>VL,FlowGraphAddBlock:()=>C,FlowGraphAsinBlock:()=>RL,FlowGraphAsinhBlock:()=>gL,FlowGraphAtan2Block:()=>uL,FlowGraphAtanBlock:()=>YL,FlowGraphAtanhBlock:()=>NL,FlowGraphBitwiseAndBlock:()=>TL,FlowGraphBitwiseLeftShiftBlock:()=>QL,FlowGraphBitwiseNotBlock:()=>yL,FlowGraphBitwiseOrBlock:()=>GL,FlowGraphBitwiseRightShiftBlock:()=>lL,FlowGraphBitwiseXorBlock:()=>ML,FlowGraphCeilBlock:()=>d,FlowGraphClampBlock:()=>e,FlowGraphCosBlock:()=>PL,FlowGraphCoshBlock:()=>DL,FlowGraphCubeRootBlock:()=>vL,FlowGraphDegToRadBlock:()=>r,FlowGraphDivideBlock:()=>h,FlowGraphEBlock:()=>v,FlowGraphEqualityBlock:()=>I,FlowGraphExpBlock:()=>CL,FlowGraphFloorBlock:()=>w,FlowGraphFractionBlock:()=>E,FlowGraphGreaterThanBlock:()=>Z,FlowGraphGreaterThanOrEqualBlock:()=>O,FlowGraphInfBlock:()=>y,FlowGraphIsInfinityBlock:()=>J,FlowGraphIsNanBlock:()=>i,FlowGraphLeadingZerosBlock:()=>wL,FlowGraphLessThanBlock:()=>p,FlowGraphLessThanOrEqualBlock:()=>n,FlowGraphLog10Block:()=>hL,FlowGraphLog2Block:()=>fL,FlowGraphLogBlock:()=>bL,FlowGraphMathInterpolationBlock:()=>k,FlowGraphMaxBlock:()=>X,FlowGraphMinBlock:()=>F,FlowGraphModuloBlock:()=>B,FlowGraphMultiplyBlock:()=>f,FlowGraphNaNBlock:()=>T,FlowGraphNegationBlock:()=>U,FlowGraphOneBitsCounterBlock:()=>cL,FlowGraphPiBlock:()=>q,FlowGraphPowerBlock:()=>qL,FlowGraphRadToDegBlock:()=>LL,FlowGraphRandomBlock:()=>K,FlowGraphRoundBlock:()=>c,FlowGraphSaturateBlock:()=>m,FlowGraphSignBlock:()=>Q,FlowGraphSinBlock:()=>jL,FlowGraphSinhBlock:()=>aL,FlowGraphSquareRootBlock:()=>KL,FlowGraphSubtractBlock:()=>b,FlowGraphTanBlock:()=>AL,FlowGraphTanhBlock:()=>SL,FlowGraphTrailingZerosBlock:()=>dL,FlowGraphTruncBlock:()=>l});var A=P(606),R=P(12510),o=P(13760),Y=P(13762);class u extends Y.b{constructor(L,j,P,A){super(L,A),this._operation=j,this._className=P}_doOperation(L){return this._operation(L)}getClassName(){return this._className}}var a=P(656),D=P(13764);class S extends Y.b{constructor(L,j,P,A,R,o,Y){super(A,Y),this._operation=R,this._className=o,this.a=this.registerDataInput("a",L),this.b=this.registerDataInput("b",j),this.c=this.registerDataInput("c",P)}_doOperation(L){return this._operation(this.a.getValue(L),this.b.getValue(L),this.c.getValue(L))}getClassName(){return this._className}}var g=P(12506),V=P(12514),N=P(12531);class C extends o.d{constructor(L){super((0,R.N)(null===L||void 0===L?void 0:L.type),(0,R.N)(null===L||void 0===L?void 0:L.type),(0,R.N)(null===L||void 0===L?void 0:L.type),((L,j)=>this._polymorphicAdd(L,j)),"FlowGraphAddBlock",L)}_polymorphicAdd(L,j){const P=(0,N.m)(L),A=(0,N.m)(j);if((0,N.i)(P,A)||(0,N.f)(P,A)||(0,N.d)(P,A))return L.add(j);if("Quaternion"===P||"Vector4"===A)return new a.s(L.x,L.y,L.z,L.w).addInPlace(j);if("Vector4"===P||"Quaternion"===A)return L.add(j);var R;if(null!==(R=this.config)&&void 0!==R&&R.preventIntegerFloatArithmetic&&typeof L!==typeof j)throw new Error("Cannot add different types of numbers.");return(0,N.q)(L)+(0,N.q)(j)}}(0,A.h)("FlowGraphAddBlock",C);class b extends o.d{constructor(L){super((0,R.N)(null===L||void 0===L?void 0:L.type),(0,R.N)(null===L||void 0===L?void 0:L.type),(0,R.N)(null===L||void 0===L?void 0:L.type),((L,j)=>this._polymorphicSubtract(L,j)),"FlowGraphSubtractBlock",L)}_polymorphicSubtract(L,j){const P=(0,N.m)(L),A=(0,N.m)(j);if((0,N.i)(P,A)||(0,N.d)(P,A)||(0,N.f)(P,A))return L.xg(j);if("Quaternion"===P||"Vector4"===A)return new a.s(L.x,L.y,L.z,L.w).Wi(j);if("Vector4"===P||"Quaternion"===A)return L.xg(j);var R;if(null!==(R=this.config)&&void 0!==R&&R.preventIntegerFloatArithmetic&&typeof L!==typeof j)throw new Error("Cannot add different types of numbers.");return(0,N.q)(L)-(0,N.q)(j)}}(0,A.h)("FlowGraphSubtractBlock",b);class f extends o.d{constructor(L){super((0,R.N)(null===L||void 0===L?void 0:L.type),(0,R.N)(null===L||void 0===L?void 0:L.type),(0,R.N)(null===L||void 0===L?void 0:L.type),((L,j)=>this._polymorphicMultiply(L,j)),"FlowGraphMultiplyBlock",L)}_polymorphicMultiply(L,j){const P=(0,N.m)(L),A=(0,N.m)(j);if((0,N.i)(P,A)||(0,N.d)(P,A))return L.multiply(j);if("Quaternion"===P||"Vector4"===A)return new a.s(L.x,L.y,L.z,L.w).multiplyInPlace(j);if("Vector4"===P||"Quaternion"===A)return L.multiply(j);if((0,N.f)(P,A)){var R;if(null!==(R=this.config)&&void 0!==R&&R.useMatrixPerComponent){const A=L.m;for(let L=0;L<A.length;L++)A[L]*=j.m[L];return"Matrix2D"===P?new V.c(A):"Matrix3D"===P?new V.e(A):a.e.ri(A)}return j.multiply(L)}var o;if(null!==(o=this.config)&&void 0!==o&&o.preventIntegerFloatArithmetic&&typeof L!==typeof j)throw new Error("Cannot add different types of numbers.");return(0,N.q)(L)*(0,N.q)(j)}}(0,A.h)("FlowGraphMultiplyBlock",f);class h extends o.d{constructor(L){super((0,R.N)(null===L||void 0===L?void 0:L.type),(0,R.N)(null===L||void 0===L?void 0:L.type),(0,R.N)(null===L||void 0===L?void 0:L.type),((L,j)=>this._polymorphicDivide(L,j)),"FlowGraphDivideBlock",L)}_polymorphicDivide(L,j){const P=(0,N.m)(L),A=(0,N.m)(j);if((0,N.i)(P,A)||(0,N.d)(P,A))return L.divide(j);if("Quaternion"===P||"Quaternion"===A){const P=L.clone();return P.x/=j.x,P.y/=j.y,P.z/=j.z,P.w/=j.w,P}if("Quaternion"===P||"Vector4"===A)return new a.s(L.x,L.y,L.z,L.w).divideInPlace(j);if("Vector4"===P||"Quaternion"===A)return L.divide(j);if((0,N.f)(P,A)){var R;if(null!==(R=this.config)&&void 0!==R&&R.useMatrixPerComponent){const A=L.m;for(let L=0;L<A.length;L++)A[L]/=j.m[L];return"Matrix2D"===P?new V.c(A):"Matrix3D"===P?new V.e(A):a.e.ri(A)}return L.divide(j)}var o;if(null!==(o=this.config)&&void 0!==o&&o.preventIntegerFloatArithmetic&&typeof L!==typeof j)throw new Error("Cannot add different types of numbers.");return(0,N.q)(L)/(0,N.q)(j)}}(0,A.h)("FlowGraphDivideBlock",h);class K extends u{constructor(L){super(R.p,(L=>this._random(L)),"FlowGraphRandomBlock",L),this.min=this.registerDataInput("min",R.p,(null===L||void 0===L?void 0:L.min)??0),this.max=this.registerDataInput("max",R.p,(null===L||void 0===L?void 0:L.max)??1),null!==L&&void 0!==L&&L.seed&&(this._seed=L.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const L=1e4*Math.sin(this._seed++);return L-Math.floor(L)}return Math.random()}_random(L){const j=this.min.getValue(L),P=this.max.getValue(L);return this._getRandomValue()*(P-j)+j}}(0,A.h)("FlowGraphRandomBlock",K);class v extends u{constructor(L){super(R.p,(()=>Math.E),"FlowGraphEBlock",L)}}(0,A.h)("FlowGraphEBlock",v);class q extends u{constructor(L){super(R.p,(()=>Math.PI),"FlowGraphPIBlock",L)}}(0,A.h)("FlowGraphPIBlock",q);class y extends u{constructor(L){super(R.p,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",L)}}(0,A.h)("FlowGraphInfBlock",y);class T extends u{constructor(L){super(R.p,(()=>Number.NaN),"FlowGraphNaNBlock",L)}}function G(L,j){switch((0,N.m)(L)){case"FlowGraphInteger":return new g.b(j(L.value));case"Vector2":return new a.n(j(L.x),j(L.y));case"ti":return new a.r(j(L.x),j(L.y),j(L.z));case"Vector4":return new a.s(j(L.x),j(L.y),j(L.z),j(L.w));case"Quaternion":return new a.i(j(L.x),j(L.y),j(L.z),j(L.w));case"Matrix":return a.e.ri(L.m.map(j));case"Matrix2D":return new V.c(L.m.map(j));case"Matrix3D":return new V.e(L.m.map(j));default:return j(L)}}(0,A.h)("FlowGraphNaNBlock",T);class M extends D.c{constructor(L){super(R.p,R.p,(L=>this._polymorphicAbs(L)),"FlowGraphAbsBlock",L)}_polymorphicAbs(L){return G(L,Math.abs)}}(0,A.h)("FlowGraphAbsBlock",M);class Q extends D.c{constructor(L){super(R.p,R.p,(L=>this._polymorphicSign(L)),"FlowGraphSignBlock",L)}_polymorphicSign(L){return G(L,Math.sign)}}(0,A.h)("FlowGraphSignBlock",Q);class l extends D.c{constructor(L){super(R.p,R.p,(L=>this._polymorphicTrunc(L)),"FlowGraphTruncBlock",L)}_polymorphicTrunc(L){return G(L,Math.trunc)}}(0,A.h)("FlowGraphTruncBlock",l);class w extends D.c{constructor(L){super(R.p,R.p,(L=>this._polymorphicFloor(L)),"FlowGraphFloorBlock",L)}_polymorphicFloor(L){return G(L,Math.floor)}}(0,A.h)("FlowGraphFloorBlock",w);class d extends D.c{constructor(L){super(R.d,R.d,(L=>this._polymorphicCeiling(L)),"FlowGraphCeilBlock",L)}_polymorphicCeiling(L){return G(L,Math.ceil)}}(0,A.h)("FlowGraphCeilBlock",d);class c extends D.c{constructor(L){super(R.d,R.d,(L=>this._polymorphicRound(L)),"FlowGraphRoundBlock",L)}_polymorphicRound(L){return G(L,(L=>{var j;return L<0&&null!==(j=this.config)&&void 0!==j&&j.roundHalfAwayFromZero?-Math.round(-L):Math.round(L)}))}}(0,A.h)("FlowGraphRoundBlock",c);class E extends D.c{constructor(L){super(R.d,R.d,(L=>this._polymorphicFraction(L)),"FlowGraphFractBlock",L)}_polymorphicFraction(L){return G(L,(L=>L-Math.floor(L)))}}(0,A.h)("FlowGraphFractBlock",E);class U extends D.c{constructor(L){super(R.d,R.d,(L=>this._polymorphicNeg(L)),"FlowGraphNegationBlock",L)}_polymorphicNeg(L){return G(L,(L=>-L))}}function t(L,j,P){switch((0,N.m)(L)){case"FlowGraphInteger":return new g.b(P(L.value,j.value));case"Vector2":return new a.n(P(L.x,j.x),P(L.y,j.y));case"ti":return new a.r(P(L.x,j.x),P(L.y,j.y),P(L.z,j.z));case"Vector4":return new a.s(P(L.x,j.x),P(L.y,j.y),P(L.z,j.z),P(L.w,j.w));case"Quaternion":return new a.i(P(L.x,j.x),P(L.y,j.y),P(L.z,j.z),P(L.w,j.w));case"Matrix":return a.e.ri(L.m.map(((L,A)=>P(L,j.m[A]))));case"Matrix2D":return new V.c(L.m.map(((L,A)=>P(L,j.m[A]))));case"Matrix3D":return new V.e(L.m.map(((L,A)=>P(L,j.m[A]))));default:return P((0,N.q)(L),(0,N.q)(j))}}(0,A.h)("FlowGraphNegationBlock",U);class B extends o.d{constructor(L){super(R.d,R.d,R.d,((L,j)=>this._polymorphicRemainder(L,j)),"FlowGraphModuloBlock",L)}_polymorphicRemainder(L,j){return t(L,j,((L,j)=>L%j))}}(0,A.h)("FlowGraphModuloBlock",B);class F extends o.d{constructor(L){super(R.d,R.d,R.d,((L,j)=>this._polymorphicMin(L,j)),"FlowGraphMinBlock",L)}_polymorphicMin(L,j){return t(L,j,Math.min)}}(0,A.h)("FlowGraphMinBlock",F);class X extends o.d{constructor(L){super(R.d,R.d,R.d,((L,j)=>this._polymorphicMax(L,j)),"FlowGraphMaxBlock",L)}_polymorphicMax(L,j){return t(L,j,Math.max)}}function H(L,j,P){return Math.min(Math.max(L,Math.min(j,P)),Math.max(j,P))}function W(L,j,P,A){switch((0,N.m)(L)){case"FlowGraphInteger":return new g.b(A(L.value,j.value,P.value));case"Vector2":return new a.n(A(L.x,j.x,P.x),A(L.y,j.y,P.y));case"ti":return new a.r(A(L.x,j.x,P.x),A(L.y,j.y,P.y),A(L.z,j.z,P.z));case"Vector4":return new a.s(A(L.x,j.x,P.x),A(L.y,j.y,P.y),A(L.z,j.z,P.z),A(L.w,j.w,P.w));case"Quaternion":return new a.i(A(L.x,j.x,P.x),A(L.y,j.y,P.y),A(L.z,j.z,P.z),A(L.w,j.w,P.w));case"Matrix":return a.e.ri(L.m.map(((L,R)=>A(L,j.m[R],P.m[R]))));case"Matrix2D":return new V.c(L.m.map(((L,R)=>A(L,j.m[R],P.m[R]))));case"Matrix3D":return new V.e(L.m.map(((L,R)=>A(L,j.m[R],P.m[R]))));default:return A((0,N.q)(L),(0,N.q)(j),(0,N.q)(P))}}(0,A.h)("FlowGraphMaxBlock",X);class e extends S{constructor(L){super(R.d,R.d,R.d,R.d,((L,j,P)=>this._polymorphicClamp(L,j,P)),"FlowGraphClampBlock",L)}_polymorphicClamp(L,j,P){return W(L,j,P,H)}}function s(L){return Math.min(Math.max(L,0),1)}(0,A.h)("FlowGraphClampBlock",e);class m extends D.c{constructor(L){super(R.d,R.d,(L=>this._polymorphicSaturate(L)),"FlowGraphSaturateBlock",L)}_polymorphicSaturate(L){return G(L,s)}}function x(L,j,P){return(1-P)*L+P*j}(0,A.h)("FlowGraphSaturateBlock",m);class k extends S{constructor(L){super(R.d,R.d,R.d,R.d,((L,j,P)=>this._polymorphicInterpolate(L,j,P)),"FlowGraphMathInterpolationBlock",L)}_polymorphicInterpolate(L,j,P){return W(L,j,P,x)}}(0,A.h)("FlowGraphMathInterpolationBlock",k);class I extends o.d{constructor(L){super(R.d,R.d,R.e,((L,j)=>this._polymorphicEq(L,j)),"FlowGraphEqualityBlock",L)}_polymorphicEq(L,j){const P=(0,N.m)(L),A=(0,N.m)(j);return typeof L===typeof j&&((0,N.i)(P,A)||(0,N.f)(P,A)||(0,N.d)(P,A)?L.equals(j):L===j)}}function z(L,j,P){if((0,N.t)(L)&&(0,N.t)(j))return P((0,N.q)(L),(0,N.q)(j));throw new Error(`Cannot compare ${L} and ${j}`)}(0,A.h)("FlowGraphEqualityBlock",I);class p extends o.d{constructor(L){super(R.d,R.d,R.e,((L,j)=>this._polymorphicLessThan(L,j)),"FlowGraphLessThanBlock",L)}_polymorphicLessThan(L,j){return z(L,j,((L,j)=>L<j))}}(0,A.h)("FlowGraphLessThanBlock",p);class n extends o.d{constructor(L){super(R.d,R.d,R.e,((L,j)=>this._polymorphicLessThanOrEqual(L,j)),"FlowGraphLessThanOrEqualBlock",L)}_polymorphicLessThanOrEqual(L,j){return z(L,j,((L,j)=>L<=j))}}(0,A.h)("FlowGraphLessThanOrEqualBlock",n);class Z extends o.d{constructor(L){super(R.d,R.d,R.e,((L,j)=>this._polymorphicGreaterThan(L,j)),"FlowGraphGreaterThanBlock",L)}_polymorphicGreaterThan(L,j){return z(L,j,((L,j)=>L>j))}}(0,A.h)("FlowGraphGreaterThanBlock",Z);class O extends o.d{constructor(L){super(R.d,R.d,R.e,((L,j)=>this._polymorphicGreaterThanOrEqual(L,j)),"FlowGraphGreaterThanOrEqualBlock",L)}_polymorphicGreaterThanOrEqual(L,j){return z(L,j,((L,j)=>L>=j))}}(0,A.h)("FlowGraphGreaterThanOrEqualBlock",O);class i extends D.c{constructor(L){super(R.d,R.e,(L=>this._polymorphicIsNan(L)),"FlowGraphIsNaNBlock",L)}_polymorphicIsNan(L){if((0,N.t)(L,!0))return isNaN((0,N.q)(L));throw new Error(`Cannot get NaN of ${L}`)}}(0,A.h)("FlowGraphIsNaNBlock",i);class J extends D.c{constructor(L){super(R.d,R.e,(L=>this._polymorphicIsInf(L)),"FlowGraphIsInfBlock",L)}_polymorphicIsInf(L){if((0,N.t)(L))return!isFinite((0,N.q)(L));throw new Error(`Cannot get isInf of ${L}`)}}(0,A.h)("FlowGraphIsInfBlock",J);class r extends D.c{constructor(L){super(R.d,R.d,(L=>this._polymorphicDegToRad(L)),"FlowGraphDegToRadBlock",L)}_degToRad(L){return L*Math.PI/180}_polymorphicDegToRad(L){return G(L,this._degToRad)}}(0,A.h)("FlowGraphDegToRadBlock",r);class LL extends D.c{constructor(L){super(R.d,R.d,(L=>this._polymorphicRadToDeg(L)),"FlowGraphRadToDegBlock",L)}_radToDeg(L){return 180*L/Math.PI}_polymorphicRadToDeg(L){return G(L,this._radToDeg)}}(0,A.h)("FlowGraphRadToDegBlock",LL);class jL extends D.c{constructor(L){super(R.p,R.p,(L=>this._polymorphicSin(L)),"FlowGraphSinBlock",L)}_polymorphicSin(L){return G(L,Math.sin)}}class PL extends D.c{constructor(L){super(R.p,R.p,(L=>this._polymorphicCos(L)),"FlowGraphCosBlock",L)}_polymorphicCos(L){return G(L,Math.cos)}}class AL extends D.c{constructor(L){super(R.p,R.p,(L=>this._polymorphicTan(L)),"FlowGraphTanBlock",L)}_polymorphicTan(L){return G(L,Math.tan)}}class RL extends D.c{constructor(L){super(R.p,R.p,(L=>this._polymorphicAsin(L)),"FlowGraphASinBlock",L)}_polymorphicAsin(L){return G(L,Math.asin)}}(0,A.h)("FlowGraphASinBlock",RL);class oL extends D.c{constructor(L){super(R.p,R.p,(L=>this._polymorphicAcos(L)),"FlowGraphACosBlock",L)}_polymorphicAcos(L){return G(L,Math.acos)}}(0,A.h)("FlowGraphACosBlock",oL);class YL extends D.c{constructor(L){super(R.p,R.p,(L=>this._polymorphicAtan(L)),"FlowGraphATanBlock",L)}_polymorphicAtan(L){return G(L,Math.atan)}}(0,A.h)("FlowGraphATanBlock",YL);class uL extends o.d{constructor(L){super(R.d,R.d,R.d,((L,j)=>this._polymorphicAtan2(L,j)),"FlowGraphATan2Block",L)}_polymorphicAtan2(L,j){return t(L,j,Math.atan2)}}(0,A.h)("FlowGraphATan2Block",uL);class aL extends D.c{constructor(L){super(R.d,R.d,(L=>this._polymorphicSinh(L)),"FlowGraphSinhBlock",L)}_polymorphicSinh(L){return G(L,Math.sinh)}}(0,A.h)("FlowGraphSinhBlock",aL);class DL extends D.c{constructor(L){super(R.d,R.d,(L=>this._polymorphicCosh(L)),"FlowGraphCoshBlock",L)}_polymorphicCosh(L){return G(L,Math.cosh)}}(0,A.h)("FlowGraphCoshBlock",DL);class SL extends D.c{constructor(L){super(R.d,R.d,(L=>this._polymorphicTanh(L)),"FlowGraphTanhBlock",L)}_polymorphicTanh(L){return G(L,Math.tanh)}}(0,A.h)("FlowGraphTanhBlock",SL);class gL extends D.c{constructor(L){super(R.d,R.p,(L=>this._polymorphicAsinh(L)),"FlowGraphASinhBlock",L)}_polymorphicAsinh(L){return G(L,Math.asinh)}}(0,A.h)("FlowGraphASinhBlock",gL);class VL extends D.c{constructor(L){super(R.d,R.p,(L=>this._polymorphicAcosh(L)),"FlowGraphACoshBlock",L)}_polymorphicAcosh(L){return G(L,Math.acosh)}}(0,A.h)("FlowGraphACoshBlock",VL);class NL extends D.c{constructor(L){super(R.d,R.p,(L=>this._polymorphicAtanh(L)),"FlowGraphATanhBlock",L)}_polymorphicAtanh(L){return G(L,Math.atanh)}}(0,A.h)("FlowGraphATanhBlock",NL);class CL extends D.c{constructor(L){super(R.d,R.p,(L=>this._polymorphicExp(L)),"FlowGraphExponentialBlock",L)}_polymorphicExp(L){return G(L,Math.exp)}}(0,A.h)("FlowGraphExponentialBlock",CL);class bL extends D.c{constructor(L){super(R.d,R.p,(L=>this._polymorphicLog(L)),"FlowGraphLogBlock",L)}_polymorphicLog(L){return G(L,Math.log)}}(0,A.h)("FlowGraphLogBlock",bL);class fL extends D.c{constructor(L){super(R.d,R.p,(L=>this._polymorphicLog2(L)),"FlowGraphLog2Block",L)}_polymorphicLog2(L){return G(L,Math.log2)}}(0,A.h)("FlowGraphLog2Block",fL);class hL extends D.c{constructor(L){super(R.d,R.p,(L=>this._polymorphicLog10(L)),"FlowGraphLog10Block",L)}_polymorphicLog10(L){return G(L,Math.log10)}}(0,A.h)("FlowGraphLog10Block",hL);class KL extends D.c{constructor(L){super(R.d,R.p,(L=>this._polymorphicSqrt(L)),"FlowGraphSquareRootBlock",L)}_polymorphicSqrt(L){return G(L,Math.sqrt)}}(0,A.h)("FlowGraphSquareRootBlock",KL);class vL extends D.c{constructor(L){super(R.d,R.p,(L=>this._polymorphicCubeRoot(L)),"FlowGraphCubeRootBlock",L)}_polymorphicCubeRoot(L){return G(L,Math.cbrt)}}(0,A.h)("FlowGraphCubeRootBlock",vL);class qL extends o.d{constructor(L){super(R.d,R.p,R.p,((L,j)=>this._polymorphicPow(L,j)),"FlowGraphPowerBlock",L)}_polymorphicPow(L,j){return t(L,j,Math.pow)}}(0,A.h)("FlowGraphPowerBlock",qL);class yL extends D.c{constructor(L){super((0,R.N)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),(0,R.N)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),(L=>"boolean"===typeof L?!L:"number"===typeof L?~L:new g.b(~L.value)),"FlowGraphBitwiseNotBlock",L)}}(0,A.h)("FlowGraphBitwiseNotBlock",yL);class TL extends o.d{constructor(L){super((0,R.N)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),(0,R.N)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),(0,R.N)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),((L,j)=>{if("boolean"===typeof L&&"boolean"===typeof j)return L&&j;if("number"===typeof L&&"number"===typeof j)return L&j;if("object"===typeof L&&"object"===typeof j)return new g.b(L.value&j.value);throw new Error(`Cannot perform bitwise AND on ${L} and ${j}`)}),"FlowGraphBitwiseAndBlock",L)}}(0,A.h)("FlowGraphBitwiseAndBlock",TL);class GL extends o.d{constructor(L){super((0,R.N)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),(0,R.N)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),(0,R.N)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),((L,j)=>{if("boolean"===typeof L&&"boolean"===typeof j)return L||j;if("number"===typeof L&&"number"===typeof j)return L|j;if("object"===typeof L&&"object"===typeof j)return new g.b(L.value|j.value);throw new Error(`Cannot perform bitwise OR on ${L} and ${j}`)}),"FlowGraphBitwiseOrBlock",L)}}(0,A.h)("FlowGraphBitwiseOrBlock",GL);class ML extends o.d{constructor(L){super((0,R.N)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),(0,R.N)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),(0,R.N)((null===L||void 0===L?void 0:L.valueType)||"FlowGraphInteger"),((L,j)=>{if("boolean"===typeof L&&"boolean"===typeof j)return L!==j;if("number"===typeof L&&"number"===typeof j)return L^j;if("object"===typeof L&&"object"===typeof j)return new g.b(L.value^j.value);throw new Error(`Cannot perform bitwise XOR on ${L} and ${j}`)}),"FlowGraphBitwiseXorBlock",L)}}(0,A.h)("FlowGraphBitwiseXorBlock",ML);class QL extends o.d{constructor(L){super(R.f,R.f,R.f,((L,j)=>new g.b(L.value<<j.value)),"FlowGraphBitwiseLeftShiftBlock",L)}}(0,A.h)("FlowGraphBitwiseLeftShiftBlock",QL);class lL extends o.d{constructor(L){super(R.f,R.f,R.f,((L,j)=>new g.b(L.value>>j.value)),"FlowGraphBitwiseRightShiftBlock",L)}}(0,A.h)("FlowGraphBitwiseRightShiftBlock",lL);class wL extends D.c{constructor(L){super(R.f,R.f,(L=>new g.b(Math.clz32(L.value))),"FlowGraphLeadingZerosBlock",L)}}(0,A.h)("FlowGraphLeadingZerosBlock",wL);class dL extends D.c{constructor(L){super(R.f,R.f,(L=>new g.b(L.value?31-Math.clz32(L.value&-L.value):32)),"FlowGraphTrailingZerosBlock",L)}}(0,A.h)("FlowGraphTrailingZerosBlock",dL);class cL extends D.c{constructor(L){super(R.f,R.f,(L=>new g.b(function(L){let j=0;for(;L;)j+=1&L,L>>=1;return j}(L.value))),"FlowGraphOneBitsCounterBlock",L)}}(0,A.h)("FlowGraphOneBitsCounterBlock",cL)},13760:(L,j,P)=>{P.d(j,{d:()=>R});var A=P(13762);class R extends A.b{constructor(L,j,P,A,R,o){super(P,o),this._operation=A,this._className=R,this.a=this.registerDataInput("a",L),this.b=this.registerDataInput("b",j)}_doOperation(L){const j=this.a.getValue(L),P=this.b.getValue(L);return this._operation(j,P)}getClassName(){return this._className}}},13762:(L,j,P)=>{P.d(j,{b:()=>u});var A=P(12523),R=P(12510);const o="cachedOperationValue",Y="cachedExecutionId";class u extends A.d{constructor(L,j){super(j),this.value=this.registerDataOutput("value",L),this.isValid=this.registerDataOutput("isValid",R.e)}_updateOutputs(L){const j=L._getExecutionVariable(this,Y,-1),P=L._getExecutionVariable(this,o,null);if(void 0!==P&&null!==P&&j===L.executionId)this.isValid.setValue(!0,L),this.value.setValue(P,L);else try{const j=this._doOperation(L);if(void 0===j||null===j)return void this.isValid.setValue(!1,L);L._setExecutionVariable(this,o,j),L._setExecutionVariable(this,Y,L.executionId),this.value.setValue(j,L),this.isValid.setValue(!0,L)}catch(A){this.isValid.setValue(!1,L)}}}},13764:(L,j,P)=>{P.d(j,{c:()=>R});var A=P(13762);class R extends A.b{constructor(L,j,P,A,R){super(j,R),this._operation=P,this._className=A,this.a=this.registerDataInput("a",L)}_doOperation(L){return this._operation(this.a.getValue(L))}getClassName(){return this._className}}}}]);