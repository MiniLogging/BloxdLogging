"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[72],{14067:(Z,U,n)=>{n.r(U),n.d(U,{FlowGraphAbsBlock:()=>D,FlowGraphAcosBlock:()=>lZ,FlowGraphAcoshBlock:()=>yZ,FlowGraphAddBlock:()=>q,FlowGraphAsinBlock:()=>BZ,FlowGraphAsinhBlock:()=>FZ,FlowGraphAtan2Block:()=>VZ,FlowGraphAtanBlock:()=>HZ,FlowGraphAtanhBlock:()=>SZ,FlowGraphBitwiseAndBlock:()=>KZ,FlowGraphBitwiseLeftShiftBlock:()=>uZ,FlowGraphBitwiseNotBlock:()=>pZ,FlowGraphBitwiseOrBlock:()=>CZ,FlowGraphBitwiseRightShiftBlock:()=>jZ,FlowGraphBitwiseXorBlock:()=>DZ,FlowGraphCeilBlock:()=>X,FlowGraphClampBlock:()=>a,FlowGraphCosBlock:()=>nZ,FlowGraphCoshBlock:()=>RZ,FlowGraphCubeRootBlock:()=>EZ,FlowGraphDegToRadBlock:()=>f,FlowGraphDivideBlock:()=>z,FlowGraphEBlock:()=>E,FlowGraphEqualityBlock:()=>Q,FlowGraphExpBlock:()=>qZ,FlowGraphFloorBlock:()=>v,FlowGraphFractionBlock:()=>P,FlowGraphGreaterThanBlock:()=>e,FlowGraphGreaterThanOrEqualBlock:()=>g,FlowGraphInfBlock:()=>p,FlowGraphIsInfinityBlock:()=>r,FlowGraphIsNanBlock:()=>b,FlowGraphLeadingZerosBlock:()=>vZ,FlowGraphLessThanBlock:()=>k,FlowGraphLessThanOrEqualBlock:()=>I,FlowGraphLog10Block:()=>zZ,FlowGraphLog2Block:()=>sZ,FlowGraphLogBlock:()=>cZ,FlowGraphMathInterpolationBlock:()=>Y,FlowGraphMaxBlock:()=>N,FlowGraphMinBlock:()=>o,FlowGraphModuloBlock:()=>w,FlowGraphMultiplyBlock:()=>s,FlowGraphNaNBlock:()=>K,FlowGraphNegationBlock:()=>T,FlowGraphOneBitsCounterBlock:()=>hZ,FlowGraphPiBlock:()=>t,FlowGraphPowerBlock:()=>tZ,FlowGraphRadToDegBlock:()=>ZZ,FlowGraphRandomBlock:()=>O,FlowGraphRoundBlock:()=>h,FlowGraphSaturateBlock:()=>m,FlowGraphSignBlock:()=>u,FlowGraphSinBlock:()=>UZ,FlowGraphSinhBlock:()=>GZ,FlowGraphSquareRootBlock:()=>OZ,FlowGraphSubtractBlock:()=>c,FlowGraphTanBlock:()=>iZ,FlowGraphTanhBlock:()=>dZ,FlowGraphTrailingZerosBlock:()=>XZ,FlowGraphTruncBlock:()=>j});var i=n(633),B=n(12826),l=n(14070),H=n(14076);class V extends H.d{constructor(Z,U,n,i){super(Z,i),this._operation=U,this._className=n}_doOperation(Z){return this._operation(Z)}getClassName(){return this._className}}var G=n(702),R=n(14078);class d extends H.d{constructor(Z,U,n,i,B,l,H){super(i,H),this._operation=B,this._className=l,this.a=this.registerDataInput("a",Z),this.b=this.registerDataInput("b",U),this.c=this.registerDataInput("c",n)}_doOperation(Z){return this._operation(this.a.getValue(Z),this.b.getValue(Z),this.c.getValue(Z))}getClassName(){return this._className}}var F=n(12817),y=n(12829),S=n(12848);class q extends l.c{constructor(Z){super((0,B.J)(null===Z||void 0===Z?void 0:Z.type),(0,B.J)(null===Z||void 0===Z?void 0:Z.type),(0,B.J)(null===Z||void 0===Z?void 0:Z.type),((Z,U)=>this._polymorphicAdd(Z,U)),"FlowGraphAddBlock",Z)}_polymorphicAdd(Z,U){const n=(0,S.i)(Z),i=(0,S.i)(U);if((0,S.f)(n,i)||(0,S.e)(n,i)||(0,S.c)(n,i))return Z.add(U);if("Quaternion"===n||"Vector4"===i)return new G.o(Z.x,Z.y,Z.z,Z.w).addInPlace(U);if("Vector4"===n||"Quaternion"===i)return Z.add(U);var B;if(null!==(B=this.config)&&void 0!==B&&B.preventIntegerFloatArithmetic&&typeof Z!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,S.p)(Z)+(0,S.p)(U)}}(0,i.g)("FlowGraphAddBlock",q);class c extends l.c{constructor(Z){super((0,B.J)(null===Z||void 0===Z?void 0:Z.type),(0,B.J)(null===Z||void 0===Z?void 0:Z.type),(0,B.J)(null===Z||void 0===Z?void 0:Z.type),((Z,U)=>this._polymorphicSubtract(Z,U)),"FlowGraphSubtractBlock",Z)}_polymorphicSubtract(Z,U){const n=(0,S.i)(Z),i=(0,S.i)(U);if((0,S.f)(n,i)||(0,S.c)(n,i)||(0,S.e)(n,i))return Z.Qg(U);if("Quaternion"===n||"Vector4"===i)return new G.o(Z.x,Z.y,Z.z,Z.w).Wi(U);if("Vector4"===n||"Quaternion"===i)return Z.Qg(U);var B;if(null!==(B=this.config)&&void 0!==B&&B.preventIntegerFloatArithmetic&&typeof Z!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,S.p)(Z)-(0,S.p)(U)}}(0,i.g)("FlowGraphSubtractBlock",c);class s extends l.c{constructor(Z){super((0,B.J)(null===Z||void 0===Z?void 0:Z.type),(0,B.J)(null===Z||void 0===Z?void 0:Z.type),(0,B.J)(null===Z||void 0===Z?void 0:Z.type),((Z,U)=>this._polymorphicMultiply(Z,U)),"FlowGraphMultiplyBlock",Z)}_polymorphicMultiply(Z,U){const n=(0,S.i)(Z),i=(0,S.i)(U);if((0,S.f)(n,i)||(0,S.c)(n,i))return Z.multiply(U);if("Quaternion"===n||"Vector4"===i)return new G.o(Z.x,Z.y,Z.z,Z.w).multiplyInPlace(U);if("Vector4"===n||"Quaternion"===i)return Z.multiply(U);if((0,S.e)(n,i)){var B;if(null!==(B=this.config)&&void 0!==B&&B.useMatrixPerComponent){const i=Z.m;for(let Z=0;Z<i.length;Z++)i[Z]*=U.m[Z];return"Matrix2D"===n?new y.c(i):"Matrix3D"===n?new y.g(i):G.b.ri(i)}return U.multiply(Z)}var l;if(null!==(l=this.config)&&void 0!==l&&l.preventIntegerFloatArithmetic&&typeof Z!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,S.p)(Z)*(0,S.p)(U)}}(0,i.g)("FlowGraphMultiplyBlock",s);class z extends l.c{constructor(Z){super((0,B.J)(null===Z||void 0===Z?void 0:Z.type),(0,B.J)(null===Z||void 0===Z?void 0:Z.type),(0,B.J)(null===Z||void 0===Z?void 0:Z.type),((Z,U)=>this._polymorphicDivide(Z,U)),"FlowGraphDivideBlock",Z)}_polymorphicDivide(Z,U){const n=(0,S.i)(Z),i=(0,S.i)(U);if((0,S.f)(n,i)||(0,S.c)(n,i))return Z.divide(U);if("Quaternion"===n||"Quaternion"===i){const n=Z.clone();return n.x/=U.x,n.y/=U.y,n.z/=U.z,n.w/=U.w,n}if("Quaternion"===n||"Vector4"===i)return new G.o(Z.x,Z.y,Z.z,Z.w).divideInPlace(U);if("Vector4"===n||"Quaternion"===i)return Z.divide(U);if((0,S.e)(n,i)){var B;if(null!==(B=this.config)&&void 0!==B&&B.useMatrixPerComponent){const i=Z.m;for(let Z=0;Z<i.length;Z++)i[Z]/=U.m[Z];return"Matrix2D"===n?new y.c(i):"Matrix3D"===n?new y.g(i):G.b.ri(i)}return Z.divide(U)}var l;if(null!==(l=this.config)&&void 0!==l&&l.preventIntegerFloatArithmetic&&typeof Z!==typeof U)throw new Error("Cannot add different types of numbers.");return(0,S.p)(Z)/(0,S.p)(U)}}(0,i.g)("FlowGraphDivideBlock",z);class O extends V{constructor(Z){super(B.s,(Z=>this._random(Z)),"FlowGraphRandomBlock",Z),this.min=this.registerDataInput("min",B.s,(null===Z||void 0===Z?void 0:Z.min)??0),this.max=this.registerDataInput("max",B.s,(null===Z||void 0===Z?void 0:Z.max)??1),null!==Z&&void 0!==Z&&Z.seed&&(this._seed=Z.seed)}_isSeed(){return void 0!==(arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._seed)}_getRandomValue(){if(this._isSeed(this._seed)){const Z=1e4*Math.sin(this._seed++);return Z-Math.floor(Z)}return Math.random()}_random(Z){const U=this.min.getValue(Z),n=this.max.getValue(Z);return this._getRandomValue()*(n-U)+U}}(0,i.g)("FlowGraphRandomBlock",O);class E extends V{constructor(Z){super(B.s,(()=>Math.E),"FlowGraphEBlock",Z)}}(0,i.g)("FlowGraphEBlock",E);class t extends V{constructor(Z){super(B.s,(()=>Math.PI),"FlowGraphPIBlock",Z)}}(0,i.g)("FlowGraphPIBlock",t);class p extends V{constructor(Z){super(B.s,(()=>Number.POSITIVE_INFINITY),"FlowGraphInfBlock",Z)}}(0,i.g)("FlowGraphInfBlock",p);class K extends V{constructor(Z){super(B.s,(()=>Number.NaN),"FlowGraphNaNBlock",Z)}}function C(Z,U){switch((0,S.i)(Z)){case"FlowGraphInteger":return new F.d(U(Z.value));case"Vector2":return new G.j(U(Z.x),U(Z.y));case"ti":return new G.k(U(Z.x),U(Z.y),U(Z.z));case"Vector4":return new G.o(U(Z.x),U(Z.y),U(Z.z),U(Z.w));case"Quaternion":return new G.d(U(Z.x),U(Z.y),U(Z.z),U(Z.w));case"Matrix":return G.b.ri(Z.m.map(U));case"Matrix2D":return new y.c(Z.m.map(U));case"Matrix3D":return new y.g(Z.m.map(U));default:return U(Z)}}(0,i.g)("FlowGraphNaNBlock",K);class D extends R.e{constructor(Z){super(B.s,B.s,(Z=>this._polymorphicAbs(Z)),"FlowGraphAbsBlock",Z)}_polymorphicAbs(Z){return C(Z,Math.abs)}}(0,i.g)("FlowGraphAbsBlock",D);class u extends R.e{constructor(Z){super(B.s,B.s,(Z=>this._polymorphicSign(Z)),"FlowGraphSignBlock",Z)}_polymorphicSign(Z){return C(Z,Math.sign)}}(0,i.g)("FlowGraphSignBlock",u);class j extends R.e{constructor(Z){super(B.s,B.s,(Z=>this._polymorphicTrunc(Z)),"FlowGraphTruncBlock",Z)}_polymorphicTrunc(Z){return C(Z,Math.trunc)}}(0,i.g)("FlowGraphTruncBlock",j);class v extends R.e{constructor(Z){super(B.s,B.s,(Z=>this._polymorphicFloor(Z)),"FlowGraphFloorBlock",Z)}_polymorphicFloor(Z){return C(Z,Math.floor)}}(0,i.g)("FlowGraphFloorBlock",v);class X extends R.e{constructor(Z){super(B.b,B.b,(Z=>this._polymorphicCeiling(Z)),"FlowGraphCeilBlock",Z)}_polymorphicCeiling(Z){return C(Z,Math.ceil)}}(0,i.g)("FlowGraphCeilBlock",X);class h extends R.e{constructor(Z){super(B.b,B.b,(Z=>this._polymorphicRound(Z)),"FlowGraphRoundBlock",Z)}_polymorphicRound(Z){return C(Z,(Z=>{var U;return Z<0&&null!==(U=this.config)&&void 0!==U&&U.roundHalfAwayFromZero?-Math.round(-Z):Math.round(Z)}))}}(0,i.g)("FlowGraphRoundBlock",h);class P extends R.e{constructor(Z){super(B.b,B.b,(Z=>this._polymorphicFraction(Z)),"FlowGraphFractBlock",Z)}_polymorphicFraction(Z){return C(Z,(Z=>Z-Math.floor(Z)))}}(0,i.g)("FlowGraphFractBlock",P);class T extends R.e{constructor(Z){super(B.b,B.b,(Z=>this._polymorphicNeg(Z)),"FlowGraphNegationBlock",Z)}_polymorphicNeg(Z){return C(Z,(Z=>-Z))}}function x(Z,U,n){switch((0,S.i)(Z)){case"FlowGraphInteger":return new F.d(n(Z.value,U.value));case"Vector2":return new G.j(n(Z.x,U.x),n(Z.y,U.y));case"ti":return new G.k(n(Z.x,U.x),n(Z.y,U.y),n(Z.z,U.z));case"Vector4":return new G.o(n(Z.x,U.x),n(Z.y,U.y),n(Z.z,U.z),n(Z.w,U.w));case"Quaternion":return new G.d(n(Z.x,U.x),n(Z.y,U.y),n(Z.z,U.z),n(Z.w,U.w));case"Matrix":return G.b.ri(Z.m.map(((Z,i)=>n(Z,U.m[i]))));case"Matrix2D":return new y.c(Z.m.map(((Z,i)=>n(Z,U.m[i]))));case"Matrix3D":return new y.g(Z.m.map(((Z,i)=>n(Z,U.m[i]))));default:return n((0,S.p)(Z),(0,S.p)(U))}}(0,i.g)("FlowGraphNegationBlock",T);class w extends l.c{constructor(Z){super(B.b,B.b,B.b,((Z,U)=>this._polymorphicRemainder(Z,U)),"FlowGraphModuloBlock",Z)}_polymorphicRemainder(Z,U){return x(Z,U,((Z,U)=>Z%U))}}(0,i.g)("FlowGraphModuloBlock",w);class o extends l.c{constructor(Z){super(B.b,B.b,B.b,((Z,U)=>this._polymorphicMin(Z,U)),"FlowGraphMinBlock",Z)}_polymorphicMin(Z,U){return x(Z,U,Math.min)}}(0,i.g)("FlowGraphMinBlock",o);class N extends l.c{constructor(Z){super(B.b,B.b,B.b,((Z,U)=>this._polymorphicMax(Z,U)),"FlowGraphMaxBlock",Z)}_polymorphicMax(Z,U){return x(Z,U,Math.max)}}function J(Z,U,n){return Math.min(Math.max(Z,Math.min(U,n)),Math.max(U,n))}function W(Z,U,n,i){switch((0,S.i)(Z)){case"FlowGraphInteger":return new F.d(i(Z.value,U.value,n.value));case"Vector2":return new G.j(i(Z.x,U.x,n.x),i(Z.y,U.y,n.y));case"ti":return new G.k(i(Z.x,U.x,n.x),i(Z.y,U.y,n.y),i(Z.z,U.z,n.z));case"Vector4":return new G.o(i(Z.x,U.x,n.x),i(Z.y,U.y,n.y),i(Z.z,U.z,n.z),i(Z.w,U.w,n.w));case"Quaternion":return new G.d(i(Z.x,U.x,n.x),i(Z.y,U.y,n.y),i(Z.z,U.z,n.z),i(Z.w,U.w,n.w));case"Matrix":return G.b.ri(Z.m.map(((Z,B)=>i(Z,U.m[B],n.m[B]))));case"Matrix2D":return new y.c(Z.m.map(((Z,B)=>i(Z,U.m[B],n.m[B]))));case"Matrix3D":return new y.g(Z.m.map(((Z,B)=>i(Z,U.m[B],n.m[B]))));default:return i((0,S.p)(Z),(0,S.p)(U),(0,S.p)(n))}}(0,i.g)("FlowGraphMaxBlock",N);class a extends d{constructor(Z){super(B.b,B.b,B.b,B.b,((Z,U,n)=>this._polymorphicClamp(Z,U,n)),"FlowGraphClampBlock",Z)}_polymorphicClamp(Z,U,n){return W(Z,U,n,J)}}function M(Z){return Math.min(Math.max(Z,0),1)}(0,i.g)("FlowGraphClampBlock",a);class m extends R.e{constructor(Z){super(B.b,B.b,(Z=>this._polymorphicSaturate(Z)),"FlowGraphSaturateBlock",Z)}_polymorphicSaturate(Z){return C(Z,M)}}function A(Z,U,n){return(1-n)*Z+n*U}(0,i.g)("FlowGraphSaturateBlock",m);class Y extends d{constructor(Z){super(B.b,B.b,B.b,B.b,((Z,U,n)=>this._polymorphicInterpolate(Z,U,n)),"FlowGraphMathInterpolationBlock",Z)}_polymorphicInterpolate(Z,U,n){return W(Z,U,n,A)}}(0,i.g)("FlowGraphMathInterpolationBlock",Y);class Q extends l.c{constructor(Z){super(B.b,B.b,B.e,((Z,U)=>this._polymorphicEq(Z,U)),"FlowGraphEqualityBlock",Z)}_polymorphicEq(Z,U){const n=(0,S.i)(Z),i=(0,S.i)(U);return typeof Z===typeof U&&((0,S.f)(n,i)||(0,S.e)(n,i)||(0,S.c)(n,i)?Z.equals(U):Z===U)}}function L(Z,U,n){if((0,S.q)(Z)&&(0,S.q)(U))return n((0,S.p)(Z),(0,S.p)(U));throw new Error(`Cannot compare ${Z} and ${U}`)}(0,i.g)("FlowGraphEqualityBlock",Q);class k extends l.c{constructor(Z){super(B.b,B.b,B.e,((Z,U)=>this._polymorphicLessThan(Z,U)),"FlowGraphLessThanBlock",Z)}_polymorphicLessThan(Z,U){return L(Z,U,((Z,U)=>Z<U))}}(0,i.g)("FlowGraphLessThanBlock",k);class I extends l.c{constructor(Z){super(B.b,B.b,B.e,((Z,U)=>this._polymorphicLessThanOrEqual(Z,U)),"FlowGraphLessThanOrEqualBlock",Z)}_polymorphicLessThanOrEqual(Z,U){return L(Z,U,((Z,U)=>Z<=U))}}(0,i.g)("FlowGraphLessThanOrEqualBlock",I);class e extends l.c{constructor(Z){super(B.b,B.b,B.e,((Z,U)=>this._polymorphicGreaterThan(Z,U)),"FlowGraphGreaterThanBlock",Z)}_polymorphicGreaterThan(Z,U){return L(Z,U,((Z,U)=>Z>U))}}(0,i.g)("FlowGraphGreaterThanBlock",e);class g extends l.c{constructor(Z){super(B.b,B.b,B.e,((Z,U)=>this._polymorphicGreaterThanOrEqual(Z,U)),"FlowGraphGreaterThanOrEqualBlock",Z)}_polymorphicGreaterThanOrEqual(Z,U){return L(Z,U,((Z,U)=>Z>=U))}}(0,i.g)("FlowGraphGreaterThanOrEqualBlock",g);class b extends R.e{constructor(Z){super(B.b,B.e,(Z=>this._polymorphicIsNan(Z)),"FlowGraphIsNaNBlock",Z)}_polymorphicIsNan(Z){if((0,S.q)(Z,!0))return isNaN((0,S.p)(Z));throw new Error(`Cannot get NaN of ${Z}`)}}(0,i.g)("FlowGraphIsNaNBlock",b);class r extends R.e{constructor(Z){super(B.b,B.e,(Z=>this._polymorphicIsInf(Z)),"FlowGraphIsInfBlock",Z)}_polymorphicIsInf(Z){if((0,S.q)(Z))return!isFinite((0,S.p)(Z));throw new Error(`Cannot get isInf of ${Z}`)}}(0,i.g)("FlowGraphIsInfBlock",r);class f extends R.e{constructor(Z){super(B.b,B.b,(Z=>this._polymorphicDegToRad(Z)),"FlowGraphDegToRadBlock",Z)}_degToRad(Z){return Z*Math.PI/180}_polymorphicDegToRad(Z){return C(Z,this._degToRad)}}(0,i.g)("FlowGraphDegToRadBlock",f);class ZZ extends R.e{constructor(Z){super(B.b,B.b,(Z=>this._polymorphicRadToDeg(Z)),"FlowGraphRadToDegBlock",Z)}_radToDeg(Z){return 180*Z/Math.PI}_polymorphicRadToDeg(Z){return C(Z,this._radToDeg)}}(0,i.g)("FlowGraphRadToDegBlock",ZZ);class UZ extends R.e{constructor(Z){super(B.s,B.s,(Z=>this._polymorphicSin(Z)),"FlowGraphSinBlock",Z)}_polymorphicSin(Z){return C(Z,Math.sin)}}class nZ extends R.e{constructor(Z){super(B.s,B.s,(Z=>this._polymorphicCos(Z)),"FlowGraphCosBlock",Z)}_polymorphicCos(Z){return C(Z,Math.cos)}}class iZ extends R.e{constructor(Z){super(B.s,B.s,(Z=>this._polymorphicTan(Z)),"FlowGraphTanBlock",Z)}_polymorphicTan(Z){return C(Z,Math.tan)}}class BZ extends R.e{constructor(Z){super(B.s,B.s,(Z=>this._polymorphicAsin(Z)),"FlowGraphASinBlock",Z)}_polymorphicAsin(Z){return C(Z,Math.asin)}}(0,i.g)("FlowGraphASinBlock",BZ);class lZ extends R.e{constructor(Z){super(B.s,B.s,(Z=>this._polymorphicAcos(Z)),"FlowGraphACosBlock",Z)}_polymorphicAcos(Z){return C(Z,Math.acos)}}(0,i.g)("FlowGraphACosBlock",lZ);class HZ extends R.e{constructor(Z){super(B.s,B.s,(Z=>this._polymorphicAtan(Z)),"FlowGraphATanBlock",Z)}_polymorphicAtan(Z){return C(Z,Math.atan)}}(0,i.g)("FlowGraphATanBlock",HZ);class VZ extends l.c{constructor(Z){super(B.b,B.b,B.b,((Z,U)=>this._polymorphicAtan2(Z,U)),"FlowGraphATan2Block",Z)}_polymorphicAtan2(Z,U){return x(Z,U,Math.atan2)}}(0,i.g)("FlowGraphATan2Block",VZ);class GZ extends R.e{constructor(Z){super(B.b,B.b,(Z=>this._polymorphicSinh(Z)),"FlowGraphSinhBlock",Z)}_polymorphicSinh(Z){return C(Z,Math.sinh)}}(0,i.g)("FlowGraphSinhBlock",GZ);class RZ extends R.e{constructor(Z){super(B.b,B.b,(Z=>this._polymorphicCosh(Z)),"FlowGraphCoshBlock",Z)}_polymorphicCosh(Z){return C(Z,Math.cosh)}}(0,i.g)("FlowGraphCoshBlock",RZ);class dZ extends R.e{constructor(Z){super(B.b,B.b,(Z=>this._polymorphicTanh(Z)),"FlowGraphTanhBlock",Z)}_polymorphicTanh(Z){return C(Z,Math.tanh)}}(0,i.g)("FlowGraphTanhBlock",dZ);class FZ extends R.e{constructor(Z){super(B.b,B.s,(Z=>this._polymorphicAsinh(Z)),"FlowGraphASinhBlock",Z)}_polymorphicAsinh(Z){return C(Z,Math.asinh)}}(0,i.g)("FlowGraphASinhBlock",FZ);class yZ extends R.e{constructor(Z){super(B.b,B.s,(Z=>this._polymorphicAcosh(Z)),"FlowGraphACoshBlock",Z)}_polymorphicAcosh(Z){return C(Z,Math.acosh)}}(0,i.g)("FlowGraphACoshBlock",yZ);class SZ extends R.e{constructor(Z){super(B.b,B.s,(Z=>this._polymorphicAtanh(Z)),"FlowGraphATanhBlock",Z)}_polymorphicAtanh(Z){return C(Z,Math.atanh)}}(0,i.g)("FlowGraphATanhBlock",SZ);class qZ extends R.e{constructor(Z){super(B.b,B.s,(Z=>this._polymorphicExp(Z)),"FlowGraphExponentialBlock",Z)}_polymorphicExp(Z){return C(Z,Math.exp)}}(0,i.g)("FlowGraphExponentialBlock",qZ);class cZ extends R.e{constructor(Z){super(B.b,B.s,(Z=>this._polymorphicLog(Z)),"FlowGraphLogBlock",Z)}_polymorphicLog(Z){return C(Z,Math.log)}}(0,i.g)("FlowGraphLogBlock",cZ);class sZ extends R.e{constructor(Z){super(B.b,B.s,(Z=>this._polymorphicLog2(Z)),"FlowGraphLog2Block",Z)}_polymorphicLog2(Z){return C(Z,Math.log2)}}(0,i.g)("FlowGraphLog2Block",sZ);class zZ extends R.e{constructor(Z){super(B.b,B.s,(Z=>this._polymorphicLog10(Z)),"FlowGraphLog10Block",Z)}_polymorphicLog10(Z){return C(Z,Math.log10)}}(0,i.g)("FlowGraphLog10Block",zZ);class OZ extends R.e{constructor(Z){super(B.b,B.s,(Z=>this._polymorphicSqrt(Z)),"FlowGraphSquareRootBlock",Z)}_polymorphicSqrt(Z){return C(Z,Math.sqrt)}}(0,i.g)("FlowGraphSquareRootBlock",OZ);class EZ extends R.e{constructor(Z){super(B.b,B.s,(Z=>this._polymorphicCubeRoot(Z)),"FlowGraphCubeRootBlock",Z)}_polymorphicCubeRoot(Z){return C(Z,Math.cbrt)}}(0,i.g)("FlowGraphCubeRootBlock",EZ);class tZ extends l.c{constructor(Z){super(B.b,B.s,B.s,((Z,U)=>this._polymorphicPow(Z,U)),"FlowGraphPowerBlock",Z)}_polymorphicPow(Z,U){return x(Z,U,Math.pow)}}(0,i.g)("FlowGraphPowerBlock",tZ);class pZ extends R.e{constructor(Z){super((0,B.J)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,B.J)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(Z=>"boolean"===typeof Z?!Z:"number"===typeof Z?~Z:new F.d(~Z.value)),"FlowGraphBitwiseNotBlock",Z)}}(0,i.g)("FlowGraphBitwiseNotBlock",pZ);class KZ extends l.c{constructor(Z){super((0,B.J)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,B.J)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,B.J)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),((Z,U)=>{if("boolean"===typeof Z&&"boolean"===typeof U)return Z&&U;if("number"===typeof Z&&"number"===typeof U)return Z&U;if("object"===typeof Z&&"object"===typeof U)return new F.d(Z.value&U.value);throw new Error(`Cannot perform bitwise AND on ${Z} and ${U}`)}),"FlowGraphBitwiseAndBlock",Z)}}(0,i.g)("FlowGraphBitwiseAndBlock",KZ);class CZ extends l.c{constructor(Z){super((0,B.J)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,B.J)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,B.J)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),((Z,U)=>{if("boolean"===typeof Z&&"boolean"===typeof U)return Z||U;if("number"===typeof Z&&"number"===typeof U)return Z|U;if("object"===typeof Z&&"object"===typeof U)return new F.d(Z.value|U.value);throw new Error(`Cannot perform bitwise OR on ${Z} and ${U}`)}),"FlowGraphBitwiseOrBlock",Z)}}(0,i.g)("FlowGraphBitwiseOrBlock",CZ);class DZ extends l.c{constructor(Z){super((0,B.J)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,B.J)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),(0,B.J)((null===Z||void 0===Z?void 0:Z.valueType)||"FlowGraphInteger"),((Z,U)=>{if("boolean"===typeof Z&&"boolean"===typeof U)return Z!==U;if("number"===typeof Z&&"number"===typeof U)return Z^U;if("object"===typeof Z&&"object"===typeof U)return new F.d(Z.value^U.value);throw new Error(`Cannot perform bitwise XOR on ${Z} and ${U}`)}),"FlowGraphBitwiseXorBlock",Z)}}(0,i.g)("FlowGraphBitwiseXorBlock",DZ);class uZ extends l.c{constructor(Z){super(B.g,B.g,B.g,((Z,U)=>new F.d(Z.value<<U.value)),"FlowGraphBitwiseLeftShiftBlock",Z)}}(0,i.g)("FlowGraphBitwiseLeftShiftBlock",uZ);class jZ extends l.c{constructor(Z){super(B.g,B.g,B.g,((Z,U)=>new F.d(Z.value>>U.value)),"FlowGraphBitwiseRightShiftBlock",Z)}}(0,i.g)("FlowGraphBitwiseRightShiftBlock",jZ);class vZ extends R.e{constructor(Z){super(B.g,B.g,(Z=>new F.d(Math.clz32(Z.value))),"FlowGraphLeadingZerosBlock",Z)}}(0,i.g)("FlowGraphLeadingZerosBlock",vZ);class XZ extends R.e{constructor(Z){super(B.g,B.g,(Z=>new F.d(Z.value?31-Math.clz32(Z.value&-Z.value):32)),"FlowGraphTrailingZerosBlock",Z)}}(0,i.g)("FlowGraphTrailingZerosBlock",XZ);class hZ extends R.e{constructor(Z){super(B.g,B.g,(Z=>new F.d(function(Z){let U=0;for(;Z;)U+=1&Z,Z>>=1;return U}(Z.value))),"FlowGraphOneBitsCounterBlock",Z)}}(0,i.g)("FlowGraphOneBitsCounterBlock",hZ)},14070:(Z,U,n)=>{n.d(U,{c:()=>B});var i=n(14076);class B extends i.d{constructor(Z,U,n,i,B,l){super(n,l),this._operation=i,this._className=B,this.a=this.registerDataInput("a",Z),this.b=this.registerDataInput("b",U)}_doOperation(Z){const U=this.a.getValue(Z),n=this.b.getValue(Z);return this._operation(U,n)}getClassName(){return this._className}}},14076:(Z,U,n)=>{n.d(U,{d:()=>V});var i=n(12837),B=n(12826);const l="cachedOperationValue",H="cachedExecutionId";class V extends i.b{constructor(Z,U){super(U),this.value=this.registerDataOutput("value",Z),this.isValid=this.registerDataOutput("isValid",B.e)}_updateOutputs(Z){const U=Z._getExecutionVariable(this,H,-1),n=Z._getExecutionVariable(this,l,null);if(void 0!==n&&null!==n&&U===Z.executionId)this.isValid.setValue(!0,Z),this.value.setValue(n,Z);else try{const U=this._doOperation(Z);if(void 0===U||null===U)return void this.isValid.setValue(!1,Z);Z._setExecutionVariable(this,l,U),Z._setExecutionVariable(this,H,Z.executionId),this.value.setValue(U,Z),this.isValid.setValue(!0,Z)}catch(i){this.isValid.setValue(!1,Z)}}}},14078:(Z,U,n)=>{n.d(U,{e:()=>B});var i=n(14076);class B extends i.d{constructor(Z,U,n,i,B){super(U,B),this._operation=n,this._className=i,this.a=this.registerDataInput("a",Z)}_doOperation(Z){return this._operation(this.a.getValue(Z))}getClassName(){return this._className}}}}]);