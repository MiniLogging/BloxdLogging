"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[26],{12835:(w,p,e)=>{var r=e(11161),I=e(11081),d=e(11107),f=e(11190),q=e(11132),E=e(11173);q.d.prototype._partialLoadFile=function(w,p,e,r){let I=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;this._loadFile(w,(w=>{e[p]=w,e._internalCount++,6===e._internalCount&&r(e)}),void 0,void 0,!0,((w,p)=>{I&&w&&I(w.status+" "+w.statusText,p)}))},q.d.prototype._cascadeLoadFiles=function(w,p,e){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;const I=[];I._internalCount=0;for(let d=0;d<6;d++)this._partialLoadFile(e[d],d,I,p,r)},q.d.prototype._cascadeLoadImgs=function(w,p,e,r){let I=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,d=arguments.length>5?arguments[5]:void 0;const f=[];f._internalCount=0;for(let q=0;q<6;q++)this._partialLoadImg(r[q],q,f,w,p,e,I,d)},q.d.prototype._partialLoadImg=function(w,p,e,r,I,q){let E=arguments.length>6&&void 0!==arguments[6]?arguments[6]:null,j=arguments.length>7?arguments[7]:void 0;const X=(0,f.b)();(0,d.u)(w,(w=>{e[p]=w,e._internalCount++,r&&r.removePendingData(X),6===e._internalCount&&q&&q(I,e)}),((w,p)=>{r&&r.removePendingData(X),E&&E(w,p)}),r?r.offlineProvider:null,j),r&&r.addPendingData(X)},q.d.prototype.createCubeTextureBase=function(w,p,e,d){let f=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,q=arguments.length>5&&void 0!==arguments[5]?arguments[5]:null,j=arguments.length>6?arguments[6]:void 0,X=arguments.length>7&&void 0!==arguments[7]?arguments[7]:null,k=arguments.length>8&&void 0!==arguments[8]&&arguments[8],m=arguments.length>9&&void 0!==arguments[9]?arguments[9]:0,J=arguments.length>10&&void 0!==arguments[10]?arguments[10]:0,K=arguments.length>11&&void 0!==arguments[11]?arguments[11]:null,y=arguments.length>12&&void 0!==arguments[12]?arguments[12]:null,c=arguments.length>13&&void 0!==arguments[13]?arguments[13]:null,s=arguments.length>14&&void 0!==arguments[14]&&arguments[14],O=arguments.length>15&&void 0!==arguments[15]?arguments[15]:null;const a=K||new r.d(this,7);a.isCube=!0,a.url=w,a.generateMipMaps=!d,a._lodGenerationScale=m,a._lodGenerationOffset=J,a._useSRGBBuffer=!!s&&this._caps.supportSRGBBuffers&&(this.version>1||this.isWebGPU||!!d),a!==K&&(a.label=w.substring(0,60)),this._doNotHandleContextLost||(a._extension=X,a._files=e,a._buffer=O);const A=w;this._transformTextureUrl&&!K&&(w=this._transformTextureUrl(w));const z=X??function(w){const p=w.split("?")[0],e=p.lastIndexOf(".");return e>-1?p.substring(e).toLowerCase():""}(w),M=(0,E.b)(z),i=(w,p)=>{a.dispose(),q?q(w,p):w&&I.c.Warn(w)},t=(r,q)=>{w===A?r&&i(r.status+" "+r.statusText,q):(I.c.Warn(`Failed to load ${w}, falling back to the ${A}`),this.createCubeTextureBase(A,p,e,!!d,f,i,j,X,k,m,J,a,y,c,s,O))};if(M)M.then((r=>{const I=w=>{y&&y(a,w),r.loadCubeData(w,a,k,f,((w,p)=>{i(w,p)}))};O?I(O):e&&6===e.length?r.supportCascades?this._cascadeLoadFiles(p,(w=>I(w.map((w=>new Uint8Array(w))))),e,i):i("Textures type does not support cascades."):this._loadFile(w,(w=>I(new Uint8Array(w))),void 0,void 0,!0,t)}));else{if(!e||0===e.length)throw new Error("Cannot load cubemap because files were not defined, or the correct loader was not found.");this._cascadeLoadImgs(p,a,((w,p)=>{c&&c(w,p)}),e,i)}return this._internalTexturesCache.push(a),a}},13635:(w,p,e)=>{e.d(p,{DDSTools:()=>K});var r=e(11063),I=e(11081),d=e(11690),f=e(11502);e(12835);const q=131072,E=131072;function j(w){return w.charCodeAt(0)+(w.charCodeAt(1)<<8)+(w.charCodeAt(2)<<16)+(w.charCodeAt(3)<<24)}const X=j("DXT1"),k=j("DXT3"),m=j("DXT5"),J=j("DX10");class K{static GetDDSInfo(w){const p=new Int32Array(w.buffer,w.byteOffset,31),e=new Int32Array(w.buffer,w.byteOffset,35);let r=1;p[2]&q&&(r=Math.max(1,p[7]));const I=p[21],d=I===J?e[32]:0;let f=0;switch(I){case 113:f=2;break;case 116:f=1;break;case J:if(10===d){f=2;break}if(2===d){f=1;break}}return{width:p[4],height:p[3],mipmapCount:r,isFourCC:4===(4&p[20]),isRGB:64===(64&p[20]),isLuminance:(p[20]&E)===E,isCube:512===(512&p[28]),isCompressed:I===X||I===k||I===m,dxgiFormat:d,textureType:f}}static _GetHalfFloatAsFloatRGBAArrayBuffer(w,p,e,r,I,d){const q=new Float32Array(r),E=new Uint16Array(I,e);let j=0;for(let X=0;X<p;X++)for(let p=0;p<w;p++){const e=4*(p+X*w);q[j]=(0,f.c)(E[e]),q[j+1]=(0,f.c)(E[e+1]),q[j+2]=(0,f.c)(E[e+2]),K.StoreLODInAlphaChannel?q[j+3]=d:q[j+3]=(0,f.c)(E[e+3]),j+=4}return q}static _GetHalfFloatRGBAArrayBuffer(w,p,e,r,I,d){if(K.StoreLODInAlphaChannel){const q=new Uint16Array(r),E=new Uint16Array(I,e);let j=0;for(let e=0;e<p;e++)for(let p=0;p<w;p++){const r=4*(p+e*w);q[j]=E[r],q[j+1]=E[r+1],q[j+2]=E[r+2],q[j+3]=(0,f.k)(d),j+=4}return q}return new Uint16Array(I,e,r)}static _GetFloatRGBAArrayBuffer(w,p,e,r,I,d){if(K.StoreLODInAlphaChannel){const f=new Float32Array(r),q=new Float32Array(I,e);let E=0;for(let e=0;e<p;e++)for(let p=0;p<w;p++){const r=4*(p+e*w);f[E]=q[r],f[E+1]=q[r+1],f[E+2]=q[r+2],f[E+3]=d,E+=4}return f}return new Float32Array(I,e,r)}static _GetFloatAsHalfFloatRGBAArrayBuffer(w,p,e,r,I,d){const q=new Uint16Array(r),E=new Float32Array(I,e);let j=0;for(let X=0;X<p;X++)for(let p=0;p<w;p++)q[j]=(0,f.k)(E[j]),q[j+1]=(0,f.k)(E[j+1]),q[j+2]=(0,f.k)(E[j+2]),K.StoreLODInAlphaChannel?q[j+3]=(0,f.k)(d):q[j+3]=(0,f.k)(E[j+3]),j+=4;return q}static _GetFloatAsUIntRGBAArrayBuffer(w,p,e,I,d,f){const q=new Uint8Array(I),E=new Float32Array(d,e);let j=0;for(let X=0;X<p;X++)for(let p=0;p<w;p++){const e=4*(p+X*w);q[j]=255*(0,r.Clamp)(E[e]),q[j+1]=255*(0,r.Clamp)(E[e+1]),q[j+2]=255*(0,r.Clamp)(E[e+2]),K.StoreLODInAlphaChannel?q[j+3]=f:q[j+3]=255*(0,r.Clamp)(E[e+3]),j+=4}return q}static _GetHalfFloatAsUIntRGBAArrayBuffer(w,p,e,I,d,q){const E=new Uint8Array(I),j=new Uint16Array(d,e);let X=0;for(let k=0;k<p;k++)for(let p=0;p<w;p++){const e=4*(p+k*w);E[X]=255*(0,r.Clamp)((0,f.c)(j[e])),E[X+1]=255*(0,r.Clamp)((0,f.c)(j[e+1])),E[X+2]=255*(0,r.Clamp)((0,f.c)(j[e+2])),K.StoreLODInAlphaChannel?E[X+3]=q:E[X+3]=255*(0,r.Clamp)((0,f.c)(j[e+3])),X+=4}return E}static _GetRGBAArrayBuffer(w,p,e,r,I,d,f,q,E){const j=new Uint8Array(r),X=new Uint8Array(I,e);let k=0;for(let m=0;m<p;m++)for(let p=0;p<w;p++){const e=4*(p+m*w);j[k]=X[e+d],j[k+1]=X[e+f],j[k+2]=X[e+q],j[k+3]=X[e+E],k+=4}return j}static _ExtractLongWordOrder(w){return 0===w||255===w||-16777216===w?0:1+K._ExtractLongWordOrder(w>>8)}static _GetRGBArrayBuffer(w,p,e,r,I,d,f,q){const E=new Uint8Array(r),j=new Uint8Array(I,e);let X=0;for(let k=0;k<p;k++)for(let p=0;p<w;p++){const e=3*(p+k*w);E[X]=j[e+d],E[X+1]=j[e+f],E[X+2]=j[e+q],X+=3}return E}static _GetLuminanceArrayBuffer(w,p,e,r,I){const d=new Uint8Array(r),f=new Uint8Array(I,e);let q=0;for(let E=0;E<p;E++)for(let p=0;p<w;p++){const e=p+E*w;d[q]=f[e],q++}return d}static UploadDDSLevels(w,p,e,r,f,E){let j=arguments.length>6&&void 0!==arguments[6]?arguments[6]:-1,y=arguments.length>7?arguments[7]:void 0,c=!(arguments.length>8&&void 0!==arguments[8])||arguments[8],s=null;r.sphericalPolynomial&&(s=[]);const O=!!w.getCaps().s3tc;p.generateMipMaps=f;const a=new Int32Array(e.buffer,e.byteOffset,31);let A,z,M,i,t,n,l,N=0,U=0,v=1;if(542327876!==a[0])return void I.c.Error("Invalid magic number in DDS header");if(!r.isFourCC&&!r.isRGB&&!r.isLuminance)return void I.c.Error("Unsupported format, must contain a FourCC, RGB or LUMINANCE code");if(r.isCompressed&&!O)return void I.c.Error("Compressed textures are not supported on this platform.");let R=a[22];i=a[1]+4;let V=!1;if(r.isFourCC)switch(A=a[21],A){case X:v=8,U=33777;break;case k:v=16,U=33778;break;case m:v=16,U=33779;break;case 113:V=!0,R=64;break;case 116:V=!0,R=128;break;case J:{i+=20;let w=!1;switch(r.dxgiFormat){case 10:V=!0,R=64,w=!0;break;case 2:V=!0,R=128,w=!0;break;case 88:r.isRGB=!0,r.isFourCC=!1,R=32,w=!0}if(w)break}default:return void I.c.Error(["Unsupported FourCC code:",(b=A,String.fromCharCode(255&b,b>>8&255,b>>16&255,b>>24&255))])}var b;const h=K._ExtractLongWordOrder(a[23]),P=K._ExtractLongWordOrder(a[24]),u=K._ExtractLongWordOrder(a[25]),Y=K._ExtractLongWordOrder(a[26]);V&&(U=w._getRGBABufferInternalSizedFormat(r.textureType)),n=1,a[2]&q&&!1!==f&&(n=Math.max(1,a[7]));const L=y||0,W=w.getCaps();for(let I=L;I<E;I++){for(z=a[4],M=a[3],l=0;l<n;++l){if(-1===j||j===l){const d=-1===j?l:0;if(!r.isCompressed&&r.isFourCC){p.format=5,N=z*M*4;let r=null;if(w._badOS||w._badDesktopOS||!W.textureHalfFloat&&!W.textureFloat)128===R?(r=K._GetFloatAsUIntRGBAArrayBuffer(z,M,e.byteOffset+i,N,e.buffer,d),s&&0==d&&s.push(K._GetFloatRGBAArrayBuffer(z,M,e.byteOffset+i,N,e.buffer,d))):64===R&&(r=K._GetHalfFloatAsUIntRGBAArrayBuffer(z,M,e.byteOffset+i,N,e.buffer,d),s&&0==d&&s.push(K._GetHalfFloatAsFloatRGBAArrayBuffer(z,M,e.byteOffset+i,N,e.buffer,d))),p.type=0;else{const w=W.textureFloat&&(c&&W.textureFloatLinearFiltering||!c),I=W.textureHalfFloat&&(c&&W.textureHalfFloatLinearFiltering||!c),f=(128===R||64===R&&!I)&&w?1:(64===R||128===R&&!w)&&I?2:0;let q,E=null;if(128===R)switch(f){case 1:q=K._GetFloatRGBAArrayBuffer,E=null;break;case 2:q=K._GetFloatAsHalfFloatRGBAArrayBuffer,E=K._GetFloatRGBAArrayBuffer;break;case 0:q=K._GetFloatAsUIntRGBAArrayBuffer,E=K._GetFloatRGBAArrayBuffer}else switch(f){case 1:q=K._GetHalfFloatAsFloatRGBAArrayBuffer,E=null;break;case 2:q=K._GetHalfFloatRGBAArrayBuffer,E=K._GetHalfFloatAsFloatRGBAArrayBuffer;break;case 0:q=K._GetHalfFloatAsUIntRGBAArrayBuffer,E=K._GetHalfFloatAsFloatRGBAArrayBuffer}p.type=f,r=q(z,M,e.byteOffset+i,N,e.buffer,d),s&&0==d&&s.push(E?E(z,M,e.byteOffset+i,N,e.buffer,d):r)}r&&w._uploadDataToTextureDirectly(p,r,I,d)}else if(r.isRGB)p.type=0,24===R?(p.format=4,N=z*M*3,t=K._GetRGBArrayBuffer(z,M,e.byteOffset+i,N,e.buffer,h,P,u),w._uploadDataToTextureDirectly(p,t,I,d)):(p.format=5,N=z*M*4,t=K._GetRGBAArrayBuffer(z,M,e.byteOffset+i,N,e.buffer,h,P,u,Y),w._uploadDataToTextureDirectly(p,t,I,d));else if(r.isLuminance){const r=w._getUnpackAlignement(),f=z;N=Math.floor((z+r-1)/r)*r*(M-1)+f,t=K._GetLuminanceArrayBuffer(z,M,e.byteOffset+i,N,e.buffer),p.format=1,p.type=0,w._uploadDataToTextureDirectly(p,t,I,d)}else N=Math.max(4,z)/4*Math.max(4,M)/4*v,t=new Uint8Array(e.buffer,e.byteOffset+i,N),p.type=0,w._uploadCompressedDataToTextureDirectly(p,U,z,M,t,I,d)}i+=R?z*M*(R/8):N,z*=.5,M*=.5,z=Math.max(1,z),M=Math.max(1,M)}if(void 0!==y)break}s&&s.length>0?r.sphericalPolynomial=d.b.ConvertCubeMapToSphericalPolynomial({size:a[4],right:s[0],left:s[1],up:s[2],down:s[3],front:s[4],back:s[5],format:5,type:1,gammaSpace:!1}):r.sphericalPolynomial=void 0}}K.StoreLODInAlphaChannel=!1}}]);