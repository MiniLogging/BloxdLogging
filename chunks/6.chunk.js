"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[6],{2578:(P,Q,O)=>{var b=O(673),F=O(561),g=O(602),m=O(703),q=O(638),R=O(686);q.d.prototype._partialLoadFile=function(P,Q,O,b){let F=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;this._loadFile(P,(P=>{O[Q]=P,O._internalCount++,6===O._internalCount&&b(O)}),void 0,void 0,!0,((P,Q)=>{F&&P&&F(P.status+" "+P.statusText,Q)}))},q.d.prototype._cascadeLoadFiles=function(P,Q,O){let b=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;const F=[];F._internalCount=0;for(let g=0;g<6;g++)this._partialLoadFile(O[g],g,F,Q,b)},q.d.prototype._cascadeLoadImgs=function(P,Q,O,b){let F=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,g=arguments.length>5?arguments[5]:void 0;const m=[];m._internalCount=0;for(let q=0;q<6;q++)this._partialLoadImg(b[q],q,m,P,Q,O,F,g)},q.d.prototype._partialLoadImg=function(P,Q,O,b,F,q){let R=arguments.length>6&&void 0!==arguments[6]?arguments[6]:null,X=arguments.length>7?arguments[7]:void 0;const C=(0,m.c)();(0,g.y)(P,(P=>{O[Q]=P,O._internalCount++,b&&b.removePendingData(C),6===O._internalCount&&q&&q(F,O)}),((P,Q)=>{b&&b.removePendingData(C),R&&R(P,Q)}),b?b.offlineProvider:null,X),b&&b.addPendingData(C)},q.d.prototype.createCubeTextureBase=function(P,Q,O,g){let m=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,q=arguments.length>5&&void 0!==arguments[5]?arguments[5]:null,X=arguments.length>6?arguments[6]:void 0,C=arguments.length>7&&void 0!==arguments[7]?arguments[7]:null,L=arguments.length>8&&void 0!==arguments[8]&&arguments[8],G=arguments.length>9&&void 0!==arguments[9]?arguments[9]:0,A=arguments.length>10&&void 0!==arguments[10]?arguments[10]:0,j=arguments.length>11&&void 0!==arguments[11]?arguments[11]:null,w=arguments.length>12&&void 0!==arguments[12]?arguments[12]:null,W=arguments.length>13&&void 0!==arguments[13]?arguments[13]:null,r=arguments.length>14&&void 0!==arguments[14]&&arguments[14],K=arguments.length>15&&void 0!==arguments[15]?arguments[15]:null;const T=j||new b.b(this,7);T.isCube=!0,T.url=P,T.generateMipMaps=!g,T._lodGenerationScale=G,T._lodGenerationOffset=A,T._useSRGBBuffer=!!r&&this._caps.supportSRGBBuffers&&(this.version>1||this.isWebGPU||!!g),T!==j&&(T.label=P.substring(0,60)),this._doNotHandleContextLost||(T._extension=C,T._files=O,T._buffer=K);const x=P;this._transformTextureUrl&&!j&&(P=this._transformTextureUrl(P));const u=C??function(P){const Q=P.split("?")[0],O=Q.lastIndexOf(".");return O>-1?Q.substring(O).toLowerCase():""}(P),H=(0,R.d)(u),t=(P,Q)=>{T.dispose(),q?q(P,Q):P&&F.d.Warn(P)},B=(b,q)=>{P===x?b&&t(b.status+" "+b.statusText,q):(F.d.Warn(`Failed to load ${P}, falling back to the ${x}`),this.createCubeTextureBase(x,Q,O,!!g,m,t,X,C,L,G,A,T,w,W,r,K))};if(H)H.then((b=>{const F=P=>{w&&w(T,P),b.loadCubeData(P,T,L,m,((P,Q)=>{t(P,Q)}))};K?F(K):O&&6===O.length?b.supportCascades?this._cascadeLoadFiles(Q,(P=>F(P.map((P=>new Uint8Array(P))))),O,t):t("Textures type does not support cascades."):this._loadFile(P,(P=>F(new Uint8Array(P))),void 0,void 0,!0,B)}));else{if(!O||0===O.length)throw new Error("Cannot load cubemap because files were not defined, or the correct loader was not found.");this._cascadeLoadImgs(Q,T,((P,Q)=>{W&&W(P,Q)}),O,t)}return this._internalTexturesCache.push(T),T}},2442:(P,Q,O)=>{O.d(Q,{DDSTools:()=>j});var b=O(778),F=O(561),g=O(2448),m=O(2454);O(2578);const q=131072,R=131072;function X(P){return P.charCodeAt(0)+(P.charCodeAt(1)<<8)+(P.charCodeAt(2)<<16)+(P.charCodeAt(3)<<24)}const C=X("DXT1"),L=X("DXT3"),G=X("DXT5"),A=X("DX10");class j{static GetDDSInfo(P){const Q=new Int32Array(P.buffer,P.byteOffset,31),O=new Int32Array(P.buffer,P.byteOffset,35);let b=1;Q[2]&q&&(b=Math.max(1,Q[7]));const F=Q[21],g=F===A?O[32]:0;let m=0;switch(F){case 113:m=2;break;case 116:m=1;break;case A:if(10===g){m=2;break}if(2===g){m=1;break}}return{width:Q[4],height:Q[3],mipmapCount:b,isFourCC:4===(4&Q[20]),isRGB:64===(64&Q[20]),isLuminance:(Q[20]&R)===R,isCube:512===(512&Q[28]),isCompressed:F===C||F===L||F===G,dxgiFormat:g,textureType:m}}static _GetHalfFloatAsFloatRGBAArrayBuffer(P,Q,O,b,F,g){const q=new Float32Array(b),R=new Uint16Array(F,O);let X=0;for(let C=0;C<Q;C++)for(let Q=0;Q<P;Q++){const O=4*(Q+C*P);q[X]=(0,m.e)(R[O]),q[X+1]=(0,m.e)(R[O+1]),q[X+2]=(0,m.e)(R[O+2]),j.StoreLODInAlphaChannel?q[X+3]=g:q[X+3]=(0,m.e)(R[O+3]),X+=4}return q}static _GetHalfFloatRGBAArrayBuffer(P,Q,O,b,F,g){if(j.StoreLODInAlphaChannel){const q=new Uint16Array(b),R=new Uint16Array(F,O);let X=0;for(let O=0;O<Q;O++)for(let Q=0;Q<P;Q++){const b=4*(Q+O*P);q[X]=R[b],q[X+1]=R[b+1],q[X+2]=R[b+2],q[X+3]=(0,m.j)(g),X+=4}return q}return new Uint16Array(F,O,b)}static _GetFloatRGBAArrayBuffer(P,Q,O,b,F,g){if(j.StoreLODInAlphaChannel){const m=new Float32Array(b),q=new Float32Array(F,O);let R=0;for(let O=0;O<Q;O++)for(let Q=0;Q<P;Q++){const b=4*(Q+O*P);m[R]=q[b],m[R+1]=q[b+1],m[R+2]=q[b+2],m[R+3]=g,R+=4}return m}return new Float32Array(F,O,b)}static _GetFloatAsHalfFloatRGBAArrayBuffer(P,Q,O,b,F,g){const q=new Uint16Array(b),R=new Float32Array(F,O);let X=0;for(let C=0;C<Q;C++)for(let Q=0;Q<P;Q++)q[X]=(0,m.j)(R[X]),q[X+1]=(0,m.j)(R[X+1]),q[X+2]=(0,m.j)(R[X+2]),j.StoreLODInAlphaChannel?q[X+3]=(0,m.j)(g):q[X+3]=(0,m.j)(R[X+3]),X+=4;return q}static _GetFloatAsUIntRGBAArrayBuffer(P,Q,O,F,g,m){const q=new Uint8Array(F),R=new Float32Array(g,O);let X=0;for(let C=0;C<Q;C++)for(let Q=0;Q<P;Q++){const O=4*(Q+C*P);q[X]=255*(0,b.e)(R[O]),q[X+1]=255*(0,b.e)(R[O+1]),q[X+2]=255*(0,b.e)(R[O+2]),j.StoreLODInAlphaChannel?q[X+3]=m:q[X+3]=255*(0,b.e)(R[O+3]),X+=4}return q}static _GetHalfFloatAsUIntRGBAArrayBuffer(P,Q,O,F,g,q){const R=new Uint8Array(F),X=new Uint16Array(g,O);let C=0;for(let L=0;L<Q;L++)for(let Q=0;Q<P;Q++){const O=4*(Q+L*P);R[C]=255*(0,b.e)((0,m.e)(X[O])),R[C+1]=255*(0,b.e)((0,m.e)(X[O+1])),R[C+2]=255*(0,b.e)((0,m.e)(X[O+2])),j.StoreLODInAlphaChannel?R[C+3]=q:R[C+3]=255*(0,b.e)((0,m.e)(X[O+3])),C+=4}return R}static _GetRGBAArrayBuffer(P,Q,O,b,F,g,m,q,R){const X=new Uint8Array(b),C=new Uint8Array(F,O);let L=0;for(let G=0;G<Q;G++)for(let Q=0;Q<P;Q++){const O=4*(Q+G*P);X[L]=C[O+g],X[L+1]=C[O+m],X[L+2]=C[O+q],X[L+3]=C[O+R],L+=4}return X}static _ExtractLongWordOrder(P){return 0===P||255===P||-16777216===P?0:1+j._ExtractLongWordOrder(P>>8)}static _GetRGBArrayBuffer(P,Q,O,b,F,g,m,q){const R=new Uint8Array(b),X=new Uint8Array(F,O);let C=0;for(let L=0;L<Q;L++)for(let Q=0;Q<P;Q++){const O=3*(Q+L*P);R[C]=X[O+g],R[C+1]=X[O+m],R[C+2]=X[O+q],C+=3}return R}static _GetLuminanceArrayBuffer(P,Q,O,b,F){const g=new Uint8Array(b),m=new Uint8Array(F,O);let q=0;for(let R=0;R<Q;R++)for(let Q=0;Q<P;Q++){const O=Q+R*P;g[q]=m[O],q++}return g}static UploadDDSLevels(P,Q,O,b,m,R){let X=arguments.length>6&&void 0!==arguments[6]?arguments[6]:-1,w=arguments.length>7?arguments[7]:void 0,W=!(arguments.length>8&&void 0!==arguments[8])||arguments[8],r=null;b.sphericalPolynomial&&(r=[]);const K=!!P.getCaps().s3tc;Q.generateMipMaps=m;const T=new Int32Array(O.buffer,O.byteOffset,31);let x,u,H,t,B,I,l,M=0,S=0,o=1;if(542327876!==T[0])return void F.d.Error("Invalid magic number in DDS header");if(!b.isFourCC&&!b.isRGB&&!b.isLuminance)return void F.d.Error("Unsupported format, must contain a FourCC, RGB or LUMINANCE code");if(b.isCompressed&&!K)return void F.d.Error("Compressed textures are not supported on this platform.");let z=T[22];t=T[1]+4;let a=!1;if(b.isFourCC)switch(x=T[21],x){case C:o=8,S=33777;break;case L:o=16,S=33778;break;case G:o=16,S=33779;break;case 113:a=!0,z=64;break;case 116:a=!0,z=128;break;case A:{t+=20;let P=!1;switch(b.dxgiFormat){case 10:a=!0,z=64,P=!0;break;case 2:a=!0,z=128,P=!0;break;case 88:b.isRGB=!0,b.isFourCC=!1,z=32,P=!0}if(P)break}default:return void F.d.Error(["Unsupported FourCC code:",(y=x,String.fromCharCode(255&y,y>>8&255,y>>16&255,y>>24&255))])}var y;const c=j._ExtractLongWordOrder(T[23]),h=j._ExtractLongWordOrder(T[24]),V=j._ExtractLongWordOrder(T[25]),s=j._ExtractLongWordOrder(T[26]);a&&(S=P._getRGBABufferInternalSizedFormat(b.textureType)),I=1,T[2]&q&&!1!==m&&(I=Math.max(1,T[7]));const J=w||0,e=P.getCaps();for(let F=J;F<R;F++){for(u=T[4],H=T[3],l=0;l<I;++l){if(-1===X||X===l){const g=-1===X?l:0;if(!b.isCompressed&&b.isFourCC){Q.format=5,M=u*H*4;let b=null;if(P._badOS||P._badDesktopOS||!e.textureHalfFloat&&!e.textureFloat)128===z?(b=j._GetFloatAsUIntRGBAArrayBuffer(u,H,O.byteOffset+t,M,O.buffer,g),r&&0==g&&r.push(j._GetFloatRGBAArrayBuffer(u,H,O.byteOffset+t,M,O.buffer,g))):64===z&&(b=j._GetHalfFloatAsUIntRGBAArrayBuffer(u,H,O.byteOffset+t,M,O.buffer,g),r&&0==g&&r.push(j._GetHalfFloatAsFloatRGBAArrayBuffer(u,H,O.byteOffset+t,M,O.buffer,g))),Q.type=0;else{const P=e.textureFloat&&(W&&e.textureFloatLinearFiltering||!W),F=e.textureHalfFloat&&(W&&e.textureHalfFloatLinearFiltering||!W),m=(128===z||64===z&&!F)&&P?1:(64===z||128===z&&!P)&&F?2:0;let q,R=null;if(128===z)switch(m){case 1:q=j._GetFloatRGBAArrayBuffer,R=null;break;case 2:q=j._GetFloatAsHalfFloatRGBAArrayBuffer,R=j._GetFloatRGBAArrayBuffer;break;case 0:q=j._GetFloatAsUIntRGBAArrayBuffer,R=j._GetFloatRGBAArrayBuffer}else switch(m){case 1:q=j._GetHalfFloatAsFloatRGBAArrayBuffer,R=null;break;case 2:q=j._GetHalfFloatRGBAArrayBuffer,R=j._GetHalfFloatAsFloatRGBAArrayBuffer;break;case 0:q=j._GetHalfFloatAsUIntRGBAArrayBuffer,R=j._GetHalfFloatAsFloatRGBAArrayBuffer}Q.type=m,b=q(u,H,O.byteOffset+t,M,O.buffer,g),r&&0==g&&r.push(R?R(u,H,O.byteOffset+t,M,O.buffer,g):b)}b&&P._uploadDataToTextureDirectly(Q,b,F,g)}else if(b.isRGB)Q.type=0,24===z?(Q.format=4,M=u*H*3,B=j._GetRGBArrayBuffer(u,H,O.byteOffset+t,M,O.buffer,c,h,V),P._uploadDataToTextureDirectly(Q,B,F,g)):(Q.format=5,M=u*H*4,B=j._GetRGBAArrayBuffer(u,H,O.byteOffset+t,M,O.buffer,c,h,V,s),P._uploadDataToTextureDirectly(Q,B,F,g));else if(b.isLuminance){const b=P._getUnpackAlignement(),m=u;M=Math.floor((u+b-1)/b)*b*(H-1)+m,B=j._GetLuminanceArrayBuffer(u,H,O.byteOffset+t,M,O.buffer),Q.format=1,Q.type=0,P._uploadDataToTextureDirectly(Q,B,F,g)}else M=Math.max(4,u)/4*Math.max(4,H)/4*o,B=new Uint8Array(O.buffer,O.byteOffset+t,M),Q.type=0,P._uploadCompressedDataToTextureDirectly(Q,S,u,H,B,F,g)}t+=z?u*H*(z/8):M,u*=.5,H*=.5,u=Math.max(1,u),H=Math.max(1,H)}if(void 0!==w)break}r&&r.length>0?b.sphericalPolynomial=g.c.ConvertCubeMapToSphericalPolynomial({size:T[4],right:r[0],left:r[1],up:r[2],down:r[3],front:r[4],back:r[5],format:5,type:1,gammaSpace:!1}):b.sphericalPolynomial=void 0}}j.StoreLODInAlphaChannel=!1}}]);