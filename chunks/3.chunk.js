"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[3],{10914:(o,i,p)=>{p.r(i),p.d(i,{_DDSTextureLoader:()=>u});var b=p(1431),k=p(1452);class u{constructor(){this.supportCascades=!0}loadCubeData(o,i,p,u){const j=i.getEngine();let z,g=!1,J=1e3;if(Array.isArray(o))for(let b=0;b<o.length;b++){const p=o[b];z=k.e.GetDDSInfo(p),i.width=z.width,i.height=z.height,g=(z.isRGB||z.isLuminance||z.mipmapCount>1)&&i.generateMipMaps,j._unpackFlipY(z.isCompressed),k.e.UploadDDSLevels(j,i,p,z,g,6,-1,b),z.isFourCC||1!==z.mipmapCount?J=z.mipmapCount-1:j.generateMipMapsForCubemap(i)}else{const u=o;z=k.e.GetDDSInfo(u),i.width=z.width,i.height=z.height,p&&(z.sphericalPolynomial=new b.e),g=(z.isRGB||z.isLuminance||z.mipmapCount>1)&&i.generateMipMaps,j._unpackFlipY(z.isCompressed),k.e.UploadDDSLevels(j,i,u,z,g,6),z.isFourCC||1!==z.mipmapCount?J=z.mipmapCount-1:j.generateMipMapsForCubemap(i,!1)}j._setCubeMapTextureParams(i,g,J),i.isReady=!0,i.onLoadedObservable.notifyObservers(i),i.onLoadedObservable.clear(),u&&u({isDDS:!0,width:i.width,info:z,data:o,texture:i})}loadData(o,i,p){const b=k.e.GetDDSInfo(o),u=(b.isRGB||b.isLuminance||b.mipmapCount>1)&&i.generateMipMaps&&Math.max(b.width,b.height)>>b.mipmapCount-1===1;p(b.width,b.height,u,b.isFourCC,(()=>{k.e.UploadDDSLevels(i.getEngine(),i,o,b,u,1)}))}}}}]);