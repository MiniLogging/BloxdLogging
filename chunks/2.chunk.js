"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[2],{1987:(B,o,e)=>{e.r(o),e.d(o,{_DDSTextureLoader:()=>f});var k=e(1996),d=e(2009);class f{constructor(){this.supportCascades=!0}loadCubeData(B,o,e,f){const J=o.getEngine();let Z,t=!1,h=1e3;if(Array.isArray(B))for(let k=0;k<B.length;k++){const e=B[k];Z=d.c.GetDDSInfo(e),o.width=Z.width,o.height=Z.height,t=(Z.isRGB||Z.isLuminance||Z.mipmapCount>1)&&o.generateMipMaps,J._unpackFlipY(Z.isCompressed),d.c.UploadDDSLevels(J,o,e,Z,t,6,-1,k),Z.isFourCC||1!==Z.mipmapCount?h=Z.mipmapCount-1:J.generateMipMapsForCubemap(o)}else{const f=B;Z=d.c.GetDDSInfo(f),o.width=Z.width,o.height=Z.height,e&&(Z.sphericalPolynomial=new k.g),t=(Z.isRGB||Z.isLuminance||Z.mipmapCount>1)&&o.generateMipMaps,J._unpackFlipY(Z.isCompressed),d.c.UploadDDSLevels(J,o,f,Z,t,6),Z.isFourCC||1!==Z.mipmapCount?h=Z.mipmapCount-1:J.generateMipMapsForCubemap(o,!1)}J._setCubeMapTextureParams(o,t,h),o.isReady=!0,o.onLoadedObservable.notifyObservers(o),o.onLoadedObservable.clear(),f&&f({isDDS:!0,width:o.width,info:Z,data:B,texture:o})}loadData(B,o,e){const k=d.c.GetDDSInfo(B),f=(k.isRGB||k.isLuminance||k.mipmapCount>1)&&o.generateMipMaps&&Math.max(k.width,k.height)>>k.mipmapCount-1===1;e(k.width,k.height,f,k.isFourCC,(()=>{d.c.UploadDDSLevels(o.getEngine(),o,B,k,f,1)}))}}}}]);