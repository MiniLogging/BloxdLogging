"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[75],{14094:(n,k,T)=>{T.r(k),T.d(k,{FlowGraphThrottleBlock:()=>G});var c=T(12831),K=T(12875),Q=T(675);class G extends K.c{constructor(n){super(n),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",c.w),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",c.w,NaN)}_execute(n,k){if(k===this.reset)return this.lastRemainingTime.setValue(NaN,n),n._setExecutionVariable(this,"lastRemainingTime",NaN),void n._setExecutionVariable(this,"timestamp",0);const T=this.duration.getValue(n);if(T<=0||isNaN(T)||!isFinite(T))return this._reportError(n,"Invalid duration in Throttle block");const c=n._getExecutionVariable(this,"lastRemainingTime",NaN),K=Date.now();if(isNaN(c))return this.lastRemainingTime.setValue(0,n),n._setExecutionVariable(this,"lastRemainingTime",0),n._setExecutionVariable(this,"timestamp",K),this.out._activateSignal(n);{const k=K-n._getExecutionVariable(this,"timestamp",0),c=1e3*T;if(c<=k)return this.lastRemainingTime.setValue(0,n),n._setExecutionVariable(this,"lastRemainingTime",0),n._setExecutionVariable(this,"timestamp",K),this.out._activateSignal(n);{const T=c-k;this.lastRemainingTime.setValue(T/1e3,n),n._setExecutionVariable(this,"lastRemainingTime",T)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,Q.f)("FlowGraphThrottleBlock",G)}}]);