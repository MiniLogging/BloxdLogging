"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[75],{14091:(P,Q,O)=>{O.r(Q),O.d(Q,{FlowGraphThrottleBlock:()=>m});var b=O(12871),F=O(12922),g=O(696);class m extends F.b{constructor(P){super(P),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",b.o),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",b.o,NaN)}_execute(P,Q){if(Q===this.reset)return this.lastRemainingTime.setValue(NaN,P),P._setExecutionVariable(this,"lastRemainingTime",NaN),void P._setExecutionVariable(this,"timestamp",0);const O=this.duration.getValue(P);if(O<=0||isNaN(O)||!isFinite(O))return this._reportError(P,"Invalid duration in Throttle block");const b=P._getExecutionVariable(this,"lastRemainingTime",NaN),F=Date.now();if(isNaN(b))return this.lastRemainingTime.setValue(0,P),P._setExecutionVariable(this,"lastRemainingTime",0),P._setExecutionVariable(this,"timestamp",F),this.out._activateSignal(P);{const Q=F-P._getExecutionVariable(this,"timestamp",0),b=1e3*O;if(b<=Q)return this.lastRemainingTime.setValue(0,P),P._setExecutionVariable(this,"lastRemainingTime",0),P._setExecutionVariable(this,"timestamp",F),this.out._activateSignal(P);{const O=b-Q;this.lastRemainingTime.setValue(O/1e3,P),P._setExecutionVariable(this,"lastRemainingTime",O)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,g.f)("FlowGraphThrottleBlock",m)}}]);