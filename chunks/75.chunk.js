"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[75],{13888:(A,X,s)=>{s.r(X),s.d(X,{FlowGraphThrottleBlock:()=>g});var N=s(12677),f=s(12724),E=s(616);class g extends f.e{constructor(A){super(A),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",N.n),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",N.n,NaN)}_execute(A,X){if(X===this.reset)return this.lastRemainingTime.setValue(NaN,A),A._setExecutionVariable(this,"lastRemainingTime",NaN),void A._setExecutionVariable(this,"timestamp",0);const s=this.duration.getValue(A);if(s<=0||isNaN(s)||!isFinite(s))return this._reportError(A,"Invalid duration in Throttle block");const N=A._getExecutionVariable(this,"lastRemainingTime",NaN),f=Date.now();if(isNaN(N))return this.lastRemainingTime.setValue(0,A),A._setExecutionVariable(this,"lastRemainingTime",0),A._setExecutionVariable(this,"timestamp",f),this.out._activateSignal(A);{const X=f-A._getExecutionVariable(this,"timestamp",0),N=1e3*s;if(N<=X)return this.lastRemainingTime.setValue(0,A),A._setExecutionVariable(this,"lastRemainingTime",0),A._setExecutionVariable(this,"timestamp",f),this.out._activateSignal(A);{const s=N-X;this.lastRemainingTime.setValue(s/1e3,A),A._setExecutionVariable(this,"lastRemainingTime",s)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,E.f)("FlowGraphThrottleBlock",g)}}]);