"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[75],{14199:(u,F,z)=>{z.r(F),z.d(F,{FlowGraphThrottleBlock:()=>c});var p=z(12952),b=z(13003),R=z(668);class c extends b.e{constructor(u){super(u),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",p.t),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",p.t,NaN)}_execute(u,F){if(F===this.reset)return this.lastRemainingTime.setValue(NaN,u),u._setExecutionVariable(this,"lastRemainingTime",NaN),void u._setExecutionVariable(this,"timestamp",0);const z=this.duration.getValue(u);if(z<=0||isNaN(z)||!isFinite(z))return this._reportError(u,"Invalid duration in Throttle block");const p=u._getExecutionVariable(this,"lastRemainingTime",NaN),b=Date.now();if(isNaN(p))return this.lastRemainingTime.setValue(0,u),u._setExecutionVariable(this,"lastRemainingTime",0),u._setExecutionVariable(this,"timestamp",b),this.out._activateSignal(u);{const F=b-u._getExecutionVariable(this,"timestamp",0),p=1e3*z;if(p<=F)return this.lastRemainingTime.setValue(0,u),u._setExecutionVariable(this,"lastRemainingTime",0),u._setExecutionVariable(this,"timestamp",b),this.out._activateSignal(u);{const z=p-F;this.lastRemainingTime.setValue(z/1e3,u),u._setExecutionVariable(this,"lastRemainingTime",z)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,R.h)("FlowGraphThrottleBlock",c)}}]);