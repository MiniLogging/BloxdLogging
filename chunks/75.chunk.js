"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[75],{13812:(W,F,c)=>{c.r(F),c.d(F,{FlowGraphThrottleBlock:()=>w});var T=c(12517),Y=c(12566),Z=c(642);class w extends Y.c{constructor(W){super(W),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",T.n),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",T.n,NaN)}_execute(W,F){if(F===this.reset)return this.lastRemainingTime.setValue(NaN,W),W._setExecutionVariable(this,"lastRemainingTime",NaN),void W._setExecutionVariable(this,"timestamp",0);const c=this.duration.getValue(W);if(c<=0||isNaN(c)||!isFinite(c))return this._reportError(W,"Invalid duration in Throttle block");const T=W._getExecutionVariable(this,"lastRemainingTime",NaN),Y=Date.now();if(isNaN(T))return this.lastRemainingTime.setValue(0,W),W._setExecutionVariable(this,"lastRemainingTime",0),W._setExecutionVariable(this,"timestamp",Y),this.out._activateSignal(W);{const F=Y-W._getExecutionVariable(this,"timestamp",0),T=1e3*c;if(T<=F)return this.lastRemainingTime.setValue(0,W),W._setExecutionVariable(this,"lastRemainingTime",0),W._setExecutionVariable(this,"timestamp",Y),this.out._activateSignal(W);{const c=T-F;this.lastRemainingTime.setValue(c/1e3,W),W._setExecutionVariable(this,"lastRemainingTime",c)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,Z.h)("FlowGraphThrottleBlock",w)}}]);