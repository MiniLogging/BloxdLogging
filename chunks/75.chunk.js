"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[75],{14058:(U,M,b)=>{b.r(M),b.d(M,{FlowGraphThrottleBlock:()=>W});var a=b(12775),A=b(12830),H=b(609);class W extends A.e{constructor(U){super(U),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",a.t),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",a.t,NaN)}_execute(U,M){if(M===this.reset)return this.lastRemainingTime.setValue(NaN,U),U._setExecutionVariable(this,"lastRemainingTime",NaN),void U._setExecutionVariable(this,"timestamp",0);const b=this.duration.getValue(U);if(b<=0||isNaN(b)||!isFinite(b))return this._reportError(U,"Invalid duration in Throttle block");const a=U._getExecutionVariable(this,"lastRemainingTime",NaN),A=Date.now();if(isNaN(a))return this.lastRemainingTime.setValue(0,U),U._setExecutionVariable(this,"lastRemainingTime",0),U._setExecutionVariable(this,"timestamp",A),this.out._activateSignal(U);{const M=A-U._getExecutionVariable(this,"timestamp",0),a=1e3*b;if(a<=M)return this.lastRemainingTime.setValue(0,U),U._setExecutionVariable(this,"lastRemainingTime",0),U._setExecutionVariable(this,"timestamp",A),this.out._activateSignal(U);{const b=a-M;this.lastRemainingTime.setValue(b/1e3,U),U._setExecutionVariable(this,"lastRemainingTime",b)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,H.i)("FlowGraphThrottleBlock",W)}}]);