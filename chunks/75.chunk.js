"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[75],{13928:(J,T,b)=>{b.r(T),b.d(T,{FlowGraphThrottleBlock:()=>B});var q=b(12603),t=b(12647),j=b(639);class B extends t.c{constructor(J){super(J),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",q.r),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",q.r,NaN)}_execute(J,T){if(T===this.reset)return this.lastRemainingTime.setValue(NaN,J),J._setExecutionVariable(this,"lastRemainingTime",NaN),void J._setExecutionVariable(this,"timestamp",0);const b=this.duration.getValue(J);if(b<=0||isNaN(b)||!isFinite(b))return this._reportError(J,"Invalid duration in Throttle block");const q=J._getExecutionVariable(this,"lastRemainingTime",NaN),t=Date.now();if(isNaN(q))return this.lastRemainingTime.setValue(0,J),J._setExecutionVariable(this,"lastRemainingTime",0),J._setExecutionVariable(this,"timestamp",t),this.out._activateSignal(J);{const T=t-J._getExecutionVariable(this,"timestamp",0),q=1e3*b;if(q<=T)return this.lastRemainingTime.setValue(0,J),J._setExecutionVariable(this,"lastRemainingTime",0),J._setExecutionVariable(this,"timestamp",t),this.out._activateSignal(J);{const b=q-T;this.lastRemainingTime.setValue(b/1e3,J),J._setExecutionVariable(this,"lastRemainingTime",b)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,j.g)("FlowGraphThrottleBlock",B)}}]);