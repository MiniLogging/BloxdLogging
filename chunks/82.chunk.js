"use strict";(self.z22hkk7o33f=self.z22hkk7o33f||[]).push([[82],{15621:(U,G,C)=>{C.r(G),C.d(G,{FlowGraphInterpolationBlock:()=>E});var L=C(14154),X=C(14134),l=C(13392),t=C(12850);class E extends L.b{constructor(){var U,G;let C=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super(C),this.keyFrames=[];const L="string"===typeof(null===C||void 0===C?void 0:C.animationType)?(0,X.V)(C.animationType):(0,X.S)(null!==(U=null===C||void 0===C?void 0:C.animationType)&&void 0!==U?U:0),l=null!==(G=null===C||void 0===C?void 0:C.keyFramesCount)&&void 0!==G?G:1,t=this.registerDataInput("duration_0",X.y,0),E=this.registerDataInput("value_0",L);this.keyFrames.push({duration:t,value:E});for(let K=1;K<l+1;K++){const U=this.registerDataInput("duration_".concat(K),X.y,K===l?C.duration:void 0),G=this.registerDataInput("value_".concat(K),L);this.keyFrames.push({duration:U,value:G})}this.initialValue=this.keyFrames[0].value,this.endValue=this.keyFrames[l].value,this.easingFunction=this.registerDataInput("easingFunction",X.c),this.animation=this.registerDataOutput("animation",X.c),this.propertyName=this.registerDataInput("propertyName",X.c,null===C||void 0===C?void 0:C.propertyName),this.customBuildAnimation=this.registerDataInput("customBuildAnimation",X.c)}_updateOutputs(U){const G=U._getGlobalContextVariable("interpolationAnimations",[]),C=this.propertyName.getValue(U),L=this.easingFunction.getValue(U),X=this._createAnimation(U,C,L);if(this.animation.setValue(X,U),Array.isArray(X))for(const l of X)G.push(l.uniqueId);else G.push(X.uniqueId);U._setGlobalContextVariable("interpolationAnimations",G)}_createAnimation(U,G,C){var L,X;const t=this.initialValue.richType,E=[],K=this.initialValue.getValue(U)||t.defaultValue;E.push({frame:0,value:K});const P=null!==(L=null===(X=this.config)||void 0===X?void 0:X.numberOfKeyFrames)&&void 0!==L?L:1;for(let l=1;l<P+1;l++){var O,T;const G=null===(O=this.keyFrames[l].duration)||void 0===O?void 0:O.getValue(U);let C=null===(T=this.keyFrames[l].value)||void 0===T?void 0:T.getValue(U);l===P-1&&(C=C||t.defaultValue),void 0!==G&&C&&E.push({frame:60*G,value:C})}const D=this.customBuildAnimation.getValue(U);if(D)return D(null,null,U)(E,60,t.animationType,C);if("string"===typeof G){const U=l.d.CreateAnimation(G,t.animationType,60,C);return U.setKeys(E),[U]}return G.map((U=>{const G=l.d.CreateAnimation(U,t.animationType,60,C);return G.setKeys(E),G}))}getClassName(){return"FlowGraphInterpolationBlock"}}(0,t.e)("FlowGraphInterpolationBlock",E)}}]);