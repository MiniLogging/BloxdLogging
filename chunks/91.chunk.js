"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[91],{14178:(P,Q,O)=>{O.r(Q),O.d(Q,{FlowGraphSetVariableBlock:()=>m});var b=O(696),F=O(12922),g=O(12871);class m extends F.b{constructor(P){if(super(P),!P.variable&&!P.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(P.variables&&P.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(P.variables)for(const Q of P.variables)this.registerDataInput(Q,g.d);else this.registerDataInput("value",g.d)}_execute(P,Q){var O,b;if(null!==(O=this.config)&&void 0!==O&&O.variables)for(const F of this.config.variables)this._saveVariable(P,F);else this._saveVariable(P,null===(b=this.config)||void 0===b?void 0:b.variable,"value");this.out._activateSignal(P)}_saveVariable(P,Q,O){var b;const F=P._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const m of F){const O=P.assetsContext.animationGroups.find((P=>P.uniqueId==m));if(O)for(const b of O.targetedAnimations)if(b.target===P&&b.animation.targetProperty===Q){O.stop();const Q=F.indexOf(m);Q>-1&&F.splice(Q,1),P._setGlobalContextVariable("currentlyRunningAnimationGroups",F);break}}const g=null===(b=this.getDataInput(O||Q))||void 0===b?void 0:b.getValue(P);P.setVariable(Q,g)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(P){var Q;super.serialize(P),P.config.variable=null===(Q=this.config)||void 0===Q?void 0:Q.variable}}(0,b.f)("FlowGraphSetVariableBlock",m)}}]);