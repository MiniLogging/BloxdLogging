"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[91],{14149:(U,M,b)=>{b.r(M),b.d(M,{FlowGraphSetVariableBlock:()=>W});var a=b(609),A=b(12830),H=b(12775);class W extends A.e{constructor(U){if(super(U),!U.variable&&!U.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(U.variables&&U.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(U.variables)for(const M of U.variables)this.registerDataInput(M,H.c);else this.registerDataInput("value",H.c)}_execute(U,M){var b,a;if(null!==(b=this.config)&&void 0!==b&&b.variables)for(const A of this.config.variables)this._saveVariable(U,A);else this._saveVariable(U,null===(a=this.config)||void 0===a?void 0:a.variable,"value");this.out._activateSignal(U)}_saveVariable(U,M,b){var a;const A=U._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const W of A){const b=U.assetsContext.animationGroups.find((U=>U.uniqueId==W));if(b)for(const a of b.targetedAnimations)if(a.target===U&&a.animation.targetProperty===M){b.stop();const M=A.indexOf(W);M>-1&&A.splice(M,1),U._setGlobalContextVariable("currentlyRunningAnimationGroups",A);break}}const H=null===(a=this.getDataInput(b||M))||void 0===a?void 0:a.getValue(U);U.setVariable(M,H)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(U){var M;super.serialize(U),U.config.variable=null===(M=this.config)||void 0===M?void 0:M.variable}}(0,a.i)("FlowGraphSetVariableBlock",W)}}]);