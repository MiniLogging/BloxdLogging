"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[91],{14189:(n,k,T)=>{T.r(k),T.d(k,{FlowGraphSetVariableBlock:()=>G});var c=T(675),K=T(12875),Q=T(12831);class G extends K.c{constructor(n){if(super(n),!n.variable&&!n.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(n.variables&&n.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(n.variables)for(const k of n.variables)this.registerDataInput(k,Q.e);else this.registerDataInput("value",Q.e)}_execute(n,k){var T,c;if(null!==(T=this.config)&&void 0!==T&&T.variables)for(const K of this.config.variables)this._saveVariable(n,K);else this._saveVariable(n,null===(c=this.config)||void 0===c?void 0:c.variable,"value");this.out._activateSignal(n)}_saveVariable(n,k,T){var c;const K=n._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const G of K){const T=n.assetsContext.animationGroups.find((n=>n.uniqueId==G));if(T)for(const c of T.targetedAnimations)if(c.target===n&&c.animation.targetProperty===k){T.stop();const k=K.indexOf(G);k>-1&&K.splice(k,1),n._setGlobalContextVariable("currentlyRunningAnimationGroups",K);break}}const Q=null===(c=this.getDataInput(T||k))||void 0===c?void 0:c.getValue(n);n.setVariable(k,Q)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(n){var k;super.serialize(n),n.config.variable=null===(k=this.config)||void 0===k?void 0:k.variable}}(0,c.f)("FlowGraphSetVariableBlock",G)}}]);