"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[91],{14018:(J,T,b)=>{b.r(T),b.d(T,{FlowGraphSetVariableBlock:()=>B});var q=b(639),t=b(12647),j=b(12603);class B extends t.c{constructor(J){if(super(J),!J.variable&&!J.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(J.variables&&J.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(J.variables)for(const T of J.variables)this.registerDataInput(T,j.c);else this.registerDataInput("value",j.c)}_execute(J,T){var b,q;if(null!==(b=this.config)&&void 0!==b&&b.variables)for(const t of this.config.variables)this._saveVariable(J,t);else this._saveVariable(J,null===(q=this.config)||void 0===q?void 0:q.variable,"value");this.out._activateSignal(J)}_saveVariable(J,T,b){var q;const t=J._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const B of t){const b=J.assetsContext.animationGroups.find((J=>J.uniqueId==B));if(b)for(const q of b.targetedAnimations)if(q.target===J&&q.animation.targetProperty===T){b.stop();const T=t.indexOf(B);T>-1&&t.splice(T,1),J._setGlobalContextVariable("currentlyRunningAnimationGroups",t);break}}const j=null===(q=this.getDataInput(b||T))||void 0===q?void 0:q.getValue(J);J.setVariable(T,j)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(J){var T;super.serialize(J),J.config.variable=null===(T=this.config)||void 0===T?void 0:T.variable}}(0,q.g)("FlowGraphSetVariableBlock",B)}}]);