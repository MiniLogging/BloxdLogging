"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[93],{14261:(t,q,S)=>{S.r(q),S.d(q,{FlowGraphConsoleLogBlock:()=>r});var o=S(12981),B=S(12927),z=S(622),L=S(496);class r extends o.d{constructor(t){if(super(t),this.message=this.registerDataInput("message",B.b),this.logType=this.registerDataInput("logType",B.b,"log"),null!==t&&void 0!==t&&t.messageTemplate){const q=this._getTemplateMatches(t.messageTemplate);for(const t of q)this.registerDataInput(t,B.b)}}_execute(t){const q=this.logType.getValue(t),S=this._getMessageValue(t);"warn"===q?L.c.Warn(S):"error"===q?L.c.Error(S):L.c.Log(S),this.out._activateSignal(t)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(t){var q;if(null!==(q=this.config)&&void 0!==q&&q.messageTemplate){let q=this.config.messageTemplate;const o=this._getTemplateMatches(q);for(const B of o){var S;const o=null===(S=this.getDataInput(B))||void 0===S?void 0:S.getValue(t);void 0!==o&&(q=q.replace(new RegExp(`\\{${B}\\}`,"g"),o.toString()))}return q}return this.message.getValue(t)}_getTemplateMatches(t){const q=/\{([^}]+)\}/g,S=[];let o;for(;null!==(o=q.exec(t));)S.push(o[1]);return S}}(0,z.c)("FlowGraphConsoleLogBlock",r)}}]);