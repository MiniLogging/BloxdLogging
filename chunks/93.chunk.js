"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[93],{14569:(R,x,H)=>{H.r(x),H.d(x,{FlowGraphConsoleLogBlock:()=>D});var k=H(13301),c=H(13246),t=H(610),A=H(493);class D extends k.d{constructor(R){if(super(R),this.message=this.registerDataInput("message",c.b),this.logType=this.registerDataInput("logType",c.b,"log"),null!==R&&void 0!==R&&R.messageTemplate){const x=this._getTemplateMatches(R.messageTemplate);for(const R of x)this.registerDataInput(R,c.b)}}_execute(R){const x=this.logType.getValue(R),H=this._getMessageValue(R);"warn"===x?A.c.Warn(H):"error"===x?A.c.Error(H):A.c.Log(H),this.out._activateSignal(R)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(R){var x;if(null!==(x=this.config)&&void 0!==x&&x.messageTemplate){let x=this.config.messageTemplate;const k=this._getTemplateMatches(x);for(const c of k){var H;const k=null===(H=this.getDataInput(c))||void 0===H?void 0:H.getValue(R);void 0!==k&&(x=x.replace(new RegExp(`\\{${c}\\}`,"g"),k.toString()))}return x}return this.message.getValue(R)}_getTemplateMatches(R){const x=/\{([^}]+)\}/g,H=[];let k;for(;null!==(k=x.exec(R));)H.push(k[1]);return H}}(0,t.h)("FlowGraphConsoleLogBlock",D)}}]);