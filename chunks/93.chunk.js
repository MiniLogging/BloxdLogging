"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[93],{14295:(v,d,Q)=>{Q.r(d),Q.d(d,{FlowGraphConsoleLogBlock:()=>F});var n=Q(12966),T=Q(12908),L=Q(591),e=Q(482);class F extends n.d{constructor(v){if(super(v),this.message=this.registerDataInput("message",T.c),this.logType=this.registerDataInput("logType",T.c,"log"),null!==v&&void 0!==v&&v.messageTemplate){const d=this._getTemplateMatches(v.messageTemplate);for(const v of d)this.registerDataInput(v,T.c)}}_execute(v){const d=this.logType.getValue(v),Q=this._getMessageValue(v);"warn"===d?e.d.Warn(Q):"error"===d?e.d.Error(Q):e.d.Log(Q),this.out._activateSignal(v)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(v){var d;if(null!==(d=this.config)&&void 0!==d&&d.messageTemplate){let d=this.config.messageTemplate;const n=this._getTemplateMatches(d);for(const T of n){var Q;const n=null===(Q=this.getDataInput(T))||void 0===Q?void 0:Q.getValue(v);void 0!==n&&(d=d.replace(new RegExp(`\\{${T}\\}`,"g"),n.toString()))}return d}return this.message.getValue(v)}_getTemplateMatches(v){const d=/\{([^}]+)\}/g,Q=[];let n;for(;null!==(n=d.exec(v));)Q.push(n[1]);return Q}}(0,L.f)("FlowGraphConsoleLogBlock",F)}}]);