"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[93],{13854:(L,j,P)=>{P.r(j),P.d(j,{FlowGraphConsoleLogBlock:()=>u});var A=P(12554),R=P(12510),o=P(606),Y=P(490);class u extends A.b{constructor(L){if(super(L),this.message=this.registerDataInput("message",R.d),this.logType=this.registerDataInput("logType",R.d,"log"),null!==L&&void 0!==L&&L.messageTemplate){const j=this._getTemplateMatches(L.messageTemplate);for(const L of j)this.registerDataInput(L,R.d)}}_execute(L){const j=this.logType.getValue(L),P=this._getMessageValue(L);"warn"===j?Y.e.Warn(P):"error"===j?Y.e.Error(P):Y.e.Log(P),this.out._activateSignal(L)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(L){var j;if(null!==(j=this.config)&&void 0!==j&&j.messageTemplate){let j=this.config.messageTemplate;const A=this._getTemplateMatches(j);for(const R of A){var P;const A=null===(P=this.getDataInput(R))||void 0===P?void 0:P.getValue(L);void 0!==A&&(j=j.replace(new RegExp(`\\{${R}\\}`,"g"),A.toString()))}return j}return this.message.getValue(L)}_getTemplateMatches(L){const j=/\{([^}]+)\}/g,P=[];let A;for(;null!==(A=j.exec(L));)P.push(A[1]);return P}}(0,o.h)("FlowGraphConsoleLogBlock",u)}}]);