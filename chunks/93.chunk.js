"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[93],{14140:(c,b,A)=>{A.r(b),A.d(b,{FlowGraphConsoleLogBlock:()=>s});var o=A(12813),t=A(12763),n=A(633),h=A(531);class s extends o.d{constructor(c){if(super(c),this.message=this.registerDataInput("message",t.e),this.logType=this.registerDataInput("logType",t.e,"log"),null!==c&&void 0!==c&&c.messageTemplate){const b=this._getTemplateMatches(c.messageTemplate);for(const c of b)this.registerDataInput(c,t.e)}}_execute(c){const b=this.logType.getValue(c),A=this._getMessageValue(c);"warn"===b?h.c.Warn(A):"error"===b?h.c.Error(A):h.c.Log(A),this.out._activateSignal(c)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(c){var b;if(null!==(b=this.config)&&void 0!==b&&b.messageTemplate){let b=this.config.messageTemplate;const o=this._getTemplateMatches(b);for(const t of o){var A;const o=null===(A=this.getDataInput(t))||void 0===A?void 0:A.getValue(c);void 0!==o&&(b=b.replace(new RegExp(`\\{${t}\\}`,"g"),o.toString()))}return b}return this.message.getValue(c)}_getTemplateMatches(c){const b=/\{([^}]+)\}/g,A=[];let o;for(;null!==(o=b.exec(c));)A.push(o[1]);return A}}(0,n.d)("FlowGraphConsoleLogBlock",s)}}]);