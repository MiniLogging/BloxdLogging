"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[93],{14072:(U,W,l)=>{l.r(W),l.d(W,{FlowGraphConsoleLogBlock:()=>B});var M=l(12766),t=l(12704),L=l(655),p=l(512);class B extends M.e{constructor(U){if(super(U),this.message=this.registerDataInput("message",t.d),this.logType=this.registerDataInput("logType",t.d,"log"),null!==U&&void 0!==U&&U.messageTemplate){const W=this._getTemplateMatches(U.messageTemplate);for(const U of W)this.registerDataInput(U,t.d)}}_execute(U){const W=this.logType.getValue(U),l=this._getMessageValue(U);"warn"===W?p.b.Warn(l):"error"===W?p.b.Error(l):p.b.Log(l),this.out._activateSignal(U)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(U){var W;if(null!==(W=this.config)&&void 0!==W&&W.messageTemplate){let W=this.config.messageTemplate;const M=this._getTemplateMatches(W);for(const t of M){var l;const M=null===(l=this.getDataInput(t))||void 0===l?void 0:l.getValue(U);void 0!==M&&(W=W.replace(new RegExp(`\\{${t}\\}`,"g"),M.toString()))}return W}return this.message.getValue(U)}_getTemplateMatches(U){const W=/\{([^}]+)\}/g,l=[];let M;for(;null!==(M=W.exec(U));)l.push(M[1]);return l}}(0,L.f)("FlowGraphConsoleLogBlock",B)}}]);