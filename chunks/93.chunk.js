"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[93],{14162:(Z,U,n)=>{n.r(U),n.d(U,{FlowGraphConsoleLogBlock:()=>V});var i=n(12861),B=n(12826),l=n(633),H=n(513);class V extends i.e{constructor(Z){if(super(Z),this.message=this.registerDataInput("message",B.b),this.logType=this.registerDataInput("logType",B.b,"log"),null!==Z&&void 0!==Z&&Z.messageTemplate){const U=this._getTemplateMatches(Z.messageTemplate);for(const Z of U)this.registerDataInput(Z,B.b)}}_execute(Z){const U=this.logType.getValue(Z),n=this._getMessageValue(Z);"warn"===U?H.c.Warn(n):"error"===U?H.c.Error(n):H.c.Log(n),this.out._activateSignal(Z)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(Z){var U;if(null!==(U=this.config)&&void 0!==U&&U.messageTemplate){let U=this.config.messageTemplate;const i=this._getTemplateMatches(U);for(const B of i){var n;const i=null===(n=this.getDataInput(B))||void 0===n?void 0:n.getValue(Z);void 0!==i&&(U=U.replace(new RegExp(`\\{${B}\\}`,"g"),i.toString()))}return U}return this.message.getValue(Z)}_getTemplateMatches(Z){const U=/\{([^}]+)\}/g,n=[];let i;for(;null!==(i=U.exec(Z));)n.push(i[1]);return n}}(0,l.g)("FlowGraphConsoleLogBlock",V)}}]);