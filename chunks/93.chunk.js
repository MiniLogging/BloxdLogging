"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[93],{14425:(Q,X,C)=>{C.r(X),C.d(X,{FlowGraphConsoleLogBlock:()=>O});var l=C(13120),h=C(13063),M=C(620),f=C(501);class O extends l.c{constructor(Q){if(super(Q),this.message=this.registerDataInput("message",h.d),this.logType=this.registerDataInput("logType",h.d,"log"),null!==Q&&void 0!==Q&&Q.messageTemplate){const X=this._getTemplateMatches(Q.messageTemplate);for(const Q of X)this.registerDataInput(Q,h.d)}}_execute(Q){const X=this.logType.getValue(Q),C=this._getMessageValue(Q);"warn"===X?f.c.Warn(C):"error"===X?f.c.Error(C):f.c.Log(C),this.out._activateSignal(Q)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(Q){var X;if(null!==(X=this.config)&&void 0!==X&&X.messageTemplate){let X=this.config.messageTemplate;const l=this._getTemplateMatches(X);for(const h of l){var C;const l=null===(C=this.getDataInput(h))||void 0===C?void 0:C.getValue(Q);void 0!==l&&(X=X.replace(new RegExp(`\\{${h}\\}`,"g"),l.toString()))}return X}return this.message.getValue(Q)}_getTemplateMatches(Q){const X=/\{([^}]+)\}/g,C=[];let l;for(;null!==(l=X.exec(Q));)C.push(l[1]);return C}}(0,M.g)("FlowGraphConsoleLogBlock",O)}}]);