"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[73],{14041:(c,b,A)=>{A.r(b),A.d(b,{FlowGraphAngleBetweenBlock:()=>z,FlowGraphAxisAngleFromQuaternionBlock:()=>D,FlowGraphConjugateBlock:()=>r,FlowGraphCrossBlock:()=>y,FlowGraphDotBlock:()=>V,FlowGraphLengthBlock:()=>k,FlowGraphNormalizeBlock:()=>E,FlowGraphQuaternionFromAxisAngleBlock:()=>Y,FlowGraphQuaternionFromDirectionsBlock:()=>f,FlowGraphRotate2DBlock:()=>j,FlowGraphRotate3DBlock:()=>F,FlowGraphTransformBlock:()=>W,FlowGraphTransformCoordinatesBlock:()=>d});var o=A(12789),t=A(12763),n=A(633),h=A(14018),s=A(14034),L=A(688),C=A(12801),J=A(12472);const X="cachedOperationAxis",R="cachedOperationAngle",N="cachedExecutionId";class k extends s.b{constructor(c){super(t.e,t.t,(c=>this._polymorphicLength(c)),"FlowGraphLengthBlock",c)}_polymorphicLength(c){switch((0,C.k)(c)){case"Vector2":case"ak":case"Vector4":case"Quaternion":return c.length();default:throw new Error(`Cannot compute length of value ${c}`)}}}(0,n.d)("FlowGraphLengthBlock",k);class E extends s.b{constructor(c){super(t.e,t.e,(c=>this._polymorphicNormalize(c)),"FlowGraphNormalizeBlock",c)}_polymorphicNormalize(c){var b;let A;switch((0,C.k)(c)){case"Vector2":case"ak":case"Vector4":case"Quaternion":if(A=c.normalizeToNew(),null!==(b=this.config)&&void 0!==b&&b.nanOnZeroLength){0===c.length()&&A.bk(NaN)}return A;default:throw new Error(`Cannot normalize value ${c}`)}}}(0,n.d)("FlowGraphNormalizeBlock",E);class V extends h.c{constructor(c){super(t.e,t.e,t.t,((c,b)=>this._polymorphicDot(c,b)),"FlowGraphDotBlock",c)}_polymorphicDot(c,b){switch((0,C.k)(c)){case"Vector2":case"ak":case"Vector4":case"Quaternion":return c.dot(b);default:throw new Error(`Cannot get dot product of ${c} and ${b}`)}}}(0,n.d)("FlowGraphDotBlock",V);class y extends h.c{constructor(c){super(t.D,t.D,t.D,((c,b)=>L.k.Cross(c,b)),"FlowGraphCrossBlock",c)}}(0,n.d)("FlowGraphCrossBlock",y);class j extends h.c{constructor(c){super(t.C,t.t,t.C,((c,b)=>c.rotate(b)),"FlowGraphRotate2DBlock",c)}}(0,n.d)("FlowGraphRotate2DBlock",j);class F extends h.c{constructor(c){super(t.D,t.v,t.D,((c,b)=>c.applyRotationQuaternion(b)),"FlowGraphRotate3DBlock",c)}}function M(c,b){switch((0,C.k)(c)){case"Vector2":case"ak":return b.transformVector(c);case"Vector4":return new L.o(c.x*b.m[0]+c.y*b.m[1]+c.z*b.m[2]+c.w*b.m[3],c.x*b.m[4]+c.y*b.m[5]+c.z*b.m[6]+c.w*b.m[7],c.x*b.m[8]+c.y*b.m[9]+c.z*b.m[10]+c.w*b.m[11],c.x*b.m[12]+c.y*b.m[13]+c.z*b.m[14]+c.w*b.m[15]);default:throw new Error(`Cannot transform value ${c}`)}}(0,n.d)("FlowGraphRotate3DBlock",F);class W extends h.c{constructor(c){const b=(null===c||void 0===c?void 0:c.vectorType)||"ak",A="Vector2"===b?"Matrix2D":"ak"===b?"Matrix3D":"Matrix";super((0,t.L)(b),(0,t.L)(A),(0,t.L)(b),M,"FlowGraphTransformVectorBlock",c)}}(0,n.d)("FlowGraphTransformVectorBlock",W);class d extends h.c{constructor(c){super(t.D,t.k,t.D,((c,b)=>L.k.TransformCoordinates(c,b)),"FlowGraphTransformCoordinatesBlock",c)}}(0,n.d)("FlowGraphTransformCoordinatesBlock",d);class r extends s.b{constructor(c){super(t.v,t.v,(c=>c.conjugate()),"FlowGraphConjugateBlock",c)}}(0,n.d)("FlowGraphConjugateBlock",r);class z extends h.c{constructor(c){super(t.v,t.v,t.t,((c,b)=>(0,J.c)(c,b)),"FlowGraphAngleBetweenBlock",c)}}(0,n.d)("FlowGraphAngleBetweenBlock",z);class Y extends h.c{constructor(c){super(t.D,t.t,t.v,((c,b)=>L.e.RotationAxis(c,b)),"FlowGraphQuaternionFromAxisAngleBlock",c)}}(0,n.d)("FlowGraphQuaternionFromAxisAngleBlock",Y);class D extends o.d{constructor(c){super(c),this.a=this.registerDataInput("a",t.v),this.axis=this.registerDataOutput("axis",t.D),this.angle=this.registerDataOutput("angle",t.t),this.isValid=this.registerDataOutput("isValid",t.f)}_updateOutputs(c){const b=c._getExecutionVariable(this,N,-1),A=c._getExecutionVariable(this,X,null),o=c._getExecutionVariable(this,R,null);if(void 0!==A&&null!==A&&void 0!==o&&null!==o&&b===c.executionId)this.axis.setValue(A,c),this.angle.setValue(o,c);else try{const{axis:b,angle:A}=this.a.getValue(c).toAxisAngle();c._setExecutionVariable(this,X,b),c._setExecutionVariable(this,R,A),c._setExecutionVariable(this,N,c.executionId),this.axis.setValue(b,c),this.angle.setValue(A,c),this.isValid.setValue(!0,c)}catch(t){this.isValid.setValue(!1,c)}}getClassName(){return"FlowGraphAxisAngleFromQuaternionBlock"}}(0,n.d)("FlowGraphAxisAngleFromQuaternionBlock",D);class f extends h.c{constructor(c){super(t.D,t.D,t.v,((c,b)=>(0,J.d)(c,b)),"FlowGraphQuaternionFromDirectionsBlock",c)}}},14018:(c,b,A)=>{A.d(b,{c:()=>t});var o=A(14025);class t extends o.d{constructor(c,b,A,o,t,n){super(A,n),this._operation=o,this._className=t,this.a=this.registerDataInput("a",c),this.b=this.registerDataInput("b",b)}_doOperation(c){const b=this.a.getValue(c),A=this.b.getValue(c);return this._operation(b,A)}getClassName(){return this._className}}},14025:(c,b,A)=>{A.d(b,{d:()=>s});var o=A(12789),t=A(12763);const n="cachedOperationValue",h="cachedExecutionId";class s extends o.d{constructor(c,b){super(b),this.value=this.registerDataOutput("value",c),this.isValid=this.registerDataOutput("isValid",t.f)}_updateOutputs(c){const b=c._getExecutionVariable(this,h,-1),A=c._getExecutionVariable(this,n,null);if(void 0!==A&&null!==A&&b===c.executionId)this.isValid.setValue(!0,c),this.value.setValue(A,c);else try{const b=this._doOperation(c);if(void 0===b||null===b)return void this.isValid.setValue(!1,c);c._setExecutionVariable(this,n,b),c._setExecutionVariable(this,h,c.executionId),this.value.setValue(b,c),this.isValid.setValue(!0,c)}catch(o){this.isValid.setValue(!1,c)}}}},14034:(c,b,A)=>{A.d(b,{b:()=>t});var o=A(14025);class t extends o.d{constructor(c,b,A,o,t){super(b,t),this._operation=A,this._className=o,this.a=this.registerDataInput("a",c)}_doOperation(c){return this._operation(this.a.getValue(c))}getClassName(){return this._className}}}}]);