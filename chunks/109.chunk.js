"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[109],{14525:(P,f,Y)=>{Y.r(f),Y.d(f,{FlowGraphConsoleLogBlock:()=>o});var C=Y(12974),q=Y(12917),m=Y(11134),L=Y(11025);class o extends C.d{constructor(P){if(super(P),this.message=this.registerDataInput("message",q.d),this.logType=this.registerDataInput("logType",q.d,"log"),null!==P&&void 0!==P&&P.messageTemplate){const f=this._getTemplateMatches(P.messageTemplate);for(const P of f)this.registerDataInput(P,q.d)}}_execute(P){const f=this.logType.getValue(P),Y=this._getMessageValue(P);"warn"===f?L.e.Warn(Y):"error"===f?L.e.Error(Y):L.e.Log(Y),this.out._activateSignal(P)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(P){var f;if(null!==(f=this.config)&&void 0!==f&&f.messageTemplate){let f=this.config.messageTemplate;const C=this._getTemplateMatches(f);for(const q of C){var Y;const C=null===(Y=this.getDataInput(q))||void 0===Y?void 0:Y.getValue(P);void 0!==C&&(f=f.replace(new RegExp(`\\{${q}\\}`,"g"),C.toString()))}return f}return this.message.getValue(P)}_getTemplateMatches(P){const f=/\{([^}]+)\}/g,Y=[];let C;for(;null!==(C=f.exec(P));)Y.push(C[1]);return Y}}(0,m.d)("FlowGraphConsoleLogBlock",o)}}]);