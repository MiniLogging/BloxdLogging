"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[109],{14583:(Z,x,F)=>{F.r(x),F.d(x,{FlowGraphConsoleLogBlock:()=>j});var u=F(13007),G=F(12954),f=F(11136),Y=F(11012);class j extends u.e{constructor(Z){if(super(Z),this.message=this.registerDataInput("message",G.d),this.logType=this.registerDataInput("logType",G.d,"log"),null!==Z&&void 0!==Z&&Z.messageTemplate){const x=this._getTemplateMatches(Z.messageTemplate);for(const Z of x)this.registerDataInput(Z,G.d)}}_execute(Z){const x=this.logType.getValue(Z),F=this._getMessageValue(Z);"warn"===x?Y.d.Warn(F):"error"===x?Y.d.Error(F):Y.d.Log(F),this.out._activateSignal(Z)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(Z){var x;if(null!==(x=this.config)&&void 0!==x&&x.messageTemplate){let x=this.config.messageTemplate;const u=this._getTemplateMatches(x);for(const G of u){var F;const u=null===(F=this.getDataInput(G))||void 0===F?void 0:F.getValue(Z);void 0!==u&&(x=x.replace(new RegExp(`\\{${G}\\}`,"g"),u.toString()))}return x}return this.message.getValue(Z)}_getTemplateMatches(Z){const x=/\{([^}]+)\}/g,F=[];let u;for(;null!==(u=x.exec(Z));)F.push(u[1]);return F}}(0,f.g)("FlowGraphConsoleLogBlock",j)}}]);