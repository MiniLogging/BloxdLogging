"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[109],{14515:(B,I,C)=>{C.r(I),C.d(I,{FlowGraphConsoleLogBlock:()=>L});var M=C(12952),x=C(12901),y=C(11149),f=C(11027);class L extends M.b{constructor(B){if(super(B),this.message=this.registerDataInput("message",x.b),this.logType=this.registerDataInput("logType",x.b,"log"),null!==B&&void 0!==B&&B.messageTemplate){const I=this._getTemplateMatches(B.messageTemplate);for(const B of I)this.registerDataInput(B,x.b)}}_execute(B){const I=this.logType.getValue(B),C=this._getMessageValue(B);"warn"===I?f.b.Warn(C):"error"===I?f.b.Error(C):f.b.Log(C),this.out._activateSignal(B)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(B){var I;if(null!==(I=this.config)&&void 0!==I&&I.messageTemplate){let I=this.config.messageTemplate;const M=this._getTemplateMatches(I);for(const x of M){var C;const M=null===(C=this.getDataInput(x))||void 0===C?void 0:C.getValue(B);void 0!==M&&(I=I.replace(new RegExp(`\\{${x}\\}`,"g"),M.toString()))}return I}return this.message.getValue(B)}_getTemplateMatches(B){const I=/\{([^}]+)\}/g,C=[];let M;for(;null!==(M=I.exec(B));)C.push(M[1]);return C}}(0,y.h)("FlowGraphConsoleLogBlock",L)}}]);