"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[109],{14445:(q,S,b)=>{b.r(S),b.d(S,{FlowGraphConsoleLogBlock:()=>g});var z=b(12866),C=b(12839),v=b(11058),U=b(10943);class g extends z.e{constructor(q){if(super(q),this.message=this.registerDataInput("message",C.d),this.logType=this.registerDataInput("logType",C.d,"log"),null!==q&&void 0!==q&&q.messageTemplate){const S=this._getTemplateMatches(q.messageTemplate);for(const q of S)this.registerDataInput(q,C.d)}}_execute(q){const S=this.logType.getValue(q),b=this._getMessageValue(q);"warn"===S?U.b.Warn(b):"error"===S?U.b.Error(b):U.b.Log(b),this.out._activateSignal(q)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(q){var S;if(null!==(S=this.config)&&void 0!==S&&S.messageTemplate){let S=this.config.messageTemplate;const z=this._getTemplateMatches(S);for(const C of z){var b;const z=null===(b=this.getDataInput(C))||void 0===b?void 0:b.getValue(q);void 0!==z&&(S=S.replace(new RegExp(`\\{${C}\\}`,"g"),z.toString()))}return S}return this.message.getValue(q)}_getTemplateMatches(q){const S=/\{([^}]+)\}/g,b=[];let z;for(;null!==(z=S.exec(q));)b.push(z[1]);return b}}(0,v.f)("FlowGraphConsoleLogBlock",g)}}]);