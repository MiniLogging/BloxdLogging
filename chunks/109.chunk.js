"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[109],{14415:(g,w,q)=>{q.r(w),q.d(w,{FlowGraphConsoleLogBlock:()=>i});var R=q(12879),o=q(12836),r=q(11128),S=q(11011);class i extends R.c{constructor(g){if(super(g),this.message=this.registerDataInput("message",o.d),this.logType=this.registerDataInput("logType",o.d,"log"),null!==g&&void 0!==g&&g.messageTemplate){const w=this._getTemplateMatches(g.messageTemplate);for(const g of w)this.registerDataInput(g,o.d)}}_execute(g){const w=this.logType.getValue(g),q=this._getMessageValue(g);"warn"===w?S.d.Warn(q):"error"===w?S.d.Error(q):S.d.Log(q),this.out._activateSignal(g)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(g){var w;if(null!==(w=this.config)&&void 0!==w&&w.messageTemplate){let w=this.config.messageTemplate;const R=this._getTemplateMatches(w);for(const o of R){var q;const R=null===(q=this.getDataInput(o))||void 0===q?void 0:q.getValue(g);void 0!==R&&(w=w.replace(new RegExp(`\\{${o}\\}`,"g"),R.toString()))}return w}return this.message.getValue(g)}_getTemplateMatches(g){const w=/\{([^}]+)\}/g,q=[];let R;for(;null!==(R=w.exec(g));)q.push(R[1]);return q}}(0,r.g)("FlowGraphConsoleLogBlock",i)}}]);