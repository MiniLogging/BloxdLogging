"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[109],{14492:(h,V,i)=>{i.r(V),i.d(V,{FlowGraphConsoleLogBlock:()=>q});var S=i(12861),l=i(12805),Y=i(11091),g=i(10967);class q extends S.e{constructor(h){if(super(h),this.message=this.registerDataInput("message",l.c),this.logType=this.registerDataInput("logType",l.c,"log"),null!==h&&void 0!==h&&h.messageTemplate){const V=this._getTemplateMatches(h.messageTemplate);for(const h of V)this.registerDataInput(h,l.c)}}_execute(h){const V=this.logType.getValue(h),i=this._getMessageValue(h);"warn"===V?g.d.Warn(i):"error"===V?g.d.Error(i):g.d.Log(i),this.out._activateSignal(h)}getClassName(){return"FlowGraphConsoleLogBlock"}_getMessageValue(h){var V;if(null!==(V=this.config)&&void 0!==V&&V.messageTemplate){let V=this.config.messageTemplate;const S=this._getTemplateMatches(V);for(const l of S){var i;const S=null===(i=this.getDataInput(l))||void 0===i?void 0:i.getValue(h);void 0!==S&&(V=V.replace(new RegExp(`\\{${l}\\}`,"g"),S.toString()))}return V}return this.message.getValue(h)}_getTemplateMatches(h){const V=/\{([^}]+)\}/g,i=[];let S;for(;null!==(S=V.exec(h));)i.push(S[1]);return i}}(0,Y.f)("FlowGraphConsoleLogBlock",q)}}]);