"use strict";(self.xeuzlpp225k=self.xeuzlpp225k||[]).push([[104],{14607:(k,Q,i)=>{i.r(Q),i.d(Q,{FlowGraphMultiGateBlock:()=>o});var Z=i(11253),U=i(13078),C=i(13064),B=i(13060);class o extends U.d{constructor(k){super(k),this.config=k,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",C.h,new B.e(-1)),this.setNumberOfOutputSignals(null===k||void 0===k?void 0:k.outputSignalCount)}_getNextIndex(k){if(k.includes(!1)||this.config.isLoop&&k.fill(!1),this.config.isRandom){const Q=k.map(((k,Q)=>k?-1:Q)).filter((k=>-1!==k));return Q.length?Q[Math.floor(Math.random()*Q.length)]:-1}return k.indexOf(!1)}setNumberOfOutputSignals(){let k=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>k;){const k=this.outputSignals.pop();k&&(k.disconnectFromAll(),this._unregisterSignalOutput(k.name))}for(;this.outputSignals.length<k;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(k,Q){if(k._hasExecutionVariable(this,"indexesUsed")||k._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),Q===this.reset)return k._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new B.e(-1),k);const i=k._getExecutionVariable(this,"indexesUsed",[]),Z=this._getNextIndex(i);Z>-1&&(this.lastIndex.setValue(new B.e(Z),k),i[Z]=!0,k._setExecutionVariable(this,"indexesUsed",i),this.outputSignals[Z]._activateSignal(k))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(k){super.serialize(k),k.config.outputSignalCount=this.config.outputSignalCount,k.config.isRandom=this.config.isRandom,k.config.loop=this.config.isLoop,k.config.startIndex=this.config.startIndex}}(0,Z.e)("FlowGraphMultiGateBlock",o)}}]);