"use strict";(self.hbnkweqmycf=self.hbnkweqmycf||[]).push([[104],{14912:(F,P,f)=>{f.r(P),f.d(P,{FlowGraphMultiGateBlock:()=>A});var c=f(11587),N=f(13280),q=f(13265),H=f(13258);class A extends N.d{constructor(F){super(F),this.config=F,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",q.h,new H.b(-1)),this.setNumberOfOutputSignals(null===F||void 0===F?void 0:F.outputSignalCount)}_getNextIndex(F){if(F.includes(!1)||this.config.isLoop&&F.fill(!1),this.config.isRandom){const P=F.map(((F,P)=>F?-1:P)).filter((F=>-1!==F));return P.length?P[Math.floor(Math.random()*P.length)]:-1}return F.indexOf(!1)}setNumberOfOutputSignals(){let F=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>F;){const F=this.outputSignals.pop();F&&(F.disconnectFromAll(),this._unregisterSignalOutput(F.name))}for(;this.outputSignals.length<F;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(F,P){if(F._hasExecutionVariable(this,"indexesUsed")||F._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),P===this.reset)return F._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new H.b(-1),F);const f=F._getExecutionVariable(this,"indexesUsed",[]),c=this._getNextIndex(f);c>-1&&(this.lastIndex.setValue(new H.b(c),F),f[c]=!0,F._setExecutionVariable(this,"indexesUsed",f),this.outputSignals[c]._activateSignal(F))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(F){super.serialize(F),F.config.outputSignalCount=this.config.outputSignalCount,F.config.isRandom=this.config.isRandom,F.config.loop=this.config.isLoop,F.config.startIndex=this.config.startIndex}}(0,c.f)("FlowGraphMultiGateBlock",A)}}]);