"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[104],{14391:(g,w,q)=>{q.r(w),q.d(w,{FlowGraphMultiGateBlock:()=>i});var R=q(11128),o=q(12855),r=q(12836),S=q(12828);class i extends o.d{constructor(g){super(g),this.config=g,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",r.l,new S.b(-1)),this.setNumberOfOutputSignals(null===g||void 0===g?void 0:g.outputSignalCount)}_getNextIndex(g){if(g.includes(!1)||this.config.isLoop&&g.fill(!1),this.config.isRandom){const w=g.map(((g,w)=>g?-1:w)).filter((g=>-1!==g));return w.length?w[Math.floor(Math.random()*w.length)]:-1}return g.indexOf(!1)}setNumberOfOutputSignals(){let g=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>g;){const g=this.outputSignals.pop();g&&(g.disconnectFromAll(),this._unregisterSignalOutput(g.name))}for(;this.outputSignals.length<g;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(g,w){if(g._hasExecutionVariable(this,"indexesUsed")||g._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),w===this.reset)return g._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new S.b(-1),g);const q=g._getExecutionVariable(this,"indexesUsed",[]),R=this._getNextIndex(q);R>-1&&(this.lastIndex.setValue(new S.b(R),g),q[R]=!0,g._setExecutionVariable(this,"indexesUsed",q),this.outputSignals[R]._activateSignal(g))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(g){super.serialize(g),g.config.outputSignalCount=this.config.outputSignalCount,g.config.isRandom=this.config.isRandom,g.config.loop=this.config.isLoop,g.config.startIndex=this.config.startIndex}}(0,R.g)("FlowGraphMultiGateBlock",i)}}]);