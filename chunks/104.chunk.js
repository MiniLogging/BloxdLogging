"use strict";(self.pp3k1ov3ibi=self.pp3k1ov3ibi||[]).push([[104],{15676:(M,Z,P)=>{P.r(Z),P.d(Z,{FlowGraphMultiGateBlock:()=>G});var x=P(12317),c=P(14090),w=P(14073),v=P(14067);class G extends c.b{constructor(M){super(M),this.config=M,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",w.j,new v.e(-1)),this.setNumberOfOutputSignals(null===M||void 0===M?void 0:M.outputSignalCount)}_getNextIndex(M){if(M.includes(!1)||this.config.isLoop&&M.fill(!1),this.config.isRandom){const Z=M.map(((M,Z)=>M?-1:Z)).filter((M=>-1!==M));return Z.length?Z[Math.floor(Math.random()*Z.length)]:-1}return M.indexOf(!1)}setNumberOfOutputSignals(){let M=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>M;){const M=this.outputSignals.pop();M&&(M.disconnectFromAll(),this._unregisterSignalOutput(M.name))}for(;this.outputSignals.length<M;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(M,Z){if(M._hasExecutionVariable(this,"indexesUsed")||M._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),Z===this.reset)return M._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new v.e(-1),M);const P=M._getExecutionVariable(this,"indexesUsed",[]),x=this._getNextIndex(P);x>-1&&(this.lastIndex.setValue(new v.e(x),M),P[x]=!0,M._setExecutionVariable(this,"indexesUsed",P),this.outputSignals[x]._activateSignal(M))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(M){super.serialize(M),M.config.outputSignalCount=this.config.outputSignalCount,M.config.isRandom=this.config.isRandom,M.config.loop=this.config.isLoop,M.config.startIndex=this.config.startIndex}}(0,x.g)("FlowGraphMultiGateBlock",G)}}]);