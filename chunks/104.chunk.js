"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[104],{14466:(h,V,i)=>{i.r(V),i.d(V,{FlowGraphMultiGateBlock:()=>q});var S=i(11091),l=i(12824),Y=i(12805),g=i(12800);class q extends l.c{constructor(h){super(h),this.config=h,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",Y.i,new g.b(-1)),this.setNumberOfOutputSignals(null===h||void 0===h?void 0:h.outputSignalCount)}_getNextIndex(h){if(h.includes(!1)||this.config.isLoop&&h.fill(!1),this.config.isRandom){const V=h.map(((h,V)=>h?-1:V)).filter((h=>-1!==h));return V.length?V[Math.floor(Math.random()*V.length)]:-1}return h.indexOf(!1)}setNumberOfOutputSignals(){let h=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>h;){const h=this.outputSignals.pop();h&&(h.disconnectFromAll(),this._unregisterSignalOutput(h.name))}for(;this.outputSignals.length<h;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(h,V){if(h._hasExecutionVariable(this,"indexesUsed")||h._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),V===this.reset)return h._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new g.b(-1),h);const i=h._getExecutionVariable(this,"indexesUsed",[]),S=this._getNextIndex(i);S>-1&&(this.lastIndex.setValue(new g.b(S),h),i[S]=!0,h._setExecutionVariable(this,"indexesUsed",i),this.outputSignals[S]._activateSignal(h))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(h){super.serialize(h),h.config.outputSignalCount=this.config.outputSignalCount,h.config.isRandom=this.config.isRandom,h.config.loop=this.config.isLoop,h.config.startIndex=this.config.startIndex}}(0,S.f)("FlowGraphMultiGateBlock",q)}}]);