"use strict";(self.isj1uwvwrek=self.isj1uwvwrek||[]).push([[104],{16134:(I,x,L)=>{L.r(x),L.d(x,{FlowGraphMultiGateBlock:()=>p});var F=L(12938),X=L(14512),G=L(14498),Y=L(14493);class p extends X.e{constructor(I){super(I),this.config=I,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",G.l,new Y.b(-1)),this.setNumberOfOutputSignals(null===I||void 0===I?void 0:I.outputSignalCount)}_getNextIndex(I){if(I.includes(!1)||this.config.isLoop&&I.fill(!1),this.config.isRandom){const x=I.map(((I,x)=>I?-1:x)).filter((I=>-1!==I));return x.length?x[Math.floor(Math.random()*x.length)]:-1}return I.indexOf(!1)}setNumberOfOutputSignals(){let I=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>I;){const I=this.outputSignals.pop();I&&(I.disconnectFromAll(),this._unregisterSignalOutput(I.name))}for(;this.outputSignals.length<I;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(I,x){if(I._hasExecutionVariable(this,"indexesUsed")||I._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),x===this.reset)return I._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new Y.b(-1),I);const L=I._getExecutionVariable(this,"indexesUsed",[]),F=this._getNextIndex(L);F>-1&&(this.lastIndex.setValue(new Y.b(F),I),L[F]=!0,I._setExecutionVariable(this,"indexesUsed",L),this.outputSignals[F]._activateSignal(I))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(I){super.serialize(I),I.config.outputSignalCount=this.config.outputSignalCount,I.config.isRandom=this.config.isRandom,I.config.loop=this.config.isLoop,I.config.startIndex=this.config.startIndex}}(0,F.d)("FlowGraphMultiGateBlock",p)}}]);