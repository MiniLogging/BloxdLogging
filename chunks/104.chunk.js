"use strict";(self.rvold1i0ywi=self.rvold1i0ywi||[]).push([[104],{14544:(F,b,Q)=>{Q.r(b),Q.d(b,{FlowGraphMultiGateBlock:()=>W});var C=Q(11265),z=Q(12967),t=Q(12951),g=Q(12948);class W extends z.d{constructor(F){super(F),this.config=F,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",t.g,new g.b(-1)),this.setNumberOfOutputSignals(null===F||void 0===F?void 0:F.outputSignalCount)}_getNextIndex(F){if(F.includes(!1)||this.config.isLoop&&F.fill(!1),this.config.isRandom){const b=F.map(((F,b)=>F?-1:b)).filter((F=>-1!==F));return b.length?b[Math.floor(Math.random()*b.length)]:-1}return F.indexOf(!1)}setNumberOfOutputSignals(){let F=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>F;){const F=this.outputSignals.pop();F&&(F.disconnectFromAll(),this._unregisterSignalOutput(F.name))}for(;this.outputSignals.length<F;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(F,b){if(F._hasExecutionVariable(this,"indexesUsed")||F._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),b===this.reset)return F._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new g.b(-1),F);const Q=F._getExecutionVariable(this,"indexesUsed",[]),C=this._getNextIndex(Q);C>-1&&(this.lastIndex.setValue(new g.b(C),F),Q[C]=!0,F._setExecutionVariable(this,"indexesUsed",Q),this.outputSignals[C]._activateSignal(F))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(F){super.serialize(F),F.config.outputSignalCount=this.config.outputSignalCount,F.config.isRandom=this.config.isRandom,F.config.loop=this.config.isLoop,F.config.startIndex=this.config.startIndex}}(0,C.g)("FlowGraphMultiGateBlock",W)}}]);