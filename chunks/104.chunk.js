"use strict";(self.uji65st81d=self.uji65st81d||[]).push([[104],{15680:(V,h,mV)=>{mV.r(h),mV.d(h,{FlowGraphMultiGateBlock:()=>k});var t=mV(12388),L=mV(14119),N=mV(14109),A=mV(14102);class k extends L.b{constructor(V){super(V),this.config=V,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",N.j,new A.d(-1)),this.setNumberOfOutputSignals(null===V||void 0===V?void 0:V.outputSignalCount)}_getNextIndex(V){if(V.includes(!1)||this.config.isLoop&&V.fill(!1),this.config.isRandom){const h=V.map(((V,h)=>V?-1:h)).filter((V=>-1!==V));return h.length?h[Math.floor(Math.random()*h.length)]:-1}return V.indexOf(!1)}setNumberOfOutputSignals(){let V=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>V;){const V=this.outputSignals.pop();V&&(V.disconnectFromAll(),this._unregisterSignalOutput(V.name))}for(;this.outputSignals.length<V;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(V,h){if(V._hasExecutionVariable(this,"indexesUsed")||V._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),h===this.reset)return V._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new A.d(-1),V);const mV=V._getExecutionVariable(this,"indexesUsed",[]),t=this._getNextIndex(mV);t>-1&&(this.lastIndex.setValue(new A.d(t),V),mV[t]=!0,V._setExecutionVariable(this,"indexesUsed",mV),this.outputSignals[t]._activateSignal(V))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(V){super.serialize(V),V.config.outputSignalCount=this.config.outputSignalCount,V.config.isRandom=this.config.isRandom,V.config.loop=this.config.isLoop,V.config.startIndex=this.config.startIndex}}(0,t.i)("FlowGraphMultiGateBlock",k)}}]);