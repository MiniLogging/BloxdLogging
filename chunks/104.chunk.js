"use strict";(self.a14qw1h7fq=self.a14qw1h7fq||[]).push([[104],{14465:(R,J,B)=>{B.r(J),B.d(J,{FlowGraphMultiGateBlock:()=>r});var Q=B(11142),h=B(12913),y=B(12894),N=B(12892);class r extends h.d{constructor(R){super(R),this.config=R,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",y.k,new N.d(-1)),this.setNumberOfOutputSignals(null===R||void 0===R?void 0:R.outputSignalCount)}_getNextIndex(R){if(R.includes(!1)||this.config.isLoop&&R.fill(!1),this.config.isRandom){const J=R.map(((R,J)=>R?-1:J)).filter((R=>-1!==R));return J.length?J[Math.floor(Math.random()*J.length)]:-1}return R.indexOf(!1)}setNumberOfOutputSignals(){let R=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>R;){const R=this.outputSignals.pop();R&&(R.disconnectFromAll(),this._unregisterSignalOutput(R.name))}for(;this.outputSignals.length<R;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(R,J){if(R._hasExecutionVariable(this,"indexesUsed")||R._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),J===this.reset)return R._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new N.d(-1),R);const B=R._getExecutionVariable(this,"indexesUsed",[]),Q=this._getNextIndex(B);Q>-1&&(this.lastIndex.setValue(new N.d(Q),R),B[Q]=!0,R._setExecutionVariable(this,"indexesUsed",B),this.outputSignals[Q]._activateSignal(R))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(R){super.serialize(R),R.config.outputSignalCount=this.config.outputSignalCount,R.config.isRandom=this.config.isRandom,R.config.loop=this.config.isLoop,R.config.startIndex=this.config.startIndex}}(0,Q.h)("FlowGraphMultiGateBlock",r)}}]);