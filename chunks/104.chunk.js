"use strict";(self.yg1iw12lizp=self.yg1iw12lizp||[]).push([[104],{15945:(L,U,x)=>{x.r(U),x.d(U,{FlowGraphMultiGateBlock:()=>a});var mL=x(12547),p=x(14362),G=x(14348),F=x(14343);class a extends p.d{constructor(L){super(L),this.config=L,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",G.i,new F.b(-1)),this.setNumberOfOutputSignals(null===L||void 0===L?void 0:L.outputSignalCount)}_getNextIndex(L){if(L.includes(!1)||this.config.isLoop&&L.fill(!1),this.config.isRandom){const U=L.map(((L,U)=>L?-1:U)).filter((L=>-1!==L));return U.length?U[Math.floor(Math.random()*U.length)]:-1}return L.indexOf(!1)}setNumberOfOutputSignals(){let L=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>L;){const L=this.outputSignals.pop();L&&(L.disconnectFromAll(),this._unregisterSignalOutput(L.name))}for(;this.outputSignals.length<L;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(L,U){if(L._hasExecutionVariable(this,"indexesUsed")||L._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),U===this.reset)return L._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new F.b(-1),L);const x=L._getExecutionVariable(this,"indexesUsed",[]),mL=this._getNextIndex(x);mL>-1&&(this.lastIndex.setValue(new F.b(mL),L),x[mL]=!0,L._setExecutionVariable(this,"indexesUsed",x),this.outputSignals[mL]._activateSignal(L))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(L){super.serialize(L),L.config.outputSignalCount=this.config.outputSignalCount,L.config.isRandom=this.config.isRandom,L.config.loop=this.config.isLoop,L.config.startIndex=this.config.startIndex}}(0,mL.d)("FlowGraphMultiGateBlock",a)}}]);