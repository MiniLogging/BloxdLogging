"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[104],{14427:(q,S,b)=>{b.r(S),b.d(S,{FlowGraphMultiGateBlock:()=>g});var z=b(11058),C=b(12850),v=b(12839),U=b(12836);class g extends C.e{constructor(q){super(q),this.config=q,this.outputSignals=[],this.reset=this._registerSignalInput("reset"),this.lastIndex=this.registerDataOutput("lastIndex",v.h,new U.d(-1)),this.setNumberOfOutputSignals(null===q||void 0===q?void 0:q.outputSignalCount)}_getNextIndex(q){if(q.includes(!1)||this.config.isLoop&&q.fill(!1),this.config.isRandom){const S=q.map(((q,S)=>q?-1:S)).filter((q=>-1!==q));return S.length?S[Math.floor(Math.random()*S.length)]:-1}return q.indexOf(!1)}setNumberOfOutputSignals(){let q=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;for(;this.outputSignals.length>q;){const q=this.outputSignals.pop();q&&(q.disconnectFromAll(),this._unregisterSignalOutput(q.name))}for(;this.outputSignals.length<q;)this.outputSignals.push(this._registerSignalOutput(`out_${this.outputSignals.length}`))}_execute(q,S){if(q._hasExecutionVariable(this,"indexesUsed")||q._setExecutionVariable(this,"indexesUsed",this.outputSignals.map((()=>!1))),S===this.reset)return q._deleteExecutionVariable(this,"indexesUsed"),void this.lastIndex.setValue(new U.d(-1),q);const b=q._getExecutionVariable(this,"indexesUsed",[]),z=this._getNextIndex(b);z>-1&&(this.lastIndex.setValue(new U.d(z),q),b[z]=!0,q._setExecutionVariable(this,"indexesUsed",b),this.outputSignals[z]._activateSignal(q))}getClassName(){return"FlowGraphMultiGateBlock"}serialize(q){super.serialize(q),q.config.outputSignalCount=this.config.outputSignalCount,q.config.isRandom=this.config.isRandom,q.config.loop=this.config.isLoop,q.config.startIndex=this.config.startIndex}}(0,z.f)("FlowGraphMultiGateBlock",g)}}]);