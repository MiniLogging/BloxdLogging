"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[13],{2247:(Y,d,t)=>{t.r(d),t.d(d,{_TGATextureLoader:()=>B});var x=t(531);function C(Y){let d=0;return{id_length:Y[d++],colormap_type:Y[d++],image_type:Y[d++],colormap_index:Y[d++]|Y[d++]<<8,colormap_length:Y[d++]|Y[d++]<<8,colormap_size:Y[d++],origin:[Y[d++]|Y[d++]<<8,Y[d++]|Y[d++]<<8],width:Y[d++]|Y[d++]<<8,height:Y[d++]|Y[d++]<<8,pixel_size:Y[d++],flags:Y[d++]}}function U(Y,d){if(d.length<19)return void x.c.Error("Unable to load TGA file - Not enough data to contain header");let t=18;const U=C(d);if(U.id_length+t>d.length)return void x.c.Error("Unable to load TGA file - Not enough data");t+=U.id_length;let B,W=!1,o=!1,f=!1;switch(U.image_type){case 9:W=!0;case 1:o=!0;break;case 10:W=!0;case 2:break;case 11:W=!0;case 3:f=!0}const F=U.pixel_size>>3,D=U.width*U.height*F;let b,m,M,J,g,T,s;if(o&&(b=d.subarray(t,t+=U.colormap_length*(U.colormap_size>>3))),W){let Y,x,C;B=new Uint8Array(D);let U=0;const y=new Uint8Array(F);for(;t<D&&U<D;)if(Y=d[t++],x=1+(127&Y),128&Y){for(C=0;C<F;++C)y[C]=d[t++];for(C=0;C<x;++C)B.set(y,U+C*F);U+=F*x}else{for(x*=F,C=0;C<x;++C)B[U+C]=d[t++];U+=x}}else B=d.subarray(t,t+=o?U.width*U.height:D);switch((48&U.flags)>>4){default:case 2:m=0,J=1,s=U.width,M=0,g=1,T=U.height;break;case 0:m=0,J=1,s=U.width,M=U.height-1,g=-1,T=-1;break;case 3:m=U.width-1,J=-1,s=-1,M=0,g=1,T=U.height;break;case 1:m=U.width-1,J=-1,s=-1,M=U.height-1,g=-1,T=-1}const l="_getImageData"+(f?"Grey":"")+U.pixel_size+"bits",h=y[l](U,b,B,M,g,T,m,J,s);Y.getEngine()._uploadDataToTextureDirectly(Y,h)}const y={GetTGAHeader:C,UploadContent:U,_getImageData8bits:function(Y,d,t,x,C,U,y,B,W){const o=t,f=d,F=Y.width,D=Y.height;let b,m,M,J=0;const g=new Uint8Array(F*D*4);for(M=x;M!==U;M+=C)for(m=y;m!==W;m+=B,J++)b=o[J],g[4*(m+F*M)+3]=255,g[4*(m+F*M)+2]=f[3*b+0],g[4*(m+F*M)+1]=f[3*b+1],g[4*(m+F*M)+0]=f[3*b+2];return g},_getImageData16bits:function(Y,d,t,x,C,U,y,B,W){const o=t,f=Y.width,F=Y.height;let D,b,m,M=0;const J=new Uint8Array(f*F*4);for(m=x;m!==U;m+=C)for(b=y;b!==W;b+=B,M+=2){D=o[M+0]+(o[M+1]<<8);const Y=255*((31744&D)>>10)/31|0,d=255*((992&D)>>5)/31|0,t=255*(31&D)/31|0;J[4*(b+f*m)+0]=Y,J[4*(b+f*m)+1]=d,J[4*(b+f*m)+2]=t,J[4*(b+f*m)+3]=32768&D?0:255}return J},_getImageData24bits:function(Y,d,t,x,C,U,y,B,W){const o=t,f=Y.width,F=Y.height;let D,b,m=0;const M=new Uint8Array(f*F*4);for(b=x;b!==U;b+=C)for(D=y;D!==W;D+=B,m+=3)M[4*(D+f*b)+3]=255,M[4*(D+f*b)+2]=o[m+0],M[4*(D+f*b)+1]=o[m+1],M[4*(D+f*b)+0]=o[m+2];return M},_getImageData32bits:function(Y,d,t,x,C,U,y,B,W){const o=t,f=Y.width,F=Y.height;let D,b,m=0;const M=new Uint8Array(f*F*4);for(b=x;b!==U;b+=C)for(D=y;D!==W;D+=B,m+=4)M[4*(D+f*b)+2]=o[m+0],M[4*(D+f*b)+1]=o[m+1],M[4*(D+f*b)+0]=o[m+2],M[4*(D+f*b)+3]=o[m+3];return M},_getImageDataGrey8bits:function(Y,d,t,x,C,U,y,B,W){const o=t,f=Y.width,F=Y.height;let D,b,m,M=0;const J=new Uint8Array(f*F*4);for(m=x;m!==U;m+=C)for(b=y;b!==W;b+=B,M++)D=o[M],J[4*(b+f*m)+0]=D,J[4*(b+f*m)+1]=D,J[4*(b+f*m)+2]=D,J[4*(b+f*m)+3]=255;return J},_getImageDataGrey16bits:function(Y,d,t,x,C,U,y,B,W){const o=t,f=Y.width,F=Y.height;let D,b,m=0;const M=new Uint8Array(f*F*4);for(b=x;b!==U;b+=C)for(D=y;D!==W;D+=B,m+=2)M[4*(D+f*b)+0]=o[m+0],M[4*(D+f*b)+1]=o[m+0],M[4*(D+f*b)+2]=o[m+0],M[4*(D+f*b)+3]=o[m+1];return M}};class B{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(Y,d,t){const x=new Uint8Array(Y.buffer,Y.byteOffset,Y.byteLength),y=C(x);t(y.width,y.height,d.generateMipMaps,!1,(()=>{U(d,x)}))}}}}]);