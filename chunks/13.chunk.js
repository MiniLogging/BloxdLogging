"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[13],{2460:(K,Y,l)=>{l.r(Y),l.d(Y,{_TGATextureLoader:()=>c});var v=l(492);function U(K){let Y=0;return{id_length:K[Y++],colormap_type:K[Y++],image_type:K[Y++],colormap_index:K[Y++]|K[Y++]<<8,colormap_length:K[Y++]|K[Y++]<<8,colormap_size:K[Y++],origin:[K[Y++]|K[Y++]<<8,K[Y++]|K[Y++]<<8],width:K[Y++]|K[Y++]<<8,height:K[Y++]|K[Y++]<<8,pixel_size:K[Y++],flags:K[Y++]}}function d(K,Y){if(Y.length<19)return void v.e.Error("Unable to load TGA file - Not enough data to contain header");let l=18;const d=U(Y);if(d.id_length+l>Y.length)return void v.e.Error("Unable to load TGA file - Not enough data");l+=d.id_length;let c,t=!1,Z=!1,m=!1;switch(d.image_type){case 9:t=!0;case 1:Z=!0;break;case 10:t=!0;case 2:break;case 11:t=!0;case 3:m=!0}const V=d.pixel_size>>3,M=d.width*d.height*V;let u,o,W,g,J,n,R;if(Z&&(u=Y.subarray(l,l+=d.colormap_length*(d.colormap_size>>3))),t){let K,v,U;c=new Uint8Array(M);let d=0;const A=new Uint8Array(V);for(;l<M&&d<M;)if(K=Y[l++],v=1+(127&K),128&K){for(U=0;U<V;++U)A[U]=Y[l++];for(U=0;U<v;++U)c.set(A,d+U*V);d+=V*v}else{for(v*=V,U=0;U<v;++U)c[d+U]=Y[l++];d+=v}}else c=Y.subarray(l,l+=Z?d.width*d.height:M);switch((48&d.flags)>>4){default:case 2:o=0,g=1,R=d.width,W=0,J=1,n=d.height;break;case 0:o=0,g=1,R=d.width,W=d.height-1,J=-1,n=-1;break;case 3:o=d.width-1,g=-1,R=-1,W=0,J=1,n=d.height;break;case 1:o=d.width-1,g=-1,R=-1,W=d.height-1,J=-1,n=-1}const H="_getImageData"+(m?"Grey":"")+d.pixel_size+"bits",z=A[H](d,u,c,W,J,n,o,g,R);K.getEngine()._uploadDataToTextureDirectly(K,z)}const A={GetTGAHeader:U,UploadContent:d,_getImageData8bits:function(K,Y,l,v,U,d,A,c,t){const Z=l,m=Y,V=K.width,M=K.height;let u,o,W,g=0;const J=new Uint8Array(V*M*4);for(W=v;W!==d;W+=U)for(o=A;o!==t;o+=c,g++)u=Z[g],J[4*(o+V*W)+3]=255,J[4*(o+V*W)+2]=m[3*u+0],J[4*(o+V*W)+1]=m[3*u+1],J[4*(o+V*W)+0]=m[3*u+2];return J},_getImageData16bits:function(K,Y,l,v,U,d,A,c,t){const Z=l,m=K.width,V=K.height;let M,u,o,W=0;const g=new Uint8Array(m*V*4);for(o=v;o!==d;o+=U)for(u=A;u!==t;u+=c,W+=2){M=Z[W+0]+(Z[W+1]<<8);const K=255*((31744&M)>>10)/31|0,Y=255*((992&M)>>5)/31|0,l=255*(31&M)/31|0;g[4*(u+m*o)+0]=K,g[4*(u+m*o)+1]=Y,g[4*(u+m*o)+2]=l,g[4*(u+m*o)+3]=32768&M?0:255}return g},_getImageData24bits:function(K,Y,l,v,U,d,A,c,t){const Z=l,m=K.width,V=K.height;let M,u,o=0;const W=new Uint8Array(m*V*4);for(u=v;u!==d;u+=U)for(M=A;M!==t;M+=c,o+=3)W[4*(M+m*u)+3]=255,W[4*(M+m*u)+2]=Z[o+0],W[4*(M+m*u)+1]=Z[o+1],W[4*(M+m*u)+0]=Z[o+2];return W},_getImageData32bits:function(K,Y,l,v,U,d,A,c,t){const Z=l,m=K.width,V=K.height;let M,u,o=0;const W=new Uint8Array(m*V*4);for(u=v;u!==d;u+=U)for(M=A;M!==t;M+=c,o+=4)W[4*(M+m*u)+2]=Z[o+0],W[4*(M+m*u)+1]=Z[o+1],W[4*(M+m*u)+0]=Z[o+2],W[4*(M+m*u)+3]=Z[o+3];return W},_getImageDataGrey8bits:function(K,Y,l,v,U,d,A,c,t){const Z=l,m=K.width,V=K.height;let M,u,o,W=0;const g=new Uint8Array(m*V*4);for(o=v;o!==d;o+=U)for(u=A;u!==t;u+=c,W++)M=Z[W],g[4*(u+m*o)+0]=M,g[4*(u+m*o)+1]=M,g[4*(u+m*o)+2]=M,g[4*(u+m*o)+3]=255;return g},_getImageDataGrey16bits:function(K,Y,l,v,U,d,A,c,t){const Z=l,m=K.width,V=K.height;let M,u,o=0;const W=new Uint8Array(m*V*4);for(u=v;u!==d;u+=U)for(M=A;M!==t;M+=c,o+=2)W[4*(M+m*u)+0]=Z[o+0],W[4*(M+m*u)+1]=Z[o+0],W[4*(M+m*u)+2]=Z[o+0],W[4*(M+m*u)+3]=Z[o+1];return W}};class c{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(K,Y,l){const v=new Uint8Array(K.buffer,K.byteOffset,K.byteLength),A=U(v);l(A.width,A.height,Y.generateMipMaps,!1,(()=>{d(Y,v)}))}}}}]);