"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[13],{2508:(k,M,F)=>{F.r(M),F.d(M,{_TGATextureLoader:()=>G});var l=F(487);function t(k){let M=0;return{id_length:k[M++],colormap_type:k[M++],image_type:k[M++],colormap_index:k[M++]|k[M++]<<8,colormap_length:k[M++]|k[M++]<<8,colormap_size:k[M++],origin:[k[M++]|k[M++]<<8,k[M++]|k[M++]<<8],width:k[M++]|k[M++]<<8,height:k[M++]|k[M++]<<8,pixel_size:k[M++],flags:k[M++]}}function g(k,M){if(M.length<19)return void l.c.Error("Unable to load TGA file - Not enough data to contain header");let F=18;const g=t(M);if(g.id_length+F>M.length)return void l.c.Error("Unable to load TGA file - Not enough data");F+=g.id_length;let G,A=!1,N=!1,d=!1;switch(g.image_type){case 9:A=!0;case 1:N=!0;break;case 10:A=!0;case 2:break;case 11:A=!0;case 3:d=!0}const L=g.pixel_size>>3,U=g.width*g.height*L;let O,w,Z,R,y,m,o;if(N&&(O=M.subarray(F,F+=g.colormap_length*(g.colormap_size>>3))),A){let k,l,t;G=new Uint8Array(U);let g=0;const B=new Uint8Array(L);for(;F<U&&g<U;)if(k=M[F++],l=1+(127&k),128&k){for(t=0;t<L;++t)B[t]=M[F++];for(t=0;t<l;++t)G.set(B,g+t*L);g+=L*l}else{for(l*=L,t=0;t<l;++t)G[g+t]=M[F++];g+=l}}else G=M.subarray(F,F+=N?g.width*g.height:U);switch((48&g.flags)>>4){default:case 2:w=0,R=1,o=g.width,Z=0,y=1,m=g.height;break;case 0:w=0,R=1,o=g.width,Z=g.height-1,y=-1,m=-1;break;case 3:w=g.width-1,R=-1,o=-1,Z=0,y=1,m=g.height;break;case 1:w=g.width-1,R=-1,o=-1,Z=g.height-1,y=-1,m=-1}const Q="_getImageData"+(d?"Grey":"")+g.pixel_size+"bits",v=B[Q](g,O,G,Z,y,m,w,R,o);k.getEngine()._uploadDataToTextureDirectly(k,v)}const B={GetTGAHeader:t,UploadContent:g,_getImageData8bits:function(k,M,F,l,t,g,B,G,A){const N=F,d=M,L=k.width,U=k.height;let O,w,Z,R=0;const y=new Uint8Array(L*U*4);for(Z=l;Z!==g;Z+=t)for(w=B;w!==A;w+=G,R++)O=N[R],y[4*(w+L*Z)+3]=255,y[4*(w+L*Z)+2]=d[3*O+0],y[4*(w+L*Z)+1]=d[3*O+1],y[4*(w+L*Z)+0]=d[3*O+2];return y},_getImageData16bits:function(k,M,F,l,t,g,B,G,A){const N=F,d=k.width,L=k.height;let U,O,w,Z=0;const R=new Uint8Array(d*L*4);for(w=l;w!==g;w+=t)for(O=B;O!==A;O+=G,Z+=2){U=N[Z+0]+(N[Z+1]<<8);const k=255*((31744&U)>>10)/31|0,M=255*((992&U)>>5)/31|0,F=255*(31&U)/31|0;R[4*(O+d*w)+0]=k,R[4*(O+d*w)+1]=M,R[4*(O+d*w)+2]=F,R[4*(O+d*w)+3]=32768&U?0:255}return R},_getImageData24bits:function(k,M,F,l,t,g,B,G,A){const N=F,d=k.width,L=k.height;let U,O,w=0;const Z=new Uint8Array(d*L*4);for(O=l;O!==g;O+=t)for(U=B;U!==A;U+=G,w+=3)Z[4*(U+d*O)+3]=255,Z[4*(U+d*O)+2]=N[w+0],Z[4*(U+d*O)+1]=N[w+1],Z[4*(U+d*O)+0]=N[w+2];return Z},_getImageData32bits:function(k,M,F,l,t,g,B,G,A){const N=F,d=k.width,L=k.height;let U,O,w=0;const Z=new Uint8Array(d*L*4);for(O=l;O!==g;O+=t)for(U=B;U!==A;U+=G,w+=4)Z[4*(U+d*O)+2]=N[w+0],Z[4*(U+d*O)+1]=N[w+1],Z[4*(U+d*O)+0]=N[w+2],Z[4*(U+d*O)+3]=N[w+3];return Z},_getImageDataGrey8bits:function(k,M,F,l,t,g,B,G,A){const N=F,d=k.width,L=k.height;let U,O,w,Z=0;const R=new Uint8Array(d*L*4);for(w=l;w!==g;w+=t)for(O=B;O!==A;O+=G,Z++)U=N[Z],R[4*(O+d*w)+0]=U,R[4*(O+d*w)+1]=U,R[4*(O+d*w)+2]=U,R[4*(O+d*w)+3]=255;return R},_getImageDataGrey16bits:function(k,M,F,l,t,g,B,G,A){const N=F,d=k.width,L=k.height;let U,O,w=0;const Z=new Uint8Array(d*L*4);for(O=l;O!==g;O+=t)for(U=B;U!==A;U+=G,w+=2)Z[4*(U+d*O)+0]=N[w+0],Z[4*(U+d*O)+1]=N[w+0],Z[4*(U+d*O)+2]=N[w+0],Z[4*(U+d*O)+3]=N[w+1];return Z}};class G{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(k,M,F){const l=new Uint8Array(k.buffer,k.byteOffset,k.byteLength),B=t(l);F(B.width,B.height,M.generateMipMaps,!1,(()=>{g(M,l)}))}}}}]);