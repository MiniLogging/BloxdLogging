"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[13],{2456:(a,x,Q)=>{Q.r(x),Q.d(x,{_TGATextureLoader:()=>C});var s=Q(507);function h(a){let x=0;return{id_length:a[x++],colormap_type:a[x++],image_type:a[x++],colormap_index:a[x++]|a[x++]<<8,colormap_length:a[x++]|a[x++]<<8,colormap_size:a[x++],origin:[a[x++]|a[x++]<<8,a[x++]|a[x++]<<8],width:a[x++]|a[x++]<<8,height:a[x++]|a[x++]<<8,pixel_size:a[x++],flags:a[x++]}}function D(a,x){if(x.length<19)return void s.d.Error("Unable to load TGA file - Not enough data to contain header");let Q=18;const D=h(x);if(D.id_length+Q>x.length)return void s.d.Error("Unable to load TGA file - Not enough data");Q+=D.id_length;let C,R=!1,U=!1,W=!1;switch(D.image_type){case 9:R=!0;case 1:U=!0;break;case 10:R=!0;case 2:break;case 11:R=!0;case 3:W=!0}const v=D.pixel_size>>3,e=D.width*D.height*v;let p,j,H,d,i,Z,y;if(U&&(p=x.subarray(Q,Q+=D.colormap_length*(D.colormap_size>>3))),R){let a,s,h;C=new Uint8Array(e);let D=0;const N=new Uint8Array(v);for(;Q<e&&D<e;)if(a=x[Q++],s=1+(127&a),128&a){for(h=0;h<v;++h)N[h]=x[Q++];for(h=0;h<s;++h)C.set(N,D+h*v);D+=v*s}else{for(s*=v,h=0;h<s;++h)C[D+h]=x[Q++];D+=s}}else C=x.subarray(Q,Q+=U?D.width*D.height:e);switch((48&D.flags)>>4){default:case 2:j=0,d=1,y=D.width,H=0,i=1,Z=D.height;break;case 0:j=0,d=1,y=D.width,H=D.height-1,i=-1,Z=-1;break;case 3:j=D.width-1,d=-1,y=-1,H=0,i=1,Z=D.height;break;case 1:j=D.width-1,d=-1,y=-1,H=D.height-1,i=-1,Z=-1}const k="_getImageData"+(W?"Grey":"")+D.pixel_size+"bits",F=N[k](D,p,C,H,i,Z,j,d,y);a.getEngine()._uploadDataToTextureDirectly(a,F)}const N={GetTGAHeader:h,UploadContent:D,_getImageData8bits:function(a,x,Q,s,h,D,N,C,R){const U=Q,W=x,v=a.width,e=a.height;let p,j,H,d=0;const i=new Uint8Array(v*e*4);for(H=s;H!==D;H+=h)for(j=N;j!==R;j+=C,d++)p=U[d],i[4*(j+v*H)+3]=255,i[4*(j+v*H)+2]=W[3*p+0],i[4*(j+v*H)+1]=W[3*p+1],i[4*(j+v*H)+0]=W[3*p+2];return i},_getImageData16bits:function(a,x,Q,s,h,D,N,C,R){const U=Q,W=a.width,v=a.height;let e,p,j,H=0;const d=new Uint8Array(W*v*4);for(j=s;j!==D;j+=h)for(p=N;p!==R;p+=C,H+=2){e=U[H+0]+(U[H+1]<<8);const a=255*((31744&e)>>10)/31|0,x=255*((992&e)>>5)/31|0,Q=255*(31&e)/31|0;d[4*(p+W*j)+0]=a,d[4*(p+W*j)+1]=x,d[4*(p+W*j)+2]=Q,d[4*(p+W*j)+3]=32768&e?0:255}return d},_getImageData24bits:function(a,x,Q,s,h,D,N,C,R){const U=Q,W=a.width,v=a.height;let e,p,j=0;const H=new Uint8Array(W*v*4);for(p=s;p!==D;p+=h)for(e=N;e!==R;e+=C,j+=3)H[4*(e+W*p)+3]=255,H[4*(e+W*p)+2]=U[j+0],H[4*(e+W*p)+1]=U[j+1],H[4*(e+W*p)+0]=U[j+2];return H},_getImageData32bits:function(a,x,Q,s,h,D,N,C,R){const U=Q,W=a.width,v=a.height;let e,p,j=0;const H=new Uint8Array(W*v*4);for(p=s;p!==D;p+=h)for(e=N;e!==R;e+=C,j+=4)H[4*(e+W*p)+2]=U[j+0],H[4*(e+W*p)+1]=U[j+1],H[4*(e+W*p)+0]=U[j+2],H[4*(e+W*p)+3]=U[j+3];return H},_getImageDataGrey8bits:function(a,x,Q,s,h,D,N,C,R){const U=Q,W=a.width,v=a.height;let e,p,j,H=0;const d=new Uint8Array(W*v*4);for(j=s;j!==D;j+=h)for(p=N;p!==R;p+=C,H++)e=U[H],d[4*(p+W*j)+0]=e,d[4*(p+W*j)+1]=e,d[4*(p+W*j)+2]=e,d[4*(p+W*j)+3]=255;return d},_getImageDataGrey16bits:function(a,x,Q,s,h,D,N,C,R){const U=Q,W=a.width,v=a.height;let e,p,j=0;const H=new Uint8Array(W*v*4);for(p=s;p!==D;p+=h)for(e=N;e!==R;e+=C,j+=2)H[4*(e+W*p)+0]=U[j+0],H[4*(e+W*p)+1]=U[j+0],H[4*(e+W*p)+2]=U[j+0],H[4*(e+W*p)+3]=U[j+1];return H}};class C{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(a,x,Q){const s=new Uint8Array(a.buffer,a.byteOffset,a.byteLength),N=h(s);Q(N.width,N.height,x.generateMipMaps,!1,(()=>{D(x,s)}))}}}}]);