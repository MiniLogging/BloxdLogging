"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[86],{14349:(h,V,i)=>{i.r(V),i.d(V,{FlowGraphReceiveCustomEventBlock:()=>q});var S=i(12846),l=i(10952),Y=i(11091),g=i(12787);class q extends S.d{constructor(h){super(h),this.config=h,this.initPriority=1;for(const V in this.config.eventData)this.registerDataOutput(V,this.config.eventData[V].type)}_preparePendingTasks(h){const V=h.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(V&&V.hasObservers()&&V.observers.length>g.e.MaxEventsPerType)return void this._reportError(h,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${g.e.MaxEventsPerType}.`);const i=V.add((V=>{const i=Object.keys(V);for(const l of i){var S;null===(S=this.getDataOutput(l))||void 0===S||S.setValue(V[l],h)}this._execute(h)}));h._setExecutionVariable(this,"_eventObserver",i)}_cancelPendingTasks(h){const V=h.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(V){const i=h._getExecutionVariable(this,"_eventObserver",null);V.remove(i)}else l.Tools.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(h,V){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,Y.f)("FlowGraphReceiveCustomEventBlock",q)}}]);