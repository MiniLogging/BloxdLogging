"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[86],{14482:(w,p,e)=>{e.r(p),e.d(p,{FlowGraphSwitchBlock:()=>q});var r=e(12891),I=e(12872),d=e(11038),f=e(12905);class q extends r.b{constructor(w){super(w),this.config=w,this.default=this._registerSignalOutput("default"),this._caseToOutputFlow=new Map,this.case=this.registerDataInput("case",I.c);const p=this.config.cases||[];for(const e of p)this._caseToOutputFlow.set(e,this._registerSignalOutput(`out_${e}`))}_execute(w,p){const e=this.case.getValue(w);let r;r=(0,f.o)(e)?this._getOutputFlowForCase((0,f.n)(e)):this._getOutputFlowForCase(e),r?r._activateSignal(w):this.default._activateSignal(w)}addCase(w){this.config.cases.includes(w)||(this.config.cases.push(w),this._caseToOutputFlow.set(w,this._registerSignalOutput(`out_${w}`)))}removeCase(w){if(!this.config.cases.includes(w))return;const p=this.config.cases.indexOf(w);this.config.cases.splice(p,1),this._caseToOutputFlow.delete(w)}_getOutputFlowForCase(w){return this._caseToOutputFlow.get(w)}getClassName(){return"FlowGraphSwitchBlock"}serialize(w){super.serialize(w),w.cases=this.config.cases}}(0,d.d)("FlowGraphSwitchBlock",q)}}]);