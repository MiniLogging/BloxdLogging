"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[86],{14445:(o,H,n)=>{n.r(H),n.d(H,{FlowGraphReceiveCustomEventBlock:()=>Y});var E=n(12972),k=n(11024),g=n(11140),O=n(12921);class Y extends E.d{constructor(o){super(o),this.config=o,this.initPriority=1;for(const H in this.config.eventData)this.registerDataOutput(H,this.config.eventData[H].type)}_preparePendingTasks(o){const H=o.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(H&&H.hasObservers()&&H.observers.length>O.e.MaxEventsPerType)return void this._reportError(o,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${O.e.MaxEventsPerType}.`);const n=H.add((H=>{const n=Object.keys(H);for(const k of n){var E;null===(E=this.getDataOutput(k))||void 0===E||E.setValue(H[k],o)}this._execute(o)}));o._setExecutionVariable(this,"_eventObserver",n)}_cancelPendingTasks(o){const H=o.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(H){const n=o._getExecutionVariable(this,"_eventObserver",null);H.remove(n)}else k.Tools.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(o,H){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,g.e)("FlowGraphReceiveCustomEventBlock",Y)}}]);