"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[86],{14617:(G,V,W)=>{W.r(V),W.d(V,{FlowGraphSwitchBlock:()=>z});var J=W(13084),R=W(13071),d=W(11159),k=W(13104);class z extends J.b{constructor(G){super(G),this.config=G,this.default=this._registerSignalOutput("default"),this._caseToOutputFlow=new Map,this.case=this.registerDataInput("case",R.b);const V=this.config.cases||[];for(const W of V)this._caseToOutputFlow.set(W,this._registerSignalOutput(`out_${W}`))}_execute(G,V){const W=this.case.getValue(G);let J;J=(0,k.t)(W)?this._getOutputFlowForCase((0,k.r)(W)):this._getOutputFlowForCase(W),J?J._activateSignal(G):this.default._activateSignal(G)}addCase(G){this.config.cases.includes(G)||(this.config.cases.push(G),this._caseToOutputFlow.set(G,this._registerSignalOutput(`out_${G}`)))}removeCase(G){if(!this.config.cases.includes(G))return;const V=this.config.cases.indexOf(G);this.config.cases.splice(V,1),this._caseToOutputFlow.delete(G)}_getOutputFlowForCase(G){return this._caseToOutputFlow.get(G)}getClassName(){return"FlowGraphSwitchBlock"}serialize(G){super.serialize(G),G.cases=this.config.cases}}(0,d.d)("FlowGraphSwitchBlock",z)}}]);