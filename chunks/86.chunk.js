"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[86],{14320:(q,S,b)=>{b.r(S),b.d(S,{FlowGraphReceiveCustomEventBlock:()=>g});var z=b(12860),C=b(10921),v=b(11058),U=b(12821);class g extends z.e{constructor(q){super(q),this.config=q,this.initPriority=1;for(const S in this.config.eventData)this.registerDataOutput(S,this.config.eventData[S].type)}_preparePendingTasks(q){const S=q.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(S&&S.hasObservers()&&S.observers.length>U.d.MaxEventsPerType)return void this._reportError(q,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${U.d.MaxEventsPerType}.`);const b=S.add((S=>{const b=Object.keys(S);for(const C of b){var z;null===(z=this.getDataOutput(C))||void 0===z||z.setValue(S[C],q)}this._execute(q)}));q._setExecutionVariable(this,"_eventObserver",b)}_cancelPendingTasks(q){const S=q.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(S){const b=q._getExecutionVariable(this,"_eventObserver",null);S.remove(b)}else C.Tools.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(q,S){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,v.f)("FlowGraphReceiveCustomEventBlock",g)}}]);