"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[86],{14393:(P,f,Y)=>{Y.r(f),Y.d(f,{FlowGraphReceiveCustomEventBlock:()=>o});var C=Y(12962),q=Y(11014),m=Y(11134),L=Y(12895);class o extends C.b{constructor(P){super(P),this.config=P,this.initPriority=1;for(const f in this.config.eventData)this.registerDataOutput(f,this.config.eventData[f].type)}_preparePendingTasks(P){const f=P.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(f&&f.hasObservers()&&f.observers.length>L.e.MaxEventsPerType)return void this._reportError(P,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${L.e.MaxEventsPerType}.`);const Y=f.add((f=>{const Y=Object.keys(f);for(const q of Y){var C;null===(C=this.getDataOutput(q))||void 0===C||C.setValue(f[q],P)}this._execute(P)}));P._setExecutionVariable(this,"_eventObserver",Y)}_cancelPendingTasks(P){const f=P.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(f){const Y=P._getExecutionVariable(this,"_eventObserver",null);f.remove(Y)}else q.Tools.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(P,f){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,m.d)("FlowGraphReceiveCustomEventBlock",o)}}]);