"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[86],{14454:(Z,x,F)=>{F.r(x),F.d(x,{FlowGraphReceiveCustomEventBlock:()=>j});var u=F(12996),G=F(10994),f=F(11136),Y=F(12936);class j extends u.e{constructor(Z){super(Z),this.config=Z,this.initPriority=1;for(const x in this.config.eventData)this.registerDataOutput(x,this.config.eventData[x].type)}_preparePendingTasks(Z){const x=Z.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(x&&x.hasObservers()&&x.observers.length>Y.d.MaxEventsPerType)return void this._reportError(Z,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${Y.d.MaxEventsPerType}.`);const F=x.add((x=>{const F=Object.keys(x);for(const G of F){var u;null===(u=this.getDataOutput(G))||void 0===u||u.setValue(x[G],Z)}this._execute(Z)}));Z._setExecutionVariable(this,"_eventObserver",F)}_cancelPendingTasks(Z){const x=Z.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(x){const F=Z._getExecutionVariable(this,"_eventObserver",null);x.remove(F)}else G.Tools.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(Z,x){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,f.g)("FlowGraphReceiveCustomEventBlock",j)}}]);