"use strict";(self["6xhfpmwgjr5"]=self["6xhfpmwgjr5"]||[]).push([[86],{16440:(P,a,R)=>{R.r(a),R.d(a,{_TGATextureLoader:()=>j});var S=R(14057);function A(P){let a=0;return{id_length:P[a++],colormap_type:P[a++],image_type:P[a++],colormap_index:P[a++]|P[a++]<<8,colormap_length:P[a++]|P[a++]<<8,colormap_size:P[a++],origin:[P[a++]|P[a++]<<8,P[a++]|P[a++]<<8],width:P[a++]|P[a++]<<8,height:P[a++]|P[a++]<<8,pixel_size:P[a++],flags:P[a++]}}function Z(P,a){if(a.length<19)return void S.d.Error("Unable to load TGA file - Not enough data to contain header");let R=18;const Z=A(a);if(Z.id_length+R>a.length)return void S.d.Error("Unable to load TGA file - Not enough data");R+=Z.id_length;let j,U=!1,Q=!1,h=!1;switch(Z.image_type){case 9:U=!0;case 1:Q=!0;break;case 10:U=!0;case 2:break;case 11:U=!0;case 3:h=!0}const l=Z.pixel_size>>3,V=Z.width*Z.height*l;let f,O,q,y,t,W,k;if(Q&&(f=a.subarray(R,R+=Z.colormap_length*(Z.colormap_size>>3))),U){let P,S,A;j=new Uint8Array(V);let Z=0;const p=new Uint8Array(l);for(;R<V&&Z<V;)if(P=a[R++],S=1+(127&P),128&P){for(A=0;A<l;++A)p[A]=a[R++];for(A=0;A<S;++A)j.set(p,Z+A*l);Z+=l*S}else{for(S*=l,A=0;A<S;++A)j[Z+A]=a[R++];Z+=S}}else j=a.subarray(R,R+=Q?Z.width*Z.height:V);switch((48&Z.flags)>>4){default:case 2:O=0,y=1,k=Z.width,q=0,t=1,W=Z.height;break;case 0:O=0,y=1,k=Z.width,q=Z.height-1,t=-1,W=-1;break;case 3:O=Z.width-1,y=-1,k=-1,q=0,t=1,W=Z.height;break;case 1:O=Z.width-1,y=-1,k=-1,q=Z.height-1,t=-1,W=-1}const x="_getImageData"+(h?"Grey":"")+Z.pixel_size+"bits",s=p[x](Z,f,j,q,t,W,O,y,k);P.getEngine()._uploadDataToTextureDirectly(P,s)}const p={GetTGAHeader:A,UploadContent:Z,_getImageData8bits:function(P,a,R,S,A,Z,p,j,U){const Q=R,h=a,l=P.width,V=P.height;let f,O,q,y=0;const t=new Uint8Array(l*V*4);for(q=S;q!==Z;q+=A)for(O=p;O!==U;O+=j,y++)f=Q[y],t[4*(O+l*q)+3]=255,t[4*(O+l*q)+2]=h[3*f+0],t[4*(O+l*q)+1]=h[3*f+1],t[4*(O+l*q)+0]=h[3*f+2];return t},_getImageData16bits:function(P,a,R,S,A,Z,p,j,U){const Q=R,h=P.width,l=P.height;let V,f,O,q=0;const y=new Uint8Array(h*l*4);for(O=S;O!==Z;O+=A)for(f=p;f!==U;f+=j,q+=2){V=Q[q+0]+(Q[q+1]<<8);const P=255*((31744&V)>>10)/31|0,a=255*((992&V)>>5)/31|0,R=255*(31&V)/31|0;y[4*(f+h*O)+0]=P,y[4*(f+h*O)+1]=a,y[4*(f+h*O)+2]=R,y[4*(f+h*O)+3]=32768&V?0:255}return y},_getImageData24bits:function(P,a,R,S,A,Z,p,j,U){const Q=R,h=P.width,l=P.height;let V,f,O=0;const q=new Uint8Array(h*l*4);for(f=S;f!==Z;f+=A)for(V=p;V!==U;V+=j,O+=3)q[4*(V+h*f)+3]=255,q[4*(V+h*f)+2]=Q[O+0],q[4*(V+h*f)+1]=Q[O+1],q[4*(V+h*f)+0]=Q[O+2];return q},_getImageData32bits:function(P,a,R,S,A,Z,p,j,U){const Q=R,h=P.width,l=P.height;let V,f,O=0;const q=new Uint8Array(h*l*4);for(f=S;f!==Z;f+=A)for(V=p;V!==U;V+=j,O+=4)q[4*(V+h*f)+2]=Q[O+0],q[4*(V+h*f)+1]=Q[O+1],q[4*(V+h*f)+0]=Q[O+2],q[4*(V+h*f)+3]=Q[O+3];return q},_getImageDataGrey8bits:function(P,a,R,S,A,Z,p,j,U){const Q=R,h=P.width,l=P.height;let V,f,O,q=0;const y=new Uint8Array(h*l*4);for(O=S;O!==Z;O+=A)for(f=p;f!==U;f+=j,q++)V=Q[q],y[4*(f+h*O)+0]=V,y[4*(f+h*O)+1]=V,y[4*(f+h*O)+2]=V,y[4*(f+h*O)+3]=255;return y},_getImageDataGrey16bits:function(P,a,R,S,A,Z,p,j,U){const Q=R,h=P.width,l=P.height;let V,f,O=0;const q=new Uint8Array(h*l*4);for(f=S;f!==Z;f+=A)for(V=p;V!==U;V+=j,O+=2)q[4*(V+h*f)+0]=Q[O+0],q[4*(V+h*f)+1]=Q[O+0],q[4*(V+h*f)+2]=Q[O+0],q[4*(V+h*f)+3]=Q[O+1];return q}};class j{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(P,a,R){const S=new Uint8Array(P.buffer,P.byteOffset,P.byteLength),p=A(S);R(p.width,p.height,a.generateMipMaps,!1,(()=>{Z(a,S)}))}}}}]);