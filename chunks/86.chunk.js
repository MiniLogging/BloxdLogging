"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[86],{14494:(V,I,m)=>{m.r(I),m.d(I,{FlowGraphSwitchBlock:()=>k});var C=m(12914),l=m(12899),s=m(11048),F=m(12926);class k extends C.b{constructor(V){super(V),this.config=V,this.default=this._registerSignalOutput("default"),this._caseToOutputFlow=new Map,this.case=this.registerDataInput("case",l.b);const I=this.config.cases||[];for(const m of I)this._caseToOutputFlow.set(m,this._registerSignalOutput(`out_${m}`))}_execute(V,I){const m=this.case.getValue(V);let C;C=(0,F.p)(m)?this._getOutputFlowForCase((0,F.l)(m)):this._getOutputFlowForCase(m),C?C._activateSignal(V):this.default._activateSignal(V)}addCase(V){this.config.cases.includes(V)||(this.config.cases.push(V),this._caseToOutputFlow.set(V,this._registerSignalOutput(`out_${V}`)))}removeCase(V){if(!this.config.cases.includes(V))return;const I=this.config.cases.indexOf(V);this.config.cases.splice(I,1),this._caseToOutputFlow.delete(V)}_getOutputFlowForCase(V){return this._caseToOutputFlow.get(V)}getClassName(){return"FlowGraphSwitchBlock"}serialize(V){super.serialize(V),V.cases=this.config.cases}}(0,s.h)("FlowGraphSwitchBlock",k)}}]);