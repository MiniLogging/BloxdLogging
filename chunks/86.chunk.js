"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[86],{14392:(B,I,C)=>{C.r(I),C.d(I,{FlowGraphReceiveCustomEventBlock:()=>L});var M=C(12945),x=C(11018),y=C(11149),f=C(12880);class L extends M.d{constructor(B){super(B),this.config=B,this.initPriority=1;for(const I in this.config.eventData)this.registerDataOutput(I,this.config.eventData[I].type)}_preparePendingTasks(B){const I=B.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(I&&I.hasObservers()&&I.observers.length>f.d.MaxEventsPerType)return void this._reportError(B,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${f.d.MaxEventsPerType}.`);const C=I.add((I=>{const C=Object.keys(I);for(const x of C){var M;null===(M=this.getDataOutput(x))||void 0===M||M.setValue(I[x],B)}this._execute(B)}));B._setExecutionVariable(this,"_eventObserver",C)}_cancelPendingTasks(B){const I=B.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(I){const C=B._getExecutionVariable(this,"_eventObserver",null);I.remove(C)}else x.Tools.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(B,I){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,y.h)("FlowGraphReceiveCustomEventBlock",L)}}]);