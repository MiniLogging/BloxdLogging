"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[86],{14450:(Z,c,L)=>{L.r(c),L.d(c,{FlowGraphSwitchBlock:()=>V});var k=L(12839),N=L(12825),R=L(11012),G=L(12858);class V extends k.b{constructor(Z){super(Z),this.config=Z,this.default=this._registerSignalOutput("default"),this._caseToOutputFlow=new Map,this.case=this.registerDataInput("case",N.e);const c=this.config.cases||[];for(const L of c)this._caseToOutputFlow.set(L,this._registerSignalOutput(`out_${L}`))}_execute(Z,c){const L=this.case.getValue(Z);let k;k=(0,G.u)(L)?this._getOutputFlowForCase((0,G.q)(L)):this._getOutputFlowForCase(L),k?k._activateSignal(Z):this.default._activateSignal(Z)}addCase(Z){this.config.cases.includes(Z)||(this.config.cases.push(Z),this._caseToOutputFlow.set(Z,this._registerSignalOutput(`out_${Z}`)))}removeCase(Z){if(!this.config.cases.includes(Z))return;const c=this.config.cases.indexOf(Z);this.config.cases.splice(c,1),this._caseToOutputFlow.delete(Z)}_getOutputFlowForCase(Z){return this._caseToOutputFlow.get(Z)}getClassName(){return"FlowGraphSwitchBlock"}serialize(Z){super.serialize(Z),Z.cases=this.config.cases}}(0,R.g)("FlowGraphSwitchBlock",V)}}]);