"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[86],{14309:(g,w,q)=>{q.r(w),q.d(w,{FlowGraphReceiveCustomEventBlock:()=>i});var R=q(12875),o=q(10991),r=q(11128),S=q(12814);class i extends R.c{constructor(g){super(g),this.config=g,this.initPriority=1;for(const w in this.config.eventData)this.registerDataOutput(w,this.config.eventData[w].type)}_preparePendingTasks(g){const w=g.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(w&&w.hasObservers()&&w.observers.length>S.b.MaxEventsPerType)return void this._reportError(g,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${S.b.MaxEventsPerType}.`);const q=w.add((w=>{const q=Object.keys(w);for(const o of q){var R;null===(R=this.getDataOutput(o))||void 0===R||R.setValue(w[o],g)}this._execute(g)}));g._setExecutionVariable(this,"_eventObserver",q)}_cancelPendingTasks(g){const w=g.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(w){const q=g._getExecutionVariable(this,"_eventObserver",null);w.remove(q)}else o.Tools.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(g,w){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,r.g)("FlowGraphReceiveCustomEventBlock",i)}}]);