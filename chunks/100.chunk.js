"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[100],{14368:(g,w,q)=>{q.r(w),q.d(w,{FlowGraphThrottleBlock:()=>S});var R=q(12836),o=q(12879),r=q(11128);class S extends o.c{constructor(g){super(g),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",R.w),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",R.w,NaN)}_execute(g,w){if(w===this.reset)return this.lastRemainingTime.setValue(NaN,g),g._setExecutionVariable(this,"lastRemainingTime",NaN),void g._setExecutionVariable(this,"timestamp",0);const q=this.duration.getValue(g);if(q<=0||isNaN(q)||!isFinite(q))return this._reportError(g,"Invalid duration in Throttle block");const R=g._getExecutionVariable(this,"lastRemainingTime",NaN),o=Date.now();if(isNaN(R))return this.lastRemainingTime.setValue(0,g),g._setExecutionVariable(this,"lastRemainingTime",0),g._setExecutionVariable(this,"timestamp",o),this.out._activateSignal(g);{const w=o-g._getExecutionVariable(this,"timestamp",0),R=1e3*q;if(R<=w)return this.lastRemainingTime.setValue(0,g),g._setExecutionVariable(this,"lastRemainingTime",0),g._setExecutionVariable(this,"timestamp",o),this.out._activateSignal(g);{const q=R-w;this.lastRemainingTime.setValue(q/1e3,g),g._setExecutionVariable(this,"lastRemainingTime",q)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,r.g)("FlowGraphThrottleBlock",S)}}]);