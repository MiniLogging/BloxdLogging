"use strict";(self.ufnpnb83drd=self.ufnpnb83drd||[]).push([[100],{15655:(E,U,g)=>{g.r(U),g.d(U,{FlowGraphThrottleBlock:()=>S});var N=g(14058),L=g(14100),D=g(12292);class S extends L.e{constructor(E){super(E),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",N.t),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",N.t,NaN)}_execute(E,U){if(U===this.reset)return this.lastRemainingTime.setValue(NaN,E),E._setExecutionVariable(this,"lastRemainingTime",NaN),void E._setExecutionVariable(this,"timestamp",0);const g=this.duration.getValue(E);if(g<=0||isNaN(g)||!isFinite(g))return this._reportError(E,"Invalid duration in Throttle block");const N=E._getExecutionVariable(this,"lastRemainingTime",NaN),L=Date.now();if(isNaN(N))return this.lastRemainingTime.setValue(0,E),E._setExecutionVariable(this,"lastRemainingTime",0),E._setExecutionVariable(this,"timestamp",L),this.out._activateSignal(E);{const U=L-E._getExecutionVariable(this,"timestamp",0),N=1e3*g;if(N<=U)return this.lastRemainingTime.setValue(0,E),E._setExecutionVariable(this,"lastRemainingTime",0),E._setExecutionVariable(this,"timestamp",L),this.out._activateSignal(E);{const g=N-U;this.lastRemainingTime.setValue(g/1e3,E),E._setExecutionVariable(this,"lastRemainingTime",g)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,D.f)("FlowGraphThrottleBlock",S)}}]);