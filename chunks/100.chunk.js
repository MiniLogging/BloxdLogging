"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[100],{14410:(q,S,b)=>{b.r(S),b.d(S,{FlowGraphThrottleBlock:()=>U});var z=b(12839),C=b(12866),v=b(11058);class U extends C.e{constructor(q){super(q),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",z.o),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",z.o,NaN)}_execute(q,S){if(S===this.reset)return this.lastRemainingTime.setValue(NaN,q),q._setExecutionVariable(this,"lastRemainingTime",NaN),void q._setExecutionVariable(this,"timestamp",0);const b=this.duration.getValue(q);if(b<=0||isNaN(b)||!isFinite(b))return this._reportError(q,"Invalid duration in Throttle block");const z=q._getExecutionVariable(this,"lastRemainingTime",NaN),C=Date.now();if(isNaN(z))return this.lastRemainingTime.setValue(0,q),q._setExecutionVariable(this,"lastRemainingTime",0),q._setExecutionVariable(this,"timestamp",C),this.out._activateSignal(q);{const S=C-q._getExecutionVariable(this,"timestamp",0),z=1e3*b;if(z<=S)return this.lastRemainingTime.setValue(0,q),q._setExecutionVariable(this,"lastRemainingTime",0),q._setExecutionVariable(this,"timestamp",C),this.out._activateSignal(q);{const b=z-S;this.lastRemainingTime.setValue(b/1e3,q),q._setExecutionVariable(this,"lastRemainingTime",b)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,v.f)("FlowGraphThrottleBlock",U)}}]);