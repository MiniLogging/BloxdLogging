"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[100],{14534:(Z,x,F)=>{F.r(x),F.d(x,{FlowGraphThrottleBlock:()=>Y});var u=F(12954),G=F(13007),f=F(11136);class Y extends G.e{constructor(Z){super(Z),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",u.u),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",u.u,NaN)}_execute(Z,x){if(x===this.reset)return this.lastRemainingTime.setValue(NaN,Z),Z._setExecutionVariable(this,"lastRemainingTime",NaN),void Z._setExecutionVariable(this,"timestamp",0);const F=this.duration.getValue(Z);if(F<=0||isNaN(F)||!isFinite(F))return this._reportError(Z,"Invalid duration in Throttle block");const u=Z._getExecutionVariable(this,"lastRemainingTime",NaN),G=Date.now();if(isNaN(u))return this.lastRemainingTime.setValue(0,Z),Z._setExecutionVariable(this,"lastRemainingTime",0),Z._setExecutionVariable(this,"timestamp",G),this.out._activateSignal(Z);{const x=G-Z._getExecutionVariable(this,"timestamp",0),u=1e3*F;if(u<=x)return this.lastRemainingTime.setValue(0,Z),Z._setExecutionVariable(this,"lastRemainingTime",0),Z._setExecutionVariable(this,"timestamp",G),this.out._activateSignal(Z);{const F=u-x;this.lastRemainingTime.setValue(F/1e3,Z),Z._setExecutionVariable(this,"lastRemainingTime",F)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,f.g)("FlowGraphThrottleBlock",Y)}}]);