"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[100],{14438:(h,V,i)=>{i.r(V),i.d(V,{FlowGraphThrottleBlock:()=>g});var S=i(12805),l=i(12861),Y=i(11091);class g extends l.e{constructor(h){super(h),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",S.u),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",S.u,NaN)}_execute(h,V){if(V===this.reset)return this.lastRemainingTime.setValue(NaN,h),h._setExecutionVariable(this,"lastRemainingTime",NaN),void h._setExecutionVariable(this,"timestamp",0);const i=this.duration.getValue(h);if(i<=0||isNaN(i)||!isFinite(i))return this._reportError(h,"Invalid duration in Throttle block");const S=h._getExecutionVariable(this,"lastRemainingTime",NaN),l=Date.now();if(isNaN(S))return this.lastRemainingTime.setValue(0,h),h._setExecutionVariable(this,"lastRemainingTime",0),h._setExecutionVariable(this,"timestamp",l),this.out._activateSignal(h);{const V=l-h._getExecutionVariable(this,"timestamp",0),S=1e3*i;if(S<=V)return this.lastRemainingTime.setValue(0,h),h._setExecutionVariable(this,"lastRemainingTime",0),h._setExecutionVariable(this,"timestamp",l),this.out._activateSignal(h);{const i=S-V;this.lastRemainingTime.setValue(i/1e3,h),h._setExecutionVariable(this,"lastRemainingTime",i)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,Y.f)("FlowGraphThrottleBlock",g)}}]);