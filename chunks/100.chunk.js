"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[100],{14463:(B,I,C)=>{C.r(I),C.d(I,{FlowGraphThrottleBlock:()=>f});var M=C(12901),x=C(12952),y=C(11149);class f extends x.b{constructor(B){super(B),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",M.m),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",M.m,NaN)}_execute(B,I){if(I===this.reset)return this.lastRemainingTime.setValue(NaN,B),B._setExecutionVariable(this,"lastRemainingTime",NaN),void B._setExecutionVariable(this,"timestamp",0);const C=this.duration.getValue(B);if(C<=0||isNaN(C)||!isFinite(C))return this._reportError(B,"Invalid duration in Throttle block");const M=B._getExecutionVariable(this,"lastRemainingTime",NaN),x=Date.now();if(isNaN(M))return this.lastRemainingTime.setValue(0,B),B._setExecutionVariable(this,"lastRemainingTime",0),B._setExecutionVariable(this,"timestamp",x),this.out._activateSignal(B);{const I=x-B._getExecutionVariable(this,"timestamp",0),M=1e3*C;if(M<=I)return this.lastRemainingTime.setValue(0,B),B._setExecutionVariable(this,"lastRemainingTime",0),B._setExecutionVariable(this,"timestamp",x),this.out._activateSignal(B);{const C=M-I;this.lastRemainingTime.setValue(C/1e3,B),B._setExecutionVariable(this,"lastRemainingTime",C)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,y.h)("FlowGraphThrottleBlock",f)}}]);