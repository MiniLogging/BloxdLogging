"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[100],{14463:(P,f,Y)=>{Y.r(f),Y.d(f,{FlowGraphThrottleBlock:()=>L});var C=Y(12917),q=Y(12974),m=Y(11134);class L extends q.d{constructor(P){super(P),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",C.o),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",C.o,NaN)}_execute(P,f){if(f===this.reset)return this.lastRemainingTime.setValue(NaN,P),P._setExecutionVariable(this,"lastRemainingTime",NaN),void P._setExecutionVariable(this,"timestamp",0);const Y=this.duration.getValue(P);if(Y<=0||isNaN(Y)||!isFinite(Y))return this._reportError(P,"Invalid duration in Throttle block");const C=P._getExecutionVariable(this,"lastRemainingTime",NaN),q=Date.now();if(isNaN(C))return this.lastRemainingTime.setValue(0,P),P._setExecutionVariable(this,"lastRemainingTime",0),P._setExecutionVariable(this,"timestamp",q),this.out._activateSignal(P);{const f=q-P._getExecutionVariable(this,"timestamp",0),C=1e3*Y;if(C<=f)return this.lastRemainingTime.setValue(0,P),P._setExecutionVariable(this,"lastRemainingTime",0),P._setExecutionVariable(this,"timestamp",q),this.out._activateSignal(P);{const Y=C-f;this.lastRemainingTime.setValue(Y/1e3,P),P._setExecutionVariable(this,"lastRemainingTime",Y)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,m.d)("FlowGraphThrottleBlock",L)}}]);