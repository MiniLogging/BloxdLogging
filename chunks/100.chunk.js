"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[100],{14469:(Q,X,C)=>{C.r(X),C.d(X,{FlowGraphSetVariableBlock:()=>f});var l=C(620),h=C(13120),M=C(13063);class f extends h.c{constructor(Q){if(super(Q),!Q.variable&&!Q.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(Q.variables&&Q.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(Q.variables)for(const X of Q.variables)this.registerDataInput(X,M.d);else this.registerDataInput("value",M.d)}_execute(Q,X){var C,l;if(null!==(C=this.config)&&void 0!==C&&C.variables)for(const h of this.config.variables)this._saveVariable(Q,h);else this._saveVariable(Q,null===(l=this.config)||void 0===l?void 0:l.variable,"value");this.out._activateSignal(Q)}_saveVariable(Q,X,C){var l;const h=Q._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const f of h){const C=Q.assetsContext.animationGroups.find((Q=>Q.uniqueId==f));if(C)for(const l of C.targetedAnimations)if(l.target===Q&&l.animation.targetProperty===X){C.stop();const X=h.indexOf(f);X>-1&&h.splice(X,1),Q._setGlobalContextVariable("currentlyRunningAnimationGroups",h);break}}const M=null===(l=this.getDataInput(C||X))||void 0===l?void 0:l.getValue(Q);Q.setVariable(X,M)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(Q){var X;super.serialize(Q),Q.config.variable=null===(X=this.config)||void 0===X?void 0:X.variable}}(0,l.g)("FlowGraphSetVariableBlock",f)}}]);