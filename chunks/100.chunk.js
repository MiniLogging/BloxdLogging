"use strict";(self["3gghkoft8x"]=self["3gghkoft8x"]||[]).push([[100],{15595:(y,S,I)=>{I.r(S),I.d(S,{FlowGraphThrottleBlock:()=>B});var V=I(14033),i=I(14080),A=I(12282);class B extends i.d{constructor(y){super(y),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",V.t),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",V.t,NaN)}_execute(y,S){if(S===this.reset)return this.lastRemainingTime.setValue(NaN,y),y._setExecutionVariable(this,"lastRemainingTime",NaN),void y._setExecutionVariable(this,"timestamp",0);const I=this.duration.getValue(y);if(I<=0||isNaN(I)||!isFinite(I))return this._reportError(y,"Invalid duration in Throttle block");const V=y._getExecutionVariable(this,"lastRemainingTime",NaN),i=Date.now();if(isNaN(V))return this.lastRemainingTime.setValue(0,y),y._setExecutionVariable(this,"lastRemainingTime",0),y._setExecutionVariable(this,"timestamp",i),this.out._activateSignal(y);{const S=i-y._getExecutionVariable(this,"timestamp",0),V=1e3*I;if(V<=S)return this.lastRemainingTime.setValue(0,y),y._setExecutionVariable(this,"lastRemainingTime",0),y._setExecutionVariable(this,"timestamp",i),this.out._activateSignal(y);{const I=V-S;this.lastRemainingTime.setValue(I/1e3,y),y._setExecutionVariable(this,"lastRemainingTime",I)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,A.e)("FlowGraphThrottleBlock",B)}}]);