"use strict";(self["1kjc9ee3uyt"]=self["1kjc9ee3uyt"]||[]).push([[100],{14824:(w,E,G)=>{G.r(E),G.d(E,{FlowGraphThrottleBlock:()=>y});var P=G(13281),h=G(13330),B=G(11646);class y extends h.d{constructor(w){super(w),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",P.r),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",P.r,NaN)}_execute(w,E){if(E===this.reset)return this.lastRemainingTime.setValue(NaN,w),w._setExecutionVariable(this,"lastRemainingTime",NaN),void w._setExecutionVariable(this,"timestamp",0);const G=this.duration.getValue(w);if(G<=0||isNaN(G)||!isFinite(G))return this._reportError(w,"Invalid duration in Throttle block");const P=w._getExecutionVariable(this,"lastRemainingTime",NaN),h=Date.now();if(isNaN(P))return this.lastRemainingTime.setValue(0,w),w._setExecutionVariable(this,"lastRemainingTime",0),w._setExecutionVariable(this,"timestamp",h),this.out._activateSignal(w);{const E=h-w._getExecutionVariable(this,"timestamp",0),P=1e3*G;if(P<=E)return this.lastRemainingTime.setValue(0,w),w._setExecutionVariable(this,"lastRemainingTime",0),w._setExecutionVariable(this,"timestamp",h),this.out._activateSignal(w);{const G=P-E;this.lastRemainingTime.setValue(G/1e3,w),w._setExecutionVariable(this,"lastRemainingTime",G)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,B.g)("FlowGraphThrottleBlock",y)}}]);