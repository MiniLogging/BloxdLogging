"use strict";(self.lfntwv94xlc=self.lfntwv94xlc||[]).push([[100],{14674:(m,S,h)=>{h.r(S),h.d(S,{FlowGraphThrottleBlock:()=>u});var l=h(13060),M=h(13107),O=h(11293);class u extends M.c{constructor(m){super(m),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",l.p),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",l.p,NaN)}_execute(m,S){if(S===this.reset)return this.lastRemainingTime.setValue(NaN,m),m._setExecutionVariable(this,"lastRemainingTime",NaN),void m._setExecutionVariable(this,"timestamp",0);const h=this.duration.getValue(m);if(h<=0||isNaN(h)||!isFinite(h))return this._reportError(m,"Invalid duration in Throttle block");const l=m._getExecutionVariable(this,"lastRemainingTime",NaN),M=Date.now();if(isNaN(l))return this.lastRemainingTime.setValue(0,m),m._setExecutionVariable(this,"lastRemainingTime",0),m._setExecutionVariable(this,"timestamp",M),this.out._activateSignal(m);{const S=M-m._getExecutionVariable(this,"timestamp",0),l=1e3*h;if(l<=S)return this.lastRemainingTime.setValue(0,m),m._setExecutionVariable(this,"lastRemainingTime",0),m._setExecutionVariable(this,"timestamp",M),this.out._activateSignal(m);{const h=l-S;this.lastRemainingTime.setValue(h/1e3,m),m._setExecutionVariable(this,"lastRemainingTime",h)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,O.e)("FlowGraphThrottleBlock",u)}}]);