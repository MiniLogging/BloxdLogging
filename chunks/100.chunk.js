"use strict";(self.hbnkweqmycf=self.hbnkweqmycf||[]).push([[100],{14888:(F,P,f)=>{f.r(P),f.d(P,{FlowGraphThrottleBlock:()=>H});var c=f(13265),N=f(13312),q=f(11587);class H extends N.d{constructor(F){super(F),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",c.o),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",c.o,NaN)}_execute(F,P){if(P===this.reset)return this.lastRemainingTime.setValue(NaN,F),F._setExecutionVariable(this,"lastRemainingTime",NaN),void F._setExecutionVariable(this,"timestamp",0);const f=this.duration.getValue(F);if(f<=0||isNaN(f)||!isFinite(f))return this._reportError(F,"Invalid duration in Throttle block");const c=F._getExecutionVariable(this,"lastRemainingTime",NaN),N=Date.now();if(isNaN(c))return this.lastRemainingTime.setValue(0,F),F._setExecutionVariable(this,"lastRemainingTime",0),F._setExecutionVariable(this,"timestamp",N),this.out._activateSignal(F);{const P=N-F._getExecutionVariable(this,"timestamp",0),c=1e3*f;if(c<=P)return this.lastRemainingTime.setValue(0,F),F._setExecutionVariable(this,"lastRemainingTime",0),F._setExecutionVariable(this,"timestamp",N),this.out._activateSignal(F);{const f=c-P;this.lastRemainingTime.setValue(f/1e3,F),F._setExecutionVariable(this,"lastRemainingTime",f)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,q.f)("FlowGraphThrottleBlock",H)}}]);