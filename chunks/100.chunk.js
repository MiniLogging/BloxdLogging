"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[100],{14521:(o,H,n)=>{n.r(H),n.d(H,{FlowGraphThrottleBlock:()=>O});var E=n(12933),k=n(12983),g=n(11140);class O extends k.c{constructor(o){super(o),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",E.r),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",E.r,NaN)}_execute(o,H){if(H===this.reset)return this.lastRemainingTime.setValue(NaN,o),o._setExecutionVariable(this,"lastRemainingTime",NaN),void o._setExecutionVariable(this,"timestamp",0);const n=this.duration.getValue(o);if(n<=0||isNaN(n)||!isFinite(n))return this._reportError(o,"Invalid duration in Throttle block");const E=o._getExecutionVariable(this,"lastRemainingTime",NaN),k=Date.now();if(isNaN(E))return this.lastRemainingTime.setValue(0,o),o._setExecutionVariable(this,"lastRemainingTime",0),o._setExecutionVariable(this,"timestamp",k),this.out._activateSignal(o);{const H=k-o._getExecutionVariable(this,"timestamp",0),E=1e3*n;if(E<=H)return this.lastRemainingTime.setValue(0,o),o._setExecutionVariable(this,"lastRemainingTime",0),o._setExecutionVariable(this,"timestamp",k),this.out._activateSignal(o);{const n=E-H;this.lastRemainingTime.setValue(n/1e3,o),o._setExecutionVariable(this,"lastRemainingTime",n)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,g.e)("FlowGraphThrottleBlock",O)}}]);