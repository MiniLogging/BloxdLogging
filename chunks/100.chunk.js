"use strict";(self.b15p7b72fr8=self.b15p7b72fr8||[]).push([[100],{15917:(s,k,h)=>{h.r(k),h.d(k,{FlowGraphThrottleBlock:()=>i});var A=h(14315),g=h(14351),ms=h(12543);class i extends g.d{constructor(s){super(s),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",A.m),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",A.m,NaN)}_execute(s,k){if(k===this.reset)return this.lastRemainingTime.setValue(NaN,s),s._setExecutionVariable(this,"lastRemainingTime",NaN),void s._setExecutionVariable(this,"timestamp",0);const h=this.duration.getValue(s);if(h<=0||isNaN(h)||!isFinite(h))return this._reportError(s,"Invalid duration in Throttle block");const A=s._getExecutionVariable(this,"lastRemainingTime",NaN),g=Date.now();if(isNaN(A))return this.lastRemainingTime.setValue(0,s),s._setExecutionVariable(this,"lastRemainingTime",0),s._setExecutionVariable(this,"timestamp",g),this.out._activateSignal(s);{const k=g-s._getExecutionVariable(this,"timestamp",0),A=1e3*h;if(A<=k)return this.lastRemainingTime.setValue(0,s),s._setExecutionVariable(this,"lastRemainingTime",0),s._setExecutionVariable(this,"timestamp",g),this.out._activateSignal(s);{const h=A-k;this.lastRemainingTime.setValue(h/1e3,s),s._setExecutionVariable(this,"lastRemainingTime",h)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,ms.f)("FlowGraphThrottleBlock",i)}}]);