"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[100],{14115:(U,W,l)=>{l.r(W),l.d(W,{FlowGraphSetVariableBlock:()=>p});var M=l(655),t=l(12766),L=l(12704);class p extends t.e{constructor(U){if(super(U),!U.variable&&!U.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(U.variables&&U.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(U.variables)for(const W of U.variables)this.registerDataInput(W,L.d);else this.registerDataInput("value",L.d)}_execute(U,W){var l,M;if(null!==(l=this.config)&&void 0!==l&&l.variables)for(const t of this.config.variables)this._saveVariable(U,t);else this._saveVariable(U,null===(M=this.config)||void 0===M?void 0:M.variable,"value");this.out._activateSignal(U)}_saveVariable(U,W,l){var M;const t=U._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const p of t){const l=U.assetsContext.animationGroups.find((U=>U.uniqueId==p));if(l)for(const M of l.targetedAnimations)if(M.target===U&&M.animation.targetProperty===W){l.stop();const W=t.indexOf(p);W>-1&&t.splice(W,1),U._setGlobalContextVariable("currentlyRunningAnimationGroups",t);break}}const L=null===(M=this.getDataInput(l||W))||void 0===M?void 0:M.getValue(U);U.setVariable(W,L)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(U){var W;super.serialize(U),U.config.variable=null===(W=this.config)||void 0===W?void 0:W.variable}}(0,M.f)("FlowGraphSetVariableBlock",p)}}]);