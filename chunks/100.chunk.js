"use strict";(self.yg1iw12lizp=self.yg1iw12lizp||[]).push([[100],{15930:(L,U,x)=>{x.r(U),x.d(U,{FlowGraphThrottleBlock:()=>F});var mL=x(14348),p=x(14401),G=x(12547);class F extends p.d{constructor(L){super(L),this.reset=this._registerSignalInput("reset"),this.duration=this.registerDataInput("duration",mL.u),this.lastRemainingTime=this.registerDataOutput("lastRemainingTime",mL.u,NaN)}_execute(L,U){if(U===this.reset)return this.lastRemainingTime.setValue(NaN,L),L._setExecutionVariable(this,"lastRemainingTime",NaN),void L._setExecutionVariable(this,"timestamp",0);const x=this.duration.getValue(L);if(x<=0||isNaN(x)||!isFinite(x))return this._reportError(L,"Invalid duration in Throttle block");const mL=L._getExecutionVariable(this,"lastRemainingTime",NaN),p=Date.now();if(isNaN(mL))return this.lastRemainingTime.setValue(0,L),L._setExecutionVariable(this,"lastRemainingTime",0),L._setExecutionVariable(this,"timestamp",p),this.out._activateSignal(L);{const U=p-L._getExecutionVariable(this,"timestamp",0),mL=1e3*x;if(mL<=U)return this.lastRemainingTime.setValue(0,L),L._setExecutionVariable(this,"lastRemainingTime",0),L._setExecutionVariable(this,"timestamp",p),this.out._activateSignal(L);{const x=mL-U;this.lastRemainingTime.setValue(x/1e3,L),L._setExecutionVariable(this,"lastRemainingTime",x)}}}getClassName(){return"FlowGraphThrottleBlock"}}(0,G.d)("FlowGraphThrottleBlock",F)}}]);