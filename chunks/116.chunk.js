"use strict";(self.z22hkk7o33f=self.z22hkk7o33f||[]).push([[116],{15797:(U,G,C)=>{C.r(G),C.d(G,{FlowGraphSetVariableBlock:()=>t});var L=C(12850),X=C(14188),l=C(14134);class t extends X.d{constructor(U){if(super(U),!U.variable&&!U.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(U.variables&&U.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(U.variables)for(const G of U.variables)this.registerDataInput(G,l.c);else this.registerDataInput("value",l.c)}_execute(U,G){var C,L;if(null!==(C=this.config)&&void 0!==C&&C.variables)for(const X of this.config.variables)this._saveVariable(U,X);else this._saveVariable(U,null===(L=this.config)||void 0===L?void 0:L.variable,"value");this.out._activateSignal(U)}_saveVariable(U,G,C){var L;const X=U._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const t of X){const C=U.assetsContext.animationGroups.find((U=>U.uniqueId==t));if(C)for(const L of C.targetedAnimations)if(L.target===U&&L.animation.targetProperty===G){C.stop();const G=X.indexOf(t);G>-1&&X.splice(G,1),U._setGlobalContextVariable("currentlyRunningAnimationGroups",X);break}}const l=null===(L=this.getDataInput(C||G))||void 0===L?void 0:L.getValue(U);U.setVariable(G,l)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(U){var G;super.serialize(U),U.config.variable=null===(G=this.config)||void 0===G?void 0:G.variable}}(0,L.e)("FlowGraphSetVariableBlock",t)}}]);