"use strict";(self.pp3k1ov3ibi=self.pp3k1ov3ibi||[]).push([[116],{15745:(M,Z,P)=>{P.r(Z),P.d(Z,{FlowGraphSetVariableBlock:()=>v});var x=P(12317),c=P(14117),w=P(14073);class v extends c.e{constructor(M){if(super(M),!M.variable&&!M.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(M.variables&&M.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(M.variables)for(const Z of M.variables)this.registerDataInput(Z,w.e);else this.registerDataInput("value",w.e)}_execute(M,Z){var P,x;if(null!==(P=this.config)&&void 0!==P&&P.variables)for(const c of this.config.variables)this._saveVariable(M,c);else this._saveVariable(M,null===(x=this.config)||void 0===x?void 0:x.variable,"value");this.out._activateSignal(M)}_saveVariable(M,Z,P){var x;const c=M._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const v of c){const P=M.assetsContext.animationGroups.find((M=>M.uniqueId==v));if(P)for(const x of P.targetedAnimations)if(x.target===M&&x.animation.targetProperty===Z){P.stop();const Z=c.indexOf(v);Z>-1&&c.splice(Z,1),M._setGlobalContextVariable("currentlyRunningAnimationGroups",c);break}}const w=null===(x=this.getDataInput(P||Z))||void 0===x?void 0:x.getValue(M);M.setVariable(Z,w)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(M){var Z;super.serialize(M),M.config.variable=null===(Z=this.config)||void 0===Z?void 0:Z.variable}}(0,x.g)("FlowGraphSetVariableBlock",v)}}]);