"use strict";(self.yg1iw12lizp=self.yg1iw12lizp||[]).push([[116],{16017:(L,U,x)=>{x.r(U),x.d(U,{FlowGraphSetVariableBlock:()=>F});var mL=x(12547),p=x(14401),G=x(14348);class F extends p.d{constructor(L){if(super(L),!L.variable&&!L.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(L.variables&&L.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(L.variables)for(const U of L.variables)this.registerDataInput(U,G.c);else this.registerDataInput("value",G.c)}_execute(L,U){var x,mL;if(null!==(x=this.config)&&void 0!==x&&x.variables)for(const p of this.config.variables)this._saveVariable(L,p);else this._saveVariable(L,null===(mL=this.config)||void 0===mL?void 0:mL.variable,"value");this.out._activateSignal(L)}_saveVariable(L,U,x){var mL;const p=L._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const F of p){const x=L.assetsContext.animationGroups.find((L=>L.uniqueId==F));if(x)for(const mL of x.targetedAnimations)if(mL.target===L&&mL.animation.targetProperty===U){x.stop();const U=p.indexOf(F);U>-1&&p.splice(U,1),L._setGlobalContextVariable("currentlyRunningAnimationGroups",p);break}}const G=null===(mL=this.getDataInput(x||U))||void 0===mL?void 0:mL.getValue(L);L.setVariable(U,G)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(L){var U;super.serialize(L),L.config.variable=null===(U=this.config)||void 0===U?void 0:U.variable}}(0,mL.d)("FlowGraphSetVariableBlock",F)}}]);