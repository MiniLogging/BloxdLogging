"use strict";(self["2fwzcez286e"]=self["2fwzcez286e"]||[]).push([[116],{16403:(B,u,F)=>{F.r(u),F.d(u,{FlowGraphSetVariableBlock:()=>G});var Z=F(12949),V=F(14741),p=F(14701);class G extends V.b{constructor(B){if(super(B),!B.variable&&!B.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(B.variables&&B.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(B.variables)for(const u of B.variables)this.registerDataInput(u,p.c);else this.registerDataInput("value",p.c)}_execute(B,u){var F,Z;if(null!==(F=this.config)&&void 0!==F&&F.variables)for(const V of this.config.variables)this._saveVariable(B,V);else this._saveVariable(B,null===(Z=this.config)||void 0===Z?void 0:Z.variable,"value");this.out._activateSignal(B)}_saveVariable(B,u,F){var Z;const V=B._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const G of V){const F=B.assetsContext.animationGroups.find((B=>B.uniqueId==G));if(F)for(const Z of F.targetedAnimations)if(Z.target===B&&Z.animation.targetProperty===u){F.stop();const u=V.indexOf(G);u>-1&&V.splice(u,1),B._setGlobalContextVariable("currentlyRunningAnimationGroups",V);break}}const p=null===(Z=this.getDataInput(F||u))||void 0===Z?void 0:Z.getValue(B);B.setVariable(u,p)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(B){var u;super.serialize(B),B.config.variable=null===(u=this.config)||void 0===u?void 0:u.variable}}(0,Z.f)("FlowGraphSetVariableBlock",G)}}]);