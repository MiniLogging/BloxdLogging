"use strict";(self.uji65st81d=self.uji65st81d||[]).push([[116],{15753:(V,h,mV)=>{mV.r(h),mV.d(h,{FlowGraphSetVariableBlock:()=>A});var t=mV(12388),L=mV(14144),N=mV(14109);class A extends L.c{constructor(V){if(super(V),!V.variable&&!V.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(V.variables&&V.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(V.variables)for(const h of V.variables)this.registerDataInput(h,N.e);else this.registerDataInput("value",N.e)}_execute(V,h){var mV,t;if(null!==(mV=this.config)&&void 0!==mV&&mV.variables)for(const L of this.config.variables)this._saveVariable(V,L);else this._saveVariable(V,null===(t=this.config)||void 0===t?void 0:t.variable,"value");this.out._activateSignal(V)}_saveVariable(V,h,mV){var t;const L=V._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const A of L){const mV=V.assetsContext.animationGroups.find((V=>V.uniqueId==A));if(mV)for(const t of mV.targetedAnimations)if(t.target===V&&t.animation.targetProperty===h){mV.stop();const h=L.indexOf(A);h>-1&&L.splice(h,1),V._setGlobalContextVariable("currentlyRunningAnimationGroups",L);break}}const N=null===(t=this.getDataInput(mV||h))||void 0===t?void 0:t.getValue(V);V.setVariable(h,N)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(V){var h;super.serialize(V),V.config.variable=null===(h=this.config)||void 0===h?void 0:h.variable}}(0,t.i)("FlowGraphSetVariableBlock",A)}}]);