"use strict";(self.hbnkweqmycf=self.hbnkweqmycf||[]).push([[116],{14972:(F,P,f)=>{f.r(P),f.d(P,{FlowGraphSetVariableBlock:()=>H});var c=f(11587),N=f(13312),q=f(13265);class H extends N.d{constructor(F){if(super(F),!F.variable&&!F.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(F.variables&&F.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(F.variables)for(const P of F.variables)this.registerDataInput(P,q.c);else this.registerDataInput("value",q.c)}_execute(F,P){var f,c;if(null!==(f=this.config)&&void 0!==f&&f.variables)for(const N of this.config.variables)this._saveVariable(F,N);else this._saveVariable(F,null===(c=this.config)||void 0===c?void 0:c.variable,"value");this.out._activateSignal(F)}_saveVariable(F,P,f){var c;const N=F._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const H of N){const f=F.assetsContext.animationGroups.find((F=>F.uniqueId==H));if(f)for(const c of f.targetedAnimations)if(c.target===F&&c.animation.targetProperty===P){f.stop();const P=N.indexOf(H);P>-1&&N.splice(P,1),F._setGlobalContextVariable("currentlyRunningAnimationGroups",N);break}}const q=null===(c=this.getDataInput(f||P))||void 0===c?void 0:c.getValue(F);F.setVariable(P,q)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(F){var P;super.serialize(F),F.config.variable=null===(P=this.config)||void 0===P?void 0:P.variable}}(0,c.f)("FlowGraphSetVariableBlock",H)}}]);