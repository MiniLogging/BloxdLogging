"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[116],{14456:(g,w,q)=>{q.r(w),q.d(w,{FlowGraphSetVariableBlock:()=>S});var R=q(11128),o=q(12879),r=q(12836);class S extends o.c{constructor(g){if(super(g),!g.variable&&!g.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(g.variables&&g.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(g.variables)for(const w of g.variables)this.registerDataInput(w,r.d);else this.registerDataInput("value",r.d)}_execute(g,w){var q,R;if(null!==(q=this.config)&&void 0!==q&&q.variables)for(const o of this.config.variables)this._saveVariable(g,o);else this._saveVariable(g,null===(R=this.config)||void 0===R?void 0:R.variable,"value");this.out._activateSignal(g)}_saveVariable(g,w,q){var R;const o=g._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const S of o){const q=g.assetsContext.animationGroups.find((g=>g.uniqueId==S));if(q)for(const R of q.targetedAnimations)if(R.target===g&&R.animation.targetProperty===w){q.stop();const w=o.indexOf(S);w>-1&&o.splice(w,1),g._setGlobalContextVariable("currentlyRunningAnimationGroups",o);break}}const r=null===(R=this.getDataInput(q||w))||void 0===R?void 0:R.getValue(g);g.setVariable(w,r)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(g){var w;super.serialize(g),g.config.variable=null===(w=this.config)||void 0===w?void 0:w.variable}}(0,R.g)("FlowGraphSetVariableBlock",S)}}]);