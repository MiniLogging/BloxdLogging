"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[116],{14564:(P,f,Y)=>{Y.r(f),Y.d(f,{FlowGraphSetVariableBlock:()=>L});var C=Y(11134),q=Y(12974),m=Y(12917);class L extends q.d{constructor(P){if(super(P),!P.variable&&!P.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(P.variables&&P.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(P.variables)for(const f of P.variables)this.registerDataInput(f,m.d);else this.registerDataInput("value",m.d)}_execute(P,f){var Y,C;if(null!==(Y=this.config)&&void 0!==Y&&Y.variables)for(const q of this.config.variables)this._saveVariable(P,q);else this._saveVariable(P,null===(C=this.config)||void 0===C?void 0:C.variable,"value");this.out._activateSignal(P)}_saveVariable(P,f,Y){var C;const q=P._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const L of q){const Y=P.assetsContext.animationGroups.find((P=>P.uniqueId==L));if(Y)for(const C of Y.targetedAnimations)if(C.target===P&&C.animation.targetProperty===f){Y.stop();const f=q.indexOf(L);f>-1&&q.splice(f,1),P._setGlobalContextVariable("currentlyRunningAnimationGroups",q);break}}const m=null===(C=this.getDataInput(Y||f))||void 0===C?void 0:C.getValue(P);P.setVariable(f,m)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(P){var f;super.serialize(P),P.config.variable=null===(f=this.config)||void 0===f?void 0:f.variable}}(0,C.d)("FlowGraphSetVariableBlock",L)}}]);