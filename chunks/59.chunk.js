"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[59],{14353:(w,p,e)=>{e.r(p),e.d(p,{FlowGraphPlayAnimationBlock:()=>q});var r=e(12912),I=e(12872),d=e(11038),f=e(14348);class q extends r.d{constructor(w){super(w,["animationLoop","animationEnd","animationGroupLoop"]),this.config=w,this.speed=this.registerDataInput("speed",I.o),this.loop=this.registerDataInput("loop",I.g),this.from=this.registerDataInput("from",I.o,0),this.to=this.registerDataInput("to",I.o),this.currentFrame=this.registerDataOutput("currentFrame",I.o),this.currentTime=this.registerDataOutput("currentTime",I.o),this.currentAnimationGroup=this.registerDataOutput("currentAnimationGroup",I.c),this.animationGroup=this.registerDataInput("animationGroup",I.c,null===w||void 0===w?void 0:w.animationGroup),this.animation=this.registerDataInput("animation",I.c),this.object=this.registerDataInput("object",I.c)}_preparePendingTasks(w){const p=this.animationGroup.getValue(w),e=this.animation.getValue(w);if(!p&&!e)return this._reportError(w,"No animation or animation group provided");{const I=this.currentAnimationGroup.getValue(w);I&&I!==p&&I.dispose();let d=p;if(e&&!d){const p=this.object.getValue(w);if(!p)return this._reportError(w,"No target object provided");const r=Array.isArray(e)?e:[e],I=r[0].name;d=new f.AnimationGroup("flowGraphAnimationGroup-"+I+"-"+p.name,w.configuration.yp);let q=!1;const E=w._getGlobalContextVariable("interpolationAnimations",[]);for(const w of r)d.addTargetedAnimation(w,p),-1!==E.indexOf(w.uniqueId)&&(q=!0);q&&this._checkInterpolationDuplications(w,r,p)}const q=this.speed.getValue(w)||1,E=this.from.getValue(w)??0,j=this.to.getValue(w)||d.to,X=!isFinite(j)||this.loop.getValue(w);this.currentAnimationGroup.setValue(d,w);const k=w._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);-1!==k.indexOf(d.uniqueId)&&d.stop();try{d.start(X,q,E,j),d.onAnimationGroupEndObservable.add((()=>this._onAnimationGroupEnd(w))),d.onAnimationEndObservable.add((()=>this._eventsSignalOutputs.animationEnd._activateSignal(w))),d.onAnimationLoopObservable.add((()=>this._eventsSignalOutputs.animationLoop._activateSignal(w))),d.onAnimationGroupLoopObservable.add((()=>this._eventsSignalOutputs.animationGroupLoop._activateSignal(w))),k.push(d.uniqueId),w._setGlobalContextVariable("currentlyRunningAnimationGroups",k)}catch(r){this._reportError(w,r)}}}_reportError(w,p){super._reportError(w,p),this.currentFrame.setValue(-1,w),this.currentTime.setValue(-1,w)}_executeOnTick(w){const p=this.currentAnimationGroup.getValue(w);var e;p&&(this.currentFrame.setValue(p.getCurrentFrame(),w),this.currentTime.setValue((null===(e=p.animatables[0])||void 0===e?void 0:e.elapsedTime)??0,w))}_execute(w){this._startPendingTasks(w)}_onAnimationGroupEnd(w){this._removeFromCurrentlyRunning(w,this.currentAnimationGroup.getValue(w)),this._resetAfterCanceled(w),this.done._activateSignal(w)}_checkInterpolationDuplications(w,p,e){const r=w._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const I of r){const r=w.assetsContext.animationGroups.find((w=>w.uniqueId===I));if(r)for(const I of r.targetedAnimations)for(const d of p)I.animation.targetProperty===d.targetProperty&&I.target===e&&this._stopAnimationGroup(w,r)}}_stopAnimationGroup(w,p){p.stop(!0),p.dispose(),this._removeFromCurrentlyRunning(w,p)}_removeFromCurrentlyRunning(w,p){const e=w._getGlobalContextVariable("currentlyRunningAnimationGroups",[]),r=e.indexOf(p.uniqueId);-1!==r&&(e.splice(r,1),w._setGlobalContextVariable("currentlyRunningAnimationGroups",e))}_cancelPendingTasks(w){const p=this.currentAnimationGroup.getValue(w);p&&this._stopAnimationGroup(w,p)}getClassName(){return"FlowGraphPlayAnimationBlock"}}(0,d.d)("FlowGraphPlayAnimationBlock",q)}}]);