"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[16],{2269:(v,d,Q)=>{Q.r(d),Q.d(d,{_TGATextureLoader:()=>F});var n=Q(482);function T(v){let d=0;return{id_length:v[d++],colormap_type:v[d++],image_type:v[d++],colormap_index:v[d++]|v[d++]<<8,colormap_length:v[d++]|v[d++]<<8,colormap_size:v[d++],origin:[v[d++]|v[d++]<<8,v[d++]|v[d++]<<8],width:v[d++]|v[d++]<<8,height:v[d++]|v[d++]<<8,pixel_size:v[d++],flags:v[d++]}}function L(v,d){if(d.length<19)return void n.d.Error("Unable to load TGA file - Not enough data to contain header");let Q=18;const L=T(d);if(L.id_length+Q>d.length)return void n.d.Error("Unable to load TGA file - Not enough data");Q+=L.id_length;let F,r=!1,C=!1,u=!1;switch(L.image_type){case 9:r=!0;case 1:C=!0;break;case 10:r=!0;case 2:break;case 11:r=!0;case 3:u=!0}const y=L.pixel_size>>3,z=L.width*L.height*y;let B,X,m,V,h,S,A;if(C&&(B=d.subarray(Q,Q+=L.colormap_length*(L.colormap_size>>3))),r){let v,n,T;F=new Uint8Array(z);let L=0;const e=new Uint8Array(y);for(;Q<z&&L<z;)if(v=d[Q++],n=1+(127&v),128&v){for(T=0;T<y;++T)e[T]=d[Q++];for(T=0;T<n;++T)F.set(e,L+T*y);L+=y*n}else{for(n*=y,T=0;T<n;++T)F[L+T]=d[Q++];L+=n}}else F=d.subarray(Q,Q+=C?L.width*L.height:z);switch((48&L.flags)>>4){default:case 2:X=0,V=1,A=L.width,m=0,h=1,S=L.height;break;case 0:X=0,V=1,A=L.width,m=L.height-1,h=-1,S=-1;break;case 3:X=L.width-1,V=-1,A=-1,m=0,h=1,S=L.height;break;case 1:X=L.width-1,V=-1,A=-1,m=L.height-1,h=-1,S=-1}const f="_getImageData"+(u?"Grey":"")+L.pixel_size+"bits",P=e[f](L,B,F,m,h,S,X,V,A);v.getEngine()._uploadDataToTextureDirectly(v,P)}const e={GetTGAHeader:T,UploadContent:L,_getImageData8bits:function(v,d,Q,n,T,L,e,F,r){const C=Q,u=d,y=v.width,z=v.height;let B,X,m,V=0;const h=new Uint8Array(y*z*4);for(m=n;m!==L;m+=T)for(X=e;X!==r;X+=F,V++)B=C[V],h[4*(X+y*m)+3]=255,h[4*(X+y*m)+2]=u[3*B+0],h[4*(X+y*m)+1]=u[3*B+1],h[4*(X+y*m)+0]=u[3*B+2];return h},_getImageData16bits:function(v,d,Q,n,T,L,e,F,r){const C=Q,u=v.width,y=v.height;let z,B,X,m=0;const V=new Uint8Array(u*y*4);for(X=n;X!==L;X+=T)for(B=e;B!==r;B+=F,m+=2){z=C[m+0]+(C[m+1]<<8);const v=255*((31744&z)>>10)/31|0,d=255*((992&z)>>5)/31|0,Q=255*(31&z)/31|0;V[4*(B+u*X)+0]=v,V[4*(B+u*X)+1]=d,V[4*(B+u*X)+2]=Q,V[4*(B+u*X)+3]=32768&z?0:255}return V},_getImageData24bits:function(v,d,Q,n,T,L,e,F,r){const C=Q,u=v.width,y=v.height;let z,B,X=0;const m=new Uint8Array(u*y*4);for(B=n;B!==L;B+=T)for(z=e;z!==r;z+=F,X+=3)m[4*(z+u*B)+3]=255,m[4*(z+u*B)+2]=C[X+0],m[4*(z+u*B)+1]=C[X+1],m[4*(z+u*B)+0]=C[X+2];return m},_getImageData32bits:function(v,d,Q,n,T,L,e,F,r){const C=Q,u=v.width,y=v.height;let z,B,X=0;const m=new Uint8Array(u*y*4);for(B=n;B!==L;B+=T)for(z=e;z!==r;z+=F,X+=4)m[4*(z+u*B)+2]=C[X+0],m[4*(z+u*B)+1]=C[X+1],m[4*(z+u*B)+0]=C[X+2],m[4*(z+u*B)+3]=C[X+3];return m},_getImageDataGrey8bits:function(v,d,Q,n,T,L,e,F,r){const C=Q,u=v.width,y=v.height;let z,B,X,m=0;const V=new Uint8Array(u*y*4);for(X=n;X!==L;X+=T)for(B=e;B!==r;B+=F,m++)z=C[m],V[4*(B+u*X)+0]=z,V[4*(B+u*X)+1]=z,V[4*(B+u*X)+2]=z,V[4*(B+u*X)+3]=255;return V},_getImageDataGrey16bits:function(v,d,Q,n,T,L,e,F,r){const C=Q,u=v.width,y=v.height;let z,B,X=0;const m=new Uint8Array(u*y*4);for(B=n;B!==L;B+=T)for(z=e;z!==r;z+=F,X+=2)m[4*(z+u*B)+0]=C[X+0],m[4*(z+u*B)+1]=C[X+0],m[4*(z+u*B)+2]=C[X+0],m[4*(z+u*B)+3]=C[X+1];return m}};class F{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(v,d,Q){const n=new Uint8Array(v.buffer,v.byteOffset,v.byteLength),e=T(n);Q(e.width,e.height,d.generateMipMaps,!1,(()=>{L(d,n)}))}}}}]);