"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[16],{2525:(R,x,H)=>{H.r(x),H.d(x,{_TGATextureLoader:()=>D});var k=H(493);function c(R){let x=0;return{id_length:R[x++],colormap_type:R[x++],image_type:R[x++],colormap_index:R[x++]|R[x++]<<8,colormap_length:R[x++]|R[x++]<<8,colormap_size:R[x++],origin:[R[x++]|R[x++]<<8,R[x++]|R[x++]<<8],width:R[x++]|R[x++]<<8,height:R[x++]|R[x++]<<8,pixel_size:R[x++],flags:R[x++]}}function t(R,x){if(x.length<19)return void k.c.Error("Unable to load TGA file - Not enough data to contain header");let H=18;const t=c(x);if(t.id_length+H>x.length)return void k.c.Error("Unable to load TGA file - Not enough data");H+=t.id_length;let D,U=!1,J=!1,V=!1;switch(t.image_type){case 9:U=!0;case 1:J=!0;break;case 10:U=!0;case 2:break;case 11:U=!0;case 3:V=!0}const n=t.pixel_size>>3,g=t.width*t.height*n;let I,i,q,S,L,b,C;if(J&&(I=x.subarray(H,H+=t.colormap_length*(t.colormap_size>>3))),U){let R,k,c;D=new Uint8Array(g);let t=0;const A=new Uint8Array(n);for(;H<g&&t<g;)if(R=x[H++],k=1+(127&R),128&R){for(c=0;c<n;++c)A[c]=x[H++];for(c=0;c<k;++c)D.set(A,t+c*n);t+=n*k}else{for(k*=n,c=0;c<k;++c)D[t+c]=x[H++];t+=k}}else D=x.subarray(H,H+=J?t.width*t.height:g);switch((48&t.flags)>>4){default:case 2:i=0,S=1,C=t.width,q=0,L=1,b=t.height;break;case 0:i=0,S=1,C=t.width,q=t.height-1,L=-1,b=-1;break;case 3:i=t.width-1,S=-1,C=-1,q=0,L=1,b=t.height;break;case 1:i=t.width-1,S=-1,C=-1,q=t.height-1,L=-1,b=-1}const F="_getImageData"+(V?"Grey":"")+t.pixel_size+"bits",d=A[F](t,I,D,q,L,b,i,S,C);R.getEngine()._uploadDataToTextureDirectly(R,d)}const A={GetTGAHeader:c,UploadContent:t,_getImageData8bits:function(R,x,H,k,c,t,A,D,U){const J=H,V=x,n=R.width,g=R.height;let I,i,q,S=0;const L=new Uint8Array(n*g*4);for(q=k;q!==t;q+=c)for(i=A;i!==U;i+=D,S++)I=J[S],L[4*(i+n*q)+3]=255,L[4*(i+n*q)+2]=V[3*I+0],L[4*(i+n*q)+1]=V[3*I+1],L[4*(i+n*q)+0]=V[3*I+2];return L},_getImageData16bits:function(R,x,H,k,c,t,A,D,U){const J=H,V=R.width,n=R.height;let g,I,i,q=0;const S=new Uint8Array(V*n*4);for(i=k;i!==t;i+=c)for(I=A;I!==U;I+=D,q+=2){g=J[q+0]+(J[q+1]<<8);const R=255*((31744&g)>>10)/31|0,x=255*((992&g)>>5)/31|0,H=255*(31&g)/31|0;S[4*(I+V*i)+0]=R,S[4*(I+V*i)+1]=x,S[4*(I+V*i)+2]=H,S[4*(I+V*i)+3]=32768&g?0:255}return S},_getImageData24bits:function(R,x,H,k,c,t,A,D,U){const J=H,V=R.width,n=R.height;let g,I,i=0;const q=new Uint8Array(V*n*4);for(I=k;I!==t;I+=c)for(g=A;g!==U;g+=D,i+=3)q[4*(g+V*I)+3]=255,q[4*(g+V*I)+2]=J[i+0],q[4*(g+V*I)+1]=J[i+1],q[4*(g+V*I)+0]=J[i+2];return q},_getImageData32bits:function(R,x,H,k,c,t,A,D,U){const J=H,V=R.width,n=R.height;let g,I,i=0;const q=new Uint8Array(V*n*4);for(I=k;I!==t;I+=c)for(g=A;g!==U;g+=D,i+=4)q[4*(g+V*I)+2]=J[i+0],q[4*(g+V*I)+1]=J[i+1],q[4*(g+V*I)+0]=J[i+2],q[4*(g+V*I)+3]=J[i+3];return q},_getImageDataGrey8bits:function(R,x,H,k,c,t,A,D,U){const J=H,V=R.width,n=R.height;let g,I,i,q=0;const S=new Uint8Array(V*n*4);for(i=k;i!==t;i+=c)for(I=A;I!==U;I+=D,q++)g=J[q],S[4*(I+V*i)+0]=g,S[4*(I+V*i)+1]=g,S[4*(I+V*i)+2]=g,S[4*(I+V*i)+3]=255;return S},_getImageDataGrey16bits:function(R,x,H,k,c,t,A,D,U){const J=H,V=R.width,n=R.height;let g,I,i=0;const q=new Uint8Array(V*n*4);for(I=k;I!==t;I+=c)for(g=A;g!==U;g+=D,i+=2)q[4*(g+V*I)+0]=J[i+0],q[4*(g+V*I)+1]=J[i+0],q[4*(g+V*I)+2]=J[i+0],q[4*(g+V*I)+3]=J[i+1];return q}};class D{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(R,x,H){const k=new Uint8Array(R.buffer,R.byteOffset,R.byteLength),A=c(k);H(A.width,A.height,x.generateMipMaps,!1,(()=>{t(x,k)}))}}}}]);