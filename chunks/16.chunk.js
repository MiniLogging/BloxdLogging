"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[16],{2217:(L,j,P)=>{P.r(j),P.d(j,{_TGATextureLoader:()=>u});var A=P(490);function R(L){let j=0;return{id_length:L[j++],colormap_type:L[j++],image_type:L[j++],colormap_index:L[j++]|L[j++]<<8,colormap_length:L[j++]|L[j++]<<8,colormap_size:L[j++],origin:[L[j++]|L[j++]<<8,L[j++]|L[j++]<<8],width:L[j++]|L[j++]<<8,height:L[j++]|L[j++]<<8,pixel_size:L[j++],flags:L[j++]}}function o(L,j){if(j.length<19)return void A.e.Error("Unable to load TGA file - Not enough data to contain header");let P=18;const o=R(j);if(o.id_length+P>j.length)return void A.e.Error("Unable to load TGA file - Not enough data");P+=o.id_length;let u,a=!1,D=!1,S=!1;switch(o.image_type){case 9:a=!0;case 1:D=!0;break;case 10:a=!0;case 2:break;case 11:a=!0;case 3:S=!0}const g=o.pixel_size>>3,V=o.width*o.height*g;let N,C,b,f,h,K,v;if(D&&(N=j.subarray(P,P+=o.colormap_length*(o.colormap_size>>3))),a){let L,A,R;u=new Uint8Array(V);let o=0;const Y=new Uint8Array(g);for(;P<V&&o<V;)if(L=j[P++],A=1+(127&L),128&L){for(R=0;R<g;++R)Y[R]=j[P++];for(R=0;R<A;++R)u.set(Y,o+R*g);o+=g*A}else{for(A*=g,R=0;R<A;++R)u[o+R]=j[P++];o+=A}}else u=j.subarray(P,P+=D?o.width*o.height:V);switch((48&o.flags)>>4){default:case 2:C=0,f=1,v=o.width,b=0,h=1,K=o.height;break;case 0:C=0,f=1,v=o.width,b=o.height-1,h=-1,K=-1;break;case 3:C=o.width-1,f=-1,v=-1,b=0,h=1,K=o.height;break;case 1:C=o.width-1,f=-1,v=-1,b=o.height-1,h=-1,K=-1}const q="_getImageData"+(S?"Grey":"")+o.pixel_size+"bits",y=Y[q](o,N,u,b,h,K,C,f,v);L.getEngine()._uploadDataToTextureDirectly(L,y)}const Y={GetTGAHeader:R,UploadContent:o,_getImageData8bits:function(L,j,P,A,R,o,Y,u,a){const D=P,S=j,g=L.width,V=L.height;let N,C,b,f=0;const h=new Uint8Array(g*V*4);for(b=A;b!==o;b+=R)for(C=Y;C!==a;C+=u,f++)N=D[f],h[4*(C+g*b)+3]=255,h[4*(C+g*b)+2]=S[3*N+0],h[4*(C+g*b)+1]=S[3*N+1],h[4*(C+g*b)+0]=S[3*N+2];return h},_getImageData16bits:function(L,j,P,A,R,o,Y,u,a){const D=P,S=L.width,g=L.height;let V,N,C,b=0;const f=new Uint8Array(S*g*4);for(C=A;C!==o;C+=R)for(N=Y;N!==a;N+=u,b+=2){V=D[b+0]+(D[b+1]<<8);const L=255*((31744&V)>>10)/31|0,j=255*((992&V)>>5)/31|0,P=255*(31&V)/31|0;f[4*(N+S*C)+0]=L,f[4*(N+S*C)+1]=j,f[4*(N+S*C)+2]=P,f[4*(N+S*C)+3]=32768&V?0:255}return f},_getImageData24bits:function(L,j,P,A,R,o,Y,u,a){const D=P,S=L.width,g=L.height;let V,N,C=0;const b=new Uint8Array(S*g*4);for(N=A;N!==o;N+=R)for(V=Y;V!==a;V+=u,C+=3)b[4*(V+S*N)+3]=255,b[4*(V+S*N)+2]=D[C+0],b[4*(V+S*N)+1]=D[C+1],b[4*(V+S*N)+0]=D[C+2];return b},_getImageData32bits:function(L,j,P,A,R,o,Y,u,a){const D=P,S=L.width,g=L.height;let V,N,C=0;const b=new Uint8Array(S*g*4);for(N=A;N!==o;N+=R)for(V=Y;V!==a;V+=u,C+=4)b[4*(V+S*N)+2]=D[C+0],b[4*(V+S*N)+1]=D[C+1],b[4*(V+S*N)+0]=D[C+2],b[4*(V+S*N)+3]=D[C+3];return b},_getImageDataGrey8bits:function(L,j,P,A,R,o,Y,u,a){const D=P,S=L.width,g=L.height;let V,N,C,b=0;const f=new Uint8Array(S*g*4);for(C=A;C!==o;C+=R)for(N=Y;N!==a;N+=u,b++)V=D[b],f[4*(N+S*C)+0]=V,f[4*(N+S*C)+1]=V,f[4*(N+S*C)+2]=V,f[4*(N+S*C)+3]=255;return f},_getImageDataGrey16bits:function(L,j,P,A,R,o,Y,u,a){const D=P,S=L.width,g=L.height;let V,N,C=0;const b=new Uint8Array(S*g*4);for(N=A;N!==o;N+=R)for(V=Y;V!==a;V+=u,C+=2)b[4*(V+S*N)+0]=D[C+0],b[4*(V+S*N)+1]=D[C+0],b[4*(V+S*N)+2]=D[C+0],b[4*(V+S*N)+3]=D[C+1];return b}};class u{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(L,j,P){const A=new Uint8Array(L.buffer,L.byteOffset,L.byteLength),Y=R(A);P(Y.width,Y.height,j.generateMipMaps,!1,(()=>{o(j,A)}))}}}}]);