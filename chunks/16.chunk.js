"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[16],{2607:(Q,X,C)=>{C.r(X),C.d(X,{_TGATextureLoader:()=>O});var l=C(501);function h(Q){let X=0;return{id_length:Q[X++],colormap_type:Q[X++],image_type:Q[X++],colormap_index:Q[X++]|Q[X++]<<8,colormap_length:Q[X++]|Q[X++]<<8,colormap_size:Q[X++],origin:[Q[X++]|Q[X++]<<8,Q[X++]|Q[X++]<<8],width:Q[X++]|Q[X++]<<8,height:Q[X++]|Q[X++]<<8,pixel_size:Q[X++],flags:Q[X++]}}function M(Q,X){if(X.length<19)return void l.c.Error("Unable to load TGA file - Not enough data to contain header");let C=18;const M=h(X);if(M.id_length+C>X.length)return void l.c.Error("Unable to load TGA file - Not enough data");C+=M.id_length;let O,m=!1,W=!1,U=!1;switch(M.image_type){case 9:m=!0;case 1:W=!0;break;case 10:m=!0;case 2:break;case 11:m=!0;case 3:U=!0}const L=M.pixel_size>>3,w=M.width*M.height*L;let i,a,F,s,z,x,r;if(W&&(i=X.subarray(C,C+=M.colormap_length*(M.colormap_size>>3))),m){let Q,l,h;O=new Uint8Array(w);let M=0;const f=new Uint8Array(L);for(;C<w&&M<w;)if(Q=X[C++],l=1+(127&Q),128&Q){for(h=0;h<L;++h)f[h]=X[C++];for(h=0;h<l;++h)O.set(f,M+h*L);M+=L*l}else{for(l*=L,h=0;h<l;++h)O[M+h]=X[C++];M+=l}}else O=X.subarray(C,C+=W?M.width*M.height:w);switch((48&M.flags)>>4){default:case 2:a=0,s=1,r=M.width,F=0,z=1,x=M.height;break;case 0:a=0,s=1,r=M.width,F=M.height-1,z=-1,x=-1;break;case 3:a=M.width-1,s=-1,r=-1,F=0,z=1,x=M.height;break;case 1:a=M.width-1,s=-1,r=-1,F=M.height-1,z=-1,x=-1}const P="_getImageData"+(U?"Grey":"")+M.pixel_size+"bits",j=f[P](M,i,O,F,z,x,a,s,r);Q.getEngine()._uploadDataToTextureDirectly(Q,j)}const f={GetTGAHeader:h,UploadContent:M,_getImageData8bits:function(Q,X,C,l,h,M,f,O,m){const W=C,U=X,L=Q.width,w=Q.height;let i,a,F,s=0;const z=new Uint8Array(L*w*4);for(F=l;F!==M;F+=h)for(a=f;a!==m;a+=O,s++)i=W[s],z[4*(a+L*F)+3]=255,z[4*(a+L*F)+2]=U[3*i+0],z[4*(a+L*F)+1]=U[3*i+1],z[4*(a+L*F)+0]=U[3*i+2];return z},_getImageData16bits:function(Q,X,C,l,h,M,f,O,m){const W=C,U=Q.width,L=Q.height;let w,i,a,F=0;const s=new Uint8Array(U*L*4);for(a=l;a!==M;a+=h)for(i=f;i!==m;i+=O,F+=2){w=W[F+0]+(W[F+1]<<8);const Q=255*((31744&w)>>10)/31|0,X=255*((992&w)>>5)/31|0,C=255*(31&w)/31|0;s[4*(i+U*a)+0]=Q,s[4*(i+U*a)+1]=X,s[4*(i+U*a)+2]=C,s[4*(i+U*a)+3]=32768&w?0:255}return s},_getImageData24bits:function(Q,X,C,l,h,M,f,O,m){const W=C,U=Q.width,L=Q.height;let w,i,a=0;const F=new Uint8Array(U*L*4);for(i=l;i!==M;i+=h)for(w=f;w!==m;w+=O,a+=3)F[4*(w+U*i)+3]=255,F[4*(w+U*i)+2]=W[a+0],F[4*(w+U*i)+1]=W[a+1],F[4*(w+U*i)+0]=W[a+2];return F},_getImageData32bits:function(Q,X,C,l,h,M,f,O,m){const W=C,U=Q.width,L=Q.height;let w,i,a=0;const F=new Uint8Array(U*L*4);for(i=l;i!==M;i+=h)for(w=f;w!==m;w+=O,a+=4)F[4*(w+U*i)+2]=W[a+0],F[4*(w+U*i)+1]=W[a+1],F[4*(w+U*i)+0]=W[a+2],F[4*(w+U*i)+3]=W[a+3];return F},_getImageDataGrey8bits:function(Q,X,C,l,h,M,f,O,m){const W=C,U=Q.width,L=Q.height;let w,i,a,F=0;const s=new Uint8Array(U*L*4);for(a=l;a!==M;a+=h)for(i=f;i!==m;i+=O,F++)w=W[F],s[4*(i+U*a)+0]=w,s[4*(i+U*a)+1]=w,s[4*(i+U*a)+2]=w,s[4*(i+U*a)+3]=255;return s},_getImageDataGrey16bits:function(Q,X,C,l,h,M,f,O,m){const W=C,U=Q.width,L=Q.height;let w,i,a=0;const F=new Uint8Array(U*L*4);for(i=l;i!==M;i+=h)for(w=f;w!==m;w+=O,a+=2)F[4*(w+U*i)+0]=W[a+0],F[4*(w+U*i)+1]=W[a+0],F[4*(w+U*i)+2]=W[a+0],F[4*(w+U*i)+3]=W[a+1];return F}};class O{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(Q,X,C){const l=new Uint8Array(Q.buffer,Q.byteOffset,Q.byteLength),f=h(l);C(f.width,f.height,X.generateMipMaps,!1,(()=>{M(X,l)}))}}}}]);