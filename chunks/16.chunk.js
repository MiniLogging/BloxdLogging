"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[16],{2271:(U,W,l)=>{l.r(W),l.d(W,{_TGATextureLoader:()=>B});var M=l(512);function t(U){let W=0;return{id_length:U[W++],colormap_type:U[W++],image_type:U[W++],colormap_index:U[W++]|U[W++]<<8,colormap_length:U[W++]|U[W++]<<8,colormap_size:U[W++],origin:[U[W++]|U[W++]<<8,U[W++]|U[W++]<<8],width:U[W++]|U[W++]<<8,height:U[W++]|U[W++]<<8,pixel_size:U[W++],flags:U[W++]}}function L(U,W){if(W.length<19)return void M.b.Error("Unable to load TGA file - Not enough data to contain header");let l=18;const L=t(W);if(L.id_length+l>W.length)return void M.b.Error("Unable to load TGA file - Not enough data");l+=L.id_length;let B,k=!1,A=!1,q=!1;switch(L.image_type){case 9:k=!0;case 1:A=!0;break;case 10:k=!0;case 2:break;case 11:k=!0;case 3:q=!0}const y=L.pixel_size>>3,j=L.width*L.height*y;let s,w,K,r,m,f,g;if(A&&(s=W.subarray(l,l+=L.colormap_length*(L.colormap_size>>3))),k){let U,M,t;B=new Uint8Array(j);let L=0;const p=new Uint8Array(y);for(;l<j&&L<j;)if(U=W[l++],M=1+(127&U),128&U){for(t=0;t<y;++t)p[t]=W[l++];for(t=0;t<M;++t)B.set(p,L+t*y);L+=y*M}else{for(M*=y,t=0;t<M;++t)B[L+t]=W[l++];L+=M}}else B=W.subarray(l,l+=A?L.width*L.height:j);switch((48&L.flags)>>4){default:case 2:w=0,r=1,g=L.width,K=0,m=1,f=L.height;break;case 0:w=0,r=1,g=L.width,K=L.height-1,m=-1,f=-1;break;case 3:w=L.width-1,r=-1,g=-1,K=0,m=1,f=L.height;break;case 1:w=L.width-1,r=-1,g=-1,K=L.height-1,m=-1,f=-1}const E="_getImageData"+(q?"Grey":"")+L.pixel_size+"bits",Z=p[E](L,s,B,K,m,f,w,r,g);U.getEngine()._uploadDataToTextureDirectly(U,Z)}const p={GetTGAHeader:t,UploadContent:L,_getImageData8bits:function(U,W,l,M,t,L,p,B,k){const A=l,q=W,y=U.width,j=U.height;let s,w,K,r=0;const m=new Uint8Array(y*j*4);for(K=M;K!==L;K+=t)for(w=p;w!==k;w+=B,r++)s=A[r],m[4*(w+y*K)+3]=255,m[4*(w+y*K)+2]=q[3*s+0],m[4*(w+y*K)+1]=q[3*s+1],m[4*(w+y*K)+0]=q[3*s+2];return m},_getImageData16bits:function(U,W,l,M,t,L,p,B,k){const A=l,q=U.width,y=U.height;let j,s,w,K=0;const r=new Uint8Array(q*y*4);for(w=M;w!==L;w+=t)for(s=p;s!==k;s+=B,K+=2){j=A[K+0]+(A[K+1]<<8);const U=255*((31744&j)>>10)/31|0,W=255*((992&j)>>5)/31|0,l=255*(31&j)/31|0;r[4*(s+q*w)+0]=U,r[4*(s+q*w)+1]=W,r[4*(s+q*w)+2]=l,r[4*(s+q*w)+3]=32768&j?0:255}return r},_getImageData24bits:function(U,W,l,M,t,L,p,B,k){const A=l,q=U.width,y=U.height;let j,s,w=0;const K=new Uint8Array(q*y*4);for(s=M;s!==L;s+=t)for(j=p;j!==k;j+=B,w+=3)K[4*(j+q*s)+3]=255,K[4*(j+q*s)+2]=A[w+0],K[4*(j+q*s)+1]=A[w+1],K[4*(j+q*s)+0]=A[w+2];return K},_getImageData32bits:function(U,W,l,M,t,L,p,B,k){const A=l,q=U.width,y=U.height;let j,s,w=0;const K=new Uint8Array(q*y*4);for(s=M;s!==L;s+=t)for(j=p;j!==k;j+=B,w+=4)K[4*(j+q*s)+2]=A[w+0],K[4*(j+q*s)+1]=A[w+1],K[4*(j+q*s)+0]=A[w+2],K[4*(j+q*s)+3]=A[w+3];return K},_getImageDataGrey8bits:function(U,W,l,M,t,L,p,B,k){const A=l,q=U.width,y=U.height;let j,s,w,K=0;const r=new Uint8Array(q*y*4);for(w=M;w!==L;w+=t)for(s=p;s!==k;s+=B,K++)j=A[K],r[4*(s+q*w)+0]=j,r[4*(s+q*w)+1]=j,r[4*(s+q*w)+2]=j,r[4*(s+q*w)+3]=255;return r},_getImageDataGrey16bits:function(U,W,l,M,t,L,p,B,k){const A=l,q=U.width,y=U.height;let j,s,w=0;const K=new Uint8Array(q*y*4);for(s=M;s!==L;s+=t)for(j=p;j!==k;j+=B,w+=2)K[4*(j+q*s)+0]=A[w+0],K[4*(j+q*s)+1]=A[w+0],K[4*(j+q*s)+2]=A[w+0],K[4*(j+q*s)+3]=A[w+1];return K}};class B{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(U,W,l){const M=new Uint8Array(U.buffer,U.byteOffset,U.byteLength),p=t(M);l(p.width,p.height,W.generateMipMaps,!1,(()=>{L(W,M)}))}}}}]);