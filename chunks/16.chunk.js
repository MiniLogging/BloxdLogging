"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[16],{2258:(c,b,A)=>{A.r(b),A.d(b,{_TGATextureLoader:()=>s});var o=A(531);function t(c){let b=0;return{id_length:c[b++],colormap_type:c[b++],image_type:c[b++],colormap_index:c[b++]|c[b++]<<8,colormap_length:c[b++]|c[b++]<<8,colormap_size:c[b++],origin:[c[b++]|c[b++]<<8,c[b++]|c[b++]<<8],width:c[b++]|c[b++]<<8,height:c[b++]|c[b++]<<8,pixel_size:c[b++],flags:c[b++]}}function n(c,b){if(b.length<19)return void o.c.Error("Unable to load TGA file - Not enough data to contain header");let A=18;const n=t(b);if(n.id_length+A>b.length)return void o.c.Error("Unable to load TGA file - Not enough data");A+=n.id_length;let s,L=!1,C=!1,J=!1;switch(n.image_type){case 9:L=!0;case 1:C=!0;break;case 10:L=!0;case 2:break;case 11:L=!0;case 3:J=!0}const X=n.pixel_size>>3,R=n.width*n.height*X;let N,k,E,V,y,j,F;if(C&&(N=b.subarray(A,A+=n.colormap_length*(n.colormap_size>>3))),L){let c,o,t;s=new Uint8Array(R);let n=0;const h=new Uint8Array(X);for(;A<R&&n<R;)if(c=b[A++],o=1+(127&c),128&c){for(t=0;t<X;++t)h[t]=b[A++];for(t=0;t<o;++t)s.set(h,n+t*X);n+=X*o}else{for(o*=X,t=0;t<o;++t)s[n+t]=b[A++];n+=o}}else s=b.subarray(A,A+=C?n.width*n.height:R);switch((48&n.flags)>>4){default:case 2:k=0,V=1,F=n.width,E=0,y=1,j=n.height;break;case 0:k=0,V=1,F=n.width,E=n.height-1,y=-1,j=-1;break;case 3:k=n.width-1,V=-1,F=-1,E=0,y=1,j=n.height;break;case 1:k=n.width-1,V=-1,F=-1,E=n.height-1,y=-1,j=-1}const M="_getImageData"+(J?"Grey":"")+n.pixel_size+"bits",W=h[M](n,N,s,E,y,j,k,V,F);c.getEngine()._uploadDataToTextureDirectly(c,W)}const h={GetTGAHeader:t,UploadContent:n,_getImageData8bits:function(c,b,A,o,t,n,h,s,L){const C=A,J=b,X=c.width,R=c.height;let N,k,E,V=0;const y=new Uint8Array(X*R*4);for(E=o;E!==n;E+=t)for(k=h;k!==L;k+=s,V++)N=C[V],y[4*(k+X*E)+3]=255,y[4*(k+X*E)+2]=J[3*N+0],y[4*(k+X*E)+1]=J[3*N+1],y[4*(k+X*E)+0]=J[3*N+2];return y},_getImageData16bits:function(c,b,A,o,t,n,h,s,L){const C=A,J=c.width,X=c.height;let R,N,k,E=0;const V=new Uint8Array(J*X*4);for(k=o;k!==n;k+=t)for(N=h;N!==L;N+=s,E+=2){R=C[E+0]+(C[E+1]<<8);const c=255*((31744&R)>>10)/31|0,b=255*((992&R)>>5)/31|0,A=255*(31&R)/31|0;V[4*(N+J*k)+0]=c,V[4*(N+J*k)+1]=b,V[4*(N+J*k)+2]=A,V[4*(N+J*k)+3]=32768&R?0:255}return V},_getImageData24bits:function(c,b,A,o,t,n,h,s,L){const C=A,J=c.width,X=c.height;let R,N,k=0;const E=new Uint8Array(J*X*4);for(N=o;N!==n;N+=t)for(R=h;R!==L;R+=s,k+=3)E[4*(R+J*N)+3]=255,E[4*(R+J*N)+2]=C[k+0],E[4*(R+J*N)+1]=C[k+1],E[4*(R+J*N)+0]=C[k+2];return E},_getImageData32bits:function(c,b,A,o,t,n,h,s,L){const C=A,J=c.width,X=c.height;let R,N,k=0;const E=new Uint8Array(J*X*4);for(N=o;N!==n;N+=t)for(R=h;R!==L;R+=s,k+=4)E[4*(R+J*N)+2]=C[k+0],E[4*(R+J*N)+1]=C[k+1],E[4*(R+J*N)+0]=C[k+2],E[4*(R+J*N)+3]=C[k+3];return E},_getImageDataGrey8bits:function(c,b,A,o,t,n,h,s,L){const C=A,J=c.width,X=c.height;let R,N,k,E=0;const V=new Uint8Array(J*X*4);for(k=o;k!==n;k+=t)for(N=h;N!==L;N+=s,E++)R=C[E],V[4*(N+J*k)+0]=R,V[4*(N+J*k)+1]=R,V[4*(N+J*k)+2]=R,V[4*(N+J*k)+3]=255;return V},_getImageDataGrey16bits:function(c,b,A,o,t,n,h,s,L){const C=A,J=c.width,X=c.height;let R,N,k=0;const E=new Uint8Array(J*X*4);for(N=o;N!==n;N+=t)for(R=h;R!==L;R+=s,k+=2)E[4*(R+J*N)+0]=C[k+0],E[4*(R+J*N)+1]=C[k+0],E[4*(R+J*N)+2]=C[k+0],E[4*(R+J*N)+3]=C[k+1];return E}};class s{constructor(){this.supportCascades=!1}loadCubeData(){throw".env not supported in Cube."}loadData(c,b,A){const o=new Uint8Array(c.buffer,c.byteOffset,c.byteLength),h=t(o);A(h.width,h.height,b.generateMipMaps,!1,(()=>{n(b,o)}))}}}}]);