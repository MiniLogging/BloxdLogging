"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[70],{14459:(R,x,H)=>{H.r(x),H.d(x,{FlowGraphReceiveCustomEventBlock:()=>D});var k=H(13290),c=H(485),t=H(610),A=H(13229);class D extends k.d{constructor(R){super(R),this.config=R,this.initPriority=1;for(const x in this.config.eventData)this.registerDataOutput(x,this.config.eventData[x].type)}_preparePendingTasks(R){const x=R.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(x&&x.hasObservers()&&x.observers.length>A.d.MaxEventsPerType)return void this._reportError(R,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${A.d.MaxEventsPerType}.`);const H=x.add((x=>{const H=Object.keys(x);for(const c of H){var k;null===(k=this.getDataOutput(c))||void 0===k||k.setValue(x[c],R)}this._execute(R)}));R._setExecutionVariable(this,"_eventObserver",H)}_cancelPendingTasks(R){const x=R.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(x){const H=R._getExecutionVariable(this,"_eventObserver",null);x.remove(H)}else c.e.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(R,x){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,t.h)("FlowGraphReceiveCustomEventBlock",D)}}]);