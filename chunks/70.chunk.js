"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[70],{14061:(Z,U,n)=>{n.r(U),n.d(U,{FlowGraphReceiveCustomEventBlock:()=>V});var i=n(12854),B=n(498),l=n(633),H=n(12808);class V extends i.c{constructor(Z){super(Z),this.config=Z,this.initPriority=1;for(const U in this.config.eventData)this.registerDataOutput(U,this.config.eventData[U].type)}_preparePendingTasks(Z){const U=Z.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(U&&U.hasObservers()&&U.observers.length>H.d.MaxEventsPerType)return void this._reportError(Z,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${H.d.MaxEventsPerType}.`);const n=U.add((U=>{const n=Object.keys(U);for(const B of n){var i;null===(i=this.getDataOutput(B))||void 0===i||i.setValue(U[B],Z)}this._execute(Z)}));Z._setExecutionVariable(this,"_eventObserver",n)}_cancelPendingTasks(Z){const U=Z.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(U){const n=Z._getExecutionVariable(this,"_eventObserver",null);U.remove(n)}else B.e.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(Z,U){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,l.g)("FlowGraphReceiveCustomEventBlock",V)}}]);