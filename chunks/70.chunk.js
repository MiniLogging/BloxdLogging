"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[70],{13959:(U,W,l)=>{l.r(W),l.d(W,{FlowGraphReceiveCustomEventBlock:()=>B});var M=l(12754),t=l(503),L=l(655),p=l(12685);class B extends M.d{constructor(U){super(U),this.config=U,this.initPriority=1;for(const W in this.config.eventData)this.registerDataOutput(W,this.config.eventData[W].type)}_preparePendingTasks(U){const W=U.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(W&&W.hasObservers()&&W.observers.length>p.e.MaxEventsPerType)return void this._reportError(U,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${p.e.MaxEventsPerType}.`);const l=W.add((W=>{const l=Object.keys(W);for(const t of l){var M;null===(M=this.getDataOutput(t))||void 0===M||M.setValue(W[t],U)}this._execute(U)}));U._setExecutionVariable(this,"_eventObserver",l)}_cancelPendingTasks(U){const W=U.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(W){const l=U._getExecutionVariable(this,"_eventObserver",null);W.remove(l)}else t.h.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(U,W){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,L.f)("FlowGraphReceiveCustomEventBlock",B)}}]);