"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[70],{14141:(t,q,S)=>{S.r(q),S.d(q,{FlowGraphReceiveCustomEventBlock:()=>r});var o=S(12966),B=S(490),z=S(622),L=S(12910);class r extends o.c{constructor(t){super(t),this.config=t,this.initPriority=1;for(const q in this.config.eventData)this.registerDataOutput(q,this.config.eventData[q].type)}_preparePendingTasks(t){const q=t.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(q&&q.hasObservers()&&q.observers.length>L.d.MaxEventsPerType)return void this._reportError(t,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${L.d.MaxEventsPerType}.`);const S=q.add((q=>{const S=Object.keys(q);for(const B of S){var o;null===(o=this.getDataOutput(B))||void 0===o||o.setValue(q[B],t)}this._execute(t)}));t._setExecutionVariable(this,"_eventObserver",S)}_cancelPendingTasks(t){const q=t.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(q){const S=t._getExecutionVariable(this,"_eventObserver",null);q.remove(S)}else B.f.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(t,q){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,z.c)("FlowGraphReceiveCustomEventBlock",r)}}]);