"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[70],{14222:(x,O,Q)=>{Q.r(O),Q.d(O,{FlowGraphDeterminantBlock:()=>U,FlowGraphInvertMatrixBlock:()=>L,FlowGraphMatrixComposeBlock:()=>a,FlowGraphMatrixDecomposeBlock:()=>N,FlowGraphMatrixMultiplicationBlock:()=>h,FlowGraphTransposeBlock:()=>C});var X=Q(12726),Z=Q(12707),n=Q(10849),V=Q(10866),o=Q(14216),l=Q(14205);class C extends o.e{constructor(x){super((0,Z.G)((null===x||void 0===x?void 0:x.matrixType)||"Matrix"),(0,Z.G)((null===x||void 0===x?void 0:x.matrixType)||"Matrix"),(x=>x.transpose?x.transpose():n.c.Transpose(x)),"FlowGraphTransposeBlock",x)}}(0,V.d)("FlowGraphTransposeBlock",C);class U extends o.e{constructor(x){super((0,Z.G)((null===x||void 0===x?void 0:x.matrixType)||"Matrix"),Z.q,(x=>x.determinant()),"FlowGraphDeterminantBlock",x)}}(0,V.d)("FlowGraphDeterminantBlock",U);class L extends o.e{constructor(x){super((0,Z.G)((null===x||void 0===x?void 0:x.matrixType)||"Matrix"),(0,Z.G)((null===x||void 0===x?void 0:x.matrixType)||"Matrix"),(x=>x.inverse?x.inverse():n.c.Invert(x)),"FlowGraphInvertMatrixBlock",x)}}(0,V.d)("FlowGraphInvertMatrixBlock",L);class h extends l.e{constructor(x){super((0,Z.G)((null===x||void 0===x?void 0:x.matrixType)||"Matrix"),(0,Z.G)((null===x||void 0===x?void 0:x.matrixType)||"Matrix"),(0,Z.G)((null===x||void 0===x?void 0:x.matrixType)||"Matrix"),((x,O)=>O.multiply(x)),"FlowGraphMatrixMultiplicationBlock",x)}}(0,V.d)("FlowGraphMatrixMultiplicationBlock",h);class N extends X.d{constructor(x){super(x),this.input=this.registerDataInput("input",Z.j),this.position=this.registerDataOutput("position",Z.A),this.rotationQuaternion=this.registerDataOutput("rotationQuaternion",Z.t),this.Qo=this.registerDataOutput("Qo",Z.A),this.isValid=this.registerDataOutput("isValid",Z.g,!1)}_updateOutputs(x){const O=x._getExecutionVariable(this,"executionId",-1),Q=x._getExecutionVariable(this,"cachedPosition",null),X=x._getExecutionVariable(this,"cachedRotation",null),Z=x._getExecutionVariable(this,"cachedScaling",null);if(O===x.executionId&&Q&&X&&Z)this.position.setValue(Q,x),this.rotationQuaternion.setValue(X,x),this.Qo.setValue(Z,x);else{const O=this.input.getValue(x),V=Q||new n.n,o=X||new n.g,l=Z||new n.n,C=Math.round(1e4*O.m[3])/1e4,U=Math.round(1e4*O.m[7])/1e4,L=Math.round(1e4*O.m[11])/1e4,h=Math.round(1e4*O.m[15])/1e4;if(0!==C||0!==U||0!==L||1!==h)return this.isValid.setValue(!1,x),this.position.setValue(n.n.Zero(),x),this.rotationQuaternion.setValue(n.g.Identity(),x),void this.Qo.setValue(n.n.One(),x);const N=O.decompose(l,o,V);this.isValid.setValue(N,x),this.position.setValue(V,x),this.rotationQuaternion.setValue(o,x),this.Qo.setValue(l,x),x._setExecutionVariable(this,"cachedPosition",V),x._setExecutionVariable(this,"cachedRotation",o),x._setExecutionVariable(this,"cachedScaling",l),x._setExecutionVariable(this,"executionId",x.executionId)}}getClassName(){return"FlowGraphMatrixDecompose"}}(0,V.d)("FlowGraphMatrixDecompose",N);class a extends X.d{constructor(x){super(x),this.position=this.registerDataInput("position",Z.A),this.rotationQuaternion=this.registerDataInput("rotationQuaternion",Z.t),this.Qo=this.registerDataInput("Qo",Z.A),this.value=this.registerDataOutput("value",Z.j)}_updateOutputs(x){const O=x._getExecutionVariable(this,"executionId",-1),Q=x._getExecutionVariable(this,"cachedMatrix",null);if(O===x.executionId&&Q)this.value.setValue(Q,x);else{const O=n.c.Compose(this.Qo.getValue(x),this.rotationQuaternion.getValue(x),this.position.getValue(x));this.value.setValue(O,x),x._setExecutionVariable(this,"cachedMatrix",O),x._setExecutionVariable(this,"executionId",x.executionId)}}getClassName(){return"FlowGraphMatrixCompose"}}(0,V.d)("FlowGraphMatrixCompose",a)},14205:(x,O,Q)=>{Q.d(O,{e:()=>Z});var X=Q(14213);class Z extends X.d{constructor(x,O,Q,X,Z,n){super(Q,n),this._operation=X,this._className=Z,this.a=this.registerDataInput("a",x),this.b=this.registerDataInput("b",O)}_doOperation(x){const O=this.a.getValue(x),Q=this.b.getValue(x);return this._operation(O,Q)}getClassName(){return this._className}}},14213:(x,O,Q)=>{Q.d(O,{d:()=>o});var X=Q(12726),Z=Q(12707);const n="cachedOperationValue",V="cachedExecutionId";class o extends X.d{constructor(x,O){super(O),this.value=this.registerDataOutput("value",x),this.isValid=this.registerDataOutput("isValid",Z.g)}_updateOutputs(x){const O=x._getExecutionVariable(this,V,-1),Q=x._getExecutionVariable(this,n,null);if(void 0!==Q&&null!==Q&&O===x.executionId)this.isValid.setValue(!0,x),this.value.setValue(Q,x);else try{const O=this._doOperation(x);if(void 0===O||null===O)return void this.isValid.setValue(!1,x);x._setExecutionVariable(this,n,O),x._setExecutionVariable(this,V,x.executionId),this.value.setValue(O,x),this.isValid.setValue(!0,x)}catch(X){this.isValid.setValue(!1,x)}}}},14216:(x,O,Q)=>{Q.d(O,{e:()=>Z});var X=Q(14213);class Z extends X.d{constructor(x,O,Q,X,Z){super(O,Z),this._operation=Q,this._className=X,this.a=this.registerDataInput("a",x)}_doOperation(x){return this._operation(this.a.getValue(x))}getClassName(){return this._className}}}}]);