"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[70],{14004:(c,b,A)=>{A.r(b),A.d(b,{FlowGraphReceiveCustomEventBlock:()=>s});var o=A(12803),t=A(525),n=A(633),h=A(12744);class s extends o.e{constructor(c){super(c),this.config=c,this.initPriority=1;for(const b in this.config.eventData)this.registerDataOutput(b,this.config.eventData[b].type)}_preparePendingTasks(c){const b=c.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(b&&b.hasObservers()&&b.observers.length>h.b.MaxEventsPerType)return void this._reportError(c,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${h.b.MaxEventsPerType}.`);const A=b.add((b=>{const A=Object.keys(b);for(const t of A){var o;null===(o=this.getDataOutput(t))||void 0===o||o.setValue(b[t],c)}this._execute(c)}));c._setExecutionVariable(this,"_eventObserver",A)}_cancelPendingTasks(c){const b=c.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(b){const A=c._getExecutionVariable(this,"_eventObserver",null);b.remove(A)}else t.d.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(c,b){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,n.d)("FlowGraphReceiveCustomEventBlock",s)}}]);