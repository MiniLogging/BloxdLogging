"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[70],{13741:(L,j,P)=>{P.r(j),P.d(j,{FlowGraphReceiveCustomEventBlock:()=>u});var A=P(12538),R=P(475),o=P(606),Y=P(12491);class u extends A.b{constructor(L){super(L),this.config=L,this.initPriority=1;for(const j in this.config.eventData)this.registerDataOutput(j,this.config.eventData[j].type)}_preparePendingTasks(L){const j=L.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(j&&j.hasObservers()&&j.observers.length>Y.e.MaxEventsPerType)return void this._reportError(L,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${Y.e.MaxEventsPerType}.`);const P=j.add((j=>{const P=Object.keys(j);for(const R of P){var A;null===(A=this.getDataOutput(R))||void 0===A||A.setValue(j[R],L)}this._execute(L)}));L._setExecutionVariable(this,"_eventObserver",P)}_cancelPendingTasks(L){const j=L.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(j){const P=L._getExecutionVariable(this,"_eventObserver",null);j.remove(P)}else R.d.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(L,j){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,o.h)("FlowGraphReceiveCustomEventBlock",u)}}]);