"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[70],{14294:(Q,X,C)=>{C.r(X),C.d(X,{FlowGraphReceiveCustomEventBlock:()=>O});var l=C(13107),h=C(487),M=C(620),f=C(13048);class O extends l.e{constructor(Q){super(Q),this.config=Q,this.initPriority=1;for(const X in this.config.eventData)this.registerDataOutput(X,this.config.eventData[X].type)}_preparePendingTasks(Q){const X=Q.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(X&&X.hasObservers()&&X.observers.length>f.c.MaxEventsPerType)return void this._reportError(Q,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${f.c.MaxEventsPerType}.`);const C=X.add((X=>{const C=Object.keys(X);for(const h of C){var l;null===(l=this.getDataOutput(h))||void 0===l||l.setValue(X[h],Q)}this._execute(Q)}));Q._setExecutionVariable(this,"_eventObserver",C)}_cancelPendingTasks(Q){const X=Q.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(X){const C=Q._getExecutionVariable(this,"_eventObserver",null);X.remove(C)}else h.i.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(Q,X){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,M.g)("FlowGraphReceiveCustomEventBlock",O)}}]);