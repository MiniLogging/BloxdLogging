"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[70],{14186:(v,d,Q)=>{Q.r(d),Q.d(d,{FlowGraphReceiveCustomEventBlock:()=>F});var n=Q(12956),T=Q(475),L=Q(591),e=Q(12897);class F extends n.d{constructor(v){super(v),this.config=v,this.initPriority=1;for(const d in this.config.eventData)this.registerDataOutput(d,this.config.eventData[d].type)}_preparePendingTasks(v){const d=v.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(d&&d.hasObservers()&&d.observers.length>e.c.MaxEventsPerType)return void this._reportError(v,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${e.c.MaxEventsPerType}.`);const Q=d.add((d=>{const Q=Object.keys(d);for(const T of Q){var n;null===(n=this.getDataOutput(T))||void 0===n||n.setValue(d[T],v)}this._execute(v)}));v._setExecutionVariable(this,"_eventObserver",Q)}_cancelPendingTasks(v){const d=v.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(d){const Q=v._getExecutionVariable(this,"_eventObserver",null);d.remove(Q)}else T.e.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(v,d){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,L.f)("FlowGraphReceiveCustomEventBlock",F)}}]);