"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[71],{14065:(P,Q,O)=>{O.r(Q),O.d(Q,{FlowGraphSetDelayBlock:()=>L});var b,F=O(12916),g=O(12871),m=O(537);!function(P){P[P.INIT=0]="INIT",P[P.STARTED=1]="STARTED",P[P.ENDED=2]="ENDED"}(b||(b={}));class q{constructor(P){this.onEachCountObservable=new m.d,this.onTimerAbortedObservable=new m.d,this.onTimerEndedObservable=new m.d,this.onStateChangedObservable=new m.d,this._observer=null,this._breakOnNextTick=!1,this._tick=P=>{const Q=Date.now();this._timer=Q-this._startTime;const O={startTime:this._startTime,currentTime:Q,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:P},b=this._breakOnNextTick||this._breakCondition(O);b||this._timer>=this._timeToEnd?this._stop(O,b):this.onEachCountObservable.notifyObservers(O)},this._setState(0),this._contextObservable=P.contextObservable,this._observableParameters=P.observableParameters??{},this._breakCondition=P.breakCondition??(()=>!1),this._timeToEnd=P.timeout,P.onEnded&&this.onTimerEndedObservable.add(P.onEnded),P.cl&&this.onEachCountObservable.add(P.cl),P.onAborted&&this.onTimerAbortedObservable.add(P.onAborted)}set breakCondition(P){this._breakCondition=P}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let P=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=P,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(P){this._state=P,this.onStateChangedObservable.notifyObservers(this._state)}_stop(P){let Q=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),Q?this.onTimerAbortedObservable.notifyObservers(P):this.onTimerEndedObservable.notifyObservers(P)}}var R=O(561),X=O(696),C=O(12867);class L extends F.b{constructor(P){super(P),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",g.o),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",g.h,new C.c(-1))}_preparePendingTasks(P){const Q=this.duration.getValue(P);if(Q<0||isNaN(Q)||!isFinite(Q))return this._reportError(P,"Invalid duration in SetDelay block");if(P._getGlobalContextVariable("activeDelays",0)>=L.MaxParallelDelayCount)return this._reportError(P,"Max parallel delays reached");const O=P._getGlobalContextVariable("lastDelayIndex",-1),b=P._getExecutionVariable(this,"pendingDelays",[]),F=P.configuration.qg,g=new q({timeout:1e3*Q,contextObservable:F.onBeforeRenderObservable,onEnded:()=>this._onEnded(g,P)});g.start();const m=O+1;this.lastDelayIndex.setValue(new C.c(m),P),P._setGlobalContextVariable("lastDelayIndex",m),b[m]=g,P._setExecutionVariable(this,"pendingDelays",b),this._updateGlobalTimers(P)}_cancelPendingTasks(P){const Q=P._getExecutionVariable(this,"pendingDelays",[]);for(const O of Q)null===O||void 0===O||O.dispose();P._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new C.c(-1),P),this._updateGlobalTimers(P)}_execute(P,Q){Q!==this.cancel?(this._preparePendingTasks(P),this.out._activateSignal(P)):this._cancelPendingTasks(P)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(P,Q){const O=Q._getExecutionVariable(this,"pendingDelays",[]),b=O.indexOf(P);-1!==b?O.splice(b,1):R.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),Q._removePendingBlock(this),this.done._activateSignal(Q),this._updateGlobalTimers(Q)}_updateGlobalTimers(P){const Q=P._getExecutionVariable(this,"pendingDelays",[]),O=P._getGlobalContextVariable("pendingDelays",[]);for(let b=0;b<Q.length;b++){if(!Q[b])continue;const P=Q[b];O[b]&&O[b]!==P?R.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):O[b]=P}P._setGlobalContextVariable("pendingDelays",O)}}L.MaxParallelDelayCount=100,(0,X.f)("FlowGraphSetDelayBlock",L)}}]);