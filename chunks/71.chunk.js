"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[71],{14169:(u,F,z)=>{z.r(F),z.d(F,{FlowGraphSetDelayBlock:()=>W});var p,b=z(13e3),R=z(12952),c=z(523);!function(u){u[u.INIT=0]="INIT",u[u.STARTED=1]="STARTED",u[u.ENDED=2]="ENDED"}(p||(p={}));class I{constructor(u){this.onEachCountObservable=new c.d,this.onTimerAbortedObservable=new c.d,this.onTimerEndedObservable=new c.d,this.onStateChangedObservable=new c.d,this._observer=null,this._breakOnNextTick=!1,this._tick=u=>{const F=Date.now();this._timer=F-this._startTime;const z={startTime:this._startTime,currentTime:F,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:u},p=this._breakOnNextTick||this._breakCondition(z);p||this._timer>=this._timeToEnd?this._stop(z,p):this.onEachCountObservable.notifyObservers(z)},this._setState(0),this._contextObservable=u.contextObservable,this._observableParameters=u.observableParameters??{},this._breakCondition=u.breakCondition??(()=>!1),this._timeToEnd=u.timeout,u.onEnded&&this.onTimerEndedObservable.add(u.onEnded),u.Vk&&this.onEachCountObservable.add(u.Vk),u.onAborted&&this.onTimerAbortedObservable.add(u.onAborted)}set breakCondition(u){this._breakCondition=u}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let u=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=u,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(u){this._state=u,this.onStateChangedObservable.notifyObservers(this._state)}_stop(u){let F=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),F?this.onTimerAbortedObservable.notifyObservers(u):this.onTimerEndedObservable.notifyObservers(u)}}var G=z(541),X=z(668),j=z(12944);class W extends b.e{constructor(u){super(u),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",R.t),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",R.l,new j.d(-1))}_preparePendingTasks(u){const F=this.duration.getValue(u);if(F<0||isNaN(F)||!isFinite(F))return this._reportError(u,"Invalid duration in SetDelay block");if(u._getGlobalContextVariable("activeDelays",0)>=W.MaxParallelDelayCount)return this._reportError(u,"Max parallel delays reached");const z=u._getGlobalContextVariable("lastDelayIndex",-1),p=u._getExecutionVariable(this,"pendingDelays",[]),b=u.configuration.Je,R=new I({timeout:1e3*F,contextObservable:b.onBeforeRenderObservable,onEnded:()=>this._onEnded(R,u)});R.start();const c=z+1;this.lastDelayIndex.setValue(new j.d(c),u),u._setGlobalContextVariable("lastDelayIndex",c),p[c]=R,u._setExecutionVariable(this,"pendingDelays",p),this._updateGlobalTimers(u)}_cancelPendingTasks(u){const F=u._getExecutionVariable(this,"pendingDelays",[]);for(const z of F)null===z||void 0===z||z.dispose();u._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new j.d(-1),u),this._updateGlobalTimers(u)}_execute(u,F){F!==this.cancel?(this._preparePendingTasks(u),this.out._activateSignal(u)):this._cancelPendingTasks(u)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(u,F){const z=F._getExecutionVariable(this,"pendingDelays",[]),p=z.indexOf(u);-1!==p?z.splice(p,1):G.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),F._removePendingBlock(this),this.done._activateSignal(F),this._updateGlobalTimers(F)}_updateGlobalTimers(u){const F=u._getExecutionVariable(this,"pendingDelays",[]),z=u._getGlobalContextVariable("pendingDelays",[]);for(let p=0;p<F.length;p++){if(!F[p])continue;const u=F[p];z[p]&&z[p]!==u?G.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):z[p]=u}u._setGlobalContextVariable("pendingDelays",z)}}W.MaxParallelDelayCount=100,(0,X.h)("FlowGraphSetDelayBlock",W)}}]);