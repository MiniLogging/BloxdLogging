"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[71],{14076:(n,k,T)=>{T.r(k),T.d(k,{FlowGraphSetDelayBlock:()=>P});var c,K=T(12871),Q=T(12831),G=T(539);!function(n){n[n.INIT=0]="INIT",n[n.STARTED=1]="STARTED",n[n.ENDED=2]="ENDED"}(c||(c={}));class w{constructor(n){this.onEachCountObservable=new G.b,this.onTimerAbortedObservable=new G.b,this.onTimerEndedObservable=new G.b,this.onStateChangedObservable=new G.b,this._observer=null,this._breakOnNextTick=!1,this._tick=n=>{const k=Date.now();this._timer=k-this._startTime;const T={startTime:this._startTime,currentTime:k,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:n},c=this._breakOnNextTick||this._breakCondition(T);c||this._timer>=this._timeToEnd?this._stop(T,c):this.onEachCountObservable.notifyObservers(T)},this._setState(0),this._contextObservable=n.contextObservable,this._observableParameters=n.observableParameters??{},this._breakCondition=n.breakCondition??(()=>!1),this._timeToEnd=n.timeout,n.onEnded&&this.onTimerEndedObservable.add(n.onEnded),n.Tk&&this.onEachCountObservable.add(n.Tk),n.onAborted&&this.onTimerAbortedObservable.add(n.onAborted)}set breakCondition(n){this._breakCondition=n}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=n,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(n){this._state=n,this.onStateChangedObservable.notifyObservers(this._state)}_stop(n){let k=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),k?this.onTimerAbortedObservable.notifyObservers(n):this.onTimerEndedObservable.notifyObservers(n)}}var E=T(556),I=T(675),S=T(12829);class P extends K.e{constructor(n){super(n),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",Q.w),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",Q.j,new S.d(-1))}_preparePendingTasks(n){const k=this.duration.getValue(n);if(k<0||isNaN(k)||!isFinite(k))return this._reportError(n,"Invalid duration in SetDelay block");if(n._getGlobalContextVariable("activeDelays",0)>=P.MaxParallelDelayCount)return this._reportError(n,"Max parallel delays reached");const T=n._getGlobalContextVariable("lastDelayIndex",-1),c=n._getExecutionVariable(this,"pendingDelays",[]),K=n.configuration.me,Q=new w({timeout:1e3*k,contextObservable:K.onBeforeRenderObservable,onEnded:()=>this._onEnded(Q,n)});Q.start();const G=T+1;this.lastDelayIndex.setValue(new S.d(G),n),n._setGlobalContextVariable("lastDelayIndex",G),c[G]=Q,n._setExecutionVariable(this,"pendingDelays",c),this._updateGlobalTimers(n)}_cancelPendingTasks(n){const k=n._getExecutionVariable(this,"pendingDelays",[]);for(const T of k)null===T||void 0===T||T.dispose();n._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new S.d(-1),n),this._updateGlobalTimers(n)}_execute(n,k){k!==this.cancel?(this._preparePendingTasks(n),this.out._activateSignal(n)):this._cancelPendingTasks(n)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(n,k){const T=k._getExecutionVariable(this,"pendingDelays",[]),c=T.indexOf(n);-1!==c?T.splice(c,1):E.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),k._removePendingBlock(this),this.done._activateSignal(k),this._updateGlobalTimers(k)}_updateGlobalTimers(n){const k=n._getExecutionVariable(this,"pendingDelays",[]),T=n._getGlobalContextVariable("pendingDelays",[]);for(let c=0;c<k.length;c++){if(!k[c])continue;const n=k[c];T[c]&&T[c]!==n?E.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):T[c]=n}n._setGlobalContextVariable("pendingDelays",T)}}P.MaxParallelDelayCount=100,(0,I.f)("FlowGraphSetDelayBlock",P)}}]);