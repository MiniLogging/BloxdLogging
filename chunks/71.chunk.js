"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[71],{13867:(A,X,s)=>{s.r(X),s.d(X,{FlowGraphSetDelayBlock:()=>v});var N,f=s(12715),E=s(12677),g=s(454);!function(A){A[A.INIT=0]="INIT",A[A.STARTED=1]="STARTED",A[A.ENDED=2]="ENDED"}(N||(N={}));class K{constructor(A){this.onEachCountObservable=new g.b,this.onTimerAbortedObservable=new g.b,this.onTimerEndedObservable=new g.b,this.onStateChangedObservable=new g.b,this._observer=null,this._breakOnNextTick=!1,this._tick=A=>{const X=Date.now();this._timer=X-this._startTime;const s={startTime:this._startTime,currentTime:X,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:A},N=this._breakOnNextTick||this._breakCondition(s);N||this._timer>=this._timeToEnd?this._stop(s,N):this.onEachCountObservable.notifyObservers(s)},this._setState(0),this._contextObservable=A.contextObservable,this._observableParameters=A.observableParameters??{},this._breakCondition=A.breakCondition??(()=>!1),this._timeToEnd=A.timeout,A.onEnded&&this.onTimerEndedObservable.add(A.onEnded),A.$k&&this.onEachCountObservable.add(A.$k),A.onAborted&&this.onTimerAbortedObservable.add(A.onAborted)}set breakCondition(A){this._breakCondition=A}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let A=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=A,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(A){this._state=A,this.onStateChangedObservable.notifyObservers(this._state)}_stop(A){let X=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),X?this.onTimerAbortedObservable.notifyObservers(A):this.onTimerEndedObservable.notifyObservers(A)}}var r=s(470),i=s(616),Y=s(12672);class v extends f.c{constructor(A){super(A),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",E.n),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",E.f,new Y.e(-1))}_preparePendingTasks(A){const X=this.duration.getValue(A);if(X<0||isNaN(X)||!isFinite(X))return this._reportError(A,"Invalid duration in SetDelay block");if(A._getGlobalContextVariable("activeDelays",0)>=v.MaxParallelDelayCount)return this._reportError(A,"Max parallel delays reached");const s=A._getGlobalContextVariable("lastDelayIndex",-1),N=A._getExecutionVariable(this,"pendingDelays",[]),f=A.configuration.eg,E=new K({timeout:1e3*X,contextObservable:f.onBeforeRenderObservable,onEnded:()=>this._onEnded(E,A)});E.start();const g=s+1;this.lastDelayIndex.setValue(new Y.e(g),A),A._setGlobalContextVariable("lastDelayIndex",g),N[g]=E,A._setExecutionVariable(this,"pendingDelays",N),this._updateGlobalTimers(A)}_cancelPendingTasks(A){const X=A._getExecutionVariable(this,"pendingDelays",[]);for(const s of X)null===s||void 0===s||s.dispose();A._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new Y.e(-1),A),this._updateGlobalTimers(A)}_execute(A,X){X!==this.cancel?(this._preparePendingTasks(A),this.out._activateSignal(A)):this._cancelPendingTasks(A)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(A,X){const s=X._getExecutionVariable(this,"pendingDelays",[]),N=s.indexOf(A);-1!==N?s.splice(N,1):r.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),X._removePendingBlock(this),this.done._activateSignal(X),this._updateGlobalTimers(X)}_updateGlobalTimers(A){const X=A._getExecutionVariable(this,"pendingDelays",[]),s=A._getGlobalContextVariable("pendingDelays",[]);for(let N=0;N<X.length;N++){if(!X[N])continue;const A=X[N];s[N]&&s[N]!==A?r.b.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):s[N]=A}A._setGlobalContextVariable("pendingDelays",s)}}v.MaxParallelDelayCount=100,(0,i.f)("FlowGraphSetDelayBlock",v)}}]);