"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[71],{13895:(J,T,b)=>{b.r(T),b.d(T,{FlowGraphSetDelayBlock:()=>a});var q,t=b(12644),j=b(12603),B=b(497);!function(J){J[J.INIT=0]="INIT",J[J.STARTED=1]="STARTED",J[J.ENDED=2]="ENDED"}(q||(q={}));class Y{constructor(J){this.onEachCountObservable=new B.b,this.onTimerAbortedObservable=new B.b,this.onTimerEndedObservable=new B.b,this.onStateChangedObservable=new B.b,this._observer=null,this._breakOnNextTick=!1,this._tick=J=>{const T=Date.now();this._timer=T-this._startTime;const b={startTime:this._startTime,currentTime:T,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:J},q=this._breakOnNextTick||this._breakCondition(b);q||this._timer>=this._timeToEnd?this._stop(b,q):this.onEachCountObservable.notifyObservers(b)},this._setState(0),this._contextObservable=J.contextObservable,this._observableParameters=J.observableParameters??{},this._breakCondition=J.breakCondition??(()=>!1),this._timeToEnd=J.timeout,J.onEnded&&this.onTimerEndedObservable.add(J.onEnded),J.al&&this.onEachCountObservable.add(J.al),J.onAborted&&this.onTimerAbortedObservable.add(J.onAborted)}set breakCondition(J){this._breakCondition=J}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(){let J=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._timeToEnd;if(1===this._state)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=J,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){1===this._state&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(J){this._state=J,this.onStateChangedObservable.notifyObservers(this._state)}_stop(J){let T=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this._contextObservable.remove(this._observer),this._setState(2),T?this.onTimerAbortedObservable.notifyObservers(J):this.onTimerEndedObservable.notifyObservers(J)}}var C=b(519),F=b(639),A=b(12598);class a extends t.b{constructor(J){super(J),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",j.r),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",j.i,new A.e(-1))}_preparePendingTasks(J){const T=this.duration.getValue(J);if(T<0||isNaN(T)||!isFinite(T))return this._reportError(J,"Invalid duration in SetDelay block");if(J._getGlobalContextVariable("activeDelays",0)>=a.MaxParallelDelayCount)return this._reportError(J,"Max parallel delays reached");const b=J._getGlobalContextVariable("lastDelayIndex",-1),q=J._getExecutionVariable(this,"pendingDelays",[]),t=J.configuration.cg,j=new Y({timeout:1e3*T,contextObservable:t.onBeforeRenderObservable,onEnded:()=>this._onEnded(j,J)});j.start();const B=b+1;this.lastDelayIndex.setValue(new A.e(B),J),J._setGlobalContextVariable("lastDelayIndex",B),q[B]=j,J._setExecutionVariable(this,"pendingDelays",q),this._updateGlobalTimers(J)}_cancelPendingTasks(J){const T=J._getExecutionVariable(this,"pendingDelays",[]);for(const b of T)null===b||void 0===b||b.dispose();J._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new A.e(-1),J),this._updateGlobalTimers(J)}_execute(J,T){T!==this.cancel?(this._preparePendingTasks(J),this.out._activateSignal(J)):this._cancelPendingTasks(J)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(J,T){const b=T._getExecutionVariable(this,"pendingDelays",[]),q=b.indexOf(J);-1!==q?b.splice(q,1):C.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),T._removePendingBlock(this),this.done._activateSignal(T),this._updateGlobalTimers(T)}_updateGlobalTimers(J){const T=J._getExecutionVariable(this,"pendingDelays",[]),b=J._getGlobalContextVariable("pendingDelays",[]);for(let q=0;q<T.length;q++){if(!T[q])continue;const J=T[q];b[q]&&b[q]!==J?C.d.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):b[q]=J}J._setGlobalContextVariable("pendingDelays",b)}}a.MaxParallelDelayCount=100,(0,F.g)("FlowGraphSetDelayBlock",a)}}]);