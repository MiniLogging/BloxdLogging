"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[35],{13480:(x,O,Q)=>{function X(x){return Math.floor(x/8)}function Z(x){return 1<<x%8}Q.d(O,{OptimizeIndices:()=>V});class n{constructor(x){this.size=x,this._byteArray=new Uint8Array(Math.ceil(this.size/8))}get(x){if(x>=this.size)throw new RangeError("Bit index out of range");const O=X(x),Q=Z(x);return 0!==(this._byteArray[O]&Q)}set(x,O){if(x>=this.size)throw new RangeError("Bit index out of range");const Q=X(x),n=Z(x);O?this._byteArray[Q]|=n:this._byteArray[Q]&=~n}}function V(x){const O=[],Q=x.length/3;for(let n=0;n<Q;n++)O.push([x[3*n],x[3*n+1],x[3*n+2]]);const X=new Map;for(let n=0;n<O.length;n++){const x=O[n];for(const O of x){let x=X.get(O);x||X.set(O,x=[]),x.push(n)}}const Z=new n(Q),V=[],o=x=>{const Q=[x];for(;Q.length>0;){const x=Q.pop();if(!Z.get(x)){Z.set(x,!0),V.push(O[x]);for(const n of O[x]){const x=X.get(n);if(!x)return;for(const O of x)Z.get(O)||Q.push(O)}}}};for(let n=0;n<Q;n++)Z.get(n)||o(n);let l=0;for(const n of V)x[l++]=n[0],x[l++]=n[1],x[l++]=n[2]}}}]);