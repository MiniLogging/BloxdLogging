"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[35],{13464:(q,f,j)=>{function d(q){return Math.floor(q/8)}function g(q){return 1<<q%8}j.d(f,{OptimizeIndices:()=>L});class h{constructor(q){this.size=q,this._byteArray=new Uint8Array(Math.ceil(this.size/8))}get(q){if(q>=this.size)throw new RangeError("Bit index out of range");const f=d(q),j=g(q);return 0!==(this._byteArray[f]&j)}set(q,f){if(q>=this.size)throw new RangeError("Bit index out of range");const j=d(q),h=g(q);f?this._byteArray[j]|=h:this._byteArray[j]&=~h}}function L(q){const f=[],j=q.length/3;for(let h=0;h<j;h++)f.push([q[3*h],q[3*h+1],q[3*h+2]]);const d=new Map;for(let h=0;h<f.length;h++){const q=f[h];for(const f of q){let q=d.get(f);q||d.set(f,q=[]),q.push(h)}}const g=new h(j),L=[],Q=q=>{const j=[q];for(;j.length>0;){const q=j.pop();if(!g.get(q)){g.set(q,!0),L.push(f[q]);for(const h of f[q]){const q=d.get(h);if(!q)return;for(const f of q)g.get(f)||j.push(f)}}}};for(let h=0;h<j;h++)g.get(h)||Q(h);let H=0;for(const h of L)q[H++]=h[0],q[H++]=h[1],q[H++]=h[2]}}}]);