"use strict";(self.webpackChunkbloxd=self.webpackChunkbloxd||[]).push([[35],{13406:(q,c,U)=>{function J(q){return Math.floor(q/8)}function Q(q){return 1<<q%8}U.d(c,{OptimizeIndices:()=>g});class s{constructor(q){this.size=q,this._byteArray=new Uint8Array(Math.ceil(this.size/8))}get(q){if(q>=this.size)throw new RangeError("Bit index out of range");const c=J(q),U=Q(q);return 0!==(this._byteArray[c]&U)}set(q,c){if(q>=this.size)throw new RangeError("Bit index out of range");const U=J(q),s=Q(q);c?this._byteArray[U]|=s:this._byteArray[U]&=~s}}function g(q){const c=[],U=q.length/3;for(let s=0;s<U;s++)c.push([q[3*s],q[3*s+1],q[3*s+2]]);const J=new Map;for(let s=0;s<c.length;s++){const q=c[s];for(const c of q){let q=J.get(c);q||J.set(c,q=[]),q.push(s)}}const Q=new s(U),g=[],X=q=>{const U=[q];for(;U.length>0;){const q=U.pop();if(!Q.get(q)){Q.set(q,!0),g.push(c[q]);for(const s of c[q]){const q=J.get(s);if(!q)return;for(const c of q)Q.get(c)||U.push(c)}}}};for(let s=0;s<U;s++)Q.get(s)||X(s);let n=0;for(const s of g)q[n++]=s[0],q[n++]=s[1],q[n++]=s[2]}}}]);